Before MISched:
# Machine code for function diffusion: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0
  %1:gpr32 = COPY $w0
  STRWui %1:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)
  %2:gpr64common = ADRP target-flags(aarch64-page) @timeron
  %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %3:gpr32, %bb.2
  B %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 5
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  %5:gpr32 = LDRWui %stack.0.ifmortar.addr, 0 :: (dereferenceable load 4 from %ir.ifmortar.addr)
  CBZW %5:gpr32, %bb.4
  B %bb.3

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setuppc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setpcmo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %6:gpr64common = ADRP target-flags(aarch64-page) @ntot
  %7:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %8:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  $x0 = COPY %8:gpr64
  $w1 = COPY %7:gpr32
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %10:gpr64common = ADRP target-flags(aarch64-page) @nmor
  %11:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %12:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  $x0 = COPY %12:gpr64
  $w1 = COPY %11:gpr32
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  %16:gpr64common = ADRP target-flags(aarch64-page) @nelt
  undef %340.sub_32:gpr64 = MOVi32imm 1000
  %342:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
  undef %346.sub_32:gpr64 = MOVi32imm 200
  %356:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  %362:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  %386:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult

bb.5.for.cond:
; predecessors: %bb.4, %bb.15
  successors: %bb.6(0x7c000000), %bb.16(0x04000000); %bb.6(96.88%), %bb.16(3.12%)

  %15:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %17:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %15:gpr32, %17:gpr32, implicit-def $nzcv
  Bcc 10, %bb.16, implicit killed $nzcv
  B %bb.6

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

bb.7.for.cond4:
; predecessors: %bb.6, %bb.14
  successors: %bb.8(0x7c000000), %bb.15(0x04000000); %bb.8(96.88%), %bb.15(3.12%)

  %324:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %324:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.15, implicit killed $nzcv
  B %bb.8

bb.8.for.body6:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

bb.9.for.cond7:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

  %329:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %329:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit killed $nzcv
  B %bb.10

bb.10.for.body9:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

bb.11.for.cond10:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %334:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit killed $nzcv
  B %bb.12

bb.12.for.body12:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %338:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %341:gpr64 = MADDXrrr %338:gpr64, %340:gpr64, $xzr
  %343:gpr64 = ADDXrr %342:gpr64, %341:gpr64
  %344:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %347:gpr64 = MADDXrrr %344:gpr64, %346:gpr64, $xzr
  %348:gpr64 = ADDXrr %343:gpr64, %347:gpr64
  %349:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %350:gpr64 = ADDXrs %349:gpr64, %349:gpr64, 2
  %351:gpr64 = UBFMXri %350:gpr64, 61, 60
  %352:gpr64common = ADDXrr %348:gpr64, %351:gpr64
  %353:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %354:gpr64 = UBFMXri %353:gpr64, 61, 60
  %355:fpr64 = LDRDroX %352:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
  %357:gpr64 = ADDXrr %356:gpr64, %341:gpr64
  %358:gpr64 = ADDXrr %357:gpr64, %347:gpr64
  %359:gpr64common = ADDXrr %358:gpr64, %351:gpr64
  %360:fpr64 = LDRDroX %359:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
  %361:fpr64 = FMULDrr %355:fpr64, %360:fpr64
  %363:gpr64 = ADDXrr %362:gpr64, %341:gpr64
  %364:gpr64 = ADDXrr %363:gpr64, %347:gpr64
  %365:gpr64common = ADDXrr %364:gpr64, %351:gpr64
  STRDroX %361:fpr64, %365:gpr64common, %354:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
  %366:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  %367:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %368:gpr64 = MADDXrrr %367:gpr64, %340:gpr64, $xzr
  %369:gpr64 = ADDXrr %356:gpr64, %368:gpr64
  %370:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %371:gpr64 = MADDXrrr %370:gpr64, %346:gpr64, $xzr
  %372:gpr64 = ADDXrr %369:gpr64, %371:gpr64
  %373:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %374:gpr64 = ADDXrs %373:gpr64, %373:gpr64, 2
  %375:gpr64 = UBFMXri %374:gpr64, 61, 60
  %376:gpr64common = ADDXrr %372:gpr64, %375:gpr64
  %377:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %379:gpr64 = UBFMXri %377:gpr64common, 61, 60
  %380:fpr64 = LDRDroX %376:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
  %381:gpr64 = ADDXrr %362:gpr64, %368:gpr64
  %382:gpr64 = ADDXrr %381:gpr64, %371:gpr64
  %383:gpr64common = ADDXrr %382:gpr64, %375:gpr64
  %384:fpr64 = LDRDroX %383:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  %385:fpr64 = FMULDrr %380:fpr64, %384:fpr64
  %387:gpr64 = ADDXrr %386:gpr64, %368:gpr64
  %388:gpr64 = ADDXrr %387:gpr64, %371:gpr64
  %389:gpr64common = ADDXrr %388:gpr64, %375:gpr64
  %390:fpr64 = LDRDroX %389:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
  %391:fpr64 = FMULDrr %385:fpr64, %390:fpr64
  %392:fpr64 = FADDDrr %366:fpr64, %391:fpr64
  STRDui %392:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  %393:gpr32common = nsw ADDWri %377.sub_32:gpr64common, 1, 0
  STRWui %393:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  B %bb.11

bb.13.for.inc61:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %336:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
  STRWui %337:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  B %bb.9

bb.14.for.inc64:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %331:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
  STRWui %332:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  B %bb.7

bb.15.for.inc67:
; predecessors: %bb.7
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %326:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %327:gpr32common = nsw ADDWri %326:gpr32common, 1, 0
  STRWui %327:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.5

bb.16.for.end69:
; predecessors: %bb.5
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
  %311:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
  %314:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  %317:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx

bb.17.for.cond70:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

  %20:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %22:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  dead $wzr = SUBSWrr %20:gpr32, %22:gpr32, implicit-def $nzcv
  Bcc 10, %bb.19, implicit killed $nzcv
  B %bb.18

bb.18.for.body72:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %309:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %312:gpr64 = UBFMXri %309:gpr64common, 61, 60
  %313:fpr64 = LDRDroX %311:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
  %315:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
  %316:fpr64 = FMULDrr %313:fpr64, %315:fpr64
  STRDroX %316:fpr64, %317:gpr64common, %312:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
  %318:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  %319:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
  %320:fpr64 = FMULDrr %319:fpr64, %316:fpr64
  %321:fpr64 = FADDDrr %318:fpr64, %320:fpr64
  STRDui %321:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  %322:gpr32common = nsw ADDWri %309.sub_32:gpr64common, 1, 0
  STRWui %322:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  B %bb.17

bb.19.for.end88:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %24:gpr32 = MOVi32imm 1
  STRWui %24:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  %26:gpr64common = ADRP target-flags(aarch64-page) @nmxh
  undef %255.sub_32:gpr64 = MOVi32imm 1000
  undef %261.sub_32:gpr64 = MOVi32imm 200
  %277:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  %232:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  %220:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  undef %196.sub_32:gpr64 = MOVi32imm 24
  %198:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  %131:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  %107:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  %112:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor

bb.20.for.cond89:
; predecessors: %bb.19, %bb.72
  successors: %bb.21(0x7c000000), %bb.73(0x04000000); %bb.21(96.88%), %bb.73(3.12%)

  %25:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  %27:gpr32 = LDRWui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  dead $wzr = SUBSWrr %25:gpr32, %27:gpr32, implicit-def $nzcv
  Bcc 12, %bb.73, implicit killed $nzcv
  B %bb.21

bb.21.for.body91:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.38(0x40000000); %bb.22(50.00%), %bb.38(50.00%)

  %40:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  dead $wzr = SUBSWri %40:gpr32common, 2, 0, implicit-def $nzcv
  Bcc 11, %bb.38, implicit killed $nzcv
  B %bb.22

bb.22.if.then93:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

bb.23.for.cond94:
; predecessors: %bb.22, %bb.33
  successors: %bb.24(0x7c000000), %bb.34(0x04000000); %bb.24(96.88%), %bb.34(3.12%)

  %44:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %46:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %44:gpr32, %46:gpr32, implicit-def $nzcv
  Bcc 10, %bb.34, implicit killed $nzcv
  B %bb.24

bb.24.for.body96:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

bb.25.for.cond97:
; predecessors: %bb.24, %bb.32
  successors: %bb.26(0x7c000000), %bb.33(0x04000000); %bb.26(96.88%), %bb.33(3.12%)

  %239:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %239:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit killed $nzcv
  B %bb.26

bb.26.for.body99:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

bb.27.for.cond100:
; predecessors: %bb.26, %bb.31
  successors: %bb.28(0x7c000000), %bb.32(0x04000000); %bb.28(96.88%), %bb.32(3.12%)

  %244:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %244:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.32, implicit killed $nzcv
  B %bb.28

bb.28.for.body102:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

bb.29.for.cond103:
; predecessors: %bb.28, %bb.30
  successors: %bb.30(0x7c000000), %bb.31(0x04000000); %bb.30(96.88%), %bb.31(3.12%)

  %249:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %249:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.31, implicit killed $nzcv
  B %bb.30

bb.30.for.body105:
; predecessors: %bb.29
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %253:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %256:gpr64 = MADDXrrr %253:gpr64, %255:gpr64, $xzr
  %258:gpr64 = ADDXrr %342:gpr64, %256:gpr64
  %259:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %262:gpr64 = MADDXrrr %259:gpr64, %261:gpr64, $xzr
  %263:gpr64 = ADDXrr %258:gpr64, %262:gpr64
  %264:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %265:gpr64 = ADDXrs %264:gpr64, %264:gpr64, 2
  %266:gpr64 = UBFMXri %265:gpr64, 61, 60
  %267:gpr64common = ADDXrr %263:gpr64, %266:gpr64
  %268:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %269:gpr64 = UBFMXri %268:gpr64, 61, 60
  %270:fpr64 = LDRDroX %267:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
  %272:gpr64 = ADDXrr %356:gpr64, %256:gpr64
  %273:gpr64 = ADDXrr %272:gpr64, %262:gpr64
  %274:gpr64common = ADDXrr %273:gpr64, %266:gpr64
  %275:fpr64 = LDRDroX %274:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
  %276:fpr64 = FMULDrr %270:fpr64, %275:fpr64
  %278:gpr64 = ADDXrr %277:gpr64, %256:gpr64
  %279:gpr64 = ADDXrr %278:gpr64, %262:gpr64
  %280:gpr64common = ADDXrr %279:gpr64, %266:gpr64
  STRDroX %276:fpr64, %280:gpr64common, %269:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
  %281:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  %282:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %283:gpr64 = MADDXrrr %282:gpr64, %255:gpr64, $xzr
  %284:gpr64 = ADDXrr %356:gpr64, %283:gpr64
  %285:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %286:gpr64 = MADDXrrr %285:gpr64, %261:gpr64, $xzr
  %287:gpr64 = ADDXrr %284:gpr64, %286:gpr64
  %288:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %289:gpr64 = ADDXrs %288:gpr64, %288:gpr64, 2
  %290:gpr64 = UBFMXri %289:gpr64, 61, 60
  %291:gpr64common = ADDXrr %287:gpr64, %290:gpr64
  %292:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %294:gpr64 = UBFMXri %292:gpr64common, 61, 60
  %295:fpr64 = LDRDroX %291:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
  %296:gpr64 = ADDXrr %277:gpr64, %283:gpr64
  %297:gpr64 = ADDXrr %296:gpr64, %286:gpr64
  %298:gpr64common = ADDXrr %297:gpr64, %290:gpr64
  %299:fpr64 = LDRDroX %298:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
  %300:fpr64 = FMULDrr %295:fpr64, %299:fpr64
  %302:gpr64 = ADDXrr %386:gpr64, %283:gpr64
  %303:gpr64 = ADDXrr %302:gpr64, %286:gpr64
  %304:gpr64common = ADDXrr %303:gpr64, %290:gpr64
  %305:fpr64 = LDRDroX %304:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
  %306:fpr64 = FMULDrr %300:fpr64, %305:fpr64
  %307:fpr64 = FADDDrr %281:fpr64, %306:fpr64
  STRDui %307:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  %308:gpr32common = nsw ADDWri %292.sub_32:gpr64common, 1, 0
  STRWui %308:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  B %bb.29

bb.31.for.inc161:
; predecessors: %bb.29
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %251:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %252:gpr32common = nsw ADDWri %251:gpr32common, 1, 0
  STRWui %252:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  B %bb.27

bb.32.for.inc164:
; predecessors: %bb.27
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %246:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0
  STRWui %247:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  B %bb.25

bb.33.for.inc167:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %241:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %242:gpr32common = nsw ADDWri %241:gpr32common, 1, 0
  STRWui %242:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.23

bb.34.for.end169:
; predecessors: %bb.23
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)

bb.35.for.cond170:
; predecessors: %bb.34, %bb.36
  successors: %bb.36(0x7c000000), %bb.37(0x04000000); %bb.36(96.88%), %bb.37(3.12%)

  %49:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %51:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  dead $wzr = SUBSWrr %49:gpr32, %51:gpr32, implicit-def $nzcv
  Bcc 10, %bb.37, implicit killed $nzcv
  B %bb.36

bb.36.for.body172:
; predecessors: %bb.35
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  %224:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %227:gpr64 = UBFMXri %224:gpr64common, 61, 60
  %228:fpr64 = LDRDroX %311:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
  %230:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
  %231:fpr64 = FMULDrr %228:fpr64, %230:fpr64
  STRDroX %231:fpr64, %232:gpr64common, %227:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
  %233:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  %234:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
  %235:fpr64 = FMULDrr %234:fpr64, %231:fpr64
  %236:fpr64 = FADDDrr %233:fpr64, %235:fpr64
  STRDui %236:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  %237:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0
  STRWui %237:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  B %bb.35

bb.37.for.end188:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  %53:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  STRDui %53:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
  %54:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  STRDui %54:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  %55:fpr64 = FDIVDrr %54:fpr64, %53:fpr64
  STRDui %55:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)
  %57:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %362:gpr64
  $x1 = COPY %277:gpr64
  $d0 = COPY %55:fpr64
  $w2 = COPY %57:gpr32
  BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %60:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
  %62:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %317:gpr64common
  $x1 = COPY %232:gpr64common
  $d0 = COPY %60:fpr64
  $w2 = COPY %62:gpr32
  BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.38.if.end189:
; predecessors: %bb.21, %bb.37
  successors: %bb.39(0x50000000), %bb.40(0x30000000); %bb.39(62.50%), %bb.40(37.50%)

  %66:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %66:gpr32, %bb.40
  B %bb.39

bb.39.if.then191:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 6
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.40.if.end192:
; predecessors: %bb.38, %bb.39
  successors: %bb.41(0x50000000), %bb.42(0x30000000); %bb.41(62.50%), %bb.42(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %317:gpr64common
  $x1 = COPY %362:gpr64
  BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %71:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %71:gpr32, %bb.42
  B %bb.41

bb.41.if.then194:
; predecessors: %bb.40
  successors: %bb.42(0x80000000); %bb.42(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 6
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.42.if.end195:
; predecessors: %bb.40, %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

bb.43.for.cond196:
; predecessors: %bb.42, %bb.44
  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)

  %74:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %76:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %74:gpr32, %76:gpr32, implicit-def $nzcv
  Bcc 10, %bb.45, implicit killed $nzcv
  B %bb.44

bb.44.for.body198:
; predecessors: %bb.43
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %212:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %215:gpr64 = MADDXrrr %212:gpr64, %255:gpr64, $xzr
  %217:gpr64 = ADDXrr %277:gpr64, %215:gpr64
  %219:gpr64 = ADDXrr %362:gpr64, %215:gpr64
  %221:gpr32 = LDRWroX %220:gpr64common, %212:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %217:gpr64
  $x1 = COPY %219:gpr64
  $w2 = COPY %221:gpr32
  BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %222:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0
  STRWui %223:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.43

bb.45.for.end208:
; predecessors: %bb.43
  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

  %79:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %79:gpr32, %bb.47
  B %bb.46

bb.46.if.then210:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 7
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.47.if.end211:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x50000000), %bb.49(0x30000000); %bb.48(62.50%), %bb.49(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %232:gpr64common
  $x1 = COPY %277:gpr64
  BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %84:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %84:gpr32, %bb.49
  B %bb.48

bb.48.if.then213:
; predecessors: %bb.47
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 7
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.49.if.end214:
; predecessors: %bb.47, %bb.48
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

bb.50.for.cond215:
; predecessors: %bb.49, %bb.56
  successors: %bb.51(0x7c000000), %bb.57(0x04000000); %bb.51(96.88%), %bb.57(3.12%)

  %87:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %89:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %87:gpr32, %89:gpr32, implicit-def $nzcv
  Bcc 10, %bb.57, implicit killed $nzcv
  B %bb.51

bb.51.for.body217:
; predecessors: %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  STRWui $wzr, %stack.9.iside, 0 :: (store 4 into %ir.iside)

bb.52.for.cond218:
; predecessors: %bb.51, %bb.55
  successors: %bb.53(0x7c000000), %bb.56(0x04000000); %bb.53(96.88%), %bb.56(3.12%)

  %190:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %191:gpr64common = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  dead $wzr = SUBSWri %190:gpr32common, 5, 0, implicit-def $nzcv
  Bcc 12, %bb.56, implicit killed $nzcv
  B %bb.53

bb.53.for.body220:
; predecessors: %bb.52
  successors: %bb.54(0x30000000), %bb.55(0x50000000); %bb.54(37.50%), %bb.55(62.50%)

  %199:gpr64common = MADDXrrr %191:gpr64common, %196:gpr64, %198:gpr64
  %200:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %201:gpr32 = LDRWroX %199:gpr64common, %200:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)
  CBNZW %201:gpr32, %bb.55
  B %bb.54

bb.54.if.then226:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)

  %202:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %207:gpr64 = MADDXrrr %202:gpr64, %255:gpr64, %277:gpr64
  %208:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %207:gpr64
  $w1 = COPY %208:gpr32
  $d0 = FMOVD0
  BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.55.for.inc231:
; predecessors: %bb.53, %bb.54
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  %210:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0
  STRWui %211:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)
  B %bb.52

bb.56.for.inc234:
; predecessors: %bb.52
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  %194:gpr32common = nsw ADDWri %191.sub_32:gpr64common, 1, 0
  STRWui %194:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.50

bb.57.for.end236:
; predecessors: %bb.50
  successors: %bb.58(0x80000000); %bb.58(100.00%)

  STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

bb.58.for.cond237:
; predecessors: %bb.57, %bb.68
  successors: %bb.59(0x7c000000), %bb.69(0x04000000); %bb.59(96.88%), %bb.69(3.12%)

  %93:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %95:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %93:gpr32, %95:gpr32, implicit-def $nzcv
  Bcc 10, %bb.69, implicit killed $nzcv
  B %bb.59

bb.59.for.body239:
; predecessors: %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

bb.60.for.cond240:
; predecessors: %bb.59, %bb.67
  successors: %bb.61(0x7c000000), %bb.68(0x04000000); %bb.61(96.88%), %bb.68(3.12%)

  %141:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %141:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.68, implicit killed $nzcv
  B %bb.61

bb.61.for.body242:
; predecessors: %bb.60
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

bb.62.for.cond243:
; predecessors: %bb.61, %bb.66
  successors: %bb.63(0x7c000000), %bb.67(0x04000000); %bb.63(96.88%), %bb.67(3.12%)

  %146:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.67, implicit killed $nzcv
  B %bb.63

bb.63.for.body245:
; predecessors: %bb.62
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

bb.64.for.cond246:
; predecessors: %bb.63, %bb.65
  successors: %bb.65(0x7c000000), %bb.66(0x04000000); %bb.65(96.88%), %bb.66(3.12%)

  %151:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.66, implicit killed $nzcv
  B %bb.65

bb.65.for.body248:
; predecessors: %bb.64
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  %155:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %156:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %159:gpr64 = MADDXrrr %156:gpr64, %255:gpr64, $xzr
  %161:gpr64 = ADDXrr %362:gpr64, %159:gpr64
  %162:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %165:gpr64 = MADDXrrr %162:gpr64, %261:gpr64, $xzr
  %166:gpr64 = ADDXrr %161:gpr64, %165:gpr64
  %167:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
  %169:gpr64 = UBFMXri %168:gpr64, 61, 60
  %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
  %171:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %173:gpr64 = UBFMXri %171:gpr64common, 61, 60
  %174:fpr64 = LDRDroX %170:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
  %176:gpr64 = ADDXrr %277:gpr64, %159:gpr64
  %177:gpr64 = ADDXrr %176:gpr64, %165:gpr64
  %178:gpr64common = ADDXrr %177:gpr64, %169:gpr64
  %179:fpr64 = LDRDroX %178:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
  %180:fpr64 = FMULDrr %174:fpr64, %179:fpr64
  %182:gpr64 = ADDXrr %386:gpr64, %159:gpr64
  %183:gpr64 = ADDXrr %182:gpr64, %165:gpr64
  %184:gpr64common = ADDXrr %183:gpr64, %169:gpr64
  %185:fpr64 = LDRDroX %184:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
  %186:fpr64 = FMULDrr %180:fpr64, %185:fpr64
  %187:fpr64 = FADDDrr %155:fpr64, %186:fpr64
  STRDui %187:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  %188:gpr32common = nsw ADDWri %171.sub_32:gpr64common, 1, 0
  STRWui %188:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  B %bb.64

bb.66.for.inc279:
; predecessors: %bb.64
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  %153:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
  STRWui %154:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  B %bb.62

bb.67.for.inc282:
; predecessors: %bb.62
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  %148:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
  STRWui %149:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  B %bb.60

bb.68.for.inc285:
; predecessors: %bb.60
  successors: %bb.58(0x80000000); %bb.58(100.00%)

  %143:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
  STRWui %144:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.58

bb.69.for.end287:
; predecessors: %bb.58
  successors: %bb.70(0x80000000); %bb.70(100.00%)

  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)

bb.70.for.cond288:
; predecessors: %bb.69, %bb.71
  successors: %bb.71(0x7c000000), %bb.72(0x04000000); %bb.71(96.88%), %bb.72(3.12%)

  %98:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %100:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  dead $wzr = SUBSWrr %98:gpr32, %100:gpr32, implicit-def $nzcv
  Bcc 10, %bb.72, implicit killed $nzcv
  B %bb.71

bb.71.for.body290:
; predecessors: %bb.70
  successors: %bb.70(0x80000000); %bb.70(100.00%)

  %126:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %129:gpr64 = UBFMXri %126:gpr64common, 61, 60
  %130:fpr64 = LDRDroX %232:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
  %132:fpr64 = LDRDroX %131:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
  %133:fpr64 = FMULDrr %130:fpr64, %132:fpr64
  STRDroX %133:fpr64, %232:gpr64common, %129:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
  %134:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %136:fpr64 = LDRDroX %317:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
  %137:fpr64 = FMULDrr %136:fpr64, %133:fpr64
  %138:fpr64 = FADDDrr %134:fpr64, %137:fpr64
  STRDui %138:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  %139:gpr32common = nsw ADDWri %126.sub_32:gpr64common, 1, 0
  STRWui %139:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  B %bb.70

bb.72.for.end306:
; predecessors: %bb.70
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %102:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  %103:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64
  STRDui %104:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  %106:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %107:gpr64
  $x1 = COPY %362:gpr64
  $d0 = COPY %104:fpr64
  $w2 = COPY %106:gpr32
  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %109:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %111:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %112:gpr64
  $x1 = COPY %317:gpr64common
  $d0 = COPY %109:fpr64
  $w2 = COPY %111:gpr32
  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %114:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %115:fpr64 = FNEGDr %114:fpr64
  %116:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %356:gpr64
  $x1 = COPY %277:gpr64
  $d0 = COPY %115:fpr64
  $w2 = COPY %116:gpr32
  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %119:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %120:fpr64 = FNEGDr %119:fpr64
  %121:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %314:gpr64common
  $x1 = COPY %232:gpr64common
  $d0 = COPY %120:fpr64
  $w2 = COPY %121:gpr32
  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %124:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0
  STRWui %125:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  B %bb.20

bb.73.for.end311:
; predecessors: %bb.20
  successors: %bb.74(0x50000000), %bb.75(0x30000000); %bb.74(62.50%), %bb.75(37.50%)

  %30:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %30:gpr32, %bb.75
  B %bb.74

bb.74.if.then313:
; predecessors: %bb.73
  successors: %bb.75(0x80000000); %bb.75(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 6
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.75.if.end314:
; predecessors: %bb.73, %bb.74
  successors: %bb.76(0x50000000), %bb.77(0x30000000); %bb.76(62.50%), %bb.77(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %32:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  %33:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  $x0 = COPY %32:gpr64
  $x1 = COPY %33:gpr64
  BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %35:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %35:gpr32, %bb.77
  B %bb.76

bb.76.if.then316:
; predecessors: %bb.75
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 6
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.77.if.end317:
; predecessors: %bb.75, %bb.76
  successors: %bb.78(0x50000000), %bb.79(0x30000000); %bb.78(62.50%), %bb.79(37.50%)

  %38:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %38:gpr32, %bb.79
  B %bb.78

bb.78.if.then319:
; predecessors: %bb.77
  successors: %bb.79(0x80000000); %bb.79(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 5
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.79.if.end320:
; predecessors: %bb.77, %bb.78

  RET_ReallyLR

# End machine code for function diffusion.

********** MI Scheduling **********
diffusion:%bb.0 entry
  From: %1:gpr32 = COPY $w0
    To: CBZW %3:gpr32, %bb.2
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   STRWui %1:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(2):   %2:gpr64common = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=%2
  Single Issue       : false;
SU(3):   %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%2
  Successors:
    ExitSU: Data Latency=4 Reg=%3
  Single Issue       : false;
ExitSU:   CBZW %3:gpr32, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%3
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %1:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %1:gpr32 = COPY $w0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %2:gpr64common = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(2):   %2:gpr64common = ADRP target-flags(aarch64-page) @timeron
SU(3):   %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
SU(0):   %1:gpr32 = COPY $w0
SU(1):   STRWui %1:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %16:gpr64common = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   undef %340.sub_32:gpr64 = MOVi32imm 1000
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %342:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   undef %346.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %356:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %362:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %386:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %386:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %362:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %356:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) undef %346.sub_32:gpr64 = MOVi32imm 200
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %342:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) undef %340.sub_32:gpr64 = MOVi32imm 1000
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %16:gpr64common = ADRP target-flags(aarch64-page) @nelt
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
SU(2):   %16:gpr64common = ADRP target-flags(aarch64-page) @nelt
SU(3):   undef %340.sub_32:gpr64 = MOVi32imm 1000
SU(4):   %342:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
SU(5):   undef %346.sub_32:gpr64 = MOVi32imm 200
SU(6):   %356:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
SU(7):   %362:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
SU(8):   %386:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: %12:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%12
  Single Issue       : false;
SU(1):   $x0 = COPY %12:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%12
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %11:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %11:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %12:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
SU(3):   $d0 = FMOVD0
SU(1):   $x0 = COPY %12:gpr64
SU(2):   $w1 = COPY %11:gpr32

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: %10:gpr64common = ADRP target-flags(aarch64-page) @nmor
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %10:gpr64common = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%10
  Single Issue       : false;
SU(1):   %11:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%10
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %11:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %10:gpr64common = ADRP target-flags(aarch64-page) @nmor
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %10:gpr64common = ADRP target-flags(aarch64-page) @nmor
SU(1):   %11:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: %8:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %8:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%8
  Single Issue       : false;
SU(1):   $x0 = COPY %8:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%8
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w1 = COPY %7:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = COPY %7:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = COPY %8:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %8:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %8:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
SU(3):   $d0 = FMOVD0
SU(1):   $x0 = COPY %8:gpr64
SU(2):   $w1 = COPY %7:gpr32

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: %6:gpr64common = ADRP target-flags(aarch64-page) @ntot
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %6:gpr64common = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(1):   %7:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%6
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %7:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %6:gpr64common = ADRP target-flags(aarch64-page) @ntot
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %6:gpr64common = ADRP target-flags(aarch64-page) @ntot
SU(1):   %7:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)

********** MI Scheduling **********
diffusion:%bb.5 for.cond
  From: %15:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.16, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %15:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%15
  Single Issue       : false;
SU(1):   %17:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%17
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %15:gpr32, %17:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%17
    SU(0): Data Latency=4 Reg=%15
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.16, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %15:gpr32, %17:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %17:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %15:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %15:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %17:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %15:gpr32, %17:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.7 for.cond4
  From: %324:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.15, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %324:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%324
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %324:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%324
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.15, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %324:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %324:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %324:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %324:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.9 for.cond7
  From: %329:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.14, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %329:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%329
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %329:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%329
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.14, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %329:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %329:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %329:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %329:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.11 for.cond10
  From: %334:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %334:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%334
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%334
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %334:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %334:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.12 for.body12
  From: %338:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.11
 RegionInstrs: 50
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=12
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
Live In: %386 %362 %346 %356 %340 %342 
Live Out: %386 %362 %346 %356 %340 %342 
Live Thru: GPR32=6
  LiveReg: %386
  UpdateRegP: SU(41) %387:gpr64 = ADDXrr %386:gpr64, %368:gpr64
              to 
  LiveReg: %362
  UpdateRegP: SU(18) %363:gpr64 = ADDXrr %362:gpr64, %341:gpr64
              to 
  UpdateRegP: SU(36) %381:gpr64 = ADDXrr %362:gpr64, %368:gpr64
              to 
  LiveReg: %346
  UpdateRegP: SU(4) %347:gpr64 = MADDXrrr %344:gpr64, %346:gpr64, $xzr
              to 
  UpdateRegP: SU(27) %371:gpr64 = MADDXrrr %370:gpr64, %346:gpr64, $xzr
              to 
  LiveReg: %356
  UpdateRegP: SU(13) %357:gpr64 = ADDXrr %356:gpr64, %341:gpr64
              to 
  UpdateRegP: SU(25) %369:gpr64 = ADDXrr %356:gpr64, %368:gpr64
              to 
  LiveReg: %340
  UpdateRegP: SU(1) %341:gpr64 = MADDXrrr %338:gpr64, %340:gpr64, $xzr
              to 
  UpdateRegP: SU(24) %368:gpr64 = MADDXrrr %367:gpr64, %340:gpr64, $xzr
              to 
  LiveReg: %342
  UpdateRegP: SU(2) %343:gpr64 = ADDXrr %342:gpr64, %341:gpr64
              to 
Top Pressure:
GPR32=6
Bottom Pressure:
GPR32=6
Excess PSets: 
Cluster ld/st SU(3) - SU(26)
  Copy Succ SU(4)
Cluster ld/st SU(6) - SU(29)
  Copy Succ SU(7)
Cluster ld/st SU(10) - SU(33)
  Copy Succ SU(11)
  Copy Succ SU(49)
Cluster ld/st SU(0) - SU(23)
  Copy Succ SU(1)
SU(0):   %338:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(1): Data Latency=4 Reg=%338
    SU(23): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %341:gpr64 = MADDXrrr %338:gpr64, %340:gpr64, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(0): Data Latency=4 Reg=%338
    SU(23): Ord  Latency=0 Artificial
  Successors:
    SU(18): Data Latency=1 Reg=%341
    SU(13): Data Latency=1 Reg=%341
    SU(2): Data Latency=1 Reg=%341
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %343:gpr64 = ADDXrr %342:gpr64, %341:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%341
  Successors:
    SU(5): Data Latency=1 Reg=%343
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %344:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(4): Data Latency=4 Reg=%344
    SU(26): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %347:gpr64 = MADDXrrr %344:gpr64, %346:gpr64, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(3): Data Latency=4 Reg=%344
    SU(26): Ord  Latency=0 Artificial
  Successors:
    SU(19): Data Latency=1 Reg=%347
    SU(14): Data Latency=1 Reg=%347
    SU(5): Data Latency=1 Reg=%347
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %348:gpr64 = ADDXrr %343:gpr64, %347:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(2): Data Latency=1 Reg=%343
    SU(4): Data Latency=1 Reg=%347
  Successors:
    SU(9): Data Latency=1 Reg=%348
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %349:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(7): Data Latency=4 Reg=%349
    SU(29): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %350:gpr64 = ADDXrs %349:gpr64, %349:gpr64, 2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(6): Data Latency=4 Reg=%349
    SU(29): Ord  Latency=0 Artificial
  Successors:
    SU(8): Data Latency=1 Reg=%350
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %351:gpr64 = UBFMXri %350:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(7): Data Latency=1 Reg=%350
  Successors:
    SU(20): Data Latency=1 Reg=%351
    SU(15): Data Latency=1 Reg=%351
    SU(9): Data Latency=1 Reg=%351
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %352:gpr64common = ADDXrr %348:gpr64, %351:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(5): Data Latency=1 Reg=%348
    SU(8): Data Latency=1 Reg=%351
  Successors:
    SU(12): Data Latency=1 Reg=%352
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %353:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(11): Data Latency=4 Reg=%353
    SU(49): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %354:gpr64 = UBFMXri %353:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(10): Data Latency=4 Reg=%353
    SU(33): Ord  Latency=0 Artificial
  Successors:
    SU(21): Data Latency=1 Reg=%354
    SU(16): Data Latency=1 Reg=%354
    SU(12): Data Latency=1 Reg=%354
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %355:fpr64 = LDRDroX %352:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(9): Data Latency=1 Reg=%352
    SU(11): Data Latency=1 Reg=%354
  Successors:
    SU(17): Data Latency=4 Reg=%355
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(13):   %357:gpr64 = ADDXrr %356:gpr64, %341:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%341
  Successors:
    SU(14): Data Latency=1 Reg=%357
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %358:gpr64 = ADDXrr %357:gpr64, %347:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(13): Data Latency=1 Reg=%357
    SU(4): Data Latency=1 Reg=%347
  Successors:
    SU(15): Data Latency=1 Reg=%358
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %359:gpr64common = ADDXrr %358:gpr64, %351:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(14): Data Latency=1 Reg=%358
    SU(8): Data Latency=1 Reg=%351
  Successors:
    SU(16): Data Latency=1 Reg=%359
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %360:fpr64 = LDRDroX %359:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(15): Data Latency=1 Reg=%359
    SU(11): Data Latency=1 Reg=%354
  Successors:
    SU(17): Data Latency=4 Reg=%360
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(17):   %361:fpr64 = FMULDrr %355:fpr64, %360:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 9
  Predecessors:
    SU(16): Data Latency=4 Reg=%360
    SU(12): Data Latency=4 Reg=%355
  Successors:
    SU(21): Data Latency=1 Reg=%361
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   %363:gpr64 = ADDXrr %362:gpr64, %341:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(1): Data Latency=1 Reg=%341
  Successors:
    SU(19): Data Latency=1 Reg=%363
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %364:gpr64 = ADDXrr %363:gpr64, %347:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(18): Data Latency=1 Reg=%363
    SU(4): Data Latency=1 Reg=%347
  Successors:
    SU(20): Data Latency=1 Reg=%364
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(20):   %365:gpr64common = ADDXrr %364:gpr64, %351:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(19): Data Latency=1 Reg=%364
    SU(8): Data Latency=1 Reg=%351
  Successors:
    SU(21): Data Latency=1 Reg=%365
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   STRDroX %361:fpr64, %365:gpr64common, %354:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(17): Data Latency=1 Reg=%361
    SU(20): Data Latency=1 Reg=%365
    SU(11): Data Latency=1 Reg=%354
  Successors:
    SU(39): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(22):   %366:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(46): Data Latency=4 Reg=%366
    SU(47): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(23):   %367:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(24): Data Latency=4 Reg=%367
    SU(1): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   %368:gpr64 = MADDXrrr %367:gpr64, %340:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(23): Data Latency=4 Reg=%367
  Successors:
    SU(41): Data Latency=1 Reg=%368
    SU(36): Data Latency=1 Reg=%368
    SU(25): Data Latency=1 Reg=%368
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %369:gpr64 = ADDXrr %356:gpr64, %368:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%368
  Successors:
    SU(28): Data Latency=1 Reg=%369
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %370:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Predecessors:
    SU(3): Ord  Latency=0 Cluster
  Successors:
    SU(27): Data Latency=4 Reg=%370
    SU(4): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   %371:gpr64 = MADDXrrr %370:gpr64, %346:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(26): Data Latency=4 Reg=%370
  Successors:
    SU(42): Data Latency=1 Reg=%371
    SU(37): Data Latency=1 Reg=%371
    SU(28): Data Latency=1 Reg=%371
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %372:gpr64 = ADDXrr %369:gpr64, %371:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(25): Data Latency=1 Reg=%369
    SU(27): Data Latency=1 Reg=%371
  Successors:
    SU(32): Data Latency=1 Reg=%372
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(29):   %373:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Predecessors:
    SU(6): Ord  Latency=0 Cluster
  Successors:
    SU(30): Data Latency=4 Reg=%373
    SU(7): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(30):   %374:gpr64 = ADDXrs %373:gpr64, %373:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(29): Data Latency=4 Reg=%373
  Successors:
    SU(31): Data Latency=1 Reg=%374
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %375:gpr64 = UBFMXri %374:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(30): Data Latency=1 Reg=%374
  Successors:
    SU(43): Data Latency=1 Reg=%375
    SU(38): Data Latency=1 Reg=%375
    SU(32): Data Latency=1 Reg=%375
  Pressure Diff      : 
  Single Issue       : false;
SU(32):   %376:gpr64common = ADDXrr %372:gpr64, %375:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(28): Data Latency=1 Reg=%372
    SU(31): Data Latency=1 Reg=%375
  Successors:
    SU(35): Data Latency=1 Reg=%376
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(33):   %377:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Predecessors:
    SU(10): Ord  Latency=0 Cluster
  Successors:
    SU(48): Data Latency=4 Reg=%377
    SU(34): Data Latency=4 Reg=%377
    SU(49): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(34):   %379:gpr64 = UBFMXri %377:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(33): Data Latency=4 Reg=%377
  Successors:
    SU(44): Data Latency=1 Reg=%379
    SU(39): Data Latency=1 Reg=%379
    SU(35): Data Latency=1 Reg=%379
  Pressure Diff      : 
  Single Issue       : false;
SU(35):   %380:fpr64 = LDRDroX %376:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(32): Data Latency=1 Reg=%376
    SU(34): Data Latency=1 Reg=%379
  Successors:
    SU(40): Data Latency=4 Reg=%380
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(36):   %381:gpr64 = ADDXrr %362:gpr64, %368:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%368
  Successors:
    SU(37): Data Latency=1 Reg=%381
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %382:gpr64 = ADDXrr %381:gpr64, %371:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(36): Data Latency=1 Reg=%381
    SU(27): Data Latency=1 Reg=%371
  Successors:
    SU(38): Data Latency=1 Reg=%382
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(38):   %383:gpr64common = ADDXrr %382:gpr64, %375:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(37): Data Latency=1 Reg=%382
    SU(31): Data Latency=1 Reg=%375
  Successors:
    SU(39): Data Latency=1 Reg=%383
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(39):   %384:fpr64 = LDRDroX %383:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 7
  Predecessors:
    SU(38): Data Latency=1 Reg=%383
    SU(34): Data Latency=1 Reg=%379
    SU(21): Ord  Latency=1 Memory
  Successors:
    SU(40): Data Latency=4 Reg=%384
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(40):   %385:fpr64 = FMULDrr %380:fpr64, %384:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 3
  Predecessors:
    SU(39): Data Latency=4 Reg=%384
    SU(35): Data Latency=4 Reg=%380
  Successors:
    SU(45): Data Latency=1 Reg=%385
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(41):   %387:gpr64 = ADDXrr %386:gpr64, %368:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(24): Data Latency=1 Reg=%368
  Successors:
    SU(42): Data Latency=1 Reg=%387
  Pressure Diff      : 
  Single Issue       : false;
SU(42):   %388:gpr64 = ADDXrr %387:gpr64, %371:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(41): Data Latency=1 Reg=%387
    SU(27): Data Latency=1 Reg=%371
  Successors:
    SU(43): Data Latency=1 Reg=%388
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(43):   %389:gpr64common = ADDXrr %388:gpr64, %375:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(42): Data Latency=1 Reg=%388
    SU(31): Data Latency=1 Reg=%375
  Successors:
    SU(44): Data Latency=1 Reg=%389
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(44):   %390:fpr64 = LDRDroX %389:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(43): Data Latency=1 Reg=%389
    SU(34): Data Latency=1 Reg=%379
  Successors:
    SU(45): Data Latency=4 Reg=%390
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(45):   %391:fpr64 = FMULDrr %385:fpr64, %390:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 2
  Predecessors:
    SU(40): Data Latency=1 Reg=%385
    SU(44): Data Latency=4 Reg=%390
  Successors:
    SU(46): Data Latency=1 Reg=%391
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(46):   %392:fpr64 = FADDDrr %366:fpr64, %391:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 1
  Predecessors:
    SU(45): Data Latency=1 Reg=%391
    SU(22): Data Latency=4 Reg=%366
  Successors:
    SU(47): Data Latency=1 Reg=%392
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(47):   STRDui %392:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(46): Data Latency=1 Reg=%392
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(48):   %393:gpr32common = nsw ADDWri %377.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(33): Data Latency=4 Reg=%377
  Successors:
    SU(49): Data Latency=1 Reg=%393
  Pressure Diff      : 
  Single Issue       : false;
SU(49):   STRWui %393:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(48): Data Latency=1 Reg=%393
    SU(33): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 21
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 49 47 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
Picking from Bot:
  Cand SU(49) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(49) STRWui %393:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=7
  LiveReg: %393
  UpdateRegP: SU(49) STRWui %393:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(49) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 47 48 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(47) 21c
  BotQ.A RemainingLatency 21 + 1c > CritPath 21
Picking from Bot:
  Cand SU(47) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(47) STRDui %392:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %392
  UpdateRegP: SU(47) STRDui %392:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
              to 
  Ready @1c
  BotQ.A TopLatency SU(47) 21c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 46 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(46) 20c
  BotQ.A RemainingLatency 20 + 2c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
  Cand SU(46) BOT-PATH                  20 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(46) %392:fpr64 = FADDDrr %366:fpr64, %391:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %366
  UpdateRegP: SU(46) %392:fpr64 = FADDDrr %366:fpr64, %391:fpr64
              to 
  LiveReg: %391
  UpdateRegP: SU(46) %392:fpr64 = FADDDrr %366:fpr64, %391:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(46) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 48 45 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(45) 19c
  BotQ.A RemainingLatency 19 + 3c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
  Cand SU(45) BOT-PATH                  19 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(45) %391:fpr64 = FMULDrr %385:fpr64, %390:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %385
  UpdateRegP: SU(45) %391:fpr64 = FMULDrr %385:fpr64, %390:fpr64
              to 
  LiveReg: %390
  UpdateRegP: SU(45) %391:fpr64 = FMULDrr %385:fpr64, %390:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(45) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 44 
Queue BotQ.A: 48 40 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(40) 18c
BotQ.A RemLatency SU(44) 8c
  BotQ.A RemainingLatency 18 + 4c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(48) %393:gpr32common = nsw ADDWri %377.sub_32:gpr64common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %377
  UpdateRegP: SU(34) %379:gpr64 = UBFMXri %377:gpr64common, 61, 60
              to GPR32 -1
  UpdateRegP: SU(48) %393:gpr32common = nsw ADDWri %377.sub_32:gpr64common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 44 
Queue BotQ.A: 40 
Pick Bot ONLY1     
Scheduling SU(40) %385:fpr64 = FMULDrr %380:fpr64, %384:fpr64
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %380
  UpdateRegP: SU(40) %385:fpr64 = FMULDrr %380:fpr64, %384:fpr64
              to 
  LiveReg: %384
  UpdateRegP: SU(40) %385:fpr64 = FMULDrr %380:fpr64, %384:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(40) 18c
  BotQ.A BotLatency SU(40) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 44 39 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) %366:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @6c
  BotQ.A BotLatency SU(22) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 39 
Queue BotQ.A: 44 
Pick Bot ONLY1     
Scheduling SU(44) %390:fpr64 = LDRDroX %389:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %389
  UpdateRegP: SU(44) %390:fpr64 = LDRDroX %389:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  LiveReg: %379
  UpdateRegP: SU(35) %380:fpr64 = LDRDroX %376:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(39) %384:fpr64 = LDRDroX %383:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(44) %390:fpr64 = LDRDroX %389:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(44) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 39 
Queue BotQ.A: 43 
Pick Bot ONLY1     
Scheduling SU(43) %389:gpr64common = ADDXrr %388:gpr64, %375:gpr64
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %388
  UpdateRegP: SU(43) %389:gpr64common = ADDXrr %388:gpr64, %375:gpr64
              to 
  LiveReg: %375
  UpdateRegP: SU(32) %376:gpr64common = ADDXrr %372:gpr64, %375:gpr64
              to 
  UpdateRegP: SU(38) %383:gpr64common = ADDXrr %382:gpr64, %375:gpr64
              to 
  UpdateRegP: SU(43) %389:gpr64common = ADDXrr %388:gpr64, %375:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(43) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 35 39 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(39) 14c
  BotQ.A RemainingLatency 14 + 9c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  8 cycles 
  Cand SU(39) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(39) %384:fpr64 = LDRDroX %383:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
Bottom Pressure:
FPR8=1
GPR32=11
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %383
  UpdateRegP: SU(39) %384:fpr64 = LDRDroX %383:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 35 38 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 10c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(35) %380:fpr64 = LDRDroX %376:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
Bottom Pressure:
GPR32=12
  LiveReg: %376
  UpdateRegP: SU(35) %380:fpr64 = LDRDroX %376:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 38 32 34 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 11c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(38) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(38) %383:gpr64common = ADDXrr %382:gpr64, %375:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %382
  UpdateRegP: SU(38) %383:gpr64common = ADDXrr %382:gpr64, %375:gpr64
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(38) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 32 37 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 12c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(32) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(32) %376:gpr64common = ADDXrr %372:gpr64, %375:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %372
  UpdateRegP: SU(32) %376:gpr64common = ADDXrr %372:gpr64, %375:gpr64
              to GPR32 -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 37 28 31 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 13c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(31) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(31) %375:gpr64 = UBFMXri %374:gpr64, 61, 60
Bottom Pressure:
GPR32=12
  LiveReg: %374
  UpdateRegP: SU(31) %375:gpr64 = UBFMXri %374:gpr64, 61, 60
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(31) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 37 28 30 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 14c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(34) %379:gpr64 = UBFMXri %377:gpr64common, 61, 60
Bottom Pressure:
GPR32=11
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 30 37 28 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 15c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(42) %388:gpr64 = ADDXrr %387:gpr64, %371:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %387
  UpdateRegP: SU(42) %388:gpr64 = ADDXrr %387:gpr64, %371:gpr64
              to 
  LiveReg: %371
  UpdateRegP: SU(28) %372:gpr64 = ADDXrr %369:gpr64, %371:gpr64
              to 
  UpdateRegP: SU(37) %382:gpr64 = ADDXrr %381:gpr64, %371:gpr64
              to 
  UpdateRegP: SU(42) %388:gpr64 = ADDXrr %387:gpr64, %371:gpr64
              to GPR32 -1
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 21 30 37 41 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 16c > CritPath 21
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(37) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(37) %382:gpr64 = ADDXrr %381:gpr64, %371:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %381
  UpdateRegP: SU(37) %382:gpr64 = ADDXrr %381:gpr64, %371:gpr64
              to GPR32 -1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 21 30 41 36 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 17c > CritPath 21
Picking from Bot:
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) %372:gpr64 = ADDXrr %369:gpr64, %371:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %369
  UpdateRegP: SU(28) %372:gpr64 = ADDXrr %369:gpr64, %371:gpr64
              to GPR32 -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 21 30 41 25 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 18c > CritPath 21
Picking from Bot:
  Cand SU(36) ORDER                              
  Cand SU(41) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(41) %387:gpr64 = ADDXrr %386:gpr64, %368:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %368
  UpdateRegP: SU(25) %369:gpr64 = ADDXrr %356:gpr64, %368:gpr64
              to GPR32 -1
  UpdateRegP: SU(36) %381:gpr64 = ADDXrr %362:gpr64, %368:gpr64
              to GPR32 -1
  UpdateRegP: SU(41) %387:gpr64 = ADDXrr %386:gpr64, %368:gpr64
              to GPR32 -1
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 21 30 27 25 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 19c > CritPath 21
Picking from Bot:
  Cand SU(36) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(36) %381:gpr64 = ADDXrr %362:gpr64, %368:gpr64
Bottom Pressure:
GPR32=11
  Ready @19c
  BotQ.A TopLatency SU(36) 5c
  BotQ.A BotLatency SU(36) 10c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 21 30 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 20c > CritPath 21
Picking from Bot:
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(25) %369:gpr64 = ADDXrr %356:gpr64, %368:gpr64
Bottom Pressure:
GPR32=10
  Ready @20c
  BotQ.A TopLatency SU(25) 5c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 21 30 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 21c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(21) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(21) STRDroX %361:fpr64, %365:gpr64common, %354:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
Bottom Pressure:
FPR8=1
GPR32=12
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %361
  UpdateRegP: SU(21) STRDroX %361:fpr64, %365:gpr64common, %354:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
              to GPR32 2
  LiveReg: %365
  UpdateRegP: SU(21) STRDroX %361:fpr64, %365:gpr64common, %354:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
              to GPR32 1
  LiveReg: %354
  UpdateRegP: SU(12) %355:fpr64 = LDRDroX %352:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(16) %360:fpr64 = LDRDroX %359:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(21) STRDroX %361:fpr64, %365:gpr64common, %354:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
              to 
  Ready @21c
  BotQ.A TopLatency SU(21) 13c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 24 30 17 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 22c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(17) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %361:fpr64 = FMULDrr %355:fpr64, %360:fpr64
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %355
  UpdateRegP: SU(17) %361:fpr64 = FMULDrr %355:fpr64, %360:fpr64
              to 
  LiveReg: %360
  UpdateRegP: SU(17) %361:fpr64 = FMULDrr %355:fpr64, %360:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 27 24 30 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 23c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(30) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(30) %374:gpr64 = ADDXrs %373:gpr64, %373:gpr64, 2
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %373
  UpdateRegP: SU(30) %374:gpr64 = ADDXrs %373:gpr64, %373:gpr64, 2
              to GPR32 -1
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 27 24 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 24c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) %371:gpr64 = MADDXrrr %370:gpr64, %346:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %370
  UpdateRegP: SU(27) %371:gpr64 = MADDXrrr %370:gpr64, %346:gpr64, $xzr
              to GPR32 -1
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 20 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 25c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(24) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(24) %368:gpr64 = MADDXrrr %367:gpr64, %340:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %367
  UpdateRegP: SU(24) %368:gpr64 = MADDXrrr %367:gpr64, %340:gpr64, $xzr
              to GPR32 -1
  Ready @25c
  BotQ.A BotLatency SU(24) 11c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 16 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 26c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(16) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %360:fpr64 = LDRDroX %359:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
Bottom Pressure:
FPR8=1
GPR32=13
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %359
  UpdateRegP: SU(16) %360:fpr64 = LDRDroX %359:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @26c
  BotQ.A BotLatency SU(16) 13c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 27c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %355:fpr64 = LDRDroX %352:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
Bottom Pressure:
GPR32=14
  LiveReg: %352
  UpdateRegP: SU(12) %355:fpr64 = LDRDroX %352:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @27c
  BotQ.A TopLatency SU(12) 8c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 15 9 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 28c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(11) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %354:gpr64 = UBFMXri %353:gpr64, 61, 60
Bottom Pressure:
GPR32=14
  LiveReg: %353
  UpdateRegP: SU(11) %354:gpr64 = UBFMXri %353:gpr64, 61, 60
              to GPR32 -1
  Ready @28c
  BotQ.A BotLatency SU(11) 14c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 20 15 9 33 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 29c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(33) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(33) %377:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=13
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 20 15 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 30c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %365:gpr64common = ADDXrr %364:gpr64, %351:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %364
  UpdateRegP: SU(20) %365:gpr64common = ADDXrr %364:gpr64, %351:gpr64
              to 
  LiveReg: %351
  UpdateRegP: SU(9) %352:gpr64common = ADDXrr %348:gpr64, %351:gpr64
              to 
  UpdateRegP: SU(15) %359:gpr64common = ADDXrr %358:gpr64, %351:gpr64
              to 
  UpdateRegP: SU(20) %365:gpr64common = ADDXrr %364:gpr64, %351:gpr64
              to GPR32 -1
  Ready @30c
  BotQ.A TopLatency SU(20) 7c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 9 15 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 31c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %359:gpr64common = ADDXrr %358:gpr64, %351:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %358
  UpdateRegP: SU(15) %359:gpr64common = ADDXrr %358:gpr64, %351:gpr64
              to GPR32 -1
  Ready @31c
  BotQ.A TopLatency SU(15) 7c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 19 14 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 32c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(10) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(10) %353:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=13
  Ready @32c
  BotQ.A BotLatency SU(10) 18c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 33c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %352:gpr64common = ADDXrr %348:gpr64, %351:gpr64
Bottom Pressure:
GPR32=13
  LiveReg: %348
  UpdateRegP: SU(9) %352:gpr64common = ADDXrr %348:gpr64, %351:gpr64
              to GPR32 -1
  Ready @33c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 19 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 34c > CritPath 21
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %364:gpr64 = ADDXrr %363:gpr64, %347:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %363
  UpdateRegP: SU(19) %364:gpr64 = ADDXrr %363:gpr64, %347:gpr64
              to 
  LiveReg: %347
  UpdateRegP: SU(5) %348:gpr64 = ADDXrr %343:gpr64, %347:gpr64
              to 
  UpdateRegP: SU(14) %358:gpr64 = ADDXrr %357:gpr64, %347:gpr64
              to 
  UpdateRegP: SU(19) %364:gpr64 = ADDXrr %363:gpr64, %347:gpr64
              to GPR32 -1
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 8 5 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 35c > CritPath 21
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %358:gpr64 = ADDXrr %357:gpr64, %347:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %357
  UpdateRegP: SU(14) %358:gpr64 = ADDXrr %357:gpr64, %347:gpr64
              to GPR32 -1
  Ready @35c
  BotQ.A TopLatency SU(14) 6c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 8 5 13 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 36c > CritPath 21
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(5) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %348:gpr64 = ADDXrr %343:gpr64, %347:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %343
  UpdateRegP: SU(5) %348:gpr64 = ADDXrr %343:gpr64, %347:gpr64
              to GPR32 -1
  Ready @36c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 8 13 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 37c > CritPath 21
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %363:gpr64 = ADDXrr %362:gpr64, %341:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %341
  UpdateRegP: SU(2) %343:gpr64 = ADDXrr %342:gpr64, %341:gpr64
              to GPR32 -1
  UpdateRegP: SU(13) %357:gpr64 = ADDXrr %356:gpr64, %341:gpr64
              to GPR32 -1
  UpdateRegP: SU(18) %363:gpr64 = ADDXrr %362:gpr64, %341:gpr64
              to GPR32 -1
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 13 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 38c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %357:gpr64 = ADDXrr %356:gpr64, %341:gpr64
Bottom Pressure:
GPR32=13
  Ready @38c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 39c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %351:gpr64 = UBFMXri %350:gpr64, 61, 60
Bottom Pressure:
GPR32=13
  LiveReg: %350
  UpdateRegP: SU(8) %351:gpr64 = UBFMXri %350:gpr64, 61, 60
              to GPR32 -1
  Ready @39c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 40c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %343:gpr64 = ADDXrr %342:gpr64, %341:gpr64
Bottom Pressure:
GPR32=12
  Ready @40c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 40
Cycle: 41 BotQ.A
BotQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 41c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %350:gpr64 = ADDXrs %349:gpr64, %349:gpr64, 2
Bottom Pressure:
GPR32=12
  LiveReg: %349
  UpdateRegP: SU(7) %350:gpr64 = ADDXrs %349:gpr64, %349:gpr64, 2
              to GPR32 -1
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 BotQ.A
BotQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 1 29 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 42c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %347:gpr64 = MADDXrrr %344:gpr64, %346:gpr64, $xzr
Bottom Pressure:
GPR32=12
  LiveReg: %344
  UpdateRegP: SU(4) %347:gpr64 = MADDXrrr %344:gpr64, %346:gpr64, $xzr
              to GPR32 -1
  Ready @42c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 42
Cycle: 43 BotQ.A
BotQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 29 1 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 43c > CritPath 21
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %341:gpr64 = MADDXrrr %338:gpr64, %340:gpr64, $xzr
Bottom Pressure:
GPR32=12
  LiveReg: %338
  UpdateRegP: SU(1) %341:gpr64 = MADDXrrr %338:gpr64, %340:gpr64, $xzr
              to GPR32 -1
  Ready @43c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 43
Cycle: 44 BotQ.A
BotQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 0 
Queue BotQ.A: 29 26 23 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 44c > CritPath 21
Picking from Bot:
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(29) %373:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=11
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 BotQ.A
BotQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 23 26 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 23 
  BotQ.A RemainingLatency 0 + 45c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(6) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(6) %349:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=10
  Ready @45c
  BotQ.A BotLatency SU(6) 20c
  *** Max MOps 1 at cycle 45
Cycle: 46 BotQ.A
BotQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 23 26 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 23 26 
  BotQ.A RemainingLatency 0 + 46c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(26) %370:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=9
  Ready @46c
  *** Max MOps 1 at cycle 46
Cycle: 47 BotQ.A
BotQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 23 
  BotQ.A RemainingLatency 0 + 47c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(3) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(3) %344:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=8
  Ready @47c
  *** Max MOps 1 at cycle 47
Cycle: 48 BotQ.A
BotQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 0 
Queue TopQ.P: 
Queue TopQ.A: 0 23 
  BotQ.A RemainingLatency 0 + 48c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(23) %367:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=7
  Ready @48c
  *** Max MOps 1 at cycle 48
Cycle: 49 BotQ.A
BotQ.A @49c
  Retired: 49
  Executed: 49c
  Critical: 49c, 49 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %338:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=6
  Ready @49c
  BotQ.A BotLatency SU(0) 21c
  *** Max MOps 1 at cycle 49
Cycle: 50 BotQ.A
BotQ.A @50c
  Retired: 50
  Executed: 50c
  Critical: 50c, 50 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %338:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(23):   %367:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(3):   %344:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(26):   %370:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(6):   %349:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(29):   %373:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %341:gpr64 = MADDXrrr %338:gpr64, %340:gpr64, $xzr
SU(4):   %347:gpr64 = MADDXrrr %344:gpr64, %346:gpr64, $xzr
SU(7):   %350:gpr64 = ADDXrs %349:gpr64, %349:gpr64, 2
SU(2):   %343:gpr64 = ADDXrr %342:gpr64, %341:gpr64
SU(8):   %351:gpr64 = UBFMXri %350:gpr64, 61, 60
SU(13):   %357:gpr64 = ADDXrr %356:gpr64, %341:gpr64
SU(18):   %363:gpr64 = ADDXrr %362:gpr64, %341:gpr64
SU(5):   %348:gpr64 = ADDXrr %343:gpr64, %347:gpr64
SU(14):   %358:gpr64 = ADDXrr %357:gpr64, %347:gpr64
SU(19):   %364:gpr64 = ADDXrr %363:gpr64, %347:gpr64
SU(9):   %352:gpr64common = ADDXrr %348:gpr64, %351:gpr64
SU(10):   %353:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(15):   %359:gpr64common = ADDXrr %358:gpr64, %351:gpr64
SU(20):   %365:gpr64common = ADDXrr %364:gpr64, %351:gpr64
SU(33):   %377:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(11):   %354:gpr64 = UBFMXri %353:gpr64, 61, 60
SU(12):   %355:fpr64 = LDRDroX %352:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
SU(16):   %360:fpr64 = LDRDroX %359:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
SU(24):   %368:gpr64 = MADDXrrr %367:gpr64, %340:gpr64, $xzr
SU(27):   %371:gpr64 = MADDXrrr %370:gpr64, %346:gpr64, $xzr
SU(30):   %374:gpr64 = ADDXrs %373:gpr64, %373:gpr64, 2
SU(17):   %361:fpr64 = FMULDrr %355:fpr64, %360:fpr64
SU(21):   STRDroX %361:fpr64, %365:gpr64common, %354:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
SU(25):   %369:gpr64 = ADDXrr %356:gpr64, %368:gpr64
SU(36):   %381:gpr64 = ADDXrr %362:gpr64, %368:gpr64
SU(41):   %387:gpr64 = ADDXrr %386:gpr64, %368:gpr64
SU(28):   %372:gpr64 = ADDXrr %369:gpr64, %371:gpr64
SU(37):   %382:gpr64 = ADDXrr %381:gpr64, %371:gpr64
SU(42):   %388:gpr64 = ADDXrr %387:gpr64, %371:gpr64
SU(34):   %379:gpr64 = UBFMXri %377:gpr64common, 61, 60
SU(31):   %375:gpr64 = UBFMXri %374:gpr64, 61, 60
SU(32):   %376:gpr64common = ADDXrr %372:gpr64, %375:gpr64
SU(38):   %383:gpr64common = ADDXrr %382:gpr64, %375:gpr64
SU(35):   %380:fpr64 = LDRDroX %376:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
SU(39):   %384:fpr64 = LDRDroX %383:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
SU(43):   %389:gpr64common = ADDXrr %388:gpr64, %375:gpr64
SU(44):   %390:fpr64 = LDRDroX %389:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
SU(22):   %366:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
SU(40):   %385:fpr64 = FMULDrr %380:fpr64, %384:fpr64
SU(48):   %393:gpr32common = nsw ADDWri %377.sub_32:gpr64common, 1, 0
SU(45):   %391:fpr64 = FMULDrr %385:fpr64, %390:fpr64
SU(46):   %392:fpr64 = FADDDrr %366:fpr64, %391:fpr64
SU(47):   STRDui %392:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
SU(49):   STRWui %393:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
diffusion:%bb.13 for.inc61
  From: %336:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %336:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%336
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%336
  Successors:
    SU(2): Data Latency=1 Reg=%337
  Single Issue       : false;
SU(2):   STRWui %337:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%337
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %337:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %336:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %336:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
SU(2):   STRWui %337:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
diffusion:%bb.14 for.inc64
  From: %331:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.7
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %331:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%331
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%331
  Successors:
    SU(2): Data Latency=1 Reg=%332
  Single Issue       : false;
SU(2):   STRWui %332:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%332
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %332:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %331:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %331:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
SU(2):   STRWui %332:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
diffusion:%bb.15 for.inc67
  From: %326:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %326:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%326
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %327:gpr32common = nsw ADDWri %326:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%326
  Successors:
    SU(2): Data Latency=1 Reg=%327
  Single Issue       : false;
SU(2):   STRWui %327:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%327
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %327:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %327:gpr32common = nsw ADDWri %326:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %326:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %326:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %327:gpr32common = nsw ADDWri %326:gpr32common, 1, 0
SU(2):   STRWui %327:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.16 for.end69
  From: STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %311:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %314:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %317:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %317:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %314:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %311:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
SU(1):   %311:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
SU(2):   %314:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
SU(3):   %317:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx

********** MI Scheduling **********
diffusion:%bb.17 for.cond70
  From: %20:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.19, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %20:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%20
  Single Issue       : false;
SU(1):   %22:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%22
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %20:gpr32, %22:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%22
    SU(0): Data Latency=4 Reg=%20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.19, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %20:gpr32, %22:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %22:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %20:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %20:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %22:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   dead $wzr = SUBSWrr %20:gpr32, %22:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.18 for.body72
  From: %309:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.17
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %309:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(11): Data Latency=4 Reg=%309
    SU(1): Data Latency=4 Reg=%309
    SU(12): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %312:gpr64 = UBFMXri %309:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%309
  Successors:
    SU(7): Data Latency=1 Reg=%312
    SU(5): Data Latency=1 Reg=%312
    SU(3): Data Latency=1 Reg=%312
    SU(2): Data Latency=1 Reg=%312
  Single Issue       : false;
SU(2):   %313:fpr64 = LDRDroX %311:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%312
  Successors:
    SU(4): Data Latency=4 Reg=%313
  Single Issue       : false;
SU(3):   %315:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%312
  Successors:
    SU(4): Data Latency=4 Reg=%315
  Single Issue       : false;
SU(4):   %316:fpr64 = FMULDrr %313:fpr64, %315:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%315
    SU(2): Data Latency=4 Reg=%313
  Successors:
    SU(8): Data Latency=1 Reg=%316
    SU(5): Data Latency=1 Reg=%316
  Single Issue       : false;
SU(5):   STRDroX %316:fpr64, %317:gpr64common, %312:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%316
    SU(1): Data Latency=1 Reg=%312
  Single Issue       : false;
SU(6):   %318:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%318
    SU(10): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %319:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%312
  Successors:
    SU(8): Data Latency=4 Reg=%319
  Single Issue       : false;
SU(8):   %320:fpr64 = FMULDrr %319:fpr64, %316:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%316
    SU(7): Data Latency=4 Reg=%319
  Successors:
    SU(9): Data Latency=1 Reg=%320
  Single Issue       : false;
SU(9):   %321:fpr64 = FADDDrr %318:fpr64, %320:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%320
    SU(6): Data Latency=4 Reg=%318
  Successors:
    SU(10): Data Latency=1 Reg=%321
  Single Issue       : false;
SU(10):   STRDui %321:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%321
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(11):   %322:gpr32common = nsw ADDWri %309.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%309
  Successors:
    SU(12): Data Latency=1 Reg=%322
  Single Issue       : false;
SU(12):   STRWui %322:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%322
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 5 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %322:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  Ready @0c
  BotQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(10) 12c
  BotQ.A RemainingLatency 12 + 1c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(10) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRDui %321:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  Ready @1c
  BotQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(9) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %321:fpr64 = FADDDrr %318:fpr64, %320:fpr64
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 11 8 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %320:fpr64 = FMULDrr %319:fpr64, %316:fpr64
  Ready @3c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 5 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 10 + 4c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %316:fpr64, %317:gpr64common, %312:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
  Ready @4c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 11 4 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 9 + 5c > CritPath 12
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %316:fpr64 = FMULDrr %313:fpr64, %315:fpr64
  Ready @5c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 7 3 
Queue BotQ.A: 11 6 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(11) 4c
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 8 + 6c > CritPath 12
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %322:gpr32common = nsw ADDWri %309.sub_32:gpr64common, 1, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 3 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(7) 5c
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 7 + 7c > CritPath 12
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %319:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
  Ready @7c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %318:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %309:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %312:gpr64 = UBFMXri %309:gpr64common, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 9c > CritPath 12
TopQ.A RemLatency SU(3) 7c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %315:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
  Ready @9c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %313:fpr64 = LDRDroX %311:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
  Ready @10c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %309:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %312:gpr64 = UBFMXri %309:gpr64common, 61, 60
SU(2):   %313:fpr64 = LDRDroX %311:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
SU(3):   %315:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
SU(6):   %318:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
SU(7):   %319:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
SU(11):   %322:gpr32common = nsw ADDWri %309.sub_32:gpr64common, 1, 0
SU(4):   %316:fpr64 = FMULDrr %313:fpr64, %315:fpr64
SU(5):   STRDroX %316:fpr64, %317:gpr64common, %312:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
SU(8):   %320:fpr64 = FMULDrr %319:fpr64, %316:fpr64
SU(9):   %321:fpr64 = FADDDrr %318:fpr64, %320:fpr64
SU(10):   STRDui %321:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
SU(12):   STRWui %322:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)

********** MI Scheduling **********
diffusion:%bb.19 for.end88
  From: %24:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%24
  Single Issue       : false;
SU(1):   STRWui %24:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%24
  Single Issue       : false;
SU(2):   %26:gpr64common = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   undef %255.sub_32:gpr64 = MOVi32imm 1000
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   undef %261.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %277:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %232:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %220:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   undef %196.sub_32:gpr64 = MOVi32imm 24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(9):   %198:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(10):   %131:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(11):   %107:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(12):   %112:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %112:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 10 9 8 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %24:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 11 10 9 8 7 6 5 4 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %107:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 10 9 8 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %131:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 9 8 7 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %198:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) undef %196.sub_32:gpr64 = MOVi32imm 24
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 5 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %220:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %232:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %277:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) undef %261.sub_32:gpr64 = MOVi32imm 200
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) undef %255.sub_32:gpr64 = MOVi32imm 1000
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %26:gpr64common = ADRP target-flags(aarch64-page) @nmxh
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr32 = MOVi32imm 1
  Ready @12c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %24:gpr32 = MOVi32imm 1
SU(2):   %26:gpr64common = ADRP target-flags(aarch64-page) @nmxh
SU(3):   undef %255.sub_32:gpr64 = MOVi32imm 1000
SU(4):   undef %261.sub_32:gpr64 = MOVi32imm 200
SU(5):   %277:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
SU(6):   %232:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
SU(7):   %220:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
SU(8):   undef %196.sub_32:gpr64 = MOVi32imm 24
SU(9):   %198:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
SU(10):   %131:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
SU(11):   %107:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
SU(1):   STRWui %24:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
SU(12):   %112:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor

********** MI Scheduling **********
diffusion:%bb.20 for.cond89
  From: %25:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
    To: Bcc 12, %bb.73, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %25:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%25
  Single Issue       : false;
SU(1):   %27:gpr32 = LDRWui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%27
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %25:gpr32, %27:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%27
    SU(0): Data Latency=4 Reg=%25
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.73, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %25:gpr32, %27:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %27:gpr32 = LDRWui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %25:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %25:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
SU(1):   %27:gpr32 = LDRWui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(2):   dead $wzr = SUBSWrr %25:gpr32, %27:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.21 for.body91
  From: %40:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
    To: Bcc 11, %bb.38, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %40:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%40
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %40:gpr32common, 2, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%40
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.38, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %40:gpr32common, 2, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %40:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %40:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
SU(1):   dead $wzr = SUBSWri %40:gpr32common, 2, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.22 if.then93
  From: STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.23 for.cond94
  From: %44:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.34, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %44:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%44
  Single Issue       : false;
SU(1):   %46:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%46
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %44:gpr32, %46:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%46
    SU(0): Data Latency=4 Reg=%44
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.34, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %44:gpr32, %46:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %46:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %44:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %44:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %46:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %44:gpr32, %46:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.25 for.cond97
  From: %239:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.33, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %239:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%239
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %239:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%239
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.33, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %239:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %239:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %239:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %239:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.27 for.cond100
  From: %244:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.32, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %244:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%244
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %244:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%244
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.32, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %244:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %244:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %244:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %244:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.29 for.cond103
  From: %249:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.31, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %249:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%249
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %249:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%249
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.31, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %249:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %249:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %249:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %249:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.30 for.body105
  From: %253:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.29
 RegionInstrs: 50
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=12
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
Live In: %386 %277 %261 %356 %255 %342 
Live Out: %386 %277 %261 %356 %255 %342 
Live Thru: GPR32=6
  LiveReg: %386
  UpdateRegP: SU(41) %302:gpr64 = ADDXrr %386:gpr64, %283:gpr64
              to 
  LiveReg: %277
  UpdateRegP: SU(18) %278:gpr64 = ADDXrr %277:gpr64, %256:gpr64
              to 
  UpdateRegP: SU(36) %296:gpr64 = ADDXrr %277:gpr64, %283:gpr64
              to 
  LiveReg: %261
  UpdateRegP: SU(4) %262:gpr64 = MADDXrrr %259:gpr64, %261:gpr64, $xzr
              to 
  UpdateRegP: SU(27) %286:gpr64 = MADDXrrr %285:gpr64, %261:gpr64, $xzr
              to 
  LiveReg: %356
  UpdateRegP: SU(13) %272:gpr64 = ADDXrr %356:gpr64, %256:gpr64
              to 
  UpdateRegP: SU(25) %284:gpr64 = ADDXrr %356:gpr64, %283:gpr64
              to 
  LiveReg: %255
  UpdateRegP: SU(1) %256:gpr64 = MADDXrrr %253:gpr64, %255:gpr64, $xzr
              to 
  UpdateRegP: SU(24) %283:gpr64 = MADDXrrr %282:gpr64, %255:gpr64, $xzr
              to 
  LiveReg: %342
  UpdateRegP: SU(2) %258:gpr64 = ADDXrr %342:gpr64, %256:gpr64
              to 
Top Pressure:
GPR32=6
Bottom Pressure:
GPR32=6
Excess PSets: 
Cluster ld/st SU(3) - SU(26)
  Copy Succ SU(4)
Cluster ld/st SU(6) - SU(29)
  Copy Succ SU(7)
Cluster ld/st SU(10) - SU(33)
  Copy Succ SU(11)
  Copy Succ SU(49)
Cluster ld/st SU(0) - SU(23)
  Copy Succ SU(1)
SU(0):   %253:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(1): Data Latency=4 Reg=%253
    SU(23): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %256:gpr64 = MADDXrrr %253:gpr64, %255:gpr64, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(0): Data Latency=4 Reg=%253
    SU(23): Ord  Latency=0 Artificial
  Successors:
    SU(18): Data Latency=1 Reg=%256
    SU(13): Data Latency=1 Reg=%256
    SU(2): Data Latency=1 Reg=%256
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %258:gpr64 = ADDXrr %342:gpr64, %256:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%256
  Successors:
    SU(5): Data Latency=1 Reg=%258
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %259:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(4): Data Latency=4 Reg=%259
    SU(26): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %262:gpr64 = MADDXrrr %259:gpr64, %261:gpr64, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(3): Data Latency=4 Reg=%259
    SU(26): Ord  Latency=0 Artificial
  Successors:
    SU(19): Data Latency=1 Reg=%262
    SU(14): Data Latency=1 Reg=%262
    SU(5): Data Latency=1 Reg=%262
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %263:gpr64 = ADDXrr %258:gpr64, %262:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(2): Data Latency=1 Reg=%258
    SU(4): Data Latency=1 Reg=%262
  Successors:
    SU(9): Data Latency=1 Reg=%263
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %264:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(7): Data Latency=4 Reg=%264
    SU(29): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %265:gpr64 = ADDXrs %264:gpr64, %264:gpr64, 2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(6): Data Latency=4 Reg=%264
    SU(29): Ord  Latency=0 Artificial
  Successors:
    SU(8): Data Latency=1 Reg=%265
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %266:gpr64 = UBFMXri %265:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(7): Data Latency=1 Reg=%265
  Successors:
    SU(20): Data Latency=1 Reg=%266
    SU(15): Data Latency=1 Reg=%266
    SU(9): Data Latency=1 Reg=%266
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %267:gpr64common = ADDXrr %263:gpr64, %266:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(5): Data Latency=1 Reg=%263
    SU(8): Data Latency=1 Reg=%266
  Successors:
    SU(12): Data Latency=1 Reg=%267
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %268:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(11): Data Latency=4 Reg=%268
    SU(49): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %269:gpr64 = UBFMXri %268:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(10): Data Latency=4 Reg=%268
    SU(33): Ord  Latency=0 Artificial
  Successors:
    SU(21): Data Latency=1 Reg=%269
    SU(16): Data Latency=1 Reg=%269
    SU(12): Data Latency=1 Reg=%269
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %270:fpr64 = LDRDroX %267:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(9): Data Latency=1 Reg=%267
    SU(11): Data Latency=1 Reg=%269
  Successors:
    SU(17): Data Latency=4 Reg=%270
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(13):   %272:gpr64 = ADDXrr %356:gpr64, %256:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%256
  Successors:
    SU(14): Data Latency=1 Reg=%272
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %273:gpr64 = ADDXrr %272:gpr64, %262:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(13): Data Latency=1 Reg=%272
    SU(4): Data Latency=1 Reg=%262
  Successors:
    SU(15): Data Latency=1 Reg=%273
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %274:gpr64common = ADDXrr %273:gpr64, %266:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(14): Data Latency=1 Reg=%273
    SU(8): Data Latency=1 Reg=%266
  Successors:
    SU(16): Data Latency=1 Reg=%274
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %275:fpr64 = LDRDroX %274:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(15): Data Latency=1 Reg=%274
    SU(11): Data Latency=1 Reg=%269
  Successors:
    SU(17): Data Latency=4 Reg=%275
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(17):   %276:fpr64 = FMULDrr %270:fpr64, %275:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 9
  Predecessors:
    SU(16): Data Latency=4 Reg=%275
    SU(12): Data Latency=4 Reg=%270
  Successors:
    SU(21): Data Latency=1 Reg=%276
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   %278:gpr64 = ADDXrr %277:gpr64, %256:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(1): Data Latency=1 Reg=%256
  Successors:
    SU(19): Data Latency=1 Reg=%278
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %279:gpr64 = ADDXrr %278:gpr64, %262:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(18): Data Latency=1 Reg=%278
    SU(4): Data Latency=1 Reg=%262
  Successors:
    SU(20): Data Latency=1 Reg=%279
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(20):   %280:gpr64common = ADDXrr %279:gpr64, %266:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(19): Data Latency=1 Reg=%279
    SU(8): Data Latency=1 Reg=%266
  Successors:
    SU(21): Data Latency=1 Reg=%280
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   STRDroX %276:fpr64, %280:gpr64common, %269:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(17): Data Latency=1 Reg=%276
    SU(20): Data Latency=1 Reg=%280
    SU(11): Data Latency=1 Reg=%269
  Successors:
    SU(39): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(22):   %281:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(46): Data Latency=4 Reg=%281
    SU(47): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(23):   %282:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(24): Data Latency=4 Reg=%282
    SU(1): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   %283:gpr64 = MADDXrrr %282:gpr64, %255:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(23): Data Latency=4 Reg=%282
  Successors:
    SU(41): Data Latency=1 Reg=%283
    SU(36): Data Latency=1 Reg=%283
    SU(25): Data Latency=1 Reg=%283
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %284:gpr64 = ADDXrr %356:gpr64, %283:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%283
  Successors:
    SU(28): Data Latency=1 Reg=%284
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %285:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Predecessors:
    SU(3): Ord  Latency=0 Cluster
  Successors:
    SU(27): Data Latency=4 Reg=%285
    SU(4): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   %286:gpr64 = MADDXrrr %285:gpr64, %261:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(26): Data Latency=4 Reg=%285
  Successors:
    SU(42): Data Latency=1 Reg=%286
    SU(37): Data Latency=1 Reg=%286
    SU(28): Data Latency=1 Reg=%286
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %287:gpr64 = ADDXrr %284:gpr64, %286:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(25): Data Latency=1 Reg=%284
    SU(27): Data Latency=1 Reg=%286
  Successors:
    SU(32): Data Latency=1 Reg=%287
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(29):   %288:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Predecessors:
    SU(6): Ord  Latency=0 Cluster
  Successors:
    SU(30): Data Latency=4 Reg=%288
    SU(7): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(30):   %289:gpr64 = ADDXrs %288:gpr64, %288:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(29): Data Latency=4 Reg=%288
  Successors:
    SU(31): Data Latency=1 Reg=%289
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %290:gpr64 = UBFMXri %289:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(30): Data Latency=1 Reg=%289
  Successors:
    SU(43): Data Latency=1 Reg=%290
    SU(38): Data Latency=1 Reg=%290
    SU(32): Data Latency=1 Reg=%290
  Pressure Diff      : 
  Single Issue       : false;
SU(32):   %291:gpr64common = ADDXrr %287:gpr64, %290:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(28): Data Latency=1 Reg=%287
    SU(31): Data Latency=1 Reg=%290
  Successors:
    SU(35): Data Latency=1 Reg=%291
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(33):   %292:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Predecessors:
    SU(10): Ord  Latency=0 Cluster
  Successors:
    SU(48): Data Latency=4 Reg=%292
    SU(34): Data Latency=4 Reg=%292
    SU(49): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(34):   %294:gpr64 = UBFMXri %292:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(33): Data Latency=4 Reg=%292
  Successors:
    SU(44): Data Latency=1 Reg=%294
    SU(39): Data Latency=1 Reg=%294
    SU(35): Data Latency=1 Reg=%294
  Pressure Diff      : 
  Single Issue       : false;
SU(35):   %295:fpr64 = LDRDroX %291:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(32): Data Latency=1 Reg=%291
    SU(34): Data Latency=1 Reg=%294
  Successors:
    SU(40): Data Latency=4 Reg=%295
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(36):   %296:gpr64 = ADDXrr %277:gpr64, %283:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%283
  Successors:
    SU(37): Data Latency=1 Reg=%296
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %297:gpr64 = ADDXrr %296:gpr64, %286:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(36): Data Latency=1 Reg=%296
    SU(27): Data Latency=1 Reg=%286
  Successors:
    SU(38): Data Latency=1 Reg=%297
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(38):   %298:gpr64common = ADDXrr %297:gpr64, %290:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(37): Data Latency=1 Reg=%297
    SU(31): Data Latency=1 Reg=%290
  Successors:
    SU(39): Data Latency=1 Reg=%298
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(39):   %299:fpr64 = LDRDroX %298:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 7
  Predecessors:
    SU(38): Data Latency=1 Reg=%298
    SU(34): Data Latency=1 Reg=%294
    SU(21): Ord  Latency=1 Memory
  Successors:
    SU(40): Data Latency=4 Reg=%299
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(40):   %300:fpr64 = FMULDrr %295:fpr64, %299:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 3
  Predecessors:
    SU(39): Data Latency=4 Reg=%299
    SU(35): Data Latency=4 Reg=%295
  Successors:
    SU(45): Data Latency=1 Reg=%300
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(41):   %302:gpr64 = ADDXrr %386:gpr64, %283:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(24): Data Latency=1 Reg=%283
  Successors:
    SU(42): Data Latency=1 Reg=%302
  Pressure Diff      : 
  Single Issue       : false;
SU(42):   %303:gpr64 = ADDXrr %302:gpr64, %286:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(41): Data Latency=1 Reg=%302
    SU(27): Data Latency=1 Reg=%286
  Successors:
    SU(43): Data Latency=1 Reg=%303
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(43):   %304:gpr64common = ADDXrr %303:gpr64, %290:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(42): Data Latency=1 Reg=%303
    SU(31): Data Latency=1 Reg=%290
  Successors:
    SU(44): Data Latency=1 Reg=%304
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(44):   %305:fpr64 = LDRDroX %304:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(43): Data Latency=1 Reg=%304
    SU(34): Data Latency=1 Reg=%294
  Successors:
    SU(45): Data Latency=4 Reg=%305
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(45):   %306:fpr64 = FMULDrr %300:fpr64, %305:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 2
  Predecessors:
    SU(40): Data Latency=1 Reg=%300
    SU(44): Data Latency=4 Reg=%305
  Successors:
    SU(46): Data Latency=1 Reg=%306
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(46):   %307:fpr64 = FADDDrr %281:fpr64, %306:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 1
  Predecessors:
    SU(45): Data Latency=1 Reg=%306
    SU(22): Data Latency=4 Reg=%281
  Successors:
    SU(47): Data Latency=1 Reg=%307
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(47):   STRDui %307:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(46): Data Latency=1 Reg=%307
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(48):   %308:gpr32common = nsw ADDWri %292.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(33): Data Latency=4 Reg=%292
  Successors:
    SU(49): Data Latency=1 Reg=%308
  Pressure Diff      : 
  Single Issue       : false;
SU(49):   STRWui %308:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(48): Data Latency=1 Reg=%308
    SU(33): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 21
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 49 47 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
Picking from Bot:
  Cand SU(49) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(49) STRWui %308:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=7
  LiveReg: %308
  UpdateRegP: SU(49) STRWui %308:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(49) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 47 48 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(47) 21c
  BotQ.A RemainingLatency 21 + 1c > CritPath 21
Picking from Bot:
  Cand SU(47) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(47) STRDui %307:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %307
  UpdateRegP: SU(47) STRDui %307:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
              to 
  Ready @1c
  BotQ.A TopLatency SU(47) 21c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 46 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(46) 20c
  BotQ.A RemainingLatency 20 + 2c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
  Cand SU(46) BOT-PATH                  20 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(46) %307:fpr64 = FADDDrr %281:fpr64, %306:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %281
  UpdateRegP: SU(46) %307:fpr64 = FADDDrr %281:fpr64, %306:fpr64
              to 
  LiveReg: %306
  UpdateRegP: SU(46) %307:fpr64 = FADDDrr %281:fpr64, %306:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(46) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 48 45 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(45) 19c
  BotQ.A RemainingLatency 19 + 3c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
  Cand SU(45) BOT-PATH                  19 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(45) %306:fpr64 = FMULDrr %300:fpr64, %305:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %300
  UpdateRegP: SU(45) %306:fpr64 = FMULDrr %300:fpr64, %305:fpr64
              to 
  LiveReg: %305
  UpdateRegP: SU(45) %306:fpr64 = FMULDrr %300:fpr64, %305:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(45) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 44 
Queue BotQ.A: 48 40 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(40) 18c
BotQ.A RemLatency SU(44) 8c
  BotQ.A RemainingLatency 18 + 4c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(48) %308:gpr32common = nsw ADDWri %292.sub_32:gpr64common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %292
  UpdateRegP: SU(34) %294:gpr64 = UBFMXri %292:gpr64common, 61, 60
              to GPR32 -1
  UpdateRegP: SU(48) %308:gpr32common = nsw ADDWri %292.sub_32:gpr64common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 44 
Queue BotQ.A: 40 
Pick Bot ONLY1     
Scheduling SU(40) %300:fpr64 = FMULDrr %295:fpr64, %299:fpr64
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %295
  UpdateRegP: SU(40) %300:fpr64 = FMULDrr %295:fpr64, %299:fpr64
              to 
  LiveReg: %299
  UpdateRegP: SU(40) %300:fpr64 = FMULDrr %295:fpr64, %299:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(40) 18c
  BotQ.A BotLatency SU(40) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 44 39 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) %281:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @6c
  BotQ.A BotLatency SU(22) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 39 
Queue BotQ.A: 44 
Pick Bot ONLY1     
Scheduling SU(44) %305:fpr64 = LDRDroX %304:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %304
  UpdateRegP: SU(44) %305:fpr64 = LDRDroX %304:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  LiveReg: %294
  UpdateRegP: SU(35) %295:fpr64 = LDRDroX %291:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(39) %299:fpr64 = LDRDroX %298:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(44) %305:fpr64 = LDRDroX %304:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(44) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 39 
Queue BotQ.A: 43 
Pick Bot ONLY1     
Scheduling SU(43) %304:gpr64common = ADDXrr %303:gpr64, %290:gpr64
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %303
  UpdateRegP: SU(43) %304:gpr64common = ADDXrr %303:gpr64, %290:gpr64
              to 
  LiveReg: %290
  UpdateRegP: SU(32) %291:gpr64common = ADDXrr %287:gpr64, %290:gpr64
              to 
  UpdateRegP: SU(38) %298:gpr64common = ADDXrr %297:gpr64, %290:gpr64
              to 
  UpdateRegP: SU(43) %304:gpr64common = ADDXrr %303:gpr64, %290:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(43) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 35 39 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(39) 14c
  BotQ.A RemainingLatency 14 + 9c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  8 cycles 
  Cand SU(39) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(39) %299:fpr64 = LDRDroX %298:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
Bottom Pressure:
FPR8=1
GPR32=11
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %298
  UpdateRegP: SU(39) %299:fpr64 = LDRDroX %298:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 35 38 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 10c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(35) %295:fpr64 = LDRDroX %291:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
Bottom Pressure:
GPR32=12
  LiveReg: %291
  UpdateRegP: SU(35) %295:fpr64 = LDRDroX %291:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 38 32 34 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 11c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(38) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(38) %298:gpr64common = ADDXrr %297:gpr64, %290:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %297
  UpdateRegP: SU(38) %298:gpr64common = ADDXrr %297:gpr64, %290:gpr64
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(38) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 32 37 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 12c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(32) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(32) %291:gpr64common = ADDXrr %287:gpr64, %290:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %287
  UpdateRegP: SU(32) %291:gpr64common = ADDXrr %287:gpr64, %290:gpr64
              to GPR32 -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 37 28 31 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 13c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(31) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(31) %290:gpr64 = UBFMXri %289:gpr64, 61, 60
Bottom Pressure:
GPR32=12
  LiveReg: %289
  UpdateRegP: SU(31) %290:gpr64 = UBFMXri %289:gpr64, 61, 60
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(31) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 37 28 30 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 14c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(34) %294:gpr64 = UBFMXri %292:gpr64common, 61, 60
Bottom Pressure:
GPR32=11
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 30 37 28 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 15c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(42) %303:gpr64 = ADDXrr %302:gpr64, %286:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %302
  UpdateRegP: SU(42) %303:gpr64 = ADDXrr %302:gpr64, %286:gpr64
              to 
  LiveReg: %286
  UpdateRegP: SU(28) %287:gpr64 = ADDXrr %284:gpr64, %286:gpr64
              to 
  UpdateRegP: SU(37) %297:gpr64 = ADDXrr %296:gpr64, %286:gpr64
              to 
  UpdateRegP: SU(42) %303:gpr64 = ADDXrr %302:gpr64, %286:gpr64
              to GPR32 -1
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 21 30 37 41 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 16c > CritPath 21
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(37) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(37) %297:gpr64 = ADDXrr %296:gpr64, %286:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %296
  UpdateRegP: SU(37) %297:gpr64 = ADDXrr %296:gpr64, %286:gpr64
              to GPR32 -1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 21 30 41 36 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 17c > CritPath 21
Picking from Bot:
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) %287:gpr64 = ADDXrr %284:gpr64, %286:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %284
  UpdateRegP: SU(28) %287:gpr64 = ADDXrr %284:gpr64, %286:gpr64
              to GPR32 -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 21 30 41 25 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 18c > CritPath 21
Picking from Bot:
  Cand SU(36) ORDER                              
  Cand SU(41) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(41) %302:gpr64 = ADDXrr %386:gpr64, %283:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %283
  UpdateRegP: SU(25) %284:gpr64 = ADDXrr %356:gpr64, %283:gpr64
              to GPR32 -1
  UpdateRegP: SU(36) %296:gpr64 = ADDXrr %277:gpr64, %283:gpr64
              to GPR32 -1
  UpdateRegP: SU(41) %302:gpr64 = ADDXrr %386:gpr64, %283:gpr64
              to GPR32 -1
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 21 30 27 25 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 19c > CritPath 21
Picking from Bot:
  Cand SU(36) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(36) %296:gpr64 = ADDXrr %277:gpr64, %283:gpr64
Bottom Pressure:
GPR32=11
  Ready @19c
  BotQ.A TopLatency SU(36) 5c
  BotQ.A BotLatency SU(36) 10c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 21 30 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 20c > CritPath 21
Picking from Bot:
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(25) %284:gpr64 = ADDXrr %356:gpr64, %283:gpr64
Bottom Pressure:
GPR32=10
  Ready @20c
  BotQ.A TopLatency SU(25) 5c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 21 30 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 21c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(21) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(21) STRDroX %276:fpr64, %280:gpr64common, %269:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
Bottom Pressure:
FPR8=1
GPR32=12
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %276
  UpdateRegP: SU(21) STRDroX %276:fpr64, %280:gpr64common, %269:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
              to GPR32 2
  LiveReg: %280
  UpdateRegP: SU(21) STRDroX %276:fpr64, %280:gpr64common, %269:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
              to GPR32 1
  LiveReg: %269
  UpdateRegP: SU(12) %270:fpr64 = LDRDroX %267:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(16) %275:fpr64 = LDRDroX %274:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(21) STRDroX %276:fpr64, %280:gpr64common, %269:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
              to 
  Ready @21c
  BotQ.A TopLatency SU(21) 13c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 24 30 17 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 22c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(17) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %276:fpr64 = FMULDrr %270:fpr64, %275:fpr64
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %270
  UpdateRegP: SU(17) %276:fpr64 = FMULDrr %270:fpr64, %275:fpr64
              to 
  LiveReg: %275
  UpdateRegP: SU(17) %276:fpr64 = FMULDrr %270:fpr64, %275:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 27 24 30 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 23c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(30) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(30) %289:gpr64 = ADDXrs %288:gpr64, %288:gpr64, 2
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %288
  UpdateRegP: SU(30) %289:gpr64 = ADDXrs %288:gpr64, %288:gpr64, 2
              to GPR32 -1
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 27 24 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 24c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) %286:gpr64 = MADDXrrr %285:gpr64, %261:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %285
  UpdateRegP: SU(27) %286:gpr64 = MADDXrrr %285:gpr64, %261:gpr64, $xzr
              to GPR32 -1
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 20 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 25c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(24) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(24) %283:gpr64 = MADDXrrr %282:gpr64, %255:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %282
  UpdateRegP: SU(24) %283:gpr64 = MADDXrrr %282:gpr64, %255:gpr64, $xzr
              to GPR32 -1
  Ready @25c
  BotQ.A BotLatency SU(24) 11c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 16 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 26c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(16) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %275:fpr64 = LDRDroX %274:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
Bottom Pressure:
FPR8=1
GPR32=13
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %274
  UpdateRegP: SU(16) %275:fpr64 = LDRDroX %274:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @26c
  BotQ.A BotLatency SU(16) 13c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 27c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %270:fpr64 = LDRDroX %267:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
Bottom Pressure:
GPR32=14
  LiveReg: %267
  UpdateRegP: SU(12) %270:fpr64 = LDRDroX %267:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @27c
  BotQ.A TopLatency SU(12) 8c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 15 9 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 28c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(11) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %269:gpr64 = UBFMXri %268:gpr64, 61, 60
Bottom Pressure:
GPR32=14
  LiveReg: %268
  UpdateRegP: SU(11) %269:gpr64 = UBFMXri %268:gpr64, 61, 60
              to GPR32 -1
  Ready @28c
  BotQ.A BotLatency SU(11) 14c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 20 15 9 33 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 29c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(33) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(33) %292:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=13
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 20 15 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 30c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %280:gpr64common = ADDXrr %279:gpr64, %266:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %279
  UpdateRegP: SU(20) %280:gpr64common = ADDXrr %279:gpr64, %266:gpr64
              to 
  LiveReg: %266
  UpdateRegP: SU(9) %267:gpr64common = ADDXrr %263:gpr64, %266:gpr64
              to 
  UpdateRegP: SU(15) %274:gpr64common = ADDXrr %273:gpr64, %266:gpr64
              to 
  UpdateRegP: SU(20) %280:gpr64common = ADDXrr %279:gpr64, %266:gpr64
              to GPR32 -1
  Ready @30c
  BotQ.A TopLatency SU(20) 7c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 9 15 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 31c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %274:gpr64common = ADDXrr %273:gpr64, %266:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %273
  UpdateRegP: SU(15) %274:gpr64common = ADDXrr %273:gpr64, %266:gpr64
              to GPR32 -1
  Ready @31c
  BotQ.A TopLatency SU(15) 7c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 19 14 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 32c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(10) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(10) %268:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=13
  Ready @32c
  BotQ.A BotLatency SU(10) 18c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 33c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %267:gpr64common = ADDXrr %263:gpr64, %266:gpr64
Bottom Pressure:
GPR32=13
  LiveReg: %263
  UpdateRegP: SU(9) %267:gpr64common = ADDXrr %263:gpr64, %266:gpr64
              to GPR32 -1
  Ready @33c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 19 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 34c > CritPath 21
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %279:gpr64 = ADDXrr %278:gpr64, %262:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %278
  UpdateRegP: SU(19) %279:gpr64 = ADDXrr %278:gpr64, %262:gpr64
              to 
  LiveReg: %262
  UpdateRegP: SU(5) %263:gpr64 = ADDXrr %258:gpr64, %262:gpr64
              to 
  UpdateRegP: SU(14) %273:gpr64 = ADDXrr %272:gpr64, %262:gpr64
              to 
  UpdateRegP: SU(19) %279:gpr64 = ADDXrr %278:gpr64, %262:gpr64
              to GPR32 -1
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 8 5 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 35c > CritPath 21
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %273:gpr64 = ADDXrr %272:gpr64, %262:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %272
  UpdateRegP: SU(14) %273:gpr64 = ADDXrr %272:gpr64, %262:gpr64
              to GPR32 -1
  Ready @35c
  BotQ.A TopLatency SU(14) 6c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 8 5 13 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 36c > CritPath 21
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(5) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %263:gpr64 = ADDXrr %258:gpr64, %262:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %258
  UpdateRegP: SU(5) %263:gpr64 = ADDXrr %258:gpr64, %262:gpr64
              to GPR32 -1
  Ready @36c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 8 13 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 37c > CritPath 21
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %278:gpr64 = ADDXrr %277:gpr64, %256:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %256
  UpdateRegP: SU(2) %258:gpr64 = ADDXrr %342:gpr64, %256:gpr64
              to GPR32 -1
  UpdateRegP: SU(13) %272:gpr64 = ADDXrr %356:gpr64, %256:gpr64
              to GPR32 -1
  UpdateRegP: SU(18) %278:gpr64 = ADDXrr %277:gpr64, %256:gpr64
              to GPR32 -1
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 13 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 38c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %272:gpr64 = ADDXrr %356:gpr64, %256:gpr64
Bottom Pressure:
GPR32=13
  Ready @38c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 39c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %266:gpr64 = UBFMXri %265:gpr64, 61, 60
Bottom Pressure:
GPR32=13
  LiveReg: %265
  UpdateRegP: SU(8) %266:gpr64 = UBFMXri %265:gpr64, 61, 60
              to GPR32 -1
  Ready @39c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 40c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %258:gpr64 = ADDXrr %342:gpr64, %256:gpr64
Bottom Pressure:
GPR32=12
  Ready @40c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 40
Cycle: 41 BotQ.A
BotQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 41c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %265:gpr64 = ADDXrs %264:gpr64, %264:gpr64, 2
Bottom Pressure:
GPR32=12
  LiveReg: %264
  UpdateRegP: SU(7) %265:gpr64 = ADDXrs %264:gpr64, %264:gpr64, 2
              to GPR32 -1
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 BotQ.A
BotQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 1 29 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 42c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %262:gpr64 = MADDXrrr %259:gpr64, %261:gpr64, $xzr
Bottom Pressure:
GPR32=12
  LiveReg: %259
  UpdateRegP: SU(4) %262:gpr64 = MADDXrrr %259:gpr64, %261:gpr64, $xzr
              to GPR32 -1
  Ready @42c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 42
Cycle: 43 BotQ.A
BotQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 29 1 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 43c > CritPath 21
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %256:gpr64 = MADDXrrr %253:gpr64, %255:gpr64, $xzr
Bottom Pressure:
GPR32=12
  LiveReg: %253
  UpdateRegP: SU(1) %256:gpr64 = MADDXrrr %253:gpr64, %255:gpr64, $xzr
              to GPR32 -1
  Ready @43c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 43
Cycle: 44 BotQ.A
BotQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 0 
Queue BotQ.A: 29 26 23 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 44c > CritPath 21
Picking from Bot:
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(29) %288:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=11
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 BotQ.A
BotQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 23 26 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 23 
  BotQ.A RemainingLatency 0 + 45c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(6) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(6) %264:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=10
  Ready @45c
  BotQ.A BotLatency SU(6) 20c
  *** Max MOps 1 at cycle 45
Cycle: 46 BotQ.A
BotQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 23 26 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 23 26 
  BotQ.A RemainingLatency 0 + 46c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(26) %285:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=9
  Ready @46c
  *** Max MOps 1 at cycle 46
Cycle: 47 BotQ.A
BotQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 23 
  BotQ.A RemainingLatency 0 + 47c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(3) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(3) %259:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=8
  Ready @47c
  *** Max MOps 1 at cycle 47
Cycle: 48 BotQ.A
BotQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 0 
Queue TopQ.P: 
Queue TopQ.A: 0 23 
  BotQ.A RemainingLatency 0 + 48c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(23) %282:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=7
  Ready @48c
  *** Max MOps 1 at cycle 48
Cycle: 49 BotQ.A
BotQ.A @49c
  Retired: 49
  Executed: 49c
  Critical: 49c, 49 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %253:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=6
  Ready @49c
  BotQ.A BotLatency SU(0) 21c
  *** Max MOps 1 at cycle 49
Cycle: 50 BotQ.A
BotQ.A @50c
  Retired: 50
  Executed: 50c
  Critical: 50c, 50 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %253:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(23):   %282:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(3):   %259:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(26):   %285:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(6):   %264:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(29):   %288:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %256:gpr64 = MADDXrrr %253:gpr64, %255:gpr64, $xzr
SU(4):   %262:gpr64 = MADDXrrr %259:gpr64, %261:gpr64, $xzr
SU(7):   %265:gpr64 = ADDXrs %264:gpr64, %264:gpr64, 2
SU(2):   %258:gpr64 = ADDXrr %342:gpr64, %256:gpr64
SU(8):   %266:gpr64 = UBFMXri %265:gpr64, 61, 60
SU(13):   %272:gpr64 = ADDXrr %356:gpr64, %256:gpr64
SU(18):   %278:gpr64 = ADDXrr %277:gpr64, %256:gpr64
SU(5):   %263:gpr64 = ADDXrr %258:gpr64, %262:gpr64
SU(14):   %273:gpr64 = ADDXrr %272:gpr64, %262:gpr64
SU(19):   %279:gpr64 = ADDXrr %278:gpr64, %262:gpr64
SU(9):   %267:gpr64common = ADDXrr %263:gpr64, %266:gpr64
SU(10):   %268:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(15):   %274:gpr64common = ADDXrr %273:gpr64, %266:gpr64
SU(20):   %280:gpr64common = ADDXrr %279:gpr64, %266:gpr64
SU(33):   %292:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(11):   %269:gpr64 = UBFMXri %268:gpr64, 61, 60
SU(12):   %270:fpr64 = LDRDroX %267:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
SU(16):   %275:fpr64 = LDRDroX %274:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
SU(24):   %283:gpr64 = MADDXrrr %282:gpr64, %255:gpr64, $xzr
SU(27):   %286:gpr64 = MADDXrrr %285:gpr64, %261:gpr64, $xzr
SU(30):   %289:gpr64 = ADDXrs %288:gpr64, %288:gpr64, 2
SU(17):   %276:fpr64 = FMULDrr %270:fpr64, %275:fpr64
SU(21):   STRDroX %276:fpr64, %280:gpr64common, %269:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
SU(25):   %284:gpr64 = ADDXrr %356:gpr64, %283:gpr64
SU(36):   %296:gpr64 = ADDXrr %277:gpr64, %283:gpr64
SU(41):   %302:gpr64 = ADDXrr %386:gpr64, %283:gpr64
SU(28):   %287:gpr64 = ADDXrr %284:gpr64, %286:gpr64
SU(37):   %297:gpr64 = ADDXrr %296:gpr64, %286:gpr64
SU(42):   %303:gpr64 = ADDXrr %302:gpr64, %286:gpr64
SU(34):   %294:gpr64 = UBFMXri %292:gpr64common, 61, 60
SU(31):   %290:gpr64 = UBFMXri %289:gpr64, 61, 60
SU(32):   %291:gpr64common = ADDXrr %287:gpr64, %290:gpr64
SU(38):   %298:gpr64common = ADDXrr %297:gpr64, %290:gpr64
SU(35):   %295:fpr64 = LDRDroX %291:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
SU(39):   %299:fpr64 = LDRDroX %298:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
SU(43):   %304:gpr64common = ADDXrr %303:gpr64, %290:gpr64
SU(44):   %305:fpr64 = LDRDroX %304:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
SU(22):   %281:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
SU(40):   %300:fpr64 = FMULDrr %295:fpr64, %299:fpr64
SU(48):   %308:gpr32common = nsw ADDWri %292.sub_32:gpr64common, 1, 0
SU(45):   %306:fpr64 = FMULDrr %300:fpr64, %305:fpr64
SU(46):   %307:fpr64 = FADDDrr %281:fpr64, %306:fpr64
SU(47):   STRDui %307:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
SU(49):   STRWui %308:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
diffusion:%bb.31 for.inc161
  From: %251:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.27
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %251:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%251
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %252:gpr32common = nsw ADDWri %251:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%251
  Successors:
    SU(2): Data Latency=1 Reg=%252
  Single Issue       : false;
SU(2):   STRWui %252:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%252
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %252:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %252:gpr32common = nsw ADDWri %251:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %251:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %251:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %252:gpr32common = nsw ADDWri %251:gpr32common, 1, 0
SU(2):   STRWui %252:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
diffusion:%bb.32 for.inc164
  From: %246:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %246:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%246
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%246
  Successors:
    SU(2): Data Latency=1 Reg=%247
  Single Issue       : false;
SU(2):   STRWui %247:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%247
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %247:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %246:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %246:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0
SU(2):   STRWui %247:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
diffusion:%bb.33 for.inc167
  From: %241:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.23
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %241:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%241
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %242:gpr32common = nsw ADDWri %241:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%241
  Successors:
    SU(2): Data Latency=1 Reg=%242
  Single Issue       : false;
SU(2):   STRWui %242:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%242
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %242:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %242:gpr32common = nsw ADDWri %241:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %241:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %241:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %242:gpr32common = nsw ADDWri %241:gpr32common, 1, 0
SU(2):   STRWui %242:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.35 for.cond170
  From: %49:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.37, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %49:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%49
  Single Issue       : false;
SU(1):   %51:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%51
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %49:gpr32, %51:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%51
    SU(0): Data Latency=4 Reg=%49
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.37, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %49:gpr32, %51:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %51:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %49:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %49:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %51:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   dead $wzr = SUBSWrr %49:gpr32, %51:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.36 for.body172
  From: %224:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.35
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %224:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(11): Data Latency=4 Reg=%224
    SU(1): Data Latency=4 Reg=%224
    SU(12): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %227:gpr64 = UBFMXri %224:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%224
  Successors:
    SU(7): Data Latency=1 Reg=%227
    SU(5): Data Latency=1 Reg=%227
    SU(3): Data Latency=1 Reg=%227
    SU(2): Data Latency=1 Reg=%227
  Single Issue       : false;
SU(2):   %228:fpr64 = LDRDroX %311:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%227
  Successors:
    SU(4): Data Latency=4 Reg=%228
  Single Issue       : false;
SU(3):   %230:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%227
  Successors:
    SU(4): Data Latency=4 Reg=%230
  Single Issue       : false;
SU(4):   %231:fpr64 = FMULDrr %228:fpr64, %230:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%230
    SU(2): Data Latency=4 Reg=%228
  Successors:
    SU(8): Data Latency=1 Reg=%231
    SU(5): Data Latency=1 Reg=%231
  Single Issue       : false;
SU(5):   STRDroX %231:fpr64, %232:gpr64common, %227:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%231
    SU(1): Data Latency=1 Reg=%227
  Single Issue       : false;
SU(6):   %233:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%233
    SU(10): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %234:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%227
  Successors:
    SU(8): Data Latency=4 Reg=%234
  Single Issue       : false;
SU(8):   %235:fpr64 = FMULDrr %234:fpr64, %231:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%231
    SU(7): Data Latency=4 Reg=%234
  Successors:
    SU(9): Data Latency=1 Reg=%235
  Single Issue       : false;
SU(9):   %236:fpr64 = FADDDrr %233:fpr64, %235:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%235
    SU(6): Data Latency=4 Reg=%233
  Successors:
    SU(10): Data Latency=1 Reg=%236
  Single Issue       : false;
SU(10):   STRDui %236:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%236
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(11):   %237:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%224
  Successors:
    SU(12): Data Latency=1 Reg=%237
  Single Issue       : false;
SU(12):   STRWui %237:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%237
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.35
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 5 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %237:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  Ready @0c
  BotQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(10) 12c
  BotQ.A RemainingLatency 12 + 1c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(10) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRDui %236:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  Ready @1c
  BotQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(9) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %236:fpr64 = FADDDrr %233:fpr64, %235:fpr64
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 11 8 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %235:fpr64 = FMULDrr %234:fpr64, %231:fpr64
  Ready @3c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 5 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 10 + 4c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %231:fpr64, %232:gpr64common, %227:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
  Ready @4c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 11 4 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 9 + 5c > CritPath 12
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %231:fpr64 = FMULDrr %228:fpr64, %230:fpr64
  Ready @5c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 7 3 
Queue BotQ.A: 11 6 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(11) 4c
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 8 + 6c > CritPath 12
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %237:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 3 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(7) 5c
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 7 + 7c > CritPath 12
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %234:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
  Ready @7c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %233:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %224:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %227:gpr64 = UBFMXri %224:gpr64common, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 9c > CritPath 12
TopQ.A RemLatency SU(3) 7c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %230:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
  Ready @9c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %228:fpr64 = LDRDroX %311:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
  Ready @10c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %224:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %227:gpr64 = UBFMXri %224:gpr64common, 61, 60
SU(2):   %228:fpr64 = LDRDroX %311:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
SU(3):   %230:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
SU(6):   %233:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
SU(7):   %234:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
SU(11):   %237:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0
SU(4):   %231:fpr64 = FMULDrr %228:fpr64, %230:fpr64
SU(5):   STRDroX %231:fpr64, %232:gpr64common, %227:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
SU(8):   %235:fpr64 = FMULDrr %234:fpr64, %231:fpr64
SU(9):   %236:fpr64 = FADDDrr %233:fpr64, %235:fpr64
SU(10):   STRDui %236:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
SU(12):   STRWui %237:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: $x0 = COPY %317:gpr64common
    To: BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %317:gpr64common
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %232:gpr64common
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %60:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %62:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %62:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %60:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %232:gpr64common
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %317:gpr64common
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $x0 = COPY %317:gpr64common
SU(1):   $x1 = COPY %232:gpr64common
SU(2):   $d0 = COPY %60:fpr64
SU(3):   $w2 = COPY %62:gpr32

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: %60:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %60:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %62:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %62:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %60:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %60:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
SU(1):   %62:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: $x0 = COPY %362:gpr64
    To: BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %362:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %277:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %55:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %57:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %57:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %55:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %277:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %362:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $x0 = COPY %362:gpr64
SU(1):   $x1 = COPY %277:gpr64
SU(2):   $d0 = COPY %55:fpr64
SU(3):   $w2 = COPY %57:gpr32

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: %53:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %53:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%53
    SU(1): Data Latency=4 Reg=%53
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRDui %53:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%53
  Single Issue       : false;
SU(2):   %54:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%54
    SU(3): Data Latency=4 Reg=%54
  Single Issue       : false;
SU(3):   STRDui %54:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%54
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %55:fpr64 = FDIVDrr %54:fpr64, %53:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%54
    SU(0): Data Latency=4 Reg=%53
  Successors:
    SU(5): Data Latency=1 Reg=%55
  Single Issue       : false;
SU(5):   STRDui %55:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%55
  Single Issue       : false;
SU(6):   %57:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRDui %55:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 1 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(1) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %55:fpr64 = FDIVDrr %54:fpr64, %53:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRDui %54:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  Ready @2c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRDui %53:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %57:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @4c
  BotQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %54:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %53:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
SU(2):   %54:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
SU(6):   %57:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(1):   STRDui %53:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
SU(3):   STRDui %54:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
SU(4):   %55:fpr64 = FDIVDrr %54:fpr64, %53:fpr64
SU(5):   STRDui %55:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)

********** MI Scheduling **********
diffusion:%bb.40 if.end192
  From: $x0 = COPY %317:gpr64common
    To: BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %317:gpr64common
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %362:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %362:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %317:gpr64common
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $x0 = COPY %317:gpr64common
SU(1):   $x1 = COPY %362:gpr64

********** MI Scheduling **********
diffusion:%bb.43 for.cond196
  From: %74:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.45, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %74:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%74
  Single Issue       : false;
SU(1):   %76:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%76
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %74:gpr32, %76:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%76
    SU(0): Data Latency=4 Reg=%74
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.45, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %74:gpr32, %76:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %76:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %74:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %74:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %76:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %74:gpr32, %76:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: %222:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.43
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %222:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%222
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%222
  Successors:
    SU(2): Data Latency=1 Reg=%223
  Single Issue       : false;
SU(2):   STRWui %223:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%223
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.43
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %223:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %222:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %222:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0
SU(2):   STRWui %223:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: $x0 = COPY %217:gpr64
    To: BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %217:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %219:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %221:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %221:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %219:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %217:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $x0 = COPY %217:gpr64
SU(1):   $x1 = COPY %219:gpr64
SU(2):   $w2 = COPY %221:gpr32

********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: %212:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %212:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%212
    SU(1): Data Latency=4 Reg=%212
  Single Issue       : false;
SU(1):   %215:gpr64 = MADDXrrr %212:gpr64, %255:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%212
  Successors:
    SU(3): Data Latency=1 Reg=%215
    SU(2): Data Latency=1 Reg=%215
  Single Issue       : false;
SU(2):   %217:gpr64 = ADDXrr %277:gpr64, %215:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%215
  Single Issue       : false;
SU(3):   %219:gpr64 = ADDXrr %362:gpr64, %215:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%215
  Single Issue       : false;
SU(4):   %221:gpr32 = LDRWroX %220:gpr64common, %212:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%212
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %212:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 1 
TopQ.A RemLatency SU(4) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %219:gpr64 = ADDXrr %362:gpr64, %215:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %217:gpr64 = ADDXrr %277:gpr64, %215:gpr64
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %215:gpr64 = MADDXrrr %212:gpr64, %255:gpr64, $xzr
  Ready @2c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %221:gpr32 = LDRWroX %220:gpr64common, %212:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %212:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(4):   %221:gpr32 = LDRWroX %220:gpr64common, %212:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
SU(1):   %215:gpr64 = MADDXrrr %212:gpr64, %255:gpr64, $xzr
SU(2):   %217:gpr64 = ADDXrr %277:gpr64, %215:gpr64
SU(3):   %219:gpr64 = ADDXrr %362:gpr64, %215:gpr64

********** MI Scheduling **********
diffusion:%bb.47 if.end211
  From: $x0 = COPY %232:gpr64common
    To: BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %232:gpr64common
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %277:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %277:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %232:gpr64common
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   $x0 = COPY %232:gpr64common
SU(1):   $x1 = COPY %277:gpr64

********** MI Scheduling **********
diffusion:%bb.50 for.cond215
  From: %87:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.57, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %87:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%87
  Single Issue       : false;
SU(1):   %89:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%89
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %87:gpr32, %89:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%89
    SU(0): Data Latency=4 Reg=%87
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.57, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %87:gpr32, %89:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %89:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %87:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %87:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %89:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %87:gpr32, %89:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.52 for.cond218
  From: %190:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
    To: Bcc 12, %bb.56, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %190:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(1):   %191:gpr64common = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWri %190:gpr32common, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%190
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.56, implicit killed $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri %190:gpr32common, 5, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %191:gpr64common = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %190:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %190:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %191:gpr64common = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(2):   dead $wzr = SUBSWri %190:gpr32common, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.53 for.body220
  From: %199:gpr64common = MADDXrrr %191:gpr64common, %196:gpr64, %198:gpr64
    To: CBNZW %201:gpr32, %bb.55
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %199:gpr64common = MADDXrrr %191:gpr64common, %196:gpr64, %198:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=%199
  Single Issue       : false;
SU(1):   %200:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%200
  Single Issue       : false;
SU(2):   %201:gpr32 = LDRWroX %199:gpr64common, %200:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%200
    SU(0): Data Latency=1 Reg=%199
  Successors:
    ExitSU: Data Latency=4 Reg=%201
  Single Issue       : false;
ExitSU:   CBNZW %201:gpr32, %bb.55
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%201
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %201:gpr32 = LDRWroX %199:gpr64common, %200:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %199:gpr64common = MADDXrrr %191:gpr64common, %196:gpr64, %198:gpr64
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %200:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(1):   %200:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(0):   %199:gpr64common = MADDXrrr %191:gpr64common, %196:gpr64, %198:gpr64
SU(2):   %201:gpr32 = LDRWroX %199:gpr64common, %200:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)

********** MI Scheduling **********
diffusion:%bb.54 if.then226
  From: $x0 = COPY %207:gpr64
    To: BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %207:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %208:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %208:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %207:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(2):   $d0 = FMOVD0
SU(0):   $x0 = COPY %207:gpr64
SU(1):   $w1 = COPY %208:gpr32

********** MI Scheduling **********
diffusion:%bb.54 if.then226
  From: %202:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %202:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%202
  Single Issue       : false;
SU(1):   %207:gpr64 = MADDXrrr %202:gpr64, %255:gpr64, %277:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%202
  Single Issue       : false;
SU(2):   %208:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %207:gpr64 = MADDXrrr %202:gpr64, %255:gpr64, %277:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %208:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %202:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   %202:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(2):   %208:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %207:gpr64 = MADDXrrr %202:gpr64, %255:gpr64, %277:gpr64

********** MI Scheduling **********
diffusion:%bb.55 for.inc231
  From: %210:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
    To: B %bb.52
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %210:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%210
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%210
  Successors:
    SU(2): Data Latency=1 Reg=%211
  Single Issue       : false;
SU(2):   STRWui %211:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%211
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.52
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %211:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %210:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   %210:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0
SU(2):   STRWui %211:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)

********** MI Scheduling **********
diffusion:%bb.56 for.inc234
  From: %194:gpr32common = nsw ADDWri %191.sub_32:gpr64common, 1, 0
    To: B %bb.50
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %194:gpr32common = nsw ADDWri %191.sub_32:gpr64common, 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%194
  Single Issue       : false;
SU(1):   STRWui %194:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%194
  Single Issue       : false;
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %194:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %194:gpr32common = nsw ADDWri %191.sub_32:gpr64common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %194:gpr32common = nsw ADDWri %191.sub_32:gpr64common, 1, 0
SU(1):   STRWui %194:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.57 for.end236
  From: STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.58 for.cond237
  From: %93:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.69, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %93:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%93
  Single Issue       : false;
SU(1):   %95:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%95
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %93:gpr32, %95:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%95
    SU(0): Data Latency=4 Reg=%93
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.69, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %93:gpr32, %95:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %95:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %93:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %93:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %95:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %93:gpr32, %95:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.60 for.cond240
  From: %141:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.68, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %141:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%141
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %141:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%141
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.68, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %141:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %141:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %141:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %141:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.62 for.cond243
  From: %146:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.67, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %146:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%146
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.67, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %146:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   %146:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.64 for.cond246
  From: %151:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.66, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %151:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%151
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%151
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.66, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %151:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %151:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.65 for.body248
  From: %155:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
    To: B %bb.64
 RegionInstrs: 28
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=11
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
Live In: %386 %277 %261 %362 %255 
Live Out: %386 %277 %261 %362 %255 
Live Thru: GPR32=5
  LiveReg: %386
  UpdateRegP: SU(19) %182:gpr64 = ADDXrr %386:gpr64, %159:gpr64
              to 
  LiveReg: %277
  UpdateRegP: SU(14) %176:gpr64 = ADDXrr %277:gpr64, %159:gpr64
              to 
  LiveReg: %261
  UpdateRegP: SU(5) %165:gpr64 = MADDXrrr %162:gpr64, %261:gpr64, $xzr
              to 
  LiveReg: %362
  UpdateRegP: SU(3) %161:gpr64 = ADDXrr %362:gpr64, %159:gpr64
              to 
  LiveReg: %255
  UpdateRegP: SU(2) %159:gpr64 = MADDXrrr %156:gpr64, %255:gpr64, $xzr
              to 
Top Pressure:
GPR32=5
Bottom Pressure:
GPR32=5
Excess PSets: 
SU(0):   %155:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(24): Data Latency=4 Reg=%155
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(1):   %156:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%156
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %159:gpr64 = MADDXrrr %156:gpr64, %255:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%156
  Successors:
    SU(19): Data Latency=1 Reg=%159
    SU(14): Data Latency=1 Reg=%159
    SU(3): Data Latency=1 Reg=%159
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %161:gpr64 = ADDXrr %362:gpr64, %159:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%159
  Successors:
    SU(6): Data Latency=1 Reg=%161
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %162:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(5): Data Latency=4 Reg=%162
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %165:gpr64 = MADDXrrr %162:gpr64, %261:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(4): Data Latency=4 Reg=%162
  Successors:
    SU(20): Data Latency=1 Reg=%165
    SU(15): Data Latency=1 Reg=%165
    SU(6): Data Latency=1 Reg=%165
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %166:gpr64 = ADDXrr %161:gpr64, %165:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(3): Data Latency=1 Reg=%161
    SU(5): Data Latency=1 Reg=%165
  Successors:
    SU(10): Data Latency=1 Reg=%166
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %167:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Data Latency=4 Reg=%167
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(7): Data Latency=4 Reg=%167
  Successors:
    SU(9): Data Latency=1 Reg=%168
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %169:gpr64 = UBFMXri %168:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(8): Data Latency=1 Reg=%168
  Successors:
    SU(21): Data Latency=1 Reg=%169
    SU(16): Data Latency=1 Reg=%169
    SU(10): Data Latency=1 Reg=%169
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(6): Data Latency=1 Reg=%166
    SU(9): Data Latency=1 Reg=%169
  Successors:
    SU(13): Data Latency=1 Reg=%170
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %171:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(26): Data Latency=4 Reg=%171
    SU(12): Data Latency=4 Reg=%171
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %173:gpr64 = UBFMXri %171:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(11): Data Latency=4 Reg=%171
  Successors:
    SU(22): Data Latency=1 Reg=%173
    SU(17): Data Latency=1 Reg=%173
    SU(13): Data Latency=1 Reg=%173
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %174:fpr64 = LDRDroX %170:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(10): Data Latency=1 Reg=%170
    SU(12): Data Latency=1 Reg=%173
  Successors:
    SU(18): Data Latency=4 Reg=%174
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(14):   %176:gpr64 = ADDXrr %277:gpr64, %159:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%159
  Successors:
    SU(15): Data Latency=1 Reg=%176
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %177:gpr64 = ADDXrr %176:gpr64, %165:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(14): Data Latency=1 Reg=%176
    SU(5): Data Latency=1 Reg=%165
  Successors:
    SU(16): Data Latency=1 Reg=%177
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %178:gpr64common = ADDXrr %177:gpr64, %169:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(15): Data Latency=1 Reg=%177
    SU(9): Data Latency=1 Reg=%169
  Successors:
    SU(17): Data Latency=1 Reg=%178
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(17):   %179:fpr64 = LDRDroX %178:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(16): Data Latency=1 Reg=%178
    SU(12): Data Latency=1 Reg=%173
  Successors:
    SU(18): Data Latency=4 Reg=%179
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(18):   %180:fpr64 = FMULDrr %174:fpr64, %179:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(17): Data Latency=4 Reg=%179
    SU(13): Data Latency=4 Reg=%174
  Successors:
    SU(23): Data Latency=1 Reg=%180
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(19):   %182:gpr64 = ADDXrr %386:gpr64, %159:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(2): Data Latency=1 Reg=%159
  Successors:
    SU(20): Data Latency=1 Reg=%182
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %183:gpr64 = ADDXrr %182:gpr64, %165:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(19): Data Latency=1 Reg=%182
    SU(5): Data Latency=1 Reg=%165
  Successors:
    SU(21): Data Latency=1 Reg=%183
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   %184:gpr64common = ADDXrr %183:gpr64, %169:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(20): Data Latency=1 Reg=%183
    SU(9): Data Latency=1 Reg=%169
  Successors:
    SU(22): Data Latency=1 Reg=%184
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(22):   %185:fpr64 = LDRDroX %184:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(21): Data Latency=1 Reg=%184
    SU(12): Data Latency=1 Reg=%173
  Successors:
    SU(23): Data Latency=4 Reg=%185
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(23):   %186:fpr64 = FMULDrr %180:fpr64, %185:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(18): Data Latency=1 Reg=%180
    SU(22): Data Latency=4 Reg=%185
  Successors:
    SU(24): Data Latency=1 Reg=%186
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(24):   %187:fpr64 = FADDDrr %155:fpr64, %186:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(23): Data Latency=1 Reg=%186
    SU(0): Data Latency=4 Reg=%155
  Successors:
    SU(25): Data Latency=1 Reg=%187
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(25):   STRDui %187:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(24): Data Latency=1 Reg=%187
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(26):   %188:gpr32common = nsw ADDWri %171.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(11): Data Latency=4 Reg=%171
  Successors:
    SU(27): Data Latency=1 Reg=%188
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   STRWui %188:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(26): Data Latency=1 Reg=%188
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 25 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) STRWui %188:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=6
  LiveReg: %188
  UpdateRegP: SU(27) STRWui %188:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(27) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 26 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
BotQ.A RemLatency SU(25) 15c
  BotQ.A RemainingLatency 15 + 1c > CritPath 15
Picking from Bot:
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(25) STRDui %187:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
Bottom Pressure:
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %187
  UpdateRegP: SU(25) STRDui %187:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
              to 
  Ready @1c
  BotQ.A TopLatency SU(25) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 24 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
BotQ.A RemLatency SU(24) 14c
  BotQ.A RemainingLatency 14 + 2c > CritPath 15
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(24) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(24) %187:fpr64 = FADDDrr %155:fpr64, %186:fpr64
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %155
  UpdateRegP: SU(24) %187:fpr64 = FADDDrr %155:fpr64, %186:fpr64
              to 
  LiveReg: %186
  UpdateRegP: SU(24) %187:fpr64 = FADDDrr %155:fpr64, %186:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(24) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 26 23 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
BotQ.A RemLatency SU(23) 13c
  BotQ.A RemainingLatency 13 + 3c > CritPath 15
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(23) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(23) %186:fpr64 = FMULDrr %180:fpr64, %185:fpr64
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %180
  UpdateRegP: SU(23) %186:fpr64 = FMULDrr %180:fpr64, %185:fpr64
              to 
  LiveReg: %185
  UpdateRegP: SU(23) %186:fpr64 = FMULDrr %180:fpr64, %185:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(23) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 22 
Queue BotQ.A: 26 18 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
BotQ.A RemLatency SU(18) 12c
BotQ.A RemLatency SU(22) 8c
  BotQ.A RemainingLatency 12 + 4c > CritPath 15
Picking from Bot:
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(26) %188:gpr32common = nsw ADDWri %171.sub_32:gpr64common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %171
  UpdateRegP: SU(12) %173:gpr64 = UBFMXri %171:gpr64common, 61, 60
              to GPR32 -1
  UpdateRegP: SU(26) %188:gpr32common = nsw ADDWri %171.sub_32:gpr64common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 22 
Queue BotQ.A: 18 
Pick Bot ONLY1     
Scheduling SU(18) %180:fpr64 = FMULDrr %174:fpr64, %179:fpr64
Bottom Pressure:
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %174
  UpdateRegP: SU(18) %180:fpr64 = FMULDrr %174:fpr64, %179:fpr64
              to 
  LiveReg: %179
  UpdateRegP: SU(18) %180:fpr64 = FMULDrr %174:fpr64, %179:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(18) 12c
  BotQ.A BotLatency SU(18) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 22 17 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %155:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 17 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) %185:fpr64 = LDRDroX %184:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %184
  UpdateRegP: SU(22) %185:fpr64 = LDRDroX %184:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  LiveReg: %173
  UpdateRegP: SU(13) %174:fpr64 = LDRDroX %170:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(17) %179:fpr64 = LDRDroX %178:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(22) %185:fpr64 = LDRDroX %184:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(22) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 17 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %184:gpr64common = ADDXrr %183:gpr64, %169:gpr64
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %183
  UpdateRegP: SU(21) %184:gpr64common = ADDXrr %183:gpr64, %169:gpr64
              to 
  LiveReg: %169
  UpdateRegP: SU(10) %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
              to 
  UpdateRegP: SU(16) %178:gpr64common = ADDXrr %177:gpr64, %169:gpr64
              to 
  UpdateRegP: SU(21) %184:gpr64common = ADDXrr %183:gpr64, %169:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(21) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 13 17 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(13) 8c
  BotQ.A RemainingLatency 8 + 9c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(13) BOT-PATH                  8 cycles 
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(11) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %179:fpr64 = LDRDroX %178:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %178
  UpdateRegP: SU(17) %179:fpr64 = LDRDroX %178:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 13 16 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(13) 8c
  BotQ.A RemainingLatency 8 + 10c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(13) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %174:fpr64 = LDRDroX %170:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
Bottom Pressure:
GPR32=11
  LiveReg: %170
  UpdateRegP: SU(13) %174:fpr64 = LDRDroX %170:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @10c
  BotQ.A TopLatency SU(13) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 16 10 12 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(16) 7c
  BotQ.A RemainingLatency 7 + 11c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(16) REG-MAX                            
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(16) %178:gpr64common = ADDXrr %177:gpr64, %169:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %177
  UpdateRegP: SU(16) %178:gpr64common = ADDXrr %177:gpr64, %169:gpr64
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(16) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 10 15 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(10) 7c
  BotQ.A RemainingLatency 7 + 12c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) REG-MAX                            
  Cand SU(10) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(10) %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %166
  UpdateRegP: SU(10) %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
              to GPR32 -1
  Ready @12c
  BotQ.A TopLatency SU(10) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 15 6 9 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(20) 6c
  BotQ.A RemainingLatency 6 + 13c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) REG-MAX                            
  Cand SU(9) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %169:gpr64 = UBFMXri %168:gpr64, 61, 60
Bottom Pressure:
GPR32=11
  LiveReg: %168
  UpdateRegP: SU(9) %169:gpr64 = UBFMXri %168:gpr64, 61, 60
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(9) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 15 6 8 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(20) 6c
  BotQ.A RemainingLatency 6 + 14c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) REG-MAX                            
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %173:gpr64 = UBFMXri %171:gpr64common, 61, 60
Bottom Pressure:
GPR32=10
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 20 8 15 6 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(20) 6c
  BotQ.A RemainingLatency 6 + 15c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(20) %183:gpr64 = ADDXrr %182:gpr64, %165:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %182
  UpdateRegP: SU(20) %183:gpr64 = ADDXrr %182:gpr64, %165:gpr64
              to 
  LiveReg: %165
  UpdateRegP: SU(6) %166:gpr64 = ADDXrr %161:gpr64, %165:gpr64
              to 
  UpdateRegP: SU(15) %177:gpr64 = ADDXrr %176:gpr64, %165:gpr64
              to 
  UpdateRegP: SU(20) %183:gpr64 = ADDXrr %182:gpr64, %165:gpr64
              to GPR32 -1
  Ready @15c
  BotQ.A TopLatency SU(20) 6c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 6 8 15 19 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 16c > CritPath 15
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %177:gpr64 = ADDXrr %176:gpr64, %165:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %176
  UpdateRegP: SU(15) %177:gpr64 = ADDXrr %176:gpr64, %165:gpr64
              to GPR32 -1
  Ready @16c
  BotQ.A TopLatency SU(15) 6c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 6 8 19 14 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 17c > CritPath 15
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %166:gpr64 = ADDXrr %161:gpr64, %165:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %161
  UpdateRegP: SU(6) %166:gpr64 = ADDXrr %161:gpr64, %165:gpr64
              to GPR32 -1
  Ready @17c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 8 19 3 5 11 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 18c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %182:gpr64 = ADDXrr %386:gpr64, %159:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %159
  UpdateRegP: SU(3) %161:gpr64 = ADDXrr %362:gpr64, %159:gpr64
              to GPR32 -1
  UpdateRegP: SU(14) %176:gpr64 = ADDXrr %277:gpr64, %159:gpr64
              to GPR32 -1
  UpdateRegP: SU(19) %182:gpr64 = ADDXrr %386:gpr64, %159:gpr64
              to GPR32 -1
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 8 11 3 5 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 19c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %176:gpr64 = ADDXrr %277:gpr64, %159:gpr64
Bottom Pressure:
GPR32=10
  Ready @19c
  BotQ.A TopLatency SU(14) 5c
  BotQ.A BotLatency SU(14) 10c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 11 3 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 20c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %161:gpr64 = ADDXrr %362:gpr64, %159:gpr64
Bottom Pressure:
GPR32=9
  Ready @20c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 11 2 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 21c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
Bottom Pressure:
GPR32=9
  LiveReg: %167
  UpdateRegP: SU(8) %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
              to GPR32 -1
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 2 11 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 22c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %165:gpr64 = MADDXrrr %162:gpr64, %261:gpr64, $xzr
Bottom Pressure:
GPR32=9
  LiveReg: %162
  UpdateRegP: SU(5) %165:gpr64 = MADDXrrr %162:gpr64, %261:gpr64, $xzr
              to GPR32 -1
  Ready @22c
  BotQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 4 
Queue BotQ.A: 11 2 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 23c > CritPath 15
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %159:gpr64 = MADDXrrr %156:gpr64, %255:gpr64, $xzr
Bottom Pressure:
GPR32=9
  LiveReg: %156
  UpdateRegP: SU(2) %159:gpr64 = MADDXrrr %156:gpr64, %255:gpr64, $xzr
              to GPR32 -1
  Ready @23c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 4 1 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %171:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=8
  Ready @24c
  BotQ.A BotLatency SU(11) 12c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 4 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %167:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=7
  Ready @25c
  BotQ.A BotLatency SU(7) 14c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %162:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=6
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %156:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=5
  Ready @27c
  BotQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(1):   %156:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(4):   %162:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(7):   %167:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(11):   %171:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   %159:gpr64 = MADDXrrr %156:gpr64, %255:gpr64, $xzr
SU(5):   %165:gpr64 = MADDXrrr %162:gpr64, %261:gpr64, $xzr
SU(8):   %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
SU(3):   %161:gpr64 = ADDXrr %362:gpr64, %159:gpr64
SU(14):   %176:gpr64 = ADDXrr %277:gpr64, %159:gpr64
SU(19):   %182:gpr64 = ADDXrr %386:gpr64, %159:gpr64
SU(6):   %166:gpr64 = ADDXrr %161:gpr64, %165:gpr64
SU(15):   %177:gpr64 = ADDXrr %176:gpr64, %165:gpr64
SU(20):   %183:gpr64 = ADDXrr %182:gpr64, %165:gpr64
SU(12):   %173:gpr64 = UBFMXri %171:gpr64common, 61, 60
SU(9):   %169:gpr64 = UBFMXri %168:gpr64, 61, 60
SU(10):   %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
SU(16):   %178:gpr64common = ADDXrr %177:gpr64, %169:gpr64
SU(13):   %174:fpr64 = LDRDroX %170:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
SU(17):   %179:fpr64 = LDRDroX %178:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
SU(21):   %184:gpr64common = ADDXrr %183:gpr64, %169:gpr64
SU(22):   %185:fpr64 = LDRDroX %184:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
SU(0):   %155:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(18):   %180:fpr64 = FMULDrr %174:fpr64, %179:fpr64
SU(26):   %188:gpr32common = nsw ADDWri %171.sub_32:gpr64common, 1, 0
SU(23):   %186:fpr64 = FMULDrr %180:fpr64, %185:fpr64
SU(24):   %187:fpr64 = FADDDrr %155:fpr64, %186:fpr64
SU(25):   STRDui %187:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
SU(27):   STRWui %188:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
diffusion:%bb.66 for.inc279
  From: %153:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.62
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %153:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%153
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%153
  Successors:
    SU(2): Data Latency=1 Reg=%154
  Single Issue       : false;
SU(2):   STRWui %154:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%154
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.62
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %154:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %153:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   %153:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
SU(2):   STRWui %154:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
diffusion:%bb.67 for.inc282
  From: %148:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.60
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %148:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%148
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%148
  Successors:
    SU(2): Data Latency=1 Reg=%149
  Single Issue       : false;
SU(2):   STRWui %149:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%149
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.60
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %149:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %148:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   %148:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
SU(2):   STRWui %149:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
diffusion:%bb.68 for.inc285
  From: %143:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.58
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %143:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%143
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%143
  Successors:
    SU(2): Data Latency=1 Reg=%144
  Single Issue       : false;
SU(2):   STRWui %144:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%144
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.58
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %144:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %143:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   %143:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
SU(2):   STRWui %144:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.70 for.cond288
  From: %98:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.72, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %98:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%98
  Single Issue       : false;
SU(1):   %100:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%100
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %98:gpr32, %100:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%100
    SU(0): Data Latency=4 Reg=%98
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.72, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %98:gpr32, %100:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %100:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %98:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.70 ***
SU(0):   %98:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %100:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   dead $wzr = SUBSWrr %98:gpr32, %100:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.71 for.body290
  From: %126:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.70
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %126:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(11): Data Latency=4 Reg=%126
    SU(1): Data Latency=4 Reg=%126
    SU(12): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %129:gpr64 = UBFMXri %126:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%126
  Successors:
    SU(7): Data Latency=1 Reg=%129
    SU(5): Data Latency=1 Reg=%129
    SU(3): Data Latency=1 Reg=%129
    SU(2): Data Latency=1 Reg=%129
  Single Issue       : false;
SU(2):   %130:fpr64 = LDRDroX %232:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%129
  Successors:
    SU(4): Data Latency=4 Reg=%130
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %132:fpr64 = LDRDroX %131:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%129
  Successors:
    SU(4): Data Latency=4 Reg=%132
  Single Issue       : false;
SU(4):   %133:fpr64 = FMULDrr %130:fpr64, %132:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%132
    SU(2): Data Latency=4 Reg=%130
  Successors:
    SU(8): Data Latency=1 Reg=%133
    SU(5): Data Latency=1 Reg=%133
  Single Issue       : false;
SU(5):   STRDroX %133:fpr64, %232:gpr64common, %129:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%133
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=%129
  Single Issue       : false;
SU(6):   %134:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%134
    SU(10): Ord  Latency=0 Memory
  Single Issue       : false;
SU(7):   %136:fpr64 = LDRDroX %317:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%129
  Successors:
    SU(8): Data Latency=4 Reg=%136
  Single Issue       : false;
SU(8):   %137:fpr64 = FMULDrr %136:fpr64, %133:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%133
    SU(7): Data Latency=4 Reg=%136
  Successors:
    SU(9): Data Latency=1 Reg=%137
  Single Issue       : false;
SU(9):   %138:fpr64 = FADDDrr %134:fpr64, %137:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%137
    SU(6): Data Latency=4 Reg=%134
  Successors:
    SU(10): Data Latency=1 Reg=%138
  Single Issue       : false;
SU(10):   STRDui %138:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%138
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(11):   %139:gpr32common = nsw ADDWri %126.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%126
  Successors:
    SU(12): Data Latency=1 Reg=%139
  Single Issue       : false;
SU(12):   STRWui %139:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%139
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.70
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 5 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %139:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  Ready @0c
  BotQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(10) 12c
  BotQ.A RemainingLatency 12 + 1c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(10) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRDui %138:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  Ready @1c
  BotQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(9) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %138:fpr64 = FADDDrr %134:fpr64, %137:fpr64
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 11 8 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %137:fpr64 = FMULDrr %136:fpr64, %133:fpr64
  Ready @3c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 5 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 10 + 4c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %133:fpr64, %232:gpr64common, %129:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
  Ready @4c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 11 4 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 9 + 5c > CritPath 12
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %133:fpr64 = FMULDrr %130:fpr64, %132:fpr64
  Ready @5c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 7 3 
Queue BotQ.A: 11 6 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(11) 4c
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 8 + 6c > CritPath 12
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %139:gpr32common = nsw ADDWri %126.sub_32:gpr64common, 1, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 3 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(7) 5c
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 7 + 7c > CritPath 12
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %136:fpr64 = LDRDroX %317:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
  Ready @7c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %134:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %126:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %129:gpr64 = UBFMXri %126:gpr64common, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 9c > CritPath 12
TopQ.A RemLatency SU(3) 7c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %132:fpr64 = LDRDroX %131:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
  Ready @9c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %130:fpr64 = LDRDroX %232:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
  Ready @10c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   %126:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %129:gpr64 = UBFMXri %126:gpr64common, 61, 60
SU(2):   %130:fpr64 = LDRDroX %232:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
SU(3):   %132:fpr64 = LDRDroX %131:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
SU(6):   %134:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(7):   %136:fpr64 = LDRDroX %317:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
SU(11):   %139:gpr32common = nsw ADDWri %126.sub_32:gpr64common, 1, 0
SU(4):   %133:fpr64 = FMULDrr %130:fpr64, %132:fpr64
SU(5):   STRDroX %133:fpr64, %232:gpr64common, %129:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
SU(8):   %137:fpr64 = FMULDrr %136:fpr64, %133:fpr64
SU(9):   %138:fpr64 = FADDDrr %134:fpr64, %137:fpr64
SU(10):   STRDui %138:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
SU(12):   STRWui %139:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %124:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
    To: B %bb.20
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %124:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%124
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%124
  Successors:
    SU(2): Data Latency=1 Reg=%125
  Single Issue       : false;
SU(2):   STRWui %125:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%125
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %125:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %124:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %124:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
SU(1):   %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0
SU(2):   STRWui %125:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: $x0 = COPY %314:gpr64common
    To: BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %314:gpr64common
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %232:gpr64common
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %120:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %121:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %121:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %120:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %232:gpr64common
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %314:gpr64common
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $x0 = COPY %314:gpr64common
SU(1):   $x1 = COPY %232:gpr64common
SU(2):   $d0 = COPY %120:fpr64
SU(3):   $w2 = COPY %121:gpr32

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %119:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %119:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%119
  Single Issue       : false;
SU(1):   %120:fpr64 = FNEGDr %119:fpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%119
  Single Issue       : false;
SU(2):   %121:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %120:fpr64 = FNEGDr %119:fpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %121:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %119:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %119:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(2):   %121:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(1):   %120:fpr64 = FNEGDr %119:fpr64

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: $x0 = COPY %356:gpr64
    To: BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %356:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %277:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %115:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %116:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %116:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %115:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %277:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %356:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $x0 = COPY %356:gpr64
SU(1):   $x1 = COPY %277:gpr64
SU(2):   $d0 = COPY %115:fpr64
SU(3):   $w2 = COPY %116:gpr32

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %114:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %114:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%114
  Single Issue       : false;
SU(1):   %115:fpr64 = FNEGDr %114:fpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%114
  Single Issue       : false;
SU(2):   %116:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %115:fpr64 = FNEGDr %114:fpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %116:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %114:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %114:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(2):   %116:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(1):   %115:fpr64 = FNEGDr %114:fpr64

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: $x0 = COPY %112:gpr64
    To: BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %112:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %317:gpr64common
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %109:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %111:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %111:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %109:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %317:gpr64common
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %112:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $x0 = COPY %112:gpr64
SU(1):   $x1 = COPY %317:gpr64common
SU(2):   $d0 = COPY %109:fpr64
SU(3):   $w2 = COPY %111:gpr32

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %109:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %109:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %111:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %111:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %109:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %109:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(1):   %111:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: $x0 = COPY %107:gpr64
    To: BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %107:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %362:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %104:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %106:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %106:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %104:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %362:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %107:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $x0 = COPY %107:gpr64
SU(1):   $x1 = COPY %362:gpr64
SU(2):   $d0 = COPY %104:fpr64
SU(3):   $w2 = COPY %106:gpr32

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %102:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(1):   %103:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%103
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%103
    SU(0): Data Latency=4 Reg=%102
  Successors:
    SU(3): Data Latency=1 Reg=%104
  Single Issue       : false;
SU(3):   STRDui %104:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%104
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %106:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %104:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %106:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %103:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %102:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %102:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
SU(1):   %103:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(4):   %106:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(2):   %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64
SU(3):   STRDui %104:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)

********** MI Scheduling **********
diffusion:%bb.75 if.end314
  From: %32:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
    To: BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %32:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%32
  Single Issue       : false;
SU(1):   %33:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(2):   $x0 = COPY %32:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%32
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x1 = COPY %33:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%33
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $x1 = COPY %33:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = COPY %32:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %33:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %32:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   %32:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
SU(1):   %33:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
SU(2):   $x0 = COPY %32:gpr64
SU(3):   $x1 = COPY %33:gpr64

********** INTERVALS **********
W0 [0B,68r:0)[160r,176r:8)[516r,528r:21)[660r,672r:20)[5624r,5680r:18)[5760r,5824r:17)[5952r,5968r:4)[6032r,6064r:16)[6176r,6192r:3)[6504r,6544r:9)[6736r,6752r:2)[6816r,6848r:15)[6960r,6976r:1)[7524r,7536r:10)[9584r,9648r:14)[9728r,9792r:13)[9888r,9952r:12)[10048r,10112r:11)[10320r,10336r:7)[10432r,10464r:19)[10592r,10608r:6)[10752r,10768r:5)  0@0B-phi 1@6960r 2@6736r 3@6176r 4@5952r 5@10752r 6@10592r 7@10320r 8@160r 9@6504r 10@7524r 11@10048r 12@9888r 13@9728r 14@9584r 15@6816r 16@6032r 17@5760r 18@5624r 19@10432r 20@660r 21@516r
W1 [520r,528r:2)[664r,672r:1)[5632r,5680r:11)[5776r,5824r:10)[6048r,6064r:9)[6512r,6544r:3)[6832r,6848r:8)[7528r,7536r:0)[9600r,9648r:7)[9744r,9792r:6)[9904r,9952r:5)[10064r,10112r:4)[10448r,10464r:12)  0@7528r 1@664r 2@520r 3@6512r 4@10064r 5@9904r 6@9744r 7@9600r 8@6832r 9@6048r 10@5776r 11@5632r 12@10448r
%1 [68r,72r:0)  0@68r weight:0.000000e+00
%2 [48r,10656r:0)  0@48r weight:0.000000e+00
%3 [64r,80r:0)  0@64r weight:0.000000e+00
%5 [224r,240r:0)  0@224r weight:0.000000e+00
%6 [400r,10208B:0)  0@400r weight:0.000000e+00
%7 [416r,520r:0)  0@416r weight:0.000000e+00
%8 [448r,516r:0)  0@448r weight:0.000000e+00
%10 [560r,10208B:0)  0@560r weight:0.000000e+00
%11 [576r,664r:0)  0@576r weight:0.000000e+00
%12 [608r,660r:0)  0@608r weight:0.000000e+00
%15 [928r,960r:0)  0@928r weight:0.000000e+00
%16 [768r,10208B:0)  0@768r weight:0.000000e+00
%17 [944r,960r:0)  0@944r weight:0.000000e+00
%20 [2592r,2624r:0)  0@2592r weight:0.000000e+00
%22 [2608r,2624r:0)  0@2608r weight:0.000000e+00
%24 [2952r,3224r:0)  0@2952r weight:0.000000e+00
%25 [3264r,3296r:0)  0@3264r weight:0.000000e+00
%26 [2976r,10208B:0)  0@2976r weight:0.000000e+00
%27 [3280r,3296r:0)  0@3280r weight:0.000000e+00
%30 [10224r,10240r:0)  0@10224r weight:0.000000e+00
%32 [10400r,10432r:0)  0@10400r weight:0.000000e+00
%33 [10416r,10448r:0)  0@10416r weight:0.000000e+00
%35 [10496r,10512r:0)  0@10496r weight:0.000000e+00
%38 [10656r,10672r:0)  0@10656r weight:0.000000e+00
%40 [3360r,3376r:0)  0@3360r weight:0.000000e+00
%44 [3520r,3552r:0)  0@3520r weight:0.000000e+00
%46 [3536r,3552r:0)  0@3536r weight:0.000000e+00
%49 [5136r,5168r:0)  0@5136r weight:0.000000e+00
%51 [5152r,5168r:0)  0@5152r weight:0.000000e+00
%53 [5496r,5600r:0)  0@5496r weight:0.000000e+00
%54 [5520r,5600r:0)  0@5520r weight:0.000000e+00
%55 [5600r,5648r:0)  0@5600r weight:0.000000e+00
%57 [5584r,5664r:0)  0@5584r weight:0.000000e+00
%60 [5712r,5792r:0)  0@5712r weight:0.000000e+00
%62 [5728r,5808r:0)  0@5728r weight:0.000000e+00
%66 [5872r,5888r:0)  0@5872r weight:0.000000e+00
%71 [6096r,6112r:0)  0@6096r weight:0.000000e+00
%74 [6288r,6320r:0)  0@6288r weight:0.000000e+00
%76 [6304r,6320r:0)  0@6304r weight:0.000000e+00
%79 [6656r,6672r:0)  0@6656r weight:0.000000e+00
%84 [6880r,6896r:0)  0@6880r weight:0.000000e+00
%87 [7072r,7104r:0)  0@7072r weight:0.000000e+00
%89 [7088r,7104r:0)  0@7088r weight:0.000000e+00
%93 [7840r,7872r:0)  0@7840r weight:0.000000e+00
%95 [7856r,7872r:0)  0@7856r weight:0.000000e+00
%98 [9136r,9168r:0)  0@9136r weight:0.000000e+00
%100 [9152r,9168r:0)  0@9152r weight:0.000000e+00
%102 [9496r,9556r:0)  0@9496r weight:0.000000e+00
%103 [9504r,9556r:0)  0@9504r weight:0.000000e+00
%104 [9556r,9616r:0)  0@9556r weight:0.000000e+00
%106 [9552r,9632r:0)  0@9552r weight:0.000000e+00
%107 [3216r,10208B:0)  0@3216r weight:0.000000e+00
%109 [9680r,9760r:0)  0@9680r weight:0.000000e+00
%111 [9696r,9776r:0)  0@9696r weight:0.000000e+00
%112 [3232r,10208B:0)  0@3232r weight:0.000000e+00
%114 [9824r,9864r:0)  0@9824r weight:0.000000e+00
%115 [9864r,9920r:0)  0@9864r weight:0.000000e+00
%116 [9856r,9936r:0)  0@9856r weight:0.000000e+00
%119 [9984r,10024r:0)  0@9984r weight:0.000000e+00
%120 [10024r,10080r:0)  0@10024r weight:0.000000e+00
%121 [10016r,10096r:0)  0@10016r weight:0.000000e+00
%124 [10144r,10160r:0)  0@10144r weight:0.000000e+00
%125 [10160r,10176r:0)  0@10160r weight:0.000000e+00
%126 [9232r,9424r:0)  0@9232r weight:0.000000e+00
%129 [9264r,9440r:0)  0@9264r weight:0.000000e+00
%130 [9280r,9432r:0)  0@9280r weight:0.000000e+00
%131 [3200r,10208B:0)  0@3200r weight:0.000000e+00
%132 [9296r,9432r:0)  0@9296r weight:0.000000e+00
%133 [9432r,9448r:0)  0@9432r weight:0.000000e+00
%134 [9344r,9456r:0)  0@9344r weight:0.000000e+00
%136 [9360r,9448r:0)  0@9360r weight:0.000000e+00
%137 [9448r,9456r:0)  0@9448r weight:0.000000e+00
%138 [9456r,9464r:0)  0@9456r weight:0.000000e+00
%139 [9424r,9472r:0)  0@9424r weight:0.000000e+00
%141 [7984r,8000r:0)  0@7984r weight:0.000000e+00
%143 [9008r,9024r:0)  0@9008r weight:0.000000e+00
%144 [9024r,9040r:0)  0@9024r weight:0.000000e+00
%146 [8112r,8128r:0)  0@8112r weight:0.000000e+00
%148 [8928r,8944r:0)  0@8928r weight:0.000000e+00
%149 [8944r,8960r:0)  0@8944r weight:0.000000e+00
%151 [8240r,8256r:0)  0@8240r weight:0.000000e+00
%153 [8848r,8864r:0)  0@8848r weight:0.000000e+00
%154 [8864r,8880r:0)  0@8864r weight:0.000000e+00
%155 [8752r,8808r:0)  0@8752r weight:0.000000e+00
%156 [8336r,8532r:0)  0@8336r weight:0.000000e+00
%159 [8532r,8672r:0)  0@8532r weight:0.000000e+00
%161 [8552r,8676r:0)  0@8552r weight:0.000000e+00
%162 [8400r,8536r:0)  0@8400r weight:0.000000e+00
%165 [8536r,8688r:0)  0@8536r weight:0.000000e+00
%166 [8676r,8704r:0)  0@8676r weight:0.000000e+00
%167 [8464r,8544r:0)  0@8464r weight:0.000000e+00
%168 [8544r,8696r:0)  0@8544r weight:0.000000e+00
%169 [8696r,8736r:0)  0@8696r weight:0.000000e+00
%170 [8704r,8720r:0)  0@8704r weight:0.000000e+00
%171 [8528r,8792r:0)  0@8528r weight:0.000000e+00
%173 [8692r,8744r:0)  0@8692r weight:0.000000e+00
%174 [8720r,8760r:0)  0@8720r weight:0.000000e+00
%176 [8592r,8680r:0)  0@8592r weight:0.000000e+00
%177 [8680r,8712r:0)  0@8680r weight:0.000000e+00
%178 [8712r,8728r:0)  0@8712r weight:0.000000e+00
%179 [8728r,8760r:0)  0@8728r weight:0.000000e+00
%180 [8760r,8800r:0)  0@8760r weight:0.000000e+00
%182 [8672r,8688r:0)  0@8672r weight:0.000000e+00
%183 [8688r,8736r:0)  0@8688r weight:0.000000e+00
%184 [8736r,8744r:0)  0@8736r weight:0.000000e+00
%185 [8744r,8800r:0)  0@8744r weight:0.000000e+00
%186 [8800r,8808r:0)  0@8800r weight:0.000000e+00
%187 [8808r,8816r:0)  0@8808r weight:0.000000e+00
%188 [8792r,8824r:0)  0@8792r weight:0.000000e+00
%190 [7216r,7248r:0)  0@7216r weight:0.000000e+00
%191 [7232r,7336r:0)[7648B,7696r:0)  0@7232r weight:0.000000e+00
%194 [7696r,7712r:0)  0@7696r weight:0.000000e+00
%196 [3136r,10208B:0)  0@3136r weight:0.000000e+00
%198 [3168r,10208B:0)  0@3168r weight:0.000000e+00
%199 [7336r,7344r:0)  0@7336r weight:0.000000e+00
%200 [7328r,7344r:0)  0@7328r weight:0.000000e+00
%201 [7344r,7360r:0)  0@7344r weight:0.000000e+00
%202 [7408r,7464r:0)  0@7408r weight:0.000000e+00
%207 [7464r,7524r:0)  0@7464r weight:0.000000e+00
%208 [7456r,7528r:0)  0@7456r weight:0.000000e+00
%210 [7584r,7600r:0)  0@7584r weight:0.000000e+00
%211 [7600r,7616r:0)  0@7600r weight:0.000000e+00
%212 [6384r,6472r:0)  0@6384r weight:0.000000e+00
%215 [6472r,6488r:0)  0@6472r weight:0.000000e+00
%217 [6480r,6504r:0)  0@6480r weight:0.000000e+00
%219 [6488r,6512r:0)  0@6488r weight:0.000000e+00
%220 [3104r,10208B:0)  0@3104r weight:0.000000e+00
%221 [6464r,6528r:0)  0@6464r weight:0.000000e+00
%222 [6576r,6592r:0)  0@6576r weight:0.000000e+00
%223 [6592r,6608r:0)  0@6592r weight:0.000000e+00
%224 [5232r,5424r:0)  0@5232r weight:0.000000e+00
%227 [5264r,5440r:0)  0@5264r weight:0.000000e+00
%228 [5280r,5432r:0)  0@5280r weight:0.000000e+00
%230 [5296r,5432r:0)  0@5296r weight:0.000000e+00
%231 [5432r,5448r:0)  0@5432r weight:0.000000e+00
%232 [3072r,10208B:0)  0@3072r weight:0.000000e+00
%233 [5344r,5456r:0)  0@5344r weight:0.000000e+00
%234 [5360r,5448r:0)  0@5360r weight:0.000000e+00
%235 [5448r,5456r:0)  0@5448r weight:0.000000e+00
%236 [5456r,5464r:0)  0@5456r weight:0.000000e+00
%237 [5424r,5472r:0)  0@5424r weight:0.000000e+00
%239 [3664r,3680r:0)  0@3664r weight:0.000000e+00
%241 [5016r,5024r:0)  0@5016r weight:0.000000e+00
%242 [5024r,5040r:0)  0@5024r weight:0.000000e+00
%244 [3792r,3808r:0)  0@3792r weight:0.000000e+00
%246 [4976r,4984r:0)  0@4976r weight:0.000000e+00
%247 [4984r,4992r:0)  0@4984r weight:0.000000e+00
%249 [3920r,3936r:0)  0@3920r weight:0.000000e+00
%251 [4936r,4944r:0)  0@4936r weight:0.000000e+00
%252 [4944r,4952r:0)  0@4944r weight:0.000000e+00
%253 [4000r,4468r:0)  0@4000r weight:0.000000e+00
%255 [2992r,10208B:0)  0@2992r weight:0.000000e+00
%256 [4468r,4512r:0)  0@4468r weight:0.000000e+00
%258 [4488r,4520r:0)  0@4488r weight:0.000000e+00
%259 [4376r,4472r:0)  0@4376r weight:0.000000e+00
%261 [3024r,10208B:0)  0@3024r weight:0.000000e+00
%262 [4472r,4536r:0)  0@4472r weight:0.000000e+00
%263 [4520r,4544r:0)  0@4520r weight:0.000000e+00
%264 [4424r,4480r:0)  0@4424r weight:0.000000e+00
%265 [4480r,4496r:0)  0@4480r weight:0.000000e+00
%266 [4496r,4568r:0)  0@4496r weight:0.000000e+00
%267 [4544r,4616r:0)  0@4544r weight:0.000000e+00
%268 [4552r,4608r:0)  0@4552r weight:0.000000e+00
%269 [4608r,4664r:0)  0@4608r weight:0.000000e+00
%270 [4616r,4656r:0)  0@4616r weight:0.000000e+00
%272 [4504r,4528r:0)  0@4504r weight:0.000000e+00
%273 [4528r,4560r:0)  0@4528r weight:0.000000e+00
%274 [4560r,4624r:0)  0@4560r weight:0.000000e+00
%275 [4624r,4656r:0)  0@4624r weight:0.000000e+00
%276 [4656r,4664r:0)  0@4656r weight:0.000000e+00
%277 [3056r,10208B:0)  0@3056r weight:0.000000e+00
%278 [4512r,4536r:0)  0@4512r weight:0.000000e+00
%279 [4536r,4568r:0)  0@4536r weight:0.000000e+00
%280 [4568r,4664r:0)  0@4568r weight:0.000000e+00
%281 [4840r,4896r:0)  0@4840r weight:0.000000e+00
%282 [4368r,4632r:0)  0@4368r weight:0.000000e+00
%283 [4632r,4744r:0)  0@4632r weight:0.000000e+00
%284 [4672r,4752r:0)  0@4672r weight:0.000000e+00
%285 [4416r,4640r:0)  0@4416r weight:0.000000e+00
%286 [4640r,4768r:0)  0@4640r weight:0.000000e+00
%287 [4752r,4792r:0)  0@4752r weight:0.000000e+00
%288 [4464r,4648r:0)  0@4464r weight:0.000000e+00
%289 [4648r,4784r:0)  0@4648r weight:0.000000e+00
%290 [4784r,4824r:0)  0@4784r weight:0.000000e+00
%291 [4792r,4808r:0)  0@4792r weight:0.000000e+00
%292 [4600r,4880r:0)  0@4600r weight:0.000000e+00
%294 [4776r,4832r:0)  0@4776r weight:0.000000e+00
%295 [4808r,4848r:0)  0@4808r weight:0.000000e+00
%296 [4704r,4760r:0)  0@4704r weight:0.000000e+00
%297 [4760r,4800r:0)  0@4760r weight:0.000000e+00
%298 [4800r,4816r:0)  0@4800r weight:0.000000e+00
%299 [4816r,4848r:0)  0@4816r weight:0.000000e+00
%300 [4848r,4888r:0)  0@4848r weight:0.000000e+00
%302 [4744r,4768r:0)  0@4744r weight:0.000000e+00
%303 [4768r,4824r:0)  0@4768r weight:0.000000e+00
%304 [4824r,4832r:0)  0@4824r weight:0.000000e+00
%305 [4832r,4888r:0)  0@4832r weight:0.000000e+00
%306 [4888r,4896r:0)  0@4888r weight:0.000000e+00
%307 [4896r,4904r:0)  0@4896r weight:0.000000e+00
%308 [4880r,4912r:0)  0@4880r weight:0.000000e+00
%309 [2688r,2880r:0)  0@2688r weight:0.000000e+00
%311 [2528r,10208B:0)  0@2528r weight:0.000000e+00
%312 [2720r,2896r:0)  0@2720r weight:0.000000e+00
%313 [2736r,2888r:0)  0@2736r weight:0.000000e+00
%314 [2544r,10208B:0)  0@2544r weight:0.000000e+00
%315 [2752r,2888r:0)  0@2752r weight:0.000000e+00
%316 [2888r,2904r:0)  0@2888r weight:0.000000e+00
%317 [2560r,10208B:0)  0@2560r weight:0.000000e+00
%318 [2800r,2912r:0)  0@2800r weight:0.000000e+00
%319 [2816r,2904r:0)  0@2816r weight:0.000000e+00
%320 [2904r,2912r:0)  0@2904r weight:0.000000e+00
%321 [2912r,2920r:0)  0@2912r weight:0.000000e+00
%322 [2880r,2928r:0)  0@2880r weight:0.000000e+00
%324 [1072r,1088r:0)  0@1072r weight:0.000000e+00
%326 [2424r,2432r:0)  0@2424r weight:0.000000e+00
%327 [2432r,2448r:0)  0@2432r weight:0.000000e+00
%329 [1200r,1216r:0)  0@1200r weight:0.000000e+00
%331 [2384r,2392r:0)  0@2384r weight:0.000000e+00
%332 [2392r,2400r:0)  0@2392r weight:0.000000e+00
%334 [1328r,1344r:0)  0@1328r weight:0.000000e+00
%336 [2344r,2352r:0)  0@2344r weight:0.000000e+00
%337 [2352r,2360r:0)  0@2352r weight:0.000000e+00
%338 [1408r,1876r:0)  0@1408r weight:0.000000e+00
%340 [784r,2480B:0)  0@784r weight:0.000000e+00
%341 [1876r,1920r:0)  0@1876r weight:0.000000e+00
%342 [816r,10208B:0)  0@816r weight:0.000000e+00
%343 [1896r,1928r:0)  0@1896r weight:0.000000e+00
%344 [1784r,1880r:0)  0@1784r weight:0.000000e+00
%346 [832r,2480B:0)  0@832r weight:0.000000e+00
%347 [1880r,1944r:0)  0@1880r weight:0.000000e+00
%348 [1928r,1952r:0)  0@1928r weight:0.000000e+00
%349 [1832r,1888r:0)  0@1832r weight:0.000000e+00
%350 [1888r,1904r:0)  0@1888r weight:0.000000e+00
%351 [1904r,1976r:0)  0@1904r weight:0.000000e+00
%352 [1952r,2024r:0)  0@1952r weight:0.000000e+00
%353 [1960r,2016r:0)  0@1960r weight:0.000000e+00
%354 [2016r,2072r:0)  0@2016r weight:0.000000e+00
%355 [2024r,2064r:0)  0@2024r weight:0.000000e+00
%356 [864r,10208B:0)  0@864r weight:0.000000e+00
%357 [1912r,1936r:0)  0@1912r weight:0.000000e+00
%358 [1936r,1968r:0)  0@1936r weight:0.000000e+00
%359 [1968r,2032r:0)  0@1968r weight:0.000000e+00
%360 [2032r,2064r:0)  0@2032r weight:0.000000e+00
%361 [2064r,2072r:0)  0@2064r weight:0.000000e+00
%362 [880r,10208B:0)  0@880r weight:0.000000e+00
%363 [1920r,1944r:0)  0@1920r weight:0.000000e+00
%364 [1944r,1976r:0)  0@1944r weight:0.000000e+00
%365 [1976r,2072r:0)  0@1976r weight:0.000000e+00
%366 [2248r,2304r:0)  0@2248r weight:0.000000e+00
%367 [1776r,2040r:0)  0@1776r weight:0.000000e+00
%368 [2040r,2152r:0)  0@2040r weight:0.000000e+00
%369 [2080r,2160r:0)  0@2080r weight:0.000000e+00
%370 [1824r,2048r:0)  0@1824r weight:0.000000e+00
%371 [2048r,2176r:0)  0@2048r weight:0.000000e+00
%372 [2160r,2200r:0)  0@2160r weight:0.000000e+00
%373 [1872r,2056r:0)  0@1872r weight:0.000000e+00
%374 [2056r,2192r:0)  0@2056r weight:0.000000e+00
%375 [2192r,2232r:0)  0@2192r weight:0.000000e+00
%376 [2200r,2216r:0)  0@2200r weight:0.000000e+00
%377 [2008r,2288r:0)  0@2008r weight:0.000000e+00
%379 [2184r,2240r:0)  0@2184r weight:0.000000e+00
%380 [2216r,2256r:0)  0@2216r weight:0.000000e+00
%381 [2112r,2168r:0)  0@2112r weight:0.000000e+00
%382 [2168r,2208r:0)  0@2168r weight:0.000000e+00
%383 [2208r,2224r:0)  0@2208r weight:0.000000e+00
%384 [2224r,2256r:0)  0@2224r weight:0.000000e+00
%385 [2256r,2296r:0)  0@2256r weight:0.000000e+00
%386 [896r,10208B:0)  0@896r weight:0.000000e+00
%387 [2152r,2176r:0)  0@2152r weight:0.000000e+00
%388 [2176r,2232r:0)  0@2176r weight:0.000000e+00
%389 [2232r,2240r:0)  0@2232r weight:0.000000e+00
%390 [2240r,2296r:0)  0@2240r weight:0.000000e+00
%391 [2296r,2304r:0)  0@2296r weight:0.000000e+00
%392 [2304r,2312r:0)  0@2304r weight:0.000000e+00
%393 [2288r,2320r:0)  0@2288r weight:0.000000e+00
RegMasks: 176r 304r 352r 528r 672r 5680r 5824r 5968r 6064r 6192r 6544r 6752r 6848r 6976r 7536r 9648r 9792r 9952r 10112r 10336r 10464r 10608r 10768r
********** MACHINEINSTRS **********
# Machine code for function diffusion: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0
48B	  %2:gpr64common = ADRP target-flags(aarch64-page) @timeron
64B	  %3:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
68B	  %1:gpr32 = COPY $w0
72B	  STRWui %1:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)
80B	  CBZW %3:gpr32, %bb.2
96B	  B %bb.1

112B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
160B	  $w0 = MOVi32imm 5
176B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
192B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

208B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

224B	  %5:gpr32 = LDRWui %stack.0.ifmortar.addr, 0 :: (dereferenceable load 4 from %ir.ifmortar.addr)
240B	  CBZW %5:gpr32, %bb.4
256B	  B %bb.3

272B	bb.3.if.then2:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

288B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
304B	  BL @setuppc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
320B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
336B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
352B	  BL @setpcmo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
368B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

384B	bb.4.if.end3:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

400B	  %6:gpr64common = ADRP target-flags(aarch64-page) @ntot
416B	  %7:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
432B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
448B	  %8:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
512B	  $d0 = FMOVD0
516B	  $x0 = COPY %8:gpr64
520B	  $w1 = COPY %7:gpr32
528B	  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
544B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
560B	  %10:gpr64common = ADRP target-flags(aarch64-page) @nmor
576B	  %11:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
592B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
608B	  %12:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
656B	  $d0 = FMOVD0
660B	  $x0 = COPY %12:gpr64
664B	  $w1 = COPY %11:gpr32
672B	  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
688B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
720B	  STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
752B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
768B	  %16:gpr64common = ADRP target-flags(aarch64-page) @nelt
784B	  undef %340.sub_32:gpr64 = MOVi32imm 1000
816B	  %342:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
832B	  undef %346.sub_32:gpr64 = MOVi32imm 200
864B	  %356:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
880B	  %362:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
896B	  %386:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult

912B	bb.5.for.cond:
	; predecessors: %bb.4, %bb.15
	  successors: %bb.6(0x7c000000), %bb.16(0x04000000); %bb.6(96.88%), %bb.16(3.12%)

928B	  %15:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
944B	  %17:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
960B	  dead $wzr = SUBSWrr %15:gpr32, %17:gpr32, implicit-def $nzcv
976B	  Bcc 10, %bb.16, implicit killed $nzcv
992B	  B %bb.6

1008B	bb.6.for.body:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1040B	  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

1056B	bb.7.for.cond4:
	; predecessors: %bb.6, %bb.14
	  successors: %bb.8(0x7c000000), %bb.15(0x04000000); %bb.8(96.88%), %bb.15(3.12%)

1072B	  %324:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
1088B	  dead $wzr = SUBSWri %324:gpr32common, 4, 0, implicit-def $nzcv
1104B	  Bcc 12, %bb.15, implicit killed $nzcv
1120B	  B %bb.8

1136B	bb.8.for.body6:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1168B	  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

1184B	bb.9.for.cond7:
	; predecessors: %bb.8, %bb.13
	  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

1200B	  %329:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
1216B	  dead $wzr = SUBSWri %329:gpr32common, 4, 0, implicit-def $nzcv
1232B	  Bcc 12, %bb.14, implicit killed $nzcv
1248B	  B %bb.10

1264B	bb.10.for.body9:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1296B	  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

1312B	bb.11.for.cond10:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

1328B	  %334:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
1344B	  dead $wzr = SUBSWri %334:gpr32common, 4, 0, implicit-def $nzcv
1360B	  Bcc 12, %bb.13, implicit killed $nzcv
1376B	  B %bb.12

1392B	bb.12.for.body12:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1408B	  %338:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
1776B	  %367:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
1784B	  %344:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
1824B	  %370:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
1832B	  %349:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
1872B	  %373:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
1876B	  %341:gpr64 = MADDXrrr %338:gpr64, %340:gpr64, $xzr
1880B	  %347:gpr64 = MADDXrrr %344:gpr64, %346:gpr64, $xzr
1888B	  %350:gpr64 = ADDXrs %349:gpr64, %349:gpr64, 2
1896B	  %343:gpr64 = ADDXrr %342:gpr64, %341:gpr64
1904B	  %351:gpr64 = UBFMXri %350:gpr64, 61, 60
1912B	  %357:gpr64 = ADDXrr %356:gpr64, %341:gpr64
1920B	  %363:gpr64 = ADDXrr %362:gpr64, %341:gpr64
1928B	  %348:gpr64 = ADDXrr %343:gpr64, %347:gpr64
1936B	  %358:gpr64 = ADDXrr %357:gpr64, %347:gpr64
1944B	  %364:gpr64 = ADDXrr %363:gpr64, %347:gpr64
1952B	  %352:gpr64common = ADDXrr %348:gpr64, %351:gpr64
1960B	  %353:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
1968B	  %359:gpr64common = ADDXrr %358:gpr64, %351:gpr64
1976B	  %365:gpr64common = ADDXrr %364:gpr64, %351:gpr64
2008B	  %377:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
2016B	  %354:gpr64 = UBFMXri %353:gpr64, 61, 60
2024B	  %355:fpr64 = LDRDroX %352:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
2032B	  %360:fpr64 = LDRDroX %359:gpr64common, %354:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
2040B	  %368:gpr64 = MADDXrrr %367:gpr64, %340:gpr64, $xzr
2048B	  %371:gpr64 = MADDXrrr %370:gpr64, %346:gpr64, $xzr
2056B	  %374:gpr64 = ADDXrs %373:gpr64, %373:gpr64, 2
2064B	  %361:fpr64 = FMULDrr %355:fpr64, %360:fpr64
2072B	  STRDroX %361:fpr64, %365:gpr64common, %354:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
2080B	  %369:gpr64 = ADDXrr %356:gpr64, %368:gpr64
2112B	  %381:gpr64 = ADDXrr %362:gpr64, %368:gpr64
2152B	  %387:gpr64 = ADDXrr %386:gpr64, %368:gpr64
2160B	  %372:gpr64 = ADDXrr %369:gpr64, %371:gpr64
2168B	  %382:gpr64 = ADDXrr %381:gpr64, %371:gpr64
2176B	  %388:gpr64 = ADDXrr %387:gpr64, %371:gpr64
2184B	  %379:gpr64 = UBFMXri %377:gpr64common, 61, 60
2192B	  %375:gpr64 = UBFMXri %374:gpr64, 61, 60
2200B	  %376:gpr64common = ADDXrr %372:gpr64, %375:gpr64
2208B	  %383:gpr64common = ADDXrr %382:gpr64, %375:gpr64
2216B	  %380:fpr64 = LDRDroX %376:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
2224B	  %384:fpr64 = LDRDroX %383:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
2232B	  %389:gpr64common = ADDXrr %388:gpr64, %375:gpr64
2240B	  %390:fpr64 = LDRDroX %389:gpr64common, %379:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
2248B	  %366:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
2256B	  %385:fpr64 = FMULDrr %380:fpr64, %384:fpr64
2288B	  %393:gpr32common = nsw ADDWri %377.sub_32:gpr64common, 1, 0
2296B	  %391:fpr64 = FMULDrr %385:fpr64, %390:fpr64
2304B	  %392:fpr64 = FADDDrr %366:fpr64, %391:fpr64
2312B	  STRDui %392:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
2320B	  STRWui %393:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
2328B	  B %bb.11

2336B	bb.13.for.inc61:
	; predecessors: %bb.11
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2344B	  %336:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
2352B	  %337:gpr32common = nsw ADDWri %336:gpr32common, 1, 0
2360B	  STRWui %337:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
2368B	  B %bb.9

2376B	bb.14.for.inc64:
	; predecessors: %bb.9
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2384B	  %331:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
2392B	  %332:gpr32common = nsw ADDWri %331:gpr32common, 1, 0
2400B	  STRWui %332:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
2408B	  B %bb.7

2416B	bb.15.for.inc67:
	; predecessors: %bb.7
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

2424B	  %326:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
2432B	  %327:gpr32common = nsw ADDWri %326:gpr32common, 1, 0
2448B	  STRWui %327:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
2464B	  B %bb.5

2480B	bb.16.for.end69:
	; predecessors: %bb.5
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2512B	  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
2528B	  %311:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
2544B	  %314:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
2560B	  %317:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx

2576B	bb.17.for.cond70:
	; predecessors: %bb.16, %bb.18
	  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

2592B	  %20:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
2608B	  %22:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
2624B	  dead $wzr = SUBSWrr %20:gpr32, %22:gpr32, implicit-def $nzcv
2640B	  Bcc 10, %bb.19, implicit killed $nzcv
2656B	  B %bb.18

2672B	bb.18.for.body72:
	; predecessors: %bb.17
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2688B	  %309:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
2720B	  %312:gpr64 = UBFMXri %309:gpr64common, 61, 60
2736B	  %313:fpr64 = LDRDroX %311:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
2752B	  %315:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
2800B	  %318:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
2816B	  %319:fpr64 = LDRDroX %314:gpr64common, %312:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
2880B	  %322:gpr32common = nsw ADDWri %309.sub_32:gpr64common, 1, 0
2888B	  %316:fpr64 = FMULDrr %313:fpr64, %315:fpr64
2896B	  STRDroX %316:fpr64, %317:gpr64common, %312:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
2904B	  %320:fpr64 = FMULDrr %319:fpr64, %316:fpr64
2912B	  %321:fpr64 = FADDDrr %318:fpr64, %320:fpr64
2920B	  STRDui %321:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
2928B	  STRWui %322:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
2936B	  B %bb.17

2944B	bb.19.for.end88:
	; predecessors: %bb.17
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

2952B	  %24:gpr32 = MOVi32imm 1
2976B	  %26:gpr64common = ADRP target-flags(aarch64-page) @nmxh
2992B	  undef %255.sub_32:gpr64 = MOVi32imm 1000
3024B	  undef %261.sub_32:gpr64 = MOVi32imm 200
3056B	  %277:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
3072B	  %232:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
3104B	  %220:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
3136B	  undef %196.sub_32:gpr64 = MOVi32imm 24
3168B	  %198:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
3200B	  %131:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
3216B	  %107:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
3224B	  STRWui %24:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
3232B	  %112:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor

3248B	bb.20.for.cond89:
	; predecessors: %bb.19, %bb.72
	  successors: %bb.21(0x7c000000), %bb.73(0x04000000); %bb.21(96.88%), %bb.73(3.12%)

3264B	  %25:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
3280B	  %27:gpr32 = LDRWui %26:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
3296B	  dead $wzr = SUBSWrr %25:gpr32, %27:gpr32, implicit-def $nzcv
3312B	  Bcc 12, %bb.73, implicit killed $nzcv
3328B	  B %bb.21

3344B	bb.21.for.body91:
	; predecessors: %bb.20
	  successors: %bb.22(0x40000000), %bb.38(0x40000000); %bb.22(50.00%), %bb.38(50.00%)

3360B	  %40:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
3376B	  dead $wzr = SUBSWri %40:gpr32common, 2, 0, implicit-def $nzcv
3392B	  Bcc 11, %bb.38, implicit killed $nzcv
3408B	  B %bb.22

3424B	bb.22.if.then93:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

3456B	  STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
3488B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

3504B	bb.23.for.cond94:
	; predecessors: %bb.22, %bb.33
	  successors: %bb.24(0x7c000000), %bb.34(0x04000000); %bb.24(96.88%), %bb.34(3.12%)

3520B	  %44:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
3536B	  %46:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
3552B	  dead $wzr = SUBSWrr %44:gpr32, %46:gpr32, implicit-def $nzcv
3568B	  Bcc 10, %bb.34, implicit killed $nzcv
3584B	  B %bb.24

3600B	bb.24.for.body96:
	; predecessors: %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

3632B	  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

3648B	bb.25.for.cond97:
	; predecessors: %bb.24, %bb.32
	  successors: %bb.26(0x7c000000), %bb.33(0x04000000); %bb.26(96.88%), %bb.33(3.12%)

3664B	  %239:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
3680B	  dead $wzr = SUBSWri %239:gpr32common, 4, 0, implicit-def $nzcv
3696B	  Bcc 12, %bb.33, implicit killed $nzcv
3712B	  B %bb.26

3728B	bb.26.for.body99:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

3760B	  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

3776B	bb.27.for.cond100:
	; predecessors: %bb.26, %bb.31
	  successors: %bb.28(0x7c000000), %bb.32(0x04000000); %bb.28(96.88%), %bb.32(3.12%)

3792B	  %244:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
3808B	  dead $wzr = SUBSWri %244:gpr32common, 4, 0, implicit-def $nzcv
3824B	  Bcc 12, %bb.32, implicit killed $nzcv
3840B	  B %bb.28

3856B	bb.28.for.body102:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

3888B	  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

3904B	bb.29.for.cond103:
	; predecessors: %bb.28, %bb.30
	  successors: %bb.30(0x7c000000), %bb.31(0x04000000); %bb.30(96.88%), %bb.31(3.12%)

3920B	  %249:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
3936B	  dead $wzr = SUBSWri %249:gpr32common, 4, 0, implicit-def $nzcv
3952B	  Bcc 12, %bb.31, implicit killed $nzcv
3968B	  B %bb.30

3984B	bb.30.for.body105:
	; predecessors: %bb.29
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

4000B	  %253:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
4368B	  %282:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
4376B	  %259:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
4416B	  %285:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
4424B	  %264:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
4464B	  %288:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
4468B	  %256:gpr64 = MADDXrrr %253:gpr64, %255:gpr64, $xzr
4472B	  %262:gpr64 = MADDXrrr %259:gpr64, %261:gpr64, $xzr
4480B	  %265:gpr64 = ADDXrs %264:gpr64, %264:gpr64, 2
4488B	  %258:gpr64 = ADDXrr %342:gpr64, %256:gpr64
4496B	  %266:gpr64 = UBFMXri %265:gpr64, 61, 60
4504B	  %272:gpr64 = ADDXrr %356:gpr64, %256:gpr64
4512B	  %278:gpr64 = ADDXrr %277:gpr64, %256:gpr64
4520B	  %263:gpr64 = ADDXrr %258:gpr64, %262:gpr64
4528B	  %273:gpr64 = ADDXrr %272:gpr64, %262:gpr64
4536B	  %279:gpr64 = ADDXrr %278:gpr64, %262:gpr64
4544B	  %267:gpr64common = ADDXrr %263:gpr64, %266:gpr64
4552B	  %268:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
4560B	  %274:gpr64common = ADDXrr %273:gpr64, %266:gpr64
4568B	  %280:gpr64common = ADDXrr %279:gpr64, %266:gpr64
4600B	  %292:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
4608B	  %269:gpr64 = UBFMXri %268:gpr64, 61, 60
4616B	  %270:fpr64 = LDRDroX %267:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
4624B	  %275:fpr64 = LDRDroX %274:gpr64common, %269:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
4632B	  %283:gpr64 = MADDXrrr %282:gpr64, %255:gpr64, $xzr
4640B	  %286:gpr64 = MADDXrrr %285:gpr64, %261:gpr64, $xzr
4648B	  %289:gpr64 = ADDXrs %288:gpr64, %288:gpr64, 2
4656B	  %276:fpr64 = FMULDrr %270:fpr64, %275:fpr64
4664B	  STRDroX %276:fpr64, %280:gpr64common, %269:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
4672B	  %284:gpr64 = ADDXrr %356:gpr64, %283:gpr64
4704B	  %296:gpr64 = ADDXrr %277:gpr64, %283:gpr64
4744B	  %302:gpr64 = ADDXrr %386:gpr64, %283:gpr64
4752B	  %287:gpr64 = ADDXrr %284:gpr64, %286:gpr64
4760B	  %297:gpr64 = ADDXrr %296:gpr64, %286:gpr64
4768B	  %303:gpr64 = ADDXrr %302:gpr64, %286:gpr64
4776B	  %294:gpr64 = UBFMXri %292:gpr64common, 61, 60
4784B	  %290:gpr64 = UBFMXri %289:gpr64, 61, 60
4792B	  %291:gpr64common = ADDXrr %287:gpr64, %290:gpr64
4800B	  %298:gpr64common = ADDXrr %297:gpr64, %290:gpr64
4808B	  %295:fpr64 = LDRDroX %291:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
4816B	  %299:fpr64 = LDRDroX %298:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
4824B	  %304:gpr64common = ADDXrr %303:gpr64, %290:gpr64
4832B	  %305:fpr64 = LDRDroX %304:gpr64common, %294:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
4840B	  %281:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
4848B	  %300:fpr64 = FMULDrr %295:fpr64, %299:fpr64
4880B	  %308:gpr32common = nsw ADDWri %292.sub_32:gpr64common, 1, 0
4888B	  %306:fpr64 = FMULDrr %300:fpr64, %305:fpr64
4896B	  %307:fpr64 = FADDDrr %281:fpr64, %306:fpr64
4904B	  STRDui %307:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
4912B	  STRWui %308:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
4920B	  B %bb.29

4928B	bb.31.for.inc161:
	; predecessors: %bb.29
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4936B	  %251:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
4944B	  %252:gpr32common = nsw ADDWri %251:gpr32common, 1, 0
4952B	  STRWui %252:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
4960B	  B %bb.27

4968B	bb.32.for.inc164:
	; predecessors: %bb.27
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4976B	  %246:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
4984B	  %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0
4992B	  STRWui %247:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
5000B	  B %bb.25

5008B	bb.33.for.inc167:
	; predecessors: %bb.25
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

5016B	  %241:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
5024B	  %242:gpr32common = nsw ADDWri %241:gpr32common, 1, 0
5040B	  STRWui %242:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
5056B	  B %bb.23

5072B	bb.34.for.end169:
	; predecessors: %bb.23
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

5104B	  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)

5120B	bb.35.for.cond170:
	; predecessors: %bb.34, %bb.36
	  successors: %bb.36(0x7c000000), %bb.37(0x04000000); %bb.36(96.88%), %bb.37(3.12%)

5136B	  %49:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
5152B	  %51:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
5168B	  dead $wzr = SUBSWrr %49:gpr32, %51:gpr32, implicit-def $nzcv
5184B	  Bcc 10, %bb.37, implicit killed $nzcv
5200B	  B %bb.36

5216B	bb.36.for.body172:
	; predecessors: %bb.35
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

5232B	  %224:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
5264B	  %227:gpr64 = UBFMXri %224:gpr64common, 61, 60
5280B	  %228:fpr64 = LDRDroX %311:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
5296B	  %230:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
5344B	  %233:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
5360B	  %234:fpr64 = LDRDroX %314:gpr64common, %227:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
5424B	  %237:gpr32common = nsw ADDWri %224.sub_32:gpr64common, 1, 0
5432B	  %231:fpr64 = FMULDrr %228:fpr64, %230:fpr64
5440B	  STRDroX %231:fpr64, %232:gpr64common, %227:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
5448B	  %235:fpr64 = FMULDrr %234:fpr64, %231:fpr64
5456B	  %236:fpr64 = FADDDrr %233:fpr64, %235:fpr64
5464B	  STRDui %236:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
5472B	  STRWui %237:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
5480B	  B %bb.35

5488B	bb.37.for.end188:
	; predecessors: %bb.35
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

5496B	  %53:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
5520B	  %54:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
5584B	  %57:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
5588B	  STRDui %53:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
5592B	  STRDui %54:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
5600B	  %55:fpr64 = FDIVDrr %54:fpr64, %53:fpr64
5608B	  STRDui %55:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)
5616B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5624B	  $x0 = COPY %362:gpr64
5632B	  $x1 = COPY %277:gpr64
5648B	  $d0 = COPY %55:fpr64
5664B	  $w2 = COPY %57:gpr32
5680B	  BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
5696B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5712B	  %60:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
5728B	  %62:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
5744B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5760B	  $x0 = COPY %317:gpr64common
5776B	  $x1 = COPY %232:gpr64common
5792B	  $d0 = COPY %60:fpr64
5808B	  $w2 = COPY %62:gpr32
5824B	  BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
5840B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

5856B	bb.38.if.end189:
	; predecessors: %bb.21, %bb.37
	  successors: %bb.39(0x50000000), %bb.40(0x30000000); %bb.39(62.50%), %bb.40(37.50%)

5872B	  %66:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
5888B	  CBZW %66:gpr32, %bb.40
5904B	  B %bb.39

5920B	bb.39.if.then191:
	; predecessors: %bb.38
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

5936B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5952B	  $w0 = MOVi32imm 6
5968B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5984B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6000B	bb.40.if.end192:
	; predecessors: %bb.38, %bb.39
	  successors: %bb.41(0x50000000), %bb.42(0x30000000); %bb.41(62.50%), %bb.42(37.50%)

6016B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6032B	  $x0 = COPY %317:gpr64common
6048B	  $x1 = COPY %362:gpr64
6064B	  BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
6080B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6096B	  %71:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
6112B	  CBZW %71:gpr32, %bb.42
6128B	  B %bb.41

6144B	bb.41.if.then194:
	; predecessors: %bb.40
	  successors: %bb.42(0x80000000); %bb.42(100.00%)

6160B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6176B	  $w0 = MOVi32imm 6
6192B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6208B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6224B	bb.42.if.end195:
	; predecessors: %bb.40, %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

6256B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

6272B	bb.43.for.cond196:
	; predecessors: %bb.42, %bb.44
	  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)

6288B	  %74:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
6304B	  %76:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
6320B	  dead $wzr = SUBSWrr %74:gpr32, %76:gpr32, implicit-def $nzcv
6336B	  Bcc 10, %bb.45, implicit killed $nzcv
6352B	  B %bb.44

6368B	bb.44.for.body198:
	; predecessors: %bb.43
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

6384B	  %212:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
6464B	  %221:gpr32 = LDRWroX %220:gpr64common, %212:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
6472B	  %215:gpr64 = MADDXrrr %212:gpr64, %255:gpr64, $xzr
6480B	  %217:gpr64 = ADDXrr %277:gpr64, %215:gpr64
6488B	  %219:gpr64 = ADDXrr %362:gpr64, %215:gpr64
6496B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6504B	  $x0 = COPY %217:gpr64
6512B	  $x1 = COPY %219:gpr64
6528B	  $w2 = COPY %221:gpr32
6544B	  BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
6560B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6576B	  %222:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
6592B	  %223:gpr32common = nsw ADDWri %222:gpr32common, 1, 0
6608B	  STRWui %223:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
6624B	  B %bb.43

6640B	bb.45.for.end208:
	; predecessors: %bb.43
	  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

6656B	  %79:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
6672B	  CBZW %79:gpr32, %bb.47
6688B	  B %bb.46

6704B	bb.46.if.then210:
	; predecessors: %bb.45
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

6720B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6736B	  $w0 = MOVi32imm 7
6752B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6768B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6784B	bb.47.if.end211:
	; predecessors: %bb.45, %bb.46
	  successors: %bb.48(0x50000000), %bb.49(0x30000000); %bb.48(62.50%), %bb.49(37.50%)

6800B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6816B	  $x0 = COPY %232:gpr64common
6832B	  $x1 = COPY %277:gpr64
6848B	  BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
6864B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6880B	  %84:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
6896B	  CBZW %84:gpr32, %bb.49
6912B	  B %bb.48

6928B	bb.48.if.then213:
	; predecessors: %bb.47
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

6944B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6960B	  $w0 = MOVi32imm 7
6976B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6992B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

7008B	bb.49.if.end214:
	; predecessors: %bb.47, %bb.48
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

7040B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

7056B	bb.50.for.cond215:
	; predecessors: %bb.49, %bb.56
	  successors: %bb.51(0x7c000000), %bb.57(0x04000000); %bb.51(96.88%), %bb.57(3.12%)

7072B	  %87:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7088B	  %89:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
7104B	  dead $wzr = SUBSWrr %87:gpr32, %89:gpr32, implicit-def $nzcv
7120B	  Bcc 10, %bb.57, implicit killed $nzcv
7136B	  B %bb.51

7152B	bb.51.for.body217:
	; predecessors: %bb.50
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

7184B	  STRWui $wzr, %stack.9.iside, 0 :: (store 4 into %ir.iside)

7200B	bb.52.for.cond218:
	; predecessors: %bb.51, %bb.55
	  successors: %bb.53(0x7c000000), %bb.56(0x04000000); %bb.53(96.88%), %bb.56(3.12%)

7216B	  %190:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
7232B	  %191:gpr64common = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7248B	  dead $wzr = SUBSWri %190:gpr32common, 5, 0, implicit-def $nzcv
7264B	  Bcc 12, %bb.56, implicit killed $nzcv
7280B	  B %bb.53

7296B	bb.53.for.body220:
	; predecessors: %bb.52
	  successors: %bb.54(0x30000000), %bb.55(0x50000000); %bb.54(37.50%), %bb.55(62.50%)

7328B	  %200:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
7336B	  %199:gpr64common = MADDXrrr %191:gpr64common, %196:gpr64, %198:gpr64
7344B	  %201:gpr32 = LDRWroX %199:gpr64common, %200:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)
7360B	  CBNZW %201:gpr32, %bb.55
7376B	  B %bb.54

7392B	bb.54.if.then226:
	; predecessors: %bb.53
	  successors: %bb.55(0x80000000); %bb.55(100.00%)

7408B	  %202:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7456B	  %208:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
7464B	  %207:gpr64 = MADDXrrr %202:gpr64, %255:gpr64, %277:gpr64
7472B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7520B	  $d0 = FMOVD0
7524B	  $x0 = COPY %207:gpr64
7528B	  $w1 = COPY %208:gpr32
7536B	  BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
7552B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

7568B	bb.55.for.inc231:
	; predecessors: %bb.53, %bb.54
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

7584B	  %210:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
7600B	  %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0
7616B	  STRWui %211:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)
7632B	  B %bb.52

7648B	bb.56.for.inc234:
	; predecessors: %bb.52
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

7696B	  %194:gpr32common = nsw ADDWri %191.sub_32:gpr64common, 1, 0
7712B	  STRWui %194:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
7728B	  B %bb.50

7744B	bb.57.for.end236:
	; predecessors: %bb.50
	  successors: %bb.58(0x80000000); %bb.58(100.00%)

7776B	  STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
7808B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

7824B	bb.58.for.cond237:
	; predecessors: %bb.57, %bb.68
	  successors: %bb.59(0x7c000000), %bb.69(0x04000000); %bb.59(96.88%), %bb.69(3.12%)

7840B	  %93:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7856B	  %95:gpr32 = LDRWui %16:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
7872B	  dead $wzr = SUBSWrr %93:gpr32, %95:gpr32, implicit-def $nzcv
7888B	  Bcc 10, %bb.69, implicit killed $nzcv
7904B	  B %bb.59

7920B	bb.59.for.body239:
	; predecessors: %bb.58
	  successors: %bb.60(0x80000000); %bb.60(100.00%)

7952B	  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

7968B	bb.60.for.cond240:
	; predecessors: %bb.59, %bb.67
	  successors: %bb.61(0x7c000000), %bb.68(0x04000000); %bb.61(96.88%), %bb.68(3.12%)

7984B	  %141:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
8000B	  dead $wzr = SUBSWri %141:gpr32common, 4, 0, implicit-def $nzcv
8016B	  Bcc 12, %bb.68, implicit killed $nzcv
8032B	  B %bb.61

8048B	bb.61.for.body242:
	; predecessors: %bb.60
	  successors: %bb.62(0x80000000); %bb.62(100.00%)

8080B	  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

8096B	bb.62.for.cond243:
	; predecessors: %bb.61, %bb.66
	  successors: %bb.63(0x7c000000), %bb.67(0x04000000); %bb.63(96.88%), %bb.67(3.12%)

8112B	  %146:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
8128B	  dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv
8144B	  Bcc 12, %bb.67, implicit killed $nzcv
8160B	  B %bb.63

8176B	bb.63.for.body245:
	; predecessors: %bb.62
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

8208B	  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

8224B	bb.64.for.cond246:
	; predecessors: %bb.63, %bb.65
	  successors: %bb.65(0x7c000000), %bb.66(0x04000000); %bb.65(96.88%), %bb.66(3.12%)

8240B	  %151:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
8256B	  dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv
8272B	  Bcc 12, %bb.66, implicit killed $nzcv
8288B	  B %bb.65

8304B	bb.65.for.body248:
	; predecessors: %bb.64
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

8336B	  %156:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
8400B	  %162:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
8464B	  %167:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
8528B	  %171:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
8532B	  %159:gpr64 = MADDXrrr %156:gpr64, %255:gpr64, $xzr
8536B	  %165:gpr64 = MADDXrrr %162:gpr64, %261:gpr64, $xzr
8544B	  %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
8552B	  %161:gpr64 = ADDXrr %362:gpr64, %159:gpr64
8592B	  %176:gpr64 = ADDXrr %277:gpr64, %159:gpr64
8672B	  %182:gpr64 = ADDXrr %386:gpr64, %159:gpr64
8676B	  %166:gpr64 = ADDXrr %161:gpr64, %165:gpr64
8680B	  %177:gpr64 = ADDXrr %176:gpr64, %165:gpr64
8688B	  %183:gpr64 = ADDXrr %182:gpr64, %165:gpr64
8692B	  %173:gpr64 = UBFMXri %171:gpr64common, 61, 60
8696B	  %169:gpr64 = UBFMXri %168:gpr64, 61, 60
8704B	  %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
8712B	  %178:gpr64common = ADDXrr %177:gpr64, %169:gpr64
8720B	  %174:fpr64 = LDRDroX %170:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
8728B	  %179:fpr64 = LDRDroX %178:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
8736B	  %184:gpr64common = ADDXrr %183:gpr64, %169:gpr64
8744B	  %185:fpr64 = LDRDroX %184:gpr64common, %173:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
8752B	  %155:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
8760B	  %180:fpr64 = FMULDrr %174:fpr64, %179:fpr64
8792B	  %188:gpr32common = nsw ADDWri %171.sub_32:gpr64common, 1, 0
8800B	  %186:fpr64 = FMULDrr %180:fpr64, %185:fpr64
8808B	  %187:fpr64 = FADDDrr %155:fpr64, %186:fpr64
8816B	  STRDui %187:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
8824B	  STRWui %188:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
8832B	  B %bb.64

8840B	bb.66.for.inc279:
	; predecessors: %bb.64
	  successors: %bb.62(0x80000000); %bb.62(100.00%)

8848B	  %153:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
8864B	  %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
8880B	  STRWui %154:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
8896B	  B %bb.62

8912B	bb.67.for.inc282:
	; predecessors: %bb.62
	  successors: %bb.60(0x80000000); %bb.60(100.00%)

8928B	  %148:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
8944B	  %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
8960B	  STRWui %149:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
8976B	  B %bb.60

8992B	bb.68.for.inc285:
	; predecessors: %bb.60
	  successors: %bb.58(0x80000000); %bb.58(100.00%)

9008B	  %143:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
9024B	  %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
9040B	  STRWui %144:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
9056B	  B %bb.58

9072B	bb.69.for.end287:
	; predecessors: %bb.58
	  successors: %bb.70(0x80000000); %bb.70(100.00%)

9104B	  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)

9120B	bb.70.for.cond288:
	; predecessors: %bb.69, %bb.71
	  successors: %bb.71(0x7c000000), %bb.72(0x04000000); %bb.71(96.88%), %bb.72(3.12%)

9136B	  %98:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
9152B	  %100:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
9168B	  dead $wzr = SUBSWrr %98:gpr32, %100:gpr32, implicit-def $nzcv
9184B	  Bcc 10, %bb.72, implicit killed $nzcv
9200B	  B %bb.71

9216B	bb.71.for.body290:
	; predecessors: %bb.70
	  successors: %bb.70(0x80000000); %bb.70(100.00%)

9232B	  %126:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
9264B	  %129:gpr64 = UBFMXri %126:gpr64common, 61, 60
9280B	  %130:fpr64 = LDRDroX %232:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
9296B	  %132:fpr64 = LDRDroX %131:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
9344B	  %134:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
9360B	  %136:fpr64 = LDRDroX %317:gpr64common, %129:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
9424B	  %139:gpr32common = nsw ADDWri %126.sub_32:gpr64common, 1, 0
9432B	  %133:fpr64 = FMULDrr %130:fpr64, %132:fpr64
9440B	  STRDroX %133:fpr64, %232:gpr64common, %129:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
9448B	  %137:fpr64 = FMULDrr %136:fpr64, %133:fpr64
9456B	  %138:fpr64 = FADDDrr %134:fpr64, %137:fpr64
9464B	  STRDui %138:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
9472B	  STRWui %139:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
9480B	  B %bb.70

9488B	bb.72.for.end306:
	; predecessors: %bb.70
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

9496B	  %102:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
9504B	  %103:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
9552B	  %106:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
9556B	  %104:fpr64 = FDIVDrr %102:fpr64, %103:fpr64
9560B	  STRDui %104:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
9568B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9584B	  $x0 = COPY %107:gpr64
9600B	  $x1 = COPY %362:gpr64
9616B	  $d0 = COPY %104:fpr64
9632B	  $w2 = COPY %106:gpr32
9648B	  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
9664B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9680B	  %109:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
9696B	  %111:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
9712B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9728B	  $x0 = COPY %112:gpr64
9744B	  $x1 = COPY %317:gpr64common
9760B	  $d0 = COPY %109:fpr64
9776B	  $w2 = COPY %111:gpr32
9792B	  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
9808B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9824B	  %114:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
9856B	  %116:gpr32 = LDRWui %6:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
9864B	  %115:fpr64 = FNEGDr %114:fpr64
9872B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9888B	  $x0 = COPY %356:gpr64
9904B	  $x1 = COPY %277:gpr64
9920B	  $d0 = COPY %115:fpr64
9936B	  $w2 = COPY %116:gpr32
9952B	  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
9968B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9984B	  %119:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
10016B	  %121:gpr32 = LDRWui %10:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
10024B	  %120:fpr64 = FNEGDr %119:fpr64
10032B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10048B	  $x0 = COPY %314:gpr64common
10064B	  $x1 = COPY %232:gpr64common
10080B	  $d0 = COPY %120:fpr64
10096B	  $w2 = COPY %121:gpr32
10112B	  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
10128B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10144B	  %124:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
10160B	  %125:gpr32common = nsw ADDWri %124:gpr32common, 1, 0
10176B	  STRWui %125:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)
10192B	  B %bb.20

10208B	bb.73.for.end311:
	; predecessors: %bb.20
	  successors: %bb.74(0x50000000), %bb.75(0x30000000); %bb.74(62.50%), %bb.75(37.50%)

10224B	  %30:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
10240B	  CBZW %30:gpr32, %bb.75
10256B	  B %bb.74

10272B	bb.74.if.then313:
	; predecessors: %bb.73
	  successors: %bb.75(0x80000000); %bb.75(100.00%)

10288B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10320B	  $w0 = MOVi32imm 6
10336B	  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
10352B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

10368B	bb.75.if.end314:
	; predecessors: %bb.73, %bb.74
	  successors: %bb.76(0x50000000), %bb.77(0x30000000); %bb.76(62.50%), %bb.77(37.50%)

10384B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10400B	  %32:gpr64 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
10416B	  %33:gpr64 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
10432B	  $x0 = COPY %32:gpr64
10448B	  $x1 = COPY %33:gpr64
10464B	  BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
10480B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10496B	  %35:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
10512B	  CBZW %35:gpr32, %bb.77
10528B	  B %bb.76

10544B	bb.76.if.then316:
	; predecessors: %bb.75
	  successors: %bb.77(0x80000000); %bb.77(100.00%)

10560B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10592B	  $w0 = MOVi32imm 6
10608B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
10624B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

10640B	bb.77.if.end317:
	; predecessors: %bb.75, %bb.76
	  successors: %bb.78(0x50000000), %bb.79(0x30000000); %bb.78(62.50%), %bb.79(37.50%)

10656B	  %38:gpr32 = LDRWui %2:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
10672B	  CBZW %38:gpr32, %bb.79
10688B	  B %bb.78

10704B	bb.78.if.then319:
	; predecessors: %bb.77
	  successors: %bb.79(0x80000000); %bb.79(100.00%)

10720B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10752B	  $w0 = MOVi32imm 5
10768B	  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
10784B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

10800B	bb.79.if.end320:
	; predecessors: %bb.77, %bb.78

10816B	  RET_ReallyLR

# End machine code for function diffusion.

Before post-MI-sched:
# Machine code for function diffusion: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-100]
  fi#1: size=8, align=8, at location [SP-112]
  fi#2: size=8, align=8, at location [SP-120]
  fi#3: size=8, align=8, at location [SP-128]
  fi#4: size=8, align=8, at location [SP-136]
  fi#5: size=8, align=8, at location [SP-144]
  fi#6: size=4, align=4, at location [SP-148]
  fi#7: size=4, align=4, at location [SP-152]
  fi#8: size=4, align=4, at location [SP-156]
  fi#9: size=4, align=4, at location [SP-160]
  fi#10: size=4, align=4, at location [SP-164]
  fi#11: size=4, align=4, at location [SP-168]
  fi#12: size=4, align=4, at location [SP-172]
  fi#13: size=8, align=8, at location [SP-8]
  fi#14: size=8, align=8, at location [SP-16]
  fi#15: size=8, align=8, at location [SP-24]
  fi#16: size=8, align=8, at location [SP-32]
  fi#17: size=8, align=8, at location [SP-40]
  fi#18: size=8, align=8, at location [SP-48]
  fi#19: size=8, align=8, at location [SP-56]
  fi#20: size=8, align=8, at location [SP-64]
  fi#21: size=8, align=8, at location [SP-72]
  fi#22: size=8, align=8, at location [SP-80]
  fi#23: size=8, align=8, at location [SP-88]
  fi#24: size=8, align=8, at location [SP-96]
Function Live Ins: $w0

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x27, $x28, $x25, $x26, $x23, $x24, $x21, $x22, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 176, 0
  frame-setup STPXi killed $x28, killed $x27, $sp, 10 :: (store 8 into %stack.24), (store 8 into %stack.23)
  frame-setup STPXi killed $x26, killed $x25, $sp, 12 :: (store 8 into %stack.22), (store 8 into %stack.21)
  frame-setup STPXi killed $x24, killed $x23, $sp, 14 :: (store 8 into %stack.20), (store 8 into %stack.19)
  frame-setup STPXi killed $x22, killed $x21, $sp, 16 :: (store 8 into %stack.18), (store 8 into %stack.17)
  frame-setup STPXi killed $x20, killed $x19, $sp, 18 :: (store 8 into %stack.16), (store 8 into %stack.15)
  frame-setup STPXi killed $fp, killed $lr, $sp, 20 :: (store 8 into %stack.14), (store 8 into %stack.13)
  $fp = frame-setup ADDXri $sp, 160, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w21, -40
  frame-setup CFI_INSTRUCTION offset $w22, -48
  frame-setup CFI_INSTRUCTION offset $w23, -56
  frame-setup CFI_INSTRUCTION offset $w24, -64
  frame-setup CFI_INSTRUCTION offset $w25, -72
  frame-setup CFI_INSTRUCTION offset $w26, -80
  frame-setup CFI_INSTRUCTION offset $w27, -88
  frame-setup CFI_INSTRUCTION offset $w28, -96
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  STRWui killed renamable $w0, $sp, 19 :: (store 4 into %ir.ifmortar.addr)
  CBZW killed renamable $w8, %bb.2

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $w0 = MOVZWi 5, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  renamable $w8 = LDRWui $sp, 19 :: (dereferenceable load 4 from %ir.ifmortar.addr)
  CBZW killed renamable $w8, %bb.4

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  BL @setuppc, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  BL @setpcmo, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit-def $sp

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w1 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  $x0 = ADRP target-flags(aarch64-page) @t
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w1 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $x0 = ADRP target-flags(aarch64-page) @umor
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  STRXui $xzr, $sp, 7 :: (store 8 into %ir.rho1)
  STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)
  renamable $x26 = ADRP target-flags(aarch64-page) @nelt
  $w8 = MOVZWi 1000, 0, implicit-def $x8
  $x28 = ADRP target-flags(aarch64-page) @dpcelm
  renamable $x28 = ADDXri $x28, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
  $w9 = MOVZWi 200, 0, implicit-def $x9
  $x19 = ADRP target-flags(aarch64-page) @trhs
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  $x20 = ADRP target-flags(aarch64-page) @pdiff
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  $x27 = ADRP target-flags(aarch64-page) @tmult
  renamable $x27 = ADDXri $x27, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0

bb.5.for.cond:
; predecessors: %bb.4, %bb.15
  successors: %bb.6(0x7c000000), %bb.16(0x04000000); %bb.6(96.88%), %bb.16(3.12%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w11 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w10, killed renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.16, implicit $nzcv

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  STRWui $wzr, $sp, 1 :: (store 4 into %ir.k)

bb.7.for.cond4:
; predecessors: %bb.6, %bb.14
  successors: %bb.8(0x7c000000), %bb.15(0x04000000); %bb.8(96.88%), %bb.15(3.12%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.15, implicit $nzcv

bb.8.for.body6:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  STRWui $wzr, $sp, 2 :: (store 4 into %ir.j)

bb.9.for.cond7:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit $nzcv

bb.10.for.body9:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  STRWui $wzr, $sp, 3 :: (store 4 into %ir.i)

bb.11.for.cond10:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  renamable $w10 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit $nzcv

bb.12.for.body12:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  renamable $x10 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $x11 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $x12, renamable $x14 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x13, renamable $x15 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x10 = MADDXrrr killed renamable $x10, renamable $x8, $xzr
  renamable $x12 = MADDXrrr killed renamable $x12, renamable $x9, $xzr
  renamable $x14 = ADDXrs killed renamable $x14, renamable $x14, 2
  $x16 = ADDXrs renamable $x28, renamable $x10, 0
  renamable $x14 = UBFMXri killed renamable $x14, 61, 60
  $x17 = ADDXrs renamable $x19, renamable $x10, 0
  $x10 = ADDXrs renamable $x20, killed renamable $x10, 0
  $x16 = ADDXrs killed renamable $x16, renamable $x12, 0
  $x17 = ADDXrs killed renamable $x17, renamable $x12, 0
  $x10 = ADDXrs killed renamable $x10, killed renamable $x12, 0
  $x12 = ADDXrs killed renamable $x16, renamable $x14, 0
  renamable $x16 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  $x17 = ADDXrs killed renamable $x17, renamable $x14, 0
  $x10 = ADDXrs killed renamable $x10, killed renamable $x14, 0
  renamable $x14 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  renamable $x16 = UBFMXri killed renamable $x16, 61, 60
  renamable $d0 = LDRDroX killed renamable $x12, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx18)
  renamable $d1 = LDRDroX killed renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx26)
  renamable $x11 = MADDXrrr killed renamable $x11, renamable $x8, $xzr
  renamable $x12 = MADDXrrr killed renamable $x13, renamable $x9, $xzr
  renamable $x13 = ADDXrs killed renamable $x15, renamable $x15, 2
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  STRDroX killed renamable $d0, killed renamable $x10, killed renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx34)
  $x10 = ADDXrs renamable $x19, renamable $x11, 0
  $x15 = ADDXrs renamable $x20, renamable $x11, 0
  $x11 = ADDXrs renamable $x27, killed renamable $x11, 0
  $x10 = ADDXrs killed renamable $x10, renamable $x12, 0
  $x15 = ADDXrs killed renamable $x15, renamable $x12, 0
  $x11 = ADDXrs killed renamable $x11, killed renamable $x12, 0
  renamable $x12 = UBFMXri renamable $x14, 61, 60
  renamable $x13 = UBFMXri killed renamable $x13, 61, 60
  $x10 = ADDXrs killed renamable $x10, renamable $x13, 0
  $x15 = ADDXrs killed renamable $x15, renamable $x13, 0
  renamable $d0 = LDRDroX killed renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx42)
  renamable $d1 = LDRDroX killed renamable $x15, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx50)
  $x10 = ADDXrs killed renamable $x11, killed renamable $x13, 0
  renamable $d2 = LDRDroX killed renamable $x10, killed renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx59)
  renamable $d3 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $w10 = nsw ADDWri renamable $w14, 1, 0, implicit killed $x14
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2
  renamable $d0 = FADDDrr killed renamable $d3, killed renamable $d0
  STRDui killed renamable $d0, $sp, 7 :: (store 8 into %ir.rho1)
  STRWui killed renamable $w10, $sp, 3 :: (store 4 into %ir.i)
  B %bb.11

bb.13.for.inc61:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STRWui killed renamable $w10, $sp, 2 :: (store 4 into %ir.j)
  B %bb.9

bb.14.for.inc64:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STRWui killed renamable $w10, $sp, 1 :: (store 4 into %ir.k)
  B %bb.7

bb.15.for.inc67:
; predecessors: %bb.7
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x8, $x9, $x19, $x20, $x26, $x27, $x28
  renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STRWui killed renamable $w10, $sp, 6 :: (store 4 into %ir.ie)
  B %bb.5

bb.16.for.end69:
; predecessors: %bb.5
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $x19, $x20, $x26, $x27, $x28
  STRWui $wzr, $sp, 5 :: (store 4 into %ir.im)
  $x10 = ADRP target-flags(aarch64-page) @dpcmor
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  $x11 = ADRP target-flags(aarch64-page) @rmor
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  $x12 = ADRP target-flags(aarch64-page) @pmorx
  renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0

bb.17.for.cond70:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)
  liveins: $x10, $x11, $x19, $x20, $x26, $x27, $x28, $x12
  renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  renamable $x9 = ADRP target-flags(aarch64-page) @nmor
  renamable $w9 = LDRWui killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.19, implicit $nzcv

bb.18.for.body72:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $x10, $x11, $x19, $x20, $x26, $x27, $x28, $x12
  renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  renamable $x9 = UBFMXri renamable $x8, 61, 60
  renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx74)
  renamable $d1 = LDRDroX renamable $x11, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx76)
  renamable $d2 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
  renamable $d3 = LDRDroX renamable $x11, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx81)
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  STRDroX renamable $d0, renamable $x12, killed renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx79)
  renamable $d0 = FMULDrr killed renamable $d3, killed renamable $d0
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  STRDui killed renamable $d0, $sp, 7 :: (store 8 into %ir.rho1)
  STRWui killed renamable $w8, $sp, 5 :: (store 4 into %ir.im)
  B %bb.17

bb.19.for.end88:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)
  liveins: $x19, $x20, $x26, $x27, $x28
  $w8 = MOVZWi 1, 0
  $w21 = MOVZWi 1000, 0, implicit-def $x21
  $w22 = MOVZWi 200, 0, implicit-def $x22
  $x23 = ADRP target-flags(aarch64-page) @pdiffp
  renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  $w25 = MOVZWi 24, 0, implicit-def $x25
  $x24 = ADRP target-flags(aarch64-page) @cbc
  renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0

bb.20.for.cond89:
; predecessors: %bb.19, %bb.72
  successors: %bb.21(0x7c000000), %bb.73(0x04000000); %bb.21(96.88%), %bb.73(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28, $w8
  STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.iter)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  renamable $x9 = ADRP target-flags(aarch64-page) @nmxh
  renamable $w9 = LDRWui killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 12, %bb.73, implicit $nzcv

bb.21.for.body91:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.38(0x40000000); %bb.22(50.00%), %bb.38(50.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv
  Bcc 11, %bb.38, implicit $nzcv

bb.22.if.then93:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRXui $xzr, $sp, 8 :: (store 8 into %ir.rho_aux)
  STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)
  $x16 = ADRP target-flags(aarch64-page) @dpcmor
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  $x17 = ADRP target-flags(aarch64-page) @rmor
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0

bb.23.for.cond94:
; predecessors: %bb.22, %bb.33
  successors: %bb.24(0x7c000000), %bb.34(0x04000000); %bb.24(96.88%), %bb.34(3.12%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.34, implicit $nzcv

bb.24.for.body96:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 1 :: (store 4 into %ir.k)

bb.25.for.cond97:
; predecessors: %bb.24, %bb.32
  successors: %bb.26(0x7c000000), %bb.33(0x04000000); %bb.26(96.88%), %bb.33(3.12%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit $nzcv

bb.26.for.body99:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 2 :: (store 4 into %ir.j)

bb.27.for.cond100:
; predecessors: %bb.26, %bb.31
  successors: %bb.28(0x7c000000), %bb.32(0x04000000); %bb.28(96.88%), %bb.32(3.12%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.32, implicit $nzcv

bb.28.for.body102:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 3 :: (store 4 into %ir.i)

bb.29.for.cond103:
; predecessors: %bb.28, %bb.30
  successors: %bb.30(0x7c000000), %bb.31(0x04000000); %bb.30(96.88%), %bb.31(3.12%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.31, implicit $nzcv

bb.30.for.body105:
; predecessors: %bb.29
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $x9 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $x10, renamable $x12 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x11, renamable $x13 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x21, $xzr
  renamable $x10 = MADDXrrr killed renamable $x10, renamable $x22, $xzr
  renamable $x12 = ADDXrs killed renamable $x12, renamable $x12, 2
  $x14 = ADDXrs renamable $x28, renamable $x8, 0
  renamable $x12 = UBFMXri killed renamable $x12, 61, 60
  $x15 = ADDXrs renamable $x19, renamable $x8, 0
  $x8 = ADDXrs renamable $x23, killed renamable $x8, 0
  $x14 = ADDXrs killed renamable $x14, renamable $x10, 0
  $x15 = ADDXrs killed renamable $x15, renamable $x10, 0
  $x8 = ADDXrs killed renamable $x8, killed renamable $x10, 0
  $x10 = ADDXrs killed renamable $x14, renamable $x12, 0
  renamable $x14 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  $x15 = ADDXrs killed renamable $x15, renamable $x12, 0
  $x8 = ADDXrs killed renamable $x8, killed renamable $x12, 0
  renamable $x12 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  renamable $x14 = UBFMXri killed renamable $x14, 61, 60
  renamable $d0 = LDRDroX killed renamable $x10, renamable $x14, 0, 0 :: (load 8 from %ir.arrayidx113)
  renamable $d1 = LDRDroX killed renamable $x15, renamable $x14, 0, 0 :: (load 8 from %ir.arrayidx121)
  renamable $x9 = MADDXrrr killed renamable $x9, renamable $x21, $xzr
  renamable $x10 = MADDXrrr killed renamable $x11, renamable $x22, $xzr
  renamable $x11 = ADDXrs killed renamable $x13, renamable $x13, 2
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  STRDroX killed renamable $d0, killed renamable $x8, killed renamable $x14, 0, 0 :: (store 8 into %ir.arrayidx130)
  $x8 = ADDXrs renamable $x19, renamable $x9, 0
  $x13 = ADDXrs renamable $x23, renamable $x9, 0
  $x9 = ADDXrs renamable $x27, killed renamable $x9, 0
  $x8 = ADDXrs killed renamable $x8, renamable $x10, 0
  $x13 = ADDXrs killed renamable $x13, renamable $x10, 0
  $x9 = ADDXrs killed renamable $x9, killed renamable $x10, 0
  renamable $x10 = UBFMXri renamable $x12, 61, 60
  renamable $x11 = UBFMXri killed renamable $x11, 61, 60
  $x8 = ADDXrs killed renamable $x8, renamable $x11, 0
  $x13 = ADDXrs killed renamable $x13, renamable $x11, 0
  renamable $d0 = LDRDroX killed renamable $x8, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx138)
  renamable $d1 = LDRDroX killed renamable $x13, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx146)
  $x8 = ADDXrs killed renamable $x9, killed renamable $x11, 0
  renamable $d2 = LDRDroX killed renamable $x8, killed renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx155)
  renamable $d3 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.rho_aux)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $w8 = nsw ADDWri renamable $w12, 1, 0, implicit killed $x12
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2
  renamable $d0 = FADDDrr killed renamable $d3, killed renamable $d0
  STRDui killed renamable $d0, $sp, 8 :: (store 8 into %ir.rho_aux)
  STRWui killed renamable $w8, $sp, 3 :: (store 4 into %ir.i)
  B %bb.29

bb.31.for.inc161:
; predecessors: %bb.29
  successors: %bb.27(0x80000000); %bb.27(100.00%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store 4 into %ir.j)
  B %bb.27

bb.32.for.inc164:
; predecessors: %bb.27
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 1 :: (store 4 into %ir.k)
  B %bb.25

bb.33.for.inc167:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  B %bb.23

bb.34.for.end169:
; predecessors: %bb.23
  successors: %bb.35(0x80000000); %bb.35(100.00%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 5 :: (store 4 into %ir.im)

bb.35.for.cond170:
; predecessors: %bb.34, %bb.36
  successors: %bb.36(0x7c000000), %bb.37(0x04000000); %bb.36(96.88%), %bb.37(3.12%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  renamable $x9 = ADRP target-flags(aarch64-page) @nmor
  renamable $w9 = LDRWui killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.37, implicit $nzcv

bb.36.for.body172:
; predecessors: %bb.35
  successors: %bb.35(0x80000000); %bb.35(100.00%)
  liveins: $x16, $x17, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  renamable $x9 = UBFMXri renamable $x8, 61, 60
  renamable $d0 = LDRDroX renamable $x16, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx174)
  renamable $d1 = LDRDroX renamable $x17, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx176)
  renamable $d2 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.rho_aux)
  renamable $d3 = LDRDroX renamable $x17, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx181)
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  $x10 = ADRP target-flags(aarch64-page) @ppmor
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  STRDroX renamable $d0, killed renamable $x10, killed renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx179)
  renamable $d0 = FMULDrr killed renamable $d3, killed renamable $d0
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  STRDui killed renamable $d0, $sp, 8 :: (store 8 into %ir.rho_aux)
  STRWui killed renamable $w8, $sp, 5 :: (store 4 into %ir.im)
  B %bb.35

bb.37.for.end188:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $d0, renamable $d1 = LDPDi $sp, 7 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  STPDi renamable $d0, renamable $d1, $sp, 6 :: (store 8 into %ir.rho2), (store 8 into %ir.rho1)
  renamable $d0 = FDIVDrr killed renamable $d1, killed renamable $d0
  STRDui renamable $d0, $sp, 5 :: (store 8 into %ir.beta)
  $x0 = ORRXrs $xzr, $x20, 0
  $x1 = ORRXrs $xzr, $x23, 0
  BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  renamable $d0 = LDRDui $sp, 5 :: (dereferenceable load 8 from %ir.beta)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $x0 = ADRP target-flags(aarch64-page) @pmorx
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  $x1 = ADRP target-flags(aarch64-page) @ppmor
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp

bb.38.if.end189:
; predecessors: %bb.21, %bb.37
  successors: %bb.39(0x50000000), %bb.40(0x30000000); %bb.39(62.50%), %bb.40(37.50%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.40

bb.39.if.then191:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 6, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.40.if.end192:
; predecessors: %bb.38, %bb.39
  successors: %bb.41(0x50000000), %bb.42(0x30000000); %bb.41(62.50%), %bb.42(37.50%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $x0 = ADRP target-flags(aarch64-page) @pmorx
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  $x1 = ORRXrs $xzr, $x20, 0
  BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.42

bb.41.if.then194:
; predecessors: %bb.40
  successors: %bb.42(0x80000000); %bb.42(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 6, 0
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.42.if.end195:
; predecessors: %bb.40, %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)

bb.43.for.cond196:
; predecessors: %bb.42, %bb.44
  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.45, implicit $nzcv

bb.44.for.body198:
; predecessors: %bb.43
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  $x9 = ADRP target-flags(aarch64-page) @size_e
  renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  renamable $w2 = LDRWroX killed renamable $x9, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx205)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x21, $xzr
  $x0 = ADDXrs renamable $x23, renamable $x8, 0
  $x1 = ADDXrs renamable $x20, killed renamable $x8, 0
  BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  B %bb.43

bb.45.for.end208:
; predecessors: %bb.43
  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.47

bb.46.if.then210:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 7, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.47.if.end211:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x50000000), %bb.49(0x30000000); %bb.48(62.50%), %bb.49(37.50%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $x0 = ADRP target-flags(aarch64-page) @ppmor
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  $x1 = ORRXrs $xzr, $x23, 0
  BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.49

bb.48.if.then213:
; predecessors: %bb.47
  successors: %bb.49(0x80000000); %bb.49(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  $w0 = MOVZWi 7, 0
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.49.if.end214:
; predecessors: %bb.47, %bb.48
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)

bb.50.for.cond215:
; predecessors: %bb.49, %bb.56
  successors: %bb.51(0x7c000000), %bb.57(0x04000000); %bb.51(96.88%), %bb.57(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.57, implicit $nzcv

bb.51.for.body217:
; predecessors: %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 4 :: (store 4 into %ir.iside)

bb.52.for.cond218:
; predecessors: %bb.51, %bb.55
  successors: %bb.53(0x7c000000), %bb.56(0x04000000); %bb.53(96.88%), %bb.56(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w9 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  dead $wzr = SUBSWri killed renamable $w9, 5, 0, implicit-def $nzcv
  Bcc 12, %bb.56, implicit $nzcv

bb.53.for.body220:
; predecessors: %bb.52
  successors: %bb.54(0x30000000), %bb.55(0x50000000); %bb.54(37.50%), %bb.55(62.50%)
  liveins: $x8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x9 = LDRSWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x25, renamable $x24
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x9, 0, 1 :: (load 4 from %ir.arrayidx224)
  CBNZW killed renamable $w8, %bb.55

bb.54.if.then226:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w1 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  renamable $x0 = MADDXrrr killed renamable $x8, renamable $x21, renamable $x23
  $d0 = FMOVD0
  BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp

bb.55.for.inc231:
; predecessors: %bb.53, %bb.54
  successors: %bb.52(0x80000000); %bb.52(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 4 :: (store 4 into %ir.iside)
  B %bb.52

bb.56.for.inc234:
; predecessors: %bb.52
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x8, $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8
  STRWui killed renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  B %bb.50

bb.57.for.end236:
; predecessors: %bb.50
  successors: %bb.58(0x80000000); %bb.58(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRXui $xzr, $sp, 4 :: (store 8 into %ir.cona)
  STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)

bb.58.for.cond237:
; predecessors: %bb.57, %bb.68
  successors: %bb.59(0x7c000000), %bb.69(0x04000000); %bb.59(96.88%), %bb.69(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.69, implicit $nzcv

bb.59.for.body239:
; predecessors: %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 1 :: (store 4 into %ir.k)

bb.60.for.cond240:
; predecessors: %bb.59, %bb.67
  successors: %bb.61(0x7c000000), %bb.68(0x04000000); %bb.61(96.88%), %bb.68(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.68, implicit $nzcv

bb.61.for.body242:
; predecessors: %bb.60
  successors: %bb.62(0x80000000); %bb.62(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 2 :: (store 4 into %ir.j)

bb.62.for.cond243:
; predecessors: %bb.61, %bb.66
  successors: %bb.63(0x7c000000), %bb.67(0x04000000); %bb.63(96.88%), %bb.67(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.67, implicit $nzcv

bb.63.for.body245:
; predecessors: %bb.62
  successors: %bb.64(0x80000000); %bb.64(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 3 :: (store 4 into %ir.i)

bb.64.for.cond246:
; predecessors: %bb.63, %bb.65
  successors: %bb.65(0x7c000000), %bb.66(0x04000000); %bb.65(96.88%), %bb.66(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.66, implicit $nzcv

bb.65.for.body248:
; predecessors: %bb.64
  successors: %bb.64(0x80000000); %bb.64(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $x9, renamable $x10 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x11 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x21, $xzr
  renamable $x9 = MADDXrrr killed renamable $x9, renamable $x22, $xzr
  renamable $x10 = ADDXrs killed renamable $x10, renamable $x10, 2
  $x12 = ADDXrs renamable $x20, renamable $x8, 0
  $x13 = ADDXrs renamable $x23, renamable $x8, 0
  $x8 = ADDXrs renamable $x27, killed renamable $x8, 0
  $x12 = ADDXrs killed renamable $x12, renamable $x9, 0
  $x13 = ADDXrs killed renamable $x13, renamable $x9, 0
  $x8 = ADDXrs killed renamable $x8, killed renamable $x9, 0
  renamable $x9 = UBFMXri renamable $x11, 61, 60
  renamable $x10 = UBFMXri killed renamable $x10, 61, 60
  $x12 = ADDXrs killed renamable $x12, renamable $x10, 0
  $x13 = ADDXrs killed renamable $x13, renamable $x10, 0
  renamable $d0 = LDRDroX killed renamable $x12, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx256)
  renamable $d1 = LDRDroX killed renamable $x13, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx264)
  $x8 = ADDXrs killed renamable $x8, killed renamable $x10, 0
  renamable $d2 = LDRDroX killed renamable $x8, killed renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx273)
  renamable $d3 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $w8 = nsw ADDWri renamable $w11, 1, 0, implicit killed $x11
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2
  renamable $d0 = FADDDrr killed renamable $d3, killed renamable $d0
  STRDui killed renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
  STRWui killed renamable $w8, $sp, 3 :: (store 4 into %ir.i)
  B %bb.64

bb.66.for.inc279:
; predecessors: %bb.64
  successors: %bb.62(0x80000000); %bb.62(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 2 :: (store 4 into %ir.j)
  B %bb.62

bb.67.for.inc282:
; predecessors: %bb.62
  successors: %bb.60(0x80000000); %bb.60(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 1 :: (store 4 into %ir.k)
  B %bb.60

bb.68.for.inc285:
; predecessors: %bb.60
  successors: %bb.58(0x80000000); %bb.58(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  B %bb.58

bb.69.for.end287:
; predecessors: %bb.58
  successors: %bb.70(0x80000000); %bb.70(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  STRWui $wzr, $sp, 5 :: (store 4 into %ir.im)

bb.70.for.cond288:
; predecessors: %bb.69, %bb.71
  successors: %bb.71(0x7c000000), %bb.72(0x04000000); %bb.71(96.88%), %bb.72(3.12%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  renamable $x9 = ADRP target-flags(aarch64-page) @nmor
  renamable $w9 = LDRWui killed renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.72, implicit $nzcv

bb.71.for.body290:
; predecessors: %bb.70
  successors: %bb.70(0x80000000); %bb.70(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  renamable $x9 = UBFMXri renamable $x8, 61, 60
  $x10 = ADRP target-flags(aarch64-page) @ppmor
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  $x11 = ORRXrs $xzr, $x10, 0
  renamable $d0 = LDRDroX $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx292)
  $x10 = ADRP target-flags(aarch64-page) @tmmor
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  renamable $d1 = LDRDroX killed renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx294)
  renamable $d2 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  $x10 = ADRP target-flags(aarch64-page) @pmorx
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  renamable $d3 = LDRDroX killed renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx299)
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  STRDroX renamable $d0, killed renamable $x11, killed renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx297)
  renamable $d0 = FMULDrr killed renamable $d3, killed renamable $d0
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  STRDui killed renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
  STRWui killed renamable $w8, $sp, 5 :: (store 4 into %ir.im)
  B %bb.70

bb.72.for.end306:
; predecessors: %bb.70
  successors: %bb.20(0x80000000); %bb.20(100.00%)
  liveins: $x19, $x20, $x21, $x22, $x23, $x24, $x25, $x26, $x27, $x28
  renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
  renamable $d1 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
  $x0 = ADRP target-flags(aarch64-page) @t
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  $x1 = ORRXrs $xzr, $x20, 0
  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $x0 = ADRP target-flags(aarch64-page) @umor
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  $x1 = ADRP target-flags(aarch64-page) @pmorx
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  renamable $d0 = FNEGDr killed renamable $d0
  $x0 = ORRXrs $xzr, $x19, 0
  $x1 = ORRXrs $xzr, $x23, 0
  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  renamable $d0 = FNEGDr killed renamable $d0
  $x0 = ADRP target-flags(aarch64-page) @rmor
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  $x1 = ADRP target-flags(aarch64-page) @ppmor
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.20

bb.73.for.end311:
; predecessors: %bb.20
  successors: %bb.74(0x50000000), %bb.75(0x30000000); %bb.74(62.50%), %bb.75(37.50%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.75

bb.74.if.then313:
; predecessors: %bb.73
  successors: %bb.75(0x80000000); %bb.75(100.00%)

  $w0 = MOVZWi 6, 0
  BL @timer_start, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.75.if.end314:
; predecessors: %bb.73, %bb.74
  successors: %bb.76(0x50000000), %bb.77(0x30000000); %bb.76(62.50%), %bb.77(37.50%)

  $x0 = ADRP target-flags(aarch64-page) @umor
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  $x1 = ADRP target-flags(aarch64-page) @t
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.77

bb.76.if.then316:
; predecessors: %bb.75
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  $w0 = MOVZWi 6, 0
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.77.if.end317:
; predecessors: %bb.75, %bb.76
  successors: %bb.78(0x50000000), %bb.79(0x30000000); %bb.78(62.50%), %bb.79(37.50%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.79

bb.78.if.then319:
; predecessors: %bb.77
  successors: %bb.79(0x80000000); %bb.79(100.00%)

  $w0 = MOVZWi 5, 0
  BL @timer_stop, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp

bb.79.if.end320:
; predecessors: %bb.77, %bb.78

  $fp, $lr = frame-destroy LDPXi $sp, 20 :: (load 8 from %stack.14), (load 8 from %stack.13)
  $x20, $x19 = frame-destroy LDPXi $sp, 18 :: (load 8 from %stack.16), (load 8 from %stack.15)
  $x22, $x21 = frame-destroy LDPXi $sp, 16 :: (load 8 from %stack.18), (load 8 from %stack.17)
  $x24, $x23 = frame-destroy LDPXi $sp, 14 :: (load 8 from %stack.20), (load 8 from %stack.19)
  $x26, $x25 = frame-destroy LDPXi $sp, 12 :: (load 8 from %stack.22), (load 8 from %stack.21)
  $x28, $x27 = frame-destroy LDPXi $sp, 10 :: (load 8 from %stack.24), (load 8 from %stack.23)
  $sp = frame-destroy ADDXri $sp, 176, 0
  RET undef $lr

# End machine code for function diffusion.

********** MI Scheduling **********
diffusion:%bb.0 entry
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.2
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   STRWui renamable $w0, $sp, 19 :: (store 4 into %ir.ifmortar.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   CBZW killed renamable $w8, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w0, $sp, 19 :: (store 4 into %ir.ifmortar.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
SU(2):   STRWui renamable $w0, $sp, 19 :: (store 4 into %ir.ifmortar.addr)

********** MI Scheduling **********
diffusion:%bb.0 entry
  From: frame-setup STPXi killed $x28, killed $x27, $sp, 10 :: (store 8 into %stack.24), (store 8 into %stack.23)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x28, $x27, $sp, 10 :: (store 8 into %stack.24), (store 8 into %stack.23)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $x26, $x25, $sp, 12 :: (store 8 into %stack.22), (store 8 into %stack.21)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   frame-setup STPXi $x24, $x23, $sp, 14 :: (store 8 into %stack.20), (store 8 into %stack.19)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   frame-setup STPXi $x22, $x21, $sp, 16 :: (store 8 into %stack.18), (store 8 into %stack.17)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   frame-setup STPXi $x20, $x19, $sp, 18 :: (store 8 into %stack.16), (store 8 into %stack.15)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   frame-setup STPXi $fp, $lr, $sp, 20 :: (store 8 into %stack.14), (store 8 into %stack.13)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Anti Latency=0
SU(6):   $fp = frame-setup ADDXri $sp, 160, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x28, $x27, $sp, 10 :: (store 8 into %stack.24), (store 8 into %stack.23)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) frame-setup STPXi $x26, $x25, $sp, 12 :: (store 8 into %stack.22), (store 8 into %stack.21)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) frame-setup STPXi $x24, $x23, $sp, 14 :: (store 8 into %stack.20), (store 8 into %stack.19)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) frame-setup STPXi $x22, $x21, $sp, 16 :: (store 8 into %stack.18), (store 8 into %stack.17)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 0
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) frame-setup STPXi $x20, $x19, $sp, 18 :: (store 8 into %stack.16), (store 8 into %stack.15)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) frame-setup STPXi $fp, $lr, $sp, 20 :: (store 8 into %stack.14), (store 8 into %stack.13)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $fp = frame-setup ADDXri $sp, 160, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x28, $x27, $sp, 10 :: (store 8 into %stack.24), (store 8 into %stack.23)
SU(1):   frame-setup STPXi $x26, $x25, $sp, 12 :: (store 8 into %stack.22), (store 8 into %stack.21)
SU(2):   frame-setup STPXi $x24, $x23, $sp, 14 :: (store 8 into %stack.20), (store 8 into %stack.19)
SU(3):   frame-setup STPXi $x22, $x21, $sp, 16 :: (store 8 into %stack.18), (store 8 into %stack.17)
SU(4):   frame-setup STPXi $x20, $x19, $sp, 18 :: (store 8 into %stack.16), (store 8 into %stack.15)
SU(5):   frame-setup STPXi $fp, $lr, $sp, 20 :: (store 8 into %stack.14), (store 8 into %stack.13)
SU(6):   $fp = frame-setup ADDXri $sp, 160, 0

Fixup kills for %bb.0
Fixup kills for %bb.1
Fixup kills for %bb.2
Fixup kills for %bb.3
********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: STRXui $xzr, $sp, 7 :: (store 8 into %ir.rho1)
    To: End RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   STRXui $xzr, $sp, 7 :: (store 8 into %ir.rho1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $x26 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w8 = MOVZWi 1000, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x28 = ADRP target-flags(aarch64-page) @dpcelm
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x28
SU(5):   renamable $x28 = ADDXri $x28, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x28
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $w9 = MOVZWi 200, 0, implicit-def $x9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x19 = ADRP target-flags(aarch64-page) @trhs
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x19
SU(8):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x20 = ADRP target-flags(aarch64-page) @pdiff
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x20
SU(10):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x27 = ADRP target-flags(aarch64-page) @tmult
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x27
SU(12):   renamable $x27 = ADDXri $x27, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x27
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 7 9 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x28 = ADRP target-flags(aarch64-page) @dpcelm
  Ready @0c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 7 9 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x19 = ADRP target-flags(aarch64-page) @trhs
  Ready @1c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 5 9 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x20 = ADRP target-flags(aarch64-page) @pdiff
  Ready @2c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 5 8 10 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(11) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x27 = ADRP target-flags(aarch64-page) @tmult
  Ready @3c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 10 6 5 8 12 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x26 = ADRP target-flags(aarch64-page) @nelt
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 3 10 6 5 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $w8 = MOVZWi 1000, 0, implicit-def $x8
  Ready @5c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 8 10 6 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x28 = ADDXri $x28, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
  Ready @6c
  TopQ.A TopLatency SU(5) 1c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 8 10 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $w9 = MOVZWi 200, 0, implicit-def $x9
  Ready @7c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 8 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  Ready @8c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x27 = ADDXri $x27, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  Ready @10c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 11c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRXui $xzr, $sp, 7 :: (store 8 into %ir.rho1)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(4):   $x28 = ADRP target-flags(aarch64-page) @dpcelm
SU(7):   $x19 = ADRP target-flags(aarch64-page) @trhs
SU(9):   $x20 = ADRP target-flags(aarch64-page) @pdiff
SU(11):   $x27 = ADRP target-flags(aarch64-page) @tmult
SU(2):   renamable $x26 = ADRP target-flags(aarch64-page) @nelt
SU(3):   $w8 = MOVZWi 1000, 0, implicit-def $x8
SU(5):   renamable $x28 = ADDXri $x28, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
SU(6):   $w9 = MOVZWi 200, 0, implicit-def $x9
SU(8):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
SU(10):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
SU(12):   renamable $x27 = ADDXri $x27, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
SU(0):   STRXui $xzr, $sp, 7 :: (store 8 into %ir.rho1)
SU(1):   STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: renamable $x8 = ADRP target-flags(aarch64-page) @nmor
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ADRP target-flags(aarch64-page) @umor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @umor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $d0 = FMOVD0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @umor
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
SU(4):   $d0 = FMOVD0

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: renamable $x8 = ADRP target-flags(aarch64-page) @ntot
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   $x0 = ADRP target-flags(aarch64-page) @t
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @t
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $d0 = FMOVD0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @t
SU(3):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
SU(4):   $d0 = FMOVD0

Fixup kills for %bb.4
********** MI Scheduling **********
diffusion:%bb.5 for.cond
  From: renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.16, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w10
SU(1):   renamable $w11 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w11
SU(2):   $wzr = SUBSWrs renamable $w10, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w11
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.16, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w11 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w10, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w11 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   $wzr = SUBSWrs renamable $w10, renamable $w11, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.5
Fixup kills for %bb.6
********** MI Scheduling **********
diffusion:%bb.7 for.cond4
  From: renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.15, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.15, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.7
Fixup kills for %bb.8
********** MI Scheduling **********
diffusion:%bb.9 for.cond7
  From: renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.14, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.14, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.9
Fixup kills for %bb.10
********** MI Scheduling **********
diffusion:%bb.11 for.cond10
  From: renamable $w10 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.13, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w10 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.11
********** MI Scheduling **********
diffusion:%bb.12 for.body12
  From: renamable $x10 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.11
 RegionInstrs: 48
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x10
SU(1):   renamable $x11 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=4 Reg=$x11
SU(2):   renamable $x12, renamable $x14 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x12
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x14
SU(3):   renamable $x13, renamable $x15 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(24): Out  Latency=1
    SU(23): Data Latency=4 Reg=$x13
    SU(28): Out  Latency=1
    SU(24): Data Latency=4 Reg=$x15
SU(4):   renamable $x10 = MADDXrrr renamable $x10, renamable $x8, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 23
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
    SU(9): Data Latency=1 Reg=$x10
    SU(7): Data Latency=1 Reg=$x10
SU(5):   renamable $x12 = MADDXrrr renamable $x12, renamable $x9, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x12
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x12
    SU(12): Data Latency=1 Reg=$x12
    SU(11): Data Latency=1 Reg=$x12
SU(6):   renamable $x14 = ADDXrs renamable $x14, renamable $x14, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x14
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x14
SU(7):   $x16 = ADDXrs renamable $x28, renamable $x10, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 22
  Predecessors:
    SU(4): Data Latency=1 Reg=$x10
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x16
    SU(10): Anti Latency=0
SU(8):   renamable $x14 = UBFMXri renamable $x14, 61, 60
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x14
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x14
    SU(16): Data Latency=1 Reg=$x14
    SU(14): Data Latency=1 Reg=$x14
SU(9):   $x17 = ADDXrs renamable $x19, renamable $x10, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(4): Data Latency=1 Reg=$x10
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x17
    SU(10): Anti Latency=0
SU(10):   $x10 = ADDXrs renamable $x20, renamable $x10, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Anti Latency=0
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x10
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x10
SU(11):   $x16 = ADDXrs renamable $x16, renamable $x12, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 21
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
    SU(5): Data Latency=1 Reg=$x12
  Successors:
    SU(15): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x16
    SU(14): Anti Latency=0
SU(12):   $x17 = ADDXrs renamable $x17, renamable $x12, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x17
    SU(5): Data Latency=1 Reg=$x12
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x17
    SU(14): Anti Latency=0
SU(13):   $x10 = ADDXrs renamable $x10, renamable $x12, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
    SU(5): Data Latency=1 Reg=$x12
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x10
    SU(14): Anti Latency=0
SU(14):   $x12 = ADDXrs renamable $x16, renamable $x14, 0
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 20
  Predecessors:
    SU(13): Anti Latency=0
    SU(12): Anti Latency=0
    SU(11): Data Latency=1 Reg=$x16
    SU(11): Anti Latency=0
    SU(8): Data Latency=1 Reg=$x14
    SU(5): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x12
    SU(15): Anti Latency=0
    SU(18): Anti Latency=0
SU(15):   renamable $x16 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 20
  Predecessors:
    SU(14): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=4 Reg=$x16
    SU(47): Ord  Latency=0 Memory
SU(16):   $x17 = ADDXrs renamable $x17, renamable $x14, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x17
    SU(8): Data Latency=1 Reg=$x14
  Successors:
    SU(21): Data Latency=1 Reg=$x17
    SU(18): Anti Latency=0
SU(17):   $x10 = ADDXrs renamable $x10, renamable $x14, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x10
    SU(8): Data Latency=1 Reg=$x14
  Successors:
    SU(27): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x10
    SU(18): Anti Latency=0
SU(18):   renamable $x14 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(17): Anti Latency=0
    SU(16): Anti Latency=0
    SU(14): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(43): Data Latency=4 Reg=$w14
    SU(43): Data Latency=0 Reg=$x14
    SU(33): Data Latency=4 Reg=$x14
    SU(47): Ord  Latency=0 Memory
SU(19):   renamable $x16 = UBFMXri renamable $x16, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 16
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$x16
  Successors:
    SU(26): Data Latency=1 Reg=$x16
    SU(21): Data Latency=1 Reg=$x16
    SU(20): Data Latency=1 Reg=$x16
SU(20):   renamable $d0 = LDRDroX renamable $x12, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx18)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(19): Data Latency=1 Reg=$x16
    SU(14): Data Latency=1 Reg=$x12
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d0
    SU(23): Anti Latency=0
SU(21):   renamable $d1 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx26)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(19): Data Latency=1 Reg=$x16
    SU(16): Data Latency=1 Reg=$x17
  Successors:
    SU(38): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d1
SU(22):   renamable $x11 = MADDXrrr renamable $x11, renamable $x8, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x11
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x11
    SU(28): Data Latency=1 Reg=$x11
    SU(27): Data Latency=1 Reg=$x11
SU(23):   renamable $x12 = MADDXrrr renamable $x13, renamable $x9, $xzr
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(20): Anti Latency=0
    SU(14): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x13
  Successors:
    SU(33): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x12
    SU(31): Data Latency=1 Reg=$x12
    SU(30): Data Latency=1 Reg=$x12
    SU(24): Anti Latency=0
SU(24):   renamable $x13 = ADDXrs renamable $x15, renamable $x15, 2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(23): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x15
  Successors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x13
    SU(28): Anti Latency=0
SU(25):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 11
  Predecessors:
    SU(21): Data Latency=4 Reg=$d1
    SU(20): Out  Latency=1
    SU(20): Data Latency=4 Reg=$d0
  Successors:
    SU(37): Out  Latency=1
    SU(26): Data Latency=1 Reg=$d0
    SU(38): Anti Latency=0
SU(26):   STRDroX renamable $d0, renamable $x10, renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx34)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(25): Data Latency=1 Reg=$d0
    SU(19): Data Latency=1 Reg=$x16
    SU(17): Data Latency=1 Reg=$x10
  Successors:
    SU(37): Anti Latency=0
    SU(27): Anti Latency=0
    SU(38): Ord  Latency=1 Memory
SU(27):   $x10 = ADDXrs renamable $x19, renamable $x11, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(26): Anti Latency=0
    SU(22): Data Latency=1 Reg=$x11
    SU(17): Out  Latency=1
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x10
    SU(29): Anti Latency=0
SU(28):   $x15 = ADDXrs renamable $x20, renamable $x11, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(24): Anti Latency=0
    SU(22): Data Latency=1 Reg=$x11
    SU(3): Out  Latency=1
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x15
    SU(29): Anti Latency=0
SU(29):   $x11 = ADDXrs renamable $x27, renamable $x11, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 9
  Predecessors:
    SU(28): Anti Latency=0
    SU(27): Anti Latency=0
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x11
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x11
SU(30):   $x10 = ADDXrs renamable $x10, renamable $x12, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x10
    SU(23): Data Latency=1 Reg=$x12
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x10
    SU(33): Anti Latency=0
SU(31):   $x15 = ADDXrs renamable $x15, renamable $x12, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x15
    SU(23): Data Latency=1 Reg=$x12
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x15
    SU(33): Anti Latency=0
SU(32):   $x11 = ADDXrs renamable $x11, renamable $x12, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 8
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x11
    SU(23): Data Latency=1 Reg=$x12
  Successors:
    SU(39): Data Latency=1 Reg=$x11
    SU(33): Anti Latency=0
SU(33):   renamable $x12 = UBFMXri renamable $x14, 61, 60
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 8
  Predecessors:
    SU(32): Anti Latency=0
    SU(31): Anti Latency=0
    SU(30): Anti Latency=0
    SU(23): Out  Latency=1
    SU(18): Data Latency=4 Reg=$x14
  Successors:
    SU(40): Data Latency=1 Reg=$x12
    SU(38): Data Latency=1 Reg=$x12
    SU(37): Data Latency=1 Reg=$x12
SU(34):   renamable $x13 = UBFMXri renamable $x13, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x13
  Successors:
    SU(39): Data Latency=1 Reg=$x13
    SU(36): Data Latency=1 Reg=$x13
    SU(35): Data Latency=1 Reg=$x13
SU(35):   $x10 = ADDXrs renamable $x10, renamable $x13, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 8
  Predecessors:
    SU(30): Data Latency=1 Reg=$x10
    SU(30): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x13
  Successors:
    SU(39): Out  Latency=1
    SU(37): Data Latency=1 Reg=$x10
SU(36):   $x15 = ADDXrs renamable $x15, renamable $x13, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(34): Data Latency=1 Reg=$x13
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x15
  Successors:
    SU(38): Data Latency=1 Reg=$x15
SU(37):   renamable $d0 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx42)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 7
  Predecessors:
    SU(35): Data Latency=1 Reg=$x10
    SU(33): Data Latency=1 Reg=$x12
    SU(26): Anti Latency=0
    SU(25): Out  Latency=1
  Successors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=4 Reg=$d0
    SU(39): Anti Latency=0
SU(38):   renamable $d1 = LDRDroX renamable $x15, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx50)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 7
  Predecessors:
    SU(33): Data Latency=1 Reg=$x12
    SU(36): Data Latency=1 Reg=$x15
    SU(26): Ord  Latency=1 Memory
    SU(25): Anti Latency=0
    SU(21): Out  Latency=1
  Successors:
    SU(42): Data Latency=4 Reg=$d1
SU(39):   $x10 = ADDXrs renamable $x11, renamable $x13, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 7
  Predecessors:
    SU(37): Anti Latency=0
    SU(35): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x13
    SU(32): Data Latency=1 Reg=$x11
  Successors:
    SU(43): Out  Latency=1
    SU(40): Data Latency=1 Reg=$x10
SU(40):   renamable $d2 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx59)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 6
  Predecessors:
    SU(39): Data Latency=1 Reg=$x10
    SU(33): Data Latency=1 Reg=$x12
  Successors:
    SU(44): Data Latency=4 Reg=$d2
    SU(43): Anti Latency=0
SU(41):   renamable $d3 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(45): Data Latency=4 Reg=$d3
    SU(46): Ord  Latency=0 Memory
SU(42):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 3
  Predecessors:
    SU(37): Data Latency=4 Reg=$d0
    SU(37): Out  Latency=1
    SU(38): Data Latency=4 Reg=$d1
  Successors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d0
SU(43):   renamable $w10 = nsw ADDWri renamable $w14, 1, 0, implicit $x14
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 1
  Predecessors:
    SU(40): Anti Latency=0
    SU(39): Out  Latency=1
    SU(18): Data Latency=4 Reg=$w14
    SU(18): Data Latency=0 Reg=$x14
  Successors:
    SU(47): Data Latency=1 Reg=$w10
SU(44):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 2
  Predecessors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=1 Reg=$d0
    SU(40): Data Latency=4 Reg=$d2
  Successors:
    SU(45): Out  Latency=1
    SU(45): Data Latency=1 Reg=$d0
SU(45):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 1
  Predecessors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d0
    SU(41): Data Latency=4 Reg=$d3
  Successors:
    SU(46): Data Latency=1 Reg=$d0
SU(46):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(45): Data Latency=1 Reg=$d0
    SU(41): Ord  Latency=0 Memory
SU(47):   STRWui renamable $w10, $sp, 3 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(43): Data Latency=1 Reg=$w10
    SU(18): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
ExitSU:   B %bb.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 27
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 41 
  TopQ.A RemainingLatency 0 + 0c > CritPath 27
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x10 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 27c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 41 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
  Cand SU(2) TOP-PATH                  26 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x12, renamable $x14 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 6 
Queue TopQ.A: 41 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x11 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 6 22 
Queue TopQ.A: 41 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(3) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x13, renamable $x15 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 22 5 6 
Queue TopQ.A: 41 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(4) TOP-PATH                  23 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x10 = MADDXrrr renamable $x10, renamable $x8, $xzr
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 22 
Queue TopQ.A: 41 9 7 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x12 = MADDXrrr renamable $x12, renamable $x9, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 7 6 22 
  TopQ.A RemainingLatency 0 + 6c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x14 = ADDXrs renamable $x14, renamable $x14, 2
  Ready @6c
  TopQ.A BotLatency SU(6) 22c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 7 22 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x16 = ADDXrs renamable $x28, renamable $x10, 0
  Ready @7c
  TopQ.A TopLatency SU(7) 5c
  TopQ.A BotLatency SU(7) 22c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 8 22 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x14 = UBFMXri renamable $x14, 61, 60
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 11 22 
  TopQ.A RemainingLatency 0 + 9c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x17 = ADDXrs renamable $x19, renamable $x10, 0
  Ready @9c
  TopQ.A BotLatency SU(9) 21c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 11 12 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(11) TOP-PATH                  21 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x10 = ADDXrs renamable $x20, renamable $x10, 0
  Ready @10c
  TopQ.A BotLatency SU(10) 21c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 11 12 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(11) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x16 = ADDXrs renamable $x16, renamable $x12, 0
  Ready @11c
  TopQ.A TopLatency SU(11) 6c
  TopQ.A BotLatency SU(11) 21c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 13 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(13) TOP-PATH                  20 cycles 
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) $x17 = ADDXrs renamable $x17, renamable $x12, 0
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 13 16 
  TopQ.A RemainingLatency 0 + 13c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(13) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x10 = ADDXrs renamable $x10, renamable $x12, 0
  Ready @13c
  TopQ.A BotLatency SU(13) 20c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 16 17 14 
  TopQ.A RemainingLatency 0 + 14c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
  Cand SU(14) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x12 = ADDXrs renamable $x16, renamable $x14, 0
  Ready @14c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 20c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 16 17 15 
  TopQ.A RemainingLatency 0 + 15c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
  Cand SU(15) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x16 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  Ready @15c
  TopQ.A BotLatency SU(15) 20c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 16 17 
  TopQ.A RemainingLatency 0 + 16c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $x17 = ADDXrs renamable $x17, renamable $x14, 0
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 17 
  TopQ.A RemainingLatency 0 + 17c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(17) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x10 = ADDXrs renamable $x10, renamable $x14, 0
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(18) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x14 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 19 
  TopQ.A RemainingLatency 0 + 19c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(19) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $x16 = UBFMXri renamable $x16, 61, 60
  Ready @19c
  TopQ.A TopLatency SU(19) 11c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 21 20 
  TopQ.A RemainingLatency 0 + 20c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(21) TOP-PATH                  15 cycles 
  Cand SU(20) ORDER                              
Pick Top ORDER     
Scheduling SU(20) renamable $d0 = LDRDroX renamable $x12, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx18)
  Ready @20c
  TopQ.A TopLatency SU(20) 12c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 21 23 
  TopQ.A RemainingLatency 0 + 21c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(21) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d1 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx26)
  Ready @21c
  TopQ.A BotLatency SU(21) 15c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 22 23 
  TopQ.A RemainingLatency 0 + 22c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x11 = MADDXrrr renamable $x11, renamable $x8, $xzr
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 23 
  TopQ.A RemainingLatency 0 + 23c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(23) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x12 = MADDXrrr renamable $x13, renamable $x9, $xzr
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 24 
  TopQ.A RemainingLatency 0 + 24c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(24) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) renamable $x13 = ADDXrs renamable $x15, renamable $x15, 2
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 25 
  TopQ.A RemainingLatency 0 + 25c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(25) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @25c
  TopQ.A TopLatency SU(25) 16c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 26 
  TopQ.A RemainingLatency 0 + 26c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) STRDroX renamable $d0, renamable $x10, renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx34)
  Ready @26c
  TopQ.A TopLatency SU(26) 17c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 27 
  TopQ.A RemainingLatency 0 + 27c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(27) ORDER                              
Pick Top ORDER     
Scheduling SU(27) $x10 = ADDXrs renamable $x19, renamable $x11, 0
  Ready @27c
  TopQ.A BotLatency SU(27) 10c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 30 
  TopQ.A RemainingLatency 0 + 28c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) $x15 = ADDXrs renamable $x20, renamable $x11, 0
  Ready @28c
  TopQ.A BotLatency SU(28) 10c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 30 31 29 
  TopQ.A RemainingLatency 0 + 29c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(30) ORDER                              
  Cand SU(29) ORDER                              
Pick Top ORDER     
Scheduling SU(29) $x11 = ADDXrs renamable $x27, renamable $x11, 0
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 30 31 32 
  TopQ.A RemainingLatency 0 + 30c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) $x10 = ADDXrs renamable $x10, renamable $x12, 0
  Ready @30c
  TopQ.A TopLatency SU(30) 18c
  TopQ.A BotLatency SU(30) 9c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 32 31 
  TopQ.A RemainingLatency 0 + 31c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) $x15 = ADDXrs renamable $x15, renamable $x12, 0
  Ready @31c
  TopQ.A BotLatency SU(31) 9c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 32 
  TopQ.A RemainingLatency 0 + 32c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(34) renamable $x13 = UBFMXri renamable $x13, 61, 60
  Ready @32c
  TopQ.A BotLatency SU(34) 9c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 32 36 35 
  TopQ.A RemainingLatency 0 + 33c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(32) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) $x11 = ADDXrs renamable $x11, renamable $x12, 0
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 35 36 33 
  TopQ.A RemainingLatency 0 + 34c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(35) TOP-PATH                  8 cycles 
  Cand SU(33) ORDER                              
Pick Top ORDER     
Scheduling SU(33) renamable $x12 = UBFMXri renamable $x14, 61, 60
  Ready @34c
  TopQ.A BotLatency SU(33) 8c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 35 36 
  TopQ.A RemainingLatency 0 + 35c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(35) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) $x10 = ADDXrs renamable $x10, renamable $x13, 0
  Ready @35c
  TopQ.A TopLatency SU(35) 19c
  TopQ.A BotLatency SU(35) 8c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 36 37 
  TopQ.A RemainingLatency 0 + 36c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(36) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) $x15 = ADDXrs renamable $x15, renamable $x13, 0
  Ready @36c
  TopQ.A BotLatency SU(36) 8c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 37 38 
  TopQ.A RemainingLatency 0 + 37c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(37) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) renamable $d0 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx42)
  Ready @37c
  TopQ.A TopLatency SU(37) 20c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 38 39 
  TopQ.A RemainingLatency 0 + 38c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(38) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) renamable $d1 = LDRDroX renamable $x15, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx50)
  Ready @38c
  TopQ.A BotLatency SU(38) 7c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 39 
  TopQ.A RemainingLatency 0 + 39c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(39) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(39) $x10 = ADDXrs renamable $x11, renamable $x13, 0
  Ready @39c
  TopQ.A BotLatency SU(39) 7c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 40 
  TopQ.A RemainingLatency 0 + 40c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(40) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(40) renamable $d2 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx59)
  Ready @40c
  TopQ.A TopLatency SU(40) 21c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 43 
  TopQ.A RemainingLatency 0 + 41c > CritPath 27
  Cand SU(41) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(41) renamable $d3 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 42 
  TopQ.A RemainingLatency 0 + 42c > CritPath 27
  Cand SU(43) ORDER                              
  Cand SU(42) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @42c
  TopQ.A TopLatency SU(42) 24c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 44 
Queue TopQ.A: 43 
Pick Top ONLY1     
Scheduling SU(43) renamable $w10 = nsw ADDWri renamable $w14, 1, 0, implicit $x14
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 44 
  TopQ.A RemainingLatency 0 + 44c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(44) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(44) renamable $d0 = FMULDrr renamable $d0, renamable $d2
  Ready @44c
  TopQ.A TopLatency SU(44) 25c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 45 
  TopQ.A RemainingLatency 0 + 45c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(45) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(45) renamable $d0 = FADDDrr renamable $d3, renamable $d0
  Ready @45c
  TopQ.A TopLatency SU(45) 26c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 
  TopQ.A RemainingLatency 0 + 46c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
Pick Top ORDER     
Scheduling SU(46) STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.rho1)
  Ready @46c
  TopQ.A TopLatency SU(46) 27c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 
Pick Top ONLY1     
Scheduling SU(47) STRWui renamable $w10, $sp, 3 :: (store 4 into %ir.i)
  Ready @47c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x10 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $x12, renamable $x14 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(1):   renamable $x11 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(3):   renamable $x13, renamable $x15 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(4):   renamable $x10 = MADDXrrr renamable $x10, renamable $x8, $xzr
SU(5):   renamable $x12 = MADDXrrr renamable $x12, renamable $x9, $xzr
SU(6):   renamable $x14 = ADDXrs renamable $x14, renamable $x14, 2
SU(7):   $x16 = ADDXrs renamable $x28, renamable $x10, 0
SU(8):   renamable $x14 = UBFMXri renamable $x14, 61, 60
SU(9):   $x17 = ADDXrs renamable $x19, renamable $x10, 0
SU(10):   $x10 = ADDXrs renamable $x20, renamable $x10, 0
SU(11):   $x16 = ADDXrs renamable $x16, renamable $x12, 0
SU(12):   $x17 = ADDXrs renamable $x17, renamable $x12, 0
SU(13):   $x10 = ADDXrs renamable $x10, renamable $x12, 0
SU(14):   $x12 = ADDXrs renamable $x16, renamable $x14, 0
SU(15):   renamable $x16 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
SU(16):   $x17 = ADDXrs renamable $x17, renamable $x14, 0
SU(17):   $x10 = ADDXrs renamable $x10, renamable $x14, 0
SU(18):   renamable $x14 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
SU(19):   renamable $x16 = UBFMXri renamable $x16, 61, 60
SU(20):   renamable $d0 = LDRDroX renamable $x12, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx18)
SU(21):   renamable $d1 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx26)
SU(22):   renamable $x11 = MADDXrrr renamable $x11, renamable $x8, $xzr
SU(23):   renamable $x12 = MADDXrrr renamable $x13, renamable $x9, $xzr
SU(24):   renamable $x13 = ADDXrs renamable $x15, renamable $x15, 2
SU(25):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(26):   STRDroX renamable $d0, renamable $x10, renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx34)
SU(27):   $x10 = ADDXrs renamable $x19, renamable $x11, 0
SU(28):   $x15 = ADDXrs renamable $x20, renamable $x11, 0
SU(29):   $x11 = ADDXrs renamable $x27, renamable $x11, 0
SU(30):   $x10 = ADDXrs renamable $x10, renamable $x12, 0
SU(31):   $x15 = ADDXrs renamable $x15, renamable $x12, 0
SU(34):   renamable $x13 = UBFMXri renamable $x13, 61, 60
SU(32):   $x11 = ADDXrs renamable $x11, renamable $x12, 0
SU(33):   renamable $x12 = UBFMXri renamable $x14, 61, 60
SU(35):   $x10 = ADDXrs renamable $x10, renamable $x13, 0
SU(36):   $x15 = ADDXrs renamable $x15, renamable $x13, 0
SU(37):   renamable $d0 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx42)
SU(38):   renamable $d1 = LDRDroX renamable $x15, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx50)
SU(39):   $x10 = ADDXrs renamable $x11, renamable $x13, 0
SU(40):   renamable $d2 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx59)
SU(41):   renamable $d3 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
SU(42):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(43):   renamable $w10 = nsw ADDWri renamable $w14, 1, 0, implicit $x14
SU(44):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
SU(45):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
SU(46):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.rho1)
SU(47):   STRWui renamable $w10, $sp, 3 :: (store 4 into %ir.i)

Fixup kills for %bb.12
********** MI Scheduling **********
diffusion:%bb.13 for.inc61
  From: renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STRWui renamable $w10, $sp, 2 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w10, $sp, 2 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w10 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STRWui renamable $w10, $sp, 2 :: (store 4 into %ir.j)

Fixup kills for %bb.13
********** MI Scheduling **********
diffusion:%bb.14 for.inc64
  From: renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.7
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STRWui renamable $w10, $sp, 1 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w10, $sp, 1 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $w10 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STRWui renamable $w10, $sp, 1 :: (store 4 into %ir.k)

Fixup kills for %bb.14
********** MI Scheduling **********
diffusion:%bb.15 for.inc67
  From: renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STRWui renamable $w10, $sp, 6 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w10, $sp, 6 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w10 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STRWui renamable $w10, $sp, 6 :: (store 4 into %ir.ie)

Fixup kills for %bb.15
********** MI Scheduling **********
diffusion:%bb.16 for.end69
  From: STRWui $wzr, $sp, 5 :: (store 4 into %ir.im)
    To: End RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 5 :: (store 4 into %ir.im)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x10 = ADRP target-flags(aarch64-page) @dpcmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x10
SU(2):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x11 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x11
SU(4):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x12 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x12
SU(6):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x10 = ADRP target-flags(aarch64-page) @dpcmor
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x11 = ADRP target-flags(aarch64-page) @rmor
  Ready @1c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 2 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x12 = ADRP target-flags(aarch64-page) @pmorx
  Ready @2c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 2 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @4c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 5 :: (store 4 into %ir.im)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(1):   $x10 = ADRP target-flags(aarch64-page) @dpcmor
SU(3):   $x11 = ADRP target-flags(aarch64-page) @rmor
SU(5):   $x12 = ADRP target-flags(aarch64-page) @pmorx
SU(2):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
SU(4):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(6):   renamable $x12 = ADDXri $x12, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
SU(0):   STRWui $wzr, $sp, 5 :: (store 4 into %ir.im)

Fixup kills for %bb.16
********** MI Scheduling **********
diffusion:%bb.17 for.cond70
  From: renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.19, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.19, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @nmor
SU(0):   renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
SU(2):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.17
********** MI Scheduling **********
diffusion:%bb.18 for.body72
  From: renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.17
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
    SU(6): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(8): Data Latency=1 Reg=$x9
    SU(5): Data Latency=1 Reg=$x9
    SU(3): Data Latency=1 Reg=$x9
    SU(2): Data Latency=1 Reg=$x9
    SU(6): Anti Latency=0
SU(2):   renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx74)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDroX renamable $x11, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx76)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Data Latency=4 Reg=$d1
SU(4):   renamable $d2 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=$d2
    SU(11): Ord  Latency=0 Memory
SU(5):   renamable $d3 = LDRDroX renamable $x11, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx81)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(9): Data Latency=4 Reg=$d3
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(12): Data Latency=1 Reg=$w8
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(8): Data Latency=1 Reg=$d0
SU(8):   STRDroX renamable $d0, renamable $x12, renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx79)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1 Reg=$d0
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(9): Anti Latency=0
SU(9):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(5): Data Latency=4 Reg=$d3
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d0
SU(10):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    SU(11): Data Latency=1 Reg=$d0
SU(11):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(12):   STRWui renamable $w8, $sp, 5 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 12
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 12
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d2 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 2 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 12
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  7 cycles 
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx74)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 12
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x11, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx76)
  Ready @6c
  TopQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 12
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d3 = LDRDroX renamable $x11, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx81)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWui renamable $w8, $sp, 5 :: (store 4 into %ir.im)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRDroX renamable $d0, renamable $x12, renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx79)
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d0 = FMULDrr renamable $d3, renamable $d0
  Ready @12c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @13c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.rho1)
  Ready @14c
  TopQ.A TopLatency SU(11) 12c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
SU(4):   renamable $d2 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60
SU(2):   renamable $d0 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx74)
SU(3):   renamable $d1 = LDRDroX renamable $x11, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx76)
SU(5):   renamable $d3 = LDRDroX renamable $x11, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx81)
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
SU(12):   STRWui renamable $w8, $sp, 5 :: (store 4 into %ir.im)
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(8):   STRDroX renamable $d0, renamable $x12, renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx79)
SU(9):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
SU(10):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(11):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.rho1)

Fixup kills for %bb.18
********** MI Scheduling **********
diffusion:%bb.19 for.end88
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w21 = MOVZWi 1000, 0, implicit-def $x21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w22 = MOVZWi 200, 0, implicit-def $x22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x23 = ADRP target-flags(aarch64-page) @pdiffp
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x23
SU(4):   renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x23
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w25 = MOVZWi 24, 0, implicit-def $x25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x24 = ADRP target-flags(aarch64-page) @cbc
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x24
SU(7):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x23 = ADRP target-flags(aarch64-page) @pdiffp
  Ready @0c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 5 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x24 = ADRP target-flags(aarch64-page) @cbc
  Ready @1c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 1 2 4 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(7) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $w21 = MOVZWi 1000, 0, implicit-def $x21
  Ready @3c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 2 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w22 = MOVZWi 200, 0, implicit-def $x22
  Ready @4c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  Ready @5c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $w25 = MOVZWi 24, 0, implicit-def $x25
  Ready @6c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  Ready @7c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(3):   $x23 = ADRP target-flags(aarch64-page) @pdiffp
SU(6):   $x24 = ADRP target-flags(aarch64-page) @cbc
SU(0):   $w8 = MOVZWi 1, 0
SU(1):   $w21 = MOVZWi 1000, 0, implicit-def $x21
SU(2):   $w22 = MOVZWi 200, 0, implicit-def $x22
SU(4):   renamable $x23 = ADDXri $x23, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
SU(5):   $w25 = MOVZWi 24, 0, implicit-def $x25
SU(7):   renamable $x24 = ADDXri $x24, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0

Fixup kills for %bb.19
********** MI Scheduling **********
diffusion:%bb.20 for.cond89
  From: STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.iter)
    To: Bcc 12, %bb.73, implicit $nzcv
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.iter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(2):   renamable $x9 = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x9
SU(3):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
  Successors:
    SU(4): Data Latency=4 Reg=$w9
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w9
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.73, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x9 = ADRP target-flags(aarch64-page) @nmxh
  Ready @0c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  Ready @1c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.iter)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(2):   renamable $x9 = ADRP target-flags(aarch64-page) @nmxh
SU(3):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(0):   STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.iter)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.20
********** MI Scheduling **********
diffusion:%bb.21 for.body91
  From: renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
    To: Bcc 11, %bb.38, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 11, %bb.38, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv

Fixup kills for %bb.21
********** MI Scheduling **********
diffusion:%bb.22 if.then93
  From: STRXui $xzr, $sp, 8 :: (store 8 into %ir.rho_aux)
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STRXui $xzr, $sp, 8 :: (store 8 into %ir.rho_aux)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x16 = ADRP target-flags(aarch64-page) @dpcmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x17 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = ADRP target-flags(aarch64-page) @dpcmor
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x17 = ADRP target-flags(aarch64-page) @rmor
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @3c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRXui $xzr, $sp, 8 :: (store 8 into %ir.rho_aux)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(2):   $x16 = ADRP target-flags(aarch64-page) @dpcmor
SU(4):   $x17 = ADRP target-flags(aarch64-page) @rmor
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(0):   STRXui $xzr, $sp, 8 :: (store 8 into %ir.rho_aux)
SU(1):   STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)

Fixup kills for %bb.22
********** MI Scheduling **********
diffusion:%bb.23 for.cond94
  From: renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.34, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.34, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.23
Fixup kills for %bb.24
********** MI Scheduling **********
diffusion:%bb.25 for.cond97
  From: renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.33, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.33, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.25
Fixup kills for %bb.26
********** MI Scheduling **********
diffusion:%bb.27 for.cond100
  From: renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.32, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.32, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.27
Fixup kills for %bb.28
********** MI Scheduling **********
diffusion:%bb.29 for.cond103
  From: renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.31, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.31, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.29
********** MI Scheduling **********
diffusion:%bb.30 for.body105
  From: renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.29
 RegionInstrs: 48
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x8
SU(1):   renamable $x9 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=4 Reg=$x9
SU(2):   renamable $x10, renamable $x12 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x10
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x12
SU(3):   renamable $x11, renamable $x13 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(24): Out  Latency=1
    SU(23): Data Latency=4 Reg=$x11
    SU(28): Out  Latency=1
    SU(24): Data Latency=4 Reg=$x13
SU(4):   renamable $x8 = MADDXrrr renamable $x8, renamable $x21, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 23
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
    SU(9): Data Latency=1 Reg=$x8
    SU(7): Data Latency=1 Reg=$x8
SU(5):   renamable $x10 = MADDXrrr renamable $x10, renamable $x22, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x10
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x10
    SU(12): Data Latency=1 Reg=$x10
    SU(11): Data Latency=1 Reg=$x10
SU(6):   renamable $x12 = ADDXrs renamable $x12, renamable $x12, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x12
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x12
SU(7):   $x14 = ADDXrs renamable $x28, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 22
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x14
    SU(10): Anti Latency=0
SU(8):   renamable $x12 = UBFMXri renamable $x12, 61, 60
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x12
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x12
    SU(16): Data Latency=1 Reg=$x12
    SU(14): Data Latency=1 Reg=$x12
SU(9):   $x15 = ADDXrs renamable $x19, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x15
    SU(10): Anti Latency=0
SU(10):   $x8 = ADDXrs renamable $x23, renamable $x8, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Anti Latency=0
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
SU(11):   $x14 = ADDXrs renamable $x14, renamable $x10, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 21
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x14
    SU(5): Data Latency=1 Reg=$x10
  Successors:
    SU(15): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x14
    SU(14): Anti Latency=0
SU(12):   $x15 = ADDXrs renamable $x15, renamable $x10, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x15
    SU(5): Data Latency=1 Reg=$x10
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x15
    SU(14): Anti Latency=0
SU(13):   $x8 = ADDXrs renamable $x8, renamable $x10, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
    SU(5): Data Latency=1 Reg=$x10
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x8
    SU(14): Anti Latency=0
SU(14):   $x10 = ADDXrs renamable $x14, renamable $x12, 0
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 20
  Predecessors:
    SU(13): Anti Latency=0
    SU(12): Anti Latency=0
    SU(11): Data Latency=1 Reg=$x14
    SU(11): Anti Latency=0
    SU(8): Data Latency=1 Reg=$x12
    SU(5): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x10
    SU(15): Anti Latency=0
    SU(18): Anti Latency=0
SU(15):   renamable $x14 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 20
  Predecessors:
    SU(14): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=4 Reg=$x14
    SU(47): Ord  Latency=0 Memory
SU(16):   $x15 = ADDXrs renamable $x15, renamable $x12, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x15
    SU(8): Data Latency=1 Reg=$x12
  Successors:
    SU(21): Data Latency=1 Reg=$x15
    SU(18): Anti Latency=0
SU(17):   $x8 = ADDXrs renamable $x8, renamable $x12, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
    SU(8): Data Latency=1 Reg=$x12
  Successors:
    SU(27): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x8
    SU(18): Anti Latency=0
SU(18):   renamable $x12 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(17): Anti Latency=0
    SU(16): Anti Latency=0
    SU(14): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(43): Data Latency=4 Reg=$w12
    SU(43): Data Latency=0 Reg=$x12
    SU(33): Data Latency=4 Reg=$x12
    SU(47): Ord  Latency=0 Memory
SU(19):   renamable $x14 = UBFMXri renamable $x14, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 16
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$x14
  Successors:
    SU(26): Data Latency=1 Reg=$x14
    SU(21): Data Latency=1 Reg=$x14
    SU(20): Data Latency=1 Reg=$x14
SU(20):   renamable $d0 = LDRDroX renamable $x10, renamable $x14, 0, 0 :: (load 8 from %ir.arrayidx113)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(19): Data Latency=1 Reg=$x14
    SU(14): Data Latency=1 Reg=$x10
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d0
    SU(23): Anti Latency=0
SU(21):   renamable $d1 = LDRDroX renamable $x15, renamable $x14, 0, 0 :: (load 8 from %ir.arrayidx121)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(19): Data Latency=1 Reg=$x14
    SU(16): Data Latency=1 Reg=$x15
  Successors:
    SU(38): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d1
SU(22):   renamable $x9 = MADDXrrr renamable $x9, renamable $x21, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x9
    SU(28): Data Latency=1 Reg=$x9
    SU(27): Data Latency=1 Reg=$x9
SU(23):   renamable $x10 = MADDXrrr renamable $x11, renamable $x22, $xzr
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(20): Anti Latency=0
    SU(14): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x11
  Successors:
    SU(33): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x10
    SU(31): Data Latency=1 Reg=$x10
    SU(30): Data Latency=1 Reg=$x10
    SU(24): Anti Latency=0
SU(24):   renamable $x11 = ADDXrs renamable $x13, renamable $x13, 2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(23): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x13
  Successors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x11
    SU(28): Anti Latency=0
SU(25):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 11
  Predecessors:
    SU(21): Data Latency=4 Reg=$d1
    SU(20): Out  Latency=1
    SU(20): Data Latency=4 Reg=$d0
  Successors:
    SU(37): Out  Latency=1
    SU(26): Data Latency=1 Reg=$d0
    SU(38): Anti Latency=0
SU(26):   STRDroX renamable $d0, renamable $x8, renamable $x14, 0, 0 :: (store 8 into %ir.arrayidx130)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(25): Data Latency=1 Reg=$d0
    SU(19): Data Latency=1 Reg=$x14
    SU(17): Data Latency=1 Reg=$x8
  Successors:
    SU(37): Anti Latency=0
    SU(27): Anti Latency=0
    SU(38): Ord  Latency=1 Memory
SU(27):   $x8 = ADDXrs renamable $x19, renamable $x9, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(26): Anti Latency=0
    SU(22): Data Latency=1 Reg=$x9
    SU(17): Out  Latency=1
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x8
    SU(29): Anti Latency=0
SU(28):   $x13 = ADDXrs renamable $x23, renamable $x9, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(24): Anti Latency=0
    SU(22): Data Latency=1 Reg=$x9
    SU(3): Out  Latency=1
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x13
    SU(29): Anti Latency=0
SU(29):   $x9 = ADDXrs renamable $x27, renamable $x9, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 9
  Predecessors:
    SU(28): Anti Latency=0
    SU(27): Anti Latency=0
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x9
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x9
SU(30):   $x8 = ADDXrs renamable $x8, renamable $x10, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x8
    SU(23): Data Latency=1 Reg=$x10
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x8
    SU(33): Anti Latency=0
SU(31):   $x13 = ADDXrs renamable $x13, renamable $x10, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x13
    SU(23): Data Latency=1 Reg=$x10
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x13
    SU(33): Anti Latency=0
SU(32):   $x9 = ADDXrs renamable $x9, renamable $x10, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 8
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x9
    SU(23): Data Latency=1 Reg=$x10
  Successors:
    SU(39): Data Latency=1 Reg=$x9
    SU(33): Anti Latency=0
SU(33):   renamable $x10 = UBFMXri renamable $x12, 61, 60
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 8
  Predecessors:
    SU(32): Anti Latency=0
    SU(31): Anti Latency=0
    SU(30): Anti Latency=0
    SU(23): Out  Latency=1
    SU(18): Data Latency=4 Reg=$x12
  Successors:
    SU(40): Data Latency=1 Reg=$x10
    SU(38): Data Latency=1 Reg=$x10
    SU(37): Data Latency=1 Reg=$x10
SU(34):   renamable $x11 = UBFMXri renamable $x11, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x11
  Successors:
    SU(39): Data Latency=1 Reg=$x11
    SU(36): Data Latency=1 Reg=$x11
    SU(35): Data Latency=1 Reg=$x11
SU(35):   $x8 = ADDXrs renamable $x8, renamable $x11, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 8
  Predecessors:
    SU(30): Data Latency=1 Reg=$x8
    SU(30): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x11
  Successors:
    SU(39): Out  Latency=1
    SU(37): Data Latency=1 Reg=$x8
SU(36):   $x13 = ADDXrs renamable $x13, renamable $x11, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(34): Data Latency=1 Reg=$x11
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x13
  Successors:
    SU(38): Data Latency=1 Reg=$x13
SU(37):   renamable $d0 = LDRDroX renamable $x8, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx138)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 7
  Predecessors:
    SU(35): Data Latency=1 Reg=$x8
    SU(33): Data Latency=1 Reg=$x10
    SU(26): Anti Latency=0
    SU(25): Out  Latency=1
  Successors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=4 Reg=$d0
    SU(39): Anti Latency=0
SU(38):   renamable $d1 = LDRDroX renamable $x13, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx146)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 7
  Predecessors:
    SU(33): Data Latency=1 Reg=$x10
    SU(36): Data Latency=1 Reg=$x13
    SU(26): Ord  Latency=1 Memory
    SU(25): Anti Latency=0
    SU(21): Out  Latency=1
  Successors:
    SU(42): Data Latency=4 Reg=$d1
SU(39):   $x8 = ADDXrs renamable $x9, renamable $x11, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 7
  Predecessors:
    SU(37): Anti Latency=0
    SU(35): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x11
    SU(32): Data Latency=1 Reg=$x9
  Successors:
    SU(43): Out  Latency=1
    SU(40): Data Latency=1 Reg=$x8
SU(40):   renamable $d2 = LDRDroX renamable $x8, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx155)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 6
  Predecessors:
    SU(39): Data Latency=1 Reg=$x8
    SU(33): Data Latency=1 Reg=$x10
  Successors:
    SU(44): Data Latency=4 Reg=$d2
    SU(43): Anti Latency=0
SU(41):   renamable $d3 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(45): Data Latency=4 Reg=$d3
    SU(46): Ord  Latency=0 Memory
SU(42):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 3
  Predecessors:
    SU(37): Data Latency=4 Reg=$d0
    SU(37): Out  Latency=1
    SU(38): Data Latency=4 Reg=$d1
  Successors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d0
SU(43):   renamable $w8 = nsw ADDWri renamable $w12, 1, 0, implicit $x12
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 1
  Predecessors:
    SU(40): Anti Latency=0
    SU(39): Out  Latency=1
    SU(18): Data Latency=4 Reg=$w12
    SU(18): Data Latency=0 Reg=$x12
  Successors:
    SU(47): Data Latency=1 Reg=$w8
SU(44):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 2
  Predecessors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=1 Reg=$d0
    SU(40): Data Latency=4 Reg=$d2
  Successors:
    SU(45): Out  Latency=1
    SU(45): Data Latency=1 Reg=$d0
SU(45):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 1
  Predecessors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d0
    SU(41): Data Latency=4 Reg=$d3
  Successors:
    SU(46): Data Latency=1 Reg=$d0
SU(46):   STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.rho_aux)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(45): Data Latency=1 Reg=$d0
    SU(41): Ord  Latency=0 Memory
SU(47):   STRWui renamable $w8, $sp, 3 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(43): Data Latency=1 Reg=$w8
    SU(18): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 27
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 41 
  TopQ.A RemainingLatency 0 + 0c > CritPath 27
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 27c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 41 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
  Cand SU(2) TOP-PATH                  26 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x10, renamable $x12 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 6 
Queue TopQ.A: 41 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 6 22 
Queue TopQ.A: 41 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(3) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x11, renamable $x13 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 22 5 6 
Queue TopQ.A: 41 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(4) TOP-PATH                  23 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x8 = MADDXrrr renamable $x8, renamable $x21, $xzr
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 22 
Queue TopQ.A: 41 9 7 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x10 = MADDXrrr renamable $x10, renamable $x22, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 7 6 22 
  TopQ.A RemainingLatency 0 + 6c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x12 = ADDXrs renamable $x12, renamable $x12, 2
  Ready @6c
  TopQ.A BotLatency SU(6) 22c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 7 22 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x14 = ADDXrs renamable $x28, renamable $x8, 0
  Ready @7c
  TopQ.A TopLatency SU(7) 5c
  TopQ.A BotLatency SU(7) 22c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 8 22 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x12 = UBFMXri renamable $x12, 61, 60
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 11 22 
  TopQ.A RemainingLatency 0 + 9c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x15 = ADDXrs renamable $x19, renamable $x8, 0
  Ready @9c
  TopQ.A BotLatency SU(9) 21c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 11 12 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(11) TOP-PATH                  21 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x8 = ADDXrs renamable $x23, renamable $x8, 0
  Ready @10c
  TopQ.A BotLatency SU(10) 21c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 11 12 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(11) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x14 = ADDXrs renamable $x14, renamable $x10, 0
  Ready @11c
  TopQ.A TopLatency SU(11) 6c
  TopQ.A BotLatency SU(11) 21c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 13 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(13) TOP-PATH                  20 cycles 
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) $x15 = ADDXrs renamable $x15, renamable $x10, 0
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 13 16 
  TopQ.A RemainingLatency 0 + 13c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(13) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x8 = ADDXrs renamable $x8, renamable $x10, 0
  Ready @13c
  TopQ.A BotLatency SU(13) 20c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 16 17 14 
  TopQ.A RemainingLatency 0 + 14c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
  Cand SU(14) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x10 = ADDXrs renamable $x14, renamable $x12, 0
  Ready @14c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 20c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 16 17 15 
  TopQ.A RemainingLatency 0 + 15c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
  Cand SU(15) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x14 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  Ready @15c
  TopQ.A BotLatency SU(15) 20c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 16 17 
  TopQ.A RemainingLatency 0 + 16c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $x15 = ADDXrs renamable $x15, renamable $x12, 0
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 17 
  TopQ.A RemainingLatency 0 + 17c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(17) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x8 = ADDXrs renamable $x8, renamable $x12, 0
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(18) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x12 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 19 
  TopQ.A RemainingLatency 0 + 19c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(19) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $x14 = UBFMXri renamable $x14, 61, 60
  Ready @19c
  TopQ.A TopLatency SU(19) 11c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 21 20 
  TopQ.A RemainingLatency 0 + 20c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(21) TOP-PATH                  15 cycles 
  Cand SU(20) ORDER                              
Pick Top ORDER     
Scheduling SU(20) renamable $d0 = LDRDroX renamable $x10, renamable $x14, 0, 0 :: (load 8 from %ir.arrayidx113)
  Ready @20c
  TopQ.A TopLatency SU(20) 12c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 21 23 
  TopQ.A RemainingLatency 0 + 21c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(21) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d1 = LDRDroX renamable $x15, renamable $x14, 0, 0 :: (load 8 from %ir.arrayidx121)
  Ready @21c
  TopQ.A BotLatency SU(21) 15c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 22 23 
  TopQ.A RemainingLatency 0 + 22c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x9 = MADDXrrr renamable $x9, renamable $x21, $xzr
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 23 
  TopQ.A RemainingLatency 0 + 23c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(23) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x10 = MADDXrrr renamable $x11, renamable $x22, $xzr
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 24 
  TopQ.A RemainingLatency 0 + 24c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(24) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) renamable $x11 = ADDXrs renamable $x13, renamable $x13, 2
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 25 
  TopQ.A RemainingLatency 0 + 25c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(25) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @25c
  TopQ.A TopLatency SU(25) 16c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 26 
  TopQ.A RemainingLatency 0 + 26c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) STRDroX renamable $d0, renamable $x8, renamable $x14, 0, 0 :: (store 8 into %ir.arrayidx130)
  Ready @26c
  TopQ.A TopLatency SU(26) 17c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 27 
  TopQ.A RemainingLatency 0 + 27c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(27) ORDER                              
Pick Top ORDER     
Scheduling SU(27) $x8 = ADDXrs renamable $x19, renamable $x9, 0
  Ready @27c
  TopQ.A BotLatency SU(27) 10c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 30 
  TopQ.A RemainingLatency 0 + 28c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) $x13 = ADDXrs renamable $x23, renamable $x9, 0
  Ready @28c
  TopQ.A BotLatency SU(28) 10c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 30 31 29 
  TopQ.A RemainingLatency 0 + 29c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(30) ORDER                              
  Cand SU(29) ORDER                              
Pick Top ORDER     
Scheduling SU(29) $x9 = ADDXrs renamable $x27, renamable $x9, 0
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 30 31 32 
  TopQ.A RemainingLatency 0 + 30c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) $x8 = ADDXrs renamable $x8, renamable $x10, 0
  Ready @30c
  TopQ.A TopLatency SU(30) 18c
  TopQ.A BotLatency SU(30) 9c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 32 31 
  TopQ.A RemainingLatency 0 + 31c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) $x13 = ADDXrs renamable $x13, renamable $x10, 0
  Ready @31c
  TopQ.A BotLatency SU(31) 9c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 32 
  TopQ.A RemainingLatency 0 + 32c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(34) renamable $x11 = UBFMXri renamable $x11, 61, 60
  Ready @32c
  TopQ.A BotLatency SU(34) 9c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 32 36 35 
  TopQ.A RemainingLatency 0 + 33c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(32) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) $x9 = ADDXrs renamable $x9, renamable $x10, 0
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 35 36 33 
  TopQ.A RemainingLatency 0 + 34c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(35) TOP-PATH                  8 cycles 
  Cand SU(33) ORDER                              
Pick Top ORDER     
Scheduling SU(33) renamable $x10 = UBFMXri renamable $x12, 61, 60
  Ready @34c
  TopQ.A BotLatency SU(33) 8c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 35 36 
  TopQ.A RemainingLatency 0 + 35c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(35) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) $x8 = ADDXrs renamable $x8, renamable $x11, 0
  Ready @35c
  TopQ.A TopLatency SU(35) 19c
  TopQ.A BotLatency SU(35) 8c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 36 37 
  TopQ.A RemainingLatency 0 + 36c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(36) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) $x13 = ADDXrs renamable $x13, renamable $x11, 0
  Ready @36c
  TopQ.A BotLatency SU(36) 8c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 37 38 
  TopQ.A RemainingLatency 0 + 37c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(37) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) renamable $d0 = LDRDroX renamable $x8, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx138)
  Ready @37c
  TopQ.A TopLatency SU(37) 20c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 38 39 
  TopQ.A RemainingLatency 0 + 38c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(38) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) renamable $d1 = LDRDroX renamable $x13, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx146)
  Ready @38c
  TopQ.A BotLatency SU(38) 7c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 39 
  TopQ.A RemainingLatency 0 + 39c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(39) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(39) $x8 = ADDXrs renamable $x9, renamable $x11, 0
  Ready @39c
  TopQ.A BotLatency SU(39) 7c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 40 
  TopQ.A RemainingLatency 0 + 40c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(40) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(40) renamable $d2 = LDRDroX renamable $x8, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx155)
  Ready @40c
  TopQ.A TopLatency SU(40) 21c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 43 
  TopQ.A RemainingLatency 0 + 41c > CritPath 27
  Cand SU(41) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(41) renamable $d3 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.rho_aux)
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 42 
  TopQ.A RemainingLatency 0 + 42c > CritPath 27
  Cand SU(43) ORDER                              
  Cand SU(42) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @42c
  TopQ.A TopLatency SU(42) 24c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 44 
Queue TopQ.A: 43 
Pick Top ONLY1     
Scheduling SU(43) renamable $w8 = nsw ADDWri renamable $w12, 1, 0, implicit $x12
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 44 
  TopQ.A RemainingLatency 0 + 44c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(44) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(44) renamable $d0 = FMULDrr renamable $d0, renamable $d2
  Ready @44c
  TopQ.A TopLatency SU(44) 25c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 45 
  TopQ.A RemainingLatency 0 + 45c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(45) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(45) renamable $d0 = FADDDrr renamable $d3, renamable $d0
  Ready @45c
  TopQ.A TopLatency SU(45) 26c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 
  TopQ.A RemainingLatency 0 + 46c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
Pick Top ORDER     
Scheduling SU(46) STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.rho_aux)
  Ready @46c
  TopQ.A TopLatency SU(46) 27c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 
Pick Top ONLY1     
Scheduling SU(47) STRWui renamable $w8, $sp, 3 :: (store 4 into %ir.i)
  Ready @47c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $x10, renamable $x12 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(1):   renamable $x9 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(3):   renamable $x11, renamable $x13 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(4):   renamable $x8 = MADDXrrr renamable $x8, renamable $x21, $xzr
SU(5):   renamable $x10 = MADDXrrr renamable $x10, renamable $x22, $xzr
SU(6):   renamable $x12 = ADDXrs renamable $x12, renamable $x12, 2
SU(7):   $x14 = ADDXrs renamable $x28, renamable $x8, 0
SU(8):   renamable $x12 = UBFMXri renamable $x12, 61, 60
SU(9):   $x15 = ADDXrs renamable $x19, renamable $x8, 0
SU(10):   $x8 = ADDXrs renamable $x23, renamable $x8, 0
SU(11):   $x14 = ADDXrs renamable $x14, renamable $x10, 0
SU(12):   $x15 = ADDXrs renamable $x15, renamable $x10, 0
SU(13):   $x8 = ADDXrs renamable $x8, renamable $x10, 0
SU(14):   $x10 = ADDXrs renamable $x14, renamable $x12, 0
SU(15):   renamable $x14 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
SU(16):   $x15 = ADDXrs renamable $x15, renamable $x12, 0
SU(17):   $x8 = ADDXrs renamable $x8, renamable $x12, 0
SU(18):   renamable $x12 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
SU(19):   renamable $x14 = UBFMXri renamable $x14, 61, 60
SU(20):   renamable $d0 = LDRDroX renamable $x10, renamable $x14, 0, 0 :: (load 8 from %ir.arrayidx113)
SU(21):   renamable $d1 = LDRDroX renamable $x15, renamable $x14, 0, 0 :: (load 8 from %ir.arrayidx121)
SU(22):   renamable $x9 = MADDXrrr renamable $x9, renamable $x21, $xzr
SU(23):   renamable $x10 = MADDXrrr renamable $x11, renamable $x22, $xzr
SU(24):   renamable $x11 = ADDXrs renamable $x13, renamable $x13, 2
SU(25):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(26):   STRDroX renamable $d0, renamable $x8, renamable $x14, 0, 0 :: (store 8 into %ir.arrayidx130)
SU(27):   $x8 = ADDXrs renamable $x19, renamable $x9, 0
SU(28):   $x13 = ADDXrs renamable $x23, renamable $x9, 0
SU(29):   $x9 = ADDXrs renamable $x27, renamable $x9, 0
SU(30):   $x8 = ADDXrs renamable $x8, renamable $x10, 0
SU(31):   $x13 = ADDXrs renamable $x13, renamable $x10, 0
SU(34):   renamable $x11 = UBFMXri renamable $x11, 61, 60
SU(32):   $x9 = ADDXrs renamable $x9, renamable $x10, 0
SU(33):   renamable $x10 = UBFMXri renamable $x12, 61, 60
SU(35):   $x8 = ADDXrs renamable $x8, renamable $x11, 0
SU(36):   $x13 = ADDXrs renamable $x13, renamable $x11, 0
SU(37):   renamable $d0 = LDRDroX renamable $x8, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx138)
SU(38):   renamable $d1 = LDRDroX renamable $x13, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx146)
SU(39):   $x8 = ADDXrs renamable $x9, renamable $x11, 0
SU(40):   renamable $d2 = LDRDroX renamable $x8, renamable $x10, 0, 0 :: (load 8 from %ir.arrayidx155)
SU(41):   renamable $d3 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.rho_aux)
SU(42):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(43):   renamable $w8 = nsw ADDWri renamable $w12, 1, 0, implicit $x12
SU(44):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
SU(45):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
SU(46):   STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.rho_aux)
SU(47):   STRWui renamable $w8, $sp, 3 :: (store 4 into %ir.i)

Fixup kills for %bb.30
********** MI Scheduling **********
diffusion:%bb.31 for.inc161
  From: renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.27
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 2 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 2 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 2 :: (store 4 into %ir.j)

Fixup kills for %bb.31
********** MI Scheduling **********
diffusion:%bb.32 for.inc164
  From: renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 1 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 1 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 1 :: (store 4 into %ir.k)

Fixup kills for %bb.32
********** MI Scheduling **********
diffusion:%bb.33 for.inc167
  From: renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.23
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)

Fixup kills for %bb.33
Fixup kills for %bb.34
********** MI Scheduling **********
diffusion:%bb.35 for.cond170
  From: renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.37, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.37, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @nmor
SU(0):   renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
SU(2):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.35
********** MI Scheduling **********
diffusion:%bb.36 for.body172
  From: renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.35
 RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
    SU(6): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(14): Ord  Latency=0 Memory
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(10): Data Latency=1 Reg=$x9
    SU(5): Data Latency=1 Reg=$x9
    SU(3): Data Latency=1 Reg=$x9
    SU(2): Data Latency=1 Reg=$x9
    SU(6): Anti Latency=0
SU(2):   renamable $d0 = LDRDroX renamable $x16, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx174)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDroX renamable $x17, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx176)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(7): Data Latency=4 Reg=$d1
SU(4):   renamable $d2 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(12): Data Latency=4 Reg=$d2
    SU(13): Ord  Latency=0 Memory
SU(5):   renamable $d3 = LDRDroX renamable $x17, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx181)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(11): Data Latency=4 Reg=$d3
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(14): Data Latency=1 Reg=$w8
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d0
    SU(10): Data Latency=1 Reg=$d0
SU(8):   $x10 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x10
SU(9):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x10
  Successors:
    SU(10): Data Latency=1 Reg=$x10
SU(10):   STRDroX renamable $d0, renamable $x10, renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx179)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
    SU(7): Data Latency=1 Reg=$d0
    SU(9): Data Latency=1 Reg=$x10
  Successors:
    SU(11): Anti Latency=0
SU(11):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(10): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(5): Data Latency=4 Reg=$d3
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$d0
SU(12):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    SU(13): Data Latency=1 Reg=$d0
SU(13):   STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.rho_aux)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(14):   STRWui renamable $w8, $sp, 5 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.35
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 12
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 12
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 12
  Cand SU(8) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d2 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.rho_aux)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $x10 = ADRP target-flags(aarch64-page) @ppmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @3c
  TopQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x9 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 2 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 12
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  7 cycles 
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x16, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx174)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 12
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x17, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx176)
  Ready @6c
  TopQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 12
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d3 = LDRDroX renamable $x17, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx181)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STRWui renamable $w8, $sp, 5 :: (store 4 into %ir.im)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRDroX renamable $d0, renamable $x10, renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx179)
  Ready @11c
  TopQ.A TopLatency SU(10) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $d0 = FMULDrr renamable $d3, renamable $d0
  Ready @12c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @13c
  TopQ.A TopLatency SU(12) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.rho_aux)
  Ready @14c
  TopQ.A TopLatency SU(13) 12c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
SU(4):   renamable $d2 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.rho_aux)
SU(8):   $x10 = ADRP target-flags(aarch64-page) @ppmor
SU(9):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60
SU(2):   renamable $d0 = LDRDroX renamable $x16, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx174)
SU(3):   renamable $d1 = LDRDroX renamable $x17, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx176)
SU(5):   renamable $d3 = LDRDroX renamable $x17, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx181)
SU(6):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
SU(14):   STRWui renamable $w8, $sp, 5 :: (store 4 into %ir.im)
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(10):   STRDroX renamable $d0, renamable $x10, renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx179)
SU(11):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
SU(12):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(13):   STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.rho_aux)

Fixup kills for %bb.36
********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: renamable $d0 = LDRDui $sp, 5 :: (dereferenceable load 8 from %ir.beta)
    To: BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 5 :: (dereferenceable load 8 from %ir.beta)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   $x0 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 5 :: (dereferenceable load 8 from %ir.beta)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @pmorx
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @ppmor
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(0):   renamable $d0 = LDRDui $sp, 5 :: (dereferenceable load 8 from %ir.beta)
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @pmorx
SU(5):   $x1 = ADRP target-flags(aarch64-page) @ppmor
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
SU(6):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: renamable $d0, renamable $d1 = LDPDi $sp, 7 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
    To: BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi $sp, 7 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Data Latency=4 Reg=$d1
    SU(3): Data Latency=4 Reg=$d1
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   STPDi renamable $d0, renamable $d1, $sp, 6 :: (store 8 into %ir.rho2), (store 8 into %ir.rho1)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Anti Latency=0
SU(4):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d0
SU(5):   STRDui renamable $d0, $sp, 5 :: (store 8 into %ir.beta)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
SU(6):   $x0 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x1 = ORRXrs $xzr, $x23, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds1m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi $sp, 7 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 1 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x0 = ORRXrs $xzr, $x20, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STPDi renamable $d0, renamable $d1, $sp, 6 :: (store 8 into %ir.rho2), (store 8 into %ir.rho1)
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x1 = ORRXrs $xzr, $x23, 0
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRDui renamable $d0, $sp, 5 :: (store 8 into %ir.beta)
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi $sp, 7 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(6):   $x0 = ORRXrs $xzr, $x20, 0
SU(3):   STPDi renamable $d0, renamable $d1, $sp, 6 :: (store 8 into %ir.rho2), (store 8 into %ir.rho1)
SU(4):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
SU(7):   $x1 = ORRXrs $xzr, $x23, 0
SU(5):   STRDui renamable $d0, $sp, 5 :: (store 8 into %ir.beta)

Fixup kills for %bb.37
********** MI Scheduling **********
diffusion:%bb.38 if.end189
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.40
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.40
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.38
Fixup kills for %bb.39
********** MI Scheduling **********
diffusion:%bb.40 if.end192
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.42
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.42
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
diffusion:%bb.40 if.end192
  From: $x0 = ADRP target-flags(aarch64-page) @pmorx
    To: BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @pmorx
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x1 = ORRXrs $xzr, $x20, 0
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @pmorx
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
SU(2):   $x1 = ORRXrs $xzr, $x20, 0

Fixup kills for %bb.40
Fixup kills for %bb.41
Fixup kills for %bb.42
********** MI Scheduling **********
diffusion:%bb.43 for.cond196
  From: renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.45, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.45, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.43
********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.43
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.43
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x8
    SU(3): Data Latency=4 Reg=$x8
SU(1):   $x9 = ADRP target-flags(aarch64-page) @size_e
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(3): Data Latency=1 Reg=$x9
SU(3):   renamable $w2 = LDRWroX renamable $x9, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx205)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$x9
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Anti Latency=0
SU(4):   renamable $x8 = MADDXrrr renamable $x8, renamable $x21, $xzr
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$x8
    SU(5): Data Latency=1 Reg=$x8
SU(5):   $x0 = ADDXrs renamable $x23, renamable $x8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x1 = ADDXrs renamable $x20, renamable $x8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @laplacian, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x9 = ADRP target-flags(aarch64-page) @size_e
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w2 = LDRWroX renamable $x9, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx205)
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x8 = MADDXrrr renamable $x8, renamable $x21, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x0 = ADDXrs renamable $x23, renamable $x8, 0
  Ready @6c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x1 = ADDXrs renamable $x20, renamable $x8, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   $x9 = ADRP target-flags(aarch64-page) @size_e
SU(2):   renamable $x9 = ADDXri $x9, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
SU(3):   renamable $w2 = LDRWroX renamable $x9, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx205)
SU(4):   renamable $x8 = MADDXrrr renamable $x8, renamable $x21, $xzr
SU(5):   $x0 = ADDXrs renamable $x23, renamable $x8, 0
SU(6):   $x1 = ADDXrs renamable $x20, renamable $x8, 0

Fixup kills for %bb.44
********** MI Scheduling **********
diffusion:%bb.45 for.end208
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.47
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.47
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.45
Fixup kills for %bb.46
********** MI Scheduling **********
diffusion:%bb.47 if.end211
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.49
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.49
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
diffusion:%bb.47 if.end211
  From: $x0 = ADRP target-flags(aarch64-page) @ppmor
    To: BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ORRXrs $xzr, $x23, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transfb, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ppmor
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x1 = ORRXrs $xzr, $x23, 0
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ppmor
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
SU(2):   $x1 = ORRXrs $xzr, $x23, 0

Fixup kills for %bb.47
Fixup kills for %bb.48
Fixup kills for %bb.49
********** MI Scheduling **********
diffusion:%bb.50 for.cond215
  From: renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.57, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.57, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.50
Fixup kills for %bb.51
********** MI Scheduling **********
diffusion:%bb.52 for.cond218
  From: renamable $w9 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
    To: Bcc 12, %bb.56, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w9 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(1):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   dead $wzr = SUBSWri renamable $w9, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.56, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w9 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w9, 5, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   renamable $w9 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
SU(1):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(2):   dead $wzr = SUBSWri renamable $w9, 5, 0, implicit-def $nzcv

Fixup kills for %bb.52
********** MI Scheduling **********
diffusion:%bb.53 for.body220
  From: renamable $x9 = LDRSWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
    To: CBNZW killed renamable $w8, %bb.55
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x9 = LDRSWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=$x9
SU(1):   renamable $x8 = MADDXrrr renamable $x8, renamable $x25, renamable $x24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1 :: (load 4 from %ir.arrayidx224)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
    SU(0): Data Latency=4 Reg=$x9
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBNZW killed renamable $w8, %bb.55
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x9 = LDRSWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x8 = MADDXrrr renamable $x8, renamable $x25, renamable $x24
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1 :: (load 4 from %ir.arrayidx224)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   renamable $x9 = LDRSWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
SU(1):   renamable $x8 = MADDXrrr renamable $x8, renamable $x25, renamable $x24
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x9, 0, 1 :: (load 4 from %ir.arrayidx224)

Fixup kills for %bb.53
********** MI Scheduling **********
diffusion:%bb.54 if.then226
  From: renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $w1 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   renamable $x0 = MADDXrrr renamable $x8, renamable $x21, renamable $x23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @facev, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $d0 = FMOVD0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = MADDXrrr renamable $x8, renamable $x21, renamable $x23
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w1 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
SU(3):   $d0 = FMOVD0
SU(2):   renamable $x0 = MADDXrrr renamable $x8, renamable $x21, renamable $x23

Fixup kills for %bb.54
********** MI Scheduling **********
diffusion:%bb.55 for.inc231
  From: renamable $w8 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
    To: B %bb.52
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 4 :: (store 4 into %ir.iside)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.52
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 4 :: (store 4 into %ir.iside)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   renamable $w8 = LDRWui $sp, 4 :: (dereferenceable load 4 from %ir.iside)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 4 :: (store 4 into %ir.iside)

Fixup kills for %bb.55
********** MI Scheduling **********
diffusion:%bb.56 for.inc234
  From: renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8
    To: B %bb.50
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
SU(1):   STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)

Fixup kills for %bb.56
********** MI Scheduling **********
diffusion:%bb.57 for.end236
  From: STRXui $xzr, $sp, 4 :: (store 8 into %ir.cona)
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRXui $xzr, $sp, 4 :: (store 8 into %ir.cona)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRXui $xzr, $sp, 4 :: (store 8 into %ir.cona)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   STRXui $xzr, $sp, 4 :: (store 8 into %ir.cona)
SU(1):   STRWui $wzr, $sp, 6 :: (store 4 into %ir.ie)

Fixup kills for %bb.57
********** MI Scheduling **********
diffusion:%bb.58 for.cond237
  From: renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.69, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w9
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.69, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w9 = LDRWui renamable $x26, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.58
Fixup kills for %bb.59
********** MI Scheduling **********
diffusion:%bb.60 for.cond240
  From: renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.68, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.68, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.60
Fixup kills for %bb.61
********** MI Scheduling **********
diffusion:%bb.62 for.cond243
  From: renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.67, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.67, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.62
Fixup kills for %bb.63
********** MI Scheduling **********
diffusion:%bb.64 for.cond246
  From: renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.66, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.66, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   renamable $w8 = LDRWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.64
********** MI Scheduling **********
diffusion:%bb.65 for.body248
  From: renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.64
 RegionInstrs: 27
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x9, renamable $x10 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x9
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x10
SU(2):   renamable $x11 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(22): Data Latency=4 Reg=$w11
    SU(22): Data Latency=0 Reg=$x11
    SU(12): Data Latency=4 Reg=$x11
    SU(26): Ord  Latency=0 Memory
SU(3):   renamable $x8 = MADDXrrr renamable $x8, renamable $x21, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
    SU(7): Data Latency=1 Reg=$x8
    SU(6): Data Latency=1 Reg=$x8
SU(4):   renamable $x9 = MADDXrrr renamable $x9, renamable $x22, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x9
  Successors:
    SU(12): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x9
    SU(10): Data Latency=1 Reg=$x9
    SU(9): Data Latency=1 Reg=$x9
SU(5):   renamable $x10 = ADDXrs renamable $x10, renamable $x10, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x10
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x10
SU(6):   $x12 = ADDXrs renamable $x20, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x12
    SU(8): Anti Latency=0
SU(7):   $x13 = ADDXrs renamable $x23, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x13
    SU(8): Anti Latency=0
SU(8):   $x8 = ADDXrs renamable $x27, renamable $x8, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
SU(9):   $x12 = ADDXrs renamable $x12, renamable $x9, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x12
    SU(4): Data Latency=1 Reg=$x9
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x12
    SU(12): Anti Latency=0
SU(10):   $x13 = ADDXrs renamable $x13, renamable $x9, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x13
    SU(4): Data Latency=1 Reg=$x9
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x13
    SU(12): Anti Latency=0
SU(11):   $x8 = ADDXrs renamable $x8, renamable $x9, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x9
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x8
    SU(12): Anti Latency=0
SU(12):   renamable $x9 = UBFMXri renamable $x11, 61, 60
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(11): Anti Latency=0
    SU(10): Anti Latency=0
    SU(9): Anti Latency=0
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x11
  Successors:
    SU(19): Data Latency=1 Reg=$x9
    SU(17): Data Latency=1 Reg=$x9
    SU(16): Data Latency=1 Reg=$x9
SU(13):   renamable $x10 = UBFMXri renamable $x10, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x10
  Successors:
    SU(18): Data Latency=1 Reg=$x10
    SU(15): Data Latency=1 Reg=$x10
    SU(14): Data Latency=1 Reg=$x10
SU(14):   $x12 = ADDXrs renamable $x12, renamable $x10, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(9): Data Latency=1 Reg=$x12
    SU(9): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x10
  Successors:
    SU(16): Data Latency=1 Reg=$x12
SU(15):   $x13 = ADDXrs renamable $x13, renamable $x10, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(10): Data Latency=1 Reg=$x13
    SU(10): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x10
  Successors:
    SU(17): Data Latency=1 Reg=$x13
SU(16):   renamable $d0 = LDRDroX renamable $x12, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx256)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(14): Data Latency=1 Reg=$x12
    SU(12): Data Latency=1 Reg=$x9
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=4 Reg=$d0
SU(17):   renamable $d1 = LDRDroX renamable $x13, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx264)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(15): Data Latency=1 Reg=$x13
    SU(12): Data Latency=1 Reg=$x9
  Successors:
    SU(21): Data Latency=4 Reg=$d1
SU(18):   $x8 = ADDXrs renamable $x8, renamable $x10, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=$x8
    SU(11): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x10
  Successors:
    SU(22): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x8
SU(19):   renamable $d2 = LDRDroX renamable $x8, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx273)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(18): Data Latency=1 Reg=$x8
    SU(12): Data Latency=1 Reg=$x9
  Successors:
    SU(23): Data Latency=4 Reg=$d2
    SU(22): Anti Latency=0
SU(20):   renamable $d3 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(24): Data Latency=4 Reg=$d3
    SU(25): Ord  Latency=0 Memory
SU(21):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(17): Data Latency=4 Reg=$d1
    SU(16): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d0
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d0
SU(22):   renamable $w8 = nsw ADDWri renamable $w11, 1, 0, implicit $x11
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(19): Anti Latency=0
    SU(18): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w11
    SU(2): Data Latency=0 Reg=$x11
  Successors:
    SU(26): Data Latency=1 Reg=$w8
SU(23):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d0
    SU(19): Data Latency=4 Reg=$d2
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$d0
SU(24):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d0
    SU(20): Data Latency=4 Reg=$d3
  Successors:
    SU(25): Data Latency=1 Reg=$d0
SU(25):   STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(24): Data Latency=1 Reg=$d0
    SU(20): Ord  Latency=0 Memory
SU(26):   STRWui renamable $w8, $sp, 3 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=$w8
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 20 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 20 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(20) ORDER                              
  Cand SU(1) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9, renamable $x10 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 4 5 
Queue TopQ.A: 20 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 15
  Cand SU(20) ORDER                              
  Cand SU(2) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x11 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 4 5 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) renamable $d3 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = MADDXrrr renamable $x8, renamable $x21, $xzr
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 5 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x9 = MADDXrrr renamable $x9, renamable $x22, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x10 = ADDXrs renamable $x10, renamable $x10, 2
  Ready @6c
  TopQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 13 
  TopQ.A RemainingLatency 0 + 7c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x12 = ADDXrs renamable $x20, renamable $x8, 0
  Ready @7c
  TopQ.A TopLatency SU(6) 5c
  TopQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 13 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 15
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x13 = ADDXrs renamable $x23, renamable $x8, 0
  Ready @8c
  TopQ.A BotLatency SU(7) 10c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 13 10 8 
  TopQ.A RemainingLatency 0 + 9c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x8 = ADDXrs renamable $x27, renamable $x8, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 13 10 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 15
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x12 = ADDXrs renamable $x12, renamable $x9, 0
  Ready @10c
  TopQ.A TopLatency SU(9) 6c
  TopQ.A BotLatency SU(9) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 10 
  TopQ.A RemainingLatency 0 + 11c > CritPath 15
  Cand SU(11) ORDER                              
  Cand SU(13) TOP-PATH                  9 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x13 = ADDXrs renamable $x13, renamable $x9, 0
  Ready @11c
  TopQ.A BotLatency SU(10) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 15
  Cand SU(11) ORDER                              
  Cand SU(13) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x10 = UBFMXri renamable $x10, 61, 60
  Ready @12c
  TopQ.A BotLatency SU(13) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 15 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 15
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $x8 = ADDXrs renamable $x8, renamable $x9, 0
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 18 12 
  TopQ.A RemainingLatency 0 + 14c > CritPath 15
  Cand SU(14) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x9 = UBFMXri renamable $x11, 61, 60
  Ready @14c
  TopQ.A BotLatency SU(12) 8c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 18 
  TopQ.A RemainingLatency 0 + 15c > CritPath 15
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) $x12 = ADDXrs renamable $x12, renamable $x10, 0
  Ready @15c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 8c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 15 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 15
  Cand SU(18) ORDER                              
  Cand SU(15) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) $x13 = ADDXrs renamable $x13, renamable $x10, 0
  Ready @16c
  TopQ.A BotLatency SU(15) 8c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 16 17 
  TopQ.A RemainingLatency 0 + 17c > CritPath 15
  Cand SU(18) ORDER                              
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $d0 = LDRDroX renamable $x12, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx256)
  Ready @17c
  TopQ.A TopLatency SU(16) 8c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 17 
  TopQ.A RemainingLatency 0 + 18c > CritPath 15
  Cand SU(18) ORDER                              
  Cand SU(17) ORDER                              
Pick Top ORDER     
Scheduling SU(17) renamable $d1 = LDRDroX renamable $x13, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx264)
  Ready @18c
  TopQ.A BotLatency SU(17) 7c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 21 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) $x8 = ADDXrs renamable $x8, renamable $x10, 0
  Ready @19c
  TopQ.A BotLatency SU(18) 7c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 21 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) renamable $d2 = LDRDroX renamable $x8, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx273)
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 21 
Queue TopQ.A: 22 
Pick Top ONLY1     
Scheduling SU(22) renamable $w8 = nsw ADDWri renamable $w11, 1, 0, implicit $x11
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 21 
  TopQ.A RemainingLatency 0 + 22c > CritPath 15
  Cand SU(26) ORDER                              
  Cand SU(21) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @22c
  TopQ.A TopLatency SU(21) 12c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 23 
Queue TopQ.A: 26 
Pick Top ONLY1     
Scheduling SU(26) STRWui renamable $w8, $sp, 3 :: (store 4 into %ir.i)
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 
Pick Top ONLY1     
Scheduling SU(23) renamable $d0 = FMULDrr renamable $d0, renamable $d2
  Ready @24c
  TopQ.A TopLatency SU(23) 13c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 24 
Pick Top ONLY1     
Scheduling SU(24) renamable $d0 = FADDDrr renamable $d3, renamable $d0
  Ready @25c
  TopQ.A TopLatency SU(24) 14c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 25 
Pick Top ONLY1     
Scheduling SU(25) STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
  Ready @26c
  TopQ.A TopLatency SU(25) 15c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   renamable $x8 = LDRSWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $x9, renamable $x10 = LDPSWi $sp, 1 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(2):   renamable $x11 = LDRSWui $sp, 3 :: (dereferenceable load 4 from %ir.i)
SU(20):   renamable $d3 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
SU(3):   renamable $x8 = MADDXrrr renamable $x8, renamable $x21, $xzr
SU(4):   renamable $x9 = MADDXrrr renamable $x9, renamable $x22, $xzr
SU(5):   renamable $x10 = ADDXrs renamable $x10, renamable $x10, 2
SU(6):   $x12 = ADDXrs renamable $x20, renamable $x8, 0
SU(7):   $x13 = ADDXrs renamable $x23, renamable $x8, 0
SU(8):   $x8 = ADDXrs renamable $x27, renamable $x8, 0
SU(9):   $x12 = ADDXrs renamable $x12, renamable $x9, 0
SU(10):   $x13 = ADDXrs renamable $x13, renamable $x9, 0
SU(13):   renamable $x10 = UBFMXri renamable $x10, 61, 60
SU(11):   $x8 = ADDXrs renamable $x8, renamable $x9, 0
SU(12):   renamable $x9 = UBFMXri renamable $x11, 61, 60
SU(14):   $x12 = ADDXrs renamable $x12, renamable $x10, 0
SU(15):   $x13 = ADDXrs renamable $x13, renamable $x10, 0
SU(16):   renamable $d0 = LDRDroX renamable $x12, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx256)
SU(17):   renamable $d1 = LDRDroX renamable $x13, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx264)
SU(18):   $x8 = ADDXrs renamable $x8, renamable $x10, 0
SU(19):   renamable $d2 = LDRDroX renamable $x8, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx273)
SU(22):   renamable $w8 = nsw ADDWri renamable $w11, 1, 0, implicit $x11
SU(21):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(26):   STRWui renamable $w8, $sp, 3 :: (store 4 into %ir.i)
SU(23):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
SU(24):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
SU(25):   STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)

Fixup kills for %bb.65
********** MI Scheduling **********
diffusion:%bb.66 for.inc279
  From: renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.62
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 2 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.62
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 2 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   renamable $w8 = LDRWui $sp, 2 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 2 :: (store 4 into %ir.j)

Fixup kills for %bb.66
********** MI Scheduling **********
diffusion:%bb.67 for.inc282
  From: renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.60
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 1 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.60
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 1 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   renamable $w8 = LDRWui $sp, 1 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 1 :: (store 4 into %ir.k)

Fixup kills for %bb.67
********** MI Scheduling **********
diffusion:%bb.68 for.inc285
  From: renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.58
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.58
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   renamable $w8 = LDRWui $sp, 6 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 6 :: (store 4 into %ir.ie)

Fixup kills for %bb.68
Fixup kills for %bb.69
********** MI Scheduling **********
diffusion:%bb.70 for.cond288
  From: renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.72, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x9
SU(2):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(3): Data Latency=4 Reg=$w9
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w9
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.72, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.70 ***
SU(1):   renamable $x9 = ADRP target-flags(aarch64-page) @nmor
SU(0):   renamable $w8 = LDRWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
SU(2):   renamable $w9 = LDRWui renamable $x9, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w9, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.70
********** MI Scheduling **********
diffusion:%bb.71 for.body290
  From: renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.70
 RegionInstrs: 20
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=4 Reg=$w8
    SU(13): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(19): Ord  Latency=0 Memory
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(15): Data Latency=1 Reg=$x9
    SU(12): Data Latency=1 Reg=$x9
    SU(8): Data Latency=1 Reg=$x9
    SU(5): Data Latency=1 Reg=$x9
    SU(13): Anti Latency=0
SU(2):   $x10 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x10
SU(3):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 11
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x10
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x10
    SU(4): Data Latency=1 Reg=$x10
SU(4):   $x11 = ORRXrs $xzr, $x10, 0
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=$x10
  Successors:
    SU(15): Data Latency=1 Reg=$x11
    SU(6): Anti Latency=0
SU(5):   renamable $d0 = LDRDroX $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx292)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(1): Data Latency=1 Reg=$x9
    SU(3): Data Latency=1 Reg=$x10
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$d0
    SU(6): Anti Latency=0
    SU(15): Ord  Latency=0 Memory
SU(6):   $x10 = ADRP target-flags(aarch64-page) @tmmor
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x10
SU(7):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x10
  Successors:
    SU(10): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x10
SU(8):   renamable $d1 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx294)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(7): Data Latency=1 Reg=$x10
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(14): Data Latency=4 Reg=$d1
    SU(10): Anti Latency=0
SU(9):   renamable $d2 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(17): Data Latency=4 Reg=$d2
    SU(18): Ord  Latency=0 Memory
SU(10):   $x10 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x10
SU(11):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
  Successors:
    SU(12): Data Latency=1 Reg=$x10
SU(12):   renamable $d3 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx299)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(11): Data Latency=1 Reg=$x10
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(16): Data Latency=4 Reg=$d3
SU(13):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(19): Data Latency=1 Reg=$w8
SU(14):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 3
  Predecessors:
    SU(8): Data Latency=4 Reg=$d1
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d0
    SU(15): Data Latency=1 Reg=$d0
SU(15):   STRDroX renamable $d0, renamable $x11, renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx297)
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(14): Data Latency=1 Reg=$d0
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=$x11
    SU(1): Data Latency=1 Reg=$x9
  Successors:
    SU(16): Anti Latency=0
SU(16):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(15): Anti Latency=0
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$d0
    SU(12): Data Latency=4 Reg=$d3
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d0
SU(17):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d0
    SU(9): Data Latency=4 Reg=$d2
  Successors:
    SU(18): Data Latency=1 Reg=$d0
SU(18):   STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=$d0
    SU(9): Ord  Latency=0 Memory
SU(19):   STRWui renamable $w8, $sp, 5 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.70
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 9 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x10 = ADRP target-flags(aarch64-page) @ppmor
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 9 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(3) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 9 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(4) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x11 = ORRXrs $xzr, $x10, 0
  Ready @3c
  TopQ.A TopLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(1) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x9 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 13 
  TopQ.A RemainingLatency 0 + 5c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(5) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = LDRDroX $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx292)
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 13 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(6) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x10 = ADRP target-flags(aarch64-page) @tmmor
  Ready @6c
  TopQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 13 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  Ready @7c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 13 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(8) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx294)
  Ready @8c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 
Queue TopQ.A: 9 13 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(10) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x10 = ADRP target-flags(aarch64-page) @pmorx
  Ready @9c
  TopQ.A BotLatency SU(10) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 
Queue TopQ.A: 9 13 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(11) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @10c
  TopQ.A TopLatency SU(11) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 
Queue TopQ.A: 9 13 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(12) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $d3 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx299)
  Ready @11c
  TopQ.A TopLatency SU(12) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 13 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 15
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d2 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 15
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @13c
  TopQ.A TopLatency SU(14) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 15
  Cand SU(13) ORDER                              
  Cand SU(15) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) STRDroX renamable $d0, renamable $x11, renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx297)
  Ready @14c
  TopQ.A TopLatency SU(15) 12c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 16 
  TopQ.A RemainingLatency 0 + 15c > CritPath 15
  Cand SU(13) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) renamable $d0 = FMULDrr renamable $d3, renamable $d0
  Ready @15c
  TopQ.A TopLatency SU(16) 13c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 17 
  TopQ.A RemainingLatency 0 + 16c > CritPath 15
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 19 
  TopQ.A RemainingLatency 0 + 17c > CritPath 15
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @17c
  TopQ.A TopLatency SU(17) 14c
  TopQ.A BotLatency SU(17) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 15
  Cand SU(19) ORDER                              
  Cand SU(18) ORDER                              
Pick Top ORDER     
Scheduling SU(18) STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
  Ready @18c
  TopQ.A TopLatency SU(18) 15c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRWui renamable $w8, $sp, 5 :: (store 4 into %ir.im)
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   renamable $x8 = LDRSWui $sp, 5 :: (dereferenceable load 4 from %ir.im)
SU(2):   $x10 = ADRP target-flags(aarch64-page) @ppmor
SU(3):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
SU(4):   $x11 = ORRXrs $xzr, $x10, 0
SU(1):   renamable $x9 = UBFMXri renamable $x8, 61, 60
SU(5):   renamable $d0 = LDRDroX $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx292)
SU(6):   $x10 = ADRP target-flags(aarch64-page) @tmmor
SU(7):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
SU(8):   renamable $d1 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx294)
SU(10):   $x10 = ADRP target-flags(aarch64-page) @pmorx
SU(11):   renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
SU(12):   renamable $d3 = LDRDroX renamable $x10, renamable $x9, 0, 0 :: (load 8 from %ir.arrayidx299)
SU(9):   renamable $d2 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
SU(14):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(15):   STRDroX renamable $d0, renamable $x11, renamable $x9, 0, 0 :: (store 8 into %ir.arrayidx297)
SU(16):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
SU(13):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
SU(17):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(18):   STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
SU(19):   STRWui renamable $w8, $sp, 5 :: (store 4 into %ir.im)

Fixup kills for %bb.71
********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
    To: B %bb.20
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.iter)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
    To: BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $d0 = FNEGDr renamable $d0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x0 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x1 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x1
SU(7):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 1 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @rmor
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x1 = ADRP target-flags(aarch64-page) @ppmor
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $d0 = FNEGDr renamable $d0
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @6c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @7c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(4):   $x0 = ADRP target-flags(aarch64-page) @rmor
SU(6):   $x1 = ADRP target-flags(aarch64-page) @ppmor
SU(3):   renamable $d0 = FNEGDr renamable $d0
SU(5):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(7):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
    To: BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   renamable $d0 = FNEGDr renamable $d0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ORRXrs $xzr, $x23, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 1 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x0 = ORRXrs $xzr, $x19, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $d0 = FNEGDr renamable $d0
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x1 = ORRXrs $xzr, $x23, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(4):   $x0 = ORRXrs $xzr, $x19, 0
SU(3):   renamable $d0 = FNEGDr renamable $d0
SU(5):   $x1 = ORRXrs $xzr, $x23, 0

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
    To: BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(3):   $x0 = ADRP target-flags(aarch64-page) @umor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @umor
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @pmorx
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(0):   renamable $d0 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @umor
SU(5):   $x1 = ADRP target-flags(aarch64-page) @pmorx
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
SU(6):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
    To: BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
SU(1):   renamable $d1 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$d1
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(4):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d0
SU(5):   STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
    SU(1): Ord  Latency=0 Memory
SU(6):   $x0 = ADRP target-flags(aarch64-page) @t
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x1 = ORRXrs $xzr, $x20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds2m1, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 1 2 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 6 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @t
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 7 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ORRXrs $xzr, $x20, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)
  Ready @8c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.rho1)
SU(1):   renamable $d1 = LDRDui $sp, 4 :: (dereferenceable load 8 from %ir.cona)
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(3):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(6):   $x0 = ADRP target-flags(aarch64-page) @t
SU(4):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
SU(8):   $x1 = ORRXrs $xzr, $x20, 0
SU(5):   STRDui renamable $d0, $sp, 4 :: (store 8 into %ir.cona)

Fixup kills for %bb.72
********** MI Scheduling **********
diffusion:%bb.73 for.end311
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.75
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.75
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.73
Fixup kills for %bb.74
********** MI Scheduling **********
diffusion:%bb.75 if.end314
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.77
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.77
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
diffusion:%bb.75 if.end314
  From: $x0 = ADRP target-flags(aarch64-page) @umor
    To: BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @umor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @t
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @umor
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @t
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @umor
SU(2):   $x1 = ADRP target-flags(aarch64-page) @t
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0

Fixup kills for %bb.75
Fixup kills for %bb.76
********** MI Scheduling **********
diffusion:%bb.77 if.end317
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.79
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.79
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.77 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.77
Fixup kills for %bb.78
********** MI Scheduling **********
diffusion:%bb.79 if.end320
  From: $fp, $lr = frame-destroy LDPXi $sp, 20 :: (load 8 from %stack.14), (load 8 from %stack.13)
    To: $sp = frame-destroy ADDXri $sp, 176, 0
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 20 :: (load 8 from %stack.14), (load 8 from %stack.13)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 18 :: (load 8 from %stack.16), (load 8 from %stack.15)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x22, $x21 = frame-destroy LDPXi $sp, 16 :: (load 8 from %stack.18), (load 8 from %stack.17)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(3):   $x24, $x23 = frame-destroy LDPXi $sp, 14 :: (load 8 from %stack.20), (load 8 from %stack.19)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(4):   $x26, $x25 = frame-destroy LDPXi $sp, 12 :: (load 8 from %stack.22), (load 8 from %stack.21)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(5):   $x28, $x27 = frame-destroy LDPXi $sp, 10 :: (load 8 from %stack.24), (load 8 from %stack.23)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 176, 0
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 20 :: (load 8 from %stack.14), (load 8 from %stack.13)
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 18 :: (load 8 from %stack.16), (load 8 from %stack.15)
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x22, $x21 = frame-destroy LDPXi $sp, 16 :: (load 8 from %stack.18), (load 8 from %stack.17)
  Ready @2c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x24, $x23 = frame-destroy LDPXi $sp, 14 :: (load 8 from %stack.20), (load 8 from %stack.19)
  Ready @3c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x26, $x25 = frame-destroy LDPXi $sp, 12 :: (load 8 from %stack.22), (load 8 from %stack.21)
  Ready @4c
  TopQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x28, $x27 = frame-destroy LDPXi $sp, 10 :: (load 8 from %stack.24), (load 8 from %stack.23)
  Ready @5c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.79 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 20 :: (load 8 from %stack.14), (load 8 from %stack.13)
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 18 :: (load 8 from %stack.16), (load 8 from %stack.15)
SU(2):   $x22, $x21 = frame-destroy LDPXi $sp, 16 :: (load 8 from %stack.18), (load 8 from %stack.17)
SU(3):   $x24, $x23 = frame-destroy LDPXi $sp, 14 :: (load 8 from %stack.20), (load 8 from %stack.19)
SU(4):   $x26, $x25 = frame-destroy LDPXi $sp, 12 :: (load 8 from %stack.22), (load 8 from %stack.21)
SU(5):   $x28, $x27 = frame-destroy LDPXi $sp, 10 :: (load 8 from %stack.24), (load 8 from %stack.23)

Fixup kills for %bb.79
Before MISched:
# Machine code for function laplacian: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=1000, align=16, at location [SP]
  fi#9: size=1000, align=16, at location [SP]
Constant Pool:
  cp#0: 5.000000e-03, align=8
Function Live Ins: $x0 in %0, $x1 in %1, $w2 in %2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x0, $x1, $w2
  %2:gpr32 = COPY $w2
  %1:gpr64 = COPY $x1
  %0:gpr64 = COPY $x0
  STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
  STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
  STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
  %3:gpr64common = ADRP target-flags(aarch64-page) @dtime
  %4:fpr64 = LDRDui %3:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  %5:fpr64 = FMOVDi 112
  %6:fpr64 = FDIVDrr %5:fpr64, %4:fpr64
  STRDui %6:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %7:gpr64common = ADDXri %stack.8.tm1, 0, 0
  $x0 = ADDXri %stack.8.tm1, 0, 0
  $w1 = MOVi32imm 125
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  undef %205.sub_32:gpr64 = MOVi32imm 200
  undef %218.sub_32:gpr64 = MOVi32imm 40
  %220:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

bb.1.for.cond:
; predecessors: %bb.0, %bb.11
  successors: %bb.2(0x7c000000), %bb.12(0x04000000); %bb.2(96.88%), %bb.12(3.12%)

  %11:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.12, implicit killed $nzcv
  B %bb.2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)

bb.3.for.cond1:
; predecessors: %bb.2, %bb.10
  successors: %bb.4(0x7c000000), %bb.11(0x04000000); %bb.4(96.88%), %bb.11(3.12%)

  %189:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %189:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.11, implicit killed $nzcv
  B %bb.4

bb.4.for.body3:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

bb.5.for.cond4:
; predecessors: %bb.4, %bb.9
  successors: %bb.6(0x7c000000), %bb.10(0x04000000); %bb.6(96.88%), %bb.10(3.12%)

  %194:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %194:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.10, implicit killed $nzcv
  B %bb.6

bb.6.for.body6:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

bb.7.for.cond7:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %199:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %199:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.9, implicit killed $nzcv
  B %bb.8

bb.8.for.body9:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %203:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %206:gpr64 = MADDXrrr %203:gpr64, %205:gpr64, $xzr
  %208:gpr64 = ADDXrr %7:gpr64common, %206:gpr64
  %209:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %210:gpr64 = ADDXrs %209:gpr64, %209:gpr64, 2
  %211:gpr64 = UBFMXri %210:gpr64, 61, 60
  %212:gpr64common = ADDXrr %208:gpr64, %211:gpr64
  %213:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %214:gpr64 = UBFMXri %213:gpr64, 61, 60
  %215:fpr64 = LDRDroX %212:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
  %216:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %221:gpr64common = MADDXrrr %216:gpr64, %218:gpr64, %220:gpr64
  %222:fpr64 = LDRDroX %221:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
  %223:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  %224:gpr64 = ADDXrr %223:gpr64, %206:gpr64
  %225:gpr64common = ADDXrr %224:gpr64, %211:gpr64
  %226:fpr64 = LDRDroX %225:gpr64common, %216:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
  %227:fpr64 = FMULDrr %222:fpr64, %226:fpr64
  %228:fpr64 = FADDDrr %215:fpr64, %227:fpr64
  STRDroX %228:fpr64, %212:gpr64common, %214:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
  %229:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %230:gpr32common = nsw ADDWri %229:gpr32common, 1, 0
  STRWui %230:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  B %bb.7

bb.9.for.inc30:
; predecessors: %bb.7
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %201:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %202:gpr32common = nsw ADDWri %201:gpr32common, 1, 0
  STRWui %202:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  B %bb.5

bb.10.for.inc33:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %196:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %197:gpr32common = nsw ADDWri %196:gpr32common, 1, 0
  STRWui %197:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  B %bb.3

bb.11.for.inc36:
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %191:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
  STRWui %192:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  B %bb.1

bb.12.for.end38:
; predecessors: %bb.1
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %13:gpr64common = ADDXri %stack.9.tm2, 0, 0
  $x0 = ADDXri %stack.9.tm2, 0, 0
  $w1 = MOVi32imm 125
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  undef %162.sub_32:gpr64 = MOVi32imm 200
  undef %177.sub_32:gpr64 = MOVi32imm 40

bb.13.for.cond40:
; predecessors: %bb.12, %bb.23
  successors: %bb.14(0x7c000000), %bb.24(0x04000000); %bb.14(96.88%), %bb.24(3.12%)

  %17:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.24, implicit killed $nzcv
  B %bb.14

bb.14.for.body42:
; predecessors: %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)

bb.15.for.cond43:
; predecessors: %bb.14, %bb.22
  successors: %bb.16(0x7c000000), %bb.23(0x04000000); %bb.16(96.88%), %bb.23(3.12%)

  %146:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.23, implicit killed $nzcv
  B %bb.16

bb.16.for.body45:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

bb.17.for.cond46:
; predecessors: %bb.16, %bb.21
  successors: %bb.18(0x7c000000), %bb.22(0x04000000); %bb.18(96.88%), %bb.22(3.12%)

  %151:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.22, implicit killed $nzcv
  B %bb.18

bb.18.for.body48:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

bb.19.for.cond49:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

  %156:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %156:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.21, implicit killed $nzcv
  B %bb.20

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %160:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %163:gpr64 = MADDXrrr %160:gpr64, %162:gpr64, $xzr
  %165:gpr64 = ADDXrr %13:gpr64common, %163:gpr64
  %166:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
  %168:gpr64 = UBFMXri %167:gpr64, 61, 60
  %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
  %170:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %171:gpr64 = UBFMXri %170:gpr64, 61, 60
  %172:fpr64 = LDRDroX %169:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
  %173:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  %174:gpr64 = ADDXrr %173:gpr64, %163:gpr64
  %175:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %179:gpr64common = MADDXrrr %175:gpr64, %177:gpr64, %174:gpr64
  %180:fpr64 = LDRDroX %179:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
  %182:gpr64common = ADDXrr %220:gpr64, %168:gpr64
  %183:fpr64 = LDRDroX %182:gpr64common, %175:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
  %184:fpr64 = FMULDrr %180:fpr64, %183:fpr64
  %185:fpr64 = FADDDrr %172:fpr64, %184:fpr64
  STRDroX %185:fpr64, %169:gpr64common, %171:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
  %186:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %187:gpr32common = nsw ADDWri %186:gpr32common, 1, 0
  STRWui %187:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  B %bb.19

bb.21.for.inc79:
; predecessors: %bb.19
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %158:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0
  STRWui %159:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  B %bb.17

bb.22.for.inc82:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %153:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
  STRWui %154:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  B %bb.15

bb.23.for.inc85:
; predecessors: %bb.15
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %148:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
  STRWui %149:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  B %bb.13

bb.24.for.end87:
; predecessors: %bb.13
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %19:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %19:gpr64
  $w1 = MOVi32imm 125
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  undef %119.sub_32:gpr64 = MOVi32imm 200
  undef %136.sub_32:gpr64 = MOVi32imm 40

bb.25.for.cond88:
; predecessors: %bb.24, %bb.35
  successors: %bb.26(0x7c000000), %bb.36(0x04000000); %bb.26(96.88%), %bb.36(3.12%)

  %23:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %23:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.36, implicit killed $nzcv
  B %bb.26

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)

bb.27.for.cond91:
; predecessors: %bb.26, %bb.34
  successors: %bb.28(0x7c000000), %bb.35(0x04000000); %bb.28(96.88%), %bb.35(3.12%)

  %102:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri %102:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.35, implicit killed $nzcv
  B %bb.28

bb.28.for.body93:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

bb.29.for.cond94:
; predecessors: %bb.28, %bb.33
  successors: %bb.30(0x7c000000), %bb.34(0x04000000); %bb.30(96.88%), %bb.34(3.12%)

  %107:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %107:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.34, implicit killed $nzcv
  B %bb.30

bb.30.for.body96:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

bb.31.for.cond97:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  %112:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %112:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit killed $nzcv
  B %bb.32

bb.32.for.body99:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %116:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  %117:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %121:gpr64 = MADDXrrr %117:gpr64, %119:gpr64, %116:gpr64
  %122:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %123:gpr64 = ADDXrs %122:gpr64, %122:gpr64, 2
  %124:gpr64 = UBFMXri %123:gpr64, 61, 60
  %125:gpr64common = ADDXrr %121:gpr64, %124:gpr64
  %126:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %127:gpr64 = UBFMXri %126:gpr64, 61, 60
  %128:fpr64 = LDRDroX %125:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
  %129:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  %130:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %132:gpr64 = MADDXrrr %130:gpr64, %119:gpr64, %129:gpr64
  %133:gpr64common = ADDXrr %132:gpr64, %124:gpr64
  %134:fpr64 = LDRDroX %133:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
  %139:gpr64common = MADDXrrr %117:gpr64, %136:gpr64, %220:gpr64
  %140:fpr64 = LDRDroX %139:gpr64common, %130:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
  %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
  %142:fpr64 = FADDDrr %128:fpr64, %141:fpr64
  STRDroX %142:fpr64, %125:gpr64common, %127:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
  %143:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
  STRWui %144:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  B %bb.31

bb.33.for.inc127:
; predecessors: %bb.31
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %114:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0
  STRWui %115:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  B %bb.29

bb.34.for.inc130:
; predecessors: %bb.29
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %109:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %110:gpr32common = nsw ADDWri %109:gpr32common, 1, 0
  STRWui %110:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  B %bb.27

bb.35.for.inc133:
; predecessors: %bb.27
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %104:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %105:gpr32common = nsw ADDWri %104:gpr32common, 1, 0
  STRWui %105:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  B %bb.25

bb.36.for.end135:
; predecessors: %bb.25
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  undef %40.sub_32:gpr64 = MOVi32imm 200
  %42:gpr64common = ADDXri %stack.8.tm1, 0, 0
  undef %53.sub_32:gpr64 = MOVi32imm 1000
  %55:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
  %61:gpr64common = ADDXri %stack.9.tm2, 0, 0
  %65:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
  %76:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
  %83:gpr64common = ADRP target-flags(aarch64-page) %const.0
  %84:fpr64 = LDRDui %83:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %86:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s

bb.37.for.cond136:
; predecessors: %bb.36, %bb.44
  successors: %bb.38(0x7c000000), %bb.45(0x04000000); %bb.38(96.88%), %bb.45(3.12%)

  %26:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %26:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.45, implicit killed $nzcv
  B %bb.38

bb.38.for.body138:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

bb.39.for.cond139:
; predecessors: %bb.38, %bb.43
  successors: %bb.40(0x7c000000), %bb.44(0x04000000); %bb.40(96.88%), %bb.44(3.12%)

  %29:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %29:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit killed $nzcv
  B %bb.40

bb.40.for.body141:
; predecessors: %bb.39
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

bb.41.for.cond142:
; predecessors: %bb.40, %bb.42
  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)

  %34:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %34:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.43, implicit killed $nzcv
  B %bb.42

bb.42.for.body144:
; predecessors: %bb.41
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  %38:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %41:gpr64 = MADDXrrr %38:gpr64, %40:gpr64, $xzr
  %43:gpr64 = ADDXrr %42:gpr64common, %41:gpr64
  %44:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %45:gpr64 = ADDXrs %44:gpr64, %44:gpr64, 2
  %46:gpr64 = UBFMXri %45:gpr64, 61, 60
  %47:gpr64common = ADDXrr %43:gpr64, %46:gpr64
  %48:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %49:gpr64 = UBFMXri %48:gpr64, 61, 60
  %50:fpr64 = LDRDroX %47:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
  %51:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
  %54:gpr64 = MADDXrrr %51:gpr64, %53:gpr64, $xzr
  %56:gpr64 = ADDXrr %55:gpr64, %54:gpr64
  %57:gpr64 = ADDXrr %56:gpr64, %41:gpr64
  %58:gpr64common = ADDXrr %57:gpr64, %46:gpr64
  %59:fpr64 = LDRDroX %58:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
  %60:fpr64 = FMULDrr %50:fpr64, %59:fpr64
  %62:gpr64 = ADDXrr %61:gpr64common, %41:gpr64
  %63:gpr64common = ADDXrr %62:gpr64, %46:gpr64
  %64:fpr64 = LDRDroX %63:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
  %66:gpr64 = ADDXrr %65:gpr64, %54:gpr64
  %67:gpr64 = ADDXrr %66:gpr64, %41:gpr64
  %68:gpr64common = ADDXrr %67:gpr64, %46:gpr64
  %69:fpr64 = LDRDroX %68:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
  %70:fpr64 = FMULDrr %64:fpr64, %69:fpr64
  %71:fpr64 = FADDDrr %60:fpr64, %70:fpr64
  %72:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  %73:gpr64 = ADDXrr %72:gpr64, %41:gpr64
  %74:gpr64common = ADDXrr %73:gpr64, %46:gpr64
  %75:fpr64 = LDRDroX %74:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
  %77:gpr64 = ADDXrr %76:gpr64, %54:gpr64
  %78:gpr64 = ADDXrr %77:gpr64, %41:gpr64
  %79:gpr64common = ADDXrr %78:gpr64, %46:gpr64
  %80:fpr64 = LDRDroX %79:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
  %81:fpr64 = FMULDrr %75:fpr64, %80:fpr64
  %82:fpr64 = FADDDrr %71:fpr64, %81:fpr64
  %85:fpr64 = FMULDrr %82:fpr64, %84:fpr64
  %87:gpr64 = ADDXrr %86:gpr64, %54:gpr64
  %88:gpr64 = ADDXrr %87:gpr64, %41:gpr64
  %89:gpr64common = ADDXrr %88:gpr64, %46:gpr64
  %90:fpr64 = LDRDroX %89:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  %91:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
  %92:fpr64 = FMULDrr %90:fpr64, %91:fpr64
  %93:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  %94:gpr64 = ADDXrr %93:gpr64, %41:gpr64
  %95:gpr64common = ADDXrr %94:gpr64, %46:gpr64
  %96:fpr64 = LDRDroX %95:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
  %97:fpr64 = FMULDrr %92:fpr64, %96:fpr64
  %98:fpr64 = FADDDrr %85:fpr64, %97:fpr64
  STRDroX %98:fpr64, %74:gpr64common, %49:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
  %99:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0
  STRWui %100:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  B %bb.41

bb.43.for.inc219:
; predecessors: %bb.41
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %36:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %37:gpr32common = nsw ADDWri %36:gpr32common, 1, 0
  STRWui %37:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  B %bb.39

bb.44.for.inc222:
; predecessors: %bb.39
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  %31:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %32:gpr32common = nsw ADDWri %31:gpr32common, 1, 0
  STRWui %32:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  B %bb.37

bb.45.for.end224:
; predecessors: %bb.37

  RET_ReallyLR

# End machine code for function laplacian.

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %205.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   undef %218.sub_32:gpr64 = MOVi32imm 40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %220:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %220:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) undef %218.sub_32:gpr64 = MOVi32imm 40
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %205.sub_32:gpr64 = MOVi32imm 200
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
SU(1):   undef %205.sub_32:gpr64 = MOVi32imm 200
SU(2):   undef %218.sub_32:gpr64 = MOVi32imm 40
SU(3):   %220:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: %7:gpr64common = ADDXri %stack.8.tm1, 0, 0
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %7:gpr64common = ADDXri %stack.8.tm1, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $x0 = ADDXri %stack.8.tm1, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $w1 = MOVi32imm 125
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %7:gpr64common = ADDXri %stack.8.tm1, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = MOVi32imm 125
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $d0 = FMOVD0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = ADDXri %stack.8.tm1, 0, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   $x0 = ADDXri %stack.8.tm1, 0, 0
SU(3):   $d0 = FMOVD0
SU(2):   $w1 = MOVi32imm 125
SU(0):   %7:gpr64common = ADDXri %stack.8.tm1, 0, 0

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: %2:gpr32 = COPY $w2
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %2:gpr32 = COPY $w2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(1):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(2):   %0:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%2
  Single Issue       : false;
SU(6):   %3:gpr64common = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Data Latency=1 Reg=%3
  Single Issue       : false;
SU(7):   %4:fpr64 = LDRDui %3:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=%3
  Successors:
    SU(9): Data Latency=4 Reg=%4
  Single Issue       : false;
SU(8):   %5:fpr64 = FMOVDi 112
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(9):   %6:fpr64 = FDIVDrr %5:fpr64, %4:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%4
    SU(8): Data Latency=1 Reg=%5
  Successors:
    SU(10): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(10):   STRDui %6:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%6
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 8 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %2:gpr32 = COPY $w2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 8 1 2 6 5 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 8 5 2 6 4 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %0:gpr64 = COPY $x0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 8 5 4 6 3 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) STRDui %6:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)
  Ready @0c
  BotQ.A TopLatency SU(10) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 9 
Queue TopQ.P: 
Queue TopQ.A: 8 5 4 6 3 
BotQ.A RemLatency SU(9) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %6:fpr64 = FDIVDrr %5:fpr64, %4:fpr64
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 3 5 4 8 
Queue TopQ.P: 
Queue TopQ.A: 8 5 4 6 3 
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %5:fpr64 = FMOVDi 112
  Ready @2c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 3 5 4 
Queue TopQ.P: 
Queue TopQ.A: 3 5 4 6 
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 3 6 4 
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 
Queue TopQ.P: 
Queue TopQ.A: 3 6 
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %4:fpr64 = LDRDui %3:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 3 6 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %3:gpr64common = ADRP target-flags(aarch64-page) @dtime
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %2:gpr32 = COPY $w2
SU(1):   %1:gpr64 = COPY $x1
SU(2):   %0:gpr64 = COPY $x0
SU(3):   STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
SU(6):   %3:gpr64common = ADRP target-flags(aarch64-page) @dtime
SU(7):   %4:fpr64 = LDRDui %3:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(4):   STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
SU(5):   STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
SU(8):   %5:fpr64 = FMOVDi 112
SU(9):   %6:fpr64 = FDIVDrr %5:fpr64, %4:fpr64
SU(10):   STRDui %6:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)

********** MI Scheduling **********
laplacian:%bb.1 for.cond
  From: %11:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.12, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %11:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%11
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.12, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %11:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %11:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.3 for.cond1
  From: %189:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.11, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %189:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%189
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %189:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%189
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.11, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %189:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %189:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %189:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %189:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.5 for.cond4
  From: %194:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.10, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %194:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%194
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %194:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%194
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.10, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %194:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %194:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %194:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %194:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.7 for.cond7
  From: %199:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.9, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %199:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%199
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %199:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%199
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.9, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %199:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %199:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %199:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %199:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.8 for.body9
  From: %203:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.7
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=10
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
Live In: %218 %220 %7 %205 
Live Out: %218 %220 %7 %205 
Live Thru: GPR32=4
  LiveReg: %218
  UpdateRegP: SU(11) %221:gpr64common = MADDXrrr %216:gpr64, %218:gpr64, %220:gpr64
              to GPR32 1
  LiveReg: %220
  UpdateRegP: SU(11) %221:gpr64common = MADDXrrr %216:gpr64, %218:gpr64, %220:gpr64
              to 
  LiveReg: %7
  UpdateRegP: SU(2) %208:gpr64 = ADDXrr %7:gpr64common, %206:gpr64
              to 
  LiveReg: %205
  UpdateRegP: SU(1) %206:gpr64 = MADDXrrr %203:gpr64, %205:gpr64, $xzr
              to 
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
Cluster ld/st SU(7) - SU(20)
  Copy Succ SU(8)
  Copy Succ SU(22)
SU(0):   %203:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%203
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %206:gpr64 = MADDXrrr %203:gpr64, %205:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%203
  Successors:
    SU(14): Data Latency=1 Reg=%206
    SU(2): Data Latency=1 Reg=%206
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %208:gpr64 = ADDXrr %7:gpr64common, %206:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%206
  Successors:
    SU(6): Data Latency=1 Reg=%208
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %209:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Data Latency=4 Reg=%209
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %210:gpr64 = ADDXrs %209:gpr64, %209:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(3): Data Latency=4 Reg=%209
  Successors:
    SU(5): Data Latency=1 Reg=%210
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %211:gpr64 = UBFMXri %210:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(4): Data Latency=1 Reg=%210
  Successors:
    SU(15): Data Latency=1 Reg=%211
    SU(6): Data Latency=1 Reg=%211
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %212:gpr64common = ADDXrr %208:gpr64, %211:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%211
    SU(2): Data Latency=1 Reg=%208
  Successors:
    SU(19): Data Latency=1 Reg=%212
    SU(9): Data Latency=1 Reg=%212
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %213:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(8): Data Latency=4 Reg=%213
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %214:gpr64 = UBFMXri %213:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(7): Data Latency=4 Reg=%213
    SU(20): Ord  Latency=0 Artificial
  Successors:
    SU(19): Data Latency=1 Reg=%214
    SU(12): Data Latency=1 Reg=%214
    SU(9): Data Latency=1 Reg=%214
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %215:fpr64 = LDRDroX %212:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=%212
    SU(8): Data Latency=1 Reg=%214
  Successors:
    SU(18): Data Latency=4 Reg=%215
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(10):   %216:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(16): Data Latency=4 Reg=%216
    SU(11): Data Latency=4 Reg=%216
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %221:gpr64common = MADDXrrr %216:gpr64, %218:gpr64, %220:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(10): Data Latency=4 Reg=%216
  Successors:
    SU(12): Data Latency=1 Reg=%221
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %222:fpr64 = LDRDroX %221:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(11): Data Latency=1 Reg=%221
    SU(8): Data Latency=1 Reg=%214
  Successors:
    SU(17): Data Latency=4 Reg=%222
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(13):   %223:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(14): Data Latency=4 Reg=%223
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %224:gpr64 = ADDXrr %223:gpr64, %206:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%206
    SU(13): Data Latency=4 Reg=%223
  Successors:
    SU(15): Data Latency=1 Reg=%224
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %225:gpr64common = ADDXrr %224:gpr64, %211:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(14): Data Latency=1 Reg=%224
    SU(5): Data Latency=1 Reg=%211
  Successors:
    SU(16): Data Latency=1 Reg=%225
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %226:fpr64 = LDRDroX %225:gpr64common, %216:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(15): Data Latency=1 Reg=%225
    SU(10): Data Latency=4 Reg=%216
  Successors:
    SU(17): Data Latency=4 Reg=%226
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(17):   %227:fpr64 = FMULDrr %222:fpr64, %226:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(16): Data Latency=4 Reg=%226
    SU(12): Data Latency=4 Reg=%222
  Successors:
    SU(18): Data Latency=1 Reg=%227
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   %228:fpr64 = FADDDrr %215:fpr64, %227:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(17): Data Latency=1 Reg=%227
    SU(9): Data Latency=4 Reg=%215
  Successors:
    SU(19): Data Latency=1 Reg=%228
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(19):   STRDroX %228:fpr64, %212:gpr64common, %214:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%228
    SU(16): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%214
    SU(6): Data Latency=1 Reg=%212
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(20):   %229:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(7): Ord  Latency=0 Cluster
  Successors:
    SU(21): Data Latency=4 Reg=%229
    SU(22): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %230:gpr32common = nsw ADDWri %229:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(20): Data Latency=4 Reg=%229
  Successors:
    SU(22): Data Latency=1 Reg=%230
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   STRWui %230:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%230
    SU(20): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
Picking from Bot:
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) STRWui %230:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=5
  LiveReg: %230
  UpdateRegP: SU(22) STRWui %230:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(19) 13c
  BotQ.A RemainingLatency 13 + 1c > CritPath 13
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) STRDroX %228:fpr64, %212:gpr64common, %214:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %228
  UpdateRegP: SU(19) STRDroX %228:fpr64, %212:gpr64common, %214:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
              to GPR32 2
  LiveReg: %212
  UpdateRegP: SU(9) %215:fpr64 = LDRDroX %212:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %228:fpr64, %212:gpr64common, %214:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
              to GPR32 1
  LiveReg: %214
  UpdateRegP: SU(9) %215:fpr64 = LDRDroX %212:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(12) %222:fpr64 = LDRDroX %221:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %228:fpr64, %212:gpr64common, %214:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
              to 
  Ready @1c
  BotQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(18) 12c
  BotQ.A RemainingLatency 12 + 2c > CritPath 13
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(18) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %228:fpr64 = FADDDrr %215:fpr64, %227:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %215
  UpdateRegP: SU(18) %228:fpr64 = FADDDrr %215:fpr64, %227:fpr64
              to 
  LiveReg: %227
  UpdateRegP: SU(18) %228:fpr64 = FADDDrr %215:fpr64, %227:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 21 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(17) 11c
BotQ.A RemLatency SU(9) 7c
  BotQ.A RemainingLatency 11 + 3c > CritPath 13
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(17) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) %227:fpr64 = FMULDrr %222:fpr64, %226:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %222
  UpdateRegP: SU(17) %227:fpr64 = FMULDrr %222:fpr64, %226:fpr64
              to 
  LiveReg: %226
  UpdateRegP: SU(17) %227:fpr64 = FMULDrr %222:fpr64, %226:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 16 12 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %230:gpr32common = nsw ADDWri %229:gpr32common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %229
  UpdateRegP: SU(21) %230:gpr32common = nsw ADDWri %229:gpr32common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 12 16 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %215:fpr64 = LDRDroX %212:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 16 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(16) 7c
  BotQ.A RemainingLatency 7 + 7c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(16) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %226:fpr64 = LDRDroX %225:gpr64common, %216:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %225
  UpdateRegP: SU(16) %226:fpr64 = LDRDroX %225:gpr64common, %216:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  LiveReg: %216
  UpdateRegP: SU(11) %221:gpr64common = MADDXrrr %216:gpr64, %218:gpr64, %220:gpr64
              to GPR32 -1
  UpdateRegP: SU(16) %226:fpr64 = LDRDroX %225:gpr64common, %216:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(16) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(6) 6c
  BotQ.A RemainingLatency 6 + 8c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) %225:gpr64common = ADDXrr %224:gpr64, %211:gpr64
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %224
  UpdateRegP: SU(15) %225:gpr64common = ADDXrr %224:gpr64, %211:gpr64
              to 
  LiveReg: %211
  UpdateRegP: SU(6) %212:gpr64common = ADDXrr %208:gpr64, %211:gpr64
              to 
  UpdateRegP: SU(15) %225:gpr64common = ADDXrr %224:gpr64, %211:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(15) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(6) 6c
  BotQ.A RemainingLatency 6 + 9c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %212:gpr64common = ADDXrr %208:gpr64, %211:gpr64
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %208
  UpdateRegP: SU(6) %212:gpr64common = ADDXrr %208:gpr64, %211:gpr64
              to GPR32 -1
  Ready @9c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 12 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(14) 5c
  BotQ.A RemainingLatency 5 + 10c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(5) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %211:gpr64 = UBFMXri %210:gpr64, 61, 60
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %210
  UpdateRegP: SU(5) %211:gpr64 = UBFMXri %210:gpr64, 61, 60
              to GPR32 -1
  Ready @10c
  BotQ.A BotLatency SU(5) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 12 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(14) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(2) %208:gpr64 = ADDXrr %7:gpr64common, %206:gpr64
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %206
  UpdateRegP: SU(2) %208:gpr64 = ADDXrr %7:gpr64common, %206:gpr64
              to GPR32 -1
  UpdateRegP: SU(14) %224:gpr64 = ADDXrr %223:gpr64, %206:gpr64
              to 
  Ready @11c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 12 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(14) 5c
  BotQ.A RemainingLatency 5 + 12c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(14) %224:gpr64 = ADDXrr %223:gpr64, %206:gpr64
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %223
  UpdateRegP: SU(14) %224:gpr64 = ADDXrr %223:gpr64, %206:gpr64
              to GPR32 -1
  Ready @12c
  BotQ.A TopLatency SU(14) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 4 12 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(12) 5c
  BotQ.A RemainingLatency 5 + 13c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %210:gpr64 = ADDXrs %209:gpr64, %209:gpr64, 2
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %209
  UpdateRegP: SU(4) %210:gpr64 = ADDXrs %209:gpr64, %209:gpr64, 2
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(4) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 3 
Queue BotQ.A: 1 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
  BotQ.A RemainingLatency 0 + 14c > CritPath 13
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(1) %206:gpr64 = MADDXrrr %203:gpr64, %205:gpr64, $xzr
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %203
  UpdateRegP: SU(1) %206:gpr64 = MADDXrrr %203:gpr64, %205:gpr64, $xzr
              to GPR32 -1
  Ready @14c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 14
  Executed: 15c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 3 0 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %222:fpr64 = LDRDroX %221:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
Bottom Pressure:
GPR32=11
  LiveReg: %221
  UpdateRegP: SU(12) %222:fpr64 = LDRDroX %221:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @15c
  BotQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 15
  Executed: 16c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 11 8 13 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
  BotQ.A RemainingLatency 0 + 16c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %221:gpr64common = MADDXrrr %216:gpr64, %218:gpr64, %220:gpr64
Bottom Pressure:
GPR32=10
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 16
  Executed: 17c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 10 
Queue BotQ.A: 13 8 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
  BotQ.A RemainingLatency 0 + 17c > CritPath 13
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(8) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %214:gpr64 = UBFMXri %213:gpr64, 61, 60
Bottom Pressure:
GPR32=10
  LiveReg: %213
  UpdateRegP: SU(8) %214:gpr64 = UBFMXri %213:gpr64, 61, 60
              to GPR32 -1
  Ready @17c
  BotQ.A TopLatency SU(8) 4c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 17
  Executed: 18c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 10 
Queue BotQ.A: 13 3 20 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
  BotQ.A RemainingLatency 0 + 18c > CritPath 13
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %229:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=9
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 18
  Executed: 19c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 10 
Queue BotQ.A: 13 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 
  BotQ.A RemainingLatency 0 + 19c > CritPath 13
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %223:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GPR32=8
  Ready @19c
  BotQ.A BotLatency SU(13) 12c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 19
  Executed: 20c
  Critical: 19c, 19 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 0 3 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 
  BotQ.A RemainingLatency 0 + 20c > CritPath 13
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %216:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=7
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 20
  Executed: 21c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 
  BotQ.A RemainingLatency 0 + 21c > CritPath 13
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) %213:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=6
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 21
  Executed: 22c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 22c > CritPath 13
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %209:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=5
  Ready @22c
  BotQ.A BotLatency SU(3) 13c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 22
  Executed: 23c
  Critical: 22c, 22 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %203:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
Bottom Pressure:
GPR32=4
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 23
  Executed: 24c
  Critical: 23c, 23 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %203:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(3):   %209:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(7):   %213:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(10):   %216:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(13):   %223:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
SU(20):   %229:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(8):   %214:gpr64 = UBFMXri %213:gpr64, 61, 60
SU(11):   %221:gpr64common = MADDXrrr %216:gpr64, %218:gpr64, %220:gpr64
SU(12):   %222:fpr64 = LDRDroX %221:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
SU(1):   %206:gpr64 = MADDXrrr %203:gpr64, %205:gpr64, $xzr
SU(4):   %210:gpr64 = ADDXrs %209:gpr64, %209:gpr64, 2
SU(14):   %224:gpr64 = ADDXrr %223:gpr64, %206:gpr64
SU(2):   %208:gpr64 = ADDXrr %7:gpr64common, %206:gpr64
SU(5):   %211:gpr64 = UBFMXri %210:gpr64, 61, 60
SU(6):   %212:gpr64common = ADDXrr %208:gpr64, %211:gpr64
SU(15):   %225:gpr64common = ADDXrr %224:gpr64, %211:gpr64
SU(16):   %226:fpr64 = LDRDroX %225:gpr64common, %216:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
SU(9):   %215:fpr64 = LDRDroX %212:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
SU(21):   %230:gpr32common = nsw ADDWri %229:gpr32common, 1, 0
SU(17):   %227:fpr64 = FMULDrr %222:fpr64, %226:fpr64
SU(18):   %228:fpr64 = FADDDrr %215:fpr64, %227:fpr64
SU(19):   STRDroX %228:fpr64, %212:gpr64common, %214:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
SU(22):   STRWui %230:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
laplacian:%bb.9 for.inc30
  From: %201:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %201:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%201
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %202:gpr32common = nsw ADDWri %201:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%201
  Successors:
    SU(2): Data Latency=1 Reg=%202
  Single Issue       : false;
SU(2):   STRWui %202:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%202
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %202:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %202:gpr32common = nsw ADDWri %201:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %201:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %201:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %202:gpr32common = nsw ADDWri %201:gpr32common, 1, 0
SU(2):   STRWui %202:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
laplacian:%bb.10 for.inc33
  From: %196:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.3
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %196:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%196
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %197:gpr32common = nsw ADDWri %196:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%196
  Successors:
    SU(2): Data Latency=1 Reg=%197
  Single Issue       : false;
SU(2):   STRWui %197:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%197
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.3
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %197:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %197:gpr32common = nsw ADDWri %196:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %196:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %196:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %197:gpr32common = nsw ADDWri %196:gpr32common, 1, 0
SU(2):   STRWui %197:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
laplacian:%bb.11 for.inc36
  From: %191:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.1
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %191:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%191
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%191
  Successors:
    SU(2): Data Latency=1 Reg=%192
  Single Issue       : false;
SU(2):   STRWui %192:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%192
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %192:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %191:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %191:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
SU(2):   STRWui %192:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.12 for.end38
  From: STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %162.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   undef %177.sub_32:gpr64 = MOVi32imm 40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) undef %177.sub_32:gpr64 = MOVi32imm 40
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %162.sub_32:gpr64 = MOVi32imm 200
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
SU(1):   undef %162.sub_32:gpr64 = MOVi32imm 200
SU(2):   undef %177.sub_32:gpr64 = MOVi32imm 40

********** MI Scheduling **********
laplacian:%bb.12 for.end38
  From: %13:gpr64common = ADDXri %stack.9.tm2, 0, 0
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %13:gpr64common = ADDXri %stack.9.tm2, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $x0 = ADDXri %stack.9.tm2, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $w1 = MOVi32imm 125
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %13:gpr64common = ADDXri %stack.9.tm2, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = MOVi32imm 125
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $d0 = FMOVD0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = ADDXri %stack.9.tm2, 0, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(1):   $x0 = ADDXri %stack.9.tm2, 0, 0
SU(3):   $d0 = FMOVD0
SU(2):   $w1 = MOVi32imm 125
SU(0):   %13:gpr64common = ADDXri %stack.9.tm2, 0, 0

********** MI Scheduling **********
laplacian:%bb.13 for.cond40
  From: %17:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.24, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %17:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%17
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.24, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %17:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %17:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.15 for.cond43
  From: %146:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.23, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %146:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%146
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%146
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.23, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %146:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %146:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.17 for.cond46
  From: %151:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.22, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %151:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%151
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%151
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.22, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %151:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %151:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.19 for.cond49
  From: %156:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.21, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %156:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%156
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %156:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%156
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.21, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %156:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %156:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %156:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %156:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.20 for.body51
  From: %160:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.19
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=9
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
Live In: %220 %177 %13 %162 
Live Out: %220 %177 %13 %162 
Live Thru: GPR32=4
  LiveReg: %220
  UpdateRegP: SU(15) %182:gpr64common = ADDXrr %220:gpr64, %168:gpr64
              to 
  LiveReg: %177
  UpdateRegP: SU(13) %179:gpr64common = MADDXrrr %175:gpr64, %177:gpr64, %174:gpr64
              to GPR32 1
  LiveReg: %13
  UpdateRegP: SU(2) %165:gpr64 = ADDXrr %13:gpr64common, %163:gpr64
              to 
  LiveReg: %162
  UpdateRegP: SU(1) %163:gpr64 = MADDXrrr %160:gpr64, %162:gpr64, $xzr
              to 
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
Cluster ld/st SU(7) - SU(20)
  Copy Succ SU(8)
  Copy Succ SU(22)
SU(0):   %160:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%160
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %163:gpr64 = MADDXrrr %160:gpr64, %162:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%160
  Successors:
    SU(11): Data Latency=1 Reg=%163
    SU(2): Data Latency=1 Reg=%163
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %165:gpr64 = ADDXrr %13:gpr64common, %163:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%163
  Successors:
    SU(6): Data Latency=1 Reg=%165
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %166:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Data Latency=4 Reg=%166
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(3): Data Latency=4 Reg=%166
  Successors:
    SU(5): Data Latency=1 Reg=%167
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %168:gpr64 = UBFMXri %167:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(4): Data Latency=1 Reg=%167
  Successors:
    SU(15): Data Latency=1 Reg=%168
    SU(6): Data Latency=1 Reg=%168
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%168
    SU(2): Data Latency=1 Reg=%165
  Successors:
    SU(19): Data Latency=1 Reg=%169
    SU(9): Data Latency=1 Reg=%169
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %170:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(8): Data Latency=4 Reg=%170
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %171:gpr64 = UBFMXri %170:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(7): Data Latency=4 Reg=%170
    SU(20): Ord  Latency=0 Artificial
  Successors:
    SU(19): Data Latency=1 Reg=%171
    SU(14): Data Latency=1 Reg=%171
    SU(9): Data Latency=1 Reg=%171
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %172:fpr64 = LDRDroX %169:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=%169
    SU(8): Data Latency=1 Reg=%171
  Successors:
    SU(18): Data Latency=4 Reg=%172
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(10):   %173:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(11): Data Latency=4 Reg=%173
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %174:gpr64 = ADDXrr %173:gpr64, %163:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%163
    SU(10): Data Latency=4 Reg=%173
  Successors:
    SU(13): Data Latency=1 Reg=%174
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %175:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(16): Data Latency=4 Reg=%175
    SU(13): Data Latency=4 Reg=%175
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   %179:gpr64common = MADDXrrr %175:gpr64, %177:gpr64, %174:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=%174
    SU(12): Data Latency=4 Reg=%175
  Successors:
    SU(14): Data Latency=1 Reg=%179
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %180:fpr64 = LDRDroX %179:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(13): Data Latency=1 Reg=%179
    SU(8): Data Latency=1 Reg=%171
  Successors:
    SU(17): Data Latency=4 Reg=%180
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(15):   %182:gpr64common = ADDXrr %220:gpr64, %168:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(5): Data Latency=1 Reg=%168
  Successors:
    SU(16): Data Latency=1 Reg=%182
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %183:fpr64 = LDRDroX %182:gpr64common, %175:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(15): Data Latency=1 Reg=%182
    SU(12): Data Latency=4 Reg=%175
  Successors:
    SU(17): Data Latency=4 Reg=%183
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(17):   %184:fpr64 = FMULDrr %180:fpr64, %183:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(16): Data Latency=4 Reg=%183
    SU(14): Data Latency=4 Reg=%180
  Successors:
    SU(18): Data Latency=1 Reg=%184
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   %185:fpr64 = FADDDrr %172:fpr64, %184:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(17): Data Latency=1 Reg=%184
    SU(9): Data Latency=4 Reg=%172
  Successors:
    SU(19): Data Latency=1 Reg=%185
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(19):   STRDroX %185:fpr64, %169:gpr64common, %171:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%185
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%171
    SU(6): Data Latency=1 Reg=%169
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(20):   %186:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(7): Ord  Latency=0 Cluster
  Successors:
    SU(21): Data Latency=4 Reg=%186
    SU(22): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %187:gpr32common = nsw ADDWri %186:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(20): Data Latency=4 Reg=%186
  Successors:
    SU(22): Data Latency=1 Reg=%187
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   STRWui %187:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%187
    SU(20): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
Picking from Bot:
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) STRWui %187:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=5
  LiveReg: %187
  UpdateRegP: SU(22) STRWui %187:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(19) 13c
  BotQ.A RemainingLatency 13 + 1c > CritPath 13
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) STRDroX %185:fpr64, %169:gpr64common, %171:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %185
  UpdateRegP: SU(19) STRDroX %185:fpr64, %169:gpr64common, %171:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
              to GPR32 2
  LiveReg: %169
  UpdateRegP: SU(9) %172:fpr64 = LDRDroX %169:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %185:fpr64, %169:gpr64common, %171:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
              to GPR32 1
  LiveReg: %171
  UpdateRegP: SU(9) %172:fpr64 = LDRDroX %169:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(14) %180:fpr64 = LDRDroX %179:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %185:fpr64, %169:gpr64common, %171:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
              to 
  Ready @1c
  BotQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(18) 12c
  BotQ.A RemainingLatency 12 + 2c > CritPath 13
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(18) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %185:fpr64 = FADDDrr %172:fpr64, %184:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %172
  UpdateRegP: SU(18) %185:fpr64 = FADDDrr %172:fpr64, %184:fpr64
              to 
  LiveReg: %184
  UpdateRegP: SU(18) %185:fpr64 = FADDDrr %172:fpr64, %184:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 21 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(17) 11c
BotQ.A RemLatency SU(9) 7c
  BotQ.A RemainingLatency 11 + 3c > CritPath 13
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(17) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) %184:fpr64 = FMULDrr %180:fpr64, %183:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %180
  UpdateRegP: SU(17) %184:fpr64 = FMULDrr %180:fpr64, %183:fpr64
              to 
  LiveReg: %183
  UpdateRegP: SU(17) %184:fpr64 = FMULDrr %180:fpr64, %183:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 16 14 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %187:gpr32common = nsw ADDWri %186:gpr32common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %186
  UpdateRegP: SU(21) %187:gpr32common = nsw ADDWri %186:gpr32common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 14 16 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %172:fpr64 = LDRDroX %169:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 16 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 7c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(14) BOT-PATH                  7 cycles 
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %183:fpr64 = LDRDroX %182:gpr64common, %175:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %182
  UpdateRegP: SU(16) %183:fpr64 = LDRDroX %182:gpr64common, %175:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  LiveReg: %175
  UpdateRegP: SU(13) %179:gpr64common = MADDXrrr %175:gpr64, %177:gpr64, %174:gpr64
              to 
  UpdateRegP: SU(16) %183:fpr64 = LDRDroX %182:gpr64common, %175:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(16) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 8c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(14) BOT-PATH                  7 cycles 
  Cand SU(15) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %182:gpr64common = ADDXrr %220:gpr64, %168:gpr64
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %168
  UpdateRegP: SU(6) %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
              to 
  UpdateRegP: SU(15) %182:gpr64common = ADDXrr %220:gpr64, %168:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(15) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 9c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %165
  UpdateRegP: SU(6) %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
              to GPR32 -1
  Ready @9c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 10c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(5) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %168:gpr64 = UBFMXri %167:gpr64, 61, 60
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %167
  UpdateRegP: SU(5) %168:gpr64 = UBFMXri %167:gpr64, 61, 60
              to GPR32 -1
  Ready @10c
  BotQ.A BotLatency SU(5) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 11c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(2) %165:gpr64 = ADDXrr %13:gpr64common, %163:gpr64
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %163
  UpdateRegP: SU(2) %165:gpr64 = ADDXrr %13:gpr64common, %163:gpr64
              to GPR32 -1
  UpdateRegP: SU(11) %174:gpr64 = ADDXrr %173:gpr64, %163:gpr64
              to 
  Ready @11c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 12c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %166
  UpdateRegP: SU(4) %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(4) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) %180:fpr64 = LDRDroX %179:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
Bottom Pressure:
GPR32=10
  LiveReg: %179
  UpdateRegP: SU(14) %180:fpr64 = LDRDroX %179:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @13c
  BotQ.A TopLatency SU(14) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 13 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 14c > CritPath 13
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %179:gpr64common = MADDXrrr %175:gpr64, %177:gpr64, %174:gpr64
Bottom Pressure:
GPR32=10
  LiveReg: %174
  UpdateRegP: SU(13) %179:gpr64common = MADDXrrr %175:gpr64, %177:gpr64, %174:gpr64
              to GPR32 -1
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 14
  Executed: 15c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 12 
Queue BotQ.A: 8 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 15c > CritPath 13
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(11) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %174:gpr64 = ADDXrr %173:gpr64, %163:gpr64
Bottom Pressure:
GPR32=10
  LiveReg: %173
  UpdateRegP: SU(11) %174:gpr64 = ADDXrr %173:gpr64, %163:gpr64
              to GPR32 -1
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 15
  Executed: 16c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 12 
Queue BotQ.A: 8 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 16c > CritPath 13
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %171:gpr64 = UBFMXri %170:gpr64, 61, 60
Bottom Pressure:
GPR32=10
  LiveReg: %170
  UpdateRegP: SU(8) %171:gpr64 = UBFMXri %170:gpr64, 61, 60
              to GPR32 -1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 16
  Executed: 17c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 12 7 
Queue BotQ.A: 3 1 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 17c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %163:gpr64 = MADDXrrr %160:gpr64, %162:gpr64, $xzr
Bottom Pressure:
GPR32=10
  LiveReg: %160
  UpdateRegP: SU(1) %163:gpr64 = MADDXrrr %160:gpr64, %162:gpr64, $xzr
              to GPR32 -1
  Ready @17c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 17
  Executed: 18c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 0 7 
Queue BotQ.A: 3 20 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 18c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %186:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=9
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 18
  Executed: 19c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 0 
Queue BotQ.A: 3 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 
  BotQ.A RemainingLatency 0 + 19c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %175:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=8
  Ready @19c
  BotQ.A BotLatency SU(12) 11c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 19
  Executed: 20c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 
  BotQ.A RemainingLatency 0 + 20c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(7) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) %170:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=7
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 20
  Executed: 21c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 10 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 10 
  BotQ.A RemainingLatency 0 + 21c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %173:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GPR32=6
  Ready @21c
  BotQ.A BotLatency SU(10) 12c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 21
  Executed: 22c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 22c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %166:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=5
  Ready @22c
  BotQ.A BotLatency SU(3) 13c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 22
  Executed: 23c
  Critical: 22c, 22 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %160:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
Bottom Pressure:
GPR32=4
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 23
  Executed: 24c
  Critical: 23c, 23 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %160:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(3):   %166:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(10):   %173:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
SU(7):   %170:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(12):   %175:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(20):   %186:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %163:gpr64 = MADDXrrr %160:gpr64, %162:gpr64, $xzr
SU(8):   %171:gpr64 = UBFMXri %170:gpr64, 61, 60
SU(11):   %174:gpr64 = ADDXrr %173:gpr64, %163:gpr64
SU(13):   %179:gpr64common = MADDXrrr %175:gpr64, %177:gpr64, %174:gpr64
SU(14):   %180:fpr64 = LDRDroX %179:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
SU(4):   %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
SU(2):   %165:gpr64 = ADDXrr %13:gpr64common, %163:gpr64
SU(5):   %168:gpr64 = UBFMXri %167:gpr64, 61, 60
SU(6):   %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
SU(15):   %182:gpr64common = ADDXrr %220:gpr64, %168:gpr64
SU(16):   %183:fpr64 = LDRDroX %182:gpr64common, %175:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
SU(9):   %172:fpr64 = LDRDroX %169:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
SU(21):   %187:gpr32common = nsw ADDWri %186:gpr32common, 1, 0
SU(17):   %184:fpr64 = FMULDrr %180:fpr64, %183:fpr64
SU(18):   %185:fpr64 = FADDDrr %172:fpr64, %184:fpr64
SU(19):   STRDroX %185:fpr64, %169:gpr64common, %171:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
SU(22):   STRWui %187:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
laplacian:%bb.21 for.inc79
  From: %158:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %158:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%158
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%158
  Successors:
    SU(2): Data Latency=1 Reg=%159
  Single Issue       : false;
SU(2):   STRWui %159:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%159
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %159:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %158:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %158:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0
SU(2):   STRWui %159:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
laplacian:%bb.22 for.inc82
  From: %153:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.15
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %153:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%153
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%153
  Successors:
    SU(2): Data Latency=1 Reg=%154
  Single Issue       : false;
SU(2):   STRWui %154:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%154
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %154:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %153:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %153:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
SU(2):   STRWui %154:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
laplacian:%bb.23 for.inc85
  From: %148:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %148:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%148
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%148
  Successors:
    SU(2): Data Latency=1 Reg=%149
  Single Issue       : false;
SU(2):   STRWui %149:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%149
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %149:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %148:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %148:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
SU(2):   STRWui %149:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.24 for.end87
  From: STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %119.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   undef %136.sub_32:gpr64 = MOVi32imm 40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) undef %136.sub_32:gpr64 = MOVi32imm 40
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %119.sub_32:gpr64 = MOVi32imm 200
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
SU(1):   undef %119.sub_32:gpr64 = MOVi32imm 200
SU(2):   undef %136.sub_32:gpr64 = MOVi32imm 40

********** MI Scheduling **********
laplacian:%bb.24 for.end87
  From: $x0 = COPY %19:gpr64
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %19:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = MOVi32imm 125
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %19:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(1) PHYS-REG                           
Picking from Top:
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = MOVi32imm 125
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = FMOVD0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(2):   $d0 = FMOVD0
SU(1):   $w1 = MOVi32imm 125
SU(0):   $x0 = COPY %19:gpr64

********** MI Scheduling **********
laplacian:%bb.25 for.cond88
  From: %23:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.36, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %23:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%23
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %23:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%23
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.36, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %23:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %23:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %23:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %23:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.27 for.cond91
  From: %102:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.35, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %102:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%102
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.35, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %102:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %102:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %102:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri %102:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.29 for.cond94
  From: %107:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.34, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %107:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%107
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %107:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%107
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.34, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %107:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %107:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %107:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %107:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.31 for.cond97
  From: %112:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.33, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %112:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%112
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %112:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%112
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.33, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %112:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %112:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %112:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %112:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.32 for.body99
  From: %116:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
    To: B %bb.31
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=9
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
Live In: %136 %220 %119 
Live Out: %136 %220 %119 
Live Thru: GPR32=3
  LiveReg: %136
  UpdateRegP: SU(15) %139:gpr64common = MADDXrrr %117:gpr64, %136:gpr64, %220:gpr64
              to GPR32 1
  LiveReg: %220
  UpdateRegP: SU(15) %139:gpr64common = MADDXrrr %117:gpr64, %136:gpr64, %220:gpr64
              to 
  LiveReg: %119
  UpdateRegP: SU(2) %121:gpr64 = MADDXrrr %117:gpr64, %119:gpr64, %116:gpr64
              to GPR32 1
  UpdateRegP: SU(12) %132:gpr64 = MADDXrrr %130:gpr64, %119:gpr64, %129:gpr64
              to GPR32 1
Top Pressure:
GPR32=3
Bottom Pressure:
GPR32=3
Excess PSets: 
SU(0):   %116:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%116
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %117:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(15): Data Latency=4 Reg=%117
    SU(2): Data Latency=4 Reg=%117
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %121:gpr64 = MADDXrrr %117:gpr64, %119:gpr64, %116:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%117
    SU(0): Data Latency=4 Reg=%116
  Successors:
    SU(6): Data Latency=1 Reg=%121
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %122:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(4): Data Latency=4 Reg=%122
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %123:gpr64 = ADDXrs %122:gpr64, %122:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(3): Data Latency=4 Reg=%122
  Successors:
    SU(5): Data Latency=1 Reg=%123
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %124:gpr64 = UBFMXri %123:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(4): Data Latency=1 Reg=%123
  Successors:
    SU(13): Data Latency=1 Reg=%124
    SU(6): Data Latency=1 Reg=%124
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %125:gpr64common = ADDXrr %121:gpr64, %124:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%124
    SU(2): Data Latency=1 Reg=%121
  Successors:
    SU(19): Data Latency=1 Reg=%125
    SU(9): Data Latency=1 Reg=%125
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %126:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(8): Data Latency=4 Reg=%126
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %127:gpr64 = UBFMXri %126:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(7): Data Latency=4 Reg=%126
  Successors:
    SU(19): Data Latency=1 Reg=%127
    SU(14): Data Latency=1 Reg=%127
    SU(9): Data Latency=1 Reg=%127
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %128:fpr64 = LDRDroX %125:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 11
  Predecessors:
    SU(6): Data Latency=1 Reg=%125
    SU(8): Data Latency=1 Reg=%127
  Successors:
    SU(18): Data Latency=4 Reg=%128
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(10):   %129:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(12): Data Latency=4 Reg=%129
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %130:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(16): Data Latency=4 Reg=%130
    SU(12): Data Latency=4 Reg=%130
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %132:gpr64 = MADDXrrr %130:gpr64, %119:gpr64, %129:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(11): Data Latency=4 Reg=%130
    SU(10): Data Latency=4 Reg=%129
  Successors:
    SU(13): Data Latency=1 Reg=%132
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   %133:gpr64common = ADDXrr %132:gpr64, %124:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(5): Data Latency=1 Reg=%124
    SU(12): Data Latency=1 Reg=%132
  Successors:
    SU(14): Data Latency=1 Reg=%133
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %134:fpr64 = LDRDroX %133:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(13): Data Latency=1 Reg=%133
    SU(8): Data Latency=1 Reg=%127
  Successors:
    SU(17): Data Latency=4 Reg=%134
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(15):   %139:gpr64common = MADDXrrr %117:gpr64, %136:gpr64, %220:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%117
  Successors:
    SU(16): Data Latency=1 Reg=%139
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %140:fpr64 = LDRDroX %139:gpr64common, %130:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(15): Data Latency=1 Reg=%139
    SU(11): Data Latency=4 Reg=%130
  Successors:
    SU(17): Data Latency=4 Reg=%140
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(17):   %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 8
  Predecessors:
    SU(14): Data Latency=4 Reg=%134
    SU(16): Data Latency=4 Reg=%140
  Successors:
    SU(18): Data Latency=1 Reg=%141
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(18):   %142:fpr64 = FADDDrr %128:fpr64, %141:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 7
  Predecessors:
    SU(17): Data Latency=1 Reg=%141
    SU(9): Data Latency=4 Reg=%128
  Successors:
    SU(19): Data Latency=1 Reg=%142
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(19):   STRDroX %142:fpr64, %125:gpr64common, %127:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 6
  Predecessors:
    SU(18): Data Latency=1 Reg=%142
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%127
    SU(7): Ord  Latency=0 Memory
    SU(6): Data Latency=1 Reg=%125
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(20):   %143:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(19): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%143
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 1
  Predecessors:
    SU(20): Data Latency=4 Reg=%143
  Successors:
    SU(22): Data Latency=1 Reg=%144
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   STRWui %144:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%144
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 19
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) STRWui %144:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=4
  LiveReg: %144
  UpdateRegP: SU(22) STRWui %144:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
Bottom Pressure:
GPR32=4
  LiveReg: %143
  UpdateRegP: SU(21) %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) %143:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=3
  Ready @5c
  BotQ.A BotLatency SU(20) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Pick Bot ONLY1     
Scheduling SU(19) STRDroX %142:fpr64, %125:gpr64common, %127:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %142
  UpdateRegP: SU(19) STRDroX %142:fpr64, %125:gpr64common, %127:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
              to GPR32 2
  LiveReg: %125
  UpdateRegP: SU(9) %128:fpr64 = LDRDroX %125:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %142:fpr64, %125:gpr64common, %127:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
              to GPR32 1
  LiveReg: %127
  UpdateRegP: SU(9) %128:fpr64 = LDRDroX %125:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(14) %134:fpr64 = LDRDroX %133:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %142:fpr64, %125:gpr64common, %127:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
              to 
  Ready @6c
  BotQ.A BotLatency SU(19) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Pick Bot ONLY1     
Scheduling SU(18) %142:fpr64 = FADDDrr %128:fpr64, %141:fpr64
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %128
  UpdateRegP: SU(18) %142:fpr64 = FADDDrr %128:fpr64, %141:fpr64
              to 
  LiveReg: %141
  UpdateRegP: SU(18) %142:fpr64 = FADDDrr %128:fpr64, %141:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(18) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 17 
Pick Bot ONLY1     
Scheduling SU(17) %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %134
  UpdateRegP: SU(17) %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
              to 
  LiveReg: %140
  UpdateRegP: SU(17) %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @8c
  BotQ.A BotLatency SU(17) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 16 14 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %128:fpr64 = LDRDroX %125:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @11c
  BotQ.A BotLatency SU(9) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 16 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(14) 7c
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %140:fpr64 = LDRDroX %139:gpr64common, %130:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %139
  UpdateRegP: SU(16) %140:fpr64 = LDRDroX %139:gpr64common, %130:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  LiveReg: %130
  UpdateRegP: SU(12) %132:gpr64 = MADDXrrr %130:gpr64, %119:gpr64, %129:gpr64
              to 
  UpdateRegP: SU(16) %140:fpr64 = LDRDroX %139:gpr64common, %130:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @12c
  BotQ.A BotLatency SU(16) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 13c > CritPath 19
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(14) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %134:fpr64 = LDRDroX %133:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
Bottom Pressure:
GPR32=8
  LiveReg: %133
  UpdateRegP: SU(14) %134:fpr64 = LDRDroX %133:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @13c
  BotQ.A TopLatency SU(14) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 15 13 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(6) 6c
  BotQ.A RemainingLatency 6 + 14c > CritPath 19
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %133:gpr64common = ADDXrr %132:gpr64, %124:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %132
  UpdateRegP: SU(13) %133:gpr64common = ADDXrr %132:gpr64, %124:gpr64
              to 
  LiveReg: %124
  UpdateRegP: SU(6) %125:gpr64common = ADDXrr %121:gpr64, %124:gpr64
              to 
  UpdateRegP: SU(13) %133:gpr64common = ADDXrr %132:gpr64, %124:gpr64
              to GPR32 -1
  Ready @14c
  BotQ.A BotLatency SU(13) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 15 8 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(6) 6c
  BotQ.A RemainingLatency 6 + 15c > CritPath 19
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %125:gpr64common = ADDXrr %121:gpr64, %124:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %121
  UpdateRegP: SU(6) %125:gpr64common = ADDXrr %121:gpr64, %124:gpr64
              to GPR32 -1
  Ready @15c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 16c > CritPath 19
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(5) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %124:gpr64 = UBFMXri %123:gpr64, 61, 60
Bottom Pressure:
GPR32=9
  LiveReg: %123
  UpdateRegP: SU(5) %124:gpr64 = UBFMXri %123:gpr64, 61, 60
              to GPR32 -1
  Ready @16c
  BotQ.A BotLatency SU(5) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(12) 4c
  BotQ.A RemainingLatency 4 + 17c > CritPath 19
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %139:gpr64common = MADDXrrr %117:gpr64, %136:gpr64, %220:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %117
  UpdateRegP: SU(2) %121:gpr64 = MADDXrrr %117:gpr64, %119:gpr64, %116:gpr64
              to 
  UpdateRegP: SU(15) %139:gpr64common = MADDXrrr %117:gpr64, %136:gpr64, %220:gpr64
              to GPR32 -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 13
  Executed: 18c
  Critical: 13c, 13 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 4 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(12) 4c
  BotQ.A RemainingLatency 4 + 18c > CritPath 19
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %132:gpr64 = MADDXrrr %130:gpr64, %119:gpr64, %129:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %129
  UpdateRegP: SU(12) %132:gpr64 = MADDXrrr %130:gpr64, %119:gpr64, %129:gpr64
              to GPR32 -1
  Ready @18c
  BotQ.A TopLatency SU(12) 4c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 14
  Executed: 19c
  Critical: 14c, 14 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 
Queue BotQ.A: 2 4 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 19c > CritPath 19
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %127:gpr64 = UBFMXri %126:gpr64, 61, 60
Bottom Pressure:
GPR32=9
  LiveReg: %126
  UpdateRegP: SU(8) %127:gpr64 = UBFMXri %126:gpr64, 61, 60
              to GPR32 -1
  Ready @19c
  BotQ.A TopLatency SU(8) 4c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 15
  Executed: 20c
  Critical: 15c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 7 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
  BotQ.A RemainingLatency 0 + 20c > CritPath 19
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %123:gpr64 = ADDXrs %122:gpr64, %122:gpr64, 2
Bottom Pressure:
GPR32=9
  LiveReg: %122
  UpdateRegP: SU(4) %123:gpr64 = ADDXrs %122:gpr64, %122:gpr64, 2
              to GPR32 -1
  Ready @20c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 15c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 16
  Executed: 21c
  Critical: 16c, 16 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 7 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %121:gpr64 = MADDXrrr %117:gpr64, %119:gpr64, %116:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %116
  UpdateRegP: SU(2) %121:gpr64 = MADDXrrr %117:gpr64, %119:gpr64, %116:gpr64
              to GPR32 -1
  Ready @21c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 17
  Executed: 22c
  Critical: 17c, 17 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 7 3 
Queue BotQ.A: 11 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
  BotQ.A RemainingLatency 0 + 22c > CritPath 19
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %130:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=8
  Ready @22c
  BotQ.A BotLatency SU(11) 18c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 18
  Executed: 23c
  Critical: 18c, 18 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 3 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
  BotQ.A RemainingLatency 0 + 23c > CritPath 19
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %129:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GPR32=7
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 19
  Executed: 24c
  Critical: 19c, 19 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 7 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
  BotQ.A RemainingLatency 0 + 24c > CritPath 19
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %126:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=6
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 20
  Executed: 25c
  Critical: 20c, 20 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 25c > CritPath 19
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %122:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=5
  Ready @25c
  BotQ.A BotLatency SU(3) 19c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 21
  Executed: 26c
  Critical: 21c, 21 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 26c > CritPath 19
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %117:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
Bottom Pressure:
GPR32=4
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 22
  Executed: 27c
  Critical: 22c, 22 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %116:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
Bottom Pressure:
GPR32=3
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 23
  Executed: 28c
  Critical: 23c, 23 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %116:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
SU(1):   %117:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(3):   %122:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(7):   %126:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(10):   %129:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
SU(11):   %130:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(2):   %121:gpr64 = MADDXrrr %117:gpr64, %119:gpr64, %116:gpr64
SU(4):   %123:gpr64 = ADDXrs %122:gpr64, %122:gpr64, 2
SU(8):   %127:gpr64 = UBFMXri %126:gpr64, 61, 60
SU(12):   %132:gpr64 = MADDXrrr %130:gpr64, %119:gpr64, %129:gpr64
SU(15):   %139:gpr64common = MADDXrrr %117:gpr64, %136:gpr64, %220:gpr64
SU(5):   %124:gpr64 = UBFMXri %123:gpr64, 61, 60
SU(6):   %125:gpr64common = ADDXrr %121:gpr64, %124:gpr64
SU(13):   %133:gpr64common = ADDXrr %132:gpr64, %124:gpr64
SU(14):   %134:fpr64 = LDRDroX %133:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
SU(16):   %140:fpr64 = LDRDroX %139:gpr64common, %130:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
SU(9):   %128:fpr64 = LDRDroX %125:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
SU(17):   %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
SU(18):   %142:fpr64 = FADDDrr %128:fpr64, %141:fpr64
SU(19):   STRDroX %142:fpr64, %125:gpr64common, %127:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
SU(20):   %143:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(21):   %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
SU(22):   STRWui %144:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
laplacian:%bb.33 for.inc127
  From: %114:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.29
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %114:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%114
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%114
  Successors:
    SU(2): Data Latency=1 Reg=%115
  Single Issue       : false;
SU(2):   STRWui %115:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%115
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %115:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %114:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %114:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0
SU(2):   STRWui %115:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
laplacian:%bb.34 for.inc130
  From: %109:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.27
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %109:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%109
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %110:gpr32common = nsw ADDWri %109:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%109
  Successors:
    SU(2): Data Latency=1 Reg=%110
  Single Issue       : false;
SU(2):   STRWui %110:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%110
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %110:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %110:gpr32common = nsw ADDWri %109:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %109:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %109:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   %110:gpr32common = nsw ADDWri %109:gpr32common, 1, 0
SU(2):   STRWui %110:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.35 for.inc133
  From: %104:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %104:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%104
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %105:gpr32common = nsw ADDWri %104:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%104
  Successors:
    SU(2): Data Latency=1 Reg=%105
  Single Issue       : false;
SU(2):   STRWui %105:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%105
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %105:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %105:gpr32common = nsw ADDWri %104:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %104:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %104:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %105:gpr32common = nsw ADDWri %104:gpr32common, 1, 0
SU(2):   STRWui %105:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
laplacian:%bb.36 for.end135
  From: STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
    To: End RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %40.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %42:gpr64common = ADDXri %stack.8.tm1, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   undef %53.sub_32:gpr64 = MOVi32imm 1000
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %55:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %61:gpr64common = ADDXri %stack.9.tm2, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %65:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(7):   %76:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(8):   %83:gpr64common = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=1 Reg=%83
  Single Issue       : false;
SU(9):   %84:fpr64 = LDRDui %83:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(8): Data Latency=1 Reg=%83
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(10):   %86:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 10 7 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 10 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %86:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 0 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
BotQ.A RemLatency SU(9) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %76:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 0 1 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 
BotQ.A RemLatency SU(9) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %65:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 8 
BotQ.A RemLatency SU(9) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %84:fpr64 = LDRDui %83:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A TopLatency SU(9) 1c
  BotQ.A BotLatency SU(9) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 8 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %83:gpr64common = ADRP target-flags(aarch64-page) %const.0
  Ready @4c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %61:gpr64common = ADDXri %stack.9.tm2, 0, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %55:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 7c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) undef %53.sub_32:gpr64 = MOVi32imm 1000
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 8c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %42:gpr64common = ADDXri %stack.8.tm1, 0, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %40.sub_32:gpr64 = MOVi32imm 200
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
SU(1):   undef %40.sub_32:gpr64 = MOVi32imm 200
SU(2):   %42:gpr64common = ADDXri %stack.8.tm1, 0, 0
SU(3):   undef %53.sub_32:gpr64 = MOVi32imm 1000
SU(4):   %55:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
SU(5):   %61:gpr64common = ADDXri %stack.9.tm2, 0, 0
SU(8):   %83:gpr64common = ADRP target-flags(aarch64-page) %const.0
SU(9):   %84:fpr64 = LDRDui %83:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(6):   %65:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
SU(7):   %76:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
SU(10):   %86:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s

********** MI Scheduling **********
laplacian:%bb.37 for.cond136
  From: %26:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.45, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %26:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %26:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%26
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.45, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %26:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %26:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %26:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.39 for.cond139
  From: %29:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.44, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %29:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%29
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %29:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%29
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.44, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %29:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %29:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %29:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %29:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.41 for.cond142
  From: %34:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.43, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %34:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%34
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %34:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%34
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.43, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %34:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %34:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %34:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %34:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.42 for.body144
  From: %38:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.41
 RegionInstrs: 53
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=14
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
Live In: %86 %84 %76 %65 %61 %55 %53 %42 %40 
Live Out: %86 %84 %76 %65 %61 %55 %53 %42 %40 
Live Thru: FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %86
  UpdateRegP: SU(37) %87:gpr64 = ADDXrr %86:gpr64, %54:gpr64
              to 
  LiveReg: %84
  UpdateRegP: SU(36) %85:fpr64 = FMULDrr %82:fpr64, %84:fpr64
              to 
  LiveReg: %76
  UpdateRegP: SU(30) %77:gpr64 = ADDXrr %76:gpr64, %54:gpr64
              to 
  LiveReg: %65
  UpdateRegP: SU(20) %66:gpr64 = ADDXrr %65:gpr64, %54:gpr64
              to 
  LiveReg: %61
  UpdateRegP: SU(17) %62:gpr64 = ADDXrr %61:gpr64common, %41:gpr64
              to 
  LiveReg: %55
  UpdateRegP: SU(12) %56:gpr64 = ADDXrr %55:gpr64, %54:gpr64
              to 
  LiveReg: %53
  UpdateRegP: SU(11) %54:gpr64 = MADDXrrr %51:gpr64, %53:gpr64, $xzr
              to 
  LiveReg: %42
  UpdateRegP: SU(2) %43:gpr64 = ADDXrr %42:gpr64common, %41:gpr64
              to 
  LiveReg: %40
  UpdateRegP: SU(1) %41:gpr64 = MADDXrrr %38:gpr64, %40:gpr64, $xzr
              to 
Top Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
Excess PSets: 
SU(0):   %38:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(1): Data Latency=4 Reg=%38
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %41:gpr64 = MADDXrrr %38:gpr64, %40:gpr64, $xzr
  # preds left       : 1
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(0): Data Latency=4 Reg=%38
  Successors:
    SU(44): Data Latency=1 Reg=%41
    SU(38): Data Latency=1 Reg=%41
    SU(31): Data Latency=1 Reg=%41
    SU(27): Data Latency=1 Reg=%41
    SU(21): Data Latency=1 Reg=%41
    SU(17): Data Latency=1 Reg=%41
    SU(13): Data Latency=1 Reg=%41
    SU(2): Data Latency=1 Reg=%41
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %43:gpr64 = ADDXrr %42:gpr64common, %41:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(1): Data Latency=1 Reg=%41
  Successors:
    SU(6): Data Latency=1 Reg=%43
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %44:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(4): Data Latency=4 Reg=%44
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %45:gpr64 = ADDXrs %44:gpr64, %44:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(3): Data Latency=4 Reg=%44
  Successors:
    SU(5): Data Latency=1 Reg=%45
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %46:gpr64 = UBFMXri %45:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(4): Data Latency=1 Reg=%45
  Successors:
    SU(45): Data Latency=1 Reg=%46
    SU(39): Data Latency=1 Reg=%46
    SU(32): Data Latency=1 Reg=%46
    SU(28): Data Latency=1 Reg=%46
    SU(22): Data Latency=1 Reg=%46
    SU(18): Data Latency=1 Reg=%46
    SU(14): Data Latency=1 Reg=%46
    SU(6): Data Latency=1 Reg=%46
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %47:gpr64common = ADDXrr %43:gpr64, %46:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 16
  Predecessors:
    SU(5): Data Latency=1 Reg=%46
    SU(2): Data Latency=1 Reg=%43
  Successors:
    SU(9): Data Latency=1 Reg=%47
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %48:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(8): Data Latency=4 Reg=%48
    SU(52): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %49:gpr64 = UBFMXri %48:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(7): Data Latency=4 Reg=%48
  Successors:
    SU(49): Data Latency=1 Reg=%49
    SU(46): Data Latency=1 Reg=%49
    SU(40): Data Latency=1 Reg=%49
    SU(33): Data Latency=1 Reg=%49
    SU(29): Data Latency=1 Reg=%49
    SU(23): Data Latency=1 Reg=%49
    SU(19): Data Latency=1 Reg=%49
    SU(15): Data Latency=1 Reg=%49
    SU(9): Data Latency=1 Reg=%49
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %50:fpr64 = LDRDroX %47:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 15
  Predecessors:
    SU(6): Data Latency=1 Reg=%47
    SU(8): Data Latency=1 Reg=%49
  Successors:
    SU(16): Data Latency=4 Reg=%50
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(10):   %51:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(11): Data Latency=4 Reg=%51
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %54:gpr64 = MADDXrrr %51:gpr64, %53:gpr64, $xzr
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 19
  Predecessors:
    SU(10): Data Latency=4 Reg=%51
  Successors:
    SU(37): Data Latency=1 Reg=%54
    SU(30): Data Latency=1 Reg=%54
    SU(20): Data Latency=1 Reg=%54
    SU(12): Data Latency=1 Reg=%54
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %56:gpr64 = ADDXrr %55:gpr64, %54:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 18
  Predecessors:
    SU(11): Data Latency=1 Reg=%54
  Successors:
    SU(13): Data Latency=1 Reg=%56
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %57:gpr64 = ADDXrr %56:gpr64, %41:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 17
  Predecessors:
    SU(12): Data Latency=1 Reg=%56
    SU(1): Data Latency=1 Reg=%41
  Successors:
    SU(14): Data Latency=1 Reg=%57
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %58:gpr64common = ADDXrr %57:gpr64, %46:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(13): Data Latency=1 Reg=%57
    SU(5): Data Latency=1 Reg=%46
  Successors:
    SU(15): Data Latency=1 Reg=%58
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %59:fpr64 = LDRDroX %58:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 15
  Predecessors:
    SU(14): Data Latency=1 Reg=%58
    SU(8): Data Latency=1 Reg=%49
  Successors:
    SU(16): Data Latency=4 Reg=%59
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(16):   %60:fpr64 = FMULDrr %50:fpr64, %59:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 11
  Predecessors:
    SU(15): Data Latency=4 Reg=%59
    SU(9): Data Latency=4 Reg=%50
  Successors:
    SU(25): Data Latency=1 Reg=%60
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(17):   %62:gpr64 = ADDXrr %61:gpr64common, %41:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(1): Data Latency=1 Reg=%41
  Successors:
    SU(18): Data Latency=1 Reg=%62
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %63:gpr64common = ADDXrr %62:gpr64, %46:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 16
  Predecessors:
    SU(17): Data Latency=1 Reg=%62
    SU(5): Data Latency=1 Reg=%46
  Successors:
    SU(19): Data Latency=1 Reg=%63
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   %64:fpr64 = LDRDroX %63:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 15
  Predecessors:
    SU(18): Data Latency=1 Reg=%63
    SU(8): Data Latency=1 Reg=%49
  Successors:
    SU(24): Data Latency=4 Reg=%64
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(20):   %66:gpr64 = ADDXrr %65:gpr64, %54:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 18
  Predecessors:
    SU(11): Data Latency=1 Reg=%54
  Successors:
    SU(21): Data Latency=1 Reg=%66
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %67:gpr64 = ADDXrr %66:gpr64, %41:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 17
  Predecessors:
    SU(20): Data Latency=1 Reg=%66
    SU(1): Data Latency=1 Reg=%41
  Successors:
    SU(22): Data Latency=1 Reg=%67
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(22):   %68:gpr64common = ADDXrr %67:gpr64, %46:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(21): Data Latency=1 Reg=%67
    SU(5): Data Latency=1 Reg=%46
  Successors:
    SU(23): Data Latency=1 Reg=%68
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(23):   %69:fpr64 = LDRDroX %68:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 15
  Predecessors:
    SU(22): Data Latency=1 Reg=%68
    SU(8): Data Latency=1 Reg=%49
  Successors:
    SU(24): Data Latency=4 Reg=%69
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(24):   %70:fpr64 = FMULDrr %64:fpr64, %69:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 11
  Predecessors:
    SU(23): Data Latency=4 Reg=%69
    SU(19): Data Latency=4 Reg=%64
  Successors:
    SU(25): Data Latency=1 Reg=%70
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(25):   %71:fpr64 = FADDDrr %60:fpr64, %70:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%70
    SU(16): Data Latency=1 Reg=%60
  Successors:
    SU(35): Data Latency=1 Reg=%71
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(26):   %72:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(27): Data Latency=4 Reg=%72
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   %73:gpr64 = ADDXrr %72:gpr64, %41:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%41
    SU(26): Data Latency=4 Reg=%72
  Successors:
    SU(28): Data Latency=1 Reg=%73
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(28):   %74:gpr64common = ADDXrr %73:gpr64, %46:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(27): Data Latency=1 Reg=%73
    SU(5): Data Latency=1 Reg=%46
  Successors:
    SU(49): Data Latency=1 Reg=%74
    SU(29): Data Latency=1 Reg=%74
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(29):   %75:fpr64 = LDRDroX %74:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(28): Data Latency=1 Reg=%74
    SU(8): Data Latency=1 Reg=%49
  Successors:
    SU(34): Data Latency=4 Reg=%75
    SU(52): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(30):   %77:gpr64 = ADDXrr %76:gpr64, %54:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(11): Data Latency=1 Reg=%54
  Successors:
    SU(31): Data Latency=1 Reg=%77
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %78:gpr64 = ADDXrr %77:gpr64, %41:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 16
  Predecessors:
    SU(30): Data Latency=1 Reg=%77
    SU(1): Data Latency=1 Reg=%41
  Successors:
    SU(32): Data Latency=1 Reg=%78
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(32):   %79:gpr64common = ADDXrr %78:gpr64, %46:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 15
  Predecessors:
    SU(31): Data Latency=1 Reg=%78
    SU(5): Data Latency=1 Reg=%46
  Successors:
    SU(33): Data Latency=1 Reg=%79
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(33):   %80:fpr64 = LDRDroX %79:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 14
  Predecessors:
    SU(32): Data Latency=1 Reg=%79
    SU(8): Data Latency=1 Reg=%49
  Successors:
    SU(34): Data Latency=4 Reg=%80
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(34):   %81:fpr64 = FMULDrr %75:fpr64, %80:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(33): Data Latency=4 Reg=%80
    SU(29): Data Latency=4 Reg=%75
  Successors:
    SU(35): Data Latency=1 Reg=%81
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(35):   %82:fpr64 = FADDDrr %71:fpr64, %81:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 9
  Predecessors:
    SU(25): Data Latency=1 Reg=%71
    SU(34): Data Latency=1 Reg=%81
  Successors:
    SU(36): Data Latency=1 Reg=%82
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(36):   %85:fpr64 = FMULDrr %82:fpr64, %84:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 8
  Predecessors:
    SU(35): Data Latency=1 Reg=%82
  Successors:
    SU(48): Data Latency=1 Reg=%85
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %87:gpr64 = ADDXrr %86:gpr64, %54:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(11): Data Latency=1 Reg=%54
  Successors:
    SU(38): Data Latency=1 Reg=%87
  Pressure Diff      : 
  Single Issue       : false;
SU(38):   %88:gpr64 = ADDXrr %87:gpr64, %41:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(37): Data Latency=1 Reg=%87
    SU(1): Data Latency=1 Reg=%41
  Successors:
    SU(39): Data Latency=1 Reg=%88
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(39):   %89:gpr64common = ADDXrr %88:gpr64, %46:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(38): Data Latency=1 Reg=%88
    SU(5): Data Latency=1 Reg=%46
  Successors:
    SU(40): Data Latency=1 Reg=%89
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(40):   %90:fpr64 = LDRDroX %89:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(39): Data Latency=1 Reg=%89
    SU(8): Data Latency=1 Reg=%49
  Successors:
    SU(42): Data Latency=4 Reg=%90
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(41):   %91:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(42): Data Latency=4 Reg=%91
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(42):   %92:fpr64 = FMULDrr %90:fpr64, %91:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 9
  Predecessors:
    SU(40): Data Latency=4 Reg=%90
    SU(41): Data Latency=4 Reg=%91
  Successors:
    SU(47): Data Latency=1 Reg=%92
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(43):   %93:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(44): Data Latency=4 Reg=%93
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(44):   %94:gpr64 = ADDXrr %93:gpr64, %41:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(1): Data Latency=1 Reg=%41
    SU(43): Data Latency=4 Reg=%93
  Successors:
    SU(45): Data Latency=1 Reg=%94
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(45):   %95:gpr64common = ADDXrr %94:gpr64, %46:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(44): Data Latency=1 Reg=%94
    SU(5): Data Latency=1 Reg=%46
  Successors:
    SU(46): Data Latency=1 Reg=%95
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(46):   %96:fpr64 = LDRDroX %95:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(45): Data Latency=1 Reg=%95
    SU(8): Data Latency=1 Reg=%49
  Successors:
    SU(47): Data Latency=4 Reg=%96
    SU(52): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Single Issue       : false;
SU(47):   %97:fpr64 = FMULDrr %92:fpr64, %96:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(42): Data Latency=1 Reg=%92
    SU(46): Data Latency=4 Reg=%96
  Successors:
    SU(48): Data Latency=1 Reg=%97
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(48):   %98:fpr64 = FADDDrr %85:fpr64, %97:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 7
  Predecessors:
    SU(36): Data Latency=1 Reg=%85
    SU(47): Data Latency=1 Reg=%97
  Successors:
    SU(49): Data Latency=1 Reg=%98
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(49):   STRDroX %98:fpr64, %74:gpr64common, %49:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
  # preds left       : 18
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 6
  Predecessors:
    SU(48): Data Latency=1 Reg=%98
    SU(46): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Data Latency=1 Reg=%74
    SU(26): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%49
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(52): Ord  Latency=0 Memory
    SU(50): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    FPR8+ZPR_4b 1    FPR8+ZPR4_with_zsub2_in_ZPR_4b 1    FPR8+ZPR4_with_zsub3_in_ZPR_4b 1    FPR8+ZPR4_with_zsub_in_FPR128_lo 1    ZPR 1
  Single Issue       : false;
SU(50):   %99:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 5
  Predecessors:
    SU(49): Ord  Latency=1 Memory
  Successors:
    SU(51): Data Latency=4 Reg=%99
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(51):   %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 1
  Predecessors:
    SU(50): Data Latency=4 Reg=%99
  Successors:
    SU(52): Data Latency=1 Reg=%100
  Pressure Diff      : 
  Single Issue       : false;
SU(52):   STRWui %100:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 0
  Predecessors:
    SU(51): Data Latency=1 Reg=%100
    SU(50): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.41
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 23
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 52 
Pick Bot ONLY1     
Scheduling SU(52) STRWui %100:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %100
  UpdateRegP: SU(52) STRWui %100:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(52) 23c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 51 
Pick Bot ONLY1     
Scheduling SU(51) %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  LiveReg: %99
  UpdateRegP: SU(51) %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(51) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 50 
Pick Bot ONLY1     
Scheduling SU(50) %99:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @5c
  BotQ.A BotLatency SU(50) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 49 
Pick Bot ONLY1     
Scheduling SU(49) STRDroX %98:fpr64, %74:gpr64common, %49:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %98
  UpdateRegP: SU(49) STRDroX %98:fpr64, %74:gpr64common, %49:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
              to GPR32 2
  LiveReg: %74
  UpdateRegP: SU(29) %75:fpr64 = LDRDroX %74:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(49) STRDroX %98:fpr64, %74:gpr64common, %49:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
              to GPR32 1
  LiveReg: %49
  UpdateRegP: SU(9) %50:fpr64 = LDRDroX %47:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(15) %59:fpr64 = LDRDroX %58:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(19) %64:fpr64 = LDRDroX %63:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(23) %69:fpr64 = LDRDroX %68:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(29) %75:fpr64 = LDRDroX %74:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(33) %80:fpr64 = LDRDroX %79:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(40) %90:fpr64 = LDRDroX %89:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(46) %96:fpr64 = LDRDroX %95:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  UpdateRegP: SU(49) STRDroX %98:fpr64, %74:gpr64common, %49:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
              to 
  Ready @6c
  BotQ.A BotLatency SU(49) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 
Pick Bot ONLY1     
Scheduling SU(48) %98:fpr64 = FADDDrr %85:fpr64, %97:fpr64
Bottom Pressure:
FPR8=3
GPR32=10
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %85
  UpdateRegP: SU(48) %98:fpr64 = FADDDrr %85:fpr64, %97:fpr64
              to 
  LiveReg: %97
  UpdateRegP: SU(48) %98:fpr64 = FADDDrr %85:fpr64, %97:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(48) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 47 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(36) 15c
Picking from Bot:
  Cand SU(36) ORDER                              
  Cand SU(47) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(47) %97:fpr64 = FMULDrr %92:fpr64, %96:fpr64
Bottom Pressure:
FPR8=4
GPR32=10
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %92
  UpdateRegP: SU(47) %97:fpr64 = FMULDrr %92:fpr64, %96:fpr64
              to 
  LiveReg: %96
  UpdateRegP: SU(47) %97:fpr64 = FMULDrr %92:fpr64, %96:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @8c
  BotQ.A BotLatency SU(47) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 46 
Queue BotQ.A: 36 42 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(36) 15c
BotQ.A RemLatency SU(46) 7c
  BotQ.A RemainingLatency 15 + 9c > CritPath 23
Picking from Bot:
  Cand SU(36) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(36) %85:fpr64 = FMULDrr %82:fpr64, %84:fpr64
Bottom Pressure:
FPR8=4
GPR32=10
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %82
  UpdateRegP: SU(36) %85:fpr64 = FMULDrr %82:fpr64, %84:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @9c
  BotQ.A TopLatency SU(36) 15c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 46 
Queue BotQ.A: 42 35 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(35) 14c
BotQ.A RemLatency SU(46) 7c
  BotQ.A RemainingLatency 14 + 10c > CritPath 23
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(35) %82:fpr64 = FADDDrr %71:fpr64, %81:fpr64
Bottom Pressure:
FPR8=5
GPR32=10
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %71
  UpdateRegP: SU(35) %82:fpr64 = FADDDrr %71:fpr64, %81:fpr64
              to 
  LiveReg: %81
  UpdateRegP: SU(35) %82:fpr64 = FADDDrr %71:fpr64, %81:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @10c
  BotQ.A BotLatency SU(35) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 46 
Queue BotQ.A: 42 25 34 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(25) 13c
BotQ.A RemLatency SU(46) 7c
  BotQ.A RemainingLatency 13 + 11c > CritPath 23
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(25) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(25) %71:fpr64 = FADDDrr %60:fpr64, %70:fpr64
Bottom Pressure:
FPR8=6
GPR32=10
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %60
  UpdateRegP: SU(25) %71:fpr64 = FADDDrr %60:fpr64, %70:fpr64
              to 
  LiveReg: %70
  UpdateRegP: SU(25) %71:fpr64 = FADDDrr %60:fpr64, %70:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @11c
  BotQ.A BotLatency SU(25) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 34 24 16 46 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(42) 12c
  BotQ.A RemainingLatency 12 + 12c > CritPath 23
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(46) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(46) %96:fpr64 = LDRDroX %95:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
Bottom Pressure:
FPR8=5
GPR32=11
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %95
  UpdateRegP: SU(46) %96:fpr64 = LDRDroX %95:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @12c
  BotQ.A BotLatency SU(46) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 34 24 16 45 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(42) 12c
  BotQ.A RemainingLatency 12 + 13c > CritPath 23
Picking from Bot:
  Cand SU(42) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(42) %92:fpr64 = FMULDrr %90:fpr64, %91:fpr64
Bottom Pressure:
FPR8=6
GPR32=11
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %90
  UpdateRegP: SU(42) %92:fpr64 = FMULDrr %90:fpr64, %91:fpr64
              to 
  LiveReg: %91
  UpdateRegP: SU(42) %92:fpr64 = FMULDrr %90:fpr64, %91:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @13c
  BotQ.A TopLatency SU(42) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 40 41 
Queue BotQ.A: 45 34 24 16 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(34) 12c
BotQ.A RemLatency SU(40) 8c
  BotQ.A RemainingLatency 12 + 14c > CritPath 23
Picking from Bot:
  Cand SU(45) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(45) %95:gpr64common = ADDXrr %94:gpr64, %46:gpr64
Bottom Pressure:
FPR8=6
GPR32=12
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %94
  UpdateRegP: SU(45) %95:gpr64common = ADDXrr %94:gpr64, %46:gpr64
              to 
  LiveReg: %46
  UpdateRegP: SU(6) %47:gpr64common = ADDXrr %43:gpr64, %46:gpr64
              to 
  UpdateRegP: SU(14) %58:gpr64common = ADDXrr %57:gpr64, %46:gpr64
              to 
  UpdateRegP: SU(18) %63:gpr64common = ADDXrr %62:gpr64, %46:gpr64
              to 
  UpdateRegP: SU(22) %68:gpr64common = ADDXrr %67:gpr64, %46:gpr64
              to 
  UpdateRegP: SU(28) %74:gpr64common = ADDXrr %73:gpr64, %46:gpr64
              to 
  UpdateRegP: SU(32) %79:gpr64common = ADDXrr %78:gpr64, %46:gpr64
              to 
  UpdateRegP: SU(39) %89:gpr64common = ADDXrr %88:gpr64, %46:gpr64
              to 
  UpdateRegP: SU(45) %95:gpr64common = ADDXrr %94:gpr64, %46:gpr64
              to GPR32 -1
  Ready @14c
  BotQ.A BotLatency SU(45) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 12
  Executed: 15c
  Critical: 12c, 12 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 40 41 
Queue BotQ.A: 16 34 24 44 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(40) 8c
  BotQ.A RemainingLatency 12 + 15c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(44) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(44) %94:gpr64 = ADDXrr %93:gpr64, %41:gpr64
Bottom Pressure:
FPR8=6
GPR32=13
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %93
  UpdateRegP: SU(44) %94:gpr64 = ADDXrr %93:gpr64, %41:gpr64
              to 
  LiveReg: %41
  UpdateRegP: SU(2) %43:gpr64 = ADDXrr %42:gpr64common, %41:gpr64
              to GPR32 -1
  UpdateRegP: SU(13) %57:gpr64 = ADDXrr %56:gpr64, %41:gpr64
              to 
  UpdateRegP: SU(17) %62:gpr64 = ADDXrr %61:gpr64common, %41:gpr64
              to GPR32 -1
  UpdateRegP: SU(21) %67:gpr64 = ADDXrr %66:gpr64, %41:gpr64
              to 
  UpdateRegP: SU(27) %73:gpr64 = ADDXrr %72:gpr64, %41:gpr64
              to 
  UpdateRegP: SU(31) %78:gpr64 = ADDXrr %77:gpr64, %41:gpr64
              to 
  UpdateRegP: SU(38) %88:gpr64 = ADDXrr %87:gpr64, %41:gpr64
              to 
  UpdateRegP: SU(44) %94:gpr64 = ADDXrr %93:gpr64, %41:gpr64
              to GPR32 -1
  Ready @15c
  BotQ.A BotLatency SU(44) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 13
  Executed: 16c
  Critical: 13c, 13 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 40 41 43 
Queue BotQ.A: 16 34 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(40) 8c
  BotQ.A RemainingLatency 12 + 16c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(34) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(34) %81:fpr64 = FMULDrr %75:fpr64, %80:fpr64
Bottom Pressure:
FPR8=7
GPR32=13
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
FPR8+ZPR_4b=7
FPR8+ZPR4_with_zsub2_in_ZPR_4b=7
FPR8+ZPR4_with_zsub3_in_ZPR_4b=7
FPR8+ZPR4_with_zsub_in_FPR128_lo=7
ZPR=7
  LiveReg: %75
  UpdateRegP: SU(34) %81:fpr64 = FMULDrr %75:fpr64, %80:fpr64
              to 
  LiveReg: %80
  UpdateRegP: SU(34) %81:fpr64 = FMULDrr %75:fpr64, %80:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @16c
  BotQ.A TopLatency SU(34) 12c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 14
  Executed: 17c
  Critical: 14c, 14 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 33 43 
Queue BotQ.A: 16 24 40 41 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(33) 8c
  BotQ.A RemainingLatency 12 + 17c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(40) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(40) %90:fpr64 = LDRDroX %89:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %89
  UpdateRegP: SU(40) %90:fpr64 = LDRDroX %89:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 15
  Executed: 18c
  Critical: 15c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 33 43 
Queue BotQ.A: 16 24 41 39 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(33) 8c
  BotQ.A RemainingLatency 12 + 18c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(24) %70:fpr64 = FMULDrr %64:fpr64, %69:fpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
FPR8+ZPR_4b=7
FPR8+ZPR4_with_zsub2_in_ZPR_4b=7
FPR8+ZPR4_with_zsub3_in_ZPR_4b=7
FPR8+ZPR4_with_zsub_in_FPR128_lo=7
ZPR=7
  LiveReg: %64
  UpdateRegP: SU(24) %70:fpr64 = FMULDrr %64:fpr64, %69:fpr64
              to 
  LiveReg: %69
  UpdateRegP: SU(24) %70:fpr64 = FMULDrr %64:fpr64, %69:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @18c
  BotQ.A TopLatency SU(24) 12c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 16
  Executed: 19c
  Critical: 16c, 16 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 33 19 23 
Queue BotQ.A: 16 39 41 43 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(33) 8c
  BotQ.A RemainingLatency 12 + 19c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(39) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(39) %89:gpr64common = ADDXrr %88:gpr64, %46:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
FPR8+ZPR_4b=7
FPR8+ZPR4_with_zsub2_in_ZPR_4b=7
FPR8+ZPR4_with_zsub3_in_ZPR_4b=7
FPR8+ZPR4_with_zsub_in_FPR128_lo=7
ZPR=7
  LiveReg: %88
  UpdateRegP: SU(39) %89:gpr64common = ADDXrr %88:gpr64, %46:gpr64
              to GPR32 -1
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 17
  Executed: 20c
  Critical: 17c, 17 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 19 
Queue BotQ.A: 16 43 41 38 29 33 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(23) 8c
  BotQ.A RemainingLatency 12 + 20c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(43) REG-MAX                            
  Cand SU(38) BOT-PATH                  6 cycles 
  Cand SU(29) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(29) %75:fpr64 = LDRDroX %74:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 18
  Executed: 21c
  Critical: 18c, 18 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 19 
Queue BotQ.A: 16 43 41 38 33 28 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(23) 8c
  BotQ.A RemainingLatency 12 + 21c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(16) %60:fpr64 = FMULDrr %50:fpr64, %59:fpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
FPR8+ZPR_4b=7
FPR8+ZPR4_with_zsub2_in_ZPR_4b=7
FPR8+ZPR4_with_zsub3_in_ZPR_4b=7
FPR8+ZPR4_with_zsub_in_FPR128_lo=7
ZPR=7
  LiveReg: %50
  UpdateRegP: SU(16) %60:fpr64 = FMULDrr %50:fpr64, %59:fpr64
              to 
  LiveReg: %59
  UpdateRegP: SU(16) %60:fpr64 = FMULDrr %50:fpr64, %59:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @21c
  BotQ.A TopLatency SU(16) 12c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 19
  Executed: 22c
  Critical: 19c, 19 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 15 
Queue BotQ.A: 28 43 41 38 33 23 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(33) 8c
BotQ.A RemLatency SU(15) 8c
  BotQ.A RemainingLatency 11 + 22c > CritPath 23
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(38) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(38) %88:gpr64 = ADDXrr %87:gpr64, %41:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
FPR8+ZPR_4b=7
FPR8+ZPR4_with_zsub2_in_ZPR_4b=7
FPR8+ZPR4_with_zsub3_in_ZPR_4b=7
FPR8+ZPR4_with_zsub_in_FPR128_lo=7
ZPR=7
  LiveReg: %87
  UpdateRegP: SU(38) %88:gpr64 = ADDXrr %87:gpr64, %41:gpr64
              to GPR32 -1
  Ready @22c
  BotQ.A BotLatency SU(38) 15c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 20
  Executed: 23c
  Critical: 20c, 20 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 15 
Queue BotQ.A: 28 43 41 19 33 23 37 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(33) 8c
BotQ.A RemLatency SU(15) 8c
  BotQ.A RemainingLatency 10 + 23c > CritPath 23
Picking from Bot:
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) %74:gpr64common = ADDXrr %73:gpr64, %46:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
FPR8+ZPR_4b=7
FPR8+ZPR4_with_zsub2_in_ZPR_4b=7
FPR8+ZPR4_with_zsub3_in_ZPR_4b=7
FPR8+ZPR4_with_zsub_in_FPR128_lo=7
ZPR=7
  LiveReg: %73
  UpdateRegP: SU(28) %74:gpr64common = ADDXrr %73:gpr64, %46:gpr64
              to GPR32 -1
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 21
  Executed: 24c
  Critical: 21c, 21 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 15 
Queue BotQ.A: 37 43 41 19 33 23 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
  BotQ.A RemainingLatency 0 + 24c > CritPath 23
Picking from Bot:
  Cand SU(37) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(37) %87:gpr64 = ADDXrr %86:gpr64, %54:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
FPR8+ZPR_4b=7
FPR8+ZPR4_with_zsub2_in_ZPR_4b=7
FPR8+ZPR4_with_zsub3_in_ZPR_4b=7
FPR8+ZPR4_with_zsub_in_FPR128_lo=7
ZPR=7
  LiveReg: %54
  UpdateRegP: SU(12) %56:gpr64 = ADDXrr %55:gpr64, %54:gpr64
              to GPR32 -1
  UpdateRegP: SU(20) %66:gpr64 = ADDXrr %65:gpr64, %54:gpr64
              to GPR32 -1
  UpdateRegP: SU(30) %77:gpr64 = ADDXrr %76:gpr64, %54:gpr64
              to GPR32 -1
  UpdateRegP: SU(37) %87:gpr64 = ADDXrr %86:gpr64, %54:gpr64
              to GPR32 -1
  Ready @24c
  BotQ.A BotLatency SU(37) 16c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 22
  Executed: 25c
  Critical: 22c, 22 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 43 41 19 33 23 9 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
  BotQ.A RemainingLatency 0 + 25c > CritPath 23
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) %73:gpr64 = ADDXrr %72:gpr64, %41:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
FPR8+ZPR_4b=7
FPR8+ZPR4_with_zsub2_in_ZPR_4b=7
FPR8+ZPR4_with_zsub3_in_ZPR_4b=7
FPR8+ZPR4_with_zsub_in_FPR128_lo=7
ZPR=7
  LiveReg: %72
  UpdateRegP: SU(27) %73:gpr64 = ADDXrr %72:gpr64, %41:gpr64
              to GPR32 -1
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 23
  Executed: 26c
  Critical: 23c, 23 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 15 43 41 19 33 23 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
  BotQ.A RemainingLatency 0 + 26c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(43) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(43) %93:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
FPR8=7
GPR32=13
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
FPR8+ZPR_4b=7
FPR8+ZPR4_with_zsub2_in_ZPR_4b=7
FPR8+ZPR4_with_zsub3_in_ZPR_4b=7
FPR8+ZPR4_with_zsub_in_FPR128_lo=7
ZPR=7
  Ready @26c
  BotQ.A BotLatency SU(43) 18c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 24
  Executed: 27c
  Critical: 24c, 24 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 15 9 41 19 33 23 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 27c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(33) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(33) %80:fpr64 = LDRDroX %79:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %79
  UpdateRegP: SU(33) %80:fpr64 = LDRDroX %79:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @27c
  BotQ.A TopLatency SU(33) 8c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 25
  Executed: 28c
  Critical: 25c, 25 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 15 9 41 19 23 32 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 28c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(32) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(32) %79:gpr64common = ADDXrr %78:gpr64, %46:gpr64
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %78
  UpdateRegP: SU(32) %79:gpr64common = ADDXrr %78:gpr64, %46:gpr64
              to GPR32 -1
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 26
  Executed: 29c
  Critical: 26c, 26 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 23 31 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 29c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(31) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(31) %78:gpr64 = ADDXrr %77:gpr64, %41:gpr64
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  LiveReg: %77
  UpdateRegP: SU(31) %78:gpr64 = ADDXrr %77:gpr64, %41:gpr64
              to GPR32 -1
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 27
  Executed: 30c
  Critical: 27c, 27 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 23 26 30 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 30c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(30) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(30) %77:gpr64 = ADDXrr %76:gpr64, %54:gpr64
Bottom Pressure:
FPR8=6
GPR32=13
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
FPR8+ZPR_4b=6
FPR8+ZPR4_with_zsub2_in_ZPR_4b=6
FPR8+ZPR4_with_zsub3_in_ZPR_4b=6
FPR8+ZPR4_with_zsub_in_FPR128_lo=6
ZPR=6
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 28
  Executed: 31c
  Critical: 28c, 28 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 23 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 31c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(23) %69:fpr64 = LDRDroX %68:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
Bottom Pressure:
FPR8=5
GPR32=14
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %68
  UpdateRegP: SU(23) %69:fpr64 = LDRDroX %68:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @31c
  BotQ.A TopLatency SU(23) 8c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 29
  Executed: 32c
  Critical: 29c, 29 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 26 22 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 32c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(22) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(22) %68:gpr64common = ADDXrr %67:gpr64, %46:gpr64
Bottom Pressure:
FPR8=5
GPR32=14
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %67
  UpdateRegP: SU(22) %68:gpr64common = ADDXrr %67:gpr64, %46:gpr64
              to GPR32 -1
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 30
  Executed: 33c
  Critical: 30c, 30 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 26 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 33c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(21) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(21) %67:gpr64 = ADDXrr %66:gpr64, %41:gpr64
Bottom Pressure:
FPR8=5
GPR32=14
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  LiveReg: %66
  UpdateRegP: SU(21) %67:gpr64 = ADDXrr %66:gpr64, %41:gpr64
              to GPR32 -1
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 31
  Executed: 34c
  Critical: 31c, 31 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 26 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 34c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(20) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(20) %66:gpr64 = ADDXrr %65:gpr64, %54:gpr64
Bottom Pressure:
FPR8=5
GPR32=13
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
FPR8+ZPR_4b=5
FPR8+ZPR4_with_zsub2_in_ZPR_4b=5
FPR8+ZPR4_with_zsub3_in_ZPR_4b=5
FPR8+ZPR4_with_zsub_in_FPR128_lo=5
ZPR=5
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 32
  Executed: 35c
  Critical: 32c, 32 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 35c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %59:fpr64 = LDRDroX %58:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
Bottom Pressure:
FPR8=4
GPR32=14
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %58
  UpdateRegP: SU(15) %59:fpr64 = LDRDroX %58:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @35c
  BotQ.A TopLatency SU(15) 8c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 33
  Executed: 36c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 36c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(14) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %58:gpr64common = ADDXrr %57:gpr64, %46:gpr64
Bottom Pressure:
FPR8=4
GPR32=14
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %57
  UpdateRegP: SU(14) %58:gpr64common = ADDXrr %57:gpr64, %46:gpr64
              to GPR32 -1
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 34
  Executed: 37c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 19 13 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 37c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(13) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %57:gpr64 = ADDXrr %56:gpr64, %41:gpr64
Bottom Pressure:
FPR8=4
GPR32=14
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  LiveReg: %56
  UpdateRegP: SU(13) %57:gpr64 = ADDXrr %56:gpr64, %41:gpr64
              to GPR32 -1
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 35
  Executed: 38c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 38c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(12) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %56:gpr64 = ADDXrr %55:gpr64, %54:gpr64
Bottom Pressure:
FPR8=4
GPR32=13
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
FPR8+ZPR_4b=4
FPR8+ZPR4_with_zsub2_in_ZPR_4b=4
FPR8+ZPR4_with_zsub3_in_ZPR_4b=4
FPR8+ZPR4_with_zsub_in_FPR128_lo=4
ZPR=4
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 36
  Executed: 39c
  Critical: 36c, 36 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 19 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 39c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(9) BOT-PATH                  7 cycles 
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %64:fpr64 = LDRDroX %63:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
Bottom Pressure:
FPR8=3
GPR32=14
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %63
  UpdateRegP: SU(19) %64:fpr64 = LDRDroX %63:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @39c
  BotQ.A TopLatency SU(19) 7c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 37
  Executed: 40c
  Critical: 37c, 37 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 11 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 40c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(18) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %63:gpr64common = ADDXrr %62:gpr64, %46:gpr64
Bottom Pressure:
FPR8=3
GPR32=14
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  LiveReg: %62
  UpdateRegP: SU(18) %63:gpr64common = ADDXrr %62:gpr64, %46:gpr64
              to GPR32 -1
  Ready @40c
  *** Max MOps 1 at cycle 40
Cycle: 41 BotQ.A
BotQ.A @41c
  Retired: 38
  Executed: 41c
  Critical: 38c, 38 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 11 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 41c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(17) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) %62:gpr64 = ADDXrr %61:gpr64common, %41:gpr64
Bottom Pressure:
FPR8=3
GPR32=13
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
FPR8+ZPR_4b=3
FPR8+ZPR4_with_zsub2_in_ZPR_4b=3
FPR8+ZPR4_with_zsub3_in_ZPR_4b=3
FPR8+ZPR4_with_zsub_in_FPR128_lo=3
ZPR=3
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 BotQ.A
BotQ.A @42c
  Retired: 39
  Executed: 42c
  Critical: 39c, 39 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 42c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(9) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %50:fpr64 = LDRDroX %47:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %47
  UpdateRegP: SU(9) %50:fpr64 = LDRDroX %47:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    FPR8+ZPR_4b -1    FPR8+ZPR4_with_zsub2_in_ZPR_4b -1    FPR8+ZPR4_with_zsub3_in_ZPR_4b -1    FPR8+ZPR4_with_zsub_in_FPR128_lo -1    ZPR -1
  Ready @42c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 42
Cycle: 43 BotQ.A
BotQ.A @43c
  Retired: 40
  Executed: 43c
  Critical: 40c, 40 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 11 41 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 43c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(6) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %47:gpr64common = ADDXrr %43:gpr64, %46:gpr64
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %43
  UpdateRegP: SU(6) %47:gpr64common = ADDXrr %43:gpr64, %46:gpr64
              to GPR32 -1
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 BotQ.A
BotQ.A @44c
  Retired: 41
  Executed: 44c
  Critical: 41c, 41 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 11 41 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 44c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(5) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %46:gpr64 = UBFMXri %45:gpr64, 61, 60
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %45
  UpdateRegP: SU(5) %46:gpr64 = UBFMXri %45:gpr64, 61, 60
              to GPR32 -1
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 BotQ.A
BotQ.A @45c
  Retired: 42
  Executed: 45c
  Critical: 42c, 42 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 11 41 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 45c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(2) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %43:gpr64 = ADDXrr %42:gpr64common, %41:gpr64
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  Ready @45c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 45
Cycle: 46 BotQ.A
BotQ.A @46c
  Retired: 43
  Executed: 46c
  Critical: 43c, 43 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 11 41 8 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 46c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %54:gpr64 = MADDXrrr %51:gpr64, %53:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %51
  UpdateRegP: SU(11) %54:gpr64 = MADDXrrr %51:gpr64, %53:gpr64, $xzr
              to GPR32 -1
  Ready @46c
  BotQ.A BotLatency SU(11) 19c
  *** Max MOps 1 at cycle 46
Cycle: 47 BotQ.A
BotQ.A @47c
  Retired: 44
  Executed: 47c
  Critical: 44c, 44 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 26 1 41 8 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 47c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %49:gpr64 = UBFMXri %48:gpr64, 61, 60
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %48
  UpdateRegP: SU(8) %49:gpr64 = UBFMXri %48:gpr64, 61, 60
              to GPR32 -1
  Ready @47c
  BotQ.A TopLatency SU(8) 4c
  *** Max MOps 1 at cycle 47
Cycle: 48 BotQ.A
BotQ.A @48c
  Retired: 45
  Executed: 48c
  Critical: 45c, 45 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 7 
Queue BotQ.A: 26 1 41 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 48c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %45:gpr64 = ADDXrs %44:gpr64, %44:gpr64, 2
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %44
  UpdateRegP: SU(4) %45:gpr64 = ADDXrs %44:gpr64, %44:gpr64, 2
              to GPR32 -1
  Ready @48c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 48
Cycle: 49 BotQ.A
BotQ.A @49c
  Retired: 46
  Executed: 49c
  Critical: 46c, 46 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 7 3 
Queue BotQ.A: 26 1 41 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 49c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %41:gpr64 = MADDXrrr %38:gpr64, %40:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
FPR8+ZPR_4b=2
FPR8+ZPR4_with_zsub2_in_ZPR_4b=2
FPR8+ZPR4_with_zsub3_in_ZPR_4b=2
FPR8+ZPR4_with_zsub_in_FPR128_lo=2
ZPR=2
  LiveReg: %38
  UpdateRegP: SU(1) %41:gpr64 = MADDXrrr %38:gpr64, %40:gpr64, $xzr
              to GPR32 -1
  Ready @49c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 49
Cycle: 50 BotQ.A
BotQ.A @50c
  Retired: 47
  Executed: 50c
  Critical: 47c, 47 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 7 3 
Queue BotQ.A: 26 41 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 50c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(41) %91:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
Bottom Pressure:
FPR8=1
GPR32=13
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @50c
  *** Max MOps 1 at cycle 50
Cycle: 51 BotQ.A
BotQ.A @51c
  Retired: 48
  Executed: 51c
  Critical: 48c, 48 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 26 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 
  BotQ.A RemainingLatency 0 + 51c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(26) %72:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
Bottom Pressure:
FPR8=1
GPR32=12
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @51c
  BotQ.A BotLatency SU(26) 20c
  *** Max MOps 1 at cycle 51
Cycle: 52 BotQ.A
BotQ.A @52c
  Retired: 49
  Executed: 52c
  Critical: 49c, 49 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 10 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 
  BotQ.A RemainingLatency 0 + 52c > CritPath 23
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %51:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
Bottom Pressure:
FPR8=1
GPR32=11
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @52c
  BotQ.A BotLatency SU(10) 23c
  *** Max MOps 1 at cycle 52
Cycle: 53 BotQ.A
BotQ.A @53c
  Retired: 50
  Executed: 53c
  Critical: 50c, 50 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 
  BotQ.A RemainingLatency 0 + 53c > CritPath 23
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %48:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @53c
  *** Max MOps 1 at cycle 53
Cycle: 54 BotQ.A
BotQ.A @54c
  Retired: 51
  Executed: 54c
  Critical: 51c, 51 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 54c > CritPath 23
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %44:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @54c
  *** Max MOps 1 at cycle 54
Cycle: 55 BotQ.A
BotQ.A @55c
  Retired: 52
  Executed: 55c
  Critical: 52c, 52 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %38:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
FPR8+ZPR_4b=1
FPR8+ZPR4_with_zsub2_in_ZPR_4b=1
FPR8+ZPR4_with_zsub3_in_ZPR_4b=1
FPR8+ZPR4_with_zsub_in_FPR128_lo=1
ZPR=1
  Ready @55c
  *** Max MOps 1 at cycle 55
Cycle: 56 BotQ.A
BotQ.A @56c
  Retired: 53
  Executed: 56c
  Critical: 53c, 53 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %38:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(3):   %44:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(7):   %48:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(10):   %51:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
SU(26):   %72:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
SU(41):   %91:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
SU(1):   %41:gpr64 = MADDXrrr %38:gpr64, %40:gpr64, $xzr
SU(4):   %45:gpr64 = ADDXrs %44:gpr64, %44:gpr64, 2
SU(8):   %49:gpr64 = UBFMXri %48:gpr64, 61, 60
SU(11):   %54:gpr64 = MADDXrrr %51:gpr64, %53:gpr64, $xzr
SU(2):   %43:gpr64 = ADDXrr %42:gpr64common, %41:gpr64
SU(5):   %46:gpr64 = UBFMXri %45:gpr64, 61, 60
SU(6):   %47:gpr64common = ADDXrr %43:gpr64, %46:gpr64
SU(9):   %50:fpr64 = LDRDroX %47:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
SU(17):   %62:gpr64 = ADDXrr %61:gpr64common, %41:gpr64
SU(18):   %63:gpr64common = ADDXrr %62:gpr64, %46:gpr64
SU(19):   %64:fpr64 = LDRDroX %63:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
SU(12):   %56:gpr64 = ADDXrr %55:gpr64, %54:gpr64
SU(13):   %57:gpr64 = ADDXrr %56:gpr64, %41:gpr64
SU(14):   %58:gpr64common = ADDXrr %57:gpr64, %46:gpr64
SU(15):   %59:fpr64 = LDRDroX %58:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
SU(20):   %66:gpr64 = ADDXrr %65:gpr64, %54:gpr64
SU(21):   %67:gpr64 = ADDXrr %66:gpr64, %41:gpr64
SU(22):   %68:gpr64common = ADDXrr %67:gpr64, %46:gpr64
SU(23):   %69:fpr64 = LDRDroX %68:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
SU(30):   %77:gpr64 = ADDXrr %76:gpr64, %54:gpr64
SU(31):   %78:gpr64 = ADDXrr %77:gpr64, %41:gpr64
SU(32):   %79:gpr64common = ADDXrr %78:gpr64, %46:gpr64
SU(33):   %80:fpr64 = LDRDroX %79:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
SU(43):   %93:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
SU(27):   %73:gpr64 = ADDXrr %72:gpr64, %41:gpr64
SU(37):   %87:gpr64 = ADDXrr %86:gpr64, %54:gpr64
SU(28):   %74:gpr64common = ADDXrr %73:gpr64, %46:gpr64
SU(38):   %88:gpr64 = ADDXrr %87:gpr64, %41:gpr64
SU(16):   %60:fpr64 = FMULDrr %50:fpr64, %59:fpr64
SU(29):   %75:fpr64 = LDRDroX %74:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
SU(39):   %89:gpr64common = ADDXrr %88:gpr64, %46:gpr64
SU(24):   %70:fpr64 = FMULDrr %64:fpr64, %69:fpr64
SU(40):   %90:fpr64 = LDRDroX %89:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
SU(34):   %81:fpr64 = FMULDrr %75:fpr64, %80:fpr64
SU(44):   %94:gpr64 = ADDXrr %93:gpr64, %41:gpr64
SU(45):   %95:gpr64common = ADDXrr %94:gpr64, %46:gpr64
SU(42):   %92:fpr64 = FMULDrr %90:fpr64, %91:fpr64
SU(46):   %96:fpr64 = LDRDroX %95:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
SU(25):   %71:fpr64 = FADDDrr %60:fpr64, %70:fpr64
SU(35):   %82:fpr64 = FADDDrr %71:fpr64, %81:fpr64
SU(36):   %85:fpr64 = FMULDrr %82:fpr64, %84:fpr64
SU(47):   %97:fpr64 = FMULDrr %92:fpr64, %96:fpr64
SU(48):   %98:fpr64 = FADDDrr %85:fpr64, %97:fpr64
SU(49):   STRDroX %98:fpr64, %74:gpr64common, %49:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
SU(50):   %99:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(51):   %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0
SU(52):   STRWui %100:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
laplacian:%bb.43 for.inc219
  From: %36:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.39
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %36:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%36
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %37:gpr32common = nsw ADDWri %36:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%36
  Successors:
    SU(2): Data Latency=1 Reg=%37
  Single Issue       : false;
SU(2):   STRWui %37:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%37
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.39
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %37:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %37:gpr32common = nsw ADDWri %36:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %36:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %36:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %37:gpr32common = nsw ADDWri %36:gpr32common, 1, 0
SU(2):   STRWui %37:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
laplacian:%bb.44 for.inc222
  From: %31:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.37
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %31:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%31
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %32:gpr32common = nsw ADDWri %31:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%31
  Successors:
    SU(2): Data Latency=1 Reg=%32
  Single Issue       : false;
SU(2):   STRWui %32:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%32
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.37
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %32:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %32:gpr32common = nsw ADDWri %31:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %31:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %31:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %32:gpr32common = nsw ADDWri %31:gpr32common, 1, 0
SU(2):   STRWui %32:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)

********** INTERVALS **********
W0 [0B,48r:0)[256r,304r:3)[1632r,1680r:2)[3032r,3040r:1)  0@0B-phi 1@3032r 2@1632r 3@256r
W1 [0B,32r:0)[292r,304r:3)[1668r,1680r:2)[3028r,3040r:1)  0@0B-phi 1@3028r 2@1668r 3@292r
W2 [0B,16r:0)  0@0B-phi
%0 [48r,64r:0)  0@48r weight:0.000000e+00
%1 [32r,132r:0)  0@32r weight:0.000000e+00
%2 [16r,136r:0)  0@16r weight:0.000000e+00
%3 [112r,128r:0)  0@112r weight:0.000000e+00
%4 [128r,160r:0)  0@128r weight:0.000000e+00
%5 [144r,160r:0)  0@144r weight:0.000000e+00
%6 [160r,176r:0)  0@160r weight:0.000000e+00
%7 [296r,1552B:0)  0@296r weight:0.000000e+00
%11 [464r,480r:0)  0@464r weight:0.000000e+00
%13 [1672r,2912B:0)  0@1672r weight:0.000000e+00
%17 [1824r,1840r:0)  0@1824r weight:0.000000e+00
%19 [2928r,3032r:0)  0@2928r weight:0.000000e+00
%23 [3184r,3200r:0)  0@3184r weight:0.000000e+00
%26 [4528r,4544r:0)  0@4528r weight:0.000000e+00
%29 [4656r,4672r:0)  0@4656r weight:0.000000e+00
%31 [5968r,5976r:0)  0@5968r weight:0.000000e+00
%32 [5976r,5984r:0)  0@5976r weight:0.000000e+00
%34 [4784r,4800r:0)  0@4784r weight:0.000000e+00
%36 [5928r,5936r:0)  0@5928r weight:0.000000e+00
%37 [5936r,5944r:0)  0@5936r weight:0.000000e+00
%38 [4864r,5528r:0)  0@4864r weight:0.000000e+00
%40 [4320r,6000B:0)  0@4320r weight:0.000000e+00
%41 [5528r,5808r:0)  0@5528r weight:0.000000e+00
%42 [4352r,6000B:0)  0@4352r weight:0.000000e+00
%43 [5560r,5576r:0)  0@5560r weight:0.000000e+00
%44 [4912r,5536r:0)  0@4912r weight:0.000000e+00
%45 [5536r,5568r:0)  0@5536r weight:0.000000e+00
%46 [5568r,5816r:0)  0@5568r weight:0.000000e+00
%47 [5576r,5584r:0)  0@5576r weight:0.000000e+00
%48 [4976r,5544r:0)  0@4976r weight:0.000000e+00
%49 [5544r,5880r:0)  0@5544r weight:0.000000e+00
%50 [5584r,5760r:0)  0@5584r weight:0.000000e+00
%51 [5024r,5552r:0)  0@5024r weight:0.000000e+00
%53 [4368r,6000B:0)  0@4368r weight:0.000000e+00
%54 [5552r,5736r:0)  0@5552r weight:0.000000e+00
%55 [4400r,6000B:0)  0@4400r weight:0.000000e+00
%56 [5616r,5624r:0)  0@5616r weight:0.000000e+00
%57 [5624r,5632r:0)  0@5624r weight:0.000000e+00
%58 [5632r,5640r:0)  0@5632r weight:0.000000e+00
%59 [5640r,5760r:0)  0@5640r weight:0.000000e+00
%60 [5760r,5840r:0)  0@5760r weight:0.000000e+00
%61 [4416r,6000B:0)  0@4416r weight:0.000000e+00
%62 [5592r,5600r:0)  0@5592r weight:0.000000e+00
%63 [5600r,5608r:0)  0@5600r weight:0.000000e+00
%64 [5608r,5784r:0)  0@5608r weight:0.000000e+00
%65 [4484r,6000B:0)  0@4484r weight:0.000000e+00
%66 [5648r,5656r:0)  0@5648r weight:0.000000e+00
%67 [5656r,5664r:0)  0@5656r weight:0.000000e+00
%68 [5664r,5672r:0)  0@5664r weight:0.000000e+00
%69 [5672r,5784r:0)  0@5672r weight:0.000000e+00
%70 [5784r,5840r:0)  0@5784r weight:0.000000e+00
%71 [5840r,5848r:0)  0@5840r weight:0.000000e+00
%72 [5280r,5728r:0)  0@5280r weight:0.000000e+00
%73 [5728r,5744r:0)  0@5728r weight:0.000000e+00
%74 [5744r,5880r:0)  0@5744r weight:0.000000e+00
%75 [5768r,5800r:0)  0@5768r weight:0.000000e+00
%76 [4488r,6000B:0)  0@4488r weight:0.000000e+00
%77 [5680r,5688r:0)  0@5680r weight:0.000000e+00
%78 [5688r,5696r:0)  0@5688r weight:0.000000e+00
%79 [5696r,5704r:0)  0@5696r weight:0.000000e+00
%80 [5704r,5800r:0)  0@5704r weight:0.000000e+00
%81 [5800r,5848r:0)  0@5800r weight:0.000000e+00
%82 [5848r,5856r:0)  0@5848r weight:0.000000e+00
%83 [4464r,4480r:0)  0@4464r weight:0.000000e+00
%84 [4480r,6000B:0)  0@4480r weight:0.000000e+00
%85 [5856r,5872r:0)  0@5856r weight:0.000000e+00
%86 [4496r,6000B:0)  0@4496r weight:0.000000e+00
%87 [5736r,5752r:0)  0@5736r weight:0.000000e+00
%88 [5752r,5776r:0)  0@5752r weight:0.000000e+00
%89 [5776r,5792r:0)  0@5776r weight:0.000000e+00
%90 [5792r,5824r:0)  0@5792r weight:0.000000e+00
%91 [5520r,5824r:0)  0@5520r weight:0.000000e+00
%92 [5824r,5864r:0)  0@5824r weight:0.000000e+00
%93 [5720r,5808r:0)  0@5720r weight:0.000000e+00
%94 [5808r,5816r:0)  0@5808r weight:0.000000e+00
%95 [5816r,5832r:0)  0@5816r weight:0.000000e+00
%96 [5832r,5864r:0)  0@5832r weight:0.000000e+00
%97 [5864r,5872r:0)  0@5864r weight:0.000000e+00
%98 [5872r,5880r:0)  0@5872r weight:0.000000e+00
%99 [5888r,5896r:0)  0@5888r weight:0.000000e+00
%100 [5896r,5904r:0)  0@5896r weight:0.000000e+00
%102 [3312r,3328r:0)  0@3312r weight:0.000000e+00
%104 [4208r,4224r:0)  0@4208r weight:0.000000e+00
%105 [4224r,4240r:0)  0@4224r weight:0.000000e+00
%107 [3440r,3456r:0)  0@3440r weight:0.000000e+00
%109 [4128r,4144r:0)  0@4128r weight:0.000000e+00
%110 [4144r,4160r:0)  0@4144r weight:0.000000e+00
%112 [3568r,3584r:0)  0@3568r weight:0.000000e+00
%114 [4048r,4064r:0)  0@4048r weight:0.000000e+00
%115 [4064r,4080r:0)  0@4064r weight:0.000000e+00
%116 [3648r,3832r:0)  0@3648r weight:0.000000e+00
%117 [3664r,3888r:0)  0@3664r weight:0.000000e+00
%119 [3104r,4272B:0)  0@3104r weight:0.000000e+00
%121 [3832r,3896r:0)  0@3832r weight:0.000000e+00
%122 [3696r,3840r:0)  0@3696r weight:0.000000e+00
%123 [3840r,3892r:0)  0@3840r weight:0.000000e+00
%124 [3892r,3904r:0)  0@3892r weight:0.000000e+00
%125 [3896r,3952r:0)  0@3896r weight:0.000000e+00
%126 [3760r,3848r:0)  0@3760r weight:0.000000e+00
%127 [3848r,3952r:0)  0@3848r weight:0.000000e+00
%128 [3928r,3944r:0)  0@3928r weight:0.000000e+00
%129 [3808r,3856r:0)  0@3808r weight:0.000000e+00
%130 [3824r,3920r:0)  0@3824r weight:0.000000e+00
%132 [3856r,3904r:0)  0@3856r weight:0.000000e+00
%133 [3904r,3912r:0)  0@3904r weight:0.000000e+00
%134 [3912r,3936r:0)  0@3912r weight:0.000000e+00
%136 [3136r,4272B:0)  0@3136r weight:0.000000e+00
%139 [3888r,3920r:0)  0@3888r weight:0.000000e+00
%140 [3920r,3936r:0)  0@3920r weight:0.000000e+00
%141 [3936r,3944r:0)  0@3936r weight:0.000000e+00
%142 [3944r,3952r:0)  0@3944r weight:0.000000e+00
%143 [3968r,3984r:0)  0@3968r weight:0.000000e+00
%144 [3984r,4000r:0)  0@3984r weight:0.000000e+00
%146 [1952r,1968r:0)  0@1952r weight:0.000000e+00
%148 [2848r,2864r:0)  0@2848r weight:0.000000e+00
%149 [2864r,2880r:0)  0@2864r weight:0.000000e+00
%151 [2080r,2096r:0)  0@2080r weight:0.000000e+00
%153 [2800r,2808r:0)  0@2800r weight:0.000000e+00
%154 [2808r,2816r:0)  0@2808r weight:0.000000e+00
%156 [2208r,2224r:0)  0@2208r weight:0.000000e+00
%158 [2760r,2768r:0)  0@2760r weight:0.000000e+00
%159 [2768r,2776r:0)  0@2768r weight:0.000000e+00
%160 [2288r,2612r:0)  0@2288r weight:0.000000e+00
%162 [1744r,2912B:0)  0@1744r weight:0.000000e+00
%163 [2612r,2656r:0)  0@2612r weight:0.000000e+00
%165 [2656r,2672r:0)  0@2656r weight:0.000000e+00
%166 [2336r,2648r:0)  0@2336r weight:0.000000e+00
%167 [2648r,2664r:0)  0@2648r weight:0.000000e+00
%168 [2664r,2680r:0)  0@2664r weight:0.000000e+00
%169 [2672r,2728r:0)  0@2672r weight:0.000000e+00
%170 [2456r,2616r:0)  0@2456r weight:0.000000e+00
%171 [2616r,2728r:0)  0@2616r weight:0.000000e+00
%172 [2696r,2720r:0)  0@2696r weight:0.000000e+00
%173 [2448r,2624r:0)  0@2448r weight:0.000000e+00
%174 [2624r,2632r:0)  0@2624r weight:0.000000e+00
%175 [2480r,2688r:0)  0@2480r weight:0.000000e+00
%177 [1776r,2912B:0)  0@1776r weight:0.000000e+00
%179 [2632r,2640r:0)  0@2632r weight:0.000000e+00
%180 [2640r,2712r:0)  0@2640r weight:0.000000e+00
%182 [2680r,2688r:0)  0@2680r weight:0.000000e+00
%183 [2688r,2712r:0)  0@2688r weight:0.000000e+00
%184 [2712r,2720r:0)  0@2712r weight:0.000000e+00
%185 [2720r,2728r:0)  0@2720r weight:0.000000e+00
%186 [2608r,2704r:0)  0@2608r weight:0.000000e+00
%187 [2704r,2736r:0)  0@2704r weight:0.000000e+00
%189 [592r,608r:0)  0@592r weight:0.000000e+00
%191 [1488r,1504r:0)  0@1488r weight:0.000000e+00
%192 [1504r,1520r:0)  0@1504r weight:0.000000e+00
%194 [720r,736r:0)  0@720r weight:0.000000e+00
%196 [1440r,1448r:0)  0@1440r weight:0.000000e+00
%197 [1448r,1456r:0)  0@1448r weight:0.000000e+00
%199 [848r,864r:0)  0@848r weight:0.000000e+00
%201 [1400r,1408r:0)  0@1400r weight:0.000000e+00
%202 [1408r,1416r:0)  0@1408r weight:0.000000e+00
%203 [928r,1272r:0)  0@928r weight:0.000000e+00
%205 [368r,1552B:0)  0@368r weight:0.000000e+00
%206 [1272r,1296r:0)  0@1272r weight:0.000000e+00
%208 [1296r,1312r:0)  0@1296r weight:0.000000e+00
%209 [976r,1280r:0)  0@976r weight:0.000000e+00
%210 [1280r,1304r:0)  0@1280r weight:0.000000e+00
%211 [1304r,1320r:0)  0@1304r weight:0.000000e+00
%212 [1312r,1368r:0)  0@1312r weight:0.000000e+00
%213 [1040r,1252r:0)  0@1040r weight:0.000000e+00
%214 [1252r,1368r:0)  0@1252r weight:0.000000e+00
%215 [1336r,1360r:0)  0@1336r weight:0.000000e+00
%216 [1088r,1328r:0)  0@1088r weight:0.000000e+00
%218 [400r,1552B:0)  0@400r weight:0.000000e+00
%220 [432r,4272B:0)  0@432r weight:0.000000e+00
%221 [1256r,1264r:0)  0@1256r weight:0.000000e+00
%222 [1264r,1352r:0)  0@1264r weight:0.000000e+00
%223 [1136r,1288r:0)  0@1136r weight:0.000000e+00
%224 [1288r,1320r:0)  0@1288r weight:0.000000e+00
%225 [1320r,1328r:0)  0@1320r weight:0.000000e+00
%226 [1328r,1352r:0)  0@1328r weight:0.000000e+00
%227 [1352r,1360r:0)  0@1352r weight:0.000000e+00
%228 [1360r,1368r:0)  0@1360r weight:0.000000e+00
%229 [1248r,1344r:0)  0@1248r weight:0.000000e+00
%230 [1344r,1376r:0)  0@1344r weight:0.000000e+00
RegMasks: 304r 1680r 3040r
********** MACHINEINSTRS **********
# Machine code for function laplacian: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=1000, align=16, at location [SP]
  fi#9: size=1000, align=16, at location [SP]
Constant Pool:
  cp#0: 5.000000e-03, align=8
Function Live Ins: $x0 in %0, $x1 in %1, $w2 in %2

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $x0, $x1, $w2
16B	  %2:gpr32 = COPY $w2
32B	  %1:gpr64 = COPY $x1
48B	  %0:gpr64 = COPY $x0
64B	  STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
112B	  %3:gpr64common = ADRP target-flags(aarch64-page) @dtime
128B	  %4:fpr64 = LDRDui %3:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
132B	  STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
136B	  STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
144B	  %5:fpr64 = FMOVDi 112
160B	  %6:fpr64 = FDIVDrr %5:fpr64, %4:fpr64
176B	  STRDui %6:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)
192B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
256B	  $x0 = ADDXri %stack.8.tm1, 0, 0
288B	  $d0 = FMOVD0
292B	  $w1 = MOVi32imm 125
296B	  %7:gpr64common = ADDXri %stack.8.tm1, 0, 0
304B	  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
320B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
352B	  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
368B	  undef %205.sub_32:gpr64 = MOVi32imm 200
400B	  undef %218.sub_32:gpr64 = MOVi32imm 40
432B	  %220:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

448B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.11
	  successors: %bb.2(0x7c000000), %bb.12(0x04000000); %bb.2(96.88%), %bb.12(3.12%)

464B	  %11:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
480B	  dead $wzr = SUBSWri %11:gpr32common, 4, 0, implicit-def $nzcv
496B	  Bcc 12, %bb.12, implicit killed $nzcv
512B	  B %bb.2

528B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

560B	  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)

576B	bb.3.for.cond1:
	; predecessors: %bb.2, %bb.10
	  successors: %bb.4(0x7c000000), %bb.11(0x04000000); %bb.4(96.88%), %bb.11(3.12%)

592B	  %189:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
608B	  dead $wzr = SUBSWri %189:gpr32common, 4, 0, implicit-def $nzcv
624B	  Bcc 12, %bb.11, implicit killed $nzcv
640B	  B %bb.4

656B	bb.4.for.body3:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

688B	  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

704B	bb.5.for.cond4:
	; predecessors: %bb.4, %bb.9
	  successors: %bb.6(0x7c000000), %bb.10(0x04000000); %bb.6(96.88%), %bb.10(3.12%)

720B	  %194:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
736B	  dead $wzr = SUBSWri %194:gpr32common, 4, 0, implicit-def $nzcv
752B	  Bcc 12, %bb.10, implicit killed $nzcv
768B	  B %bb.6

784B	bb.6.for.body6:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

816B	  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

832B	bb.7.for.cond7:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

848B	  %199:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
864B	  dead $wzr = SUBSWri %199:gpr32common, 4, 0, implicit-def $nzcv
880B	  Bcc 12, %bb.9, implicit killed $nzcv
896B	  B %bb.8

912B	bb.8.for.body9:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

928B	  %203:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
976B	  %209:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
1040B	  %213:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
1088B	  %216:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
1136B	  %223:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
1248B	  %229:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
1252B	  %214:gpr64 = UBFMXri %213:gpr64, 61, 60
1256B	  %221:gpr64common = MADDXrrr %216:gpr64, %218:gpr64, %220:gpr64
1264B	  %222:fpr64 = LDRDroX %221:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
1272B	  %206:gpr64 = MADDXrrr %203:gpr64, %205:gpr64, $xzr
1280B	  %210:gpr64 = ADDXrs %209:gpr64, %209:gpr64, 2
1288B	  %224:gpr64 = ADDXrr %223:gpr64, %206:gpr64
1296B	  %208:gpr64 = ADDXrr %7:gpr64common, %206:gpr64
1304B	  %211:gpr64 = UBFMXri %210:gpr64, 61, 60
1312B	  %212:gpr64common = ADDXrr %208:gpr64, %211:gpr64
1320B	  %225:gpr64common = ADDXrr %224:gpr64, %211:gpr64
1328B	  %226:fpr64 = LDRDroX %225:gpr64common, %216:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
1336B	  %215:fpr64 = LDRDroX %212:gpr64common, %214:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
1344B	  %230:gpr32common = nsw ADDWri %229:gpr32common, 1, 0
1352B	  %227:fpr64 = FMULDrr %222:fpr64, %226:fpr64
1360B	  %228:fpr64 = FADDDrr %215:fpr64, %227:fpr64
1368B	  STRDroX %228:fpr64, %212:gpr64common, %214:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
1376B	  STRWui %230:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
1384B	  B %bb.7

1392B	bb.9.for.inc30:
	; predecessors: %bb.7
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1400B	  %201:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
1408B	  %202:gpr32common = nsw ADDWri %201:gpr32common, 1, 0
1416B	  STRWui %202:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
1424B	  B %bb.5

1432B	bb.10.for.inc33:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1440B	  %196:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
1448B	  %197:gpr32common = nsw ADDWri %196:gpr32common, 1, 0
1456B	  STRWui %197:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
1464B	  B %bb.3

1472B	bb.11.for.inc36:
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

1488B	  %191:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
1504B	  %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
1520B	  STRWui %192:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
1536B	  B %bb.1

1552B	bb.12.for.end38:
	; predecessors: %bb.1
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1568B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1632B	  $x0 = ADDXri %stack.9.tm2, 0, 0
1664B	  $d0 = FMOVD0
1668B	  $w1 = MOVi32imm 125
1672B	  %13:gpr64common = ADDXri %stack.9.tm2, 0, 0
1680B	  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
1696B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1728B	  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
1744B	  undef %162.sub_32:gpr64 = MOVi32imm 200
1776B	  undef %177.sub_32:gpr64 = MOVi32imm 40

1808B	bb.13.for.cond40:
	; predecessors: %bb.12, %bb.23
	  successors: %bb.14(0x7c000000), %bb.24(0x04000000); %bb.14(96.88%), %bb.24(3.12%)

1824B	  %17:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
1840B	  dead $wzr = SUBSWri %17:gpr32common, 4, 0, implicit-def $nzcv
1856B	  Bcc 12, %bb.24, implicit killed $nzcv
1872B	  B %bb.14

1888B	bb.14.for.body42:
	; predecessors: %bb.13
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

1920B	  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)

1936B	bb.15.for.cond43:
	; predecessors: %bb.14, %bb.22
	  successors: %bb.16(0x7c000000), %bb.23(0x04000000); %bb.16(96.88%), %bb.23(3.12%)

1952B	  %146:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
1968B	  dead $wzr = SUBSWri %146:gpr32common, 4, 0, implicit-def $nzcv
1984B	  Bcc 12, %bb.23, implicit killed $nzcv
2000B	  B %bb.16

2016B	bb.16.for.body45:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2048B	  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

2064B	bb.17.for.cond46:
	; predecessors: %bb.16, %bb.21
	  successors: %bb.18(0x7c000000), %bb.22(0x04000000); %bb.18(96.88%), %bb.22(3.12%)

2080B	  %151:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
2096B	  dead $wzr = SUBSWri %151:gpr32common, 4, 0, implicit-def $nzcv
2112B	  Bcc 12, %bb.22, implicit killed $nzcv
2128B	  B %bb.18

2144B	bb.18.for.body48:
	; predecessors: %bb.17
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2176B	  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

2192B	bb.19.for.cond49:
	; predecessors: %bb.18, %bb.20
	  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

2208B	  %156:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
2224B	  dead $wzr = SUBSWri %156:gpr32common, 4, 0, implicit-def $nzcv
2240B	  Bcc 12, %bb.21, implicit killed $nzcv
2256B	  B %bb.20

2272B	bb.20.for.body51:
	; predecessors: %bb.19
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2288B	  %160:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
2336B	  %166:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
2448B	  %173:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
2456B	  %170:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
2480B	  %175:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
2608B	  %186:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
2612B	  %163:gpr64 = MADDXrrr %160:gpr64, %162:gpr64, $xzr
2616B	  %171:gpr64 = UBFMXri %170:gpr64, 61, 60
2624B	  %174:gpr64 = ADDXrr %173:gpr64, %163:gpr64
2632B	  %179:gpr64common = MADDXrrr %175:gpr64, %177:gpr64, %174:gpr64
2640B	  %180:fpr64 = LDRDroX %179:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
2648B	  %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
2656B	  %165:gpr64 = ADDXrr %13:gpr64common, %163:gpr64
2664B	  %168:gpr64 = UBFMXri %167:gpr64, 61, 60
2672B	  %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
2680B	  %182:gpr64common = ADDXrr %220:gpr64, %168:gpr64
2688B	  %183:fpr64 = LDRDroX %182:gpr64common, %175:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
2696B	  %172:fpr64 = LDRDroX %169:gpr64common, %171:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
2704B	  %187:gpr32common = nsw ADDWri %186:gpr32common, 1, 0
2712B	  %184:fpr64 = FMULDrr %180:fpr64, %183:fpr64
2720B	  %185:fpr64 = FADDDrr %172:fpr64, %184:fpr64
2728B	  STRDroX %185:fpr64, %169:gpr64common, %171:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
2736B	  STRWui %187:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
2744B	  B %bb.19

2752B	bb.21.for.inc79:
	; predecessors: %bb.19
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2760B	  %158:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
2768B	  %159:gpr32common = nsw ADDWri %158:gpr32common, 1, 0
2776B	  STRWui %159:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
2784B	  B %bb.17

2792B	bb.22.for.inc82:
	; predecessors: %bb.17
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2800B	  %153:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
2808B	  %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
2816B	  STRWui %154:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
2824B	  B %bb.15

2832B	bb.23.for.inc85:
	; predecessors: %bb.15
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2848B	  %148:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
2864B	  %149:gpr32common = nsw ADDWri %148:gpr32common, 1, 0
2880B	  STRWui %149:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
2896B	  B %bb.13

2912B	bb.24.for.end87:
	; predecessors: %bb.13
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

2928B	  %19:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
2944B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3024B	  $d0 = FMOVD0
3028B	  $w1 = MOVi32imm 125
3032B	  $x0 = COPY %19:gpr64
3040B	  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
3056B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3088B	  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
3104B	  undef %119.sub_32:gpr64 = MOVi32imm 200
3136B	  undef %136.sub_32:gpr64 = MOVi32imm 40

3168B	bb.25.for.cond88:
	; predecessors: %bb.24, %bb.35
	  successors: %bb.26(0x7c000000), %bb.36(0x04000000); %bb.26(96.88%), %bb.36(3.12%)

3184B	  %23:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
3200B	  dead $wzr = SUBSWri %23:gpr32common, 4, 0, implicit-def $nzcv
3216B	  Bcc 12, %bb.36, implicit killed $nzcv
3232B	  B %bb.26

3248B	bb.26.for.body90:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

3280B	  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)

3296B	bb.27.for.cond91:
	; predecessors: %bb.26, %bb.34
	  successors: %bb.28(0x7c000000), %bb.35(0x04000000); %bb.28(96.88%), %bb.35(3.12%)

3312B	  %102:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
3328B	  dead $wzr = SUBSWri %102:gpr32common, 4, 0, implicit-def $nzcv
3344B	  Bcc 12, %bb.35, implicit killed $nzcv
3360B	  B %bb.28

3376B	bb.28.for.body93:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

3408B	  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

3424B	bb.29.for.cond94:
	; predecessors: %bb.28, %bb.33
	  successors: %bb.30(0x7c000000), %bb.34(0x04000000); %bb.30(96.88%), %bb.34(3.12%)

3440B	  %107:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
3456B	  dead $wzr = SUBSWri %107:gpr32common, 4, 0, implicit-def $nzcv
3472B	  Bcc 12, %bb.34, implicit killed $nzcv
3488B	  B %bb.30

3504B	bb.30.for.body96:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

3536B	  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

3552B	bb.31.for.cond97:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

3568B	  %112:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
3584B	  dead $wzr = SUBSWri %112:gpr32common, 4, 0, implicit-def $nzcv
3600B	  Bcc 12, %bb.33, implicit killed $nzcv
3616B	  B %bb.32

3632B	bb.32.for.body99:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

3648B	  %116:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
3664B	  %117:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
3696B	  %122:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
3760B	  %126:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
3808B	  %129:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
3824B	  %130:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
3832B	  %121:gpr64 = MADDXrrr %117:gpr64, %119:gpr64, %116:gpr64
3840B	  %123:gpr64 = ADDXrs %122:gpr64, %122:gpr64, 2
3848B	  %127:gpr64 = UBFMXri %126:gpr64, 61, 60
3856B	  %132:gpr64 = MADDXrrr %130:gpr64, %119:gpr64, %129:gpr64
3888B	  %139:gpr64common = MADDXrrr %117:gpr64, %136:gpr64, %220:gpr64
3892B	  %124:gpr64 = UBFMXri %123:gpr64, 61, 60
3896B	  %125:gpr64common = ADDXrr %121:gpr64, %124:gpr64
3904B	  %133:gpr64common = ADDXrr %132:gpr64, %124:gpr64
3912B	  %134:fpr64 = LDRDroX %133:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
3920B	  %140:fpr64 = LDRDroX %139:gpr64common, %130:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
3928B	  %128:fpr64 = LDRDroX %125:gpr64common, %127:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
3936B	  %141:fpr64 = FMULDrr %134:fpr64, %140:fpr64
3944B	  %142:fpr64 = FADDDrr %128:fpr64, %141:fpr64
3952B	  STRDroX %142:fpr64, %125:gpr64common, %127:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
3968B	  %143:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
3984B	  %144:gpr32common = nsw ADDWri %143:gpr32common, 1, 0
4000B	  STRWui %144:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
4016B	  B %bb.31

4032B	bb.33.for.inc127:
	; predecessors: %bb.31
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

4048B	  %114:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
4064B	  %115:gpr32common = nsw ADDWri %114:gpr32common, 1, 0
4080B	  STRWui %115:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
4096B	  B %bb.29

4112B	bb.34.for.inc130:
	; predecessors: %bb.29
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4128B	  %109:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
4144B	  %110:gpr32common = nsw ADDWri %109:gpr32common, 1, 0
4160B	  STRWui %110:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
4176B	  B %bb.27

4192B	bb.35.for.inc133:
	; predecessors: %bb.27
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4208B	  %104:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
4224B	  %105:gpr32common = nsw ADDWri %104:gpr32common, 1, 0
4240B	  STRWui %105:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
4256B	  B %bb.25

4272B	bb.36.for.end135:
	; predecessors: %bb.25
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

4304B	  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
4320B	  undef %40.sub_32:gpr64 = MOVi32imm 200
4352B	  %42:gpr64common = ADDXri %stack.8.tm1, 0, 0
4368B	  undef %53.sub_32:gpr64 = MOVi32imm 1000
4400B	  %55:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
4416B	  %61:gpr64common = ADDXri %stack.9.tm2, 0, 0
4464B	  %83:gpr64common = ADRP target-flags(aarch64-page) %const.0
4480B	  %84:fpr64 = LDRDui %83:gpr64common, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
4484B	  %65:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
4488B	  %76:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
4496B	  %86:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s

4512B	bb.37.for.cond136:
	; predecessors: %bb.36, %bb.44
	  successors: %bb.38(0x7c000000), %bb.45(0x04000000); %bb.38(96.88%), %bb.45(3.12%)

4528B	  %26:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
4544B	  dead $wzr = SUBSWri %26:gpr32common, 4, 0, implicit-def $nzcv
4560B	  Bcc 12, %bb.45, implicit killed $nzcv
4576B	  B %bb.38

4592B	bb.38.for.body138:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

4624B	  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

4640B	bb.39.for.cond139:
	; predecessors: %bb.38, %bb.43
	  successors: %bb.40(0x7c000000), %bb.44(0x04000000); %bb.40(96.88%), %bb.44(3.12%)

4656B	  %29:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
4672B	  dead $wzr = SUBSWri %29:gpr32common, 4, 0, implicit-def $nzcv
4688B	  Bcc 12, %bb.44, implicit killed $nzcv
4704B	  B %bb.40

4720B	bb.40.for.body141:
	; predecessors: %bb.39
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

4752B	  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

4768B	bb.41.for.cond142:
	; predecessors: %bb.40, %bb.42
	  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)

4784B	  %34:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
4800B	  dead $wzr = SUBSWri %34:gpr32common, 4, 0, implicit-def $nzcv
4816B	  Bcc 12, %bb.43, implicit killed $nzcv
4832B	  B %bb.42

4848B	bb.42.for.body144:
	; predecessors: %bb.41
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

4864B	  %38:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
4912B	  %44:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
4976B	  %48:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
5024B	  %51:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
5280B	  %72:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
5520B	  %91:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
5528B	  %41:gpr64 = MADDXrrr %38:gpr64, %40:gpr64, $xzr
5536B	  %45:gpr64 = ADDXrs %44:gpr64, %44:gpr64, 2
5544B	  %49:gpr64 = UBFMXri %48:gpr64, 61, 60
5552B	  %54:gpr64 = MADDXrrr %51:gpr64, %53:gpr64, $xzr
5560B	  %43:gpr64 = ADDXrr %42:gpr64common, %41:gpr64
5568B	  %46:gpr64 = UBFMXri %45:gpr64, 61, 60
5576B	  %47:gpr64common = ADDXrr %43:gpr64, %46:gpr64
5584B	  %50:fpr64 = LDRDroX %47:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
5592B	  %62:gpr64 = ADDXrr %61:gpr64common, %41:gpr64
5600B	  %63:gpr64common = ADDXrr %62:gpr64, %46:gpr64
5608B	  %64:fpr64 = LDRDroX %63:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
5616B	  %56:gpr64 = ADDXrr %55:gpr64, %54:gpr64
5624B	  %57:gpr64 = ADDXrr %56:gpr64, %41:gpr64
5632B	  %58:gpr64common = ADDXrr %57:gpr64, %46:gpr64
5640B	  %59:fpr64 = LDRDroX %58:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
5648B	  %66:gpr64 = ADDXrr %65:gpr64, %54:gpr64
5656B	  %67:gpr64 = ADDXrr %66:gpr64, %41:gpr64
5664B	  %68:gpr64common = ADDXrr %67:gpr64, %46:gpr64
5672B	  %69:fpr64 = LDRDroX %68:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
5680B	  %77:gpr64 = ADDXrr %76:gpr64, %54:gpr64
5688B	  %78:gpr64 = ADDXrr %77:gpr64, %41:gpr64
5696B	  %79:gpr64common = ADDXrr %78:gpr64, %46:gpr64
5704B	  %80:fpr64 = LDRDroX %79:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
5720B	  %93:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
5728B	  %73:gpr64 = ADDXrr %72:gpr64, %41:gpr64
5736B	  %87:gpr64 = ADDXrr %86:gpr64, %54:gpr64
5744B	  %74:gpr64common = ADDXrr %73:gpr64, %46:gpr64
5752B	  %88:gpr64 = ADDXrr %87:gpr64, %41:gpr64
5760B	  %60:fpr64 = FMULDrr %50:fpr64, %59:fpr64
5768B	  %75:fpr64 = LDRDroX %74:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
5776B	  %89:gpr64common = ADDXrr %88:gpr64, %46:gpr64
5784B	  %70:fpr64 = FMULDrr %64:fpr64, %69:fpr64
5792B	  %90:fpr64 = LDRDroX %89:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
5800B	  %81:fpr64 = FMULDrr %75:fpr64, %80:fpr64
5808B	  %94:gpr64 = ADDXrr %93:gpr64, %41:gpr64
5816B	  %95:gpr64common = ADDXrr %94:gpr64, %46:gpr64
5824B	  %92:fpr64 = FMULDrr %90:fpr64, %91:fpr64
5832B	  %96:fpr64 = LDRDroX %95:gpr64common, %49:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
5840B	  %71:fpr64 = FADDDrr %60:fpr64, %70:fpr64
5848B	  %82:fpr64 = FADDDrr %71:fpr64, %81:fpr64
5856B	  %85:fpr64 = FMULDrr %82:fpr64, %84:fpr64
5864B	  %97:fpr64 = FMULDrr %92:fpr64, %96:fpr64
5872B	  %98:fpr64 = FADDDrr %85:fpr64, %97:fpr64
5880B	  STRDroX %98:fpr64, %74:gpr64common, %49:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
5888B	  %99:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
5896B	  %100:gpr32common = nsw ADDWri %99:gpr32common, 1, 0
5904B	  STRWui %100:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
5912B	  B %bb.41

5920B	bb.43.for.inc219:
	; predecessors: %bb.41
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

5928B	  %36:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
5936B	  %37:gpr32common = nsw ADDWri %36:gpr32common, 1, 0
5944B	  STRWui %37:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
5952B	  B %bb.39

5960B	bb.44.for.inc222:
	; predecessors: %bb.39
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

5968B	  %31:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
5976B	  %32:gpr32common = nsw ADDWri %31:gpr32common, 1, 0
5984B	  STRWui %32:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
5992B	  B %bb.37

6000B	bb.45.for.end224:
	; predecessors: %bb.37

6008B	  RET_ReallyLR

# End machine code for function laplacian.

Before post-MI-sched:
# Machine code for function laplacian: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=4, align=4, at location [SP-60]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=4, align=4, at location [SP-76]
  fi#5: size=4, align=4, at location [SP-80]
  fi#6: size=4, align=4, at location [SP-84]
  fi#7: size=4, align=4, at location [SP-88]
  fi#8: size=1000, align=16, at location [SP-1088]
  fi#9: size=1000, align=16, at location [SP-2096]
  fi#10: size=8, align=8, at location [SP-8]
  fi#11: size=8, align=8, at location [SP-16]
  fi#12: size=8, align=8, at location [SP-24]
  fi#13: size=8, align=8, at location [SP-32]
  fi#14: size=8, align=16, at location [SP-48]
Constant Pool:
  cp#0: 5.000000e-03, align=8
Function Live Ins: $x0, $x1, $w2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w2, $x0, $x1, $x28, $x19, $x20, $lr
  early-clobber $sp = frame-setup STRXpre killed $x28, $sp(tied-def 0), -48 :: (store 8 into %stack.14)
  frame-setup STPXi killed $x20, killed $x19, $sp, 2 :: (store 8 into %stack.13), (store 8 into %stack.12)
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store 8 into %stack.11), (store 8 into %stack.10)
  $fp = frame-setup ADDXri $sp, 32, 0
  $sp = frame-setup SUBXri $sp, 2048, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  frame-setup CFI_INSTRUCTION offset $w28, -48
  STURXi killed renamable $x0, $fp, -24 :: (store 8 into %ir.r.addr)
  renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  STURXi killed renamable $x1, $fp, -40 :: (store 8 into %ir.u.addr)
  STURWi killed renamable $w2, $fp, -44 :: (store 4 into %ir.sizei.addr)
  renamable $d1 = FMOVDi 112
  renamable $d0 = FDIVDrr killed renamable $d1, killed renamable $d0
  STURDi killed renamable $d0, $fp, -56 :: (store 8 into %ir.rdtime)
  $x0 = ADDXri $sp, 1008, 0
  $d0 = FMOVD0
  $w1 = MOVZWi 125, 0
  $x20 = ADDXri $sp, 1008, 0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  $w8 = MOVZWi 200, 0, implicit-def $x8
  $w9 = MOVZWi 40, 0, implicit-def $x9
  $x19 = ADRP target-flags(aarch64-page) @wdtdr
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.11
  successors: %bb.2(0x7c000000), %bb.12(0x04000000); %bb.2(96.88%), %bb.12(3.12%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.12, implicit $nzcv

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x19, $x20
  STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)

bb.3.for.cond1:
; predecessors: %bb.2, %bb.10
  successors: %bb.4(0x7c000000), %bb.11(0x04000000); %bb.4(96.88%), %bb.11(3.12%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.11, implicit $nzcv

bb.4.for.body3:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x8, $x9, $x19, $x20
  STURWi $wzr, $fp, -64 :: (store 4 into %ir.j)

bb.5.for.cond4:
; predecessors: %bb.4, %bb.9
  successors: %bb.6(0x7c000000), %bb.10(0x04000000); %bb.6(96.88%), %bb.10(3.12%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.10, implicit $nzcv

bb.6.for.body6:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x9, $x19, $x20
  STURWi $wzr, $fp, -60 :: (store 4 into %ir.i)

bb.7.for.cond7:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.9, implicit $nzcv

bb.8.for.body9:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x9, $x19, $x20
  renamable $x10, renamable $x13 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  renamable $x11, renamable $x12 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  renamable $x14 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  renamable $w15 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $x12 = UBFMXri killed renamable $x12, 61, 60
  renamable $x16 = MADDXrrr renamable $x13, renamable $x9, renamable $x19
  renamable $d0 = LDRDroX killed renamable $x16, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx17)
  renamable $x10 = MADDXrrr killed renamable $x10, renamable $x8, $xzr
  renamable $x11 = ADDXrs killed renamable $x11, renamable $x11, 2
  $x14 = ADDXrs killed renamable $x14, renamable $x10, 0
  $x10 = ADDXrs renamable $x20, killed renamable $x10, 0
  renamable $x11 = UBFMXri killed renamable $x11, 61, 60
  $x10 = ADDXrs killed renamable $x10, renamable $x11, 0
  $x11 = ADDXrs killed renamable $x14, killed renamable $x11, 0
  renamable $d1 = LDRDroX killed renamable $x11, killed renamable $x13, 0, 1 :: (load 8 from %ir.arrayidx23)
  renamable $d2 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx13)
  renamable $w11 = nsw ADDWri killed renamable $w15, 1, 0
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  STRDroX killed renamable $d0, killed renamable $x10, killed renamable $x12, 0, 0 :: (store 8 into %ir.arrayidx29)
  STURWi killed renamable $w11, $fp, -60 :: (store 4 into %ir.i)
  B %bb.7

bb.9.for.inc30:
; predecessors: %bb.7
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -64 :: (store 4 into %ir.j)
  B %bb.5

bb.10.for.inc33:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -68 :: (store 4 into %ir.k)
  B %bb.3

bb.11.for.inc36:
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -72 :: (store 4 into %ir.iz)
  B %bb.1

bb.12.for.end38:
; predecessors: %bb.1
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $x19
  $x0 = ADDXri $sp, 0, 0
  $d0 = FMOVD0
  $w1 = MOVZWi 125, 0
  $x20 = ADDXri $sp, 0, 0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  $w8 = MOVZWi 200, 0, implicit-def $x8
  $w9 = MOVZWi 40, 0, implicit-def $x9

bb.13.for.cond40:
; predecessors: %bb.12, %bb.23
  successors: %bb.14(0x7c000000), %bb.24(0x04000000); %bb.14(96.88%), %bb.24(3.12%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.24, implicit $nzcv

bb.14.for.body42:
; predecessors: %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $x8, $x9, $x19, $x20
  STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)

bb.15.for.cond43:
; predecessors: %bb.14, %bb.22
  successors: %bb.16(0x7c000000), %bb.23(0x04000000); %bb.16(96.88%), %bb.23(3.12%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.23, implicit $nzcv

bb.16.for.body45:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $x8, $x9, $x19, $x20
  STURWi $wzr, $fp, -64 :: (store 4 into %ir.j)

bb.17.for.cond46:
; predecessors: %bb.16, %bb.21
  successors: %bb.18(0x7c000000), %bb.22(0x04000000); %bb.18(96.88%), %bb.22(3.12%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.22, implicit $nzcv

bb.18.for.body48:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x8, $x9, $x19, $x20
  STURWi $wzr, $fp, -60 :: (store 4 into %ir.i)

bb.19.for.cond49:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.21, implicit $nzcv

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x8, $x9, $x19, $x20
  renamable $x10, renamable $x14 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  renamable $x11, renamable $x13 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  renamable $x12 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  renamable $w15 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $x10 = MADDXrrr killed renamable $x10, renamable $x8, $xzr
  renamable $x13 = UBFMXri killed renamable $x13, 61, 60
  $x12 = ADDXrs killed renamable $x12, renamable $x10, 0
  renamable $x12 = MADDXrrr renamable $x14, renamable $x9, killed renamable $x12
  renamable $d0 = LDRDroX killed renamable $x12, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx63)
  renamable $x11 = ADDXrs killed renamable $x11, renamable $x11, 2
  $x10 = ADDXrs renamable $x20, killed renamable $x10, 0
  renamable $x11 = UBFMXri killed renamable $x11, 61, 60
  $x10 = ADDXrs killed renamable $x10, renamable $x11, 0
  $x11 = ADDXrs renamable $x19, killed renamable $x11, 0
  renamable $d1 = LDRDroX killed renamable $x11, killed renamable $x14, 0, 1 :: (load 8 from %ir.arrayidx67)
  renamable $d2 = LDRDroX renamable $x10, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx57)
  renamable $w11 = nsw ADDWri killed renamable $w15, 1, 0
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  STRDroX killed renamable $d0, killed renamable $x10, killed renamable $x13, 0, 0 :: (store 8 into %ir.arrayidx75)
  STURWi killed renamable $w11, $fp, -60 :: (store 4 into %ir.i)
  B %bb.19

bb.21.for.inc79:
; predecessors: %bb.19
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -64 :: (store 4 into %ir.j)
  B %bb.17

bb.22.for.inc82:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -68 :: (store 4 into %ir.k)
  B %bb.15

bb.23.for.inc85:
; predecessors: %bb.15
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $x8, $x9, $x19, $x20
  renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -72 :: (store 4 into %ir.iz)
  B %bb.13

bb.24.for.end87:
; predecessors: %bb.13
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x19
  renamable $x0 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
  $d0 = FMOVD0
  $w1 = MOVZWi 125, 0
  BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  $w8 = MOVZWi 200, 0, implicit-def $x8
  $w9 = MOVZWi 40, 0, implicit-def $x9

bb.25.for.cond88:
; predecessors: %bb.24, %bb.35
  successors: %bb.26(0x7c000000), %bb.36(0x04000000); %bb.26(96.88%), %bb.36(3.12%)
  liveins: $x8, $x9, $x19
  renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.36, implicit $nzcv

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)
  liveins: $x8, $x9, $x19
  STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)

bb.27.for.cond91:
; predecessors: %bb.26, %bb.34
  successors: %bb.28(0x7c000000), %bb.35(0x04000000); %bb.28(96.88%), %bb.35(3.12%)
  liveins: $x8, $x9, $x19
  renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.35, implicit $nzcv

bb.28.for.body93:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $x8, $x9, $x19
  STURWi $wzr, $fp, -64 :: (store 4 into %ir.j)

bb.29.for.cond94:
; predecessors: %bb.28, %bb.33
  successors: %bb.30(0x7c000000), %bb.34(0x04000000); %bb.30(96.88%), %bb.34(3.12%)
  liveins: $x8, $x9, $x19
  renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.34, implicit $nzcv

bb.30.for.body96:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $x8, $x9, $x19
  STURWi $wzr, $fp, -60 :: (store 4 into %ir.i)

bb.31.for.cond97:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)
  liveins: $x8, $x9, $x19
  renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w10, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit $nzcv

bb.32.for.body99:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $x8, $x9, $x19
  renamable $x10 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
  renamable $x11, renamable $x15 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  renamable $x12, renamable $x13 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  renamable $x14 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  renamable $x10 = MADDXrrr renamable $x11, renamable $x8, killed renamable $x10
  renamable $x12 = ADDXrs killed renamable $x12, renamable $x12, 2
  renamable $x13 = UBFMXri killed renamable $x13, 61, 60
  renamable $x14 = MADDXrrr renamable $x15, renamable $x8, killed renamable $x14
  renamable $x11 = MADDXrrr killed renamable $x11, renamable $x9, renamable $x19
  renamable $x12 = UBFMXri killed renamable $x12, 61, 60
  $x10 = ADDXrs killed renamable $x10, renamable $x12, 0
  $x12 = ADDXrs killed renamable $x14, killed renamable $x12, 0
  renamable $d0 = LDRDroX killed renamable $x12, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx111)
  renamable $d1 = LDRDroX killed renamable $x11, killed renamable $x15, 0, 1 :: (load 8 from %ir.arrayidx115)
  renamable $d2 = LDRDroX renamable $x10, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx105)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  STRDroX killed renamable $d0, killed renamable $x10, killed renamable $x13, 0, 0 :: (store 8 into %ir.arrayidx123)
  renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -60 :: (store 4 into %ir.i)
  B %bb.31

bb.33.for.inc127:
; predecessors: %bb.31
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $x8, $x9, $x19
  renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -64 :: (store 4 into %ir.j)
  B %bb.29

bb.34.for.inc130:
; predecessors: %bb.29
  successors: %bb.27(0x80000000); %bb.27(100.00%)
  liveins: $x8, $x9, $x19
  renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -72 :: (store 4 into %ir.iz)
  B %bb.27

bb.35.for.inc133:
; predecessors: %bb.27
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x8, $x9, $x19
  renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  renamable $w10 = nsw ADDWri killed renamable $w10, 1, 0
  STURWi killed renamable $w10, $fp, -68 :: (store 4 into %ir.k)
  B %bb.25

bb.36.for.end135:
; predecessors: %bb.25
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  $w8 = MOVZWi 200, 0, implicit-def $x8
  $x9 = ADDXri $sp, 1008, 0
  $w10 = MOVZWi 1000, 0, implicit-def $x10
  $x11 = ADRP target-flags(aarch64-page) @g4m1_s
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s, 0
  $x12 = ADDXri $sp, 0, 0
  renamable $x13 = ADRP target-flags(aarch64-page) %const.0
  renamable $d0 = LDRDui killed renamable $x13, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  $x13 = ADRP target-flags(aarch64-page) @g5m1_s
  renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s, 0
  $x14 = ADRP target-flags(aarch64-page) @g6m1_s
  renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s, 0
  $x15 = ADRP target-flags(aarch64-page) @bm1_s
  renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s, 0

bb.37.for.cond136:
; predecessors: %bb.36, %bb.44
  successors: %bb.38(0x7c000000), %bb.45(0x04000000); %bb.38(96.88%), %bb.45(3.12%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15
  renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w16, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.45, implicit $nzcv

bb.38.for.body138:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15
  STURWi $wzr, $fp, -64 :: (store 4 into %ir.j)

bb.39.for.cond139:
; predecessors: %bb.38, %bb.43
  successors: %bb.40(0x7c000000), %bb.44(0x04000000); %bb.40(96.88%), %bb.44(3.12%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15
  renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w16, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit $nzcv

bb.40.for.body141:
; predecessors: %bb.39
  successors: %bb.41(0x80000000); %bb.41(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15
  STURWi $wzr, $fp, -60 :: (store 4 into %ir.i)

bb.41.for.cond142:
; predecessors: %bb.40, %bb.42
  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15
  renamable $w16 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w16, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.43, implicit $nzcv

bb.42.for.body144:
; predecessors: %bb.41
  successors: %bb.41(0x80000000); %bb.41(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15
  renamable $x16, renamable $x17 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x18 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $x0 = LDURSWi $fp, -44 :: (dereferenceable load 4 from %ir.sizei.addr)
  renamable $x1 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
  renamable $d1 = LDURDi $fp, -56 :: (dereferenceable load 8 from %ir.rdtime)
  renamable $x16 = MADDXrrr killed renamable $x16, renamable $x8, $xzr
  renamable $x17 = ADDXrs killed renamable $x17, renamable $x17, 2
  renamable $x18 = UBFMXri killed renamable $x18, 61, 60
  renamable $x0 = MADDXrrr killed renamable $x0, renamable $x10, $xzr
  $x2 = ADDXrs renamable $x9, renamable $x16, 0
  renamable $x17 = UBFMXri killed renamable $x17, 61, 60
  $x2 = ADDXrs killed renamable $x2, renamable $x17, 0
  renamable $d2 = LDRDroX killed renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx150)
  $x2 = ADDXrs renamable $x12, renamable $x16, 0
  $x2 = ADDXrs killed renamable $x2, renamable $x17, 0
  renamable $d3 = LDRDroX killed renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx165)
  $x2 = ADDXrs renamable $x11, renamable $x0, 0
  $x2 = ADDXrs killed renamable $x2, renamable $x16, 0
  $x2 = ADDXrs killed renamable $x2, renamable $x17, 0
  renamable $d4 = LDRDroX killed renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx158)
  $x2 = ADDXrs renamable $x13, renamable $x0, 0
  $x2 = ADDXrs killed renamable $x2, renamable $x16, 0
  $x2 = ADDXrs killed renamable $x2, renamable $x17, 0
  renamable $d5 = LDRDroX killed renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx173)
  $x2 = ADDXrs renamable $x14, renamable $x0, 0
  $x2 = ADDXrs killed renamable $x2, renamable $x16, 0
  $x2 = ADDXrs killed renamable $x2, renamable $x17, 0
  renamable $d6 = LDRDroX killed renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx189)
  renamable $x2 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  $x1 = ADDXrs killed renamable $x1, renamable $x16, 0
  $x0 = ADDXrs renamable $x15, killed renamable $x0, 0
  $x1 = ADDXrs killed renamable $x1, renamable $x17, 0
  $x0 = ADDXrs killed renamable $x0, renamable $x16, 0
  renamable $d2 = FMULDrr killed renamable $d2, killed renamable $d4
  renamable $d4 = LDRDroX renamable $x1, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx181)
  $x0 = ADDXrs killed renamable $x0, renamable $x17, 0
  renamable $d3 = FMULDrr killed renamable $d3, killed renamable $d5
  renamable $d5 = LDRDroX killed renamable $x0, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx200)
  renamable $d4 = FMULDrr killed renamable $d4, killed renamable $d6
  $x16 = ADDXrs killed renamable $x2, killed renamable $x16, 0
  $x16 = ADDXrs killed renamable $x16, killed renamable $x17, 0
  renamable $d1 = FMULDrr killed renamable $d5, killed renamable $d1
  renamable $d5 = LDRDroX killed renamable $x16, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx207)
  renamable $d2 = FADDDrr killed renamable $d2, killed renamable $d3
  renamable $d2 = FADDDrr killed renamable $d2, killed renamable $d4
  renamable $d2 = FMULDrr killed renamable $d2, renamable $d0
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d5
  renamable $d1 = FADDDrr killed renamable $d2, killed renamable $d1
  STRDroX killed renamable $d1, killed renamable $x1, killed renamable $x18, 0, 0 :: (store 8 into %ir.arrayidx215)
  renamable $w16 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0
  STURWi killed renamable $w16, $fp, -60 :: (store 4 into %ir.i)
  B %bb.41

bb.43.for.inc219:
; predecessors: %bb.41
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15
  renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0
  STURWi killed renamable $w16, $fp, -64 :: (store 4 into %ir.j)
  B %bb.39

bb.44.for.inc222:
; predecessors: %bb.39
  successors: %bb.37(0x80000000); %bb.37(100.00%)
  liveins: $d0, $x8, $x9, $x10, $x11, $x12, $x13, $x14, $x15
  renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0
  STURWi killed renamable $w16, $fp, -68 :: (store 4 into %ir.k)
  B %bb.37

bb.45.for.end224:
; predecessors: %bb.37

  $sp = frame-destroy ADDXri $sp, 2048, 0
  $fp, $lr = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.11), (load 8 from %stack.10)
  $x20, $x19 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.13), (load 8 from %stack.12)
  early-clobber $sp, $x28 = frame-destroy LDRXpost $sp(tied-def 0), 48 :: (load 8 from %stack.14)
  RET undef $lr

# End machine code for function laplacian.

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w9 = MOVZWi 40, 0, implicit-def $x9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x19 = ADRP target-flags(aarch64-page) @wdtdr
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x19
SU(4):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x19 = ADRP target-flags(aarch64-page) @wdtdr
  Ready @0c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 200, 0, implicit-def $x8
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w9 = MOVZWi 40, 0, implicit-def $x9
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
  Ready @3c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(3):   $x19 = ADRP target-flags(aarch64-page) @wdtdr
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
SU(2):   $w9 = MOVZWi 40, 0, implicit-def $x9
SU(4):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
SU(0):   STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: STURXi killed renamable $x0, $fp, -24 :: (store 8 into %ir.r.addr)
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   STURXi renamable $x0, $fp, -24 :: (store 8 into %ir.r.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Anti Latency=0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
SU(3):   STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.u.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Anti Latency=0
SU(4):   STURWi renamable $w2, $fp, -44 :: (store 4 into %ir.sizei.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   renamable $d1 = FMOVDi 112
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(6): Data Latency=1 Reg=$d1
SU(6):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
    SU(2): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
  Successors:
    SU(9): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
SU(7):   STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.rdtime)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
  Successors:
    SU(9): Anti Latency=0
SU(8):   $x0 = ADDXri $sp, 1008, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $d0 = FMOVD0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $w1 = MOVZWi 125, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x20 = ADDXri $sp, 1008, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  Ready @0c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 11 3 4 5 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 11 3 4 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = FMOVDi 112
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 0 11 3 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STURXi renamable $x0, $fp, -24 :: (store 8 into %ir.r.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 11 3 8 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.u.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 11 8 10 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  Ready @5c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 11 8 10 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.rdtime)
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 11 8 10 9 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x0 = ADDXri $sp, 1008, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 11 9 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $d0 = FMOVD0
  Ready @8c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 11 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 7
  Cand SU(4) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $w1 = MOVZWi 125, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 7
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STURWi renamable $w2, $fp, -44 :: (store 4 into %ir.sizei.addr)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $x20 = ADDXri $sp, 1008, 0
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(5):   renamable $d1 = FMOVDi 112
SU(0):   STURXi renamable $x0, $fp, -24 :: (store 8 into %ir.r.addr)
SU(3):   STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.u.addr)
SU(6):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
SU(7):   STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.rdtime)
SU(8):   $x0 = ADDXri $sp, 1008, 0
SU(9):   $d0 = FMOVD0
SU(10):   $w1 = MOVZWi 125, 0
SU(4):   STURWi renamable $w2, $fp, -44 :: (store 4 into %ir.sizei.addr)
SU(11):   $x20 = ADDXri $sp, 1008, 0

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 2 :: (store 8 into %stack.13), (store 8 into %stack.12)
    To: $sp = frame-setup SUBXri $sp, 2048, 0
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 2 :: (store 8 into %stack.13), (store 8 into %stack.12)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 4 :: (store 8 into %stack.11), (store 8 into %stack.10)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 32, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   $sp = frame-setup SUBXri $sp, 2048, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 2 :: (store 8 into %stack.13), (store 8 into %stack.12)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 4 :: (store 8 into %stack.11), (store 8 into %stack.10)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 32, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 2 :: (store 8 into %stack.13), (store 8 into %stack.12)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 4 :: (store 8 into %stack.11), (store 8 into %stack.10)
SU(2):   $fp = frame-setup ADDXri $sp, 32, 0

Fixup kills for %bb.0
********** MI Scheduling **********
laplacian:%bb.1 for.cond
  From: renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.12, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.12, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.1
Fixup kills for %bb.2
********** MI Scheduling **********
laplacian:%bb.3 for.cond1
  From: renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.11, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.11, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.3
Fixup kills for %bb.4
********** MI Scheduling **********
laplacian:%bb.5 for.cond4
  From: renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.10, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.10, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.5
Fixup kills for %bb.6
********** MI Scheduling **********
laplacian:%bb.7 for.cond7
  From: renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.9, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.9, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.7
********** MI Scheduling **********
laplacian:%bb.8 for.body9
  From: renamable $x10, renamable $x13 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
    To: B %bb.7
 RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10, renamable $x13 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x10
    SU(14): Data Latency=4 Reg=$x13
    SU(5): Data Latency=4 Reg=$x13
SU(1):   renamable $x11, renamable $x12 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x11
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x12
    SU(20): Ord  Latency=0 Memory
SU(2):   renamable $x14 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x14
SU(3):   renamable $w15 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(16): Data Latency=4 Reg=$w15
    SU(20): Ord  Latency=0 Memory
SU(4):   renamable $x12 = UBFMXri renamable $x12, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x12
  Successors:
    SU(19): Data Latency=1 Reg=$x12
    SU(15): Data Latency=1 Reg=$x12
    SU(6): Data Latency=1 Reg=$x12
SU(5):   renamable $x16 = MADDXrrr renamable $x13, renamable $x9, renamable $x19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x13
  Successors:
    SU(6): Data Latency=1 Reg=$x16
SU(6):   renamable $d0 = LDRDroX renamable $x16, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx17)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=$x16
    SU(4): Data Latency=1 Reg=$x12
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=4 Reg=$d0
SU(7):   renamable $x10 = MADDXrrr renamable $x10, renamable $x8, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
    SU(9): Data Latency=1 Reg=$x10
SU(8):   renamable $x11 = ADDXrs renamable $x11, renamable $x11, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x11
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x11
SU(9):   $x14 = ADDXrs renamable $x14, renamable $x10, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(7): Data Latency=1 Reg=$x10
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x14
  Successors:
    SU(13): Data Latency=1 Reg=$x14
    SU(10): Anti Latency=0
SU(10):   $x10 = ADDXrs renamable $x20, renamable $x10, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x10
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x10
SU(11):   renamable $x11 = UBFMXri renamable $x11, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x11
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x11
    SU(12): Data Latency=1 Reg=$x11
SU(12):   $x10 = ADDXrs renamable $x10, renamable $x11, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=$x11
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
  Successors:
    SU(19): Data Latency=1 Reg=$x10
    SU(15): Data Latency=1 Reg=$x10
    SU(13): Anti Latency=0
SU(13):   $x11 = ADDXrs renamable $x14, renamable $x11, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x11
    SU(9): Data Latency=1 Reg=$x14
  Successors:
    SU(16): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x11
SU(14):   renamable $d1 = LDRDroX renamable $x11, renamable $x13, 0, 1 :: (load 8 from %ir.arrayidx23)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(13): Data Latency=1 Reg=$x11
    SU(0): Data Latency=4 Reg=$x13
  Successors:
    SU(17): Data Latency=4 Reg=$d1
    SU(16): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
SU(15):   renamable $d2 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx13)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(12): Data Latency=1 Reg=$x10
    SU(4): Data Latency=1 Reg=$x12
  Successors:
    SU(18): Data Latency=4 Reg=$d2
    SU(19): Ord  Latency=0 Memory
SU(16):   renamable $w11 = nsw ADDWri renamable $w15, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(14): Anti Latency=0
    SU(13): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w15
  Successors:
    SU(20): Data Latency=1 Reg=$w11
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(14): Data Latency=4 Reg=$d1
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d0
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d0
    SU(15): Data Latency=4 Reg=$d2
  Successors:
    SU(19): Data Latency=1 Reg=$d0
SU(19):   STRDroX renamable $d0, renamable $x10, renamable $x12, 0, 0 :: (store 8 into %ir.arrayidx29)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=$x10
    SU(4): Data Latency=1 Reg=$x12
SU(20):   STURWi renamable $w11, $fp, -60 :: (store 4 into %ir.i)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$w11
    SU(14): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x10, renamable $x13 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 5 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x11, renamable $x12 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 5 8 4 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 13
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x14 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 5 8 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w15 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 8 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 13
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x10 = MADDXrrr renamable $x10, renamable $x8, $xzr
  Ready @4c
  TopQ.A TopLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 5 4 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x11 = ADDXrs renamable $x11, renamable $x11, 2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 11 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x14 = ADDXrs renamable $x14, renamable $x10, 0
  Ready @6c
  TopQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 11 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x10 = ADDXrs renamable $x20, renamable $x10, 0
  Ready @7c
  TopQ.A BotLatency SU(10) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x11 = UBFMXri renamable $x11, 61, 60
  Ready @8c
  TopQ.A BotLatency SU(11) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 12 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x12 = UBFMXri renamable $x12, 61, 60
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x16 = MADDXrrr renamable $x13, renamable $x9, renamable $x19
  Ready @10c
  TopQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 6 
  TopQ.A RemainingLatency 0 + 11c > CritPath 13
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x10 = ADDXrs renamable $x10, renamable $x11, 0
  Ready @11c
  TopQ.A TopLatency SU(12) 6c
  TopQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 15 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(6) ORDER                              
  Cand SU(13) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x11 = ADDXrs renamable $x14, renamable $x11, 0
  Ready @12c
  TopQ.A BotLatency SU(13) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 15 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d0 = LDRDroX renamable $x16, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx17)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 13
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d1 = LDRDroX renamable $x11, renamable $x13, 0, 1 :: (load 8 from %ir.arrayidx23)
  Ready @14c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 15 16 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d2 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx13)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $w11 = nsw ADDWri renamable $w15, 1, 0
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STURWi renamable $w11, $fp, -60 :: (store 4 into %ir.i)
  Ready @17c
  TopQ.A TopLatency SU(20) 8c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @18c
  TopQ.A TopLatency SU(17) 11c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @19c
  TopQ.A TopLatency SU(18) 12c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRDroX renamable $d0, renamable $x10, renamable $x12, 0, 0 :: (store 8 into %ir.arrayidx29)
  Ready @20c
  TopQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x10, renamable $x13 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
SU(1):   renamable $x11, renamable $x12 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
SU(2):   renamable $x14 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
SU(3):   renamable $w15 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(7):   renamable $x10 = MADDXrrr renamable $x10, renamable $x8, $xzr
SU(8):   renamable $x11 = ADDXrs renamable $x11, renamable $x11, 2
SU(9):   $x14 = ADDXrs renamable $x14, renamable $x10, 0
SU(10):   $x10 = ADDXrs renamable $x20, renamable $x10, 0
SU(11):   renamable $x11 = UBFMXri renamable $x11, 61, 60
SU(4):   renamable $x12 = UBFMXri renamable $x12, 61, 60
SU(5):   renamable $x16 = MADDXrrr renamable $x13, renamable $x9, renamable $x19
SU(12):   $x10 = ADDXrs renamable $x10, renamable $x11, 0
SU(13):   $x11 = ADDXrs renamable $x14, renamable $x11, 0
SU(6):   renamable $d0 = LDRDroX renamable $x16, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx17)
SU(14):   renamable $d1 = LDRDroX renamable $x11, renamable $x13, 0, 1 :: (load 8 from %ir.arrayidx23)
SU(15):   renamable $d2 = LDRDroX renamable $x10, renamable $x12, 0, 0 :: (load 8 from %ir.arrayidx13)
SU(16):   renamable $w11 = nsw ADDWri renamable $w15, 1, 0
SU(20):   STURWi renamable $w11, $fp, -60 :: (store 4 into %ir.i)
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(19):   STRDroX renamable $d0, renamable $x10, renamable $x12, 0, 0 :: (store 8 into %ir.arrayidx29)

Fixup kills for %bb.8
********** MI Scheduling **********
laplacian:%bb.9 for.inc30
  From: renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -64 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -64 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STURWi renamable $w10, $fp, -64 :: (store 4 into %ir.j)

Fixup kills for %bb.9
********** MI Scheduling **********
laplacian:%bb.10 for.inc33
  From: renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.3
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.3
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -68 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STURWi renamable $w10, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.10
********** MI Scheduling **********
laplacian:%bb.11 for.inc36
  From: renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.1
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -72 :: (store 4 into %ir.iz)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STURWi renamable $w10, $fp, -72 :: (store 4 into %ir.iz)

Fixup kills for %bb.11
********** MI Scheduling **********
laplacian:%bb.12 for.end38
  From: STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w9 = MOVZWi 40, 0, implicit-def $x9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 200, 0, implicit-def $x8
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w9 = MOVZWi 40, 0, implicit-def $x9
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
SU(2):   $w9 = MOVZWi 40, 0, implicit-def $x9
SU(0):   STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.12 for.end38
  From: $x0 = ADDXri $sp, 0, 0
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADDXri $sp, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 125, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x20 = ADDXri $sp, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADDXri $sp, 0, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $d0 = FMOVD0
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w1 = MOVZWi 125, 0
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x20 = ADDXri $sp, 0, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = ADDXri $sp, 0, 0
SU(1):   $d0 = FMOVD0
SU(2):   $w1 = MOVZWi 125, 0
SU(3):   $x20 = ADDXri $sp, 0, 0

Fixup kills for %bb.12
********** MI Scheduling **********
laplacian:%bb.13 for.cond40
  From: renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.24, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.24, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.13
Fixup kills for %bb.14
********** MI Scheduling **********
laplacian:%bb.15 for.cond43
  From: renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.23, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.23, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.15
Fixup kills for %bb.16
********** MI Scheduling **********
laplacian:%bb.17 for.cond46
  From: renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.22, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.22, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.17
Fixup kills for %bb.18
********** MI Scheduling **********
laplacian:%bb.19 for.cond49
  From: renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.21, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.21, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.19
********** MI Scheduling **********
laplacian:%bb.20 for.body51
  From: renamable $x10, renamable $x14 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
    To: B %bb.19
 RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10, renamable $x14 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x10
    SU(14): Data Latency=4 Reg=$x14
    SU(7): Data Latency=4 Reg=$x14
SU(1):   renamable $x11, renamable $x13 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x11
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x13
    SU(20): Ord  Latency=0 Memory
SU(2):   renamable $x12 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x12
SU(3):   renamable $w15 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(16): Data Latency=4 Reg=$w15
    SU(20): Ord  Latency=0 Memory
SU(4):   renamable $x10 = MADDXrrr renamable $x10, renamable $x8, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
    SU(6): Data Latency=1 Reg=$x10
SU(5):   renamable $x13 = UBFMXri renamable $x13, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x13
  Successors:
    SU(19): Data Latency=1 Reg=$x13
    SU(15): Data Latency=1 Reg=$x13
    SU(8): Data Latency=1 Reg=$x13
SU(6):   $x12 = ADDXrs renamable $x12, renamable $x10, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(4): Data Latency=1 Reg=$x10
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x12
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x12
    SU(10): Anti Latency=0
SU(7):   renamable $x12 = MADDXrrr renamable $x14, renamable $x9, renamable $x12
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x12
    SU(0): Data Latency=4 Reg=$x14
  Successors:
    SU(8): Data Latency=1 Reg=$x12
SU(8):   renamable $d0 = LDRDroX renamable $x12, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx63)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(7): Data Latency=1 Reg=$x12
    SU(5): Data Latency=1 Reg=$x13
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=4 Reg=$d0
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
SU(9):   renamable $x11 = ADDXrs renamable $x11, renamable $x11, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x11
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x11
SU(10):   $x10 = ADDXrs renamable $x20, renamable $x10, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(6): Anti Latency=0
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x10
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x10
SU(11):   renamable $x11 = UBFMXri renamable $x11, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x11
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x11
    SU(12): Data Latency=1 Reg=$x11
SU(12):   $x10 = ADDXrs renamable $x10, renamable $x11, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=$x11
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
  Successors:
    SU(19): Data Latency=1 Reg=$x10
    SU(15): Data Latency=1 Reg=$x10
    SU(13): Anti Latency=0
SU(13):   $x11 = ADDXrs renamable $x19, renamable $x11, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x11
  Successors:
    SU(16): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x11
SU(14):   renamable $d1 = LDRDroX renamable $x11, renamable $x14, 0, 1 :: (load 8 from %ir.arrayidx67)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(13): Data Latency=1 Reg=$x11
    SU(0): Data Latency=4 Reg=$x14
  Successors:
    SU(17): Data Latency=4 Reg=$d1
    SU(16): Anti Latency=0
SU(15):   renamable $d2 = LDRDroX renamable $x10, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx57)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(12): Data Latency=1 Reg=$x10
    SU(5): Data Latency=1 Reg=$x13
  Successors:
    SU(18): Data Latency=4 Reg=$d2
    SU(19): Ord  Latency=0 Memory
SU(16):   renamable $w11 = nsw ADDWri renamable $w15, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(14): Anti Latency=0
    SU(13): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w15
  Successors:
    SU(20): Data Latency=1 Reg=$w11
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(14): Data Latency=4 Reg=$d1
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d0
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d0
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d0
    SU(15): Data Latency=4 Reg=$d2
  Successors:
    SU(19): Data Latency=1 Reg=$d0
SU(19):   STRDroX renamable $d0, renamable $x10, renamable $x13, 0, 0 :: (store 8 into %ir.arrayidx75)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=$x10
    SU(8): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=$x13
SU(20):   STURWi renamable $w11, $fp, -60 :: (store 4 into %ir.i)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$w11
    SU(8): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x10, renamable $x14 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x11, renamable $x13 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 9 5 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 13
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x12 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 9 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w15 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 9 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x10 = MADDXrrr renamable $x10, renamable $x8, $xzr
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(9) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x11 = ADDXrs renamable $x11, renamable $x11, 2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x12 = ADDXrs renamable $x12, renamable $x10, 0
  Ready @6c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 7 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x10 = ADDXrs renamable $x20, renamable $x10, 0
  Ready @7c
  TopQ.A BotLatency SU(10) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x11 = UBFMXri renamable $x11, 61, 60
  Ready @8c
  TopQ.A BotLatency SU(11) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 12 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x13 = UBFMXri renamable $x13, 61, 60
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(12) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x12 = MADDXrrr renamable $x14, renamable $x9, renamable $x12
  Ready @10c
  TopQ.A TopLatency SU(7) 6c
  TopQ.A BotLatency SU(7) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 13
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x10 = ADDXrs renamable $x10, renamable $x11, 0
  Ready @11c
  TopQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 15 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(8) ORDER                              
  Cand SU(13) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x11 = ADDXrs renamable $x19, renamable $x11, 0
  Ready @12c
  TopQ.A BotLatency SU(13) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d0 = LDRDroX renamable $x12, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx63)
  Ready @13c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 13
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d1 = LDRDroX renamable $x11, renamable $x14, 0, 1 :: (load 8 from %ir.arrayidx67)
  Ready @14c
  TopQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 15 16 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d2 = LDRDroX renamable $x10, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx57)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $w11 = nsw ADDWri renamable $w15, 1, 0
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STURWi renamable $w11, $fp, -60 :: (store 4 into %ir.i)
  Ready @17c
  TopQ.A TopLatency SU(20) 8c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @18c
  TopQ.A TopLatency SU(17) 11c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @19c
  TopQ.A TopLatency SU(18) 12c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRDroX renamable $d0, renamable $x10, renamable $x13, 0, 0 :: (store 8 into %ir.arrayidx75)
  Ready @20c
  TopQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $x10, renamable $x14 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
SU(1):   renamable $x11, renamable $x13 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
SU(2):   renamable $x12 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
SU(3):   renamable $w15 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(4):   renamable $x10 = MADDXrrr renamable $x10, renamable $x8, $xzr
SU(9):   renamable $x11 = ADDXrs renamable $x11, renamable $x11, 2
SU(6):   $x12 = ADDXrs renamable $x12, renamable $x10, 0
SU(10):   $x10 = ADDXrs renamable $x20, renamable $x10, 0
SU(11):   renamable $x11 = UBFMXri renamable $x11, 61, 60
SU(5):   renamable $x13 = UBFMXri renamable $x13, 61, 60
SU(7):   renamable $x12 = MADDXrrr renamable $x14, renamable $x9, renamable $x12
SU(12):   $x10 = ADDXrs renamable $x10, renamable $x11, 0
SU(13):   $x11 = ADDXrs renamable $x19, renamable $x11, 0
SU(8):   renamable $d0 = LDRDroX renamable $x12, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx63)
SU(14):   renamable $d1 = LDRDroX renamable $x11, renamable $x14, 0, 1 :: (load 8 from %ir.arrayidx67)
SU(15):   renamable $d2 = LDRDroX renamable $x10, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx57)
SU(16):   renamable $w11 = nsw ADDWri renamable $w15, 1, 0
SU(20):   STURWi renamable $w11, $fp, -60 :: (store 4 into %ir.i)
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(19):   STRDroX renamable $d0, renamable $x10, renamable $x13, 0, 0 :: (store 8 into %ir.arrayidx75)

Fixup kills for %bb.20
********** MI Scheduling **********
laplacian:%bb.21 for.inc79
  From: renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.17
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -64 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -64 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STURWi renamable $w10, $fp, -64 :: (store 4 into %ir.j)

Fixup kills for %bb.21
********** MI Scheduling **********
laplacian:%bb.22 for.inc82
  From: renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.15
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -68 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STURWi renamable $w10, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.22
********** MI Scheduling **********
laplacian:%bb.23 for.inc85
  From: renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.13
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -72 :: (store 4 into %ir.iz)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STURWi renamable $w10, $fp, -72 :: (store 4 into %ir.iz)

Fixup kills for %bb.23
********** MI Scheduling **********
laplacian:%bb.24 for.end87
  From: STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w9 = MOVZWi 40, 0, implicit-def $x9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 200, 0, implicit-def $x8
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w9 = MOVZWi 40, 0, implicit-def $x9
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
SU(2):   $w9 = MOVZWi 40, 0, implicit-def $x9
SU(0):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)

********** MI Scheduling **********
laplacian:%bb.24 for.end87
  From: renamable $x0 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
    To: BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 125, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 51 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $d0 = FMOVD0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w1 = MOVZWi 125, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $x0 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
SU(1):   $d0 = FMOVD0
SU(2):   $w1 = MOVZWi 125, 0

Fixup kills for %bb.24
********** MI Scheduling **********
laplacian:%bb.25 for.cond88
  From: renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.36, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.36, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.25
Fixup kills for %bb.26
********** MI Scheduling **********
laplacian:%bb.27 for.cond91
  From: renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.35, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.35, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.27
Fixup kills for %bb.28
********** MI Scheduling **********
laplacian:%bb.29 for.cond94
  From: renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.34, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.34, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.29
Fixup kills for %bb.30
********** MI Scheduling **********
laplacian:%bb.31 for.cond97
  From: renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.33, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w10
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.33, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w10, 4, 0, implicit-def $nzcv

Fixup kills for %bb.31
********** MI Scheduling **********
laplacian:%bb.32 for.body99
  From: renamable $x10 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
    To: B %bb.31
 RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $x10 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x10
    SU(17): Ord  Latency=0 Memory
SU(1):   renamable $x11, renamable $x15 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x11
    SU(4): Data Latency=4 Reg=$x11
    SU(13): Data Latency=4 Reg=$x15
    SU(7): Data Latency=4 Reg=$x15
    SU(17): Ord  Latency=0 Memory
SU(2):   renamable $x12, renamable $x13 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x12
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x13
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
SU(3):   renamable $x14 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x14
    SU(17): Ord  Latency=0 Memory
SU(4):   renamable $x10 = MADDXrrr renamable $x11, renamable $x8, renamable $x10
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(1): Data Latency=4 Reg=$x11
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x10
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x10
    SU(8): Anti Latency=0
SU(5):   renamable $x12 = ADDXrs renamable $x12, renamable $x12, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x12
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x12
SU(6):   renamable $x13 = UBFMXri renamable $x13, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x13
  Successors:
    SU(17): Data Latency=1 Reg=$x13
    SU(14): Data Latency=1 Reg=$x13
    SU(12): Data Latency=1 Reg=$x13
SU(7):   renamable $x14 = MADDXrrr renamable $x15, renamable $x8, renamable $x14
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x14
    SU(1): Data Latency=4 Reg=$x15
  Successors:
    SU(11): Data Latency=1 Reg=$x14
SU(8):   renamable $x11 = MADDXrrr renamable $x11, renamable $x9, renamable $x19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(4): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x11
  Successors:
    SU(13): Data Latency=1 Reg=$x11
SU(9):   renamable $x12 = UBFMXri renamable $x12, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x12
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x12
    SU(10): Data Latency=1 Reg=$x12
SU(10):   $x10 = ADDXrs renamable $x10, renamable $x12, 0
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(9): Data Latency=1 Reg=$x12
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x10
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x10
    SU(14): Data Latency=1 Reg=$x10
    SU(11): Anti Latency=0
SU(11):   $x12 = ADDXrs renamable $x14, renamable $x12, 0
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(10): Anti Latency=0
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x12
    SU(7): Data Latency=1 Reg=$x14
  Successors:
    SU(12): Data Latency=1 Reg=$x12
SU(12):   renamable $d0 = LDRDroX renamable $x12, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx111)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(11): Data Latency=1 Reg=$x12
    SU(6): Data Latency=1 Reg=$x13
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$d0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
SU(13):   renamable $d1 = LDRDroX renamable $x11, renamable $x15, 0, 1 :: (load 8 from %ir.arrayidx115)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(8): Data Latency=1 Reg=$x11
    SU(1): Data Latency=4 Reg=$x15
  Successors:
    SU(15): Data Latency=4 Reg=$d1
    SU(17): Ord  Latency=0 Memory
SU(14):   renamable $d2 = LDRDroX renamable $x10, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx105)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 11
  Predecessors:
    SU(10): Data Latency=1 Reg=$x10
    SU(6): Data Latency=1 Reg=$x13
  Successors:
    SU(16): Data Latency=4 Reg=$d2
    SU(18): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
SU(15):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 8
  Predecessors:
    SU(12): Data Latency=4 Reg=$d0
    SU(12): Out  Latency=1
    SU(13): Data Latency=4 Reg=$d1
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d0
SU(16):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 7
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$d0
    SU(14): Data Latency=4 Reg=$d2
  Successors:
    SU(17): Data Latency=1 Reg=$d0
SU(17):   STRDroX renamable $d0, renamable $x10, renamable $x13, 0, 0 :: (store 8 into %ir.arrayidx123)
  # preds left       : 10
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 6
  Predecessors:
    SU(16): Data Latency=1 Reg=$d0
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Data Latency=1 Reg=$x10
    SU(6): Data Latency=1 Reg=$x13
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(18): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
SU(18):   renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(17): Anti Latency=0
    SU(17): Ord  Latency=1 Memory
    SU(14): Anti Latency=0
    SU(10): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=4 Reg=$w10
    SU(20): Ord  Latency=0 Memory
SU(19):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 1
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=4 Reg=$w10
  Successors:
    SU(20): Data Latency=1 Reg=$w10
SU(20):   STURWi renamable $w10, $fp, -60 :: (store 4 into %ir.i)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$w10
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 19
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 19
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  19 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x12, renamable $x13 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(2) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 19
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x10 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 19
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x11, renamable $x15 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  Ready @2c
  TopQ.A BotLatency SU(1) 18c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x14 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  Ready @3c
  TopQ.A BotLatency SU(3) 18c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 4 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 19
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x12 = ADDXrs renamable $x12, renamable $x12, 2
  Ready @4c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 4 
Queue TopQ.A: 6 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 19
  Cand SU(6) ORDER                              
  Cand SU(9) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x12 = UBFMXri renamable $x12, 61, 60
  Ready @5c
  TopQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 19
  Cand SU(6) ORDER                              
  Cand SU(4) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x10 = MADDXrrr renamable $x11, renamable $x8, renamable $x10
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 10 8 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 19
  Cand SU(6) ORDER                              
  Cand SU(7) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x14 = MADDXrrr renamable $x15, renamable $x8, renamable $x14
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 10 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 19
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x13 = UBFMXri renamable $x13, 61, 60
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 19
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x11 = MADDXrrr renamable $x11, renamable $x9, renamable $x19
  Ready @9c
  TopQ.A BotLatency SU(8) 13c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 13 
  TopQ.A RemainingLatency 0 + 10c > CritPath 19
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x10 = ADDXrs renamable $x10, renamable $x12, 0
  Ready @10c
  TopQ.A TopLatency SU(10) 6c
  TopQ.A BotLatency SU(10) 13c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 14 11 
  TopQ.A RemainingLatency 0 + 11c > CritPath 19
  Cand SU(13) ORDER                              
  Cand SU(11) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x12 = ADDXrs renamable $x14, renamable $x12, 0
  Ready @11c
  TopQ.A BotLatency SU(11) 13c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 14 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 19
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $d0 = LDRDroX renamable $x12, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx111)
  Ready @12c
  TopQ.A TopLatency SU(12) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 19
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) renamable $d1 = LDRDroX renamable $x11, renamable $x15, 0, 1 :: (load 8 from %ir.arrayidx115)
  Ready @13c
  TopQ.A BotLatency SU(13) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 15 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $d2 = LDRDroX renamable $x10, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx105)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 17 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @17c
  TopQ.A TopLatency SU(15) 11c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 16
  Executed: 18c
  Critical: 16c, 16 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @18c
  TopQ.A TopLatency SU(16) 12c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 17
  Executed: 19c
  Critical: 17c, 17 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) STRDroX renamable $d0, renamable $x10, renamable $x13, 0, 0 :: (store 8 into %ir.arrayidx123)
  Ready @19c
  TopQ.A TopLatency SU(17) 13c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 18
  Executed: 20c
  Critical: 18c, 18 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @20c
  TopQ.A TopLatency SU(18) 14c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 19
  Executed: 21c
  Critical: 19c, 19 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 24 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @24c
  TopQ.A TopLatency SU(19) 18c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 20
  Executed: 25c
  Critical: 20c, 20 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STURWi renamable $w10, $fp, -60 :: (store 4 into %ir.i)
  Ready @25c
  TopQ.A TopLatency SU(20) 19c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 21
  Executed: 26c
  Critical: 21c, 21 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(2):   renamable $x12, renamable $x13 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
SU(0):   renamable $x10 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
SU(1):   renamable $x11, renamable $x15 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
SU(3):   renamable $x14 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
SU(5):   renamable $x12 = ADDXrs renamable $x12, renamable $x12, 2
SU(9):   renamable $x12 = UBFMXri renamable $x12, 61, 60
SU(4):   renamable $x10 = MADDXrrr renamable $x11, renamable $x8, renamable $x10
SU(7):   renamable $x14 = MADDXrrr renamable $x15, renamable $x8, renamable $x14
SU(6):   renamable $x13 = UBFMXri renamable $x13, 61, 60
SU(8):   renamable $x11 = MADDXrrr renamable $x11, renamable $x9, renamable $x19
SU(10):   $x10 = ADDXrs renamable $x10, renamable $x12, 0
SU(11):   $x12 = ADDXrs renamable $x14, renamable $x12, 0
SU(12):   renamable $d0 = LDRDroX renamable $x12, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx111)
SU(13):   renamable $d1 = LDRDroX renamable $x11, renamable $x15, 0, 1 :: (load 8 from %ir.arrayidx115)
SU(14):   renamable $d2 = LDRDroX renamable $x10, renamable $x13, 0, 0 :: (load 8 from %ir.arrayidx105)
SU(15):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(16):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(17):   STRDroX renamable $d0, renamable $x10, renamable $x13, 0, 0 :: (store 8 into %ir.arrayidx123)
SU(18):   renamable $w10 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(19):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(20):   STURWi renamable $w10, $fp, -60 :: (store 4 into %ir.i)

Fixup kills for %bb.32
********** MI Scheduling **********
laplacian:%bb.33 for.inc127
  From: renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.29
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -64 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -64 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $w10 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STURWi renamable $w10, $fp, -64 :: (store 4 into %ir.j)

Fixup kills for %bb.33
********** MI Scheduling **********
laplacian:%bb.34 for.inc130
  From: renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.27
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -72 :: (store 4 into %ir.iz)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $w10 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STURWi renamable $w10, $fp, -72 :: (store 4 into %ir.iz)

Fixup kills for %bb.34
********** MI Scheduling **********
laplacian:%bb.35 for.inc133
  From: renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w10
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w10
  Successors:
    SU(2): Data Latency=1 Reg=$w10
SU(2):   STURWi renamable $w10, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w10
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w10 = nsw ADDWri renamable $w10, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w10, $fp, -68 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $w10 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w10 = nsw ADDWri renamable $w10, 1, 0
SU(2):   STURWi renamable $w10, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.35
********** MI Scheduling **********
laplacian:%bb.36 for.end135
  From: STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
    To: End RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x9 = ADDXri $sp, 1008, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w10 = MOVZWi 1000, 0, implicit-def $x10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x11 = ADRP target-flags(aarch64-page) @g4m1_s
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x11
SU(5):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x11
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x12 = ADDXri $sp, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   renamable $x13 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x13
SU(8):   renamable $d0 = LDRDui renamable $x13, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=$x13
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(9): Anti Latency=0
SU(9):   $x13 = ADRP target-flags(aarch64-page) @g5m1_s
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x13
SU(10):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x13
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x14 = ADRP target-flags(aarch64-page) @g6m1_s
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x14
SU(12):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $x15 = ADRP target-flags(aarch64-page) @bm1_s
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x15
SU(14):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x15
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 7 11 13 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x13 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 13 11 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
  Cand SU(8) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d0 = LDRDui renamable $x13, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 13 11 9 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x11 = ADRP target-flags(aarch64-page) @g4m1_s
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 9 6 13 11 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(9) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x13 = ADRP target-flags(aarch64-page) @g5m1_s
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 6 13 11 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(13) TOP-PATH                  2 cycles 
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x14 = ADRP target-flags(aarch64-page) @g6m1_s
  Ready @4c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 6 13 10 12 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(13) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x15 = ADRP target-flags(aarch64-page) @bm1_s
  Ready @5c
  TopQ.A BotLatency SU(13) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 6 12 10 14 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 200, 0, implicit-def $x8
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 2 3 5 6 12 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x9 = ADDXri $sp, 1008, 0
  Ready @7c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 10 3 5 6 12 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(10) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $w10 = MOVZWi 1000, 0, implicit-def $x10
  Ready @8c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 10 12 5 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(10) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s, 0
  Ready @9c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 10 12 6 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(10) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x12 = ADDXri $sp, 0, 0
  Ready @10c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 10 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s, 0
  Ready @11c
  TopQ.A TopLatency SU(10) 2c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s, 0
  Ready @12c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s, 0
  Ready @13c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(7):   renamable $x13 = ADRP target-flags(aarch64-page) %const.0
SU(8):   renamable $d0 = LDRDui renamable $x13, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(4):   $x11 = ADRP target-flags(aarch64-page) @g4m1_s
SU(9):   $x13 = ADRP target-flags(aarch64-page) @g5m1_s
SU(11):   $x14 = ADRP target-flags(aarch64-page) @g6m1_s
SU(13):   $x15 = ADRP target-flags(aarch64-page) @bm1_s
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
SU(2):   $x9 = ADDXri $sp, 1008, 0
SU(3):   $w10 = MOVZWi 1000, 0, implicit-def $x10
SU(5):   renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s, 0
SU(6):   $x12 = ADDXri $sp, 0, 0
SU(10):   renamable $x13 = ADDXri $x13, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s, 0
SU(12):   renamable $x14 = ADDXri $x14, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s, 0
SU(14):   renamable $x15 = ADDXri $x15, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s, 0
SU(0):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.36
********** MI Scheduling **********
laplacian:%bb.37 for.cond136
  From: renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.45, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
SU(1):   dead $wzr = SUBSWri renamable $w16, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.45, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w16, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w16, 4, 0, implicit-def $nzcv

Fixup kills for %bb.37
Fixup kills for %bb.38
********** MI Scheduling **********
laplacian:%bb.39 for.cond139
  From: renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.44, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
SU(1):   dead $wzr = SUBSWri renamable $w16, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.44, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w16, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w16, 4, 0, implicit-def $nzcv

Fixup kills for %bb.39
Fixup kills for %bb.40
********** MI Scheduling **********
laplacian:%bb.41 for.cond142
  From: renamable $w16 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.43, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
SU(1):   dead $wzr = SUBSWri renamable $w16, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.43, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w16, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $w16 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w16, 4, 0, implicit-def $nzcv

Fixup kills for %bb.41
********** MI Scheduling **********
laplacian:%bb.42 for.body144
  From: renamable $x16, renamable $x17 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
    To: B %bb.41
 RegionInstrs: 52
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16, renamable $x17 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x16
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x17
    SU(48): Ord  Latency=0 Memory
SU(1):   renamable $x18 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x18
    SU(51): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
SU(2):   renamable $x0 = LDURSWi $fp, -44 :: (dereferenceable load 4 from %ir.sizei.addr)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 32
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x0
    SU(48): Ord  Latency=0 Memory
SU(3):   renamable $x1 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=4 Reg=$x1
    SU(48): Ord  Latency=0 Memory
SU(4):   renamable $d1 = LDURDi $fp, -56 :: (dereferenceable load 8 from %ir.rdtime)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(41): Out  Latency=1
    SU(41): Data Latency=4 Reg=$d1
    SU(48): Ord  Latency=0 Memory
SU(5):   renamable $x16 = MADDXrrr renamable $x16, renamable $x8, $xzr
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 32
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$x16
    SU(32): Data Latency=1 Reg=$x16
    SU(29): Data Latency=1 Reg=$x16
    SU(25): Data Latency=1 Reg=$x16
    SU(21): Data Latency=1 Reg=$x16
    SU(17): Data Latency=1 Reg=$x16
    SU(13): Data Latency=1 Reg=$x16
    SU(9): Data Latency=1 Reg=$x16
SU(6):   renamable $x17 = ADDXrs renamable $x17, renamable $x17, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 32
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x17
SU(7):   renamable $x18 = UBFMXri renamable $x18, 61, 60
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x18
  Successors:
    SU(48): Data Latency=1 Reg=$x18
    SU(42): Data Latency=1 Reg=$x18
    SU(37): Data Latency=1 Reg=$x18
    SU(34): Data Latency=1 Reg=$x18
    SU(27): Data Latency=1 Reg=$x18
    SU(23): Data Latency=1 Reg=$x18
    SU(19): Data Latency=1 Reg=$x18
    SU(15): Data Latency=1 Reg=$x18
    SU(12): Data Latency=1 Reg=$x18
SU(8):   renamable $x0 = MADDXrrr renamable $x0, renamable $x10, $xzr
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x0
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x0
    SU(24): Data Latency=1 Reg=$x0
    SU(20): Data Latency=1 Reg=$x0
    SU(16): Data Latency=1 Reg=$x0
SU(9):   $x2 = ADDXrs renamable $x9, renamable $x16, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 31
  Predecessors:
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x2
    SU(39): Anti Latency=0
SU(10):   renamable $x17 = UBFMXri renamable $x17, 61, 60
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 31
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x17
  Successors:
    SU(40): Data Latency=1 Reg=$x17
    SU(35): Data Latency=1 Reg=$x17
    SU(31): Data Latency=1 Reg=$x17
    SU(26): Data Latency=1 Reg=$x17
    SU(22): Data Latency=1 Reg=$x17
    SU(18): Data Latency=1 Reg=$x17
    SU(14): Data Latency=1 Reg=$x17
    SU(11): Data Latency=1 Reg=$x17
SU(11):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 30
  Predecessors:
    SU(10): Data Latency=1 Reg=$x17
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x2
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x2
SU(12):   renamable $d2 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx150)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 29
  Predecessors:
    SU(11): Data Latency=1 Reg=$x2
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=4 Reg=$d2
    SU(13): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(13):   $x2 = ADDXrs renamable $x12, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 29
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x2
    SU(39): Anti Latency=0
SU(14):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 28
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x2
    SU(10): Data Latency=1 Reg=$x17
  Successors:
    SU(16): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x2
SU(15):   renamable $d3 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx165)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 27
  Predecessors:
    SU(14): Data Latency=1 Reg=$x2
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=4 Reg=$d3
    SU(16): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(16):   $x2 = ADDXrs renamable $x11, renamable $x0, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 27
  Predecessors:
    SU(15): Anti Latency=0
    SU(14): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x2
    SU(30): Anti Latency=0
SU(17):   $x2 = ADDXrs renamable $x2, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 26
  Predecessors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x2
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x2
    SU(39): Anti Latency=0
SU(18):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 25
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x2
    SU(10): Data Latency=1 Reg=$x17
  Successors:
    SU(20): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x2
SU(19):   renamable $d4 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx158)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 24
  Predecessors:
    SU(18): Data Latency=1 Reg=$x2
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    SU(34): Out  Latency=1
    SU(33): Data Latency=4 Reg=$d4
    SU(20): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(20):   $x2 = ADDXrs renamable $x13, renamable $x0, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 24
  Predecessors:
    SU(19): Anti Latency=0
    SU(18): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x2
    SU(30): Anti Latency=0
SU(21):   $x2 = ADDXrs renamable $x2, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 23
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x2
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x2
    SU(39): Anti Latency=0
SU(22):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 22
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x2
    SU(10): Data Latency=1 Reg=$x17
  Successors:
    SU(24): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x2
SU(23):   renamable $d5 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx173)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 21
  Predecessors:
    SU(22): Data Latency=1 Reg=$x2
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    SU(37): Out  Latency=1
    SU(36): Data Latency=4 Reg=$d5
    SU(24): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(24):   $x2 = ADDXrs renamable $x14, renamable $x0, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 21
  Predecessors:
    SU(23): Anti Latency=0
    SU(22): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x2
    SU(30): Anti Latency=0
SU(25):   $x2 = ADDXrs renamable $x2, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 20
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x2
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x2
    SU(39): Anti Latency=0
SU(26):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 19
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x2
    SU(10): Data Latency=1 Reg=$x17
  Successors:
    SU(28): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x2
SU(27):   renamable $d6 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx189)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 18
  Predecessors:
    SU(26): Data Latency=1 Reg=$x2
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    SU(38): Data Latency=4 Reg=$d6
    SU(28): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(28):   renamable $x2 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 18
  Predecessors:
    SU(27): Anti Latency=0
    SU(26): Out  Latency=1
  Successors:
    SU(39): Data Latency=4 Reg=$x2
    SU(48): Ord  Latency=0 Memory
SU(29):   $x1 = ADDXrs renamable $x1, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(5): Data Latency=1 Reg=$x16
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x1
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x1
    SU(39): Anti Latency=0
SU(30):   $x0 = ADDXrs renamable $x15, renamable $x0, 0
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 19
  Predecessors:
    SU(24): Anti Latency=0
    SU(20): Anti Latency=0
    SU(16): Anti Latency=0
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x0
SU(31):   $x1 = ADDXrs renamable $x1, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x1
    SU(10): Data Latency=1 Reg=$x17
  Successors:
    SU(48): Data Latency=1 Reg=$x1
    SU(34): Data Latency=1 Reg=$x1
SU(32):   $x0 = ADDXrs renamable $x0, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 18
  Predecessors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x0
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x0
    SU(39): Anti Latency=0
SU(33):   renamable $d2 = FMULDrr renamable $d2, renamable $d4
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 14
  Predecessors:
    SU(19): Data Latency=4 Reg=$d4
    SU(12): Out  Latency=1
    SU(12): Data Latency=4 Reg=$d2
  Successors:
    SU(43): Out  Latency=1
    SU(43): Data Latency=1 Reg=$d2
    SU(34): Anti Latency=0
SU(34):   renamable $d4 = LDRDroX renamable $x1, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx181)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 14
  Predecessors:
    SU(33): Anti Latency=0
    SU(31): Data Latency=1 Reg=$x1
    SU(19): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    SU(38): Out  Latency=1
    SU(38): Data Latency=4 Reg=$d4
    SU(51): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
SU(35):   $x0 = ADDXrs renamable $x0, renamable $x17, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 17
  Predecessors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x0
    SU(10): Data Latency=1 Reg=$x17
  Successors:
    SU(37): Data Latency=1 Reg=$x0
SU(36):   renamable $d3 = FMULDrr renamable $d3, renamable $d5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 16
  Predecessors:
    SU(23): Data Latency=4 Reg=$d5
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$d3
  Successors:
    SU(43): Data Latency=1 Reg=$d3
    SU(37): Anti Latency=0
SU(37):   renamable $d5 = LDRDroX renamable $x0, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx200)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 16
  Predecessors:
    SU(36): Anti Latency=0
    SU(35): Data Latency=1 Reg=$x0
    SU(23): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    SU(42): Out  Latency=1
    SU(41): Data Latency=4 Reg=$d5
    SU(48): Ord  Latency=0 Memory
SU(38):   renamable $d4 = FMULDrr renamable $d4, renamable $d6
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 10
  Predecessors:
    SU(27): Data Latency=4 Reg=$d6
    SU(34): Data Latency=4 Reg=$d4
    SU(34): Out  Latency=1
  Successors:
    SU(44): Data Latency=1 Reg=$d4
SU(39):   $x16 = ADDXrs renamable $x2, renamable $x16, 0
  # preds left       : 10
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 14
  Predecessors:
    SU(28): Data Latency=4 Reg=$x2
    SU(29): Anti Latency=0
    SU(32): Anti Latency=0
    SU(25): Anti Latency=0
    SU(21): Anti Latency=0
    SU(17): Anti Latency=0
    SU(13): Anti Latency=0
    SU(9): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(40): Out  Latency=1
    SU(40): Data Latency=1 Reg=$x16
SU(40):   $x16 = ADDXrs renamable $x16, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 13
  Predecessors:
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$x16
    SU(10): Data Latency=1 Reg=$x17
  Successors:
    SU(49): Out  Latency=1
    SU(42): Data Latency=1 Reg=$x16
SU(41):   renamable $d1 = FMULDrr renamable $d5, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 12
  Predecessors:
    SU(37): Data Latency=4 Reg=$d5
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    SU(46): Out  Latency=1
    SU(46): Data Latency=1 Reg=$d1
    SU(42): Anti Latency=0
SU(42):   renamable $d5 = LDRDroX renamable $x16, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx207)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 12
  Predecessors:
    SU(41): Anti Latency=0
    SU(40): Data Latency=1 Reg=$x16
    SU(37): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    SU(46): Data Latency=4 Reg=$d5
    SU(49): Anti Latency=0
    SU(51): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
SU(43):   renamable $d2 = FADDDrr renamable $d2, renamable $d3
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 10
  Predecessors:
    SU(36): Data Latency=1 Reg=$d3
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$d2
  Successors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d2
SU(44):   renamable $d2 = FADDDrr renamable $d2, renamable $d4
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 9
  Predecessors:
    SU(38): Data Latency=1 Reg=$d4
    SU(43): Data Latency=1 Reg=$d2
    SU(43): Out  Latency=1
  Successors:
    SU(45): Out  Latency=1
    SU(45): Data Latency=1 Reg=$d2
SU(45):   renamable $d2 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 8
  Predecessors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d2
  Successors:
    SU(47): Data Latency=1 Reg=$d2
SU(46):   renamable $d1 = FMULDrr renamable $d1, renamable $d5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 8
  Predecessors:
    SU(42): Data Latency=4 Reg=$d5
    SU(41): Out  Latency=1
    SU(41): Data Latency=1 Reg=$d1
  Successors:
    SU(47): Out  Latency=1
    SU(47): Data Latency=1 Reg=$d1
SU(47):   renamable $d1 = FADDDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 7
  Predecessors:
    SU(46): Out  Latency=1
    SU(46): Data Latency=1 Reg=$d1
    SU(45): Data Latency=1 Reg=$d2
  Successors:
    SU(48): Data Latency=1 Reg=$d1
SU(48):   STRDroX renamable $d1, renamable $x1, renamable $x18, 0, 0 :: (store 8 into %ir.arrayidx215)
  # preds left       : 17
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 6
  Predecessors:
    SU(47): Data Latency=1 Reg=$d1
    SU(42): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(31): Data Latency=1 Reg=$x1
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(7): Data Latency=1 Reg=$x18
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(51): Ord  Latency=0 Memory
    SU(49): Ord  Latency=1 Memory
SU(49):   renamable $w16 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 31
  Height             : 5
  Predecessors:
    SU(48): Ord  Latency=1 Memory
    SU(42): Anti Latency=0
    SU(40): Out  Latency=1
  Successors:
    SU(50): Out  Latency=1
    SU(50): Data Latency=4 Reg=$w16
    SU(51): Ord  Latency=0 Memory
SU(50):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 1
  Predecessors:
    SU(49): Out  Latency=1
    SU(49): Data Latency=4 Reg=$w16
  Successors:
    SU(51): Data Latency=1 Reg=$w16
SU(51):   STURWi renamable $w16, $fp, -60 :: (store 4 into %ir.i)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 0
  Predecessors:
    SU(50): Data Latency=1 Reg=$w16
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.41
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 36
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 36
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x16, renamable $x17 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 36c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 4 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  34 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x18 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 7 
Queue TopQ.A: 4 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  20 cycles 
  Cand SU(2) TOP-PATH                  32 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x0 = LDURSWi $fp, -44 :: (dereferenceable load 4 from %ir.sizei.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 7 8 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x1 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 7 
Queue TopQ.A: 4 5 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(5) TOP-PATH                  32 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x16 = MADDXrrr renamable $x16, renamable $x8, $xzr
  Ready @4c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 29 
Queue TopQ.A: 4 6 9 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(6) TOP-PATH                  32 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x17 = ADDXrs renamable $x17, renamable $x17, 2
  Ready @5c
  TopQ.A BotLatency SU(6) 32c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 29 
Queue TopQ.A: 4 7 9 10 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(7) TOP-PATH                  30 cycles 
  Cand SU(9) TOP-PATH                  31 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x2 = ADDXrs renamable $x9, renamable $x16, 0
  Ready @6c
  TopQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 7 8 10 29 
  TopQ.A RemainingLatency 0 + 7c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(7) TOP-PATH                  30 cycles 
  Cand SU(10) TOP-PATH                  31 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x17 = UBFMXri renamable $x17, 61, 60
  Ready @7c
  TopQ.A BotLatency SU(10) 31c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 7 8 29 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(7) TOP-PATH                  30 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x18 = UBFMXri renamable $x18, 61, 60
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 11 8 29 
  TopQ.A RemainingLatency 0 + 9c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(11) TOP-PATH                  30 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x2 = ADDXrs renamable $x2, renamable $x17, 0
  Ready @9c
  TopQ.A TopLatency SU(11) 6c
  TopQ.A BotLatency SU(11) 30c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 8 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  28 cycles 
  Cand SU(12) TOP-PATH                  29 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $d2 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx150)
  Ready @10c
  TopQ.A TopLatency SU(12) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 8 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  28 cycles 
  Cand SU(13) TOP-PATH                  29 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x2 = ADDXrs renamable $x12, renamable $x16, 0
  Ready @11c
  TopQ.A BotLatency SU(13) 29c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 8 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  28 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x0 = MADDXrrr renamable $x0, renamable $x10, $xzr
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(14) TOP-PATH                  28 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x2 = ADDXrs renamable $x2, renamable $x17, 0
  Ready @13c
  TopQ.A TopLatency SU(14) 8c
  TopQ.A BotLatency SU(14) 28c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(15) TOP-PATH                  27 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d3 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx165)
  Ready @14c
  TopQ.A TopLatency SU(15) 9c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 16 
  TopQ.A RemainingLatency 0 + 15c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(16) TOP-PATH                  27 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $x2 = ADDXrs renamable $x11, renamable $x0, 0
  Ready @15c
  TopQ.A BotLatency SU(16) 27c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 17 
  TopQ.A RemainingLatency 0 + 16c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(17) TOP-PATH                  26 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x2 = ADDXrs renamable $x2, renamable $x16, 0
  Ready @16c
  TopQ.A TopLatency SU(17) 10c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 18 
  TopQ.A RemainingLatency 0 + 17c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(18) TOP-PATH                  25 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) $x2 = ADDXrs renamable $x2, renamable $x17, 0
  Ready @17c
  TopQ.A TopLatency SU(18) 11c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 19 
  TopQ.A RemainingLatency 0 + 18c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(19) TOP-PATH                  24 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $d4 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx158)
  Ready @18c
  TopQ.A TopLatency SU(19) 12c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 33 
Queue TopQ.A: 4 29 20 
  TopQ.A RemainingLatency 0 + 19c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(20) TOP-PATH                  24 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) $x2 = ADDXrs renamable $x13, renamable $x0, 0
  Ready @19c
  TopQ.A BotLatency SU(20) 24c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 33 
Queue TopQ.A: 4 29 21 
  TopQ.A RemainingLatency 0 + 20c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(21) TOP-PATH                  23 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) $x2 = ADDXrs renamable $x2, renamable $x16, 0
  Ready @20c
  TopQ.A TopLatency SU(21) 13c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 33 
Queue TopQ.A: 4 29 22 
  TopQ.A RemainingLatency 0 + 21c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(22) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) $x2 = ADDXrs renamable $x2, renamable $x17, 0
  Ready @21c
  TopQ.A TopLatency SU(22) 14c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 23 33 
  TopQ.A RemainingLatency 0 + 22c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(23) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $d5 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx173)
  Ready @22c
  TopQ.A TopLatency SU(23) 15c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 36 
Queue TopQ.A: 4 29 33 24 
  TopQ.A RemainingLatency 0 + 23c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(24) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) $x2 = ADDXrs renamable $x14, renamable $x0, 0
  Ready @23c
  TopQ.A BotLatency SU(24) 21c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 36 
Queue TopQ.A: 4 29 33 25 30 
  TopQ.A RemainingLatency 0 + 24c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(25) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) $x2 = ADDXrs renamable $x2, renamable $x16, 0
  Ready @24c
  TopQ.A TopLatency SU(25) 16c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 36 
Queue TopQ.A: 4 29 33 30 26 
  TopQ.A RemainingLatency 0 + 25c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(30) TOP-PATH                  19 cycles 
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) $x2 = ADDXrs renamable $x2, renamable $x17, 0
  Ready @25c
  TopQ.A TopLatency SU(26) 17c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 30 27 36 
  TopQ.A RemainingLatency 0 + 26c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(30) TOP-PATH                  19 cycles 
Pick Top TOP-PATH  
Scheduling SU(30) $x0 = ADDXrs renamable $x15, renamable $x0, 0
  Ready @26c
  TopQ.A BotLatency SU(30) 19c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 27 32 
  TopQ.A RemainingLatency 0 + 27c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(27) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) renamable $d6 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx189)
  Ready @27c
  TopQ.A TopLatency SU(27) 18c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 32 28 
  TopQ.A RemainingLatency 0 + 28c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(32) TOP-PATH                  18 cycles 
  Cand SU(28) ORDER                              
Pick Top ORDER     
Scheduling SU(28) renamable $x2 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  Ready @28c
  TopQ.A BotLatency SU(28) 18c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 32 
  TopQ.A RemainingLatency 0 + 29c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(32) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) $x0 = ADDXrs renamable $x0, renamable $x16, 0
  Ready @29c
  TopQ.A BotLatency SU(32) 18c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 35 
  TopQ.A RemainingLatency 0 + 30c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(35) TOP-PATH                  17 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) $x0 = ADDXrs renamable $x0, renamable $x17, 0
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 
  TopQ.A RemainingLatency 0 + 31c > CritPath 36
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDURDi $fp, -56 :: (dereferenceable load 8 from %ir.rdtime)
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 36 29 33 
  TopQ.A RemainingLatency 0 + 32c > CritPath 36
  Cand SU(36) ORDER                              
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) $x1 = ADDXrs renamable $x1, renamable $x16, 0
  Ready @32c
  TopQ.A BotLatency SU(29) 16c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 36 33 31 39 
  TopQ.A RemainingLatency 0 + 33c > CritPath 36
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) renamable $d3 = FMULDrr renamable $d3, renamable $d5
  Ready @33c
  TopQ.A TopLatency SU(36) 19c
  TopQ.A BotLatency SU(36) 16c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 31 37 
  TopQ.A RemainingLatency 0 + 34c > CritPath 36
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(31) TOP-PATH                  15 cycles 
  Cand SU(37) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) renamable $d5 = LDRDroX renamable $x0, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx200)
  Ready @34c
  TopQ.A BotLatency SU(37) 16c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 41 
Queue TopQ.A: 39 33 31 
  TopQ.A RemainingLatency 0 + 35c > CritPath 36
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(31) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(31) $x1 = ADDXrs renamable $x1, renamable $x17, 0
  Ready @35c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 41 
Queue TopQ.A: 39 33 
  TopQ.A RemainingLatency 0 + 36c > CritPath 36
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
Pick Top ORDER     
Scheduling SU(33) renamable $d2 = FMULDrr renamable $d2, renamable $d4
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 41 
Queue TopQ.A: 39 43 34 
  TopQ.A RemainingLatency 0 + 37c > CritPath 36
  Cand SU(39) ORDER                              
  Cand SU(34) ORDER                              
Pick Top ORDER     
Scheduling SU(34) renamable $d4 = LDRDroX renamable $x1, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx181)
  Ready @37c
  TopQ.A BotLatency SU(34) 14c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 39 43 41 
  TopQ.A RemainingLatency 0 + 38c > CritPath 36
  Cand SU(39) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(39) $x16 = ADDXrs renamable $x2, renamable $x16, 0
  Ready @38c
  TopQ.A TopLatency SU(39) 22c
  TopQ.A BotLatency SU(39) 14c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 41 43 40 
  TopQ.A RemainingLatency 0 + 39c > CritPath 36
  Cand SU(41) ORDER                              
  Cand SU(40) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(40) $x16 = ADDXrs renamable $x16, renamable $x17, 0
  Ready @39c
  TopQ.A TopLatency SU(40) 23c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 41 43 
  TopQ.A RemainingLatency 0 + 40c > CritPath 36
  Cand SU(41) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(41) renamable $d1 = FMULDrr renamable $d5, renamable $d1
  Ready @40c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 42 38 
  TopQ.A RemainingLatency 0 + 41c > CritPath 36
  Cand SU(43) ORDER                              
  Cand SU(42) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) renamable $d5 = LDRDroX renamable $x16, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx207)
  Ready @41c
  TopQ.A TopLatency SU(42) 24c
  TopQ.A BotLatency SU(42) 12c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 46 
Queue TopQ.A: 43 38 
  TopQ.A RemainingLatency 0 + 42c > CritPath 36
  Cand SU(43) ORDER                              
  Cand SU(38) ORDER                              
Pick Top ORDER     
Scheduling SU(38) renamable $d4 = FMULDrr renamable $d4, renamable $d6
  Ready @42c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 46 
Queue TopQ.A: 43 
Pick Top ONLY1     
Scheduling SU(43) renamable $d2 = FADDDrr renamable $d2, renamable $d3
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 46 
Queue TopQ.A: 44 
Pick Top ONLY1     
Scheduling SU(44) renamable $d2 = FADDDrr renamable $d2, renamable $d4
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 45 46 
  TopQ.A RemainingLatency 0 + 45c > CritPath 36
  Cand SU(45) ORDER                              
Pick Top ORDER     
Scheduling SU(45) renamable $d2 = FMULDrr renamable $d2, renamable $d0
  Ready @45c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 
Pick Top ONLY1     
Scheduling SU(46) renamable $d1 = FMULDrr renamable $d1, renamable $d5
  Ready @46c
  TopQ.A TopLatency SU(46) 28c
  TopQ.A BotLatency SU(46) 8c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 
Pick Top ONLY1     
Scheduling SU(47) renamable $d1 = FADDDrr renamable $d2, renamable $d1
  Ready @47c
  TopQ.A TopLatency SU(47) 29c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 48 
Pick Top ONLY1     
Scheduling SU(48) STRDroX renamable $d1, renamable $x1, renamable $x18, 0, 0 :: (store 8 into %ir.arrayidx215)
  Ready @48c
  TopQ.A TopLatency SU(48) 30c
  *** Max MOps 1 at cycle 48
Cycle: 49 TopQ.A
TopQ.A @49c
  Retired: 49
  Executed: 49c
  Critical: 49c, 49 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 49 
Pick Top ONLY1     
Scheduling SU(49) renamable $w16 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @49c
  TopQ.A TopLatency SU(49) 31c
  *** Max MOps 1 at cycle 49
Cycle: 50 TopQ.A
TopQ.A @50c
  Retired: 50
  Executed: 50c
  Critical: 50c, 50 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 53 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 50 
Pick Top ONLY1     
Scheduling SU(50) renamable $w16 = nsw ADDWri renamable $w16, 1, 0
  Ready @53c
  TopQ.A TopLatency SU(50) 35c
  *** Max MOps 1 at cycle 53
Cycle: 54 TopQ.A
TopQ.A @54c
  Retired: 51
  Executed: 54c
  Critical: 51c, 51 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 51 
Pick Top ONLY1     
Scheduling SU(51) STURWi renamable $w16, $fp, -60 :: (store 4 into %ir.i)
  Ready @54c
  TopQ.A TopLatency SU(51) 36c
  *** Max MOps 1 at cycle 54
Cycle: 55 TopQ.A
TopQ.A @55c
  Retired: 52
  Executed: 55c
  Critical: 52c, 52 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $x16, renamable $x17 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(1):   renamable $x18 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(2):   renamable $x0 = LDURSWi $fp, -44 :: (dereferenceable load 4 from %ir.sizei.addr)
SU(3):   renamable $x1 = LDURXi $fp, -24 :: (dereferenceable load 8 from %ir.r.addr)
SU(5):   renamable $x16 = MADDXrrr renamable $x16, renamable $x8, $xzr
SU(6):   renamable $x17 = ADDXrs renamable $x17, renamable $x17, 2
SU(9):   $x2 = ADDXrs renamable $x9, renamable $x16, 0
SU(10):   renamable $x17 = UBFMXri renamable $x17, 61, 60
SU(7):   renamable $x18 = UBFMXri renamable $x18, 61, 60
SU(11):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
SU(12):   renamable $d2 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx150)
SU(13):   $x2 = ADDXrs renamable $x12, renamable $x16, 0
SU(8):   renamable $x0 = MADDXrrr renamable $x0, renamable $x10, $xzr
SU(14):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
SU(15):   renamable $d3 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx165)
SU(16):   $x2 = ADDXrs renamable $x11, renamable $x0, 0
SU(17):   $x2 = ADDXrs renamable $x2, renamable $x16, 0
SU(18):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
SU(19):   renamable $d4 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx158)
SU(20):   $x2 = ADDXrs renamable $x13, renamable $x0, 0
SU(21):   $x2 = ADDXrs renamable $x2, renamable $x16, 0
SU(22):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
SU(23):   renamable $d5 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx173)
SU(24):   $x2 = ADDXrs renamable $x14, renamable $x0, 0
SU(25):   $x2 = ADDXrs renamable $x2, renamable $x16, 0
SU(26):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
SU(30):   $x0 = ADDXrs renamable $x15, renamable $x0, 0
SU(27):   renamable $d6 = LDRDroX renamable $x2, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx189)
SU(28):   renamable $x2 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
SU(32):   $x0 = ADDXrs renamable $x0, renamable $x16, 0
SU(35):   $x0 = ADDXrs renamable $x0, renamable $x17, 0
SU(4):   renamable $d1 = LDURDi $fp, -56 :: (dereferenceable load 8 from %ir.rdtime)
SU(29):   $x1 = ADDXrs renamable $x1, renamable $x16, 0
SU(36):   renamable $d3 = FMULDrr renamable $d3, renamable $d5
SU(37):   renamable $d5 = LDRDroX renamable $x0, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx200)
SU(31):   $x1 = ADDXrs renamable $x1, renamable $x17, 0
SU(33):   renamable $d2 = FMULDrr renamable $d2, renamable $d4
SU(34):   renamable $d4 = LDRDroX renamable $x1, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx181)
SU(39):   $x16 = ADDXrs renamable $x2, renamable $x16, 0
SU(40):   $x16 = ADDXrs renamable $x16, renamable $x17, 0
SU(41):   renamable $d1 = FMULDrr renamable $d5, renamable $d1
SU(42):   renamable $d5 = LDRDroX renamable $x16, renamable $x18, 0, 0 :: (load 8 from %ir.arrayidx207)
SU(38):   renamable $d4 = FMULDrr renamable $d4, renamable $d6
SU(43):   renamable $d2 = FADDDrr renamable $d2, renamable $d3
SU(44):   renamable $d2 = FADDDrr renamable $d2, renamable $d4
SU(45):   renamable $d2 = FMULDrr renamable $d2, renamable $d0
SU(46):   renamable $d1 = FMULDrr renamable $d1, renamable $d5
SU(47):   renamable $d1 = FADDDrr renamable $d2, renamable $d1
SU(48):   STRDroX renamable $d1, renamable $x1, renamable $x18, 0, 0 :: (store 8 into %ir.arrayidx215)
SU(49):   renamable $w16 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(50):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0
SU(51):   STURWi renamable $w16, $fp, -60 :: (store 4 into %ir.i)

Fixup kills for %bb.42
********** MI Scheduling **********
laplacian:%bb.43 for.inc219
  From: renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.39
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w16
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    SU(2): Data Latency=1 Reg=$w16
SU(2):   STURWi renamable $w16, $fp, -64 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.39
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = nsw ADDWri renamable $w16, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w16, $fp, -64 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   renamable $w16 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0
SU(2):   STURWi renamable $w16, $fp, -64 :: (store 4 into %ir.j)

Fixup kills for %bb.43
********** MI Scheduling **********
laplacian:%bb.44 for.inc222
  From: renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.37
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w16
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    SU(2): Data Latency=1 Reg=$w16
SU(2):   STURWi renamable $w16, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.37
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = nsw ADDWri renamable $w16, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w16, $fp, -68 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $w16 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0
SU(2):   STURWi renamable $w16, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.44
********** MI Scheduling **********
laplacian:%bb.45 for.end224
  From: $fp, $lr = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.11), (load 8 from %stack.10)
    To: early-clobber $sp, $x28 = frame-destroy LDRXpost $sp(tied-def 0), 48 :: (load 8 from %stack.14)
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.11), (load 8 from %stack.10)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.13), (load 8 from %stack.12)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   early-clobber $sp, $x28 = frame-destroy LDRXpost $sp(tied-def 0), 48 :: (load 8 from %stack.14)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.11), (load 8 from %stack.10)
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.13), (load 8 from %stack.12)
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 4 :: (load 8 from %stack.11), (load 8 from %stack.10)
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.13), (load 8 from %stack.12)

Fixup kills for %bb.45
