Before MISched:
# Machine code for function randlc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e-01, align=8
Function Live Ins: $rdi in %0, $rsi in %1

bb.0.entry:
  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
  liveins: $rdi, $rsi
  %1:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
  MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
  CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12
  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !114; is.c:264:9
  JMP_1 %bb.1, debug-location !114; is.c:264:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %2:gr64 = MOV64ri 4607182418800017408
  MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  %3:gr32 = MOV32ri 1
  MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

bb.2.for.cond:
; predecessors: %bb.1, %bb.3
  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)

  CMP32mi8 %stack.11.i, 1, $noreg, 0, $noreg, 23, implicit-def $eflags, debug-location !125 :: (dereferenceable load 4 from %ir.i); is.c:270:23
  JCC_1 %bb.4, 15, implicit killed $eflags, debug-location !126; is.c:270:9
  JMP_1 %bb.3, debug-location !126; is.c:270:9

bb.3.for.body:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  %51:fr64 = MULSDrr %51:fr64(tied-def 0), %54:fr64, debug-location !129; is.c:271:24
  MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %51:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  %53:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  %53:fr64 = ADDSDrr %53:fr64(tied-def 0), %53:fr64, debug-location !132; is.c:272:23
  MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %53:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31
  JMP_1 %bb.2, debug-location !136; is.c:270:9

bb.4.for.end:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %6:gr32 = MOV32ri 1
  MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %6:gr32, debug-location !139 :: (store 4 into %ir.i); is.c:274:16
  %55:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

bb.5.for.cond3:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  CMP32mi8 %stack.11.i, 1, $noreg, 0, $noreg, 46, implicit-def $eflags, debug-location !144 :: (dereferenceable load 4 from %ir.i); is.c:274:23
  JCC_1 %bb.7, 15, implicit killed $eflags, debug-location !145; is.c:274:9
  JMP_1 %bb.6, debug-location !145; is.c:274:9

bb.6.for.body5:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  %47:fr64 = MULSDrr %47:fr64(tied-def 0), %55:fr64, debug-location !148; is.c:275:24
  MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %47:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
  %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  %49:fr64 = ADDSDrr %49:fr64(tied-def 0), %49:fr64, debug-location !151; is.c:276:23
  MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %49:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
  INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31
  JMP_1 %bb.5, debug-location !155; is.c:274:9

bb.7.for.end10:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  %9:gr32 = MOV32ri 1
  MOV32mr $rip, 1, $noreg, @randlc.KS, $noreg, %9:gr32, debug-location !158 :: (store 4 into @randlc.KS); is.c:278:12

bb.8.if.end:
; predecessors: %bb.0, %bb.7

  %19:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  %11:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  %12:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
  %12:fr64 = MULSDrr %12:fr64(tied-def 0), %19:fr64, debug-location !163; is.c:283:14
  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %12:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
  %13:gr32 = CVTTSD2SIrr %12:fr64, debug-location !165; is.c:284:9
  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %13:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
  %16:fr64 = CVTSI2SDrr %13:gr32, debug-location !167; is.c:285:10
  MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
  %27:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
  %16:fr64 = MULSDrm %16:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
  %27:fr64 = SUBSDrr %27:fr64(tied-def 0), %16:fr64, debug-location !174; is.c:286:13
  MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %27:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
  %18:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  %19:fr64 = MULSDrm %19:fr64(tied-def 0), %18:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %19:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
  %20:gr32 = CVTTSD2SIrr %19:fr64, debug-location !181; is.c:293:9
  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %20:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
  %24:fr64 = CVTSI2SDrr %20:gr32, debug-location !183; is.c:294:10
  MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %24:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
  %22:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  %35:fr64 = MOVSDrm_alt %22:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
  %27:fr64 = MULSDrr %27:fr64(tied-def 0), %24:fr64, debug-location !197; is.c:296:23
  %24:fr64 = MULSDrm %24:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
  %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %24:fr64, debug-location !190; is.c:295:13
  MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %35:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
  %28:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
  %28:fr64 = MULSDrr %28:fr64(tied-def 0), %35:fr64, debug-location !194; is.c:296:13
  %28:fr64 = ADDSDrr %28:fr64(tied-def 0), %27:fr64, debug-location !198; is.c:296:18
  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %28:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  %29:fr64 = MULSDrr %29:fr64(tied-def 0), %28:fr64, debug-location !202; is.c:298:13
  %30:gr32 = CVTTSD2SIrr %29:fr64, debug-location !200; is.c:298:9
  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %30:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
  %32:fr64 = CVTSI2SDrr %30:gr32, debug-location !204; is.c:299:10
  MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
  %32:fr64 = MULSDrm %32:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
  %28:fr64 = SUBSDrr %28:fr64(tied-def 0), %32:fr64, debug-location !210; is.c:300:12
  MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %28:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
  %28:fr64 = MULSDrm %28:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
  %35:fr64 = MULSDrm %35:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
  %35:fr64 = ADDSDrr %35:fr64(tied-def 0), %28:fr64, debug-location !218; is.c:301:18
  MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %35:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
  %37:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  %37:fr64 = MULSDrr %37:fr64(tied-def 0), %35:fr64, debug-location !222; is.c:302:13
  %38:gr32 = CVTTSD2SIrr %37:fr64, debug-location !220; is.c:302:9
  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %38:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
  %40:fr64 = CVTSI2SDrr %38:gr32, debug-location !224; is.c:303:10
  MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %40:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
  %40:fr64 = MULSDrm %40:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
  %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %40:fr64, debug-location !230; is.c:304:13
  %42:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  MOVSDmr %42:gr64, 1, $noreg, 0, $noreg, %35:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
  %45:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  %44:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  %45:fr64 = MULSDrm %45:fr64(tied-def 0), %44:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
  $xmm0 = COPY %45:fr64, debug-location !237; is.c:305:5
  RET 0, killed $xmm0, debug-location !237; is.c:305:5

# End machine code for function randlc.

********** MI Scheduling **********
randlc:%bb.0 entry
  From: %1:gr64 = COPY $rsi
    To: JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !114; is.c:264:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(4):   CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !114; is.c:264:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:gr64 = COPY $rdi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   %0:gr64 = COPY $rdi
SU(2):   MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
SU(3):   MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
SU(4):   CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12

********** MI Scheduling **********
randlc:%bb.1 if.then
  From: %2:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=1
FR32X=1
GR16=2
Live In: 
Live Out: %54 
Live Thru: 
  LiveReg: %54
Top Pressure:

Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %2:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%2
    SU(3): Data Latency=1 Reg=%2
    SU(2): Data Latency=1 Reg=%2
    SU(1): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(5):   %3:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%3
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(6):   MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%3
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 3 2 1 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
Bottom Pressure:

  Ready @3c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 3 2 1 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
Bottom Pressure:
GR16=2
  LiveReg: %3
  UpdateRegP: SU(6) MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
              to 
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 5 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(5) %3:gr32 = MOV32ri 1
Bottom Pressure:

  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
Bottom Pressure:
GR16=2
  LiveReg: %2
  UpdateRegP: SU(1) MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
              to 
  UpdateRegP: SU(2) MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
              to 
  UpdateRegP: SU(3) MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
              to 
  UpdateRegP: SU(4) MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
              to 
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
Bottom Pressure:
GR16=2
  Ready @1c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
Bottom Pressure:
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %2:gr64 = MOV64ri 4607182418800017408
Bottom Pressure:

  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %2:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
SU(2):   MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
SU(3):   MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
SU(4):   MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
SU(5):   %3:gr32 = MOV32ri 1
SU(6):   MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
SU(7):   %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
randlc:%bb.3 for.body
  From: %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
    To: JMP_1 %bb.2, debug-location !136; is.c:270:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%51
    SU(1): Out  Latency=0
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %51:fr64 = MULSDrr %51:fr64(tied-def 0), %54:fr64, debug-location !129; is.c:271:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%51
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(2):   MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %51:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%51
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %53:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%53
    SU(4): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %53:fr64 = ADDSDrr %53:fr64(tied-def 0), %53:fr64, debug-location !132; is.c:272:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%53
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%53
  Single Issue       : false;
SU(5):   MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %53:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%53
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.2, debug-location !136; is.c:270:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %53:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %53:fr64 = ADDSDrr %53:fr64(tied-def 0), %53:fr64, debug-location !132; is.c:272:23
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %53:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %51:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %51:fr64 = MULSDrr %51:fr64(tied-def 0), %54:fr64, debug-location !129; is.c:271:24
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  Ready @6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
SU(1):   %51:fr64 = MULSDrr %51:fr64(tied-def 0), %54:fr64, debug-location !129; is.c:271:24
SU(2):   MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %51:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
SU(3):   %53:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
SU(4):   %53:fr64 = ADDSDrr %53:fr64(tied-def 0), %53:fr64, debug-location !132; is.c:272:23
SU(5):   MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %53:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
SU(6):   INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31

********** MI Scheduling **********
randlc:%bb.4 for.end
  From: %6:gr32 = MOV32ri 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %6:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(1):   MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %6:gr32, debug-location !139 :: (store 4 into %ir.i); is.c:274:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(2):   %55:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %55:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %6:gr32, debug-location !139 :: (store 4 into %ir.i); is.c:274:16
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %6:gr32 = MOV32ri 1
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %6:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %6:gr32, debug-location !139 :: (store 4 into %ir.i); is.c:274:16
SU(2):   %55:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

********** MI Scheduling **********
randlc:%bb.6 for.body5
  From: %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
    To: JMP_1 %bb.5, debug-location !155; is.c:274:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%47
    SU(1): Out  Latency=0
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %47:fr64 = MULSDrr %47:fr64(tied-def 0), %55:fr64, debug-location !148; is.c:275:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%47
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=%47
  Single Issue       : false;
SU(2):   MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %47:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%47
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%49
    SU(4): Out  Latency=0
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %49:fr64 = ADDSDrr %49:fr64(tied-def 0), %49:fr64, debug-location !151; is.c:276:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%49
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%49
  Single Issue       : false;
SU(5):   MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %49:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%49
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.5, debug-location !155; is.c:274:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 6 
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31
  Ready @3c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %49:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %49:fr64 = ADDSDrr %49:fr64(tied-def 0), %49:fr64, debug-location !151; is.c:276:23
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %47:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %47:fr64 = MULSDrr %47:fr64(tied-def 0), %55:fr64, debug-location !148; is.c:275:24
  Ready @2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  Ready @6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
SU(1):   %47:fr64 = MULSDrr %47:fr64(tied-def 0), %55:fr64, debug-location !148; is.c:275:24
SU(2):   MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %47:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
SU(3):   %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
SU(4):   %49:fr64 = ADDSDrr %49:fr64(tied-def 0), %49:fr64, debug-location !151; is.c:276:23
SU(5):   MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %49:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
SU(6):   INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31

********** MI Scheduling **********
randlc:%bb.7 for.end10
  From: %9:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %9:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%9
  Single Issue       : false;
SU(1):   MOV32mr $rip, 1, $noreg, @randlc.KS, $noreg, %9:gr32, debug-location !158 :: (store 4 into @randlc.KS); is.c:278:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%9
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr $rip, 1, $noreg, @randlc.KS, $noreg, %9:gr32, debug-location !158 :: (store 4 into @randlc.KS); is.c:278:12
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %9:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %9:gr32 = MOV32ri 1
SU(1):   MOV32mr $rip, 1, $noreg, @randlc.KS, $noreg, %9:gr32, debug-location !158 :: (store 4 into @randlc.KS); is.c:278:12

********** MI Scheduling **********
randlc:%bb.8 if.end
  From: %19:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
    To: RET 0, killed $xmm0, debug-location !237; is.c:305:5
 RegionInstrs: 57
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=3
FR32X=3
GR16=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:
FR32=1
FR32X=1
Excess PSets: 
SU(0):   %19:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 58
  Successors:
    SU(14): Data Latency=4 Reg=%19
    SU(3): Data Latency=4 Reg=%19
    SU(14): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(1):   %11:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 62
  Successors:
    SU(9): Data Latency=4 Reg=%11
    SU(2): Data Latency=4 Reg=%11
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(2):   %12:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
  # preds left       : 1
  # succs left       : 18
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 58
  Predecessors:
    SU(1): Data Latency=4 Reg=%11
  Successors:
    SU(3): Data Latency=4 Reg=%12
    SU(3): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(3):   %12:fr64 = MULSDrr %12:fr64(tied-def 0), %19:fr64, debug-location !163; is.c:283:14
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 54
  Predecessors:
    SU(2): Data Latency=4 Reg=%12
    SU(2): Out  Latency=0
    SU(0): Data Latency=4 Reg=%19
  Successors:
    SU(5): Data Latency=1 Reg=%12
    SU(4): Data Latency=1 Reg=%12
    SU(14): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %12:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 51
  Predecessors:
    SU(3): Data Latency=1 Reg=%12
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(29): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   %13:gr32 = CVTTSD2SIrr %12:fr64, debug-location !165; is.c:284:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 53
  Predecessors:
    SU(3): Data Latency=1 Reg=%12
  Successors:
    SU(7): Data Latency=1 Reg=%13
    SU(6): Data Latency=1 Reg=%13
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(6):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %13:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 51
  Predecessors:
    SU(5): Data Latency=1 Reg=%13
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %16:fr64 = CVTSI2SDrr %13:gr32, debug-location !167; is.c:285:10
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 52
  Predecessors:
    SU(5): Data Latency=1 Reg=%13
  Successors:
    SU(10): Data Latency=1 Reg=%16
    SU(8): Data Latency=1 Reg=%16
    SU(10): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(8):   MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 51
  Predecessors:
    SU(7): Data Latency=1 Reg=%16
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(10): Anti Latency=0
    SU(26): Ord  Latency=1 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(9):   %27:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
  # preds left       : 4
  # succs left       : 15
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 50
  Predecessors:
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=%11
  Successors:
    SU(11): Data Latency=4 Reg=%27
    SU(11): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(10):   %16:fr64 = MULSDrm %16:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 50
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Data Latency=1 Reg=%16
    SU(7): Out  Latency=0
  Successors:
    SU(11): Data Latency=4 Reg=%16
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %27:fr64 = SUBSDrr %27:fr64(tied-def 0), %16:fr64, debug-location !174; is.c:286:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 46
  Predecessors:
    SU(9): Data Latency=4 Reg=%27
    SU(10): Data Latency=4 Reg=%16
    SU(9): Out  Latency=0
  Successors:
    SU(22): Data Latency=1 Reg=%27
    SU(12): Data Latency=1 Reg=%27
    SU(22): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(12):   MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %27:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 45
  Predecessors:
    SU(11): Data Latency=1 Reg=%27
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(22): Anti Latency=0
    SU(40): Ord  Latency=1 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(13):   %18:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 48
  Successors:
    SU(14): Data Latency=4 Reg=%18
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(14):   %19:fr64 = MULSDrm %19:fr64(tied-def 0), %18:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
  # preds left       : 8
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 44
  Predecessors:
    SU(13): Data Latency=4 Reg=%18
    SU(12): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(0): Data Latency=4 Reg=%19
    SU(0): Out  Latency=0
  Successors:
    SU(16): Data Latency=4 Reg=%19
    SU(15): Data Latency=4 Reg=%19
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(15):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %19:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 38
  Predecessors:
    SU(14): Data Latency=4 Reg=%19
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(29): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(16):   %20:gr32 = CVTTSD2SIrr %19:fr64, debug-location !181; is.c:293:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 40
  Predecessors:
    SU(14): Data Latency=4 Reg=%19
  Successors:
    SU(18): Data Latency=1 Reg=%20
    SU(17): Data Latency=1 Reg=%20
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(17):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %20:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
  # preds left       : 5
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 38
  Predecessors:
    SU(16): Data Latency=1 Reg=%20
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(18):   %24:fr64 = CVTSI2SDrr %20:gr32, debug-location !183; is.c:294:10
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 39
  Predecessors:
    SU(16): Data Latency=1 Reg=%20
  Successors:
    SU(23): Data Latency=1 Reg=%24
    SU(22): Data Latency=1 Reg=%24
    SU(19): Data Latency=1 Reg=%24
    SU(23): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(19):   MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %24:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 38
  Predecessors:
    SU(18): Data Latency=1 Reg=%24
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(23): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(21): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(20):   %22:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 41
  Successors:
    SU(21): Data Latency=4 Reg=%22
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(21):   %35:fr64 = MOVSDrm_alt %22:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
  # preds left       : 8
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 37
  Predecessors:
    SU(20): Data Latency=4 Reg=%22
    SU(19): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(24): Data Latency=4 Reg=%35
    SU(24): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(22):   %27:fr64 = MULSDrr %27:fr64(tied-def 0), %24:fr64, debug-location !197; is.c:296:23
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 37
  Predecessors:
    SU(18): Data Latency=1 Reg=%24
    SU(12): Anti Latency=0
    SU(11): Data Latency=1 Reg=%27
    SU(11): Out  Latency=0
  Successors:
    SU(28): Data Latency=1 Reg=%27
    SU(23): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(23):   %24:fr64 = MULSDrm %24:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 37
  Predecessors:
    SU(22): Anti Latency=0
    SU(19): Anti Latency=0
    SU(18): Data Latency=1 Reg=%24
    SU(18): Out  Latency=0
  Successors:
    SU(24): Data Latency=4 Reg=%24
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(24):   %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %24:fr64, debug-location !190; is.c:295:13
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 33
  Predecessors:
    SU(21): Data Latency=4 Reg=%35
    SU(23): Data Latency=4 Reg=%24
    SU(21): Out  Latency=0
  Successors:
    SU(40): Data Latency=1 Reg=%35
    SU(27): Data Latency=1 Reg=%35
    SU(25): Data Latency=1 Reg=%35
    SU(40): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(25):   MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %35:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 22
  Predecessors:
    SU(24): Data Latency=1 Reg=%35
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(40): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(26):   %28:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 36
  Predecessors:
    SU(8): Ord  Latency=1 Memory
  Successors:
    SU(27): Data Latency=4 Reg=%28
    SU(27): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(27):   %28:fr64 = MULSDrr %28:fr64(tied-def 0), %35:fr64, debug-location !194; is.c:296:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 32
  Predecessors:
    SU(24): Data Latency=1 Reg=%35
    SU(26): Out  Latency=0
    SU(26): Data Latency=4 Reg=%28
  Successors:
    SU(28): Data Latency=1 Reg=%28
    SU(28): Out  Latency=0
    SU(40): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(28):   %28:fr64 = ADDSDrr %28:fr64(tied-def 0), %27:fr64, debug-location !198; is.c:296:18
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 31
  Height             : 31
  Predecessors:
    SU(27): Data Latency=1 Reg=%28
    SU(27): Out  Latency=0
    SU(22): Data Latency=1 Reg=%27
  Successors:
    SU(37): Data Latency=1 Reg=%28
    SU(31): Data Latency=1 Reg=%28
    SU(29): Data Latency=1 Reg=%28
    SU(37): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(29):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %28:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 23
  Predecessors:
    SU(28): Data Latency=1 Reg=%28
    SU(21): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(37): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(30):   %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(31): Data Latency=4 Reg=%29
    SU(31): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(31):   %29:fr64 = MULSDrr %29:fr64(tied-def 0), %28:fr64, debug-location !202; is.c:298:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 32
  Height             : 30
  Predecessors:
    SU(28): Data Latency=1 Reg=%28
    SU(30): Out  Latency=0
    SU(30): Data Latency=4 Reg=%29
  Successors:
    SU(32): Data Latency=1 Reg=%29
    SU(37): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(32):   %30:gr32 = CVTTSD2SIrr %29:fr64, debug-location !200; is.c:298:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 33
  Height             : 29
  Predecessors:
    SU(31): Data Latency=1 Reg=%29
  Successors:
    SU(34): Data Latency=1 Reg=%30
    SU(33): Data Latency=1 Reg=%30
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(33):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %30:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 9
  Predecessors:
    SU(32): Data Latency=1 Reg=%30
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(46): Ord  Latency=0 Memory
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(34):   %32:fr64 = CVTSI2SDrr %30:gr32, debug-location !204; is.c:299:10
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 28
  Predecessors:
    SU(32): Data Latency=1 Reg=%30
  Successors:
    SU(36): Data Latency=1 Reg=%32
    SU(35): Data Latency=1 Reg=%32
    SU(36): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(35):   MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 27
  Predecessors:
    SU(34): Data Latency=1 Reg=%32
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(36): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(36):   %32:fr64 = MULSDrm %32:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 35
  Height             : 27
  Predecessors:
    SU(35): Anti Latency=0
    SU(34): Data Latency=1 Reg=%32
    SU(34): Out  Latency=0
  Successors:
    SU(37): Data Latency=4 Reg=%32
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %28:fr64 = SUBSDrr %28:fr64(tied-def 0), %32:fr64, debug-location !210; is.c:300:12
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 39
  Height             : 23
  Predecessors:
    SU(36): Data Latency=4 Reg=%32
    SU(31): Anti Latency=0
    SU(29): Anti Latency=0
    SU(28): Data Latency=1 Reg=%28
    SU(28): Out  Latency=0
  Successors:
    SU(39): Data Latency=1 Reg=%28
    SU(38): Data Latency=1 Reg=%28
    SU(39): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(38):   MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %28:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 40
  Height             : 22
  Predecessors:
    SU(37): Data Latency=1 Reg=%28
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(39): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(39):   %28:fr64 = MULSDrm %28:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 40
  Height             : 22
  Predecessors:
    SU(38): Anti Latency=0
    SU(37): Data Latency=1 Reg=%28
    SU(37): Out  Latency=0
  Successors:
    SU(41): Data Latency=4 Reg=%28
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(40):   %35:fr64 = MULSDrm %35:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 22
  Predecessors:
    SU(27): Anti Latency=0
    SU(25): Anti Latency=0
    SU(24): Data Latency=1 Reg=%35
    SU(24): Out  Latency=0
    SU(12): Ord  Latency=1 Memory
  Successors:
    SU(41): Data Latency=4 Reg=%35
    SU(41): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(41):   %35:fr64 = ADDSDrr %35:fr64(tied-def 0), %28:fr64, debug-location !218; is.c:301:18
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 44
  Height             : 18
  Predecessors:
    SU(39): Data Latency=4 Reg=%28
    SU(40): Out  Latency=0
    SU(40): Data Latency=4 Reg=%35
  Successors:
    SU(50): Data Latency=1 Reg=%35
    SU(44): Data Latency=1 Reg=%35
    SU(42): Data Latency=1 Reg=%35
    SU(50): Out  Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(42):   MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %35:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 45
  Height             : 10
  Predecessors:
    SU(41): Data Latency=1 Reg=%35
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(50): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(43):   %37:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(44): Data Latency=4 Reg=%37
    SU(44): Out  Latency=0
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(44):   %37:fr64 = MULSDrr %37:fr64(tied-def 0), %35:fr64, debug-location !222; is.c:302:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 45
  Height             : 17
  Predecessors:
    SU(41): Data Latency=1 Reg=%35
    SU(43): Out  Latency=0
    SU(43): Data Latency=4 Reg=%37
  Successors:
    SU(45): Data Latency=1 Reg=%37
    SU(50): Anti Latency=0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(45):   %38:gr32 = CVTTSD2SIrr %37:fr64, debug-location !220; is.c:302:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 46
  Height             : 16
  Predecessors:
    SU(44): Data Latency=1 Reg=%37
  Successors:
    SU(47): Data Latency=1 Reg=%38
    SU(46): Data Latency=1 Reg=%38
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(46):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %38:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 47
  Height             : 9
  Predecessors:
    SU(45): Data Latency=1 Reg=%38
    SU(33): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(47):   %40:fr64 = CVTSI2SDrr %38:gr32, debug-location !224; is.c:303:10
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 47
  Height             : 15
  Predecessors:
    SU(45): Data Latency=1 Reg=%38
  Successors:
    SU(49): Data Latency=1 Reg=%40
    SU(48): Data Latency=1 Reg=%40
    SU(49): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(48):   MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %40:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 48
  Height             : 14
  Predecessors:
    SU(47): Data Latency=1 Reg=%40
    SU(21): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(49): Anti Latency=0
    SU(55): Ord  Latency=1 Memory
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(49):   %40:fr64 = MULSDrm %40:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 48
  Height             : 14
  Predecessors:
    SU(48): Anti Latency=0
    SU(47): Data Latency=1 Reg=%40
    SU(47): Out  Latency=0
  Successors:
    SU(50): Data Latency=4 Reg=%40
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(50):   %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %40:fr64, debug-location !230; is.c:304:13
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 52
  Height             : 10
  Predecessors:
    SU(49): Data Latency=4 Reg=%40
    SU(44): Anti Latency=0
    SU(42): Anti Latency=0
    SU(41): Data Latency=1 Reg=%35
    SU(41): Out  Latency=0
  Successors:
    SU(52): Data Latency=1 Reg=%35
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(51):   %42:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(52): Data Latency=4 Reg=%42
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(52):   MOVSDmr %42:gr64, 1, $noreg, 0, $noreg, %35:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
  # preds left       : 35
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 53
  Height             : 9
  Predecessors:
    SU(50): Data Latency=1 Reg=%35
    SU(51): Ord  Latency=0 Memory
    SU(51): Data Latency=4 Reg=%42
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(39): Ord  Latency=0 Memory
    SU(38): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(35): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(25): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(55): Ord  Latency=1 Memory
    SU(54): Ord  Latency=1 Memory
    SU(53): Ord  Latency=1 Memory
  Pressure Diff      : FR32 1    FR32X 1    GR16 2
  Single Issue       : false;
SU(53):   %45:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 54
  Height             : 8
  Predecessors:
    SU(52): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%45
    SU(55): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(54):   %44:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 54
  Height             : 8
  Predecessors:
    SU(52): Ord  Latency=1 Memory
  Successors:
    SU(55): Data Latency=4 Reg=%44
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(55):   %45:fr64 = MULSDrm %45:fr64(tied-def 0), %44:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
  # preds left       : 19
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 58
  Height             : 4
  Predecessors:
    SU(54): Data Latency=4 Reg=%44
    SU(53): Data Latency=4 Reg=%45
    SU(53): Out  Latency=0
    SU(52): Ord  Latency=1 Memory
    SU(48): Ord  Latency=1 Memory
    SU(46): Ord  Latency=1 Memory
    SU(42): Ord  Latency=1 Memory
    SU(38): Ord  Latency=1 Memory
    SU(35): Ord  Latency=1 Memory
    SU(33): Ord  Latency=1 Memory
    SU(29): Ord  Latency=1 Memory
    SU(25): Ord  Latency=1 Memory
    SU(19): Ord  Latency=1 Memory
    SU(17): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(56): Data Latency=4 Reg=%45
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(56):   $xmm0 = COPY %45:fr64, debug-location !237; is.c:305:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 62
  Height             : 0
  Predecessors:
    SU(55): Data Latency=4 Reg=%45
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   RET 0, killed $xmm0, debug-location !237; is.c:305:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 62
  Height             : 0
  Predecessors:
    SU(56): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 62
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 56 
Scheduling SU(56) $xmm0 = COPY %45:fr64, debug-location !237; is.c:305:5
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %45
  UpdateRegP: SU(56) $xmm0 = COPY %45:fr64, debug-location !237; is.c:305:5
              to FR32 -1    FR32X -1
  Ready @0c
  BotQ.A TopLatency SU(56) 62c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 55 
Scheduling SU(55) %45:fr64 = MULSDrm %45:fr64(tied-def 0), %44:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %45
  UpdateRegP: SU(55) %45:fr64 = MULSDrm %45:fr64(tied-def 0), %44:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %44
  UpdateRegP: SU(55) %45:fr64 = MULSDrm %45:fr64(tied-def 0), %44:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
              to FR32 -1    FR32X -1
  Ready @4c
  BotQ.A BotLatency SU(55) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 54 53 
  Cand SU(54) ORDER                              
Pick Bot ORDER     
Scheduling SU(54) %44:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
Bottom Pressure:
FR32=1
FR32X=1
  Ready @8c
  BotQ.A BotLatency SU(54) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 53 
Scheduling SU(53) %45:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
Bottom Pressure:

  Ready @8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 52 
Scheduling SU(52) MOVSDmr %42:gr64, 1, $noreg, 0, $noreg, %35:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %42
  UpdateRegP: SU(52) MOVSDmr %42:gr64, 1, $noreg, 0, $noreg, %35:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
              to FR32 1    FR32X 1
  LiveReg: %35
  UpdateRegP: SU(52) MOVSDmr %42:gr64, 1, $noreg, 0, $noreg, %35:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
              to 
  Ready @9c
  BotQ.A BotLatency SU(52) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 51 46 
  Cand SU(50) ORDER                              
  Cand SU(51) ORDER                              
Pick Bot ORDER     
Scheduling SU(51) %42:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
Bottom Pressure:
FR32=1
FR32X=1
  Ready @13c
  BotQ.A BotLatency SU(51) 13c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 50 46 
  Cand SU(50) ORDER                              
Pick Bot ORDER     
Scheduling SU(50) %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %40:fr64, debug-location !230; is.c:304:13
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %35
  UpdateRegP: SU(42) MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %35:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
              to 
  UpdateRegP: SU(44) %37:fr64 = MULSDrr %37:fr64(tied-def 0), %35:fr64, debug-location !222; is.c:302:13
              to 
  UpdateRegP: SU(50) %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %40:fr64, debug-location !230; is.c:304:13
              to 
  LiveReg: %40
  UpdateRegP: SU(50) %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %40:fr64, debug-location !230; is.c:304:13
              to FR32 -1    FR32X -1
  Ready @10c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 49 42 
  Cand SU(46) ORDER                              
  Cand SU(49) ORDER                              
Pick Bot ORDER     
Scheduling SU(49) %40:fr64 = MULSDrm %40:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %40
  UpdateRegP: SU(48) MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %40:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
              to 
  UpdateRegP: SU(49) %40:fr64 = MULSDrm %40:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
              to FR32 -1    FR32X -1
  Ready @14c
  BotQ.A BotLatency SU(49) 14c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 42 48 
  Cand SU(46) ORDER                              
  Cand SU(48) ORDER                              
Pick Bot ORDER     
Scheduling SU(48) MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %40:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @14c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 42 47 
  Cand SU(46) ORDER                              
  Cand SU(47) ORDER                              
Pick Bot ORDER     
Scheduling SU(47) %40:fr64 = CVTSI2SDrr %38:gr32, debug-location !224; is.c:303:10
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %38
  UpdateRegP: SU(46) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %38:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
              to 
  UpdateRegP: SU(47) %40:fr64 = CVTSI2SDrr %38:gr32, debug-location !224; is.c:303:10
              to FR32 -1    FR32X -1
  Ready @15c
  BotQ.A BotLatency SU(47) 15c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 46 42 
  Cand SU(46) ORDER                              
Pick Bot ORDER     
Scheduling SU(46) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %38:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @9c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 45 33 
  Cand SU(42) ORDER                              
  Cand SU(45) ORDER                              
Pick Bot ORDER     
Scheduling SU(45) %38:gr32 = CVTTSD2SIrr %37:fr64, debug-location !220; is.c:302:9
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %37
  UpdateRegP: SU(45) %38:gr32 = CVTTSD2SIrr %37:fr64, debug-location !220; is.c:302:9
              to GR16 -2
  Ready @16c
  BotQ.A BotLatency SU(45) 16c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 33 44 
  Cand SU(42) ORDER                              
  Cand SU(44) ORDER                              
Pick Bot ORDER     
Scheduling SU(44) %37:fr64 = MULSDrr %37:fr64(tied-def 0), %35:fr64, debug-location !222; is.c:302:13
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %37
  UpdateRegP: SU(44) %37:fr64 = MULSDrr %37:fr64(tied-def 0), %35:fr64, debug-location !222; is.c:302:13
              to FR32 -1    FR32X -1
  Ready @17c
  BotQ.A BotLatency SU(44) 17c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 33 43 
  Cand SU(42) ORDER                              
  Cand SU(43) ORDER                              
Pick Bot ORDER     
Scheduling SU(43) %37:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
Bottom Pressure:
FR32=1
FR32X=1
  Ready @21c
  BotQ.A BotLatency SU(43) 21c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 33 
  Cand SU(42) ORDER                              
Pick Bot ORDER     
Scheduling SU(42) MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %35:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
Bottom Pressure:
FR32=1
FR32X=1
  Ready @10c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 41 
  Cand SU(33) ORDER                              
  Cand SU(41) ORDER                              
Pick Bot ORDER     
Scheduling SU(41) %35:fr64 = ADDSDrr %35:fr64(tied-def 0), %28:fr64, debug-location !218; is.c:301:18
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %35
  UpdateRegP: SU(41) %35:fr64 = ADDSDrr %35:fr64(tied-def 0), %28:fr64, debug-location !218; is.c:301:18
              to 
  LiveReg: %28
  UpdateRegP: SU(41) %35:fr64 = ADDSDrr %35:fr64(tied-def 0), %28:fr64, debug-location !218; is.c:301:18
              to FR32 -1    FR32X -1
  Ready @18c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 39 40 
  Cand SU(33) ORDER                              
  Cand SU(39) ORDER                              
  Cand SU(40) ORDER                              
Pick Bot ORDER     
Scheduling SU(40) %35:fr64 = MULSDrm %35:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %35
  UpdateRegP: SU(25) MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %35:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
              to 
  UpdateRegP: SU(27) %28:fr64 = MULSDrr %28:fr64(tied-def 0), %35:fr64, debug-location !194; is.c:296:13
              to 
  UpdateRegP: SU(40) %35:fr64 = MULSDrm %35:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
              to FR32 -1    FR32X -1
  Ready @22c
  BotQ.A BotLatency SU(40) 22c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 39 25 
  Cand SU(33) ORDER                              
  Cand SU(39) ORDER                              
Pick Bot ORDER     
Scheduling SU(39) %28:fr64 = MULSDrm %28:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %28
  UpdateRegP: SU(38) MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %28:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
              to 
  UpdateRegP: SU(39) %28:fr64 = MULSDrm %28:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
              to FR32 -1    FR32X -1
  Ready @22c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 38 
  Cand SU(33) ORDER                              
  Cand SU(38) ORDER                              
Pick Bot ORDER     
Scheduling SU(38) MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %28:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
Bottom Pressure:
FR32=2
FR32X=2
  Ready @22c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 37 
  Cand SU(33) ORDER                              
  Cand SU(37) ORDER                              
Pick Bot ORDER     
Scheduling SU(37) %28:fr64 = SUBSDrr %28:fr64(tied-def 0), %32:fr64, debug-location !210; is.c:300:12
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %28
  UpdateRegP: SU(29) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %28:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
              to 
  UpdateRegP: SU(31) %29:fr64 = MULSDrr %29:fr64(tied-def 0), %28:fr64, debug-location !202; is.c:298:13
              to 
  UpdateRegP: SU(37) %28:fr64 = SUBSDrr %28:fr64(tied-def 0), %32:fr64, debug-location !210; is.c:300:12
              to 
  LiveReg: %32
  UpdateRegP: SU(37) %28:fr64 = SUBSDrr %28:fr64(tied-def 0), %32:fr64, debug-location !210; is.c:300:12
              to FR32 -1    FR32X -1
  Ready @23c
  BotQ.A BotLatency SU(37) 23c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 36 29 
  Cand SU(33) ORDER                              
  Cand SU(36) ORDER                              
Pick Bot ORDER     
Scheduling SU(36) %32:fr64 = MULSDrm %32:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %32
  UpdateRegP: SU(35) MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
              to 
  UpdateRegP: SU(36) %32:fr64 = MULSDrm %32:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
              to FR32 -1    FR32X -1
  Ready @27c
  BotQ.A BotLatency SU(36) 27c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 29 35 
  Cand SU(33) ORDER                              
  Cand SU(35) ORDER                              
Pick Bot ORDER     
Scheduling SU(35) MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
Bottom Pressure:
FR32=3
FR32X=3
  Ready @27c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 29 34 
  Cand SU(33) ORDER                              
  Cand SU(34) ORDER                              
Pick Bot ORDER     
Scheduling SU(34) %32:fr64 = CVTSI2SDrr %30:gr32, debug-location !204; is.c:299:10
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %30
  UpdateRegP: SU(33) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %30:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
              to 
  UpdateRegP: SU(34) %32:fr64 = CVTSI2SDrr %30:gr32, debug-location !204; is.c:299:10
              to FR32 -1    FR32X -1
  Ready @28c
  BotQ.A BotLatency SU(34) 28c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 33 25 29 
  Cand SU(33) ORDER                              
Pick Bot ORDER     
Scheduling SU(33) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %30:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @9c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 25 32 
  Cand SU(29) ORDER                              
  Cand SU(32) ORDER                              
Pick Bot ORDER     
Scheduling SU(32) %30:gr32 = CVTTSD2SIrr %29:fr64, debug-location !200; is.c:298:9
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %29
  UpdateRegP: SU(32) %30:gr32 = CVTTSD2SIrr %29:fr64, debug-location !200; is.c:298:9
              to GR16 -2
  Ready @29c
  BotQ.A BotLatency SU(32) 29c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 25 31 
  Cand SU(29) ORDER                              
  Cand SU(31) ORDER                              
Pick Bot ORDER     
Scheduling SU(31) %29:fr64 = MULSDrr %29:fr64(tied-def 0), %28:fr64, debug-location !202; is.c:298:13
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %29
  UpdateRegP: SU(31) %29:fr64 = MULSDrr %29:fr64(tied-def 0), %28:fr64, debug-location !202; is.c:298:13
              to FR32 -1    FR32X -1
  Ready @30c
  BotQ.A BotLatency SU(31) 30c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 25 30 
  Cand SU(29) ORDER                              
  Cand SU(30) ORDER                              
Pick Bot ORDER     
Scheduling SU(30) %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @34c
  BotQ.A BotLatency SU(30) 34c
BotQ.A @6c
  Retired: 26
  Executed: 6c
  Critical: 6c, 26 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 25 
  Cand SU(29) ORDER                              
Pick Bot ORDER     
Scheduling SU(29) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %28:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @23c
BotQ.A @6c
  Retired: 27
  Executed: 6c
  Critical: 6c, 27 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 28 
  Cand SU(25) ORDER                              
  Cand SU(28) ORDER                              
Pick Bot ORDER     
Scheduling SU(28) %28:fr64 = ADDSDrr %28:fr64(tied-def 0), %27:fr64, debug-location !198; is.c:296:18
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %28
  UpdateRegP: SU(28) %28:fr64 = ADDSDrr %28:fr64(tied-def 0), %27:fr64, debug-location !198; is.c:296:18
              to 
  LiveReg: %27
  UpdateRegP: SU(28) %28:fr64 = ADDSDrr %28:fr64(tied-def 0), %27:fr64, debug-location !198; is.c:296:18
              to FR32 -1    FR32X -1
  Ready @31c
  *** Max MOps 4 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 28
  Executed: 7c
  Critical: 7c, 28 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 27 
  Cand SU(25) ORDER                              
  Cand SU(27) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) %28:fr64 = MULSDrr %28:fr64(tied-def 0), %35:fr64, debug-location !194; is.c:296:13
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %28
  UpdateRegP: SU(27) %28:fr64 = MULSDrr %28:fr64(tied-def 0), %35:fr64, debug-location !194; is.c:296:13
              to FR32 -1    FR32X -1
  Ready @32c
BotQ.A @7c
  Retired: 29
  Executed: 7c
  Critical: 7c, 29 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 26 
  Cand SU(25) ORDER                              
  Cand SU(26) ORDER                              
Pick Bot ORDER     
Scheduling SU(26) %28:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
Bottom Pressure:
FR32=2
FR32X=2
  Ready @36c
  BotQ.A BotLatency SU(26) 36c
BotQ.A @7c
  Retired: 30
  Executed: 7c
  Critical: 7c, 30 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 
Scheduling SU(25) MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %35:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @22c
BotQ.A @7c
  Retired: 31
  Executed: 7c
  Critical: 7c, 31 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 24 
Scheduling SU(24) %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %24:fr64, debug-location !190; is.c:295:13
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %35
  UpdateRegP: SU(24) %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %24:fr64, debug-location !190; is.c:295:13
              to 
  LiveReg: %24
  UpdateRegP: SU(24) %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %24:fr64, debug-location !190; is.c:295:13
              to FR32 -1    FR32X -1
  Ready @33c
  *** Max MOps 4 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 32
  Executed: 8c
  Critical: 8c, 32 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 21 
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) %24:fr64 = MULSDrm %24:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %24
  UpdateRegP: SU(19) MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %24:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
              to 
  UpdateRegP: SU(22) %27:fr64 = MULSDrr %27:fr64(tied-def 0), %24:fr64, debug-location !197; is.c:296:23
              to 
  UpdateRegP: SU(23) %24:fr64 = MULSDrm %24:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
              to FR32 -1    FR32X -1
  Ready @37c
  BotQ.A BotLatency SU(23) 37c
BotQ.A @8c
  Retired: 33
  Executed: 8c
  Critical: 8c, 33 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 22 
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) %27:fr64 = MULSDrr %27:fr64(tied-def 0), %24:fr64, debug-location !197; is.c:296:23
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %27
  UpdateRegP: SU(12) MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %27:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
              to 
  UpdateRegP: SU(22) %27:fr64 = MULSDrr %27:fr64(tied-def 0), %24:fr64, debug-location !197; is.c:296:23
              to FR32 -1    FR32X -1
  Ready @37c
BotQ.A @8c
  Retired: 34
  Executed: 8c
  Critical: 8c, 34 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Scheduling SU(21) %35:fr64 = MOVSDrm_alt %22:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %22
  UpdateRegP: SU(21) %35:fr64 = MOVSDrm_alt %22:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
              to FR32 -1    FR32X -1
  Ready @37c
BotQ.A @8c
  Retired: 35
  Executed: 8c
  Critical: 8c, 35 MOps
  ExpectedLatency: 37c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 19 17 15 
  Cand SU(20) ORDER                              
Pick Bot ORDER     
Scheduling SU(20) %22:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
Bottom Pressure:
FR32=2
FR32X=2
  Ready @41c
  BotQ.A BotLatency SU(20) 41c
  *** Max MOps 4 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 36
  Executed: 9c
  Critical: 9c, 36 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 19 17 
  Cand SU(15) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %24:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @38c
BotQ.A @9c
  Retired: 37
  Executed: 9c
  Critical: 9c, 37 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 17 18 
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) %24:fr64 = CVTSI2SDrr %20:gr32, debug-location !183; is.c:294:10
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %20
  UpdateRegP: SU(17) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %20:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
              to 
  UpdateRegP: SU(18) %24:fr64 = CVTSI2SDrr %20:gr32, debug-location !183; is.c:294:10
              to FR32 -1    FR32X -1
  Ready @39c
BotQ.A @9c
  Retired: 38
  Executed: 9c
  Critical: 9c, 38 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 17 
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %20:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @38c
BotQ.A @9c
  Retired: 39
  Executed: 9c
  Critical: 9c, 39 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 16 
  Cand SU(15) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %20:gr32 = CVTTSD2SIrr %19:fr64, debug-location !181; is.c:293:9
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %19
  UpdateRegP: SU(15) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %19:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
              to 
  UpdateRegP: SU(16) %20:gr32 = CVTTSD2SIrr %19:fr64, debug-location !181; is.c:293:9
              to GR16 -2
  Ready @40c
  *** Max MOps 4 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 40
  Executed: 10c
  Critical: 10c, 40 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Scheduling SU(15) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %19:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @38c
BotQ.A @10c
  Retired: 41
  Executed: 10c
  Critical: 10c, 41 MOps
  ExpectedLatency: 41c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Scheduling SU(14) %19:fr64 = MULSDrm %19:fr64(tied-def 0), %18:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %19
  UpdateRegP: SU(3) %12:fr64 = MULSDrr %12:fr64(tied-def 0), %19:fr64, debug-location !163; is.c:283:14
              to 
  UpdateRegP: SU(14) %19:fr64 = MULSDrm %19:fr64(tied-def 0), %18:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
              to FR32 -1    FR32X -1    GR16 2
  LiveReg: %18
  UpdateRegP: SU(14) %19:fr64 = MULSDrm %19:fr64(tied-def 0), %18:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
              to FR32 -1    FR32X -1
  Ready @44c
  BotQ.A BotLatency SU(14) 44c
BotQ.A @10c
  Retired: 42
  Executed: 10c
  Critical: 10c, 42 MOps
  ExpectedLatency: 44c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 12 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) %18:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
Bottom Pressure:
FR32=2
FR32X=2
  Ready @48c
  BotQ.A BotLatency SU(13) 48c
BotQ.A @10c
  Retired: 43
  Executed: 10c
  Critical: 10c, 43 MOps
  ExpectedLatency: 48c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Scheduling SU(12) MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %27:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
Bottom Pressure:
FR32=2
FR32X=2
  Ready @45c
  *** Max MOps 4 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 44
  Executed: 11c
  Critical: 11c, 44 MOps
  ExpectedLatency: 48c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Scheduling SU(11) %27:fr64 = SUBSDrr %27:fr64(tied-def 0), %16:fr64, debug-location !174; is.c:286:13
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %27
  UpdateRegP: SU(11) %27:fr64 = SUBSDrr %27:fr64(tied-def 0), %16:fr64, debug-location !174; is.c:286:13
              to 
  LiveReg: %16
  UpdateRegP: SU(11) %27:fr64 = SUBSDrr %27:fr64(tied-def 0), %16:fr64, debug-location !174; is.c:286:13
              to FR32 -1    FR32X -1
  Ready @46c
BotQ.A @11c
  Retired: 45
  Executed: 11c
  Critical: 11c, 45 MOps
  ExpectedLatency: 48c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 9 
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %16:fr64 = MULSDrm %16:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
Bottom Pressure:
FR32=3
FR32X=3
  LiveReg: %16
  UpdateRegP: SU(8) MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
              to 
  UpdateRegP: SU(10) %16:fr64 = MULSDrm %16:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
              to FR32 -1    FR32X -1
  Ready @50c
  BotQ.A BotLatency SU(10) 50c
BotQ.A @11c
  Retired: 46
  Executed: 11c
  Critical: 11c, 46 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Scheduling SU(9) %27:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %11
  UpdateRegP: SU(2) %12:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
              to FR32 -1    FR32X -1
  UpdateRegP: SU(9) %27:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
              to FR32 -1    FR32X -1
  Ready @50c
BotQ.A @11c
  Retired: 47
  Executed: 11c
  Critical: 11c, 47 MOps
  ExpectedLatency: 50c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 4 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @51c
  BotQ.A BotLatency SU(8) 51c
  *** Max MOps 4 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 48
  Executed: 12c
  Critical: 12c, 48 MOps
  ExpectedLatency: 51c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 7 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %16:fr64 = CVTSI2SDrr %13:gr32, debug-location !167; is.c:285:10
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  LiveReg: %13
  UpdateRegP: SU(6) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %13:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
              to 
  UpdateRegP: SU(7) %16:fr64 = CVTSI2SDrr %13:gr32, debug-location !167; is.c:285:10
              to FR32 -1    FR32X -1
  Ready @52c
  BotQ.A BotLatency SU(7) 52c
BotQ.A @12c
  Retired: 49
  Executed: 12c
  Critical: 12c, 49 MOps
  ExpectedLatency: 52c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %13:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
Bottom Pressure:
FR32=1
FR32X=1
GR16=4
  Ready @51c
BotQ.A @12c
  Retired: 50
  Executed: 12c
  Critical: 12c, 50 MOps
  ExpectedLatency: 52c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %13:gr32 = CVTTSD2SIrr %12:fr64, debug-location !165; is.c:284:9
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %12
  UpdateRegP: SU(4) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %12:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
              to 
  UpdateRegP: SU(5) %13:gr32 = CVTTSD2SIrr %12:fr64, debug-location !165; is.c:284:9
              to GR16 -2
  Ready @53c
  BotQ.A BotLatency SU(5) 53c
BotQ.A @12c
  Retired: 51
  Executed: 12c
  Critical: 12c, 51 MOps
  ExpectedLatency: 53c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %12:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @51c
  *** Max MOps 4 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 52
  Executed: 13c
  Critical: 13c, 52 MOps
  ExpectedLatency: 53c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %12:fr64 = MULSDrr %12:fr64(tied-def 0), %19:fr64, debug-location !163; is.c:283:14
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %12
  UpdateRegP: SU(3) %12:fr64 = MULSDrr %12:fr64(tied-def 0), %19:fr64, debug-location !163; is.c:283:14
              to FR32 -1    FR32X -1
  Ready @54c
  BotQ.A BotLatency SU(3) 54c
BotQ.A @13c
  Retired: 53
  Executed: 13c
  Critical: 13c, 53 MOps
  ExpectedLatency: 54c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %12:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @58c
  BotQ.A BotLatency SU(2) 58c
BotQ.A @13c
  Retired: 54
  Executed: 13c
  Critical: 13c, 54 MOps
  ExpectedLatency: 58c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %11:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
Bottom Pressure:
FR32=1
FR32X=1
  Ready @62c
  BotQ.A BotLatency SU(1) 62c
BotQ.A @13c
  Retired: 55
  Executed: 13c
  Critical: 13c, 55 MOps
  ExpectedLatency: 62c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %19:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
Bottom Pressure:

  Ready @58c
  *** Max MOps 4 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 56
  Executed: 14c
  Critical: 14c, 56 MOps
  ExpectedLatency: 62c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %19:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
SU(1):   %11:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
SU(2):   %12:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
SU(3):   %12:fr64 = MULSDrr %12:fr64(tied-def 0), %19:fr64, debug-location !163; is.c:283:14
SU(4):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %12:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
SU(5):   %13:gr32 = CVTTSD2SIrr %12:fr64, debug-location !165; is.c:284:9
SU(6):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %13:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
SU(7):   %16:fr64 = CVTSI2SDrr %13:gr32, debug-location !167; is.c:285:10
SU(8):   MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
SU(9):   %27:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
SU(10):   %16:fr64 = MULSDrm %16:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
SU(11):   %27:fr64 = SUBSDrr %27:fr64(tied-def 0), %16:fr64, debug-location !174; is.c:286:13
SU(12):   MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %27:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
SU(13):   %18:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
SU(14):   %19:fr64 = MULSDrm %19:fr64(tied-def 0), %18:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
SU(15):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %19:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
SU(16):   %20:gr32 = CVTTSD2SIrr %19:fr64, debug-location !181; is.c:293:9
SU(17):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %20:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
SU(18):   %24:fr64 = CVTSI2SDrr %20:gr32, debug-location !183; is.c:294:10
SU(19):   MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %24:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
SU(20):   %22:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
SU(21):   %35:fr64 = MOVSDrm_alt %22:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
SU(22):   %27:fr64 = MULSDrr %27:fr64(tied-def 0), %24:fr64, debug-location !197; is.c:296:23
SU(23):   %24:fr64 = MULSDrm %24:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
SU(24):   %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %24:fr64, debug-location !190; is.c:295:13
SU(25):   MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %35:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
SU(26):   %28:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
SU(27):   %28:fr64 = MULSDrr %28:fr64(tied-def 0), %35:fr64, debug-location !194; is.c:296:13
SU(28):   %28:fr64 = ADDSDrr %28:fr64(tied-def 0), %27:fr64, debug-location !198; is.c:296:18
SU(29):   MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %28:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
SU(30):   %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
SU(31):   %29:fr64 = MULSDrr %29:fr64(tied-def 0), %28:fr64, debug-location !202; is.c:298:13
SU(32):   %30:gr32 = CVTTSD2SIrr %29:fr64, debug-location !200; is.c:298:9
SU(33):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %30:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
SU(34):   %32:fr64 = CVTSI2SDrr %30:gr32, debug-location !204; is.c:299:10
SU(35):   MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
SU(36):   %32:fr64 = MULSDrm %32:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
SU(37):   %28:fr64 = SUBSDrr %28:fr64(tied-def 0), %32:fr64, debug-location !210; is.c:300:12
SU(38):   MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %28:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
SU(39):   %28:fr64 = MULSDrm %28:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
SU(40):   %35:fr64 = MULSDrm %35:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
SU(41):   %35:fr64 = ADDSDrr %35:fr64(tied-def 0), %28:fr64, debug-location !218; is.c:301:18
SU(42):   MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %35:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
SU(43):   %37:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
SU(44):   %37:fr64 = MULSDrr %37:fr64(tied-def 0), %35:fr64, debug-location !222; is.c:302:13
SU(45):   %38:gr32 = CVTTSD2SIrr %37:fr64, debug-location !220; is.c:302:9
SU(46):   MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %38:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
SU(47):   %40:fr64 = CVTSI2SDrr %38:gr32, debug-location !224; is.c:303:10
SU(48):   MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %40:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
SU(49):   %40:fr64 = MULSDrm %40:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
SU(50):   %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %40:fr64, debug-location !230; is.c:304:13
SU(51):   %42:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
SU(52):   MOVSDmr %42:gr64, 1, $noreg, 0, $noreg, %35:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
SU(53):   %45:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
SU(54):   %44:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
SU(55):   %45:fr64 = MULSDrm %45:fr64(tied-def 0), %44:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
SU(56):   $xmm0 = COPY %45:fr64, debug-location !237; is.c:305:5

********** INTERVALS **********
DIL [0B,32r:0)  0@0B-phi
DIH [0B,32r:0)  0@0B-phi
HDI [0B,32r:0)  0@0B-phi
SIL [0B,16r:0)  0@0B-phi
SIH [0B,16r:0)  0@0B-phi
HSI [0B,16r:0)  0@0B-phi
%0 [32r,48r:0)  0@32r weight:0.000000e+00
%1 [16r,64r:0)  0@16r weight:0.000000e+00
%2 [144r,208r:0)  0@144r weight:0.000000e+00
%3 [224r,240r:0)  0@224r weight:0.000000e+00
%6 [528r,544r:0)  0@528r weight:0.000000e+00
%9 [832r,848r:0)  0@832r weight:0.000000e+00
%11 [896r,1040r:0)  0@896r weight:0.000000e+00
%12 [912r,944r:0)[944r,976r:1)  0@912r 1@944r weight:0.000000e+00
%13 [976r,1008r:0)  0@976r weight:0.000000e+00
%16 [1008r,1072r:0)[1072r,1104r:1)  0@1008r 1@1072r weight:0.000000e+00
%18 [1136r,1168r:0)  0@1136r weight:0.000000e+00
%19 [880r,1168r:0)[1168r,1200r:1)  0@880r 1@1168r weight:0.000000e+00
%20 [1200r,1232r:0)  0@1200r weight:0.000000e+00
%22 [1264r,1280r:0)  0@1264r weight:0.000000e+00
%24 [1232r,1344r:0)[1344r,1376r:1)  0@1232r 1@1344r weight:0.000000e+00
%27 [1040r,1104r:2)[1104r,1312r:0)[1312r,1472r:1)  0@1104r 1@1312r 2@1040r weight:0.000000e+00
%28 [1408r,1440r:2)[1440r,1472r:0)[1472r,1664r:1)[1664r,1712r:3)[1712r,1776r:4)  0@1440r 1@1472r 2@1408r 3@1664r 4@1712r weight:0.000000e+00
%29 [1504r,1536r:0)[1536r,1552r:1)  0@1504r 1@1536r weight:0.000000e+00
%30 [1552r,1584r:0)  0@1552r weight:0.000000e+00
%32 [1584r,1632r:0)[1632r,1664r:1)  0@1584r 1@1632r weight:0.000000e+00
%35 [1280r,1376r:2)[1376r,1744r:0)[1744r,1776r:1)[1776r,1968r:3)[1968r,2000r:4)  0@1376r 1@1744r 2@1280r 3@1776r 4@1968r weight:0.000000e+00
%37 [1808r,1840r:0)[1840r,1856r:1)  0@1808r 1@1840r weight:0.000000e+00
%38 [1856r,1888r:0)  0@1856r weight:0.000000e+00
%40 [1888r,1936r:0)[1936r,1968r:1)  0@1888r 1@1936r weight:0.000000e+00
%42 [1984r,2000r:0)  0@1984r weight:0.000000e+00
%44 [2032r,2064r:0)  0@2032r weight:0.000000e+00
%45 [2016r,2064r:0)[2064r,2080r:1)  0@2016r 1@2064r weight:0.000000e+00
%47 [656r,688r:0)[688r,704r:1)  0@656r 1@688r weight:0.000000e+00
%49 [720r,752r:0)[752r,768r:1)  0@720r 1@752r weight:0.000000e+00
%51 [352r,384r:0)[384r,400r:1)  0@352r 1@384r weight:0.000000e+00
%53 [416r,448r:0)[448r,464r:1)  0@416r 1@448r weight:0.000000e+00
%54 [256r,512B:0)  0@256r weight:0.000000e+00
%55 [560r,816B:0)  0@560r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function randlc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=8, align=8, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
  fi#10: size=8, align=8, at location [SP+8]
  fi#11: size=4, align=4, at location [SP+8]
  fi#12: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 5.000000e-01, align=8
Function Live Ins: $rdi in %0, $rsi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x30000000), %bb.8(0x50000000); %bb.1(37.50%), %bb.8(62.50%)
	  liveins: $rdi, $rsi
16B	  %1:gr64 = COPY $rsi
32B	  %0:gr64 = COPY $rdi
48B	  MOV64mr %stack.0.X.addr, 1, $noreg, 0, $noreg, %0:gr64 :: (store 8 into %ir.X.addr)
64B	  MOV64mr %stack.1.A.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.A.addr)
80B	  CMP32mi8 $rip, 1, $noreg, @randlc.KS, $noreg, 0, implicit-def $eflags, debug-location !113 :: (dereferenceable load 4 from @randlc.KS); is.c:264:12
96B	  JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !114; is.c:264:9
112B	  JMP_1 %bb.1, debug-location !114; is.c:264:9

128B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

144B	  %2:gr64 = MOV64ri 4607182418800017408
160B	  MOV64mr $rip, 1, $noreg, @randlc.R23, $noreg, %2:gr64, debug-location !115 :: (store 8 into @randlc.R23); is.c:265:13
176B	  MOV64mr $rip, 1, $noreg, @randlc.R46, $noreg, %2:gr64, debug-location !117 :: (store 8 into @randlc.R46); is.c:266:13
192B	  MOV64mr $rip, 1, $noreg, @randlc.T23, $noreg, %2:gr64, debug-location !118 :: (store 8 into @randlc.T23); is.c:267:13
208B	  MOV64mr $rip, 1, $noreg, @randlc.T46, $noreg, %2:gr64, debug-location !119 :: (store 8 into @randlc.T46); is.c:268:13
224B	  %3:gr32 = MOV32ri 1
240B	  MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !120 :: (store 4 into %ir.i); is.c:270:16
256B	  %54:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

272B	bb.2.for.cond:
	; predecessors: %bb.1, %bb.3
	  successors: %bb.3(0x7c000000), %bb.4(0x04000000); %bb.3(96.88%), %bb.4(3.12%)

288B	  CMP32mi8 %stack.11.i, 1, $noreg, 0, $noreg, 23, implicit-def $eflags, debug-location !125 :: (dereferenceable load 4 from %ir.i); is.c:270:23
304B	  JCC_1 %bb.4, 15, implicit killed $eflags, debug-location !126; is.c:270:9
320B	  JMP_1 %bb.3, debug-location !126; is.c:270:9

336B	bb.3.for.body:
	; predecessors: %bb.2
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

352B	  %51:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
384B	  %51:fr64 = MULSDrr %51:fr64(tied-def 0), %54:fr64, debug-location !129; is.c:271:24
400B	  MOVSDmr $rip, 1, $noreg, @randlc.R23, $noreg, %51:fr64, debug-location !130 :: (store 8 into @randlc.R23); is.c:271:17
416B	  %53:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !131 :: (dereferenceable load 8 from @randlc.T23); is.c:272:25
448B	  %53:fr64 = ADDSDrr %53:fr64(tied-def 0), %53:fr64, debug-location !132; is.c:272:23
464B	  MOVSDmr $rip, 1, $noreg, @randlc.T23, $noreg, %53:fr64, debug-location !133 :: (store 8 into @randlc.T23); is.c:272:17
480B	  INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !135 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:270:31
496B	  JMP_1 %bb.2, debug-location !136; is.c:270:9

512B	bb.4.for.end:
	; predecessors: %bb.2
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

528B	  %6:gr32 = MOV32ri 1
544B	  MOV32mr %stack.11.i, 1, $noreg, 0, $noreg, %6:gr32, debug-location !139 :: (store 4 into %ir.i); is.c:274:16
560B	  %55:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)

576B	bb.5.for.cond3:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

592B	  CMP32mi8 %stack.11.i, 1, $noreg, 0, $noreg, 46, implicit-def $eflags, debug-location !144 :: (dereferenceable load 4 from %ir.i); is.c:274:23
608B	  JCC_1 %bb.7, 15, implicit killed $eflags, debug-location !145; is.c:274:9
624B	  JMP_1 %bb.6, debug-location !145; is.c:274:9

640B	bb.6.for.body5:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

656B	  %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
688B	  %47:fr64 = MULSDrr %47:fr64(tied-def 0), %55:fr64, debug-location !148; is.c:275:24
704B	  MOVSDmr $rip, 1, $noreg, @randlc.R46, $noreg, %47:fr64, debug-location !149 :: (store 8 into @randlc.R46); is.c:275:17
720B	  %49:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !150 :: (dereferenceable load 8 from @randlc.T46); is.c:276:25
752B	  %49:fr64 = ADDSDrr %49:fr64(tied-def 0), %49:fr64, debug-location !151; is.c:276:23
768B	  MOVSDmr $rip, 1, $noreg, @randlc.T46, $noreg, %49:fr64, debug-location !152 :: (store 8 into @randlc.T46); is.c:276:17
784B	  INC32m %stack.11.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !154 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:274:31
800B	  JMP_1 %bb.5, debug-location !155; is.c:274:9

816B	bb.7.for.end10:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

832B	  %9:gr32 = MOV32ri 1
848B	  MOV32mr $rip, 1, $noreg, @randlc.KS, $noreg, %9:gr32, debug-location !158 :: (store 4 into @randlc.KS); is.c:278:12

864B	bb.8.if.end:
	; predecessors: %bb.0, %bb.7

880B	  %19:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg, debug-location !160 :: (dereferenceable load 8 from @randlc.R23); is.c:283:10
896B	  %11:gr64 = MOV64rm %stack.1.A.addr, 1, $noreg, 0, $noreg, debug-location !161 :: (dereferenceable load 8 from %ir.A.addr); is.c:283:17
912B	  %12:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg :: (load 8 from %ir.10)
944B	  %12:fr64 = MULSDrr %12:fr64(tied-def 0), %19:fr64, debug-location !163; is.c:283:14
960B	  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %12:fr64, debug-location !164 :: (store 8 into %ir.T1); is.c:283:8
976B	  %13:gr32 = CVTTSD2SIrr %12:fr64, debug-location !165; is.c:284:9
992B	  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %13:gr32, debug-location !166 :: (store 4 into %ir.j); is.c:284:7
1008B	  %16:fr64 = CVTSI2SDrr %13:gr32, debug-location !167; is.c:285:10
1024B	  MOVSDmr %stack.6.A1, 1, $noreg, 0, $noreg, %16:fr64, debug-location !168 :: (store 8 into %ir.A1); is.c:285:8
1040B	  %27:fr64 = MOVSDrm_alt %11:gr64, 1, $noreg, 0, $noreg, debug-location !170 :: (load 8 from %ir.14); is.c:286:10
1072B	  %16:fr64 = MULSDrm %16:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !173 :: (dereferenceable load 8 from @randlc.T23); is.c:286:19
1104B	  %27:fr64 = SUBSDrr %27:fr64(tied-def 0), %16:fr64, debug-location !174; is.c:286:13
1120B	  MOVSDmr %stack.7.A2, 1, $noreg, 0, $noreg, %27:fr64, debug-location !175 :: (store 8 into %ir.A2); is.c:286:8
1136B	  %18:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !177 :: (dereferenceable load 8 from %ir.X.addr); is.c:292:17
1168B	  %19:fr64 = MULSDrm %19:fr64(tied-def 0), %18:gr64, 1, $noreg, 0, $noreg, debug-location !179 :: (load 8 from %ir.19); is.c:292:14
1184B	  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %19:fr64, debug-location !180 :: (store 8 into %ir.T1); is.c:292:8
1200B	  %20:gr32 = CVTTSD2SIrr %19:fr64, debug-location !181; is.c:293:9
1216B	  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %20:gr32, debug-location !182 :: (store 4 into %ir.j); is.c:293:7
1232B	  %24:fr64 = CVTSI2SDrr %20:gr32, debug-location !183; is.c:294:10
1248B	  MOVSDmr %stack.8.X1, 1, $noreg, 0, $noreg, %24:fr64, debug-location !184 :: (store 8 into %ir.X1); is.c:294:8
1264B	  %22:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !185 :: (dereferenceable load 8 from %ir.X.addr); is.c:295:11
1280B	  %35:fr64 = MOVSDrm_alt %22:gr64, 1, $noreg, 0, $noreg, debug-location !186 :: (load 8 from %ir.23); is.c:295:10
1312B	  %27:fr64 = MULSDrr %27:fr64(tied-def 0), %24:fr64, debug-location !197; is.c:296:23
1344B	  %24:fr64 = MULSDrm %24:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !189 :: (dereferenceable load 8 from @randlc.T23); is.c:295:19
1376B	  %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %24:fr64, debug-location !190; is.c:295:13
1392B	  MOVSDmr %stack.9.X2, 1, $noreg, 0, $noreg, %35:fr64, debug-location !191 :: (store 8 into %ir.X2); is.c:295:8
1408B	  %28:fr64 = MOVSDrm_alt %stack.6.A1, 1, $noreg, 0, $noreg :: (dereferenceable load 8 from %ir.A1)
1440B	  %28:fr64 = MULSDrr %28:fr64(tied-def 0), %35:fr64, debug-location !194; is.c:296:13
1472B	  %28:fr64 = ADDSDrr %28:fr64(tied-def 0), %27:fr64, debug-location !198; is.c:296:18
1488B	  MOVSDmr %stack.2.T1, 1, $noreg, 0, $noreg, %28:fr64, debug-location !199 :: (store 8 into %ir.T1); is.c:296:8
1504B	  %29:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R23, $noreg :: (dereferenceable load 8 from @randlc.R23)
1536B	  %29:fr64 = MULSDrr %29:fr64(tied-def 0), %28:fr64, debug-location !202; is.c:298:13
1552B	  %30:gr32 = CVTTSD2SIrr %29:fr64, debug-location !200; is.c:298:9
1568B	  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %30:gr32, debug-location !203 :: (store 4 into %ir.j); is.c:298:7
1584B	  %32:fr64 = CVTSI2SDrr %30:gr32, debug-location !204; is.c:299:10
1600B	  MOVSDmr %stack.3.T2, 1, $noreg, 0, $noreg, %32:fr64, debug-location !205 :: (store 8 into %ir.T2); is.c:299:8
1632B	  %32:fr64 = MULSDrm %32:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !209 :: (dereferenceable load 8 from @randlc.T23); is.c:300:18
1664B	  %28:fr64 = SUBSDrr %28:fr64(tied-def 0), %32:fr64, debug-location !210; is.c:300:12
1680B	  MOVSDmr %stack.10.Z, 1, $noreg, 0, $noreg, %28:fr64, debug-location !211 :: (store 8 into %ir.Z); is.c:300:7
1712B	  %28:fr64 = MULSDrm %28:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T23, $noreg, debug-location !214 :: (dereferenceable load 8 from @randlc.T23); is.c:301:14
1744B	  %35:fr64 = MULSDrm %35:fr64(tied-def 0), %stack.7.A2, 1, $noreg, 0, $noreg, debug-location !217 :: (dereferenceable load 8 from %ir.A2); is.c:301:23
1776B	  %35:fr64 = ADDSDrr %35:fr64(tied-def 0), %28:fr64, debug-location !218; is.c:301:18
1792B	  MOVSDmr %stack.4.T3, 1, $noreg, 0, $noreg, %35:fr64, debug-location !219 :: (store 8 into %ir.T3); is.c:301:8
1808B	  %37:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg :: (dereferenceable load 8 from @randlc.R46)
1840B	  %37:fr64 = MULSDrr %37:fr64(tied-def 0), %35:fr64, debug-location !222; is.c:302:13
1856B	  %38:gr32 = CVTTSD2SIrr %37:fr64, debug-location !220; is.c:302:9
1872B	  MOV32mr %stack.12.j, 1, $noreg, 0, $noreg, %38:gr32, debug-location !223 :: (store 4 into %ir.j); is.c:302:7
1888B	  %40:fr64 = CVTSI2SDrr %38:gr32, debug-location !224; is.c:303:10
1904B	  MOVSDmr %stack.5.T4, 1, $noreg, 0, $noreg, %40:fr64, debug-location !225 :: (store 8 into %ir.T4); is.c:303:8
1936B	  %40:fr64 = MULSDrm %40:fr64(tied-def 0), $rip, 1, $noreg, @randlc.T46, $noreg, debug-location !229 :: (dereferenceable load 8 from @randlc.T46); is.c:304:19
1968B	  %35:fr64 = SUBSDrr %35:fr64(tied-def 0), %40:fr64, debug-location !230; is.c:304:13
1984B	  %42:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !231 :: (dereferenceable load 8 from %ir.X.addr); is.c:304:6
2000B	  MOVSDmr %42:gr64, 1, $noreg, 0, $noreg, %35:fr64, debug-location !232 :: (store 8 into %ir.47); is.c:304:8
2016B	  %45:fr64 = MOVSDrm_alt $rip, 1, $noreg, @randlc.R46, $noreg, debug-location !233 :: (dereferenceable load 8 from @randlc.R46); is.c:305:13
2032B	  %44:gr64 = MOV64rm %stack.0.X.addr, 1, $noreg, 0, $noreg, debug-location !234 :: (dereferenceable load 8 from %ir.X.addr); is.c:305:20
2064B	  %45:fr64 = MULSDrm %45:fr64(tied-def 0), %44:gr64, 1, $noreg, 0, $noreg, debug-location !236 :: (load 8 from %ir.49); is.c:305:17
2080B	  $xmm0 = COPY %45:fr64, debug-location !237; is.c:305:5
2096B	  RET 0, killed $xmm0, debug-location !237; is.c:305:5

# End machine code for function randlc.

Before MISched:
# Machine code for function create_seq: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $xmm0 in %0, $xmm1 in %1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $xmm0, $xmm1
  %1:fr64 = COPY $xmm1
  %0:fr64 = COPY $xmm0
  MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
  MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
  %2:gr32 = MOV32ri 524288
  MOV32mr %stack.4.k, 1, $noreg, 0, $noreg, %2:gr32, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
  %4:gr32 = MOV32ri 33554431
  %19:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mr %stack.3.i, 1, $noreg, 0, $noreg, %4:gr32, implicit-def $eflags, debug-location !257 :: (dereferenceable load 4 from %ir.i); is.c:319:19
  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !258; is.c:319:5
  JMP_1 %bb.2, debug-location !258; is.c:319:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; is.c:320:13
  $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
  $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !259; is.c:320:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !259; is.c:320:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !261; is.c:320:11
  PCN_STACKMAP 0, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $r11, debug-location !261 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:320:11
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !261; is.c:320:11
  %8:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
  $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
  $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !262; is.c:321:14
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !263; is.c:321:11
  PCN_STACKMAP 1, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $r11, debug-location !263 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:321:11
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !263; is.c:321:11
  %10:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
  %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
  $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
  $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !264; is.c:322:14
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !265; is.c:322:11
  PCN_STACKMAP 2, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $r11, debug-location !265 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:322:11
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !265; is.c:322:11
  %12:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
  %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
  $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
  $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !266; is.c:323:14
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !267; is.c:323:11
  PCN_STACKMAP 3, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $r11, debug-location !267 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:323:11
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !267; is.c:323:11
  %14:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
  %14:fr64 = ADDSDrm %14:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %14:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
  %16:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  %16:fr64 = MULSDrr %16:fr64(tied-def 0), %14:fr64, debug-location !270; is.c:325:26
  %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !268; is.c:325:24
  %18:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  MOV32mr %19:gr64, 4, %18:gr64_nosp, 0, $noreg, %17:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32
  JMP_1 %bb.1, debug-location !276; is.c:319:5

bb.3.for.end:
; predecessors: %bb.1

  RET 0, debug-location !279; is.c:327:1

# End machine code for function create_seq.

********** MI Scheduling **********
create_seq:%bb.0 entry
  From: %1:fr64 = COPY $xmm1
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=4
Live In: XMM0 XMM1 
Live Out: %19 %4 
Live Thru: 
  LiveReg: %19
  LiveReg: %4
Top Pressure:
FR32=2
FR32X=2
Bottom Pressure:
GR16=4
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:fr64 = COPY $xmm1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %0:fr64 = COPY $xmm0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(4):   %2:gr32 = MOV32ri 524288
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV32mr %stack.4.k, 1, $noreg, 0, $noreg, %2:gr32, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %4:gr32 = MOV32ri 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %19:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 3 2 
  Cand SU(8) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(8) %19:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 6 5 3 
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %4:gr32 = MOV32ri 33554431
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 6 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
Bottom Pressure:

  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 5 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.4.k, 1, $noreg, 0, $noreg, %2:gr32, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
Bottom Pressure:
GR16=2
  LiveReg: %2
  UpdateRegP: SU(5) MOV32mr %stack.4.k, 1, $noreg, 0, $noreg, %2:gr32, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
              to 
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 4 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %2:gr32 = MOV32ri 524288
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
Bottom Pressure:
FR32=1
FR32X=1
  LiveReg: %1
  UpdateRegP: SU(3) MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %0
  UpdateRegP: SU(2) MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
              to 
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:fr64 = COPY $xmm0
Bottom Pressure:
FR32=2
FR32X=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:fr64 = COPY $xmm1
Bottom Pressure:
FR32=2
FR32X=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:fr64 = COPY $xmm1
SU(1):   %0:fr64 = COPY $xmm0
SU(2):   MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
SU(3):   MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
SU(4):   %2:gr32 = MOV32ri 524288
SU(5):   MOV32mr %stack.4.k, 1, $noreg, 0, $noreg, %2:gr32, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
SU(6):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
SU(7):   %4:gr32 = MOV32ri 33554431
SU(8):   %19:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %14:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
    To: JMP_1 %bb.1, debug-location !276; is.c:319:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: %19 XMM0 
Live Out: %19 
Live Thru: GR16=2
  LiveReg: %19
  UpdateRegP: SU(7) MOV32mr %19:gr64, 4, %18:gr64_nosp, 0, $noreg, %17:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
              to GR16 4
Top Pressure:
FR32=1
FR32X=1
GR16=2
Bottom Pressure:
GR16=2
Excess PSets: 
SU(0):   %14:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=0 Reg=%14
    SU(1): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %14:fr64 = ADDSDrm %14:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
    SU(0): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%14
    SU(2): Data Latency=4 Reg=%14
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %14:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%14
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(3):   %16:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%16
    SU(4): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(4):   %16:fr64 = MULSDrr %16:fr64(tied-def 0), %14:fr64, debug-location !270; is.c:325:26
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=%16
    SU(3): Out  Latency=0
    SU(1): Data Latency=4 Reg=%14
  Successors:
    SU(5): Data Latency=1 Reg=%16
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
SU(5):   %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !268; is.c:325:24
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%16
  Successors:
    SU(7): Data Latency=1 Reg=%17
  Pressure Diff      : FR32 1    FR32X 1    GR16 -2
  Single Issue       : false;
SU(6):   %18:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%18
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV32mr %19:gr64, 4, %18:gr64_nosp, 0, $noreg, %17:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%17
    SU(6): Data Latency=4 Reg=%18
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(8):   INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(6): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !276; is.c:319:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 8 
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32
Bottom Pressure:
GR16=2
  Ready @3c
  BotQ.A BotLatency SU(8) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr %19:gr64, 4, %18:gr64_nosp, 0, $noreg, %17:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
Bottom Pressure:
GR16=6
  LiveReg: %18
  UpdateRegP: SU(7) MOV32mr %19:gr64, 4, %18:gr64_nosp, 0, $noreg, %17:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
              to GR16 2
  LiveReg: %17
  UpdateRegP: SU(7) MOV32mr %19:gr64, 4, %18:gr64_nosp, 0, $noreg, %17:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 6c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 6 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %18:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
Bottom Pressure:
GR16=4
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !268; is.c:325:24
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %16
  UpdateRegP: SU(5) %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !268; is.c:325:24
              to GR16 -2
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %16:fr64 = MULSDrr %16:fr64(tied-def 0), %14:fr64, debug-location !270; is.c:325:26
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  LiveReg: %16
  UpdateRegP: SU(4) %16:fr64 = MULSDrr %16:fr64(tied-def 0), %14:fr64, debug-location !270; is.c:325:26
              to 
  LiveReg: %14
  UpdateRegP: SU(2) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %14:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
              to 
  UpdateRegP: SU(4) %16:fr64 = MULSDrr %16:fr64(tied-def 0), %14:fr64, debug-location !270; is.c:325:26
              to FR32 -1    FR32X -1
  Ready @2c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %16:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %14:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %14:fr64 = ADDSDrm %14:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %14
  UpdateRegP: SU(1) %14:fr64 = ADDSDrm %14:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
              to FR32 -1    FR32X -1
  Ready @6c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %14:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  Ready @6c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %14:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
SU(1):   %14:fr64 = ADDSDrm %14:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %14:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
SU(3):   %16:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
SU(4):   %16:fr64 = MULSDrr %16:fr64(tied-def 0), %14:fr64, debug-location !270; is.c:325:26
SU(5):   %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !268; is.c:325:24
SU(6):   %18:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
SU(7):   MOV32mr %19:gr64, 4, %18:gr64_nosp, 0, $noreg, %17:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
SU(8):   INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !266; is.c:323:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !266; is.c:323:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
SU(1):   $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %12:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %12:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=0 Reg=%12
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%12
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%12
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%12
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %12:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
SU(1):   %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !264; is.c:322:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !264; is.c:322:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
SU(1):   $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %10:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %10:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=0 Reg=%10
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%10
    SU(0): Out  Latency=0
  Successors:
    SU(2): Data Latency=4 Reg=%10
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%10
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %10:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %10:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
SU(1):   %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
SU(2):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !262; is.c:321:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !262; is.c:321:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
SU(1):   $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: %8:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %8:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%8
  Single Issue       : false;
SU(1):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%8
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %8:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %8:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
SU(1):   MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11

********** MI Scheduling **********
create_seq:%bb.2 for.body
  From: $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
    To: CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !259; is.c:320:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !259; is.c:320:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
SU(1):   $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13

********** INTERVALS **********
XMM0 [0B,32r:0)[320r,400r:4)[480r,560r:3)[672r,752r:2)[864r,944r:1)  0@0B-phi 1@864r 2@672r 3@480r 4@320r
XMM1 [0B,16r:0)  0@0B-phi
%0 [32r,48r:0)  0@32r weight:0.000000e+00
%1 [16r,64r:0)  0@16r weight:0.000000e+00
%2 [80r,96r:0)  0@80r weight:0.000000e+00
%4 [128r,1136B:0)  0@128r weight:0.000000e+00
%8 [400r,416r:0)  0@400r weight:0.000000e+00
%10 [560r,592r:0)[592r,608r:1)  0@560r 1@592r weight:0.000000e+00
%12 [752r,784r:0)[784r,800r:1)  0@752r 1@784r weight:0.000000e+00
%14 [944r,976r:0)[976r,1040r:1)  0@944r 1@976r weight:0.000000e+00
%16 [1008r,1040r:0)[1040r,1056r:1)  0@1008r 1@1040r weight:0.000000e+00
%17 [1056r,1088r:0)  0@1056r weight:0.000000e+00
%18 [1072r,1088r:0)  0@1072r weight:0.000000e+00
%19 [176r,1136B:0)  0@176r weight:0.000000e+00
RegMasks: 320r 480r 672r 864r
********** MACHINEINSTRS **********
# Machine code for function create_seq: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $xmm0 in %0, $xmm1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $xmm0, $xmm1
16B	  %1:fr64 = COPY $xmm1
32B	  %0:fr64 = COPY $xmm0
48B	  MOVSDmr %stack.0.seed.addr, 1, $noreg, 0, $noreg, %0:fr64 :: (store 8 into %ir.seed.addr)
64B	  MOVSDmr %stack.1.a.addr, 1, $noreg, 0, $noreg, %1:fr64 :: (store 8 into %ir.a.addr)
80B	  %2:gr32 = MOV32ri 524288
96B	  MOV32mr %stack.4.k, 1, $noreg, 0, $noreg, %2:gr32, debug-location !251 :: (store 4 into %ir.k); is.c:317:7
112B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !252 :: (store 4 into %ir.i); is.c:319:12
128B	  %4:gr32 = MOV32ri 33554431
176B	  %19:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg

192B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

208B	  CMP32mr %stack.3.i, 1, $noreg, 0, $noreg, %4:gr32, implicit-def $eflags, debug-location !257 :: (dereferenceable load 4 from %ir.i); is.c:319:19
224B	  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !258; is.c:319:5
240B	  JMP_1 %bb.2, debug-location !258; is.c:319:5

256B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !259; is.c:320:13
288B	  $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
304B	  $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !259; is.c:320:13
320B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !259; is.c:320:13
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !259; is.c:320:13
352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !261; is.c:320:11
368B	  PCN_STACKMAP 0, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $r11, debug-location !261 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:320:11
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !261; is.c:320:11
400B	  %8:fr64 = COPY $xmm0, debug-location !259; is.c:320:13
416B	  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %8:fr64, debug-location !261 :: (store 8 into %ir.x); is.c:320:11
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
448B	  $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
464B	  $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !262; is.c:321:14
480B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !262; is.c:321:14
496B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !262; is.c:321:14
512B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !263; is.c:321:11
528B	  PCN_STACKMAP 1, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $r11, debug-location !263 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:321:11
544B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !263; is.c:321:11
560B	  %10:fr64 = COPY $xmm0, debug-location !262; is.c:321:14
592B	  %10:fr64 = ADDSDrm %10:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !263 :: (dereferenceable load 8 from %ir.x); is.c:321:11
608B	  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %10:fr64, debug-location !263 :: (store 8 into %ir.x); is.c:321:11
624B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
640B	  $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
656B	  $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !264; is.c:322:14
672B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !264; is.c:322:14
688B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !264; is.c:322:14
704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !265; is.c:322:11
720B	  PCN_STACKMAP 2, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $r11, debug-location !265 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:322:11
736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !265; is.c:322:11
752B	  %12:fr64 = COPY $xmm0, debug-location !264; is.c:322:14
784B	  %12:fr64 = ADDSDrm %12:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !265 :: (dereferenceable load 8 from %ir.x); is.c:322:11
800B	  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %12:fr64, debug-location !265 :: (store 8 into %ir.x); is.c:322:11
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
832B	  $rdi = LEA64r %stack.0.seed.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
848B	  $rsi = LEA64r %stack.1.a.addr, 1, $noreg, 0, $noreg, debug-location !266; is.c:323:14
864B	  CALL64pcrel32 @randlc, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !266; is.c:323:14
880B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !266; is.c:323:14
896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !267; is.c:323:11
912B	  PCN_STACKMAP 3, 0, 0, %stack.1.a.addr, 0, 0, %stack.3.i, 0, 0, %stack.4.k, 0, 0, %stack.0.seed.addr, 0, 0, %stack.2.x, 0, implicit-def dead early-clobber $r11, debug-location !267 :: (load 8 from %stack.1.a.addr), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.k, align 4), (load 8 from %stack.0.seed.addr), (load 8 from %stack.2.x); is.c:323:11
928B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !267; is.c:323:11
944B	  %14:fr64 = COPY $xmm0, debug-location !266; is.c:323:14
976B	  %14:fr64 = ADDSDrm %14:fr64(tied-def 0), %stack.2.x, 1, $noreg, 0, $noreg, debug-location !267 :: (dereferenceable load 8 from %ir.x); is.c:323:11
992B	  MOVSDmr %stack.2.x, 1, $noreg, 0, $noreg, %14:fr64, debug-location !267 :: (store 8 into %ir.x); is.c:323:11
1008B	  %16:fr64 = CVTSI2SDrm %stack.4.k, 1, $noreg, 0, $noreg, debug-location !268 :: (dereferenceable load 4 from %ir.k); is.c:325:24
1040B	  %16:fr64 = MULSDrr %16:fr64(tied-def 0), %14:fr64, debug-location !270; is.c:325:26
1056B	  %17:gr32 = CVTTSD2SIrr %16:fr64, debug-location !268; is.c:325:24
1072B	  %18:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !271 :: (dereferenceable load 4 from %ir.i); is.c:325:19
1088B	  MOV32mr %19:gr64, 4, %18:gr64_nosp, 0, $noreg, %17:gr32, debug-location !273 :: (store 4 into %ir.arrayidx); is.c:325:22
1104B	  INC32m %stack.3.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !275 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:319:32
1120B	  JMP_1 %bb.1, debug-location !276; is.c:319:5

1136B	bb.3.for.end:
	; predecessors: %bb.1

1152B	  RET 0, debug-location !279; is.c:327:1

# End machine code for function create_seq.

Before MISched:
# Machine code for function full_verify: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 0, debug-location !287 :: (store 4 into %ir.i); is.c:351:12
  %1:gr32 = MOV32ri 33554431
  %17:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg
  %24:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mr %stack.0.i, 1, $noreg, 0, $noreg, %1:gr32, implicit-def $eflags, debug-location !292 :: (dereferenceable load 4 from %ir.i); is.c:351:19
  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !293; is.c:351:5
  JMP_1 %bb.2, debug-location !293; is.c:351:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %16:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  %18:gr64_nosp = MOVSX64rm32 %17:gr64, 4, %16:gr64_nosp, 0, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
  %20:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  %21:gr64_nosp = MOVSX64rm32 %20:gr64, 4, %18:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
  %22:gr64_with_sub_8bit = LEA64r %21:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
  MOV32mr %20:gr64, 4, %18:gr64_nosp, 0, $noreg, %22.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
  MOV32mr %24:gr64, 4, %21:gr64_nosp, -4, $noreg, %18.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
  INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32
  JMP_1 %bb.1, debug-location !303; is.c:351:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
  %3:gr32 = MOV32ri 1
  MOV32mr %stack.0.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !307 :: (store 4 into %ir.i); is.c:357:12
  %5:gr32 = MOV32ri 33554431
  %13:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg

bb.4.for.cond7:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

  CMP32mr %stack.0.i, 1, $noreg, 0, $noreg, %5:gr32, implicit-def $eflags, debug-location !312 :: (dereferenceable load 4 from %ir.i); is.c:357:19
  JCC_1 %bb.8, 15, implicit killed $eflags, debug-location !313; is.c:357:5
  JMP_1 %bb.5, debug-location !313; is.c:357:5

bb.5.for.body9:
; predecessors: %bb.4
  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

  %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  %14:gr32 = MOV32rm %13:gr64, 4, %12:gr64_nosp, -4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
  CMP32rm %14:gr32, %13:gr64, 4, %12:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30
  JCC_1 %bb.7, 14, implicit killed $eflags, debug-location !321; is.c:358:13
  JMP_1 %bb.6, debug-location !321; is.c:358:13

bb.6.if.then:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  INC32m %stack.1.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !322 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); is.c:359:14

bb.7.if.end:
; predecessors: %bb.5, %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !324 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:357:32
  JMP_1 %bb.4, debug-location !325; is.c:357:5

bb.8.for.end18:
; predecessors: %bb.4
  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

  CMP32mi8 %stack.1.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !330 :: (dereferenceable load 4 from %ir.j); is.c:361:11
  JCC_1 %bb.10, 4, implicit killed $eflags, debug-location !331; is.c:361:9
  JMP_1 %bb.9, debug-location !331; is.c:361:9

bb.9.if.then20:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %7:gr64 = MOVSX64rm32 %stack.1.j, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 4 from %ir.j); is.c:362:72
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !335; is.c:362:9
  $rdi = LEA64r $rip, 1, $noreg, @is__str_Full_verif, $noreg, debug-location !335; is.c:362:9
  $rsi = COPY %7:gr64, debug-location !335; is.c:362:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !335; is.c:362:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !335; is.c:362:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !336; is.c:363:5
  PCN_STACKMAP 0, 0, %7:gr64, implicit-def dead early-clobber $r11, debug-location !336; is.c:363:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !336; is.c:363:5
  JMP_1 %bb.11, debug-location !336; is.c:363:5

bb.10.if.else:
; predecessors: %bb.8
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !337 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:365:28

bb.11.if.end22:
; predecessors: %bb.10, %bb.9

  RET 0, debug-location !338; is.c:366:1

# End machine code for function full_verify.

********** MI Scheduling **********
full_verify:%bb.0 entry
  From: MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 0, debug-location !287 :: (store 4 into %ir.i); is.c:351:12
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 0, debug-location !287 :: (store 4 into %ir.i); is.c:351:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %1:gr32 = MOV32ri 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %17:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %24:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %24:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %17:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %1:gr32 = MOV32ri 33554431
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 0, debug-location !287 :: (store 4 into %ir.i); is.c:351:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 0, debug-location !287 :: (store 4 into %ir.i); is.c:351:12
SU(1):   %1:gr32 = MOV32ri 33554431
SU(2):   %17:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg
SU(3):   %24:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg

********** MI Scheduling **********
full_verify:%bb.2 for.body
  From: %16:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
    To: JMP_1 %bb.1, debug-location !303; is.c:351:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR16=12
Live In: %24 %17 
Live Out: %24 %17 
Live Thru: GR16=4
  LiveReg: %24
  UpdateRegP: SU(6) MOV32mr %24:gr64, 4, %21:gr64_nosp, -4, $noreg, %18.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
              to GR16 4
  LiveReg: %17
  UpdateRegP: SU(1) %18:gr64_nosp = MOVSX64rm32 %17:gr64, 4, %16:gr64_nosp, 0, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %16:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%16
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %18:gr64_nosp = MOVSX64rm32 %17:gr64, 4, %16:gr64_nosp, 0, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%16
  Successors:
    SU(6): Data Latency=4 Reg=%18
    SU(5): Data Latency=4 Reg=%18
    SU(3): Data Latency=4 Reg=%18
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %20:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(5): Data Latency=4 Reg=%20
    SU(3): Data Latency=4 Reg=%20
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %21:gr64_nosp = MOVSX64rm32 %20:gr64, 4, %18:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%18
    SU(2): Data Latency=4 Reg=%20
  Successors:
    SU(6): Data Latency=4 Reg=%21
    SU(4): Data Latency=4 Reg=%21
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %22:gr64_with_sub_8bit = LEA64r %21:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(3): Data Latency=4 Reg=%21
  Successors:
    SU(5): Data Latency=1 Reg=%22
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   MOV32mr %20:gr64, 4, %18:gr64_nosp, 0, $noreg, %22.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%22
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=4 Reg=%20
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%18
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GR16 6
  Single Issue       : false;
SU(6):   MOV32mr %24:gr64, 4, %21:gr64_nosp, -4, $noreg, %18.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%21
    SU(3): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%18
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(7):   INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !303; is.c:351:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32
Bottom Pressure:
GR16=4
  Ready @3c
  BotQ.A TopLatency SU(7) 13c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) MOV32mr %24:gr64, 4, %21:gr64_nosp, -4, $noreg, %18.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
Bottom Pressure:
GR16=8
  LiveReg: %21
  UpdateRegP: SU(4) %22:gr64_with_sub_8bit = LEA64r %21:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
              to GR16 -2
  UpdateRegP: SU(6) MOV32mr %24:gr64, 4, %21:gr64_nosp, -4, $noreg, %18.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
              to GR16 2
  LiveReg: %18
  UpdateRegP: SU(3) %21:gr64_nosp = MOVSX64rm32 %20:gr64, 4, %18:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
              to 
  UpdateRegP: SU(5) MOV32mr %20:gr64, 4, %18:gr64_nosp, 0, $noreg, %22.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
              to GR16 4
  UpdateRegP: SU(6) MOV32mr %24:gr64, 4, %21:gr64_nosp, -4, $noreg, %18.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
              to 
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) MOV32mr %20:gr64, 4, %18:gr64_nosp, 0, $noreg, %22.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
Bottom Pressure:
GR16=12
  LiveReg: %20
  UpdateRegP: SU(3) %21:gr64_nosp = MOVSX64rm32 %20:gr64, 4, %18:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
              to GR16 -2
  UpdateRegP: SU(5) MOV32mr %20:gr64, 4, %18:gr64_nosp, 0, $noreg, %22.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
              to GR16 2
  LiveReg: %22
  UpdateRegP: SU(5) MOV32mr %20:gr64, 4, %18:gr64_nosp, 0, $noreg, %22.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
              to 
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %22:gr64_with_sub_8bit = LEA64r %21:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
Bottom Pressure:
GR16=10
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %21:gr64_nosp = MOVSX64rm32 %20:gr64, 4, %18:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
Bottom Pressure:
GR16=8
  Ready @8c
  BotQ.A BotLatency SU(3) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %20:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
Bottom Pressure:
GR16=6
  Ready @12c
  BotQ.A BotLatency SU(2) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %18:gr64_nosp = MOVSX64rm32 %17:gr64, 4, %16:gr64_nosp, 0, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
Bottom Pressure:
GR16=6
  LiveReg: %16
  UpdateRegP: SU(1) %18:gr64_nosp = MOVSX64rm32 %17:gr64, 4, %16:gr64_nosp, 0, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
              to GR16 -2
  Ready @12c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %16:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
Bottom Pressure:
GR16=4
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %16:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
SU(1):   %18:gr64_nosp = MOVSX64rm32 %17:gr64, 4, %16:gr64_nosp, 0, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
SU(2):   %20:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
SU(3):   %21:gr64_nosp = MOVSX64rm32 %20:gr64, 4, %18:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
SU(4):   %22:gr64_with_sub_8bit = LEA64r %21:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
SU(5):   MOV32mr %20:gr64, 4, %18:gr64_nosp, 0, $noreg, %22.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
SU(6):   MOV32mr %24:gr64, 4, %21:gr64_nosp, -4, $noreg, %18.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
SU(7):   INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32

********** MI Scheduling **********
full_verify:%bb.3 for.end
  From: MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %3:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%3
  Single Issue       : false;
SU(2):   MOV32mr %stack.0.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !307 :: (store 4 into %ir.i); is.c:357:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%3
  Single Issue       : false;
SU(3):   %5:gr32 = MOV32ri 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %13:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %13:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %5:gr32 = MOV32ri 33554431
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr %stack.0.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !307 :: (store 4 into %ir.i); is.c:357:12
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %3:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
SU(1):   %3:gr32 = MOV32ri 1
SU(2):   MOV32mr %stack.0.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !307 :: (store 4 into %ir.i); is.c:357:12
SU(3):   %5:gr32 = MOV32ri 33554431
SU(4):   %13:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg

********** MI Scheduling **********
full_verify:%bb.5 for.body9
  From: %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
    To: JCC_1 %bb.7, 14, implicit killed $eflags, debug-location !321; is.c:358:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(2): Data Latency=4 Reg=%12
    SU(1): Data Latency=4 Reg=%12
  Single Issue       : false;
SU(1):   %14:gr32 = MOV32rm %13:gr64, 4, %12:gr64_nosp, -4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%12
  Successors:
    SU(2): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(2):   CMP32rm %14:gr32, %13:gr64, 4, %12:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%14
    SU(0): Data Latency=4 Reg=%12
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 14, implicit killed $eflags, debug-location !321; is.c:358:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) CMP32rm %14:gr32, %13:gr64, 4, %12:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30
  Ready @4c
  BotQ.A TopLatency SU(2) 8c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %14:gr32 = MOV32rm %13:gr64, 4, %12:gr64_nosp, -4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
SU(1):   %14:gr32 = MOV32rm %13:gr64, 4, %12:gr64_nosp, -4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
SU(2):   CMP32rm %14:gr32, %13:gr64, 4, %12:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30

********** MI Scheduling **********
full_verify:%bb.9 if.then20
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_Full_verif, $noreg, debug-location !335; is.c:362:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !335; is.c:362:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_Full_verif, $noreg, debug-location !335; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = COPY %7:gr64, debug-location !335; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !335; is.c:362:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $rsi = COPY %7:gr64, debug-location !335; is.c:362:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_Full_verif, $noreg, debug-location !335; is.c:362:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_Full_verif, $noreg, debug-location !335; is.c:362:9
SU(1):   $rsi = COPY %7:gr64, debug-location !335; is.c:362:9
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9

********** INTERVALS **********
%1 [32r,336B:0)  0@32r weight:0.000000e+00
%3 [368r,384r:0)  0@368r weight:0.000000e+00
%5 [400r,672B:0)  0@400r weight:0.000000e+00
%7 [752r,928r:0)  0@752r weight:0.000000e+00
%12 [512r,544r:0)  0@512r weight:0.000000e+00
%13 [416r,672B:0)  0@416r weight:0.000000e+00
%14 [528r,544r:0)  0@528r weight:0.000000e+00
%16 [160r,176r:0)  0@160r weight:0.000000e+00
%17 [48r,336B:0)  0@48r weight:0.000000e+00
%18 [176r,288r:0)  0@176r weight:0.000000e+00
%20 [208r,272r:0)  0@208r weight:0.000000e+00
%21 [224r,288r:0)  0@224r weight:0.000000e+00
%22 [240r,272r:0)  0@240r weight:0.000000e+00
%24 [64r,336B:0)  0@64r weight:0.000000e+00
RegMasks: 880r
********** MACHINEINSTRS **********
# Machine code for function full_verify: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0.i, 1, $noreg, 0, $noreg, 0, debug-location !287 :: (store 4 into %ir.i); is.c:351:12
32B	  %1:gr32 = MOV32ri 33554431
48B	  %17:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg
64B	  %24:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg

80B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  CMP32mr %stack.0.i, 1, $noreg, 0, $noreg, %1:gr32, implicit-def $eflags, debug-location !292 :: (dereferenceable load 4 from %ir.i); is.c:351:19
112B	  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !293; is.c:351:5
128B	  JMP_1 %bb.2, debug-location !293; is.c:351:5

144B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

160B	  %16:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !294 :: (dereferenceable load 4 from %ir.i); is.c:352:68
176B	  %18:gr64_nosp = MOVSX64rm32 %17:gr64, 4, %16:gr64_nosp, 0, $noreg, debug-location !295 :: (load 4 from %ir.arrayidx2); is.c:352:58
208B	  %20:gr64 = MOV64rm $rip, 1, $noreg, @key_buff_ptr_global, $noreg, debug-location !296 :: (dereferenceable load 8 from @key_buff_ptr_global); is.c:352:21
224B	  %21:gr64_nosp = MOVSX64rm32 %20:gr64, 4, %18:gr64_nosp, 0, $noreg, debug-location !299 :: (load 4 from %ir.arrayidx4); is.c:352:19
240B	  %22:gr64_with_sub_8bit = LEA64r %21:gr64_nosp, 1, $noreg, -1, $noreg, debug-location !299; is.c:352:19
272B	  MOV32mr %20:gr64, 4, %18:gr64_nosp, 0, $noreg, %22.sub_32bit:gr64_with_sub_8bit, debug-location !299 :: (store 4 into %ir.arrayidx4); is.c:352:19
288B	  MOV32mr %24:gr64, 4, %21:gr64_nosp, -4, $noreg, %18.sub_32bit:gr64_nosp, debug-location !301 :: (store 4 into %ir.arrayidx6); is.c:352:56
304B	  INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !302 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:351:32
320B	  JMP_1 %bb.1, debug-location !303; is.c:351:5

336B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

352B	  MOV32mi %stack.1.j, 1, $noreg, 0, $noreg, 0, debug-location !306 :: (store 4 into %ir.j); is.c:356:7
368B	  %3:gr32 = MOV32ri 1
384B	  MOV32mr %stack.0.i, 1, $noreg, 0, $noreg, %3:gr32, debug-location !307 :: (store 4 into %ir.i); is.c:357:12
400B	  %5:gr32 = MOV32ri 33554431
416B	  %13:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg

432B	bb.4.for.cond7:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

448B	  CMP32mr %stack.0.i, 1, $noreg, 0, $noreg, %5:gr32, implicit-def $eflags, debug-location !312 :: (dereferenceable load 4 from %ir.i); is.c:357:19
464B	  JCC_1 %bb.8, 15, implicit killed $eflags, debug-location !313; is.c:357:5
480B	  JMP_1 %bb.5, debug-location !313; is.c:357:5

496B	bb.5.for.body9:
	; predecessors: %bb.4
	  successors: %bb.6(0x40000000), %bb.7(0x40000000); %bb.6(50.00%), %bb.7(50.00%)

512B	  %12:gr64_nosp = MOVSX64rm32 %stack.0.i, 1, $noreg, 0, $noreg, debug-location !314 :: (dereferenceable load 4 from %ir.i); is.c:358:23
528B	  %14:gr32 = MOV32rm %13:gr64, 4, %12:gr64_nosp, -4, $noreg, debug-location !317 :: (load 4 from %ir.arrayidx11); is.c:358:13
544B	  CMP32rm %14:gr32, %13:gr64, 4, %12:gr64_nosp, 0, $noreg, implicit-def $eflags, debug-location !320 :: (load 4 from %ir.arrayidx13); is.c:358:30
560B	  JCC_1 %bb.7, 14, implicit killed $eflags, debug-location !321; is.c:358:13
576B	  JMP_1 %bb.6, debug-location !321; is.c:358:13

592B	bb.6.if.then:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

608B	  INC32m %stack.1.j, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !322 :: (store 4 into %ir.j), (dereferenceable load 4 from %ir.j); is.c:359:14

624B	bb.7.if.end:
	; predecessors: %bb.5, %bb.6
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

640B	  INC32m %stack.0.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !324 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:357:32
656B	  JMP_1 %bb.4, debug-location !325; is.c:357:5

672B	bb.8.for.end18:
	; predecessors: %bb.4
	  successors: %bb.9(0x50000000), %bb.10(0x30000000); %bb.9(62.50%), %bb.10(37.50%)

688B	  CMP32mi8 %stack.1.j, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !330 :: (dereferenceable load 4 from %ir.j); is.c:361:11
704B	  JCC_1 %bb.10, 4, implicit killed $eflags, debug-location !331; is.c:361:9
720B	  JMP_1 %bb.9, debug-location !331; is.c:361:9

736B	bb.9.if.then20:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

752B	  %7:gr64 = MOVSX64rm32 %stack.1.j, 1, $noreg, 0, $noreg, debug-location !332 :: (dereferenceable load 4 from %ir.j); is.c:362:72
768B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !335; is.c:362:9
832B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_Full_verif, $noreg, debug-location !335; is.c:362:9
848B	  $rsi = COPY %7:gr64, debug-location !335; is.c:362:9
864B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !335; is.c:362:9
880B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !335; is.c:362:9
896B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !335; is.c:362:9
912B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !336; is.c:363:5
928B	  PCN_STACKMAP 0, 0, %7:gr64, implicit-def dead early-clobber $r11, debug-location !336; is.c:363:5
944B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !336; is.c:363:5
960B	  JMP_1 %bb.11, debug-location !336; is.c:363:5

976B	bb.10.if.else:
	; predecessors: %bb.8
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

992B	  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !337 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:365:28

1008B	bb.11.if.end22:
	; predecessors: %bb.10, %bb.9

1024B	  RET 0, debug-location !338; is.c:366:1

# End machine code for function full_verify.

Before MISched:
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $edi
  %0:gr32 = COPY $edi
  MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
  %1:gr32 = MOV32ri 11
  MOV32mr %stack.5.shift, 1, $noreg, 0, $noreg, %1:gr32, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
  %2:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg, debug-location !358; is.c:384:5
  %3:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
  MOV32mr %2:gr64, 4, %3:gr64_nosp, 0, $noreg, %3.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
  %5:gr32 = MOV32ri 2097152
  %5:gr32 = nsw SUB32rr %5:gr32(tied-def 0), %3.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
  MOV32mr %2:gr64, 4, %3:gr64_nosp, 40, $noreg, %5:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12
  %117:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
  %121:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !371 :: (dereferenceable load 4 from %ir.i); is.c:389:19
  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !372; is.c:389:5
  JMP_1 %bb.2, debug-location !372; is.c:389:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %125:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  %118:gr64_nosp = MOVSX64rm32 %117:gr64, 4, %125:gr64_nosp, 0, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
  %120:gr32 = MOV32rm %2:gr64, 4, %118:gr64_nosp, 0, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
  MOV32mr %121:gr64, 4, %125:gr64_nosp, 0, $noreg, %120:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
  %122:gr32 = LEA64_32r %125:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %122:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39
  JMP_1 %bb.1, debug-location !380; is.c:389:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); is.c:395:12
  %113:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg

bb.4.for.cond9:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 1023, implicit-def $eflags, debug-location !388 :: (dereferenceable load 4 from %ir.i); is.c:395:19
  JCC_1 %bb.6, 15, implicit killed $eflags, debug-location !389; is.c:395:5
  JMP_1 %bb.5, debug-location !389; is.c:395:5

bb.5.for.body11:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %126:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  MOV32mi %113:gr64, 4, %126:gr64_nosp, 0, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
  %114:gr32 = LEA64_32r %126:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %114:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35
  JMP_1 %bb.4, debug-location !394; is.c:395:5

bb.6.for.end16:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.i); is.c:399:12
  %11:gr32 = MOV32ri 33554431
  %104:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  %109:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg

bb.7.for.cond17:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  CMP32mr %stack.1.i, 1, $noreg, 0, $noreg, %11:gr32, implicit-def $eflags, debug-location !402 :: (dereferenceable load 4 from %ir.i); is.c:399:19
  JCC_1 %bb.9, 15, implicit killed $eflags, debug-location !403; is.c:399:5
  JMP_1 %bb.8, debug-location !403; is.c:399:5

bb.8.for.body19:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %127:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  %107:gr32 = MOV32rm %104:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
  %106:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
  $cl = COPY %106:gr8, debug-location !407; is.c:400:34
  %107:gr32 = SAR32rCL %107:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
  %108:gr64_nosp = MOVSX64rr32 %107:gr32, debug-location !408; is.c:400:9
  INC32m %109:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
  %110:gr32 = LEA64_32r %127:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %110:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
  JMP_1 %bb.7, debug-location !411; is.c:399:5

bb.9.for.end27:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  %13:gr32 = MOV32ri 1
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %13:gr32, debug-location !415 :: (store 4 into %ir.i); is.c:404:12
  %97:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
  %99:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg

bb.10.for.cond28:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 1023, implicit-def $eflags, debug-location !420 :: (dereferenceable load 4 from %ir.i); is.c:404:19
  JCC_1 %bb.12, 15, implicit killed $eflags, debug-location !421; is.c:404:5
  JMP_1 %bb.11, debug-location !421; is.c:404:5

bb.11.for.body30:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %128:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  %100:gr32 = MOV32rm %97:gr64, 4, %128:gr64_nosp, -4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
  %100:gr32 = nsw ADD32rm %100:gr32(tied-def 0), %99:gr64, 4, %128:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
  MOV32mr %97:gr64, 4, %128:gr64_nosp, 0, $noreg, %100:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
  %101:gr32 = LEA64_32r %128:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %101:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35
  JMP_1 %bb.10, debug-location !433; is.c:404:5

bb.12.for.end42:
; predecessors: %bb.10
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !436 :: (store 4 into %ir.i); is.c:408:12
  %17:gr32 = MOV32ri 33554431
  %84:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  %89:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
  %93:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg

bb.13.for.cond43:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  CMP32mr %stack.1.i, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags, debug-location !441 :: (dereferenceable load 4 from %ir.i); is.c:408:19
  JCC_1 %bb.15, 15, implicit killed $eflags, debug-location !442; is.c:408:5
  JMP_1 %bb.14, debug-location !442; is.c:408:5

bb.14.for.body45:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %130:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  %85:gr32 = MOV32rm %84:gr64, 4, %130:gr64_nosp, 0, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
  MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %85:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
  %86:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
  $cl = COPY %86:gr8, debug-location !450; is.c:410:35
  %87:gr32 = COPY %85:gr32, debug-location !450; is.c:410:35
  %87:gr32 = SAR32rCL %87:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !450; is.c:410:35
  %88:gr64_nosp = MOVSX64rr32 %87:gr32, debug-location !451; is.c:410:19
  %129:gr64_nosp = MOVSX64rm32 %89:gr64, 4, %88:gr64_nosp, 0, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
  %92:gr32 = LEA64_32r %129:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
  MOV32mr %89:gr64, 4, %88:gr64_nosp, 0, $noreg, %92:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
  MOV32mr %93:gr64, 4, %129:gr64_nosp, 0, $noreg, %85:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
  %94:gr32 = LEA64_32r %130:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %94:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
  JMP_1 %bb.13, debug-location !456; is.c:408:5

bb.15.for.end56:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %19:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg, debug-location !459; is.c:413:19
  MOV64mr %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, %19:gr64, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12
  %80:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg

bb.16.for.cond57:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 2097151, implicit-def $eflags, debug-location !465 :: (dereferenceable load 4 from %ir.i); is.c:422:19
  JCC_1 %bb.18, 15, implicit killed $eflags, debug-location !466; is.c:422:5
  JMP_1 %bb.17, debug-location !466; is.c:422:5

bb.17.for.body59:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %131:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  MOV32mi %80:gr64, 4, %131:gr64_nosp, 0, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
  %81:gr32 = LEA64_32r %131:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %81:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31
  JMP_1 %bb.16, debug-location !471; is.c:422:5

bb.18.for.end64:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %22:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg, debug-location !474; is.c:427:18
  MOV64mr %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, %22:gr64, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12
  %24:gr32 = MOV32ri 33554431

bb.19.for.cond65:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

  CMP32mr %stack.1.i, 1, $noreg, 0, $noreg, %24:gr32, implicit-def $eflags, debug-location !480 :: (dereferenceable load 4 from %ir.i); is.c:433:19
  JCC_1 %bb.21, 15, implicit killed $eflags, debug-location !481; is.c:433:5
  JMP_1 %bb.20, debug-location !481; is.c:433:5

bb.20.for.body67:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %74:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  %75:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  %76:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  %77:gr64_nosp = MOVSX64rm32 %75:gr64, 4, %76:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
  INC32m %74:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32
  JMP_1 %bb.19, debug-location !487; is.c:433:5

bb.21.for.end75:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !490 :: (store 4 into %ir.i); is.c:440:12
  %27:gr32 = MOV32ri 2097150

bb.22.for.cond76:
; predecessors: %bb.21, %bb.23
  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

  CMP32mr %stack.1.i, 1, $noreg, 0, $noreg, %27:gr32, implicit-def $eflags, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:440:19
  JCC_1 %bb.24, 15, implicit killed $eflags, debug-location !496; is.c:440:5
  JMP_1 %bb.23, debug-location !496; is.c:440:5

bb.23.for.body78:
; predecessors: %bb.22
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  %71:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  %72:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  %73:gr32 = MOV32rm %71:gr64, 4, %72:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
  ADD32mr %71:gr64, 4, %72:gr64_nosp, 4, $noreg, %73:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35
  JMP_1 %bb.22, debug-location !504; is.c:440:5

bb.24.for.end87:
; predecessors: %bb.22
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !507 :: (store 4 into %ir.i); is.c:446:12
  %35:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg
  %38:gr32 = MOV32ri 33554431
  %58:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg
  %62:gr32 = MOV32ri 1

bb.25.for.cond88:
; predecessors: %bb.24, %bb.39
  successors: %bb.26(0x7c000000), %bb.40(0x04000000); %bb.26(96.88%), %bb.40(3.12%)

  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !512 :: (dereferenceable load 4 from %ir.i); is.c:446:19
  JCC_1 %bb.40, 15, implicit killed $eflags, debug-location !513; is.c:446:5
  JMP_1 %bb.26, debug-location !513; is.c:446:5

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x40000000), %bb.39(0x40000000); %bb.27(50.00%), %bb.39(50.00%)

  %34:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  %36:gr32 = MOV32rm %35:gr64, 4, %34:gr64_nosp, 0, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
  MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %36:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
  TEST32rr %36:gr32, %36:gr32, implicit-def $eflags, debug-location !520; is.c:448:15
  JCC_1 %bb.39, 14, implicit killed $eflags, debug-location !521; is.c:448:19
  JMP_1 %bb.27, debug-location !521; is.c:448:19

bb.27.land.lhs.true:
; predecessors: %bb.26
  successors: %bb.28(0x40000000), %bb.39(0x40000000); %bb.28(50.00%), %bb.39(50.00%)

  CMP32mr %stack.2.k, 1, $noreg, 0, $noreg, %38:gr32, implicit-def $eflags, debug-location !523 :: (dereferenceable load 4 from %ir.k); is.c:448:24
  JCC_1 %bb.39, 15, implicit killed $eflags, debug-location !524; is.c:448:13
  JMP_1 %bb.28, debug-location !524; is.c:448:13

bb.28.if.then:
; predecessors: %bb.27
  successors: %bb.31(0x40000000), %bb.29(0x40000000); %bb.31(50.00%), %bb.29(50.00%)

  %40:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  %41:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
  MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %42:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
  MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23
  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !536; is.c:496:28
  JMP_1 %bb.29, debug-location !536; is.c:496:28

bb.29.lor.lhs.false:
; predecessors: %bb.28
  successors: %bb.31(0x40000000), %bb.30(0x40000000); %bb.31(50.00%), %bb.30(50.00%)

  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !538 :: (dereferenceable load 4 from %ir.i); is.c:496:33
  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !539; is.c:496:38
  JMP_1 %bb.30, debug-location !539; is.c:496:38

bb.30.lor.lhs.false100:
; predecessors: %bb.29
  successors: %bb.31(0x40000000), %bb.34(0x40000000); %bb.31(50.00%), %bb.34(50.00%)

  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !541 :: (dereferenceable load 4 from %ir.i); is.c:496:43
  JCC_1 %bb.34, 5, implicit killed $eflags, debug-location !542; is.c:496:21
  JMP_1 %bb.31, debug-location !542; is.c:496:21

bb.31.if.then102:
; predecessors: %bb.28, %bb.29, %bb.30
  successors: %bb.32(0x40000000), %bb.33(0x40000000); %bb.32(50.00%), %bb.33(50.00%)

  %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
  %60:gr32 = MOV32rm %58:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
  %60:gr32 = nsw ADD32rm %60:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
  CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34
  JCC_1 %bb.33, 4, implicit killed $eflags, debug-location !551; is.c:497:25
  JMP_1 %bb.32, debug-location !551; is.c:497:25

bb.32.if.then107:
; predecessors: %bb.31
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  MOV32mr %stack.8.failed, 1, $noreg, 0, $noreg, %62:gr32, debug-location !552 :: (store 4 into %ir.failed); is.c:498:32
  JMP_1 %bb.37, debug-location !553; is.c:498:25

bb.33.if.else:
; predecessors: %bb.31
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !554 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:500:44
  JMP_1 %bb.37

bb.34.if.else109:
; predecessors: %bb.30
  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

  %50:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
  %53:gr32 = MOV32rm %58:gr64, 4, %50:gr64_nosp, 0, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
  %53:gr32 = nsw SUB32rm %53:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
  CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %53:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34
  JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !563; is.c:503:25
  JMP_1 %bb.35, debug-location !563; is.c:503:25

bb.35.if.then114:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  MOV32mr %stack.8.failed, 1, $noreg, 0, $noreg, %62:gr32, debug-location !564 :: (store 4 into %ir.failed); is.c:504:32
  JMP_1 %bb.37, debug-location !565; is.c:504:25

bb.36.if.else115:
; predecessors: %bb.34
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !566 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:506:44

bb.37.if.end118:
; predecessors: %bb.36, %bb.35, %bb.33, %bb.32
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  CMP32mi8 %stack.8.failed, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !569 :: (dereferenceable load 4 from %ir.failed); is.c:538:24
  JCC_1 %bb.39, 5, implicit killed $eflags, debug-location !570; is.c:538:17
  JMP_1 %bb.38, debug-location !570; is.c:538:17

bb.38.if.then120:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %65:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  %66:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
  $rdi = LEA64r $rip, 1, $noreg, @is__str_1_Failed_par, $noreg, debug-location !573; is.c:539:17
  $esi = COPY %65:gr32, debug-location !573; is.c:539:17
  $edx = COPY %66:gr32, debug-location !573; is.c:539:17
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; is.c:539:17
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
  PCN_STACKMAP 0, 0, 0, %stack.8.failed, 0, 0, %stack.1.i, 0, 0, %stack.0.iteration.addr, 0, 0, %stack.2.k, 0, 0, %stack.3.key_buff_ptr, 0, 0, %stack.7.key_rank, 0, %65:gr32, %66:gr32, implicit-def dead early-clobber $r11, debug-location !573 :: (load 8 from %stack.8.failed, align 4), (load 8 from %stack.1.i, align 4), (load 8 from %stack.0.iteration.addr, align 4), (load 8 from %stack.2.k, align 4), (load 8 from %stack.3.key_buff_ptr), (load 8 from %stack.7.key_rank, align 4); is.c:539:17
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17

bb.39.if.end122:
; predecessors: %bb.26, %bb.27, %bb.37, %bb.38
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !574 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:446:39
  JMP_1 %bb.25, debug-location !575; is.c:446:5

bb.40.for.end125:
; predecessors: %bb.25
  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

  CMP32mi8 %stack.0.iteration.addr, 1, $noreg, 0, $noreg, 10, implicit-def $eflags, debug-location !580 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:19
  JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !581; is.c:549:9
  JMP_1 %bb.41, debug-location !581; is.c:549:9

bb.41.if.then127:
; predecessors: %bb.40
  successors: %bb.42(0x80000000); %bb.42(100.00%)

  %33:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %33:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29

bb.42.if.end128:
; predecessors: %bb.40, %bb.41

  RET 0, debug-location !585; is.c:551:1

# End machine code for function rank.

********** MI Scheduling **********
rank:%bb.0 entry
  From: %0:gr32 = COPY $edi
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=6
Live In: DIL DIH HDI 
Live Out: %121 %117 %2 
Live Thru: 
  LiveReg: %121
  LiveReg: %117
  LiveReg: %2
  UpdateRegP: SU(6) MOV32mr %2:gr64, 4, %3:gr64_nosp, 0, $noreg, %3.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
              to GR16 2
  UpdateRegP: SU(9) MOV32mr %2:gr64, 4, %3:gr64_nosp, 40, $noreg, %5:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
              to GR16 4
Top Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=1
Bottom Pressure:
GR16=6
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=0 Reg=%0
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : GR32_BPSP 1    GR32_SIDI 1    GR32_DIBP+GR32_SIDI 1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR64_NOREX 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1    GR64_TC 1    GR8+GR64_TCW64 1    GR8+GR64_TC 1
  Single Issue       : false;
SU(1):   MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %1:gr32 = MOV32ri 11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%1
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV32mr %stack.5.shift, 1, $noreg, 0, $noreg, %1:gr32, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%1
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %2:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg, debug-location !358; is.c:384:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%2
    SU(6): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   %3:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Successors:
    SU(9): Data Latency=1 Reg=%3
    SU(8): Data Latency=1 Reg=%3
    SU(6): Data Latency=1 Reg=%3
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   MOV32mr %2:gr64, 4, %3:gr64_nosp, 0, $noreg, %3.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%3
    SU(4): Data Latency=1 Reg=%2
  Successors:
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %5:gr32 = MOV32ri 2097152
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Data Latency=1 Reg=%5
    SU(8): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(8):   %5:gr32 = nsw SUB32rr %5:gr32(tied-def 0), %3.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%5
    SU(7): Out  Latency=0
    SU(5): Data Latency=1 Reg=%3
  Successors:
    SU(9): Data Latency=1 Reg=%5
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(9):   MOV32mr %2:gr64, 4, %3:gr64_nosp, 40, $noreg, %5:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%5
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=%3
    SU(4): Data Latency=1 Reg=%2
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(10):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %117:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(12):   %121:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 3 1 
  Cand SU(12) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(12) %121:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg
Bottom Pressure:
GR16=4
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 10 9 3 
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(11) %117:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 10 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12
Bottom Pressure:
GR16=2
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV32mr %2:gr64, 4, %3:gr64_nosp, 40, $noreg, %5:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
Bottom Pressure:
GR16=6
  LiveReg: %3
  UpdateRegP: SU(6) MOV32mr %2:gr64, 4, %3:gr64_nosp, 0, $noreg, %3.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
              to 
  UpdateRegP: SU(8) %5:gr32 = nsw SUB32rr %5:gr32(tied-def 0), %3.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
              to 
  UpdateRegP: SU(9) MOV32mr %2:gr64, 4, %3:gr64_nosp, 40, $noreg, %5:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
              to GR16 2
  LiveReg: %5
  UpdateRegP: SU(9) MOV32mr %2:gr64, 4, %3:gr64_nosp, 40, $noreg, %5:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 2c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 8 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(8) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(8) %5:gr32 = nsw SUB32rr %5:gr32(tied-def 0), %3.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
Bottom Pressure:
GR16=6
  LiveReg: %5
  UpdateRegP: SU(8) %5:gr32 = nsw SUB32rr %5:gr32(tied-def 0), %3.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 6 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) REG-MAX                            
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %5:gr32 = MOV32ri 2097152
Bottom Pressure:
GR16=4
  Ready @2c
  BotQ.A BotLatency SU(7) 2c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %2:gr64, 4, %3:gr64_nosp, 0, $noreg, %3.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
Bottom Pressure:
GR16=4
  Ready @1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %3:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
Bottom Pressure:
GR16=4
  LiveReg: %0
  UpdateRegP: SU(1) MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
              to 
  UpdateRegP: SU(5) %3:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
              to GR16 -2
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %2:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg, debug-location !358; is.c:384:5
Bottom Pressure:
GR16=2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.5.shift, 1, $noreg, 0, $noreg, %1:gr32, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
Bottom Pressure:
GR16=4
  LiveReg: %1
  UpdateRegP: SU(3) MOV32mr %stack.5.shift, 1, $noreg, 0, $noreg, %1:gr32, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
              to 
  Ready @2c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %1:gr32 = MOV32ri 11
Bottom Pressure:
GR16=2
  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
Bottom Pressure:
GR16=2
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr32 = COPY $edi
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=1
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  Ready @3c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %0:gr32 = COPY $edi
SU(1):   MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
SU(2):   %1:gr32 = MOV32ri 11
SU(3):   MOV32mr %stack.5.shift, 1, $noreg, 0, $noreg, %1:gr32, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
SU(4):   %2:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg, debug-location !358; is.c:384:5
SU(5):   %3:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
SU(6):   MOV32mr %2:gr64, 4, %3:gr64_nosp, 0, $noreg, %3.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
SU(7):   %5:gr32 = MOV32ri 2097152
SU(8):   %5:gr32 = nsw SUB32rr %5:gr32(tied-def 0), %3.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
SU(9):   MOV32mr %2:gr64, 4, %3:gr64_nosp, 40, $noreg, %5:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
SU(10):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12
SU(11):   %117:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
SU(12):   %121:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg

********** MI Scheduling **********
rank:%bb.2 for.body
  From: %125:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
    To: JMP_1 %bb.1, debug-location !380; is.c:389:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %125:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%125
    SU(3): Data Latency=4 Reg=%125
    SU(1): Data Latency=4 Reg=%125
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %118:gr64_nosp = MOVSX64rm32 %117:gr64, 4, %125:gr64_nosp, 0, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%125
  Successors:
    SU(2): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(2):   %120:gr32 = MOV32rm %2:gr64, 4, %118:gr64_nosp, 0, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%118
  Successors:
    SU(3): Data Latency=4 Reg=%120
  Single Issue       : false;
SU(3):   MOV32mr %121:gr64, 4, %125:gr64_nosp, 0, $noreg, %120:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%120
    SU(0): Data Latency=4 Reg=%125
  Single Issue       : false;
SU(4):   %122:gr32 = LEA64_32r %125:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%125
  Successors:
    SU(5): Data Latency=1 Reg=%122
  Single Issue       : false;
SU(5):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %122:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%122
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.1, debug-location !380; is.c:389:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %122:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %122:gr32 = LEA64_32r %125:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %121:gr64, 4, %125:gr64_nosp, 0, $noreg, %120:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
  Ready @0c
  BotQ.A TopLatency SU(3) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %120:gr32 = MOV32rm %2:gr64, 4, %118:gr64_nosp, 0, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %118:gr64_nosp = MOVSX64rm32 %117:gr64, 4, %125:gr64_nosp, 0, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %125:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %125:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
SU(1):   %118:gr64_nosp = MOVSX64rm32 %117:gr64, 4, %125:gr64_nosp, 0, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
SU(2):   %120:gr32 = MOV32rm %2:gr64, 4, %118:gr64_nosp, 0, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
SU(3):   MOV32mr %121:gr64, 4, %125:gr64_nosp, 0, $noreg, %120:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
SU(4):   %122:gr32 = LEA64_32r %125:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
SU(5):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %122:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39

********** MI Scheduling **********
rank:%bb.3 for.end
  From: MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); is.c:395:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); is.c:395:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %113:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %113:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); is.c:395:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); is.c:395:12
SU(1):   %113:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg

********** MI Scheduling **********
rank:%bb.5 for.body11
  From: %126:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
    To: JMP_1 %bb.4, debug-location !394; is.c:395:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %126:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%126
    SU(1): Data Latency=4 Reg=%126
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV32mi %113:gr64, 4, %126:gr64_nosp, 0, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%126
  Single Issue       : false;
SU(2):   %114:gr32 = LEA64_32r %126:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%126
  Successors:
    SU(3): Data Latency=1 Reg=%114
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %114:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%114
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.4, debug-location !394; is.c:395:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %114:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %114:gr32 = LEA64_32r %126:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi %113:gr64, 4, %126:gr64_nosp, 0, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %126:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %126:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
SU(1):   MOV32mi %113:gr64, 4, %126:gr64_nosp, 0, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
SU(2):   %114:gr32 = LEA64_32r %126:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
SU(3):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %114:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35

********** MI Scheduling **********
rank:%bb.6 for.end16
  From: MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.i); is.c:399:12
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.i); is.c:399:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %11:gr32 = MOV32ri 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %104:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %109:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %109:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %104:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %11:gr32 = MOV32ri 33554431
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.i); is.c:399:12
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.i); is.c:399:12
SU(1):   %11:gr32 = MOV32ri 33554431
SU(2):   %104:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
SU(3):   %109:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg

********** MI Scheduling **********
rank:%bb.8 for.body19
  From: %127:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
    To: JMP_1 %bb.7, debug-location !411; is.c:399:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=9
Live In: %109 %104 
Live Out: %109 %104 
Live Thru: GR16=4
  LiveReg: %109
  UpdateRegP: SU(6) INC32m %109:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
              to GR16 2
  LiveReg: %104
  UpdateRegP: SU(1) %107:gr32 = MOV32rm %104:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
              to 
Top Pressure:
GR16=4
Bottom Pressure:
GR16=4
Excess PSets: 
SU(0):   %127:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(7): Data Latency=4 Reg=%127
    SU(1): Data Latency=4 Reg=%127
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %107:gr32 = MOV32rm %104:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%127
  Successors:
    SU(4): Data Latency=4 Reg=%107
    SU(4): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %106:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%106
  Pressure Diff      : GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(3):   $cl = COPY %106:gr8, debug-location !407; is.c:400:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%106
  Successors:
    SU(4): Data Latency=0 Reg=$cl
  Pressure Diff      : GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR64_TC+GR64_TCW64 -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR8+GR32temp 1    GR16 1
  Single Issue       : false;
SU(4):   %107:gr32 = SAR32rCL %107:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(3): Data Latency=0 Reg=$cl
    SU(1): Data Latency=4 Reg=%107
    SU(1): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%107
  Pressure Diff      : GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1
  Single Issue       : false;
SU(5):   %108:gr64_nosp = MOVSX64rr32 %107:gr32, debug-location !408; is.c:400:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=%107
  Successors:
    SU(6): Data Latency=1 Reg=%108
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   INC32m %109:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=%108
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(7):   %110:gr32 = LEA64_32r %127:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%127
  Successors:
    SU(8): Data Latency=1 Reg=%110
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %110:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%110
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.7, debug-location !411; is.c:399:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %110:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
Bottom Pressure:
GR16=6
  LiveReg: %110
  UpdateRegP: SU(8) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %110:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %110:gr32 = LEA64_32r %127:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
Bottom Pressure:
GR16=6
  LiveReg: %127
  UpdateRegP: SU(1) %107:gr32 = MOV32rm %104:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
              to GR16 -2
  UpdateRegP: SU(7) %110:gr32 = LEA64_32r %127:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Scheduling SU(6) INC32m %109:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
Bottom Pressure:
GR16=8
  LiveReg: %108
  UpdateRegP: SU(6) INC32m %109:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
              to 
  Ready @3c
  BotQ.A TopLatency SU(6) 10c
  BotQ.A BotLatency SU(6) 3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) %108:gr64_nosp = MOVSX64rr32 %107:gr32, debug-location !408; is.c:400:9
Bottom Pressure:
GR16=8
  LiveReg: %107
  UpdateRegP: SU(5) %108:gr64_nosp = MOVSX64rr32 %107:gr32, debug-location !408; is.c:400:9
              to GR16 -2
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) %107:gr32 = SAR32rCL %107:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
Bottom Pressure:
GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=9
  LiveReg: %107
  UpdateRegP: SU(4) %107:gr32 = SAR32rCL %107:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
              to GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $cl = COPY %106:gr8, debug-location !407; is.c:400:34
Bottom Pressure:
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR8+GR32temp=1
GR16=9
  LiveReg: %106
  UpdateRegP: SU(3) $cl = COPY %106:gr8, debug-location !407; is.c:400:34
              to GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %106:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
Bottom Pressure:
GR16=8
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %107:gr32 = MOV32rm %104:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
Bottom Pressure:
GR16=6
  Ready @9c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %127:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
Bottom Pressure:
GR16=4
  Ready @13c
  BotQ.A BotLatency SU(0) 13c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %127:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
SU(1):   %107:gr32 = MOV32rm %104:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
SU(2):   %106:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
SU(3):   $cl = COPY %106:gr8, debug-location !407; is.c:400:34
SU(4):   %107:gr32 = SAR32rCL %107:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !407; is.c:400:34
SU(5):   %108:gr64_nosp = MOVSX64rr32 %107:gr32, debug-location !408; is.c:400:9
SU(6):   INC32m %109:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
SU(7):   %110:gr32 = LEA64_32r %127:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
SU(8):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %110:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32

********** MI Scheduling **********
rank:%bb.9 for.end27
  From: MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %13:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%13
  Single Issue       : false;
SU(2):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %13:gr32, debug-location !415 :: (store 4 into %ir.i); is.c:404:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%13
  Single Issue       : false;
SU(3):   %97:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %99:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %99:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %97:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %13:gr32, debug-location !415 :: (store 4 into %ir.i); is.c:404:12
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %13:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
SU(1):   %13:gr32 = MOV32ri 1
SU(2):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %13:gr32, debug-location !415 :: (store 4 into %ir.i); is.c:404:12
SU(3):   %97:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
SU(4):   %99:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg

********** MI Scheduling **********
rank:%bb.11 for.body30
  From: %128:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
    To: JMP_1 %bb.10, debug-location !433; is.c:404:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %128:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(4): Data Latency=4 Reg=%128
    SU(3): Data Latency=4 Reg=%128
    SU(2): Data Latency=4 Reg=%128
    SU(1): Data Latency=4 Reg=%128
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %100:gr32 = MOV32rm %97:gr64, 4, %128:gr64_nosp, -4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%128
  Successors:
    SU(2): Data Latency=4 Reg=%100
    SU(2): Out  Latency=0
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %100:gr32 = nsw ADD32rm %100:gr32(tied-def 0), %99:gr64, 4, %128:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%100
    SU(1): Out  Latency=0
    SU(0): Data Latency=4 Reg=%128
  Successors:
    SU(3): Data Latency=4 Reg=%100
  Single Issue       : false;
SU(3):   MOV32mr %97:gr64, 4, %128:gr64_nosp, 0, $noreg, %100:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%100
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(4):   %101:gr32 = LEA64_32r %128:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%128
  Successors:
    SU(5): Data Latency=1 Reg=%101
  Single Issue       : false;
SU(5):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %101:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%101
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.10, debug-location !433; is.c:404:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %101:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %101:gr32 = LEA64_32r %128:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %97:gr64, 4, %128:gr64_nosp, 0, $noreg, %100:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
  Ready @0c
  BotQ.A TopLatency SU(3) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %100:gr32 = nsw ADD32rm %100:gr32(tied-def 0), %99:gr64, 4, %128:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %100:gr32 = MOV32rm %97:gr64, 4, %128:gr64_nosp, -4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %128:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
  Ready @12c
  BotQ.A BotLatency SU(0) 12c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %128:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
SU(1):   %100:gr32 = MOV32rm %97:gr64, 4, %128:gr64_nosp, -4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
SU(2):   %100:gr32 = nsw ADD32rm %100:gr32(tied-def 0), %99:gr64, 4, %128:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
SU(3):   MOV32mr %97:gr64, 4, %128:gr64_nosp, 0, $noreg, %100:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
SU(4):   %101:gr32 = LEA64_32r %128:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
SU(5):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %101:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35

********** MI Scheduling **********
rank:%bb.12 for.end42
  From: MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !436 :: (store 4 into %ir.i); is.c:408:12
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !436 :: (store 4 into %ir.i); is.c:408:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %17:gr32 = MOV32ri 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %84:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %89:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %93:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %93:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %89:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %84:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %17:gr32 = MOV32ri 33554431
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !436 :: (store 4 into %ir.i); is.c:408:12
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !436 :: (store 4 into %ir.i); is.c:408:12
SU(1):   %17:gr32 = MOV32ri 33554431
SU(2):   %84:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
SU(3):   %89:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
SU(4):   %93:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg

********** MI Scheduling **********
rank:%bb.14 for.body45
  From: %130:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
    To: JMP_1 %bb.13, debug-location !456; is.c:408:5
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=16
Live In: %93 %89 %84 
Live Out: %93 %89 %84 
Live Thru: GR16=6
  LiveReg: %93
  UpdateRegP: SU(11) MOV32mr %93:gr64, 4, %129:gr64_nosp, 0, $noreg, %85:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
              to GR16 4
  LiveReg: %89
  UpdateRegP: SU(8) %129:gr64_nosp = MOVSX64rm32 %89:gr64, 4, %88:gr64_nosp, 0, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
              to 
  UpdateRegP: SU(10) MOV32mr %89:gr64, 4, %88:gr64_nosp, 0, $noreg, %92:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
              to GR16 4
  LiveReg: %84
  UpdateRegP: SU(1) %85:gr32 = MOV32rm %84:gr64, 4, %130:gr64_nosp, 0, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
              to 
Top Pressure:
GR16=6
Bottom Pressure:
GR16=6
Excess PSets: 
SU(0):   %130:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(12): Data Latency=4 Reg=%130
    SU(1): Data Latency=4 Reg=%130
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %85:gr32 = MOV32rm %84:gr64, 4, %130:gr64_nosp, 0, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Data Latency=4 Reg=%130
  Successors:
    SU(11): Data Latency=4 Reg=%85
    SU(5): Data Latency=4 Reg=%85
    SU(2): Data Latency=4 Reg=%85
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %85:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%85
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(3):   %86:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(4): Data Latency=4 Reg=%86
  Pressure Diff      : GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(4):   $cl = COPY %86:gr8, debug-location !450; is.c:410:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=%86
  Successors:
    SU(6): Data Latency=0 Reg=$cl
  Pressure Diff      : GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR64_TC+GR64_TCW64 -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR8+GR64_TCW64 1    GR8+GR64_TC 1    GR8+GR32temp 1    GR16 1
  Single Issue       : false;
SU(5):   %87:gr32 = COPY %85:gr32, debug-location !450; is.c:410:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%85
  Successors:
    SU(6): Data Latency=0 Reg=%87
    SU(6): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %87:gr32 = SAR32rCL %87:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !450; is.c:410:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(5): Data Latency=0 Reg=%87
    SU(5): Out  Latency=0
    SU(4): Data Latency=0 Reg=$cl
  Successors:
    SU(7): Data Latency=1 Reg=%87
  Pressure Diff      : GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1
  Single Issue       : false;
SU(7):   %88:gr64_nosp = MOVSX64rr32 %87:gr32, debug-location !451; is.c:410:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=%87
  Successors:
    SU(10): Data Latency=1 Reg=%88
    SU(8): Data Latency=1 Reg=%88
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %129:gr64_nosp = MOVSX64rm32 %89:gr64, 4, %88:gr64_nosp, 0, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=%88
  Successors:
    SU(11): Data Latency=4 Reg=%129
    SU(9): Data Latency=4 Reg=%129
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %92:gr32 = LEA64_32r %129:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%129
  Successors:
    SU(10): Data Latency=1 Reg=%92
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   MOV32mr %89:gr64, 4, %88:gr64_nosp, 0, $noreg, %92:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%92
    SU(8): Ord  Latency=0 Memory
    SU(7): Data Latency=1 Reg=%88
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(11):   MOV32mr %93:gr64, 4, %129:gr64_nosp, 0, $noreg, %85:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=%129
    SU(1): Data Latency=4 Reg=%85
  Pressure Diff      : GR16 4
  Single Issue       : false;
SU(12):   %94:gr32 = LEA64_32r %130:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%130
  Successors:
    SU(13): Data Latency=1 Reg=%94
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %94:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%94
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GR16 2
  Single Issue       : false;
ExitSU:   JMP_1 %bb.13, debug-location !456; is.c:408:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 2 
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %94:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
Bottom Pressure:
GR16=8
  LiveReg: %94
  UpdateRegP: SU(13) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %94:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 11 10 12 
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %94:gr32 = LEA64_32r %130:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
Bottom Pressure:
GR16=8
  LiveReg: %130
  UpdateRegP: SU(1) %85:gr32 = MOV32rm %84:gr64, 4, %130:gr64_nosp, 0, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
              to GR16 -2
  UpdateRegP: SU(12) %94:gr32 = LEA64_32r %130:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
              to GR16 -2
  Ready @1c
  BotQ.A BotLatency SU(12) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 11 10 
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV32mr %93:gr64, 4, %129:gr64_nosp, 0, $noreg, %85:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
Bottom Pressure:
GR16=12
  LiveReg: %129
  UpdateRegP: SU(9) %92:gr32 = LEA64_32r %129:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
              to GR16 -2
  UpdateRegP: SU(11) MOV32mr %93:gr64, 4, %129:gr64_nosp, 0, $noreg, %85:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
              to GR16 2
  LiveReg: %85
  UpdateRegP: SU(2) MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %85:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
              to 
  UpdateRegP: SU(5) %87:gr32 = COPY %85:gr32, debug-location !450; is.c:410:35
              to GR16 -2
  UpdateRegP: SU(11) MOV32mr %93:gr64, 4, %129:gr64_nosp, 0, $noreg, %85:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 14c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 10 
  Cand SU(2) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr %89:gr64, 4, %88:gr64_nosp, 0, $noreg, %92:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
Bottom Pressure:
GR16=16
  LiveReg: %88
  UpdateRegP: SU(8) %129:gr64_nosp = MOVSX64rm32 %89:gr64, 4, %88:gr64_nosp, 0, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
              to GR16 -2
  UpdateRegP: SU(10) MOV32mr %89:gr64, 4, %88:gr64_nosp, 0, $noreg, %92:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
              to GR16 2
  LiveReg: %92
  UpdateRegP: SU(10) MOV32mr %89:gr64, 4, %88:gr64_nosp, 0, $noreg, %92:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 15c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 9 
  Cand SU(2) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %92:gr32 = LEA64_32r %129:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
Bottom Pressure:
GR16=14
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 8 
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %129:gr64_nosp = MOVSX64rm32 %89:gr64, 4, %88:gr64_nosp, 0, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
Bottom Pressure:
GR16=12
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %88:gr64_nosp = MOVSX64rr32 %87:gr32, debug-location !451; is.c:410:19
Bottom Pressure:
GR16=12
  LiveReg: %87
  UpdateRegP: SU(7) %88:gr64_nosp = MOVSX64rr32 %87:gr32, debug-location !451; is.c:410:19
              to GR16 -2
  Ready @6c
  BotQ.A BotLatency SU(7) 6c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %87:gr32 = SAR32rCL %87:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !450; is.c:410:35
Bottom Pressure:
GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
GR32_TC=1
GR32_BPSP+GR32_TC=1
GR64_NOREX=1
GR64_TCW64=1
GR32_BPSP+GR64_TCW64=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
GR16=13
  LiveReg: %87
  UpdateRegP: SU(6) %87:gr32 = SAR32rCL %87:gr32(tied-def 0), implicit-def dead $eflags, implicit killed $cl, debug-location !450; is.c:410:35
              to GR32_BSI 1    GR8_ABCD_L+GR32_BSI 1    GR8_NOREX 1    GR32_TC 1    GR32_BPSP+GR32_TC 1    GR64_NOREX 1    GR64_TCW64 1    GR32_BPSP+GR64_TCW64 1    GR8 1    GR8+GR32_DIBP 1    GR8+GR32_BSI 1    GR64_TC+GR64_TCW64 1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit 1    GR8+GR64_NOREX 1    GR32temp 1    GR32temp+GR32_DIBP 1
  Ready @7c
  BotQ.A BotLatency SU(6) 7c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 4 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(4) $cl = COPY %86:gr8, debug-location !450; is.c:410:35
Bottom Pressure:
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR8+GR32temp=1
GR16=13
  LiveReg: %86
  UpdateRegP: SU(4) $cl = COPY %86:gr8, debug-location !450; is.c:410:35
              to GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR32_TC -1    GR32_BPSP+GR32_TC -1    GR64_NOREX -1    GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1
  Ready @7c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 3 
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %87:gr32 = COPY %85:gr32, debug-location !450; is.c:410:35
Bottom Pressure:
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR8+GR32temp=1
GR16=11
  Ready @7c
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %86:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
Bottom Pressure:
GR16=10
  Ready @11c
  BotQ.A BotLatency SU(3) 11c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %85:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
Bottom Pressure:
GR16=10
  Ready @2c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %85:gr32 = MOV32rm %84:gr64, 4, %130:gr64_nosp, 0, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
Bottom Pressure:
GR16=8
  Ready @11c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %130:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
Bottom Pressure:
GR16=6
  Ready @15c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %130:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
SU(1):   %85:gr32 = MOV32rm %84:gr64, 4, %130:gr64_nosp, 0, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
SU(2):   MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %85:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
SU(3):   %86:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
SU(5):   %87:gr32 = COPY %85:gr32, debug-location !450; is.c:410:35
SU(4):   $cl = COPY %86:gr8, debug-location !450; is.c:410:35
SU(6):   %87:gr32 = SAR32rCL %87:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !450; is.c:410:35
SU(7):   %88:gr64_nosp = MOVSX64rr32 %87:gr32, debug-location !451; is.c:410:19
SU(8):   %129:gr64_nosp = MOVSX64rm32 %89:gr64, 4, %88:gr64_nosp, 0, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
SU(9):   %92:gr32 = LEA64_32r %129:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
SU(10):   MOV32mr %89:gr64, 4, %88:gr64_nosp, 0, $noreg, %92:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
SU(11):   MOV32mr %93:gr64, 4, %129:gr64_nosp, 0, $noreg, %85:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
SU(12):   %94:gr32 = LEA64_32r %130:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
SU(13):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %94:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32

********** MI Scheduling **********
rank:%bb.15 for.end56
  From: %19:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg, debug-location !459; is.c:413:19
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %19:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg, debug-location !459; is.c:413:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%19
  Single Issue       : false;
SU(1):   MOV64mr %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, %19:gr64, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%19
  Single Issue       : false;
SU(2):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %80:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %80:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, %19:gr64, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %19:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg, debug-location !459; is.c:413:19
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %19:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg, debug-location !459; is.c:413:19
SU(1):   MOV64mr %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, %19:gr64, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
SU(2):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12
SU(3):   %80:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg

********** MI Scheduling **********
rank:%bb.17 for.body59
  From: %131:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
    To: JMP_1 %bb.16, debug-location !471; is.c:422:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %131:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%131
    SU(1): Data Latency=4 Reg=%131
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   MOV32mi %80:gr64, 4, %131:gr64_nosp, 0, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%131
  Single Issue       : false;
SU(2):   %81:gr32 = LEA64_32r %131:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%131
  Successors:
    SU(3): Data Latency=1 Reg=%81
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %81:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%81
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.16, debug-location !471; is.c:422:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %81:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %81:gr32 = LEA64_32r %131:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mi %80:gr64, 4, %131:gr64_nosp, 0, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %131:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %131:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
SU(1):   MOV32mi %80:gr64, 4, %131:gr64_nosp, 0, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
SU(2):   %81:gr32 = LEA64_32r %131:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
SU(3):   MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %81:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31

********** MI Scheduling **********
rank:%bb.18 for.end64
  From: %22:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg, debug-location !474; is.c:427:18
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %22:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg, debug-location !474; is.c:427:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%22
  Single Issue       : false;
SU(1):   MOV64mr %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, %22:gr64, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%22
  Single Issue       : false;
SU(2):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %24:gr32 = MOV32ri 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %24:gr32 = MOV32ri 33554431
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, %22:gr64, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %22:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg, debug-location !474; is.c:427:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %22:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg, debug-location !474; is.c:427:18
SU(1):   MOV64mr %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, %22:gr64, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
SU(2):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12
SU(3):   %24:gr32 = MOV32ri 33554431

********** MI Scheduling **********
rank:%bb.20 for.body67
  From: %74:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
    To: JMP_1 %bb.19, debug-location !487; is.c:433:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %74:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%74
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %75:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%75
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %76:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%76
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %77:gr64_nosp = MOVSX64rm32 %75:gr64, 4, %76:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=%76
    SU(1): Data Latency=4 Reg=%75
  Successors:
    SU(4): Data Latency=4 Reg=%77
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %74:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%77
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%74
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.19, debug-location !487; is.c:433:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Scheduling SU(5) INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32
  Ready @3c
  BotQ.A TopLatency SU(5) 8c
  BotQ.A BotLatency SU(5) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %74:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %77:gr64_nosp = MOVSX64rm32 %75:gr64, 4, %76:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %76:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
  Ready @11c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %75:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %74:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
  Ready @7c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %74:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
SU(1):   %75:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
SU(2):   %76:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
SU(3):   %77:gr64_nosp = MOVSX64rm32 %75:gr64, 4, %76:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
SU(4):   INC32m %74:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
SU(5):   INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32

********** MI Scheduling **********
rank:%bb.21 for.end75
  From: MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !490 :: (store 4 into %ir.i); is.c:440:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !490 :: (store 4 into %ir.i); is.c:440:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %27:gr32 = MOV32ri 2097150
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %27:gr32 = MOV32ri 2097150
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !490 :: (store 4 into %ir.i); is.c:440:12
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !490 :: (store 4 into %ir.i); is.c:440:12
SU(1):   %27:gr32 = MOV32ri 2097150

********** MI Scheduling **********
rank:%bb.23 for.body78
  From: %71:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
    To: JMP_1 %bb.22, debug-location !504; is.c:440:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %71:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%71
    SU(2): Data Latency=4 Reg=%71
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %72:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%72
    SU(2): Data Latency=4 Reg=%72
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %73:gr32 = MOV32rm %71:gr64, 4, %72:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%72
    SU(0): Data Latency=4 Reg=%71
  Successors:
    SU(3): Data Latency=4 Reg=%73
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   ADD32mr %71:gr64, 4, %72:gr64_nosp, 4, $noreg, %73:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%73
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%72
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%71
    SU(0): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   JMP_1 %bb.22, debug-location !504; is.c:440:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Scheduling SU(4) INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35
  Ready @3c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) ADD32mr %71:gr64, 4, %72:gr64_nosp, 4, $noreg, %73:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %73:gr32 = MOV32rm %71:gr64, 4, %72:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %72:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
  Ready @11c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %71:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
  Ready @11c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %71:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
SU(1):   %72:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
SU(2):   %73:gr32 = MOV32rm %71:gr64, 4, %72:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
SU(3):   ADD32mr %71:gr64, 4, %72:gr64_nosp, 4, $noreg, %73:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
SU(4):   INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35

********** MI Scheduling **********
rank:%bb.24 for.end87
  From: MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !507 :: (store 4 into %ir.i); is.c:446:12
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !507 :: (store 4 into %ir.i); is.c:446:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %35:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %38:gr32 = MOV32ri 33554431
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %58:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %62:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %62:gr32 = MOV32ri 1
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %58:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %38:gr32 = MOV32ri 33554431
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %35:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !507 :: (store 4 into %ir.i); is.c:446:12
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !507 :: (store 4 into %ir.i); is.c:446:12
SU(1):   %35:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg
SU(2):   %38:gr32 = MOV32ri 33554431
SU(3):   %58:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg
SU(4):   %62:gr32 = MOV32ri 1

********** MI Scheduling **********
rank:%bb.26 for.body90
  From: %34:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
    To: JCC_1 %bb.39, 14, implicit killed $eflags, debug-location !521; is.c:448:19
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %34:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%34
  Single Issue       : false;
SU(1):   %36:gr32 = MOV32rm %35:gr64, 4, %34:gr64_nosp, 0, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%34
  Successors:
    SU(3): Data Latency=4 Reg=%36
    SU(2): Data Latency=4 Reg=%36
  Single Issue       : false;
SU(2):   MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %36:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%36
  Single Issue       : false;
SU(3):   TEST32rr %36:gr32, %36:gr32, implicit-def $eflags, debug-location !520; is.c:448:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%36
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.39, 14, implicit killed $eflags, debug-location !521; is.c:448:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) TEST32rr %36:gr32, %36:gr32, implicit-def $eflags, debug-location !520; is.c:448:15
  Ready @1c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %36:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %36:gr32 = MOV32rm %35:gr64, 4, %34:gr64_nosp, 0, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %34:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %34:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
SU(1):   %36:gr32 = MOV32rm %35:gr64, 4, %34:gr64_nosp, 0, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
SU(2):   MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %36:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
SU(3):   TEST32rr %36:gr32, %36:gr32, implicit-def $eflags, debug-location !520; is.c:448:15

********** MI Scheduling **********
rank:%bb.28 if.then
  From: %40:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
    To: JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !536; is.c:496:28
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %40:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%40
  Single Issue       : false;
SU(1):   %41:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%41
  Single Issue       : false;
SU(2):   %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%41
    SU(0): Data Latency=4 Reg=%40
  Successors:
    SU(3): Data Latency=4 Reg=%42
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %42:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%42
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !536; is.c:496:28
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 5 
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %42:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
  Ready @4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %41:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %40:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
  Ready @8c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %40:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
SU(1):   %41:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
SU(2):   %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
SU(3):   MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %42:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
SU(4):   MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
SU(5):   CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23

********** MI Scheduling **********
rank:%bb.31 if.then102
  From: %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
    To: JCC_1 %bb.33, 4, implicit killed $eflags, debug-location !551; is.c:497:25
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%57
  Single Issue       : false;
SU(1):   %60:gr32 = MOV32rm %58:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%57
  Successors:
    SU(2): Data Latency=4 Reg=%60
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %60:gr32 = nsw ADD32rm %60:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%60
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%60
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%60
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.33, 4, implicit killed $eflags, debug-location !551; is.c:497:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34
  Ready @4c
  BotQ.A TopLatency SU(3) 12c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %60:gr32 = nsw ADD32rm %60:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %60:gr32 = MOV32rm %58:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
SU(1):   %60:gr32 = MOV32rm %58:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
SU(2):   %60:gr32 = nsw ADD32rm %60:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
SU(3):   CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34

********** MI Scheduling **********
rank:%bb.34 if.else109
  From: %50:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
    To: JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !563; is.c:503:25
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %50:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(1): Data Latency=4 Reg=%50
  Single Issue       : false;
SU(1):   %53:gr32 = MOV32rm %58:gr64, 4, %50:gr64_nosp, 0, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Data Latency=4 Reg=%50
  Successors:
    SU(2): Data Latency=4 Reg=%53
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %53:gr32 = nsw SUB32rm %53:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%53
    SU(1): Out  Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=%53
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %53:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%53
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !563; is.c:503:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %53:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34
  Ready @4c
  BotQ.A TopLatency SU(3) 12c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %53:gr32 = nsw SUB32rm %53:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %53:gr32 = MOV32rm %58:gr64, 4, %50:gr64_nosp, 0, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
  Ready @12c
  BotQ.A BotLatency SU(1) 12c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %50:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
  Ready @16c
  BotQ.A BotLatency SU(0) 16c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %50:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
SU(1):   %53:gr32 = MOV32rm %58:gr64, 4, %50:gr64_nosp, 0, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
SU(2):   %53:gr32 = nsw SUB32rm %53:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
SU(3):   CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %53:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34

********** MI Scheduling **********
rank:%bb.38 if.then120
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_1_Failed_par, $noreg, debug-location !573; is.c:539:17
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; is.c:539:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_1_Failed_par, $noreg, debug-location !573; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %65:gr32, debug-location !573; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $edx = COPY %66:gr32, debug-location !573; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; is.c:539:17
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = COPY %66:gr32, debug-location !573; is.c:539:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %65:gr32, debug-location !573; is.c:539:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_1_Failed_par, $noreg, debug-location !573; is.c:539:17
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_1_Failed_par, $noreg, debug-location !573; is.c:539:17
SU(1):   $esi = COPY %65:gr32, debug-location !573; is.c:539:17
SU(2):   $edx = COPY %66:gr32, debug-location !573; is.c:539:17
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17

********** MI Scheduling **********
rank:%bb.38 if.then120
  From: %65:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %65:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %66:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %66:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %65:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %65:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
SU(1):   %66:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40

********** MI Scheduling **********
rank:%bb.41 if.then127
  From: %33:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %33:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%33
  Single Issue       : false;
SU(1):   MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %33:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%33
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %33:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %33:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %33:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
SU(1):   MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %33:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29

********** INTERVALS **********
CL [944r,976r:0)[1704r,1712r:1)  0@944r 1@1704r
DIL [0B,16r:0)[3888r,3952r:1)  0@0B-phi 1@3888r
DIH [0B,16r:0)[3888r,3952r:1)  0@0B-phi 1@3888r
HDI [0B,16r:0)[3888r,3952r:1)  0@0B-phi 1@3888r
%0 [16r,96r:0)  0@16r weight:0.000000e+00
%1 [48r,64r:0)  0@48r weight:0.000000e+00
%2 [80r,480B:0)  0@80r weight:0.000000e+00
%3 [96r,192r:0)  0@96r weight:0.000000e+00
%5 [144r,176r:0)[176r,192r:1)  0@144r 1@176r weight:0.000000e+00
%11 [752r,1088B:0)  0@752r weight:0.000000e+00
%13 [1120r,1136r:0)  0@1120r weight:0.000000e+00
%17 [1456r,1904B:0)  0@1456r weight:0.000000e+00
%19 [1920r,1936r:0)  0@1920r weight:0.000000e+00
%22 [2192r,2208r:0)  0@2192r weight:0.000000e+00
%24 [2240r,2448B:0)  0@2240r weight:0.000000e+00
%27 [2480r,2672B:0)  0@2480r weight:0.000000e+00
%33 [4160r,4176r:0)  0@4160r weight:0.000000e+00
%34 [2880r,2896r:0)  0@2880r weight:0.000000e+00
%35 [2704r,4080B:0)  0@2704r weight:0.000000e+00
%36 [2896r,2928r:0)  0@2896r weight:0.000000e+00
%38 [2720r,4080B:0)  0@2720r weight:0.000000e+00
%40 [3056r,3088r:0)  0@3056r weight:0.000000e+00
%41 [3072r,3088r:0)  0@3072r weight:0.000000e+00
%42 [3088r,3104r:0)  0@3088r weight:0.000000e+00
%50 [3552r,3568r:0)  0@3552r weight:0.000000e+00
%53 [3568r,3600r:0)[3600r,3616r:1)  0@3568r 1@3600r weight:0.000000e+00
%57 [3328r,3344r:0)  0@3328r weight:0.000000e+00
%58 [2736r,4080B:0)  0@2736r weight:0.000000e+00
%60 [3344r,3376r:0)[3376r,3392r:1)  0@3344r 1@3376r weight:0.000000e+00
%62 [2752r,4080B:0)  0@2752r weight:0.000000e+00
%65 [3824r,4000r:0)  0@3824r weight:0.000000e+00
%66 [3840r,4000r:0)  0@3840r weight:0.000000e+00
%71 [2576r,2624r:0)  0@2576r weight:0.000000e+00
%72 [2592r,2624r:0)  0@2592r weight:0.000000e+00
%73 [2608r,2624r:0)  0@2608r weight:0.000000e+00
%74 [2336r,2400r:0)  0@2336r weight:0.000000e+00
%75 [2352r,2384r:0)  0@2352r weight:0.000000e+00
%76 [2368r,2384r:0)  0@2368r weight:0.000000e+00
%77 [2384r,2400r:0)  0@2384r weight:0.000000e+00
%80 [1968r,2176B:0)  0@1968r weight:0.000000e+00
%81 [2128r,2144r:0)  0@2128r weight:0.000000e+00
%84 [1472r,1904B:0)  0@1472r weight:0.000000e+00
%85 [1632r,1824r:0)  0@1632r weight:0.000000e+00
%86 [1664r,1704r:0)  0@1664r weight:0.000000e+00
%87 [1696r,1712r:0)[1712r,1728r:1)  0@1696r 1@1712r weight:0.000000e+00
%88 [1728r,1808r:0)  0@1728r weight:0.000000e+00
%89 [1488r,1904B:0)  0@1488r weight:0.000000e+00
%92 [1792r,1808r:0)  0@1792r weight:0.000000e+00
%93 [1504r,1904B:0)  0@1504r weight:0.000000e+00
%94 [1856r,1872r:0)  0@1856r weight:0.000000e+00
%97 [1152r,1424B:0)  0@1152r weight:0.000000e+00
%99 [1168r,1424B:0)  0@1168r weight:0.000000e+00
%100 [1296r,1328r:0)[1328r,1344r:1)  0@1296r 1@1328r weight:0.000000e+00
%101 [1376r,1392r:0)  0@1376r weight:0.000000e+00
%104 [768r,1088B:0)  0@768r weight:0.000000e+00
%106 [928r,944r:0)  0@928r weight:0.000000e+00
%107 [912r,976r:0)[976r,992r:1)  0@912r 1@976r weight:0.000000e+00
%108 [992r,1008r:0)  0@992r weight:0.000000e+00
%109 [784r,1088B:0)  0@784r weight:0.000000e+00
%110 [1040r,1056r:0)  0@1040r weight:0.000000e+00
%113 [512r,720B:0)  0@512r weight:0.000000e+00
%114 [672r,688r:0)  0@672r weight:0.000000e+00
%117 [224r,480B:0)  0@224r weight:0.000000e+00
%118 [368r,384r:0)  0@368r weight:0.000000e+00
%120 [384r,400r:0)  0@384r weight:0.000000e+00
%121 [240r,480B:0)  0@240r weight:0.000000e+00
%122 [432r,448r:0)  0@432r weight:0.000000e+00
%125 [336r,432r:0)  0@336r weight:0.000000e+00
%126 [608r,672r:0)  0@608r weight:0.000000e+00
%127 [880r,1040r:0)  0@880r weight:0.000000e+00
%128 [1264r,1376r:0)  0@1264r weight:0.000000e+00
%129 [1744r,1824r:0)  0@1744r weight:0.000000e+00
%130 [1600r,1856r:0)  0@1600r weight:0.000000e+00
%131 [2064r,2128r:0)  0@2064r weight:0.000000e+00
RegMasks: 3952r
********** MACHINEINSTRS **********
# Machine code for function rank: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=8, align=8, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
  fi#7: size=4, align=4, at location [SP+8]
  fi#8: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  MOV32mr %stack.0.iteration.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.iteration.addr)
48B	  %1:gr32 = MOV32ri 11
64B	  MOV32mr %stack.5.shift, 1, $noreg, 0, $noreg, %1:gr32, debug-location !353 :: (store 4 into %ir.shift); is.c:380:9
80B	  %2:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg, debug-location !358; is.c:384:5
96B	  %3:gr64_nosp = MOVSX64rr32 %0:gr32, debug-location !356; is.c:384:28
128B	  MOV32mr %2:gr64, 4, %3:gr64_nosp, 0, $noreg, %3.sub_32bit:gr64_nosp, debug-location !359 :: (store 4 into %ir.arrayidx); is.c:384:26
144B	  %5:gr32 = MOV32ri 2097152
176B	  %5:gr32 = nsw SUB32rr %5:gr32(tied-def 0), %3.sub_32bit:gr64_nosp, implicit-def dead $eflags, debug-location !361; is.c:385:53
192B	  MOV32mr %2:gr64, 4, %3:gr64_nosp, 40, $noreg, %5:gr32, debug-location !365 :: (store 4 into %ir.arrayidx2); is.c:385:43
208B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !366 :: (store 4 into %ir.i); is.c:389:12
224B	  %117:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
240B	  %121:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg

256B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

272B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !371 :: (dereferenceable load 4 from %ir.i); is.c:389:19
288B	  JCC_1 %bb.3, 15, implicit killed $eflags, debug-location !372; is.c:389:5
304B	  JMP_1 %bb.2, debug-location !372; is.c:389:5

320B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

336B	  %125:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !373 :: (dereferenceable load 4 from %ir.i); is.c:390:61
368B	  %118:gr64_nosp = MOVSX64rm32 %117:gr64, 4, %125:gr64_nosp, 0, $noreg, debug-location !374 :: (load 4 from %ir.arrayidx4); is.c:390:44
384B	  %120:gr32 = MOV32rm %2:gr64, 4, %118:gr64_nosp, 0, $noreg, debug-location !375 :: (load 4 from %ir.arrayidx6); is.c:390:34
400B	  MOV32mr %121:gr64, 4, %125:gr64_nosp, 0, $noreg, %120:gr32, debug-location !378 :: (store 4 into %ir.arrayidx8); is.c:390:32
432B	  %122:gr32 = LEA64_32r %125:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !379; is.c:389:39
448B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %122:gr32, debug-location !379 :: (store 4 into %ir.i); is.c:389:39
464B	  JMP_1 %bb.1, debug-location !380; is.c:389:5

480B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

496B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !383 :: (store 4 into %ir.i); is.c:395:12
512B	  %113:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg

528B	bb.4.for.cond9:
	; predecessors: %bb.3, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

544B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 1023, implicit-def $eflags, debug-location !388 :: (dereferenceable load 4 from %ir.i); is.c:395:19
560B	  JCC_1 %bb.6, 15, implicit killed $eflags, debug-location !389; is.c:395:5
576B	  JMP_1 %bb.5, debug-location !389; is.c:395:5

592B	bb.5.for.body11:
	; predecessors: %bb.4
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

608B	  %126:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !390 :: (dereferenceable load 4 from %ir.i); is.c:396:21
640B	  MOV32mi %113:gr64, 4, %126:gr64_nosp, 0, $noreg, 0, debug-location !392 :: (store 4 into %ir.arrayidx13); is.c:396:24
672B	  %114:gr32 = LEA64_32r %126:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !393; is.c:395:35
688B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %114:gr32, debug-location !393 :: (store 4 into %ir.i); is.c:395:35
704B	  JMP_1 %bb.4, debug-location !394; is.c:395:5

720B	bb.6.for.end16:
	; predecessors: %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

736B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !397 :: (store 4 into %ir.i); is.c:399:12
752B	  %11:gr32 = MOV32ri 33554431
768B	  %104:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
784B	  %109:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg

800B	bb.7.for.cond17:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

816B	  CMP32mr %stack.1.i, 1, $noreg, 0, $noreg, %11:gr32, implicit-def $eflags, debug-location !402 :: (dereferenceable load 4 from %ir.i); is.c:399:19
832B	  JCC_1 %bb.9, 15, implicit killed $eflags, debug-location !403; is.c:399:5
848B	  JMP_1 %bb.8, debug-location !403; is.c:399:5

864B	bb.8.for.body19:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

880B	  %127:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !404 :: (dereferenceable load 4 from %ir.i); is.c:400:31
912B	  %107:gr32 = MOV32rm %104:gr64, 4, %127:gr64_nosp, 0, $noreg, debug-location !405 :: (load 4 from %ir.arrayidx21); is.c:400:21
928B	  %106:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !406 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:400:37
944B	  $cl = COPY %106:gr8, debug-location !407; is.c:400:34
976B	  %107:gr32 = SAR32rCL %107:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !407; is.c:400:34
992B	  %108:gr64_nosp = MOVSX64rr32 %107:gr32, debug-location !408; is.c:400:9
1008B	  INC32m %109:gr64, 4, %108:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !409 :: (store 4 into %ir.arrayidx23), (load 4 from %ir.arrayidx23); is.c:400:43
1040B	  %110:gr32 = LEA64_32r %127:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !410; is.c:399:32
1056B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %110:gr32, debug-location !410 :: (store 4 into %ir.i); is.c:399:32
1072B	  JMP_1 %bb.7, debug-location !411; is.c:399:5

1088B	bb.9.for.end27:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1104B	  MOV32mi $rip, 1, $noreg, @bucket_ptrs, $noreg, 0, debug-location !414 :: (store 4 into `i32* getelementptr inbounds ([1024 x i32], [1024 x i32]* @bucket_ptrs, i64 0, i64 0)`, align 16); is.c:403:20
1120B	  %13:gr32 = MOV32ri 1
1136B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %13:gr32, debug-location !415 :: (store 4 into %ir.i); is.c:404:12
1152B	  %97:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
1168B	  %99:gr64 = LEA64r $rip, 1, $noreg, @bucket_size, $noreg

1184B	bb.10.for.cond28:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1200B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 1023, implicit-def $eflags, debug-location !420 :: (dereferenceable load 4 from %ir.i); is.c:404:19
1216B	  JCC_1 %bb.12, 15, implicit killed $eflags, debug-location !421; is.c:404:5
1232B	  JMP_1 %bb.11, debug-location !421; is.c:404:5

1248B	bb.11.for.body30:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1264B	  %128:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !422 :: (dereferenceable load 4 from %ir.i); is.c:405:38
1296B	  %100:gr32 = MOV32rm %97:gr64, 4, %128:gr64_nosp, -4, $noreg, debug-location !424 :: (load 4 from %ir.arrayidx33); is.c:405:26
1328B	  %100:gr32 = nsw ADD32rm %100:gr32(tied-def 0), %99:gr64, 4, %128:gr64_nosp, -4, $noreg, implicit-def dead $eflags, debug-location !428 :: (load 4 from %ir.arrayidx36); is.c:405:45
1344B	  MOV32mr %97:gr64, 4, %128:gr64_nosp, 0, $noreg, %100:gr32, debug-location !431 :: (store 4 into %ir.arrayidx39); is.c:405:24
1376B	  %101:gr32 = LEA64_32r %128:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !432; is.c:404:35
1392B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %101:gr32, debug-location !432 :: (store 4 into %ir.i); is.c:404:35
1408B	  JMP_1 %bb.10, debug-location !433; is.c:404:5

1424B	bb.12.for.end42:
	; predecessors: %bb.10
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1440B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !436 :: (store 4 into %ir.i); is.c:408:12
1456B	  %17:gr32 = MOV32ri 33554431
1472B	  %84:gr64 = LEA64r $rip, 1, $noreg, @key_array, $noreg
1488B	  %89:gr64 = LEA64r $rip, 1, $noreg, @bucket_ptrs, $noreg
1504B	  %93:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg

1520B	bb.13.for.cond43:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

1536B	  CMP32mr %stack.1.i, 1, $noreg, 0, $noreg, %17:gr32, implicit-def $eflags, debug-location !441 :: (dereferenceable load 4 from %ir.i); is.c:408:19
1552B	  JCC_1 %bb.15, 15, implicit killed $eflags, debug-location !442; is.c:408:5
1568B	  JMP_1 %bb.14, debug-location !442; is.c:408:5

1584B	bb.14.for.body45:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1600B	  %130:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !443 :: (dereferenceable load 4 from %ir.i); is.c:409:25
1632B	  %85:gr32 = MOV32rm %84:gr64, 4, %130:gr64_nosp, 0, $noreg, debug-location !445 :: (load 4 from %ir.arrayidx47); is.c:409:15
1648B	  MOV32mr %stack.6.key, 1, $noreg, 0, $noreg, %85:gr32, debug-location !446 :: (store 4 into %ir.key); is.c:409:13
1664B	  %86:gr8 = MOV8rm %stack.5.shift, 1, $noreg, 0, $noreg, debug-location !449 :: (dereferenceable load 1 from %ir.shift, align 4); is.c:410:38
1696B	  %87:gr32 = COPY %85:gr32, debug-location !450; is.c:410:35
1704B	  $cl = COPY %86:gr8, debug-location !450; is.c:410:35
1712B	  %87:gr32 = SAR32rCL %87:gr32(tied-def 0), implicit-def dead $eflags, implicit $cl, debug-location !450; is.c:410:35
1728B	  %88:gr64_nosp = MOVSX64rr32 %87:gr32, debug-location !451; is.c:410:19
1744B	  %129:gr64_nosp = MOVSX64rm32 %89:gr64, 4, %88:gr64_nosp, 0, $noreg, debug-location !452 :: (load 4 from %ir.arrayidx50); is.c:410:44
1792B	  %92:gr32 = LEA64_32r %129:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !452; is.c:410:44
1808B	  MOV32mr %89:gr64, 4, %88:gr64_nosp, 0, $noreg, %92:gr32, debug-location !452 :: (store 4 into %ir.arrayidx50); is.c:410:44
1824B	  MOV32mr %93:gr64, 4, %129:gr64_nosp, 0, $noreg, %85:gr32, debug-location !454 :: (store 4 into %ir.arrayidx53); is.c:410:48
1856B	  %94:gr32 = LEA64_32r %130:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !455; is.c:408:32
1872B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %94:gr32, debug-location !455 :: (store 4 into %ir.i); is.c:408:32
1888B	  JMP_1 %bb.13, debug-location !456; is.c:408:5

1904B	bb.15.for.end56:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

1920B	  %19:gr64 = LEA64r $rip, 1, $noreg, @key_buff2, $noreg, debug-location !459; is.c:413:19
1936B	  MOV64mr %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, %19:gr64, debug-location !459 :: (store 8 into %ir.key_buff_ptr2); is.c:413:19
1952B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !460 :: (store 4 into %ir.i); is.c:422:12
1968B	  %80:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg

1984B	bb.16.for.cond57:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

2000B	  CMP32mi %stack.1.i, 1, $noreg, 0, $noreg, 2097151, implicit-def $eflags, debug-location !465 :: (dereferenceable load 4 from %ir.i); is.c:422:19
2016B	  JCC_1 %bb.18, 15, implicit killed $eflags, debug-location !466; is.c:422:5
2032B	  JMP_1 %bb.17, debug-location !466; is.c:422:5

2048B	bb.17.for.body59:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

2064B	  %131:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !467 :: (dereferenceable load 4 from %ir.i); is.c:423:19
2096B	  MOV32mi %80:gr64, 4, %131:gr64_nosp, 0, $noreg, 0, debug-location !469 :: (store 4 into %ir.arrayidx61); is.c:423:22
2128B	  %81:gr32 = LEA64_32r %131:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !470; is.c:422:31
2144B	  MOV32mr %stack.1.i, 1, $noreg, 0, $noreg, %81:gr32, debug-location !470 :: (store 4 into %ir.i); is.c:422:31
2160B	  JMP_1 %bb.16, debug-location !471; is.c:422:5

2176B	bb.18.for.end64:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2192B	  %22:gr64 = LEA64r $rip, 1, $noreg, @key_buff1, $noreg, debug-location !474; is.c:427:18
2208B	  MOV64mr %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, %22:gr64, debug-location !474 :: (store 8 into %ir.key_buff_ptr); is.c:427:18
2224B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !475 :: (store 4 into %ir.i); is.c:433:12
2240B	  %24:gr32 = MOV32ri 33554431

2256B	bb.19.for.cond65:
	; predecessors: %bb.18, %bb.20
	  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

2272B	  CMP32mr %stack.1.i, 1, $noreg, 0, $noreg, %24:gr32, implicit-def $eflags, debug-location !480 :: (dereferenceable load 4 from %ir.i); is.c:433:19
2288B	  JCC_1 %bb.21, 15, implicit killed $eflags, debug-location !481; is.c:433:5
2304B	  JMP_1 %bb.20, debug-location !481; is.c:433:5

2320B	bb.20.for.body67:
	; predecessors: %bb.19
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2336B	  %74:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !482 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:434:9
2352B	  %75:gr64 = MOV64rm %stack.4.key_buff_ptr2, 1, $noreg, 0, $noreg, debug-location !483 :: (dereferenceable load 8 from %ir.key_buff_ptr2); is.c:434:22
2368B	  %76:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !484 :: (dereferenceable load 4 from %ir.i); is.c:434:36
2384B	  %77:gr64_nosp = MOVSX64rm32 %75:gr64, 4, %76:gr64_nosp, 0, $noreg, debug-location !483 :: (load 4 from %ir.arrayidx69); is.c:434:22
2400B	  INC32m %74:gr64, 4, %77:gr64_nosp, 0, $noreg, implicit-def dead $eflags, debug-location !485 :: (store 4 into %ir.arrayidx71), (load 4 from %ir.arrayidx71); is.c:434:39
2416B	  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !486 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:433:32
2432B	  JMP_1 %bb.19, debug-location !487; is.c:433:5

2448B	bb.21.for.end75:
	; predecessors: %bb.19
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

2464B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !490 :: (store 4 into %ir.i); is.c:440:12
2480B	  %27:gr32 = MOV32ri 2097150

2496B	bb.22.for.cond76:
	; predecessors: %bb.21, %bb.23
	  successors: %bb.23(0x7c000000), %bb.24(0x04000000); %bb.23(96.88%), %bb.24(3.12%)

2512B	  CMP32mr %stack.1.i, 1, $noreg, 0, $noreg, %27:gr32, implicit-def $eflags, debug-location !495 :: (dereferenceable load 4 from %ir.i); is.c:440:19
2528B	  JCC_1 %bb.24, 15, implicit killed $eflags, debug-location !496; is.c:440:5
2544B	  JMP_1 %bb.23, debug-location !496; is.c:440:5

2560B	bb.23.for.body78:
	; predecessors: %bb.22
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

2576B	  %71:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !497 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:441:32
2592B	  %72:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !498 :: (dereferenceable load 4 from %ir.i); is.c:441:45
2608B	  %73:gr32 = MOV32rm %71:gr64, 4, %72:gr64_nosp, 0, $noreg, debug-location !497 :: (load 4 from %ir.arrayidx80); is.c:441:32
2624B	  ADD32mr %71:gr64, 4, %72:gr64_nosp, 4, $noreg, %73:gr32, implicit-def dead $eflags, debug-location !502 :: (store 4 into %ir.arrayidx83), (load 4 from %ir.arrayidx83); is.c:441:29
2640B	  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !503 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:440:35
2656B	  JMP_1 %bb.22, debug-location !504; is.c:440:5

2672B	bb.24.for.end87:
	; predecessors: %bb.22
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

2688B	  MOV32mi %stack.1.i, 1, $noreg, 0, $noreg, 0, debug-location !507 :: (store 4 into %ir.i); is.c:446:12
2704B	  %35:gr64 = LEA64r $rip, 1, $noreg, @partial_verify_vals, $noreg
2720B	  %38:gr32 = MOV32ri 33554431
2736B	  %58:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg
2752B	  %62:gr32 = MOV32ri 1

2800B	bb.25.for.cond88:
	; predecessors: %bb.24, %bb.39
	  successors: %bb.26(0x7c000000), %bb.40(0x04000000); %bb.26(96.88%), %bb.40(3.12%)

2816B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !512 :: (dereferenceable load 4 from %ir.i); is.c:446:19
2832B	  JCC_1 %bb.40, 15, implicit killed $eflags, debug-location !513; is.c:446:5
2848B	  JMP_1 %bb.26, debug-location !513; is.c:446:5

2864B	bb.26.for.body90:
	; predecessors: %bb.25
	  successors: %bb.27(0x40000000), %bb.39(0x40000000); %bb.27(50.00%), %bb.39(50.00%)

2880B	  %34:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !514 :: (dereferenceable load 4 from %ir.i); is.c:447:33
2896B	  %36:gr32 = MOV32rm %35:gr64, 4, %34:gr64_nosp, 0, $noreg, debug-location !516 :: (load 4 from %ir.arrayidx92); is.c:447:13
2912B	  MOV32mr %stack.2.k, 1, $noreg, 0, $noreg, %36:gr32, debug-location !517 :: (store 4 into %ir.k); is.c:447:11
2928B	  TEST32rr %36:gr32, %36:gr32, implicit-def $eflags, debug-location !520; is.c:448:15
2944B	  JCC_1 %bb.39, 14, implicit killed $eflags, debug-location !521; is.c:448:19
2960B	  JMP_1 %bb.27, debug-location !521; is.c:448:19

2976B	bb.27.land.lhs.true:
	; predecessors: %bb.26
	  successors: %bb.28(0x40000000), %bb.39(0x40000000); %bb.28(50.00%), %bb.39(50.00%)

2992B	  CMP32mr %stack.2.k, 1, $noreg, 0, $noreg, %38:gr32, implicit-def $eflags, debug-location !523 :: (dereferenceable load 4 from %ir.k); is.c:448:24
3008B	  JCC_1 %bb.39, 15, implicit killed $eflags, debug-location !524; is.c:448:13
3024B	  JMP_1 %bb.28, debug-location !524; is.c:448:13

3040B	bb.28.if.then:
	; predecessors: %bb.27
	  successors: %bb.31(0x40000000), %bb.29(0x40000000); %bb.31(50.00%), %bb.29(50.00%)

3056B	  %40:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !528 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:449:33
3072B	  %41:gr64_nosp = MOVSX64rm32 %stack.2.k, 1, $noreg, 0, $noreg, debug-location !529 :: (dereferenceable load 4 from %ir.k); is.c:449:46
3088B	  %42:gr32 = MOV32rm %40:gr64, 4, %41:gr64_nosp, -4, $noreg, debug-location !528 :: (load 4 from %ir.arrayidx97); is.c:449:33
3104B	  MOV32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %42:gr32, debug-location !527 :: (store 4 into %ir.key_rank); is.c:449:22
3120B	  MOV32mi %stack.8.failed, 1, $noreg, 0, $noreg, 0, debug-location !532 :: (store 4 into %ir.failed); is.c:450:17
3136B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !535 :: (dereferenceable load 4 from %ir.i); is.c:496:23
3152B	  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !536; is.c:496:28
3168B	  JMP_1 %bb.29, debug-location !536; is.c:496:28

3184B	bb.29.lor.lhs.false:
	; predecessors: %bb.28
	  successors: %bb.31(0x40000000), %bb.30(0x40000000); %bb.31(50.00%), %bb.30(50.00%)

3200B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 2, implicit-def $eflags, debug-location !538 :: (dereferenceable load 4 from %ir.i); is.c:496:33
3216B	  JCC_1 %bb.31, 4, implicit killed $eflags, debug-location !539; is.c:496:38
3232B	  JMP_1 %bb.30, debug-location !539; is.c:496:38

3248B	bb.30.lor.lhs.false100:
	; predecessors: %bb.29
	  successors: %bb.31(0x40000000), %bb.34(0x40000000); %bb.31(50.00%), %bb.34(50.00%)

3264B	  CMP32mi8 %stack.1.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !541 :: (dereferenceable load 4 from %ir.i); is.c:496:43
3280B	  JCC_1 %bb.34, 5, implicit killed $eflags, debug-location !542; is.c:496:21
3296B	  JMP_1 %bb.31, debug-location !542; is.c:496:21

3312B	bb.31.if.then102:
	; predecessors: %bb.28, %bb.29, %bb.30
	  successors: %bb.32(0x40000000), %bb.33(0x40000000); %bb.32(50.00%), %bb.33(50.00%)

3328B	  %57:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !546 :: (dereferenceable load 4 from %ir.i); is.c:497:53
3344B	  %60:gr32 = MOV32rm %58:gr64, 4, %57:gr64_nosp, 0, $noreg, debug-location !547 :: (load 4 from %ir.arrayidx104); is.c:497:37
3376B	  %60:gr32 = nsw ADD32rm %60:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !549 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:497:56
3392B	  CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %60:gr32, implicit-def $eflags, debug-location !550 :: (dereferenceable load 4 from %ir.key_rank); is.c:497:34
3408B	  JCC_1 %bb.33, 4, implicit killed $eflags, debug-location !551; is.c:497:25
3424B	  JMP_1 %bb.32, debug-location !551; is.c:497:25

3440B	bb.32.if.then107:
	; predecessors: %bb.31
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3456B	  MOV32mr %stack.8.failed, 1, $noreg, 0, $noreg, %62:gr32, debug-location !552 :: (store 4 into %ir.failed); is.c:498:32
3472B	  JMP_1 %bb.37, debug-location !553; is.c:498:25

3488B	bb.33.if.else:
	; predecessors: %bb.31
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3504B	  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !554 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:500:44
3520B	  JMP_1 %bb.37

3536B	bb.34.if.else109:
	; predecessors: %bb.30
	  successors: %bb.35(0x40000000), %bb.36(0x40000000); %bb.35(50.00%), %bb.36(50.00%)

3552B	  %50:gr64_nosp = MOVSX64rm32 %stack.1.i, 1, $noreg, 0, $noreg, debug-location !558 :: (dereferenceable load 4 from %ir.i); is.c:503:53
3568B	  %53:gr32 = MOV32rm %58:gr64, 4, %50:gr64_nosp, 0, $noreg, debug-location !559 :: (load 4 from %ir.arrayidx111); is.c:503:37
3600B	  %53:gr32 = nsw SUB32rm %53:gr32(tied-def 0), %stack.0.iteration.addr, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !561 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:503:56
3616B	  CMP32mr %stack.7.key_rank, 1, $noreg, 0, $noreg, %53:gr32, implicit-def $eflags, debug-location !562 :: (dereferenceable load 4 from %ir.key_rank); is.c:503:34
3632B	  JCC_1 %bb.36, 4, implicit killed $eflags, debug-location !563; is.c:503:25
3648B	  JMP_1 %bb.35, debug-location !563; is.c:503:25

3664B	bb.35.if.then114:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3680B	  MOV32mr %stack.8.failed, 1, $noreg, 0, $noreg, %62:gr32, debug-location !564 :: (store 4 into %ir.failed); is.c:504:32
3696B	  JMP_1 %bb.37, debug-location !565; is.c:504:25

3712B	bb.36.if.else115:
	; predecessors: %bb.34
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

3728B	  INC32m $rip, 1, $noreg, @passed_verification, $noreg, implicit-def dead $eflags, debug-location !566 :: (store 4 into @passed_verification), (dereferenceable load 4 from @passed_verification); is.c:506:44

3744B	bb.37.if.end118:
	; predecessors: %bb.36, %bb.35, %bb.33, %bb.32
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

3760B	  CMP32mi8 %stack.8.failed, 1, $noreg, 0, $noreg, 1, implicit-def $eflags, debug-location !569 :: (dereferenceable load 4 from %ir.failed); is.c:538:24
3776B	  JCC_1 %bb.39, 5, implicit killed $eflags, debug-location !570; is.c:538:17
3792B	  JMP_1 %bb.38, debug-location !570; is.c:538:17

3808B	bb.38.if.then120:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

3824B	  %65:gr32 = MOV32rm %stack.0.iteration.addr, 1, $noreg, 0, $noreg, debug-location !571 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:541:24
3840B	  %66:gr32 = MOV32rm %stack.1.i, 1, $noreg, 0, $noreg, debug-location !572 :: (dereferenceable load 4 from %ir.i); is.c:541:40
3856B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
3888B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_1_Failed_par, $noreg, debug-location !573; is.c:539:17
3904B	  $esi = COPY %65:gr32, debug-location !573; is.c:539:17
3920B	  $edx = COPY %66:gr32, debug-location !573; is.c:539:17
3936B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !573; is.c:539:17
3952B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !573; is.c:539:17
3968B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
3984B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17
4000B	  PCN_STACKMAP 0, 0, 0, %stack.8.failed, 0, 0, %stack.1.i, 0, 0, %stack.0.iteration.addr, 0, 0, %stack.2.k, 0, 0, %stack.3.key_buff_ptr, 0, 0, %stack.7.key_rank, 0, %65:gr32, %66:gr32, implicit-def dead early-clobber $r11, debug-location !573 :: (load 8 from %stack.8.failed, align 4), (load 8 from %stack.1.i, align 4), (load 8 from %stack.0.iteration.addr, align 4), (load 8 from %stack.2.k, align 4), (load 8 from %stack.3.key_buff_ptr), (load 8 from %stack.7.key_rank, align 4); is.c:539:17
4016B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !573; is.c:539:17

4032B	bb.39.if.end122:
	; predecessors: %bb.26, %bb.27, %bb.37, %bb.38
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4048B	  INC32m %stack.1.i, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !574 :: (store 4 into %ir.i), (dereferenceable load 4 from %ir.i); is.c:446:39
4064B	  JMP_1 %bb.25, debug-location !575; is.c:446:5

4080B	bb.40.for.end125:
	; predecessors: %bb.25
	  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

4096B	  CMP32mi8 %stack.0.iteration.addr, 1, $noreg, 0, $noreg, 10, implicit-def $eflags, debug-location !580 :: (dereferenceable load 4 from %ir.iteration.addr); is.c:549:19
4112B	  JCC_1 %bb.42, 5, implicit killed $eflags, debug-location !581; is.c:549:9
4128B	  JMP_1 %bb.41, debug-location !581; is.c:549:9

4144B	bb.41.if.then127:
	; predecessors: %bb.40
	  successors: %bb.42(0x80000000); %bb.42(100.00%)

4160B	  %33:gr64 = MOV64rm %stack.3.key_buff_ptr, 1, $noreg, 0, $noreg, debug-location !582 :: (dereferenceable load 8 from %ir.key_buff_ptr); is.c:550:31
4176B	  MOV64mr $rip, 1, $noreg, @key_buff_ptr_global, $noreg, %33:gr64, debug-location !583 :: (store 8 into @key_buff_ptr_global); is.c:550:29

4192B	bb.42.if.end128:
	; predecessors: %bb.40, %bb.41

4208B	  RET 0, debug-location !585; is.c:551:1

# End machine code for function rank.

Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
  cp#2: 0x41B4000000000000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $edi, $rsi
  %1:gr64 = COPY $rsi
  %0:gr32 = COPY $edi
  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
  $rdi = LEA64r $rip, 1, $noreg, @is__str_2_timer_flag, $noreg, debug-location !611; is.c:573:15
  $rsi = LEA64r $rip, 1, $noreg, @is__str_3_r_, $noreg, debug-location !611; is.c:573:15
  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !611; is.c:573:15
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !613; is.c:573:13
  PCN_STACKMAP 0, 0, 0, %stack.7.fp, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !613 :: (load 8 from %stack.7.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:573:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !613; is.c:573:13
  %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
  MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41
  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !615; is.c:573:9
  JMP_1 %bb.1, debug-location !615; is.c:573:9

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %5:gr64 = MOV64rm %stack.7.fp, 1, $noreg, 0, $noreg, debug-location !616 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !618; is.c:574:9
  $rdi = COPY %5:gr64, debug-location !618; is.c:574:9
  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !618; is.c:574:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !618; is.c:574:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !619; is.c:575:18
  PCN_STACKMAP 1, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %5:gr64, implicit-def dead early-clobber $r11, debug-location !619 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:575:18
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !619; is.c:575:18
  %7:gr32 = MOV32ri 1
  MOV32mr %stack.5.timer_on, 1, $noreg, 0, $noreg, %7:gr32, debug-location !619 :: (store 4 into %ir.timer_on); is.c:575:18

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !621; is.c:577:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !621; is.c:577:5
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !621; is.c:577:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !621; is.c:577:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !622; is.c:578:9
  PCN_STACKMAP 2, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !622 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:578:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !622; is.c:578:9
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !622 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !624; is.c:578:9
  JMP_1 %bb.3, debug-location !624; is.c:578:9

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !625; is.c:579:9
  $edi = MOV32ri 1, debug-location !625; is.c:579:9
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !625; is.c:579:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !625; is.c:579:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
  PCN_STACKMAP 3, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !627 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:580:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
  $edi = MOV32ri 2, debug-location !627; is.c:580:9
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !627; is.c:580:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
  PCN_STACKMAP 4, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !628 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:581:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
  $edi = MOV32ri 3, debug-location !628; is.c:581:9
  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !628; is.c:581:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !629; is.c:582:5
  PCN_STACKMAP 5, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !629 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:582:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !629; is.c:582:5

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !630 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !632; is.c:584:9
  JMP_1 %bb.5, debug-location !632; is.c:584:9

bb.5.if.then5:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9
  $edi = MOV32ri 3, debug-location !633; is.c:585:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !633; is.c:585:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9
  PCN_STACKMAP 6, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !633 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:585:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9

bb.6.if.end6:
; predecessors: %bb.4, %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !634 :: (store 4 into %ir.i); is.c:588:12
  %107:gr64 = LEA64r $rip, 1, $noreg, @B_test_index_array, $noreg
  %109:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
  %110:gr64 = LEA64r $rip, 1, $noreg, @B_test_rank_array, $noreg
  %112:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg

bb.7.for.cond:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !639 :: (dereferenceable load 4 from %ir.i); is.c:588:19
  JCC_1 %bb.9, 15, implicit killed $eflags, debug-location !640; is.c:588:5
  JMP_1 %bb.8, debug-location !640; is.c:588:5

bb.8.for.body:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %114:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  %108:gr32 = MOV32rm %107:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
  MOV32mr %109:gr64, 4, %114:gr64_nosp, 0, $noreg, %108:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
  %111:gr32 = MOV32rm %110:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
  MOV32mr %112:gr64, 4, %114:gr64_nosp, 0, $noreg, %111:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
  %113:gr32 = LEA64_32r %114:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %113:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39
  JMP_1 %bb.7, debug-location !652; is.c:588:5

bb.9.for.end:
; predecessors: %bb.7
  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !655; is.c:617:5
  $rdi = LEA64r $rip, 1, $noreg, @is__str_4____NAS_Par, $noreg, debug-location !655; is.c:617:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !655; is.c:617:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !655; is.c:617:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
  PCN_STACKMAP 7, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !656 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:618:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
  $rdi = LEA64r $rip, 1, $noreg, @is__str_5__Size____l, $noreg, debug-location !656; is.c:618:5
  $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
  $edx = MOV32ri 66, debug-location !656; is.c:618:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !656; is.c:618:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
  PCN_STACKMAP 8, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !657 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:619:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
  $rdi = LEA64r $rip, 1, $noreg, @is__str_6__Iteration, $noreg, debug-location !657; is.c:619:5
  $esi = MOV32ri 10, debug-location !657; is.c:619:5
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !657; is.c:619:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !658; is.c:621:9
  PCN_STACKMAP 9, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !658 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:621:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !658; is.c:621:9
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !658 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
  JCC_1 %bb.11, 4, implicit killed $eflags, debug-location !660; is.c:621:9
  JMP_1 %bb.10, debug-location !660; is.c:621:9

bb.10.if.then18:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9
  $edi = MOV32ri 1, debug-location !661; is.c:622:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !661; is.c:622:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9
  PCN_STACKMAP 10, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !661 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:622:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9

bb.11.if.end19:
; predecessors: %bb.9, %bb.10
  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !662; is.c:625:5
  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  %28:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  $xmm0 = COPY %27:fr64, debug-location !662; is.c:625:5
  $xmm1 = COPY %28:fr64, debug-location !662; is.c:625:5
  CALL64pcrel32 @create_seq, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !662; is.c:625:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !662; is.c:625:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !663; is.c:627:9
  PCN_STACKMAP 11, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !663 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:627:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !663; is.c:627:9
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !663 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
  JCC_1 %bb.13, 4, implicit killed $eflags, debug-location !665; is.c:627:9
  JMP_1 %bb.12, debug-location !665; is.c:627:9

bb.12.if.then21:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9
  $edi = MOV32ri 1, debug-location !666; is.c:628:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !666; is.c:628:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9
  PCN_STACKMAP 12, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !666 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:628:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9

bb.13.if.end22:
; predecessors: %bb.11, %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !667; is.c:632:5
  %30:gr32 = MOV32ri 1
  $edi = MOV32ri 1, debug-location !667; is.c:632:5
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !667; is.c:632:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !667; is.c:632:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !668; is.c:635:25
  PCN_STACKMAP 13, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !668 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:635:25
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !668; is.c:635:25
  MOV32mi $rip, 1, $noreg, @passed_verification, $noreg, 0, debug-location !668 :: (store 4 into @passed_verification); is.c:635:25
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !669; is.c:638:9
  $rdi = LEA64r $rip, 1, $noreg, @is__str_7_____iterat, $noreg, debug-location !669; is.c:638:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !669; is.c:638:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !669; is.c:638:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
  PCN_STACKMAP 14, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !671 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:641:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !671; is.c:641:5
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !671; is.c:641:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !672; is.c:644:5
  PCN_STACKMAP 15, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !672 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:644:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !672; is.c:644:5
  MOV32mr %stack.4.iteration, 1, $noreg, 0, $noreg, %30:gr32, debug-location !673 :: (store 4 into %ir.iteration); is.c:646:20

bb.14.for.cond28:
; predecessors: %bb.13, %bb.15
  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

  CMP32mi8 %stack.4.iteration, 1, $noreg, 0, $noreg, 10, implicit-def $eflags, debug-location !678 :: (dereferenceable load 4 from %ir.iteration); is.c:646:35
  JCC_1 %bb.16, 15, implicit killed $eflags, debug-location !679; is.c:646:5
  JMP_1 %bb.15, debug-location !679; is.c:646:5

bb.15.for.body30:
; predecessors: %bb.14
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %99:gr32 = MOV32rm %stack.4.iteration, 1, $noreg, 0, $noreg, debug-location !680 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !683; is.c:648:13
  $rdi = LEA64r $rip, 1, $noreg, @is__str_8__________d, $noreg, debug-location !683; is.c:648:13
  $esi = COPY %99:gr32, debug-location !683; is.c:648:13
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !683; is.c:648:13
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !683; is.c:648:13
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !683; is.c:648:13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !684; is.c:650:14
  PCN_STACKMAP 16, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %99:gr32, implicit-def dead early-clobber $r11, debug-location !684 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:650:14
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !684; is.c:650:14
  %104:gr32 = MOV32rm %stack.4.iteration, 1, $noreg, 0, $noreg, debug-location !684 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !685; is.c:650:9
  $edi = COPY %104:gr32, debug-location !685; is.c:650:9
  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !685; is.c:650:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !685; is.c:650:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !686; is.c:652:5
  PCN_STACKMAP 17, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %104:gr32, implicit-def dead early-clobber $r11, debug-location !686 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:652:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !686; is.c:652:5
  INC32m %stack.4.iteration, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !687 :: (store 4 into %ir.iteration), (dereferenceable load 4 from %ir.iteration); is.c:646:63
  JMP_1 %bb.14, debug-location !688; is.c:646:5

bb.16.for.end34:
; predecessors: %bb.14
  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !691; is.c:657:5
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !691; is.c:657:5
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !691; is.c:657:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !691; is.c:657:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !692; is.c:658:19
  PCN_STACKMAP 18, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !692 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:19
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !692; is.c:658:19
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !692; is.c:658:19
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !692; is.c:658:19
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !692; is.c:658:19
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !692; is.c:658:19
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !693; is.c:658:17
  PCN_STACKMAP 19, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !693 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:17
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !693; is.c:658:17
  %38:fr64 = COPY killed $xmm0, debug-location !692; is.c:658:19
  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %38:fr64, debug-location !693 :: (store 8 into %ir.timecounter); is.c:658:17
  CMP32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !696; is.c:662:9
  JMP_1 %bb.17, debug-location !696; is.c:662:9

bb.17.if.then41:
; predecessors: %bb.16
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !697; is.c:663:9
  $edi = MOV32ri 2, debug-location !697; is.c:663:9
  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !697; is.c:663:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !697; is.c:663:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !697; is.c:663:9
  PCN_STACKMAP 20, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !697 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:663:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !697; is.c:663:9

bb.18.if.end42:
; predecessors: %bb.16, %bb.17
  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !698; is.c:664:5
  CALL64pcrel32 @full_verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !698; is.c:664:5
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !698; is.c:664:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !699; is.c:665:9
  PCN_STACKMAP 21, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !699 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:665:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !699; is.c:665:9
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !699 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
  JCC_1 %bb.20, 4, implicit killed $eflags, debug-location !701; is.c:665:9
  JMP_1 %bb.19, debug-location !701; is.c:665:9

bb.19.if.then44:
; predecessors: %bb.18
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !702; is.c:666:9
  $edi = MOV32ri 2, debug-location !702; is.c:666:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !702; is.c:666:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !702; is.c:666:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !702; is.c:666:9
  PCN_STACKMAP 22, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !702 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:666:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !702; is.c:666:9

bb.20.if.end45:
; predecessors: %bb.18, %bb.19
  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !703 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
  JCC_1 %bb.22, 4, implicit killed $eflags, debug-location !705; is.c:668:9
  JMP_1 %bb.21, debug-location !705; is.c:668:9

bb.21.if.then47:
; predecessors: %bb.20
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !706; is.c:669:9
  $edi = MOV32ri 3, debug-location !706; is.c:669:9
  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !706; is.c:669:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !706; is.c:669:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !706; is.c:669:9
  PCN_STACKMAP 23, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !706 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:669:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !706; is.c:669:9

bb.22.if.end48:
; predecessors: %bb.20, %bb.21
  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)

  CMP32mi8 $rip, 1, $noreg, @passed_verification, $noreg, 51, implicit-def $eflags, debug-location !709 :: (dereferenceable load 4 from @passed_verification); is.c:672:29
  JCC_1 %bb.24, 4, implicit killed $eflags, debug-location !710; is.c:672:9
  JMP_1 %bb.23, debug-location !710; is.c:672:9

bb.23.if.then50:
; predecessors: %bb.22
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  MOV32mi $rip, 1, $noreg, @passed_verification, $noreg, 0, debug-location !711 :: (store 4 into @passed_verification); is.c:673:29

bb.24.if.end51:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)

  %44:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  %47:fr64 = DIVSDrr %47:fr64(tied-def 0), %44:fr64, debug-location !715; is.c:676:49
  %47:fr64 = DIVSDrm %47:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !716 :: (load 8 from constant-pool); is.c:676:63
  %48:gr32 = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !717 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  ADJCALLSTACKDOWN64 80, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !718; is.c:674:5
  %49:gr64 = LEA64r $rip, 1, $noreg, @is__str_18__O3__mcmod, $noreg, debug-location !718; is.c:674:5
  MOV64mr $rsp, 1, $noreg, 72, $noreg, %49:gr64, debug-location !718 :: (store 8 into stack + 72); is.c:674:5
  %51:gr64 = LEA64r $rip, 1, $noreg, @is__str_17__g__Wall__, $noreg, debug-location !718; is.c:674:5
  MOV64mr $rsp, 1, $noreg, 64, $noreg, %51:gr64, debug-location !718 :: (store 8 into stack + 64); is.c:674:5
  %52:gr64 = LEA64r $rip, 1, $noreg, @is__str_16__I___commo, $noreg, debug-location !718; is.c:674:5
  MOV64mr $rsp, 1, $noreg, 56, $noreg, %52:gr64, debug-location !718 :: (store 8 into stack + 56); is.c:674:5
  %53:gr64 = LEA64r $rip, 1, $noreg, @is__str_15__lm_, $noreg, debug-location !718; is.c:674:5
  MOV64mr $rsp, 1, $noreg, 48, $noreg, %53:gr64, debug-location !718 :: (store 8 into stack + 48); is.c:674:5
  %54:gr64 = LEA64r $rip, 1, $noreg, @is__str_14___CC__, $noreg, debug-location !718; is.c:674:5
  MOV64mr $rsp, 1, $noreg, 40, $noreg, %54:gr64, debug-location !718 :: (store 8 into stack + 40); is.c:674:5
  %55:gr64 = LEA64r $rip, 1, $noreg, @is__str_13_gcc_, $noreg, debug-location !718; is.c:674:5
  MOV64mr $rsp, 1, $noreg, 32, $noreg, %55:gr64, debug-location !718 :: (store 8 into stack + 32); is.c:674:5
  %56:gr64 = LEA64r $rip, 1, $noreg, @is__str_12_03_Nov_201, $noreg, debug-location !718; is.c:674:5
  MOV64mr $rsp, 1, $noreg, 24, $noreg, %56:gr64, debug-location !718 :: (store 8 into stack + 24); is.c:674:5
  %57:gr64 = LEA64r $rip, 1, $noreg, @is__str_11_3_3_1_, $noreg, debug-location !718; is.c:674:5
  MOV64mr $rsp, 1, $noreg, 16, $noreg, %57:gr64, debug-location !718 :: (store 8 into stack + 16); is.c:674:5
  MOV32mr $rsp, 1, $noreg, 8, $noreg, %48:gr32, debug-location !718 :: (store 4 into stack + 8); is.c:674:5
  %58:gr64 = LEA64r $rip, 1, $noreg, @is__str_10_keys_ranke, $noreg, debug-location !718; is.c:674:5
  MOV64mr $rsp, 1, $noreg, 0, $noreg, %58:gr64, debug-location !718 :: (store 8 into stack); is.c:674:5
  $rdi = LEA64r $rip, 1, $noreg, @is__str_9_IS_, $noreg, debug-location !718; is.c:674:5
  $esi = MOV32ri 66, debug-location !718; is.c:674:5
  $edx = MOV32ri 524288, debug-location !718; is.c:674:5
  $ecx = MOV32ri 64, debug-location !718; is.c:674:5
  $r8d = MOV32r0 implicit-def dead $eflags, debug-location !718; is.c:674:5
  $r9d = MOV32ri 10, debug-location !718; is.c:674:5
  $xmm0 = COPY %44:fr64, debug-location !718; is.c:674:5
  $xmm1 = COPY %47:fr64, debug-location !718; is.c:674:5
  CALL64pcrel32 @c_print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !718; is.c:674:5
  ADJCALLSTACKUP64 80, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !718; is.c:674:5
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !719; is.c:681:9
  PCN_STACKMAP 24, 0, %47:fr64, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %44:fr64, %48:gr32, implicit-def dead early-clobber $r11, debug-location !719 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:681:9
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !719; is.c:681:9
  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !719 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
  JCC_1 %bb.28, 4, implicit killed $eflags, debug-location !721; is.c:681:9
  JMP_1 %bb.25, debug-location !721; is.c:681:9

bb.25.if.then54:
; predecessors: %bb.24
  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:684:19
  $edi = MOV32ri 3, debug-location !727; is.c:684:19
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !727; is.c:684:19
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:684:19
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !728; is.c:684:17
  PCN_STACKMAP 25, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !728 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:684:17
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !728; is.c:684:17
  %66:fr64 = COPY killed $xmm0, debug-location !727; is.c:684:19
  MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %66:fr64, debug-location !728 :: (store 8 into %ir.t_total); is.c:684:17
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:685:9
  $rdi = LEA64r $rip, 1, $noreg, @is__str_19__Additiona, $noreg, debug-location !729; is.c:685:9
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !729; is.c:685:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !729; is.c:685:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:685:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !730; is.c:686:45
  PCN_STACKMAP 26, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !730 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:686:45
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !730; is.c:686:45
  %71:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !730 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !731; is.c:686:9
  $rdi = LEA64r $rip, 1, $noreg, @is__str_20__Total_exe, $noreg, debug-location !731; is.c:686:9
  $xmm0 = COPY %71:fr64, debug-location !731; is.c:686:9
  $al = MOV8ri 1, debug-location !731; is.c:686:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !731; is.c:686:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !731; is.c:686:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !732; is.c:687:13
  PCN_STACKMAP 27, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %71:fr64, implicit-def dead early-clobber $r11, debug-location !732 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:687:13
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !732; is.c:687:13
  %75:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !732 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  %76:fr64 = FsFLD0SD
  UCOMISDrr %75:fr64, %76:fr64, implicit-def $eflags, debug-location !735; is.c:687:13
  JCC_1 %bb.27, 5, implicit $eflags, debug-location !735; is.c:687:13
  JCC_1 %bb.27, 10, implicit killed $eflags, debug-location !735; is.c:687:13
  JMP_1 %bb.26, debug-location !735; is.c:687:13

bb.26.if.then59:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %77:gr64 = MOV64ri 4607182418800017408
  MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %77:gr64, debug-location !736 :: (store 8 into %ir.t_total); is.c:688:21

bb.27.if.end60:
; predecessors: %bb.25, %bb.26
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !738; is.c:689:23
  $edi = MOV32ri 1, debug-location !738; is.c:689:23
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !738; is.c:689:23
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !738; is.c:689:23
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !739; is.c:689:21
  PCN_STACKMAP 28, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !739 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:689:21
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !739; is.c:689:21
  %79:fr64 = COPY killed $xmm0, debug-location !738; is.c:689:23
  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %79:fr64, debug-location !739 :: (store 8 into %ir.timecounter); is.c:689:21
  %82:fr64 = COPY %79:fr64, debug-location !742; is.c:690:33
  %82:fr64 = DIVSDrm %82:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !742 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
  %81:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  %82:fr64 = MULSDrr %82:fr64(tied-def 0), %81:fr64, debug-location !743; is.c:690:43
  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %82:fr64, debug-location !744 :: (store 8 into %ir.t_percent); is.c:690:19
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !747; is.c:691:9
  $rdi = LEA64r $rip, 1, $noreg, @is__str_21__Initializ, $noreg, debug-location !747; is.c:691:9
  $xmm0 = COPY %79:fr64, debug-location !747; is.c:691:9
  $xmm1 = COPY %82:fr64, debug-location !747; is.c:691:9
  $al = MOV8ri 2, debug-location !747; is.c:691:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !747; is.c:691:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !747; is.c:691:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !748; is.c:692:23
  PCN_STACKMAP 29, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %79:fr64, %82:fr64, implicit-def dead early-clobber $r11, debug-location !748 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:692:23
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !748; is.c:692:23
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !748; is.c:692:23
  $edi = MOV32r0 implicit-def dead $eflags, debug-location !748; is.c:692:23
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !748; is.c:692:23
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !748; is.c:692:23
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !749; is.c:692:21
  PCN_STACKMAP 30, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !749 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:692:21
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !749; is.c:692:21
  %87:fr64 = COPY killed $xmm0, debug-location !748; is.c:692:23
  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %87:fr64, debug-location !749 :: (store 8 into %ir.timecounter); is.c:692:21
  %89:fr64 = COPY %87:fr64, debug-location !752; is.c:693:33
  %89:fr64 = DIVSDrm %89:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
  %89:fr64 = MULSDrr %89:fr64(tied-def 0), %81:fr64, debug-location !753; is.c:693:43
  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %89:fr64, debug-location !754 :: (store 8 into %ir.t_percent); is.c:693:19
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !757; is.c:694:9
  $rdi = LEA64r $rip, 1, $noreg, @is__str_22__Benchmark, $noreg, debug-location !757; is.c:694:9
  $xmm0 = COPY %87:fr64, debug-location !757; is.c:694:9
  $xmm1 = COPY %89:fr64, debug-location !757; is.c:694:9
  $al = MOV8ri 2, debug-location !757; is.c:694:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !757; is.c:694:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !757; is.c:694:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !758; is.c:695:23
  PCN_STACKMAP 31, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %87:fr64, %89:fr64, implicit-def dead early-clobber $r11, debug-location !758 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:695:23
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !758; is.c:695:23
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !758; is.c:695:23
  $edi = MOV32ri 2, debug-location !758; is.c:695:23
  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !758; is.c:695:23
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !758; is.c:695:23
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !759; is.c:695:21
  PCN_STACKMAP 32, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !759 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:695:21
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !759; is.c:695:21
  %93:fr64 = COPY killed $xmm0, debug-location !758; is.c:695:23
  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %93:fr64, debug-location !759 :: (store 8 into %ir.timecounter); is.c:695:21
  %95:fr64 = COPY %93:fr64, debug-location !762; is.c:696:33
  %95:fr64 = DIVSDrm %95:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !762 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
  %95:fr64 = MULSDrr %95:fr64(tied-def 0), %81:fr64, debug-location !763; is.c:696:43
  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %95:fr64, debug-location !764 :: (store 8 into %ir.t_percent); is.c:696:19
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !767; is.c:697:9
  $rdi = LEA64r $rip, 1, $noreg, @is__str_23__Sorting__, $noreg, debug-location !767; is.c:697:9
  $xmm0 = COPY %93:fr64, debug-location !767; is.c:697:9
  $xmm1 = COPY %95:fr64, debug-location !767; is.c:697:9
  $al = MOV8ri 2, debug-location !767; is.c:697:9
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !767; is.c:697:9
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !767; is.c:697:9
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !768; is.c:698:5
  PCN_STACKMAP 33, 0, %93:fr64, %95:fr64, implicit-def dead early-clobber $r11, debug-location !768; is.c:698:5
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !768; is.c:698:5

bb.28.if.end72:
; predecessors: %bb.24, %bb.27

  $eax = MOV32r0 implicit-def dead $eflags, debug-location !769; is.c:703:5
  RET 0, killed $eax, debug-location !769; is.c:703:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
    To: JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !615; is.c:573:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%4
    SU(1): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(1):   MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Single Issue       : false;
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !615; is.c:573:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
SU(1):   MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
SU(2):   TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41

********** MI Scheduling **********
main:%bb.0 entry
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_2_timer_flag, $noreg, debug-location !611; is.c:573:15
    To: CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !611; is.c:573:15
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_2_timer_flag, $noreg, debug-location !611; is.c:573:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @is__str_3_r_, $noreg, debug-location !611; is.c:573:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !611; is.c:573:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = LEA64r $rip, 1, $noreg, @is__str_3_r_, $noreg, debug-location !611; is.c:573:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_2_timer_flag, $noreg, debug-location !611; is.c:573:15
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_2_timer_flag, $noreg, debug-location !611; is.c:573:15
SU(1):   $rsi = LEA64r $rip, 1, $noreg, @is__str_3_r_, $noreg, debug-location !611; is.c:573:15

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gr64 = COPY $rsi
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %1:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gr32 = COPY $edi
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(5):   MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 0 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %0:gr32 = COPY $edi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %1:gr64 = COPY $rsi
  Ready @1c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gr64 = COPY $rsi
SU(1):   %0:gr32 = COPY $edi
SU(2):   MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
SU(3):   MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
SU(4):   MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
SU(5):   MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14

********** MI Scheduling **********
main:%bb.1 if.then
  From: %7:gr32 = MOV32ri 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %7:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%7
  Single Issue       : false;
SU(1):   MOV32mr %stack.5.timer_on, 1, $noreg, 0, $noreg, %7:gr32, debug-location !619 :: (store 4 into %ir.timer_on); is.c:575:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%7
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %stack.5.timer_on, 1, $noreg, 0, $noreg, %7:gr32, debug-location !619 :: (store 4 into %ir.timer_on); is.c:575:18
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %7:gr32 = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %7:gr32 = MOV32ri 1
SU(1):   MOV32mr %stack.5.timer_on, 1, $noreg, 0, $noreg, %7:gr32, debug-location !619 :: (store 4 into %ir.timer_on); is.c:575:18

********** MI Scheduling **********
main:%bb.6 if.end6
  From: MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !634 :: (store 4 into %ir.i); is.c:588:12
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !634 :: (store 4 into %ir.i); is.c:588:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %107:gr64 = LEA64r $rip, 1, $noreg, @B_test_index_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %109:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %110:gr64 = LEA64r $rip, 1, $noreg, @B_test_rank_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %112:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %112:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %110:gr64 = LEA64r $rip, 1, $noreg, @B_test_rank_array, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %109:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
  Ready @0c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %107:gr64 = LEA64r $rip, 1, $noreg, @B_test_index_array, $noreg
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !634 :: (store 4 into %ir.i); is.c:588:12
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !634 :: (store 4 into %ir.i); is.c:588:12
SU(1):   %107:gr64 = LEA64r $rip, 1, $noreg, @B_test_index_array, $noreg
SU(2):   %109:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
SU(3):   %110:gr64 = LEA64r $rip, 1, $noreg, @B_test_rank_array, $noreg
SU(4):   %112:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg

********** MI Scheduling **********
main:%bb.8 for.body
  From: %114:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
    To: JMP_1 %bb.7, debug-location !652; is.c:588:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %114:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=%114
    SU(4): Data Latency=4 Reg=%114
    SU(3): Data Latency=4 Reg=%114
    SU(2): Data Latency=4 Reg=%114
    SU(1): Data Latency=4 Reg=%114
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %108:gr32 = MOV32rm %107:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%114
  Successors:
    SU(2): Data Latency=4 Reg=%108
  Single Issue       : false;
SU(2):   MOV32mr %109:gr64, 4, %114:gr64_nosp, 0, $noreg, %108:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%108
    SU(0): Data Latency=4 Reg=%114
  Single Issue       : false;
SU(3):   %111:gr32 = MOV32rm %110:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%114
  Successors:
    SU(4): Data Latency=4 Reg=%111
  Single Issue       : false;
SU(4):   MOV32mr %112:gr64, 4, %114:gr64_nosp, 0, $noreg, %111:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%111
    SU(0): Data Latency=4 Reg=%114
  Single Issue       : false;
SU(5):   %113:gr32 = LEA64_32r %114:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%114
  Successors:
    SU(6): Data Latency=1 Reg=%113
  Single Issue       : false;
SU(6):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %113:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%113
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   JMP_1 %bb.7, debug-location !652; is.c:588:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 2 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %113:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 5 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %113:gr32 = LEA64_32r %114:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mr %112:gr64, 4, %114:gr64_nosp, 0, $noreg, %111:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %111:gr32 = MOV32rm %110:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) MOV32mr %109:gr64, 4, %114:gr64_nosp, 0, $noreg, %108:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
  Ready @1c
  BotQ.A TopLatency SU(2) 8c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %108:gr32 = MOV32rm %107:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
  Ready @5c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %114:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
  Ready @9c
  BotQ.A BotLatency SU(0) 8c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %114:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
SU(1):   %108:gr32 = MOV32rm %107:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
SU(2):   MOV32mr %109:gr64, 4, %114:gr64_nosp, 0, $noreg, %108:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
SU(3):   %111:gr32 = MOV32rm %110:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
SU(4):   MOV32mr %112:gr64, 4, %114:gr64_nosp, 0, $noreg, %111:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
SU(5):   %113:gr32 = LEA64_32r %114:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
SU(6):   MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %113:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39

********** MI Scheduling **********
main:%bb.9 for.end
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_6__Iteration, $noreg, debug-location !657; is.c:619:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !657; is.c:619:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_6__Iteration, $noreg, debug-location !657; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 10, debug-location !657; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !657; is.c:619:5
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = MOV32ri 10, debug-location !657; is.c:619:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_6__Iteration, $noreg, debug-location !657; is.c:619:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_6__Iteration, $noreg, debug-location !657; is.c:619:5
SU(1):   $esi = MOV32ri 10, debug-location !657; is.c:619:5
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_5__Size____l, $noreg, debug-location !656; is.c:618:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !656; is.c:618:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_5__Size____l, $noreg, debug-location !656; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri 66, debug-location !656; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !656; is.c:618:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = MOV32ri 66, debug-location !656; is.c:618:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_5__Size____l, $noreg, debug-location !656; is.c:618:5
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_5__Size____l, $noreg, debug-location !656; is.c:618:5
SU(1):   $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
SU(2):   $edx = MOV32ri 66, debug-location !656; is.c:618:5
SU(3):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5

********** MI Scheduling **********
main:%bb.9 for.end
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_4____NAS_Par, $noreg, debug-location !655; is.c:617:5
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !655; is.c:617:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_4____NAS_Par, $noreg, debug-location !655; is.c:617:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !655; is.c:617:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_4____NAS_Par, $noreg, debug-location !655; is.c:617:5
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_4____NAS_Par, $noreg, debug-location !655; is.c:617:5
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5

********** MI Scheduling **********
main:%bb.11 if.end19
  From: %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
    To: CALL64pcrel32 @create_seq, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !662; is.c:625:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%27
  Single Issue       : false;
SU(1):   %28:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%28
  Single Issue       : false;
SU(2):   $xmm0 = COPY %27:fr64, debug-location !662; is.c:625:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%27
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $xmm1 = COPY %28:fr64, debug-location !662; is.c:625:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%28
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @create_seq, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !662; is.c:625:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $xmm1 = COPY %28:fr64, debug-location !662; is.c:625:5
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm0 = COPY %27:fr64, debug-location !662; is.c:625:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %28:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
  Ready @4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
SU(1):   %28:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
SU(2):   $xmm0 = COPY %27:fr64, debug-location !662; is.c:625:5
SU(3):   $xmm1 = COPY %28:fr64, debug-location !662; is.c:625:5

********** MI Scheduling **********
main:%bb.13 if.end22
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_7_____iterat, $noreg, debug-location !669; is.c:638:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !669; is.c:638:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_7_____iterat, $noreg, debug-location !669; is.c:638:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !669; is.c:638:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_7_____iterat, $noreg, debug-location !669; is.c:638:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_7_____iterat, $noreg, debug-location !669; is.c:638:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9

********** MI Scheduling **********
main:%bb.13 if.end22
  From: %30:gr32 = MOV32ri 1
    To: CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !667; is.c:632:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %30:gr32 = MOV32ri 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $edi = MOV32ri 1, debug-location !667; is.c:632:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !667; is.c:632:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 1, debug-location !667; is.c:632:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %30:gr32 = MOV32ri 1
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %30:gr32 = MOV32ri 1
SU(1):   $edi = MOV32ri 1, debug-location !667; is.c:632:5

********** MI Scheduling **********
main:%bb.15 for.body30
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_8__________d, $noreg, debug-location !683; is.c:648:13
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !683; is.c:648:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_8__________d, $noreg, debug-location !683; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $esi = COPY %99:gr32, debug-location !683; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !683; is.c:648:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !683; is.c:648:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !683; is.c:648:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $esi = COPY %99:gr32, debug-location !683; is.c:648:13
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_8__________d, $noreg, debug-location !683; is.c:648:13
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_8__________d, $noreg, debug-location !683; is.c:648:13
SU(1):   $esi = COPY %99:gr32, debug-location !683; is.c:648:13
SU(2):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !683; is.c:648:13

********** MI Scheduling **********
main:%bb.16 for.end34
  From: %38:fr64 = COPY killed $xmm0, debug-location !692; is.c:658:19
    To: JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !696; is.c:662:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %38:fr64 = COPY killed $xmm0, debug-location !692; is.c:658:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%38
  Single Issue       : false;
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %38:fr64, debug-location !693 :: (store 8 into %ir.timecounter); is.c:658:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%38
  Single Issue       : false;
SU(2):   CMP32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !696; is.c:662:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) CMP32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %38:fr64, debug-location !693 :: (store 8 into %ir.timecounter); is.c:658:17
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %38:fr64 = COPY killed $xmm0, debug-location !692; is.c:658:19
  Ready @0c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %38:fr64 = COPY killed $xmm0, debug-location !692; is.c:658:19
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %38:fr64, debug-location !693 :: (store 8 into %ir.timecounter); is.c:658:17
SU(2):   CMP32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9

********** MI Scheduling **********
main:%bb.24 if.end51
  From: %49:gr64 = LEA64r $rip, 1, $noreg, @is__str_18__O3__mcmod, $noreg, debug-location !718; is.c:674:5
    To: CALL64pcrel32 @c_print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !718; is.c:674:5
 RegionInstrs: 27
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=10
Live In: %47 %44 %48 
Live Out: %47 %44 %48 
Live Thru: FR32=2
FR32X=2
GR16=2
  LiveReg: %47
  UpdateRegP: SU(26) $xmm1 = COPY %47:fr64, debug-location !718; is.c:674:5
              to FR32 -1    FR32X -1
  LiveReg: %44
  UpdateRegP: SU(25) $xmm0 = COPY %44:fr64, debug-location !718; is.c:674:5
              to FR32 -1    FR32X -1
  LiveReg: %48
  UpdateRegP: SU(16) MOV32mr $rsp, 1, $noreg, 8, $noreg, %48:gr32, debug-location !718 :: (store 4 into stack + 8); is.c:674:5
              to 
Top Pressure:
FR32=2
FR32X=2
GR16=2
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=4
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=4
GR16=10
Excess PSets: 
SU(0):   %49:gr64 = LEA64r $rip, 1, $noreg, @is__str_18__O3__mcmod, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%49
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %49:gr64, debug-location !718 :: (store 8 into stack + 72); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%49
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %51:gr64 = LEA64r $rip, 1, $noreg, @is__str_17__g__Wall__, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%51
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %51:gr64, debug-location !718 :: (store 8 into stack + 64); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%51
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %52:gr64 = LEA64r $rip, 1, $noreg, @is__str_16__I___commo, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%52
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(5):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %52:gr64, debug-location !718 :: (store 8 into stack + 56); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%52
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(6):   %53:gr64 = LEA64r $rip, 1, $noreg, @is__str_15__lm_, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%53
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(7):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %53:gr64, debug-location !718 :: (store 8 into stack + 48); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%53
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(8):   %54:gr64 = LEA64r $rip, 1, $noreg, @is__str_14___CC__, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%54
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(9):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %54:gr64, debug-location !718 :: (store 8 into stack + 40); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%54
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(10):   %55:gr64 = LEA64r $rip, 1, $noreg, @is__str_13_gcc_, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%55
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(11):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %55:gr64, debug-location !718 :: (store 8 into stack + 32); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%55
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(12):   %56:gr64 = LEA64r $rip, 1, $noreg, @is__str_12_03_Nov_201, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%56
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(13):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %56:gr64, debug-location !718 :: (store 8 into stack + 24); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%56
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(14):   %57:gr64 = LEA64r $rip, 1, $noreg, @is__str_11_3_3_1_, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%57
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(15):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %57:gr64, debug-location !718 :: (store 8 into stack + 16); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%57
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(16):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %48:gr32, debug-location !718 :: (store 4 into stack + 8); is.c:674:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   %58:gr64 = LEA64r $rip, 1, $noreg, @is__str_10_keys_ranke, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(18): Data Latency=1 Reg=%58
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(18):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %58:gr64, debug-location !718 :: (store 8 into stack); is.c:674:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=%58
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(19):   $rdi = LEA64r $rip, 1, $noreg, @is__str_9_IS_, $noreg, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BPSP -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1
  Single Issue       : false;
SU(20):   $esi = MOV32ri 66, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -1    GR32_SIDI -1    GR32_DIBP+GR32_SIDI -1    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -1    GR64_NOREX -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1
  Single Issue       : false;
SU(21):   $edx = MOV32ri 524288, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2    GR32temp+GR32_DIBP -2
  Single Issue       : false;
SU(22):   $ecx = MOV32ri 64, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR32_BSI -2    GR8_ABCD_H+GR32_BSI -1    GR8_ABCD_L+GR32_BSI -1    GR8_NOREX -2    GR32_TC -2    GR32_BPSP+GR32_TC -2    GR64_NOREX -2    GR64_TCW64 -2    GR32_BPSP+GR64_TCW64 -2    GR8 -2    GR8+GR32_DIBP -2    GR8+GR32_BSI -2    GR64_TC+GR64_TCW64 -2    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -2    GR8+GR64_NOREX -2    GR32temp -2
  Single Issue       : false;
SU(23):   $r8d = MOV32r0 implicit-def dead $eflags, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(24):   $r9d = MOV32ri 10, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GR64_TCW64 -1    GR32_BPSP+GR64_TCW64 -1    GR8 -1    GR8+GR32_DIBP -1    GR8+GR32_BSI -1    GR64_TC+GR64_TCW64 -1    GR8+LOW32_ADDR_ACCESS_with_sub_32bit -1    GR8+GR64_NOREX -1    GR32temp -1    GR32temp+GR32_DIBP -1    GR64_TC -1    GR8+GR64_TCW64 -1    GR8+GR64_TC -1    GR32temp+GR64_TC -1    GR8+GR32temp -1    GR16 -1
  Single Issue       : false;
SU(25):   $xmm0 = COPY %44:fr64, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
SU(26):   $xmm1 = COPY %47:fr64, debug-location !718; is.c:674:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FR32 -1    FR32X -1
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @c_print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !718; is.c:674:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=1 Artificial
    SU(23): Ord  Latency=1 Artificial
    SU(22): Ord  Latency=1 Artificial
    SU(21): Ord  Latency=1 Artificial
    SU(20): Ord  Latency=1 Artificial
    SU(19): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 26 25 24 23 22 21 20 19 
  Cand SU(18) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(26) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(26) $xmm1 = COPY %47:fr64, debug-location !718; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=3
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=3
GR16=10
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 19 25 24 23 22 21 20 
  Cand SU(18) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(19) ORDER                              
  Cand SU(25) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(25) $xmm0 = COPY %44:fr64, debug-location !718; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=6
GR32_BPSP+GR64_TCW64=6
GR8=8
GR8+GR32_DIBP=8
GR8+GR32_BSI=8
GR64_TC+GR64_TCW64=8
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=8
GR8+GR64_NOREX=8
GR32temp=8
GR32temp+GR32_DIBP=8
GR64_TC=8
GR8+GR64_TCW64=8
GR8+GR64_TC=8
GR32temp+GR64_TC=8
GR8+GR32temp=8
FR32X=2
GR16=10
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 19 20 24 23 22 21 
  Cand SU(18) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(19) ORDER                              
  Cand SU(20) PHYS-REG                           
  Cand SU(24) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) $r9d = MOV32ri 10, debug-location !718; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=5
GR32_BPSP+GR64_TCW64=5
GR8=7
GR8+GR32_DIBP=7
GR8+GR32_BSI=7
GR64_TC+GR64_TCW64=7
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=7
GR8+GR64_NOREX=7
GR32temp=7
GR32temp+GR32_DIBP=7
GR64_TC=7
GR8+GR64_TCW64=7
GR8+GR64_TC=7
GR32temp+GR64_TC=7
GR8+GR32temp=7
FR32X=2
GR16=9
  Ready @1c
  BotQ.A BotLatency SU(24) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 19 20 21 23 22 
  Cand SU(18) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(19) ORDER                              
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
Pick Bot ORDER     
Scheduling SU(23) $r8d = MOV32r0 implicit-def dead $eflags, debug-location !718; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=3
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=3
GR8_ABCD_L+GR32_BSI=3
GR8_NOREX=5
GR32_TC=4
GR32_BPSP+GR32_TC=4
FR32=2
GR64_NOREX=6
GR64_TCW64=4
GR32_BPSP+GR64_TCW64=4
GR8=6
GR8+GR32_DIBP=6
GR8+GR32_BSI=6
GR64_TC+GR64_TCW64=6
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=6
GR8+GR64_NOREX=6
GR32temp=6
GR32temp+GR32_DIBP=6
GR64_TC=6
GR8+GR64_TCW64=6
GR8+GR64_TC=6
GR32temp+GR64_TC=6
GR8+GR32temp=6
FR32X=2
GR16=8
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 19 20 21 22 
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
  Cand SU(22) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) $ecx = MOV32ri 64, debug-location !718; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=2
GR8_ABCD_L+GR32_BSI=2
GR8_NOREX=3
GR32_TC=2
GR32_BPSP+GR32_TC=2
FR32=2
GR64_NOREX=4
GR64_TCW64=2
GR32_BPSP+GR64_TCW64=2
GR8=4
GR8+GR32_DIBP=4
GR8+GR32_BSI=4
GR64_TC+GR64_TCW64=4
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=4
GR8+GR64_NOREX=4
GR32temp=4
GR32temp+GR32_DIBP=4
GR64_TC=4
GR8+GR64_TCW64=4
GR8+GR64_TC=4
GR32temp+GR64_TC=4
GR8+GR32temp=4
FR32X=2
GR16=6
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 19 20 21 
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(20) PHYS-REG                           
  Cand SU(21) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) $edx = MOV32ri 524288, debug-location !718; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_BSI=1
GR32_SIDI=2
GR32_DIBP+GR32_SIDI=2
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8_ABCD_H+GR32_BSI=1
GR8_ABCD_L+GR32_BSI=1
GR8_NOREX=1
FR32=2
GR64_NOREX=2
GR8=2
GR8+GR32_DIBP=2
GR8+GR32_BSI=2
GR64_TC+GR64_TCW64=2
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=2
GR8+GR64_NOREX=2
GR32temp=2
GR32temp+GR32_DIBP=2
GR64_TC=2
GR8+GR64_TCW64=2
GR8+GR64_TC=2
GR32temp+GR64_TC=2
GR8+GR32temp=2
FR32X=2
GR16=4
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 19 20 
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(20) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(20) $esi = MOV32ri 66, debug-location !718; is.c:674:5
Bottom Pressure:
GR32_BPSP=1
GR32_SIDI=1
GR32_DIBP+GR32_SIDI=1
GR32_DIBP+LOW32_ADDR_ACCESS_with_sub_32bit=1
FR32=2
GR64_NOREX=1
GR8=1
GR8+GR32_DIBP=1
GR8+GR32_BSI=1
GR64_TC+GR64_TCW64=1
GR8+LOW32_ADDR_ACCESS_with_sub_32bit=1
GR8+GR64_NOREX=1
GR32temp=1
GR32temp+GR32_DIBP=1
GR64_TC=1
GR8+GR64_TCW64=1
GR8+GR64_TC=1
GR32temp+GR64_TC=1
GR8+GR32temp=1
FR32X=2
GR16=3
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  GR8_NOREX: 5 <= 6(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 19 
  Cand SU(18) ORDER                              
  Cand SU(19) ORDER                              
Pick Bot ORDER     
Scheduling SU(19) $rdi = LEA64r $rip, 1, $noreg, @is__str_9_IS_, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  GR32_BPSP: 1 <= 2(+ 0 livethru)
  GR32_DIBP+GR32_SIDI: 2 <= 4(+ 0 livethru)
  Ready @1c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 16 15 13 11 9 7 5 3 1 
  Cand SU(18) ORDER                              
Pick Bot ORDER     
Scheduling SU(18) MOV64mr $rsp, 1, $noreg, 0, $noreg, %58:gr64, debug-location !718 :: (store 8 into stack); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %58
  UpdateRegP: SU(18) MOV64mr $rsp, 1, $noreg, 0, $noreg, %58:gr64, debug-location !718 :: (store 8 into stack); is.c:674:5
              to 
  Ready @1c
  BotQ.A TopLatency SU(18) 1c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 13 11 9 7 5 3 17 
  Cand SU(1) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %58:gr64 = LEA64r $rip, 1, $noreg, @is__str_10_keys_ranke, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @2c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 16 15 13 11 9 7 5 3 
  Cand SU(1) ORDER                              
  Cand SU(16) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) MOV32mr $rsp, 1, $noreg, 8, $noreg, %48:gr32, debug-location !718 :: (store 4 into stack + 8); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @2c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 15 13 11 9 7 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(15) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) MOV64mr $rsp, 1, $noreg, 16, $noreg, %57:gr64, debug-location !718 :: (store 8 into stack + 16); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %57
  UpdateRegP: SU(15) MOV64mr $rsp, 1, $noreg, 16, $noreg, %57:gr64, debug-location !718 :: (store 8 into stack + 16); is.c:674:5
              to 
  Ready @2c
  BotQ.A TopLatency SU(15) 1c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 13 11 9 7 14 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(14) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %57:gr64 = LEA64r $rip, 1, $noreg, @is__str_11_3_3_1_, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @3c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 13 11 9 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV64mr $rsp, 1, $noreg, 24, $noreg, %56:gr64, debug-location !718 :: (store 8 into stack + 24); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %56
  UpdateRegP: SU(13) MOV64mr $rsp, 1, $noreg, 24, $noreg, %56:gr64, debug-location !718 :: (store 8 into stack + 24); is.c:674:5
              to 
  Ready @2c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 11 9 12 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %56:gr64 = LEA64r $rip, 1, $noreg, @is__str_12_03_Nov_201, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @3c
BotQ.A @3c
  Retired: 13
  Executed: 3c
  Critical: 3c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 11 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) MOV64mr $rsp, 1, $noreg, 32, $noreg, %55:gr64, debug-location !718 :: (store 8 into stack + 32); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %55
  UpdateRegP: SU(11) MOV64mr $rsp, 1, $noreg, 32, $noreg, %55:gr64, debug-location !718 :: (store 8 into stack + 32); is.c:674:5
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
BotQ.A @3c
  Retired: 14
  Executed: 3c
  Critical: 3c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 10 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %55:gr64 = LEA64r $rip, 1, $noreg, @is__str_13_gcc_, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @4c
BotQ.A @3c
  Retired: 15
  Executed: 3c
  Critical: 3c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 9 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) MOV64mr $rsp, 1, $noreg, 40, $noreg, %54:gr64, debug-location !718 :: (store 8 into stack + 40); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %54
  UpdateRegP: SU(9) MOV64mr $rsp, 1, $noreg, 40, $noreg, %54:gr64, debug-location !718 :: (store 8 into stack + 40); is.c:674:5
              to 
  Ready @3c
  *** Max MOps 4 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 16
  Executed: 4c
  Critical: 4c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 8 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %54:gr64 = LEA64r $rip, 1, $noreg, @is__str_14___CC__, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @4c
BotQ.A @4c
  Retired: 17
  Executed: 4c
  Critical: 4c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 7 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV64mr $rsp, 1, $noreg, 48, $noreg, %53:gr64, debug-location !718 :: (store 8 into stack + 48); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %53
  UpdateRegP: SU(7) MOV64mr $rsp, 1, $noreg, 48, $noreg, %53:gr64, debug-location !718 :: (store 8 into stack + 48); is.c:674:5
              to 
  Ready @4c
  BotQ.A TopLatency SU(7) 1c
BotQ.A @4c
  Retired: 18
  Executed: 4c
  Critical: 4c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 6 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %53:gr64 = LEA64r $rip, 1, $noreg, @is__str_15__lm_, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @5c
BotQ.A @4c
  Retired: 19
  Executed: 4c
  Critical: 4c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 5 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOV64mr $rsp, 1, $noreg, 56, $noreg, %52:gr64, debug-location !718 :: (store 8 into stack + 56); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %52
  UpdateRegP: SU(5) MOV64mr $rsp, 1, $noreg, 56, $noreg, %52:gr64, debug-location !718 :: (store 8 into stack + 56); is.c:674:5
              to 
  Ready @4c
  *** Max MOps 4 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 20
  Executed: 5c
  Critical: 5c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 4 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %52:gr64 = LEA64r $rip, 1, $noreg, @is__str_16__I___commo, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @5c
BotQ.A @5c
  Retired: 21
  Executed: 5c
  Critical: 5c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV64mr $rsp, 1, $noreg, 64, $noreg, %51:gr64, debug-location !718 :: (store 8 into stack + 64); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %51
  UpdateRegP: SU(3) MOV64mr $rsp, 1, $noreg, 64, $noreg, %51:gr64, debug-location !718 :: (store 8 into stack + 64); is.c:674:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(3) 1c
BotQ.A @5c
  Retired: 22
  Executed: 5c
  Critical: 5c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %51:gr64 = LEA64r $rip, 1, $noreg, @is__str_17__g__Wall__, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @6c
BotQ.A @5c
  Retired: 23
  Executed: 5c
  Critical: 5c, 23 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr $rsp, 1, $noreg, 72, $noreg, %49:gr64, debug-location !718 :: (store 8 into stack + 72); is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=4
  LiveReg: %49
  UpdateRegP: SU(1) MOV64mr $rsp, 1, $noreg, 72, $noreg, %49:gr64, debug-location !718 :: (store 8 into stack + 72); is.c:674:5
              to 
  Ready @5c
  *** Max MOps 4 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 24
  Executed: 6c
  Critical: 6c, 24 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %49:gr64 = LEA64r $rip, 1, $noreg, @is__str_18__O3__mcmod, $noreg, debug-location !718; is.c:674:5
Bottom Pressure:
FR32=2
FR32X=2
GR16=2
  Ready @6c
BotQ.A @6c
  Retired: 25
  Executed: 6c
  Critical: 6c, 25 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %49:gr64 = LEA64r $rip, 1, $noreg, @is__str_18__O3__mcmod, $noreg, debug-location !718; is.c:674:5
SU(1):   MOV64mr $rsp, 1, $noreg, 72, $noreg, %49:gr64, debug-location !718 :: (store 8 into stack + 72); is.c:674:5
SU(2):   %51:gr64 = LEA64r $rip, 1, $noreg, @is__str_17__g__Wall__, $noreg, debug-location !718; is.c:674:5
SU(3):   MOV64mr $rsp, 1, $noreg, 64, $noreg, %51:gr64, debug-location !718 :: (store 8 into stack + 64); is.c:674:5
SU(4):   %52:gr64 = LEA64r $rip, 1, $noreg, @is__str_16__I___commo, $noreg, debug-location !718; is.c:674:5
SU(5):   MOV64mr $rsp, 1, $noreg, 56, $noreg, %52:gr64, debug-location !718 :: (store 8 into stack + 56); is.c:674:5
SU(6):   %53:gr64 = LEA64r $rip, 1, $noreg, @is__str_15__lm_, $noreg, debug-location !718; is.c:674:5
SU(7):   MOV64mr $rsp, 1, $noreg, 48, $noreg, %53:gr64, debug-location !718 :: (store 8 into stack + 48); is.c:674:5
SU(8):   %54:gr64 = LEA64r $rip, 1, $noreg, @is__str_14___CC__, $noreg, debug-location !718; is.c:674:5
SU(9):   MOV64mr $rsp, 1, $noreg, 40, $noreg, %54:gr64, debug-location !718 :: (store 8 into stack + 40); is.c:674:5
SU(10):   %55:gr64 = LEA64r $rip, 1, $noreg, @is__str_13_gcc_, $noreg, debug-location !718; is.c:674:5
SU(11):   MOV64mr $rsp, 1, $noreg, 32, $noreg, %55:gr64, debug-location !718 :: (store 8 into stack + 32); is.c:674:5
SU(12):   %56:gr64 = LEA64r $rip, 1, $noreg, @is__str_12_03_Nov_201, $noreg, debug-location !718; is.c:674:5
SU(13):   MOV64mr $rsp, 1, $noreg, 24, $noreg, %56:gr64, debug-location !718 :: (store 8 into stack + 24); is.c:674:5
SU(14):   %57:gr64 = LEA64r $rip, 1, $noreg, @is__str_11_3_3_1_, $noreg, debug-location !718; is.c:674:5
SU(15):   MOV64mr $rsp, 1, $noreg, 16, $noreg, %57:gr64, debug-location !718 :: (store 8 into stack + 16); is.c:674:5
SU(16):   MOV32mr $rsp, 1, $noreg, 8, $noreg, %48:gr32, debug-location !718 :: (store 4 into stack + 8); is.c:674:5
SU(17):   %58:gr64 = LEA64r $rip, 1, $noreg, @is__str_10_keys_ranke, $noreg, debug-location !718; is.c:674:5
SU(18):   MOV64mr $rsp, 1, $noreg, 0, $noreg, %58:gr64, debug-location !718 :: (store 8 into stack); is.c:674:5
SU(19):   $rdi = LEA64r $rip, 1, $noreg, @is__str_9_IS_, $noreg, debug-location !718; is.c:674:5
SU(20):   $esi = MOV32ri 66, debug-location !718; is.c:674:5
SU(21):   $edx = MOV32ri 524288, debug-location !718; is.c:674:5
SU(22):   $ecx = MOV32ri 64, debug-location !718; is.c:674:5
SU(23):   $r8d = MOV32r0 implicit-def dead $eflags, debug-location !718; is.c:674:5
SU(24):   $r9d = MOV32ri 10, debug-location !718; is.c:674:5
SU(25):   $xmm0 = COPY %44:fr64, debug-location !718; is.c:674:5
SU(26):   $xmm1 = COPY %47:fr64, debug-location !718; is.c:674:5

********** MI Scheduling **********
main:%bb.24 if.end51
  From: %44:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
    To: ADJCALLSTACKDOWN64 80, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !718; is.c:674:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %44:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%44
  Single Issue       : false;
SU(1):   %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%47
    SU(2): Out  Latency=0
  Single Issue       : false;
SU(2):   %47:fr64 = DIVSDrr %47:fr64(tied-def 0), %44:fr64, debug-location !715; is.c:676:49
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 10
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%47
    SU(1): Out  Latency=0
    SU(0): Data Latency=4 Reg=%44
  Successors:
    SU(3): Data Latency=10 Reg=%47
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %47:fr64 = DIVSDrm %47:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !716 :: (load 8 from constant-pool); is.c:676:63
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 3
  Predecessors:
    SU(2): Data Latency=10 Reg=%47
    SU(2): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(4):   %48:gr32 = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !717 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 80, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !718; is.c:674:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %48:gr32 = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !717 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Scheduling SU(3) %47:fr64 = DIVSDrm %47:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !716 :: (load 8 from constant-pool); is.c:676:63
  Ready @3c
  BotQ.A TopLatency SU(3) 14c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) %47:fr64 = DIVSDrr %47:fr64(tied-def 0), %44:fr64, debug-location !715; is.c:676:49
  Ready @13c
  BotQ.A BotLatency SU(2) 13c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
  Ready @17c
  BotQ.A BotLatency SU(1) 17c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %44:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
  Ready @17c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %44:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
SU(1):   %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
SU(2):   %47:fr64 = DIVSDrr %47:fr64(tied-def 0), %44:fr64, debug-location !715; is.c:676:49
SU(3):   %47:fr64 = DIVSDrm %47:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !716 :: (load 8 from constant-pool); is.c:676:63
SU(4):   %48:gr32 = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !717 :: (dereferenceable load 4 from @passed_verification); is.c:677:24

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %75:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !732 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
    To: JCC_1 %bb.27, 5, implicit $eflags, debug-location !735; is.c:687:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %75:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !732 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%75
  Single Issue       : false;
SU(1):   %76:fr64 = FsFLD0SD
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%76
  Single Issue       : false;
SU(2):   UCOMISDrr %75:fr64, %76:fr64, implicit-def $eflags, debug-location !735; is.c:687:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%76
    SU(0): Data Latency=4 Reg=%75
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.27, 5, implicit $eflags, debug-location !735; is.c:687:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Scheduling SU(2) UCOMISDrr %75:fr64, %76:fr64, implicit-def $eflags, debug-location !735; is.c:687:13
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %76:fr64 = FsFLD0SD
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %75:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !732 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %75:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !732 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
SU(1):   %76:fr64 = FsFLD0SD
SU(2):   UCOMISDrr %75:fr64, %76:fr64, implicit-def $eflags, debug-location !735; is.c:687:13

********** MI Scheduling **********
main:%bb.25 if.then54
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_20__Total_exe, $noreg, debug-location !731; is.c:686:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !731; is.c:686:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_20__Total_exe, $noreg, debug-location !731; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %71:fr64, debug-location !731; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $al = MOV8ri 1, debug-location !731; is.c:686:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !731; is.c:686:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $al = MOV8ri 1, debug-location !731; is.c:686:9
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %71:fr64, debug-location !731; is.c:686:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_20__Total_exe, $noreg, debug-location !731; is.c:686:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_20__Total_exe, $noreg, debug-location !731; is.c:686:9
SU(1):   $xmm0 = COPY %71:fr64, debug-location !731; is.c:686:9
SU(2):   $al = MOV8ri 1, debug-location !731; is.c:686:9

********** MI Scheduling **********
main:%bb.25 if.then54
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_19__Additiona, $noreg, debug-location !729; is.c:685:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !729; is.c:685:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_19__Additiona, $noreg, debug-location !729; is.c:685:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !729; is.c:685:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !729; is.c:685:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !729; is.c:685:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_19__Additiona, $noreg, debug-location !729; is.c:685:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_19__Additiona, $noreg, debug-location !729; is.c:685:9
SU(1):   dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !729; is.c:685:9

********** MI Scheduling **********
main:%bb.25 if.then54
  From: %66:fr64 = COPY killed $xmm0, debug-location !727; is.c:684:19
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:685:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %66:fr64 = COPY killed $xmm0, debug-location !727; is.c:684:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%66
  Single Issue       : false;
SU(1):   MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %66:fr64, debug-location !728 :: (store 8 into %ir.t_total); is.c:684:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%66
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:685:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %66:fr64, debug-location !728 :: (store 8 into %ir.t_total); is.c:684:17
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %66:fr64 = COPY killed $xmm0, debug-location !727; is.c:684:19
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %66:fr64 = COPY killed $xmm0, debug-location !727; is.c:684:19
SU(1):   MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %66:fr64, debug-location !728 :: (store 8 into %ir.t_total); is.c:684:17

********** MI Scheduling **********
main:%bb.26 if.then59
  From: %77:gr64 = MOV64ri 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %77:gr64 = MOV64ri 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%77
  Single Issue       : false;
SU(1):   MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %77:gr64, debug-location !736 :: (store 8 into %ir.t_total); is.c:688:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%77
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %77:gr64, debug-location !736 :: (store 8 into %ir.t_total); is.c:688:21
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %77:gr64 = MOV64ri 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %77:gr64 = MOV64ri 4607182418800017408
SU(1):   MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %77:gr64, debug-location !736 :: (store 8 into %ir.t_total); is.c:688:21

********** MI Scheduling **********
main:%bb.27 if.end60
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_23__Sorting__, $noreg, debug-location !767; is.c:697:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !767; is.c:697:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_23__Sorting__, $noreg, debug-location !767; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %93:fr64, debug-location !767; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %95:fr64, debug-location !767; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !767; is.c:697:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !767; is.c:697:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !767; is.c:697:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %95:fr64, debug-location !767; is.c:697:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %93:fr64, debug-location !767; is.c:697:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_23__Sorting__, $noreg, debug-location !767; is.c:697:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_23__Sorting__, $noreg, debug-location !767; is.c:697:9
SU(1):   $xmm0 = COPY %93:fr64, debug-location !767; is.c:697:9
SU(2):   $xmm1 = COPY %95:fr64, debug-location !767; is.c:697:9
SU(3):   $al = MOV8ri 2, debug-location !767; is.c:697:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %93:fr64 = COPY killed $xmm0, debug-location !758; is.c:695:23
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !767; is.c:697:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %93:fr64 = COPY killed $xmm0, debug-location !758; is.c:695:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%93
    SU(1): Data Latency=0 Reg=%93
  Single Issue       : false;
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %93:fr64, debug-location !759 :: (store 8 into %ir.timecounter); is.c:695:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%93
  Single Issue       : false;
SU(2):   %95:fr64 = COPY %93:fr64, debug-location !762; is.c:696:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%93
  Successors:
    SU(3): Data Latency=0 Reg=%95
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %95:fr64 = DIVSDrm %95:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !762 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(2): Data Latency=0 Reg=%95
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%95
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %95:fr64 = MULSDrr %95:fr64(tied-def 0), %81:fr64, debug-location !763; is.c:696:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%95
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%95
  Single Issue       : false;
SU(5):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %95:fr64, debug-location !764 :: (store 8 into %ir.t_percent); is.c:696:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%95
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !767; is.c:697:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %95:fr64, debug-location !764 :: (store 8 into %ir.t_percent); is.c:696:19
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %95:fr64 = MULSDrr %95:fr64(tied-def 0), %81:fr64, debug-location !763; is.c:696:43
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %95:fr64 = DIVSDrm %95:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !762 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %95:fr64 = COPY %93:fr64, debug-location !762; is.c:696:33
  Ready @5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %93:fr64, debug-location !759 :: (store 8 into %ir.timecounter); is.c:695:21
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %93:fr64 = COPY killed $xmm0, debug-location !758; is.c:695:23
  Ready @5c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %93:fr64 = COPY killed $xmm0, debug-location !758; is.c:695:23
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %93:fr64, debug-location !759 :: (store 8 into %ir.timecounter); is.c:695:21
SU(2):   %95:fr64 = COPY %93:fr64, debug-location !762; is.c:696:33
SU(3):   %95:fr64 = DIVSDrm %95:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !762 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
SU(4):   %95:fr64 = MULSDrr %95:fr64(tied-def 0), %81:fr64, debug-location !763; is.c:696:43
SU(5):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %95:fr64, debug-location !764 :: (store 8 into %ir.t_percent); is.c:696:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_22__Benchmark, $noreg, debug-location !757; is.c:694:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !757; is.c:694:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_22__Benchmark, $noreg, debug-location !757; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %87:fr64, debug-location !757; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %89:fr64, debug-location !757; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !757; is.c:694:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !757; is.c:694:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !757; is.c:694:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %89:fr64, debug-location !757; is.c:694:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %87:fr64, debug-location !757; is.c:694:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_22__Benchmark, $noreg, debug-location !757; is.c:694:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_22__Benchmark, $noreg, debug-location !757; is.c:694:9
SU(1):   $xmm0 = COPY %87:fr64, debug-location !757; is.c:694:9
SU(2):   $xmm1 = COPY %89:fr64, debug-location !757; is.c:694:9
SU(3):   $al = MOV8ri 2, debug-location !757; is.c:694:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %87:fr64 = COPY killed $xmm0, debug-location !748; is.c:692:23
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !757; is.c:694:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %87:fr64 = COPY killed $xmm0, debug-location !748; is.c:692:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%87
    SU(1): Data Latency=0 Reg=%87
  Single Issue       : false;
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %87:fr64, debug-location !749 :: (store 8 into %ir.timecounter); is.c:692:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%87
  Single Issue       : false;
SU(2):   %89:fr64 = COPY %87:fr64, debug-location !752; is.c:693:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%87
  Successors:
    SU(3): Data Latency=0 Reg=%89
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %89:fr64 = DIVSDrm %89:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(2): Data Latency=0 Reg=%89
    SU(2): Out  Latency=0
  Successors:
    SU(4): Data Latency=4 Reg=%89
    SU(4): Out  Latency=0
  Single Issue       : false;
SU(4):   %89:fr64 = MULSDrr %89:fr64(tied-def 0), %81:fr64, debug-location !753; is.c:693:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%89
    SU(3): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%89
  Single Issue       : false;
SU(5):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %89:fr64, debug-location !754 :: (store 8 into %ir.t_percent); is.c:693:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%89
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !757; is.c:694:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %89:fr64, debug-location !754 :: (store 8 into %ir.t_percent); is.c:693:19
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %89:fr64 = MULSDrr %89:fr64(tied-def 0), %81:fr64, debug-location !753; is.c:693:43
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %89:fr64 = DIVSDrm %89:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %89:fr64 = COPY %87:fr64, debug-location !752; is.c:693:33
  Ready @5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %87:fr64, debug-location !749 :: (store 8 into %ir.timecounter); is.c:692:21
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %87:fr64 = COPY killed $xmm0, debug-location !748; is.c:692:23
  Ready @5c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %87:fr64 = COPY killed $xmm0, debug-location !748; is.c:692:23
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %87:fr64, debug-location !749 :: (store 8 into %ir.timecounter); is.c:692:21
SU(2):   %89:fr64 = COPY %87:fr64, debug-location !752; is.c:693:33
SU(3):   %89:fr64 = DIVSDrm %89:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
SU(4):   %89:fr64 = MULSDrr %89:fr64(tied-def 0), %81:fr64, debug-location !753; is.c:693:43
SU(5):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %89:fr64, debug-location !754 :: (store 8 into %ir.t_percent); is.c:693:19

********** MI Scheduling **********
main:%bb.27 if.end60
  From: $rdi = LEA64r $rip, 1, $noreg, @is__str_21__Initializ, $noreg, debug-location !747; is.c:691:9
    To: CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !747; is.c:691:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_21__Initializ, $noreg, debug-location !747; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %79:fr64, debug-location !747; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $xmm1 = COPY %82:fr64, debug-location !747; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $al = MOV8ri 2, debug-location !747; is.c:691:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !747; is.c:691:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $al = MOV8ri 2, debug-location !747; is.c:691:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $xmm1 = COPY %82:fr64, debug-location !747; is.c:691:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %79:fr64, debug-location !747; is.c:691:9
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = LEA64r $rip, 1, $noreg, @is__str_21__Initializ, $noreg, debug-location !747; is.c:691:9
  Ready @1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   $rdi = LEA64r $rip, 1, $noreg, @is__str_21__Initializ, $noreg, debug-location !747; is.c:691:9
SU(1):   $xmm0 = COPY %79:fr64, debug-location !747; is.c:691:9
SU(2):   $xmm1 = COPY %82:fr64, debug-location !747; is.c:691:9
SU(3):   $al = MOV8ri 2, debug-location !747; is.c:691:9

********** MI Scheduling **********
main:%bb.27 if.end60
  From: %79:fr64 = COPY killed $xmm0, debug-location !738; is.c:689:23
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !747; is.c:691:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %79:fr64 = COPY killed $xmm0, debug-location !738; is.c:689:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%79
    SU(1): Data Latency=0 Reg=%79
  Single Issue       : false;
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %79:fr64, debug-location !739 :: (store 8 into %ir.timecounter); is.c:689:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%79
  Single Issue       : false;
SU(2):   %82:fr64 = COPY %79:fr64, debug-location !742; is.c:690:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%79
  Successors:
    SU(3): Data Latency=0 Reg=%82
    SU(3): Out  Latency=0
  Single Issue       : false;
SU(3):   %82:fr64 = DIVSDrm %82:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !742 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(2): Data Latency=0 Reg=%82
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=4 Reg=%82
    SU(5): Out  Latency=0
  Single Issue       : false;
SU(4):   %81:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%81
  Single Issue       : false;
SU(5):   %82:fr64 = MULSDrr %82:fr64(tied-def 0), %81:fr64, debug-location !743; is.c:690:43
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%81
    SU(3): Data Latency=4 Reg=%82
    SU(3): Out  Latency=0
  Successors:
    SU(6): Data Latency=1 Reg=%82
  Single Issue       : false;
SU(6):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %82:fr64, debug-location !744 :: (store 8 into %ir.t_percent); is.c:690:19
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%82
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !747; is.c:691:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %82:fr64, debug-location !744 :: (store 8 into %ir.t_percent); is.c:690:19
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 5 
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %82:fr64 = MULSDrr %82:fr64(tied-def 0), %81:fr64, debug-location !743; is.c:690:43
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %81:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %82:fr64 = DIVSDrm %82:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !742 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
  Ready @5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %82:fr64 = COPY %79:fr64, debug-location !742; is.c:690:33
  Ready @5c
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %79:fr64, debug-location !739 :: (store 8 into %ir.timecounter); is.c:689:21
  Ready @1c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %79:fr64 = COPY killed $xmm0, debug-location !738; is.c:689:23
  Ready @5c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %79:fr64 = COPY killed $xmm0, debug-location !738; is.c:689:23
SU(1):   MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %79:fr64, debug-location !739 :: (store 8 into %ir.timecounter); is.c:689:21
SU(2):   %82:fr64 = COPY %79:fr64, debug-location !742; is.c:690:33
SU(3):   %82:fr64 = DIVSDrm %82:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !742 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
SU(4):   %81:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
SU(5):   %82:fr64 = MULSDrr %82:fr64(tied-def 0), %81:fr64, debug-location !743; is.c:690:43
SU(6):   MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %82:fr64, debug-location !744 :: (store 8 into %ir.t_percent); is.c:690:19

********** INTERVALS **********
DIL [0B,32r:0)[160r,192r:32)[400r,416r:31)[576r,592r:19)[768r,784r:18)[896r,912r:17)[1024r,1040r:16)[1232r,1248r:15)[1744r,1776r:30)[1920r,1984r:29)[2112r,2160r:28)[2336r,2352r:14)[2704r,2720r:13)[2848r,2864r:12)[3024r,3056r:27)[3152r,3168r:11)[3408r,3456r:20)[3568r,3584r:1)[3744r,3760r:10)[3856r,3872r:9)[4080r,4096r:8)[4384r,4400r:7)[4592r,4608r:6)[5344r,5472r:26)[5648r,5664r:5)[5840r,5872r:25)[6016r,6064r:24)[6336r,6352r:4)[6608r,6672r:23)[6784r,6800r:3)[7024r,7088r:22)[7200r,7216r:2)[7440r,7504r:21)  0@0B-phi 1@3568r 2@7200r 3@6784r 4@6336r 5@5648r 6@4592r 7@4384r 8@4080r 9@3856r 10@3744r 11@3152r 12@2848r 13@2704r 14@2336r 15@1232r 16@1024r 17@896r 18@768r 19@576r 20@3408r 21@7440r 22@7024r 23@6608r 24@6016r 25@5840r 26@5344r 27@3024r 28@2112r 29@1920r 30@1744r 31@400r 32@160r
DIH [0B,32r:0)[160r,192r:32)[400r,416r:31)[576r,592r:19)[768r,784r:18)[896r,912r:17)[1024r,1040r:16)[1232r,1248r:15)[1744r,1776r:30)[1920r,1984r:29)[2112r,2160r:28)[2336r,2352r:14)[2704r,2720r:13)[2848r,2864r:12)[3024r,3056r:27)[3152r,3168r:11)[3408r,3456r:20)[3568r,3584r:1)[3744r,3760r:10)[3856r,3872r:9)[4080r,4096r:8)[4384r,4400r:7)[4592r,4608r:6)[5344r,5472r:26)[5648r,5664r:5)[5840r,5872r:25)[6016r,6064r:24)[6336r,6352r:4)[6608r,6672r:23)[6784r,6800r:3)[7024r,7088r:22)[7200r,7216r:2)[7440r,7504r:21)  0@0B-phi 1@3568r 2@7200r 3@6784r 4@6336r 5@5648r 6@4592r 7@4384r 8@4080r 9@3856r 10@3744r 11@3152r 12@2848r 13@2704r 14@2336r 15@1232r 16@1024r 17@896r 18@768r 19@576r 20@3408r 21@7440r 22@7024r 23@6608r 24@6016r 25@5840r 26@5344r 27@3024r 28@2112r 29@1920r 30@1744r 31@400r 32@160r
HDI [0B,32r:0)[160r,192r:32)[400r,416r:31)[576r,592r:19)[768r,784r:18)[896r,912r:17)[1024r,1040r:16)[1232r,1248r:15)[1744r,1776r:30)[1920r,1984r:29)[2112r,2160r:28)[2336r,2352r:14)[2704r,2720r:13)[2848r,2864r:12)[3024r,3056r:27)[3152r,3168r:11)[3408r,3456r:20)[3568r,3584r:1)[3744r,3760r:10)[3856r,3872r:9)[4080r,4096r:8)[4384r,4400r:7)[4592r,4608r:6)[5344r,5472r:26)[5648r,5664r:5)[5840r,5872r:25)[6016r,6064r:24)[6336r,6352r:4)[6608r,6672r:23)[6784r,6800r:3)[7024r,7088r:22)[7200r,7216r:2)[7440r,7504r:21)  0@0B-phi 1@3568r 2@7200r 3@6784r 4@6336r 5@5648r 6@4592r 7@4384r 8@4080r 9@3856r 10@3744r 11@3152r 12@2848r 13@2704r 14@2336r 15@1232r 16@1024r 17@896r 18@768r 19@576r 20@3408r 21@7440r 22@7024r 23@6608r 24@6016r 25@5840r 26@5344r 27@3024r 28@2112r 29@1920r 30@1744r 31@400r 32@160r
SIL [0B,16r:0)[176r,192r:5)[1936r,1984r:4)[2128r,2160r:3)[3424r,3456r:1)[5360r,5472r:2)  0@0B-phi 1@3424r 2@5360r 3@2128r 4@1936r 5@176r
SIH [0B,16r:0)[176r,192r:5)[1936r,1984r:4)[2128r,2160r:3)[3424r,3456r:1)[5360r,5472r:2)  0@0B-phi 1@3424r 2@5360r 3@2128r 4@1936r 5@176r
HSI [0B,16r:0)[176r,192r:5)[1936r,1984r:4)[2128r,2160r:3)[3424r,3456r:1)[5360r,5472r:2)  0@0B-phi 1@3424r 2@5360r 3@2128r 4@1936r 5@176r
SPL [112r,112d:169)[192r,192d:168)[208r,208d:167)[224r,224d:166)[256r,256d:165)[384r,384d:164)[416r,416d:163)[432r,432d:162)[448r,448d:161)[480r,480d:160)[544r,544d:159)[592r,592d:158)[608r,608d:157)[624r,624d:156)[656r,656d:155)[736r,736d:154)[784r,784d:153)[800r,800d:152)[816r,816d:151)[848r,848d:150)[864r,864d:149)[912r,912d:148)[928r,928d:147)[944r,944d:146)[976r,976d:145)[992r,992d:144)[1040r,1040d:143)[1056r,1056d:142)[1072r,1072d:141)[1104r,1104d:140)[1200r,1200d:139)[1248r,1248d:138)[1264r,1264d:137)[1280r,1280d:136)[1312r,1312d:135)[1680r,1680d:134)[1776r,1776d:133)[1792r,1792d:132)[1808r,1808d:131)[1840r,1840d:130)[1856r,1856d:129)[1984r,1984d:128)[2000r,2000d:127)[2016r,2016d:126)[2048r,2048d:125)[2064r,2064d:124)[2160r,2160d:123)[2176r,2176d:122)[2192r,2192d:121)[2224r,2224d:120)[2304r,2304d:119)[2352r,2352d:118)[2368r,2368d:117)[2384r,2384d:116)[2416r,2416d:115)[2448r,2448d:114)[2528r,2528d:113)[2544r,2544d:112)[2560r,2560d:111)[2592r,2592d:110)[2672r,2672d:109)[2720r,2720d:108)[2736r,2736d:107)[2752r,2752d:106)[2784r,2784d:105)[2816r,2816d:104)[2864r,2864d:103)[2880r,2880d:102)[2896r,2896d:101)[2928r,2928d:100)[2960r,2960d:99)[3056r,3056d:98)[3072r,3072d:97)[3088r,3088d:96)[3120r,3120d:95)[3136r,3136d:94)[3168r,3168d:93)[3184r,3184d:92)[3200r,3200d:91)[3232r,3232d:90)[3376r,3376d:9)[3456r,3456d:8)[3472r,3472d:7)[3488r,3488d:6)[3520r,3520d:5)[3552r,3552d:4)[3584r,3584d:3)[3600r,3600d:2)[3616r,3616d:1)[3648r,3648d:0)[3712r,3712d:89)[3760r,3760d:88)[3776r,3776d:87)[3792r,3792d:86)[3824r,3824d:85)[3840r,3840d:84)[3872r,3872d:83)[3888r,3888d:82)[3904r,3904d:81)[3936r,3936d:80)[4048r,4048d:79)[4096r,4096d:78)[4112r,4112d:77)[4128r,4128d:76)[4160r,4160d:75)[4192r,4192d:74)[4208r,4208d:73)[4224r,4224d:72)[4240r,4240d:71)[4272r,4272d:70)[4352r,4352d:69)[4400r,4400d:68)[4416r,4416d:67)[4432r,4432d:66)[4464r,4464d:65)[4560r,4560d:64)[4608r,4608d:63)[4624r,4624d:62)[4640r,4640d:61)[4672r,4672d:60)[4912r,4912d:59)[5472r,5472d:58)[5488r,5488d:57)[5504r,5504d:56)[5536r,5536d:55)[5616r,5616d:54)[5664r,5664d:53)[5680r,5680d:52)[5696r,5696d:51)[5728r,5728d:50)[5776r,5776d:49)[5872r,5872d:48)[5888r,5888d:47)[5904r,5904d:46)[5936r,5936d:45)[5968r,5968d:44)[6064r,6064d:43)[6080r,6080d:42)[6096r,6096d:41)[6128r,6128d:40)[6304r,6304d:39)[6352r,6352d:38)[6368r,6368d:37)[6384r,6384d:36)[6416r,6416d:35)[6560r,6560d:34)[6672r,6672d:33)[6688r,6688d:32)[6704r,6704d:31)[6736r,6736d:30)[6752r,6752d:29)[6800r,6800d:28)[6816r,6816d:27)[6832r,6832d:26)[6864r,6864d:25)[6992r,6992d:24)[7088r,7088d:23)[7104r,7104d:22)[7120r,7120d:21)[7152r,7152d:20)[7168r,7168d:19)[7216r,7216d:18)[7232r,7232d:17)[7248r,7248d:16)[7280r,7280d:15)[7408r,7408d:14)[7504r,7504d:13)[7520r,7520d:12)[7536r,7536d:11)[7568r,7568d:10)  0@3648r 1@3616r 2@3600r 3@3584r 4@3552r 5@3520r 6@3488r 7@3472r 8@3456r 9@3376r 10@7568r 11@7536r 12@7520r 13@7504r 14@7408r 15@7280r 16@7248r 17@7232r 18@7216r 19@7168r 20@7152r 21@7120r 22@7104r 23@7088r 24@6992r 25@6864r 26@6832r 27@6816r 28@6800r 29@6752r 30@6736r 31@6704r 32@6688r 33@6672r 34@6560r 35@6416r 36@6384r 37@6368r 38@6352r 39@6304r 40@6128r 41@6096r 42@6080r 43@6064r 44@5968r 45@5936r 46@5904r 47@5888r 48@5872r 49@5776r 50@5728r 51@5696r 52@5680r 53@5664r 54@5616r 55@5536r 56@5504r 57@5488r 58@5472r 59@4912r 60@4672r 61@4640r 62@4624r 63@4608r 64@4560r 65@4464r 66@4432r 67@4416r 68@4400r 69@4352r 70@4272r 71@4240r 72@4224r 73@4208r 74@4192r 75@4160r 76@4128r 77@4112r 78@4096r 79@4048r 80@3936r 81@3904r 82@3888r 83@3872r 84@3840r 85@3824r 86@3792r 87@3776r 88@3760r 89@3712r 90@3232r 91@3200r 92@3184r 93@3168r 94@3136r 95@3120r 96@3088r 97@3072r 98@3056r 99@2960r 100@2928r 101@2896r 102@2880r 103@2864r 104@2816r 105@2784r 106@2752r 107@2736r 108@2720r 109@2672r 110@2592r 111@2560r 112@2544r 113@2528r 114@2448r 115@2416r 116@2384r 117@2368r 118@2352r 119@2304r 120@2224r 121@2192r 122@2176r 123@2160r 124@2064r 125@2048r 126@2016r 127@2000r 128@1984r 129@1856r 130@1840r 131@1808r 132@1792r 133@1776r 134@1680r 135@1312r 136@1280r 137@1264r 138@1248r 139@1200r 140@1104r 141@1072r 142@1056r 143@1040r 144@992r 145@976r 146@944r 147@928r 148@912r 149@864r 150@848r 151@816r 152@800r 153@784r 154@736r 155@656r 156@624r 157@608r 158@592r 159@544r 160@480r 161@448r 162@432r 163@416r 164@384r 165@256r 166@224r 167@208r 168@192r 169@112r
SPH [112r,112d:169)[192r,192d:168)[208r,208d:167)[224r,224d:166)[256r,256d:165)[384r,384d:164)[416r,416d:163)[432r,432d:162)[448r,448d:161)[480r,480d:160)[544r,544d:159)[592r,592d:158)[608r,608d:157)[624r,624d:156)[656r,656d:155)[736r,736d:154)[784r,784d:153)[800r,800d:152)[816r,816d:151)[848r,848d:150)[864r,864d:149)[912r,912d:148)[928r,928d:147)[944r,944d:146)[976r,976d:145)[992r,992d:144)[1040r,1040d:143)[1056r,1056d:142)[1072r,1072d:141)[1104r,1104d:140)[1200r,1200d:139)[1248r,1248d:138)[1264r,1264d:137)[1280r,1280d:136)[1312r,1312d:135)[1680r,1680d:134)[1776r,1776d:133)[1792r,1792d:132)[1808r,1808d:131)[1840r,1840d:130)[1856r,1856d:129)[1984r,1984d:128)[2000r,2000d:127)[2016r,2016d:126)[2048r,2048d:125)[2064r,2064d:124)[2160r,2160d:123)[2176r,2176d:122)[2192r,2192d:121)[2224r,2224d:120)[2304r,2304d:119)[2352r,2352d:118)[2368r,2368d:117)[2384r,2384d:116)[2416r,2416d:115)[2448r,2448d:114)[2528r,2528d:113)[2544r,2544d:112)[2560r,2560d:111)[2592r,2592d:110)[2672r,2672d:109)[2720r,2720d:108)[2736r,2736d:107)[2752r,2752d:106)[2784r,2784d:105)[2816r,2816d:104)[2864r,2864d:103)[2880r,2880d:102)[2896r,2896d:101)[2928r,2928d:100)[2960r,2960d:99)[3056r,3056d:98)[3072r,3072d:97)[3088r,3088d:96)[3120r,3120d:95)[3136r,3136d:94)[3168r,3168d:93)[3184r,3184d:92)[3200r,3200d:91)[3232r,3232d:90)[3376r,3376d:9)[3456r,3456d:8)[3472r,3472d:7)[3488r,3488d:6)[3520r,3520d:5)[3552r,3552d:4)[3584r,3584d:3)[3600r,3600d:2)[3616r,3616d:1)[3648r,3648d:0)[3712r,3712d:89)[3760r,3760d:88)[3776r,3776d:87)[3792r,3792d:86)[3824r,3824d:85)[3840r,3840d:84)[3872r,3872d:83)[3888r,3888d:82)[3904r,3904d:81)[3936r,3936d:80)[4048r,4048d:79)[4096r,4096d:78)[4112r,4112d:77)[4128r,4128d:76)[4160r,4160d:75)[4192r,4192d:74)[4208r,4208d:73)[4224r,4224d:72)[4240r,4240d:71)[4272r,4272d:70)[4352r,4352d:69)[4400r,4400d:68)[4416r,4416d:67)[4432r,4432d:66)[4464r,4464d:65)[4560r,4560d:64)[4608r,4608d:63)[4624r,4624d:62)[4640r,4640d:61)[4672r,4672d:60)[4912r,4912d:59)[5472r,5472d:58)[5488r,5488d:57)[5504r,5504d:56)[5536r,5536d:55)[5616r,5616d:54)[5664r,5664d:53)[5680r,5680d:52)[5696r,5696d:51)[5728r,5728d:50)[5776r,5776d:49)[5872r,5872d:48)[5888r,5888d:47)[5904r,5904d:46)[5936r,5936d:45)[5968r,5968d:44)[6064r,6064d:43)[6080r,6080d:42)[6096r,6096d:41)[6128r,6128d:40)[6304r,6304d:39)[6352r,6352d:38)[6368r,6368d:37)[6384r,6384d:36)[6416r,6416d:35)[6560r,6560d:34)[6672r,6672d:33)[6688r,6688d:32)[6704r,6704d:31)[6736r,6736d:30)[6752r,6752d:29)[6800r,6800d:28)[6816r,6816d:27)[6832r,6832d:26)[6864r,6864d:25)[6992r,6992d:24)[7088r,7088d:23)[7104r,7104d:22)[7120r,7120d:21)[7152r,7152d:20)[7168r,7168d:19)[7216r,7216d:18)[7232r,7232d:17)[7248r,7248d:16)[7280r,7280d:15)[7408r,7408d:14)[7504r,7504d:13)[7520r,7520d:12)[7536r,7536d:11)[7568r,7568d:10)  0@3648r 1@3616r 2@3600r 3@3584r 4@3552r 5@3520r 6@3488r 7@3472r 8@3456r 9@3376r 10@7568r 11@7536r 12@7520r 13@7504r 14@7408r 15@7280r 16@7248r 17@7232r 18@7216r 19@7168r 20@7152r 21@7120r 22@7104r 23@7088r 24@6992r 25@6864r 26@6832r 27@6816r 28@6800r 29@6752r 30@6736r 31@6704r 32@6688r 33@6672r 34@6560r 35@6416r 36@6384r 37@6368r 38@6352r 39@6304r 40@6128r 41@6096r 42@6080r 43@6064r 44@5968r 45@5936r 46@5904r 47@5888r 48@5872r 49@5776r 50@5728r 51@5696r 52@5680r 53@5664r 54@5616r 55@5536r 56@5504r 57@5488r 58@5472r 59@4912r 60@4672r 61@4640r 62@4624r 63@4608r 64@4560r 65@4464r 66@4432r 67@4416r 68@4400r 69@4352r 70@4272r 71@4240r 72@4224r 73@4208r 74@4192r 75@4160r 76@4128r 77@4112r 78@4096r 79@4048r 80@3936r 81@3904r 82@3888r 83@3872r 84@3840r 85@3824r 86@3792r 87@3776r 88@3760r 89@3712r 90@3232r 91@3200r 92@3184r 93@3168r 94@3136r 95@3120r 96@3088r 97@3072r 98@3056r 99@2960r 100@2928r 101@2896r 102@2880r 103@2864r 104@2816r 105@2784r 106@2752r 107@2736r 108@2720r 109@2672r 110@2592r 111@2560r 112@2544r 113@2528r 114@2448r 115@2416r 116@2384r 117@2368r 118@2352r 119@2304r 120@2224r 121@2192r 122@2176r 123@2160r 124@2064r 125@2048r 126@2016r 127@2000r 128@1984r 129@1856r 130@1840r 131@1808r 132@1792r 133@1776r 134@1680r 135@1312r 136@1280r 137@1264r 138@1248r 139@1200r 140@1104r 141@1072r 142@1056r 143@1040r 144@992r 145@976r 146@944r 147@928r 148@912r 149@864r 150@848r 151@816r 152@800r 153@784r 154@736r 155@656r 156@624r 157@608r 158@592r 159@544r 160@480r 161@448r 162@432r 163@416r 164@384r 165@256r 166@224r 167@208r 168@192r 169@112r
HSP [112r,112d:169)[192r,192d:168)[208r,208d:167)[224r,224d:166)[256r,256d:165)[384r,384d:164)[416r,416d:163)[432r,432d:162)[448r,448d:161)[480r,480d:160)[544r,544d:159)[592r,592d:158)[608r,608d:157)[624r,624d:156)[656r,656d:155)[736r,736d:154)[784r,784d:153)[800r,800d:152)[816r,816d:151)[848r,848d:150)[864r,864d:149)[912r,912d:148)[928r,928d:147)[944r,944d:146)[976r,976d:145)[992r,992d:144)[1040r,1040d:143)[1056r,1056d:142)[1072r,1072d:141)[1104r,1104d:140)[1200r,1200d:139)[1248r,1248d:138)[1264r,1264d:137)[1280r,1280d:136)[1312r,1312d:135)[1680r,1680d:134)[1776r,1776d:133)[1792r,1792d:132)[1808r,1808d:131)[1840r,1840d:130)[1856r,1856d:129)[1984r,1984d:128)[2000r,2000d:127)[2016r,2016d:126)[2048r,2048d:125)[2064r,2064d:124)[2160r,2160d:123)[2176r,2176d:122)[2192r,2192d:121)[2224r,2224d:120)[2304r,2304d:119)[2352r,2352d:118)[2368r,2368d:117)[2384r,2384d:116)[2416r,2416d:115)[2448r,2448d:114)[2528r,2528d:113)[2544r,2544d:112)[2560r,2560d:111)[2592r,2592d:110)[2672r,2672d:109)[2720r,2720d:108)[2736r,2736d:107)[2752r,2752d:106)[2784r,2784d:105)[2816r,2816d:104)[2864r,2864d:103)[2880r,2880d:102)[2896r,2896d:101)[2928r,2928d:100)[2960r,2960d:99)[3056r,3056d:98)[3072r,3072d:97)[3088r,3088d:96)[3120r,3120d:95)[3136r,3136d:94)[3168r,3168d:93)[3184r,3184d:92)[3200r,3200d:91)[3232r,3232d:90)[3376r,3376d:9)[3456r,3456d:8)[3472r,3472d:7)[3488r,3488d:6)[3520r,3520d:5)[3552r,3552d:4)[3584r,3584d:3)[3600r,3600d:2)[3616r,3616d:1)[3648r,3648d:0)[3712r,3712d:89)[3760r,3760d:88)[3776r,3776d:87)[3792r,3792d:86)[3824r,3824d:85)[3840r,3840d:84)[3872r,3872d:83)[3888r,3888d:82)[3904r,3904d:81)[3936r,3936d:80)[4048r,4048d:79)[4096r,4096d:78)[4112r,4112d:77)[4128r,4128d:76)[4160r,4160d:75)[4192r,4192d:74)[4208r,4208d:73)[4224r,4224d:72)[4240r,4240d:71)[4272r,4272d:70)[4352r,4352d:69)[4400r,4400d:68)[4416r,4416d:67)[4432r,4432d:66)[4464r,4464d:65)[4560r,4560d:64)[4608r,4608d:63)[4624r,4624d:62)[4640r,4640d:61)[4672r,4672d:60)[4912r,4912d:59)[5472r,5472d:58)[5488r,5488d:57)[5504r,5504d:56)[5536r,5536d:55)[5616r,5616d:54)[5664r,5664d:53)[5680r,5680d:52)[5696r,5696d:51)[5728r,5728d:50)[5776r,5776d:49)[5872r,5872d:48)[5888r,5888d:47)[5904r,5904d:46)[5936r,5936d:45)[5968r,5968d:44)[6064r,6064d:43)[6080r,6080d:42)[6096r,6096d:41)[6128r,6128d:40)[6304r,6304d:39)[6352r,6352d:38)[6368r,6368d:37)[6384r,6384d:36)[6416r,6416d:35)[6560r,6560d:34)[6672r,6672d:33)[6688r,6688d:32)[6704r,6704d:31)[6736r,6736d:30)[6752r,6752d:29)[6800r,6800d:28)[6816r,6816d:27)[6832r,6832d:26)[6864r,6864d:25)[6992r,6992d:24)[7088r,7088d:23)[7104r,7104d:22)[7120r,7120d:21)[7152r,7152d:20)[7168r,7168d:19)[7216r,7216d:18)[7232r,7232d:17)[7248r,7248d:16)[7280r,7280d:15)[7408r,7408d:14)[7504r,7504d:13)[7520r,7520d:12)[7536r,7536d:11)[7568r,7568d:10)  0@3648r 1@3616r 2@3600r 3@3584r 4@3552r 5@3520r 6@3488r 7@3472r 8@3456r 9@3376r 10@7568r 11@7536r 12@7520r 13@7504r 14@7408r 15@7280r 16@7248r 17@7232r 18@7216r 19@7168r 20@7152r 21@7120r 22@7104r 23@7088r 24@6992r 25@6864r 26@6832r 27@6816r 28@6800r 29@6752r 30@6736r 31@6704r 32@6688r 33@6672r 34@6560r 35@6416r 36@6384r 37@6368r 38@6352r 39@6304r 40@6128r 41@6096r 42@6080r 43@6064r 44@5968r 45@5936r 46@5904r 47@5888r 48@5872r 49@5776r 50@5728r 51@5696r 52@5680r 53@5664r 54@5616r 55@5536r 56@5504r 57@5488r 58@5472r 59@4912r 60@4672r 61@4640r 62@4624r 63@4608r 64@4560r 65@4464r 66@4432r 67@4416r 68@4400r 69@4352r 70@4272r 71@4240r 72@4224r 73@4208r 74@4192r 75@4160r 76@4128r 77@4112r 78@4096r 79@4048r 80@3936r 81@3904r 82@3888r 83@3872r 84@3840r 85@3824r 86@3792r 87@3776r 88@3760r 89@3712r 90@3232r 91@3200r 92@3184r 93@3168r 94@3136r 95@3120r 96@3088r 97@3072r 98@3056r 99@2960r 100@2928r 101@2896r 102@2880r 103@2864r 104@2816r 105@2784r 106@2752r 107@2736r 108@2720r 109@2672r 110@2592r 111@2560r 112@2544r 113@2528r 114@2448r 115@2416r 116@2384r 117@2368r 118@2352r 119@2304r 120@2224r 121@2192r 122@2176r 123@2160r 124@2064r 125@2048r 126@2016r 127@2000r 128@1984r 129@1856r 130@1840r 131@1808r 132@1792r 133@1776r 134@1680r 135@1312r 136@1280r 137@1264r 138@1248r 139@1200r 140@1104r 141@1072r 142@1056r 143@1040r 144@992r 145@976r 146@944r 147@928r 148@912r 149@864r 150@848r 151@816r 152@800r 153@784r 154@736r 155@656r 156@624r 157@608r 158@592r 159@544r 160@480r 161@448r 162@432r 163@416r 164@384r 165@256r 166@224r 167@208r 168@192r 169@112r
%0 [32r,64r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%4 [272r,304r:0)  0@272r weight:0.000000e+00
%5 [368r,464r:0)  0@368r weight:0.000000e+00
%7 [496r,512r:0)  0@496r weight:0.000000e+00
%27 [2464r,2496r:0)  0@2464r weight:0.000000e+00
%28 [2480r,2512r:0)  0@2480r weight:0.000000e+00
%30 [2832r,3248r:0)  0@2832r weight:0.000000e+00
%38 [3952r,3968r:0)  0@3952r weight:0.000000e+00
%44 [4800r,5520r:0)  0@4800r weight:0.000000e+00
%47 [4816r,4848r:2)[4848r,4880r:0)[4880r,5520r:1)  0@4848r 1@4880r 2@4816r weight:0.000000e+00
%48 [4896r,5520r:0)  0@4896r weight:0.000000e+00
%49 [4928r,4960r:0)  0@4928r weight:0.000000e+00
%51 [4976r,4992r:0)  0@4976r weight:0.000000e+00
%52 [5008r,5024r:0)  0@5008r weight:0.000000e+00
%53 [5040r,5056r:0)  0@5040r weight:0.000000e+00
%54 [5072r,5088r:0)  0@5072r weight:0.000000e+00
%55 [5104r,5120r:0)  0@5104r weight:0.000000e+00
%56 [5136r,5152r:0)  0@5136r weight:0.000000e+00
%57 [5168r,5184r:0)  0@5168r weight:0.000000e+00
%58 [5216r,5232r:0)  0@5216r weight:0.000000e+00
%66 [5744r,5760r:0)  0@5744r weight:0.000000e+00
%71 [5952r,6112r:0)  0@5952r weight:0.000000e+00
%75 [6144r,6176r:0)  0@6144r weight:0.000000e+00
%76 [6160r,6176r:0)  0@6160r weight:0.000000e+00
%77 [6256r,6272r:0)  0@6256r weight:0.000000e+00
%79 [6432r,6720r:0)  0@6432r weight:0.000000e+00
%81 [6496r,7376r:0)  0@6496r weight:0.000000e+00
%82 [6464r,6480r:2)[6480r,6528r:0)[6528r,6720r:1)  0@6480r 1@6528r 2@6464r weight:0.000000e+00
%87 [6880r,7136r:0)  0@6880r weight:0.000000e+00
%89 [6912r,6928r:2)[6928r,6960r:0)[6960r,7136r:1)  0@6928r 1@6960r 2@6912r weight:0.000000e+00
%93 [7296r,7552r:0)  0@7296r weight:0.000000e+00
%95 [7328r,7344r:2)[7344r,7376r:0)[7376r,7552r:1)  0@7344r 1@7376r 2@7328r weight:0.000000e+00
%99 [3360r,3504r:0)  0@3360r weight:0.000000e+00
%104 [3536r,3632r:0)  0@3536r weight:0.000000e+00
%107 [1360r,1664B:0)  0@1360r weight:0.000000e+00
%108 [1536r,1552r:0)  0@1536r weight:0.000000e+00
%109 [1376r,1664B:0)  0@1376r weight:0.000000e+00
%110 [1392r,1664B:0)  0@1392r weight:0.000000e+00
%111 [1568r,1584r:0)  0@1568r weight:0.000000e+00
%112 [1408r,1664B:0)  0@1408r weight:0.000000e+00
%113 [1616r,1632r:0)  0@1616r weight:0.000000e+00
%114 [1504r,1616r:0)  0@1504r weight:0.000000e+00
RegMasks: 192r 416r 592r 784r 912r 1040r 1248r 1776r 1984r 2160r 2352r 2528r 2720r 2864r 3056r 3168r 3456r 3584r 3760r 3872r 4096r 4208r 4400r 4608r 5472r 5664r 5872r 6064r 6352r 6672r 6800r 7088r 7216r 7504r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=8, align=8, at location [SP+8]
  fi#7: size=8, align=8, at location [SP+8]
  fi#8: size=8, align=8, at location [SP+8]
  fi#9: size=8, align=8, at location [SP+8]
Constant Pool:
  cp#0: 0x41B2B9B0A1000000, align=8
  cp#1: 0x41D2309CE5400000, align=8
  cp#2: 0x41B4000000000000, align=8
  cp#3: 1.000000e+06, align=8
  cp#4: 1.000000e+02, align=8
Function Live Ins: $edi in %0, $rsi in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $edi, $rsi
16B	  %1:gr64 = COPY $rsi
32B	  %0:gr32 = COPY $edi
48B	  MOV32mi %stack.0.retval, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.retval)
64B	  MOV32mr %stack.1.argc.addr, 1, $noreg, 0, $noreg, %0:gr32 :: (store 4 into %ir.argc.addr)
80B	  MOV64mr %stack.2.argv.addr, 1, $noreg, 0, $noreg, %1:gr64 :: (store 8 into %ir.argv.addr)
96B	  MOV32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, debug-location !610 :: (store 4 into %ir.timer_on); is.c:572:14
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
160B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_2_timer_flag, $noreg, debug-location !611; is.c:573:15
176B	  $rsi = LEA64r $rip, 1, $noreg, @is__str_3_r_, $noreg, debug-location !611; is.c:573:15
192B	  CALL64pcrel32 @fopen, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !611; is.c:573:15
208B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !611; is.c:573:15
224B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !613; is.c:573:13
240B	  PCN_STACKMAP 0, 0, 0, %stack.7.fp, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !613 :: (load 8 from %stack.7.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:573:13
256B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !613; is.c:573:13
272B	  %4:gr64 = COPY killed $rax, debug-location !611; is.c:573:15
288B	  MOV64mr %stack.7.fp, 1, $noreg, 0, $noreg, %4:gr64, debug-location !613 :: (store 8 into %ir.fp); is.c:573:13
304B	  TEST64rr %4:gr64, %4:gr64, implicit-def $eflags, debug-location !614; is.c:573:41
320B	  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !615; is.c:573:9
336B	  JMP_1 %bb.1, debug-location !615; is.c:573:9

352B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

368B	  %5:gr64 = MOV64rm %stack.7.fp, 1, $noreg, 0, $noreg, debug-location !616 :: (dereferenceable load 8 from %ir.fp); is.c:574:16
384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !618; is.c:574:9
400B	  $rdi = COPY %5:gr64, debug-location !618; is.c:574:9
416B	  CALL64pcrel32 @fclose, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !618; is.c:574:9
432B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !618; is.c:574:9
448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !619; is.c:575:18
464B	  PCN_STACKMAP 1, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %5:gr64, implicit-def dead early-clobber $r11, debug-location !619 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:575:18
480B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !619; is.c:575:18
496B	  %7:gr32 = MOV32ri 1
512B	  MOV32mr %stack.5.timer_on, 1, $noreg, 0, $noreg, %7:gr32, debug-location !619 :: (store 4 into %ir.timer_on); is.c:575:18

528B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

544B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !621; is.c:577:5
576B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !621; is.c:577:5
592B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !621; is.c:577:5
608B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !621; is.c:577:5
624B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !622; is.c:578:9
640B	  PCN_STACKMAP 2, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !622 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:578:9
656B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !622; is.c:578:9
672B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !622 :: (dereferenceable load 4 from %ir.timer_on); is.c:578:9
688B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !624; is.c:578:9
704B	  JMP_1 %bb.3, debug-location !624; is.c:578:9

720B	bb.3.if.then2:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !625; is.c:579:9
768B	  $edi = MOV32ri 1, debug-location !625; is.c:579:9
784B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !625; is.c:579:9
800B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !625; is.c:579:9
816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
832B	  PCN_STACKMAP 3, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !627 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:580:9
848B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
864B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
896B	  $edi = MOV32ri 2, debug-location !627; is.c:580:9
912B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !627; is.c:580:9
928B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !627; is.c:580:9
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
960B	  PCN_STACKMAP 4, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !628 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:581:9
976B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
1024B	  $edi = MOV32ri 3, debug-location !628; is.c:581:9
1040B	  CALL64pcrel32 @timer_clear, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !628; is.c:581:9
1056B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !628; is.c:581:9
1072B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !629; is.c:582:5
1088B	  PCN_STACKMAP 5, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !629 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:582:5
1104B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !629; is.c:582:5

1120B	bb.4.if.end3:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.5(0x50000000), %bb.6(0x30000000); %bb.5(62.50%), %bb.6(37.50%)

1136B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !630 :: (dereferenceable load 4 from %ir.timer_on); is.c:584:9
1152B	  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !632; is.c:584:9
1168B	  JMP_1 %bb.5, debug-location !632; is.c:584:9

1184B	bb.5.if.then5:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1200B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9
1232B	  $edi = MOV32ri 3, debug-location !633; is.c:585:9
1248B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !633; is.c:585:9
1264B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9
1280B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9
1296B	  PCN_STACKMAP 6, 0, 0, %stack.3.i, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !633 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:585:9
1312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !633; is.c:585:9

1328B	bb.6.if.end6:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1344B	  MOV32mi %stack.3.i, 1, $noreg, 0, $noreg, 0, debug-location !634 :: (store 4 into %ir.i); is.c:588:12
1360B	  %107:gr64 = LEA64r $rip, 1, $noreg, @B_test_index_array, $noreg
1376B	  %109:gr64 = LEA64r $rip, 1, $noreg, @test_index_array, $noreg
1392B	  %110:gr64 = LEA64r $rip, 1, $noreg, @B_test_rank_array, $noreg
1408B	  %112:gr64 = LEA64r $rip, 1, $noreg, @test_rank_array, $noreg

1424B	bb.7.for.cond:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

1440B	  CMP32mi8 %stack.3.i, 1, $noreg, 0, $noreg, 4, implicit-def $eflags, debug-location !639 :: (dereferenceable load 4 from %ir.i); is.c:588:19
1456B	  JCC_1 %bb.9, 15, implicit killed $eflags, debug-location !640; is.c:588:5
1472B	  JMP_1 %bb.8, debug-location !640; is.c:588:5

1488B	bb.8.for.body:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1504B	  %114:gr64_nosp = MOVSX64rm32 %stack.3.i, 1, $noreg, 0, $noreg, debug-location !641 :: (dereferenceable load 4 from %ir.i); is.c:603:54
1536B	  %108:gr32 = MOV32rm %107:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !642 :: (load 4 from %ir.arrayidx); is.c:603:35
1552B	  MOV32mr %109:gr64, 4, %114:gr64_nosp, 0, $noreg, %108:gr32, debug-location !645 :: (store 4 into %ir.arrayidx9); is.c:603:33
1568B	  %111:gr32 = MOV32rm %110:gr64, 4, %114:gr64_nosp, 0, $noreg, debug-location !647 :: (load 4 from %ir.arrayidx11); is.c:604:34
1584B	  MOV32mr %112:gr64, 4, %114:gr64_nosp, 0, $noreg, %111:gr32, debug-location !650 :: (store 4 into %ir.arrayidx13); is.c:604:32
1616B	  %113:gr32 = LEA64_32r %114:gr64_nosp, 1, $noreg, 1, $noreg, debug-location !651; is.c:588:39
1632B	  MOV32mr %stack.3.i, 1, $noreg, 0, $noreg, %113:gr32, debug-location !651 :: (store 4 into %ir.i); is.c:588:39
1648B	  JMP_1 %bb.7, debug-location !652; is.c:588:5

1664B	bb.9.for.end:
	; predecessors: %bb.7
	  successors: %bb.10(0x50000000), %bb.11(0x30000000); %bb.10(62.50%), %bb.11(37.50%)

1680B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !655; is.c:617:5
1744B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_4____NAS_Par, $noreg, debug-location !655; is.c:617:5
1760B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !655; is.c:617:5
1776B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !655; is.c:617:5
1792B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !655; is.c:617:5
1808B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
1824B	  PCN_STACKMAP 7, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !656 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:618:5
1840B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
1856B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
1920B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_5__Size____l, $noreg, debug-location !656; is.c:618:5
1936B	  $rsi = MOV32ri64 33554432, debug-location !656; is.c:618:5
1952B	  $edx = MOV32ri 66, debug-location !656; is.c:618:5
1968B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !656; is.c:618:5
1984B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $edx, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !656; is.c:618:5
2000B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !656; is.c:618:5
2016B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
2032B	  PCN_STACKMAP 8, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !657 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:619:5
2048B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
2064B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
2112B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_6__Iteration, $noreg, debug-location !657; is.c:619:5
2128B	  $esi = MOV32ri 10, debug-location !657; is.c:619:5
2144B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !657; is.c:619:5
2160B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !657; is.c:619:5
2176B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !657; is.c:619:5
2192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !658; is.c:621:9
2208B	  PCN_STACKMAP 9, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !658 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:621:9
2224B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !658; is.c:621:9
2240B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !658 :: (dereferenceable load 4 from %ir.timer_on); is.c:621:9
2256B	  JCC_1 %bb.11, 4, implicit killed $eflags, debug-location !660; is.c:621:9
2272B	  JMP_1 %bb.10, debug-location !660; is.c:621:9

2288B	bb.10.if.then18:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

2304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9
2336B	  $edi = MOV32ri 1, debug-location !661; is.c:622:9
2352B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !661; is.c:622:9
2368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9
2384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9
2400B	  PCN_STACKMAP 10, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !661 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:622:9
2416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !661; is.c:622:9

2432B	bb.11.if.end19:
	; predecessors: %bb.9, %bb.10
	  successors: %bb.12(0x50000000), %bb.13(0x30000000); %bb.12(62.50%), %bb.13(37.50%)

2448B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !662; is.c:625:5
2464B	  %27:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 8 from constant-pool)
2480B	  %28:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load 8 from constant-pool)
2496B	  $xmm0 = COPY %27:fr64, debug-location !662; is.c:625:5
2512B	  $xmm1 = COPY %28:fr64, debug-location !662; is.c:625:5
2528B	  CALL64pcrel32 @create_seq, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !662; is.c:625:5
2544B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !662; is.c:625:5
2560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !663; is.c:627:9
2576B	  PCN_STACKMAP 11, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !663 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:627:9
2592B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !663; is.c:627:9
2608B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !663 :: (dereferenceable load 4 from %ir.timer_on); is.c:627:9
2624B	  JCC_1 %bb.13, 4, implicit killed $eflags, debug-location !665; is.c:627:9
2640B	  JMP_1 %bb.12, debug-location !665; is.c:627:9

2656B	bb.12.if.then21:
	; predecessors: %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9
2704B	  $edi = MOV32ri 1, debug-location !666; is.c:628:9
2720B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !666; is.c:628:9
2736B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9
2752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9
2768B	  PCN_STACKMAP 12, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !666 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:628:9
2784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !666; is.c:628:9

2800B	bb.13.if.end22:
	; predecessors: %bb.11, %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

2816B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !667; is.c:632:5
2832B	  %30:gr32 = MOV32ri 1
2848B	  $edi = MOV32ri 1, debug-location !667; is.c:632:5
2864B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !667; is.c:632:5
2880B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !667; is.c:632:5
2896B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !668; is.c:635:25
2912B	  PCN_STACKMAP 13, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !668 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:635:25
2928B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !668; is.c:635:25
2944B	  MOV32mi $rip, 1, $noreg, @passed_verification, $noreg, 0, debug-location !668 :: (store 4 into @passed_verification); is.c:635:25
2960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !669; is.c:638:9
3024B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_7_____iterat, $noreg, debug-location !669; is.c:638:9
3040B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !669; is.c:638:9
3056B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !669; is.c:638:9
3072B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !669; is.c:638:9
3088B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
3104B	  PCN_STACKMAP 14, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !671 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:641:5
3120B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
3136B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
3152B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !671; is.c:641:5
3168B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !671; is.c:641:5
3184B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !671; is.c:641:5
3200B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !672; is.c:644:5
3216B	  PCN_STACKMAP 15, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !672 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:644:5
3232B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !672; is.c:644:5
3248B	  MOV32mr %stack.4.iteration, 1, $noreg, 0, $noreg, %30:gr32, debug-location !673 :: (store 4 into %ir.iteration); is.c:646:20

3280B	bb.14.for.cond28:
	; predecessors: %bb.13, %bb.15
	  successors: %bb.15(0x7c000000), %bb.16(0x04000000); %bb.15(96.88%), %bb.16(3.12%)

3296B	  CMP32mi8 %stack.4.iteration, 1, $noreg, 0, $noreg, 10, implicit-def $eflags, debug-location !678 :: (dereferenceable load 4 from %ir.iteration); is.c:646:35
3312B	  JCC_1 %bb.16, 15, implicit killed $eflags, debug-location !679; is.c:646:5
3328B	  JMP_1 %bb.15, debug-location !679; is.c:646:5

3344B	bb.15.for.body30:
	; predecessors: %bb.14
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3360B	  %99:gr32 = MOV32rm %stack.4.iteration, 1, $noreg, 0, $noreg, debug-location !680 :: (dereferenceable load 4 from %ir.iteration); is.c:648:36
3376B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !683; is.c:648:13
3408B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_8__________d, $noreg, debug-location !683; is.c:648:13
3424B	  $esi = COPY %99:gr32, debug-location !683; is.c:648:13
3440B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !683; is.c:648:13
3456B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !683; is.c:648:13
3472B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !683; is.c:648:13
3488B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !684; is.c:650:14
3504B	  PCN_STACKMAP 16, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %99:gr32, implicit-def dead early-clobber $r11, debug-location !684 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:650:14
3520B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !684; is.c:650:14
3536B	  %104:gr32 = MOV32rm %stack.4.iteration, 1, $noreg, 0, $noreg, debug-location !684 :: (dereferenceable load 4 from %ir.iteration); is.c:650:14
3552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !685; is.c:650:9
3568B	  $edi = COPY %104:gr32, debug-location !685; is.c:650:9
3584B	  CALL64pcrel32 @rank, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !685; is.c:650:9
3600B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !685; is.c:650:9
3616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !686; is.c:652:5
3632B	  PCN_STACKMAP 17, 0, 0, %stack.4.iteration, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %104:gr32, implicit-def dead early-clobber $r11, debug-location !686 :: (load 8 from %stack.4.iteration, align 4), (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:652:5
3648B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !686; is.c:652:5
3664B	  INC32m %stack.4.iteration, 1, $noreg, 0, $noreg, implicit-def dead $eflags, debug-location !687 :: (store 4 into %ir.iteration), (dereferenceable load 4 from %ir.iteration); is.c:646:63
3680B	  JMP_1 %bb.14, debug-location !688; is.c:646:5

3696B	bb.16.for.end34:
	; predecessors: %bb.14
	  successors: %bb.17(0x50000000), %bb.18(0x30000000); %bb.17(62.50%), %bb.18(37.50%)

3712B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !691; is.c:657:5
3744B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !691; is.c:657:5
3760B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !691; is.c:657:5
3776B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !691; is.c:657:5
3792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !692; is.c:658:19
3808B	  PCN_STACKMAP 18, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !692 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:19
3824B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !692; is.c:658:19
3840B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !692; is.c:658:19
3856B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !692; is.c:658:19
3872B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !692; is.c:658:19
3888B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !692; is.c:658:19
3904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !693; is.c:658:17
3920B	  PCN_STACKMAP 19, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !693 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:658:17
3936B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !693; is.c:658:17
3952B	  %38:fr64 = COPY killed $xmm0, debug-location !692; is.c:658:19
3968B	  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %38:fr64, debug-location !693 :: (store 8 into %ir.timecounter); is.c:658:17
3984B	  CMP32mi %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !694 :: (dereferenceable load 4 from %ir.timer_on); is.c:662:9
4000B	  JCC_1 %bb.18, 4, implicit killed $eflags, debug-location !696; is.c:662:9
4016B	  JMP_1 %bb.17, debug-location !696; is.c:662:9

4032B	bb.17.if.then41:
	; predecessors: %bb.16
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

4048B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !697; is.c:663:9
4080B	  $edi = MOV32ri 2, debug-location !697; is.c:663:9
4096B	  CALL64pcrel32 @timer_start, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !697; is.c:663:9
4112B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !697; is.c:663:9
4128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !697; is.c:663:9
4144B	  PCN_STACKMAP 20, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !697 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:663:9
4160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !697; is.c:663:9

4176B	bb.18.if.end42:
	; predecessors: %bb.16, %bb.17
	  successors: %bb.19(0x50000000), %bb.20(0x30000000); %bb.19(62.50%), %bb.20(37.50%)

4192B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !698; is.c:664:5
4208B	  CALL64pcrel32 @full_verify, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !698; is.c:664:5
4224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !698; is.c:664:5
4240B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !699; is.c:665:9
4256B	  PCN_STACKMAP 21, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !699 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:665:9
4272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !699; is.c:665:9
4288B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !699 :: (dereferenceable load 4 from %ir.timer_on); is.c:665:9
4304B	  JCC_1 %bb.20, 4, implicit killed $eflags, debug-location !701; is.c:665:9
4320B	  JMP_1 %bb.19, debug-location !701; is.c:665:9

4336B	bb.19.if.then44:
	; predecessors: %bb.18
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

4352B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !702; is.c:666:9
4384B	  $edi = MOV32ri 2, debug-location !702; is.c:666:9
4400B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !702; is.c:666:9
4416B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !702; is.c:666:9
4432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !702; is.c:666:9
4448B	  PCN_STACKMAP 22, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !702 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:666:9
4464B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !702; is.c:666:9

4480B	bb.20.if.end45:
	; predecessors: %bb.18, %bb.19
	  successors: %bb.21(0x50000000), %bb.22(0x30000000); %bb.21(62.50%), %bb.22(37.50%)

4496B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !703 :: (dereferenceable load 4 from %ir.timer_on); is.c:668:9
4512B	  JCC_1 %bb.22, 4, implicit killed $eflags, debug-location !705; is.c:668:9
4528B	  JMP_1 %bb.21, debug-location !705; is.c:668:9

4544B	bb.21.if.then47:
	; predecessors: %bb.20
	  successors: %bb.22(0x80000000); %bb.22(100.00%)

4560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !706; is.c:669:9
4592B	  $edi = MOV32ri 3, debug-location !706; is.c:669:9
4608B	  CALL64pcrel32 @timer_stop, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, debug-location !706; is.c:669:9
4624B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !706; is.c:669:9
4640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !706; is.c:669:9
4656B	  PCN_STACKMAP 23, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, implicit-def dead early-clobber $r11, debug-location !706 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:669:9
4672B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !706; is.c:669:9

4688B	bb.22.if.end48:
	; predecessors: %bb.20, %bb.21
	  successors: %bb.23(0x40000000), %bb.24(0x40000000); %bb.23(50.00%), %bb.24(50.00%)

4704B	  CMP32mi8 $rip, 1, $noreg, @passed_verification, $noreg, 51, implicit-def $eflags, debug-location !709 :: (dereferenceable load 4 from @passed_verification); is.c:672:29
4720B	  JCC_1 %bb.24, 4, implicit killed $eflags, debug-location !710; is.c:672:9
4736B	  JMP_1 %bb.23, debug-location !710; is.c:672:9

4752B	bb.23.if.then50:
	; predecessors: %bb.22
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

4768B	  MOV32mi $rip, 1, $noreg, @passed_verification, $noreg, 0, debug-location !711 :: (store 4 into @passed_verification); is.c:673:29

4784B	bb.24.if.end51:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x50000000), %bb.28(0x30000000); %bb.25(62.50%), %bb.28(37.50%)

4800B	  %44:fr64 = MOVSDrm_alt %stack.6.timecounter, 1, $noreg, 0, $noreg, debug-location !713 :: (dereferenceable load 8 from %ir.timecounter); is.c:675:69
4816B	  %47:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg :: (load 8 from constant-pool)
4848B	  %47:fr64 = DIVSDrr %47:fr64(tied-def 0), %44:fr64, debug-location !715; is.c:676:49
4880B	  %47:fr64 = DIVSDrm %47:fr64(tied-def 0), $rip, 1, $noreg, %const.3, $noreg, debug-location !716 :: (load 8 from constant-pool); is.c:676:63
4896B	  %48:gr32 = MOV32rm $rip, 1, $noreg, @passed_verification, $noreg, debug-location !717 :: (dereferenceable load 4 from @passed_verification); is.c:677:24
4912B	  ADJCALLSTACKDOWN64 80, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !718; is.c:674:5
4928B	  %49:gr64 = LEA64r $rip, 1, $noreg, @is__str_18__O3__mcmod, $noreg, debug-location !718; is.c:674:5
4960B	  MOV64mr $rsp, 1, $noreg, 72, $noreg, %49:gr64, debug-location !718 :: (store 8 into stack + 72); is.c:674:5
4976B	  %51:gr64 = LEA64r $rip, 1, $noreg, @is__str_17__g__Wall__, $noreg, debug-location !718; is.c:674:5
4992B	  MOV64mr $rsp, 1, $noreg, 64, $noreg, %51:gr64, debug-location !718 :: (store 8 into stack + 64); is.c:674:5
5008B	  %52:gr64 = LEA64r $rip, 1, $noreg, @is__str_16__I___commo, $noreg, debug-location !718; is.c:674:5
5024B	  MOV64mr $rsp, 1, $noreg, 56, $noreg, %52:gr64, debug-location !718 :: (store 8 into stack + 56); is.c:674:5
5040B	  %53:gr64 = LEA64r $rip, 1, $noreg, @is__str_15__lm_, $noreg, debug-location !718; is.c:674:5
5056B	  MOV64mr $rsp, 1, $noreg, 48, $noreg, %53:gr64, debug-location !718 :: (store 8 into stack + 48); is.c:674:5
5072B	  %54:gr64 = LEA64r $rip, 1, $noreg, @is__str_14___CC__, $noreg, debug-location !718; is.c:674:5
5088B	  MOV64mr $rsp, 1, $noreg, 40, $noreg, %54:gr64, debug-location !718 :: (store 8 into stack + 40); is.c:674:5
5104B	  %55:gr64 = LEA64r $rip, 1, $noreg, @is__str_13_gcc_, $noreg, debug-location !718; is.c:674:5
5120B	  MOV64mr $rsp, 1, $noreg, 32, $noreg, %55:gr64, debug-location !718 :: (store 8 into stack + 32); is.c:674:5
5136B	  %56:gr64 = LEA64r $rip, 1, $noreg, @is__str_12_03_Nov_201, $noreg, debug-location !718; is.c:674:5
5152B	  MOV64mr $rsp, 1, $noreg, 24, $noreg, %56:gr64, debug-location !718 :: (store 8 into stack + 24); is.c:674:5
5168B	  %57:gr64 = LEA64r $rip, 1, $noreg, @is__str_11_3_3_1_, $noreg, debug-location !718; is.c:674:5
5184B	  MOV64mr $rsp, 1, $noreg, 16, $noreg, %57:gr64, debug-location !718 :: (store 8 into stack + 16); is.c:674:5
5200B	  MOV32mr $rsp, 1, $noreg, 8, $noreg, %48:gr32, debug-location !718 :: (store 4 into stack + 8); is.c:674:5
5216B	  %58:gr64 = LEA64r $rip, 1, $noreg, @is__str_10_keys_ranke, $noreg, debug-location !718; is.c:674:5
5232B	  MOV64mr $rsp, 1, $noreg, 0, $noreg, %58:gr64, debug-location !718 :: (store 8 into stack); is.c:674:5
5344B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_9_IS_, $noreg, debug-location !718; is.c:674:5
5360B	  $esi = MOV32ri 66, debug-location !718; is.c:674:5
5376B	  $edx = MOV32ri 524288, debug-location !718; is.c:674:5
5392B	  $ecx = MOV32ri 64, debug-location !718; is.c:674:5
5408B	  $r8d = MOV32r0 implicit-def dead $eflags, debug-location !718; is.c:674:5
5424B	  $r9d = MOV32ri 10, debug-location !718; is.c:674:5
5440B	  $xmm0 = COPY %44:fr64, debug-location !718; is.c:674:5
5456B	  $xmm1 = COPY %47:fr64, debug-location !718; is.c:674:5
5472B	  CALL64pcrel32 @c_print_results, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit killed $edx, implicit killed $ecx, implicit killed $r8d, implicit killed $r9d, implicit killed $xmm0, implicit killed $xmm1, implicit-def $rsp, implicit-def $ssp, debug-location !718; is.c:674:5
5488B	  ADJCALLSTACKUP64 80, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !718; is.c:674:5
5504B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !719; is.c:681:9
5520B	  PCN_STACKMAP 24, 0, %47:fr64, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, 0, %stack.5.timer_on, 0, %44:fr64, %48:gr32, implicit-def dead early-clobber $r11, debug-location !719 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter), (load 8 from %stack.5.timer_on, align 4); is.c:681:9
5536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !719; is.c:681:9
5552B	  CMP32mi8 %stack.5.timer_on, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !719 :: (dereferenceable load 4 from %ir.timer_on); is.c:681:9
5568B	  JCC_1 %bb.28, 4, implicit killed $eflags, debug-location !721; is.c:681:9
5584B	  JMP_1 %bb.25, debug-location !721; is.c:681:9

5600B	bb.25.if.then54:
	; predecessors: %bb.24
	  successors: %bb.26(0x50000000), %bb.27(0x30000000); %bb.26(62.50%), %bb.27(37.50%)

5616B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:684:19
5648B	  $edi = MOV32ri 3, debug-location !727; is.c:684:19
5664B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !727; is.c:684:19
5680B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !727; is.c:684:19
5696B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !728; is.c:684:17
5712B	  PCN_STACKMAP 25, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !728 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:684:17
5728B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !728; is.c:684:17
5744B	  %66:fr64 = COPY killed $xmm0, debug-location !727; is.c:684:19
5760B	  MOVSDmr %stack.8.t_total, 1, $noreg, 0, $noreg, %66:fr64, debug-location !728 :: (store 8 into %ir.t_total); is.c:684:17
5776B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:685:9
5840B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_19__Additiona, $noreg, debug-location !729; is.c:685:9
5856B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al, debug-location !729; is.c:685:9
5872B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !729; is.c:685:9
5888B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !729; is.c:685:9
5904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !730; is.c:686:45
5920B	  PCN_STACKMAP 26, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !730 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:686:45
5936B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !730; is.c:686:45
5952B	  %71:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !730 :: (dereferenceable load 8 from %ir.t_total); is.c:686:45
5968B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !731; is.c:686:9
6016B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_20__Total_exe, $noreg, debug-location !731; is.c:686:9
6032B	  $xmm0 = COPY %71:fr64, debug-location !731; is.c:686:9
6048B	  $al = MOV8ri 1, debug-location !731; is.c:686:9
6064B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !731; is.c:686:9
6080B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !731; is.c:686:9
6096B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !732; is.c:687:13
6112B	  PCN_STACKMAP 27, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %71:fr64, implicit-def dead early-clobber $r11, debug-location !732 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:687:13
6128B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !732; is.c:687:13
6144B	  %75:fr64 = MOVSDrm_alt %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !732 :: (dereferenceable load 8 from %ir.t_total); is.c:687:13
6160B	  %76:fr64 = FsFLD0SD
6176B	  UCOMISDrr %75:fr64, %76:fr64, implicit-def $eflags, debug-location !735; is.c:687:13
6192B	  JCC_1 %bb.27, 5, implicit $eflags, debug-location !735; is.c:687:13
6208B	  JCC_1 %bb.27, 10, implicit killed $eflags, debug-location !735; is.c:687:13
6224B	  JMP_1 %bb.26, debug-location !735; is.c:687:13

6240B	bb.26.if.then59:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

6256B	  %77:gr64 = MOV64ri 4607182418800017408
6272B	  MOV64mr %stack.8.t_total, 1, $noreg, 0, $noreg, %77:gr64, debug-location !736 :: (store 8 into %ir.t_total); is.c:688:21

6288B	bb.27.if.end60:
	; predecessors: %bb.25, %bb.26
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

6304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !738; is.c:689:23
6336B	  $edi = MOV32ri 1, debug-location !738; is.c:689:23
6352B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !738; is.c:689:23
6368B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !738; is.c:689:23
6384B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !739; is.c:689:21
6400B	  PCN_STACKMAP 28, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !739 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:689:21
6416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !739; is.c:689:21
6432B	  %79:fr64 = COPY killed $xmm0, debug-location !738; is.c:689:23
6448B	  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %79:fr64, debug-location !739 :: (store 8 into %ir.timecounter); is.c:689:21
6464B	  %82:fr64 = COPY %79:fr64, debug-location !742; is.c:690:33
6480B	  %82:fr64 = DIVSDrm %82:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !742 :: (dereferenceable load 8 from %ir.t_total); is.c:690:33
6496B	  %81:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.4, $noreg :: (load 8 from constant-pool)
6528B	  %82:fr64 = MULSDrr %82:fr64(tied-def 0), %81:fr64, debug-location !743; is.c:690:43
6544B	  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %82:fr64, debug-location !744 :: (store 8 into %ir.t_percent); is.c:690:19
6560B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !747; is.c:691:9
6608B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_21__Initializ, $noreg, debug-location !747; is.c:691:9
6624B	  $xmm0 = COPY %79:fr64, debug-location !747; is.c:691:9
6640B	  $xmm1 = COPY %82:fr64, debug-location !747; is.c:691:9
6656B	  $al = MOV8ri 2, debug-location !747; is.c:691:9
6672B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !747; is.c:691:9
6688B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !747; is.c:691:9
6704B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !748; is.c:692:23
6720B	  PCN_STACKMAP 29, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %79:fr64, %82:fr64, implicit-def dead early-clobber $r11, debug-location !748 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:692:23
6736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !748; is.c:692:23
6752B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !748; is.c:692:23
6784B	  $edi = MOV32r0 implicit-def dead $eflags, debug-location !748; is.c:692:23
6800B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !748; is.c:692:23
6816B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !748; is.c:692:23
6832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !749; is.c:692:21
6848B	  PCN_STACKMAP 30, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !749 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:692:21
6864B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !749; is.c:692:21
6880B	  %87:fr64 = COPY killed $xmm0, debug-location !748; is.c:692:23
6896B	  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %87:fr64, debug-location !749 :: (store 8 into %ir.timecounter); is.c:692:21
6912B	  %89:fr64 = COPY %87:fr64, debug-location !752; is.c:693:33
6928B	  %89:fr64 = DIVSDrm %89:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !752 :: (dereferenceable load 8 from %ir.t_total); is.c:693:33
6960B	  %89:fr64 = MULSDrr %89:fr64(tied-def 0), %81:fr64, debug-location !753; is.c:693:43
6976B	  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %89:fr64, debug-location !754 :: (store 8 into %ir.t_percent); is.c:693:19
6992B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !757; is.c:694:9
7024B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_22__Benchmark, $noreg, debug-location !757; is.c:694:9
7040B	  $xmm0 = COPY %87:fr64, debug-location !757; is.c:694:9
7056B	  $xmm1 = COPY %89:fr64, debug-location !757; is.c:694:9
7072B	  $al = MOV8ri 2, debug-location !757; is.c:694:9
7088B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !757; is.c:694:9
7104B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !757; is.c:694:9
7120B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !758; is.c:695:23
7136B	  PCN_STACKMAP 31, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, %87:fr64, %89:fr64, implicit-def dead early-clobber $r11, debug-location !758 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:695:23
7152B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !758; is.c:695:23
7168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !758; is.c:695:23
7200B	  $edi = MOV32ri 2, debug-location !758; is.c:695:23
7216B	  CALL64pcrel32 @timer_read, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0, debug-location !758; is.c:695:23
7232B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !758; is.c:695:23
7248B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !759; is.c:695:21
7264B	  PCN_STACKMAP 32, 0, 0, %stack.9.t_percent, 0, 0, %stack.8.t_total, 0, 0, %stack.6.timecounter, 0, implicit-def dead early-clobber $r11, debug-location !759 :: (load 8 from %stack.9.t_percent), (load 8 from %stack.8.t_total), (load 8 from %stack.6.timecounter); is.c:695:21
7280B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !759; is.c:695:21
7296B	  %93:fr64 = COPY killed $xmm0, debug-location !758; is.c:695:23
7312B	  MOVSDmr %stack.6.timecounter, 1, $noreg, 0, $noreg, %93:fr64, debug-location !759 :: (store 8 into %ir.timecounter); is.c:695:21
7328B	  %95:fr64 = COPY %93:fr64, debug-location !762; is.c:696:33
7344B	  %95:fr64 = DIVSDrm %95:fr64(tied-def 0), %stack.8.t_total, 1, $noreg, 0, $noreg, debug-location !762 :: (dereferenceable load 8 from %ir.t_total); is.c:696:33
7376B	  %95:fr64 = MULSDrr %95:fr64(tied-def 0), %81:fr64, debug-location !763; is.c:696:43
7392B	  MOVSDmr %stack.9.t_percent, 1, $noreg, 0, $noreg, %95:fr64, debug-location !764 :: (store 8 into %ir.t_percent); is.c:696:19
7408B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !767; is.c:697:9
7440B	  $rdi = LEA64r $rip, 1, $noreg, @is__str_23__Sorting__, $noreg, debug-location !767; is.c:697:9
7456B	  $xmm0 = COPY %93:fr64, debug-location !767; is.c:697:9
7472B	  $xmm1 = COPY %95:fr64, debug-location !767; is.c:697:9
7488B	  $al = MOV8ri 2, debug-location !767; is.c:697:9
7504B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r15 $r15b $r15bh $r15d $r15w $r15wh>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit killed $xmm1, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !767; is.c:697:9
7520B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !767; is.c:697:9
7536B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp, debug-location !768; is.c:698:5
7552B	  PCN_STACKMAP 33, 0, %93:fr64, %95:fr64, implicit-def dead early-clobber $r11, debug-location !768; is.c:698:5
7568B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !768; is.c:698:5

7584B	bb.28.if.end72:
	; predecessors: %bb.24, %bb.27

7616B	  $eax = MOV32r0 implicit-def dead $eflags, debug-location !769; is.c:703:5
7632B	  RET 0, killed $eax, debug-location !769; is.c:703:5

# End machine code for function main.

