Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=1, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=96, align=16, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=96, align=16, at location [SP]
  fi#11: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: 3.000000e+00, align=8
  cp#2: 2.000000e+00, align=8
  cp#3: -1.092330e+04, align=8
  cp#4: 2.777090e+04, align=8
  cp#5: -1.440100e+05, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1
  %1:gpr64 = COPY $x1
  %0:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag
  $x1 = MOVaddr target-flags(aarch64-page) @lu__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_1_r_
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 0, 0, 0, %stack.3.Class, 0, 0, %stack.11.fp, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.11.fp), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %5:gpr64 = COPY killed $x8
  STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)
  CBZX %5:gpr64, %bb.2
  B %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %9:gpr32 = MOVi32imm 1
  STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  %10:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_2_total_
  STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
  %11:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_3_rhsx_
  STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  %12:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_4_rhsy_
  STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
  %13:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_5_rhsz_
  STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  %14:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_6_rhs_
  STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
  %15:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_7_jacld_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_7_jacld_
  STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  %16:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_8_blts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_8_blts_
  STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
  %17:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_9_jacu_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_9_jacu_
  STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  %18:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_10_buts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_10_buts_
  STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
  %19:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_11_add_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_11_add_
  STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  %20:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_12_l2norm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_12_l2norm_
  STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
  %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %21:gpr64
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 1, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %21:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @read_input, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 2, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @domain, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 3, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setcoeff, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 4, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setbv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 5, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setiv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 6, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @erhs, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 7, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @ssor, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 8, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setbv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 9, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setiv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 10, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %24:gpr64temp = ADRP target-flags(aarch64-page) @itmax
  %25:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %25:gpr32
  BL @ssor, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 11, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %25:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @error, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 12, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @pintgr, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 13, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %26:gpr64temp = ADRP target-flags(aarch64-page) @frc
  %27:fpr64 = LDRDui %26:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
  $x1 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
  $d0 = COPY %27:fpr64
  $x2 = ADDXri %stack.3.Class, 0, 0
  $x3 = ADDXri %stack.4.verified, 0, 0
  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $x2, implicit killed $x3, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 14, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %27:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  undef %33.ssub:fpr64 = LDRSui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
  %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
  %38:gpr64temp = ADRP target-flags(aarch64-page) @nx0
  %39:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  %40:fpr64 = SCVTFUWDri %39:gpr32
  %41:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %42:fpr64 = LDRDui %41:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
  %44:gpr64temp = ADRP target-flags(aarch64-page) @ny0
  %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  %46:fpr64 = SCVTFUWDri %45:gpr32
  %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
  %48:gpr64temp = ADRP target-flags(aarch64-page) @nz0
  %49:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  %50:fpr64 = SCVTFUWDri %49:gpr32
  %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
  %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
  %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
  %54:fpr64 = SCVTFUWDri %53:gpr32
  %55:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  %57:fpr64 = FDIVDrr %54:fpr64, %56:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  $d0 = COPY %57:fpr64
  $d1 = COPY %59:fpr64
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 15, 0, 0, %stack.3.Class, 0, %37:fpr64, %57:fpr64, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, %51:fpr64, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %60:fpr64 = COPY killed $d0
  %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  %63:fpr64 = FMULDrr %60:fpr64, %62:fpr64
  %64:fpr64 = FADDDrr %51:fpr64, %63:fpr64
  %65:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  %66:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
  %68:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  %69:gpr32 = nsw ADDWrr %67:gpr32, %68:gpr32
  %70:fpr64 = SCVTFUWDri %69:gpr32
  %71:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64
  %74:fpr64 = FDIVDrr %73:fpr64, %56:fpr64
  %75:fpr64 = FADDDrr %64:fpr64, %74:fpr64
  %76:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  %77:fpr64 = LDRDui %76:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  %78:fpr64 = FADDDrr %75:fpr64, %77:fpr64
  %79:fpr64 = FMULDrr %37:fpr64, %78:fpr64
  %80:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
  %81:fpr64 = LDRDui %80:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  %82:gpr64temp = ADRP target-flags(aarch64-page) %const.6
  %83:fpr64 = LDRDui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  %84:fpr64 = FMULDrr %81:fpr64, %83:fpr64
  %85:fpr64 = FDIVDrr %79:fpr64, %84:fpr64
  STRDui %85:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
  %86:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  %87:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  %88:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
  %89:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_23__none__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__
  STRXui %89:gpr64, $sp, 10 :: (store 8 into stack + 80)
  %91:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_22__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_22__O3__mcmod
  STRXui %91:gpr64, $sp, 9 :: (store 8 into stack + 72)
  %92:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_21__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_21__g__Wall__
  STRXui %92:gpr64, $sp, 8 :: (store 8 into stack + 64)
  %93:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_20__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_20__I___commo
  STRXui %93:gpr64, $sp, 7 :: (store 8 into stack + 56)
  %94:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_19__lm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_19__lm_
  STRXui %94:gpr64, $sp, 6 :: (store 8 into stack + 48)
  %95:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_18___CC__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_18___CC__
  STRXui %95:gpr64, $sp, 5 :: (store 8 into stack + 40)
  %96:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_17_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_17_gcc_
  STRXui %96:gpr64, $sp, 4 :: (store 8 into stack + 32)
  %97:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_16_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_16_03_Nov_201
  STRXui %97:gpr64, $sp, 3 :: (store 8 into stack + 24)
  %98:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_15_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_15_3_3_1_
  STRXui %98:gpr64, $sp, 2 :: (store 8 into stack + 16)
  STRWui %88:gpr32, $sp, 2 :: (store 4 into stack + 8)
  %99:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_14___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_14___________
  STRXui %99:gpr64, $sp, 0 :: (store 8 into stack)
  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_13_LU_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_13_LU_
  $w1 = COPY %86:gpr32
  $w2 = COPY %65:gpr32
  $w3 = COPY %66:gpr32
  $w4 = COPY %68:gpr32
  $w5 = COPY %87:gpr32
  $d0 = COPY %81:fpr64
  $d1 = COPY %85:fpr64
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp
  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 16, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %86:gpr32, %65:gpr32, %66:gpr32, %68:gpr32, %87:gpr32, %81:fpr64, %85:fpr64, %88:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %101:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %102:gpr32 = LDRWui %101:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %102:gpr32, %bb.14
  B %bb.4

bb.4.if.then31:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %103:gpr32 = MOVi32imm 1
  STRWui %103:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  %158:gpr64sp = ADDXri %stack.8.trecs, 0, 0

bb.5.for.cond:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %104:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %104:gpr32common, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.7, implicit killed $nzcv
  B %bb.6

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %155:gpr32 = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %155:gpr32
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 17, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %155:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %156:fpr64 = COPY killed $d0
  %157:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  STRDroX %156:fpr64, %158:gpr64sp, %157:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
  %159:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
  STRWui %160:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  B %bb.5

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)

  %106:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
  %107:fpr64 = LDRDui %106:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  STRDui %107:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  FCMPDri %107:fpr64, implicit-def $nzcv
  Bcc 1, %bb.9, implicit killed $nzcv
  B %bb.8

bb.8.if.then38:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %108:gpr64 = MOVi64imm 4607182418800017408
  STRXui %108:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)

bb.9.if.end39:
; predecessors: %bb.7, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_24___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_24___SECTION_
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 18, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %111:gpr32 = MOVi32imm 1
  STRWui %111:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  %117:gpr64sp = ADDXri %stack.10.t_names, 0, 0
  %119:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  %121:gpr64temp = ADRP target-flags(aarch64-page) %const.7
  %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)

bb.10.for.cond41:
; predecessors: %bb.9, %bb.13
  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)

  %112:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %112:gpr32common, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit killed $nzcv
  B %bb.11

bb.11.for.body44:
; predecessors: %bb.10
  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

  %115:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  %116:gpr64 = UBFMXri %115:gpr64, 61, 60
  %118:gpr64 = LDRXroX %117:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
  %120:fpr64 = LDRDroX %119:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  %123:fpr64 = FMULDrr %120:fpr64, %122:fpr64
  %124:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  %125:fpr64 = FDIVDrr %123:fpr64, %124:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_25_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_
  $x1 = COPY %118:gpr64
  $d0 = COPY %120:fpr64
  $d1 = COPY %125:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 19, 0, %125:fpr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %118:gpr64, %120:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %128:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %128:gpr32common, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.13, implicit killed $nzcv
  B %bb.12

bb.12.if.then56:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %130:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  %131:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
  %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
  %133:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  %134:fpr64 = FADDDrr %132:fpr64, %133:fpr64
  STRDui %134:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  %137:fpr64 = FMULDrr %134:fpr64, %122:fpr64
  %138:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  %139:fpr64 = FDIVDrr %137:fpr64, %138:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
  $x1 = MOVaddr target-flags(aarch64-page) @lu__str_27_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_27_sub_rhs_
  $d0 = COPY %134:fpr64
  $d1 = COPY %139:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 20, 0, %139:fpr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %134:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %143:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  %145:fpr64 = LDRDroX %119:gpr64sp, %143:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
  %146:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
  %147:fpr64 = FSUBDrr %145:fpr64, %146:fpr64
  STRDui %147:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  %148:fpr64 = FMULDrr %147:fpr64, %122:fpr64
  %149:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  %150:fpr64 = FDIVDrr %148:fpr64, %149:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
  $x1 = MOVaddr target-flags(aarch64-page) @lu__str_28_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_28_rest_rhs_
  $d0 = COPY %147:fpr64
  $d1 = COPY %150:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 21, 0, %150:fpr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %147:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.13.for.inc72:
; predecessors: %bb.11, %bb.12
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %153:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
  STRWui %154:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  B %bb.10

bb.14.if.end75:
; predecessors: %bb.3, %bb.10

  $w8 = COPY $wzr
  RET_ReallyLR implicit killed $w8

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %5:gpr64 = COPY killed $x8
    To: CBZX %5:gpr64, %bb.2
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gpr64 = COPY killed $x8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%5
    SU(1): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(1):   STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Single Issue       : false;
ExitSU:   CBZX %5:gpr64, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:gpr64 = COPY killed $x8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gpr64 = COPY killed $x8
SU(1):   STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.0 entry
  From: $x0 = MOVaddr target-flags(aarch64-page) @lu__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @lu__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_1_r_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @lu__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_1_r_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @lu__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @lu__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_1_r_

********** MI Scheduling **********
main:%bb.0 entry
  From: %1:gpr64 = COPY $x1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(1):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(4):   STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 2 4 3 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gpr64 = COPY $x1
SU(1):   %0:gpr32 = COPY $w0
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(3):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(4):   STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 26
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=2
Live In: 
Live Out: %21 
Live Thru: 
  LiveReg: %21
Top Pressure:

Bottom Pressure:
GPR32=1
Excess PSets: 
Cluster ld/st SU(24) - SU(22)
Cluster ld/st SU(20) - SU(18)
Cluster ld/st SU(16) - SU(14)
Cluster ld/st SU(12) - SU(10)
Cluster ld/st SU(8) - SU(6)
SU(0):   %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%8
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   %9:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%9
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%9
    SU(0): Data Latency=1 Reg=%8
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(3):   %10:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_2_total_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_3_rhsx_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%11
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%11
    SU(8): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_4_rhsy_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%12
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%12
  Successors:
    SU(6): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_5_rhsz_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%13
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%13
    SU(12): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_6_rhs_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=%14
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%14
  Successors:
    SU(10): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_7_jacld_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_7_jacld_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=%15
    SU(16): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_8_blts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_8_blts_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(16): Data Latency=1 Reg=%16
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=%16
  Successors:
    SU(14): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(17):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_9_jacu_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_9_jacu_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(18): Data Latency=1 Reg=%17
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=%17
    SU(20): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_10_buts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_10_buts_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%18
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%18
  Successors:
    SU(18): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_11_add_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_11_add_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(22): Data Latency=1 Reg=%19
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%19
    SU(24): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(23):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_12_l2norm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_12_l2norm_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(24): Data Latency=1 Reg=%20
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(23): Data Latency=1 Reg=%20
  Successors:
    SU(22): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(25):   %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(25): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 
Queue BotQ.A: 24 22 20 18 16 14 12 10 8 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 
Picking from Bot:
  Cand SU(24) ORDER                              
  Cand SU(22) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(22) STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GPR32=2
  LiveReg: %19
  UpdateRegP: SU(22) STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 
Queue BotQ.A: 24 2 20 18 16 14 12 10 8 6 4 21 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 
BotQ.A RemLatency SU(24) 1c
Picking from Bot:
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(24) STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
Bottom Pressure:
GPR32=3
  LiveReg: %20
  UpdateRegP: SU(24) STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
              to 
  Ready @1c
  BotQ.A TopLatency SU(24) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 25 
Queue BotQ.A: 21 2 20 18 16 14 12 10 8 6 4 23 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(23) %20:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_12_l2norm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_12_l2norm_
Bottom Pressure:
GPR32=2
  Ready @2c
  BotQ.A BotLatency SU(23) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 20 18 16 14 12 10 8 6 4 25 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 25 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(18) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(18) STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GPR32=3
  LiveReg: %17
  UpdateRegP: SU(18) STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @3c
  BotQ.A TopLatency SU(18) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 20 25 16 14 12 10 8 6 4 17 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 25 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(20) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(20) STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GPR32=4
  LiveReg: %18
  UpdateRegP: SU(20) STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @4c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 17 25 16 14 12 10 8 6 4 19 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 25 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(25) %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:
GPR32=3
  Ready @5c
  BotQ.A BotLatency SU(25) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 17 19 16 14 12 10 8 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(14) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(14) STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GPR32=4
  LiveReg: %15
  UpdateRegP: SU(14) STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @6c
  BotQ.A TopLatency SU(14) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 17 19 16 4 12 10 8 6 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(16) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(16) STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GPR32=5
  LiveReg: %16
  UpdateRegP: SU(16) STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @7c
  BotQ.A TopLatency SU(16) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 2 17 19 13 4 12 10 8 6 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(21) %19:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_11_add_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_11_add_
Bottom Pressure:
GPR32=4
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 19 13 4 12 10 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(10) STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GPR32=5
  LiveReg: %13
  UpdateRegP: SU(10) STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @9c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 19 13 4 12 6 8 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 10c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
  Cand SU(12) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(12) STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GPR32=6
  LiveReg: %14
  UpdateRegP: SU(12) STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @10c
  BotQ.A TopLatency SU(12) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 19 13 4 9 6 8 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 11c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) %18:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_10_buts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_10_buts_
Bottom Pressure:
GPR32=5
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 11 13 4 9 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 12c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(6) STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GPR32=6
  LiveReg: %11
  UpdateRegP: SU(6) STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @12c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 11 13 4 9 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 13c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(8) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(8) STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GPR32=7
  LiveReg: %12
  UpdateRegP: SU(8) STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @13c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 17 11 13 4 9 5 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 14c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %17:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_9_jacu_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_9_jacu_
Bottom Pressure:
GPR32=6
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 7 11 13 4 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 
  BotQ.A RemainingLatency 0 + 15c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GPR32=7
  LiveReg: %10
  UpdateRegP: SU(4) STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
              to 
  Ready @15c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 2 7 11 13 5 9 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 
  BotQ.A RemainingLatency 0 + 16c > CritPath 3
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %16:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_8_blts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_8_blts_
Bottom Pressure:
GPR32=6
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 7 11 13 5 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 
  BotQ.A RemainingLatency 0 + 17c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %15:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_7_jacld_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_7_jacld_
Bottom Pressure:
GPR32=5
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 7 11 9 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 18c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
Bottom Pressure:
GPR64temp=1
GPR32=7
  LiveReg: %9
  UpdateRegP: SU(2) STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to GPR64temp 1    GPR32 1
  LiveReg: %8
  UpdateRegP: SU(2) STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to 
  Ready @18c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 7 11 9 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 19c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %14:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_6_rhs_
Bottom Pressure:
GPR64temp=1
GPR32=6
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 7 0 9 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 
  BotQ.A RemainingLatency 0 + 20c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %13:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_5_rhsz_
Bottom Pressure:
GPR64temp=1
GPR32=5
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 7 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 
  BotQ.A RemainingLatency 0 + 21c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %12:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_4_rhsy_
Bottom Pressure:
GPR64temp=1
GPR32=4
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  BotQ.A RemainingLatency 0 + 22c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %11:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_3_rhsx_
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 23c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %10:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_2_total_
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 24c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %9:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
Bottom Pressure:

  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %9:gpr32 = MOVi32imm 1
SU(3):   %10:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_2_total_
SU(5):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_3_rhsx_
SU(7):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_4_rhsy_
SU(9):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_5_rhsz_
SU(11):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_6_rhs_
SU(2):   STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(13):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_7_jacld_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_7_jacld_
SU(15):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_8_blts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_8_blts_
SU(4):   STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
SU(17):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_9_jacu_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_9_jacu_
SU(8):   STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
SU(6):   STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
SU(19):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_10_buts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_10_buts_
SU(12):   STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
SU(10):   STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
SU(21):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_11_add_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_11_add_
SU(16):   STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
SU(14):   STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
SU(25):   %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(20):   STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
SU(18):   STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
SU(23):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_12_l2norm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_12_l2norm_
SU(24):   STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
SU(22):   STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)

********** MI Scheduling **********
main:%bb.2 if.else
  From: %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(1):   STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%6
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %101:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: CBZW %102:gpr32, %bb.14
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %101:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%101
  Single Issue       : false;
SU(1):   %102:gpr32 = LDRWui %101:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%101
  Successors:
    ExitSU: Data Latency=4 Reg=%102
  Single Issue       : false;
ExitSU:   CBZW %102:gpr32, %bb.14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%102
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %102:gpr32 = LDRWui %101:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %101:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %101:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %102:gpr32 = LDRWui %101:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %89:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_23__none__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=12
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %85 %81 %87 %68 %66 %65 %86 %88 
Live Out: %85 %81 %87 %68 %66 %65 %86 %88 
Live Thru: FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %85
  UpdateRegP: SU(28) $d1 = COPY %85:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %81
  UpdateRegP: SU(27) $d0 = COPY %81:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %87
  UpdateRegP: SU(26) $w5 = COPY %87:gpr32
              to GPR32 -1
  LiveReg: %68
  UpdateRegP: SU(25) $w4 = COPY %68:gpr32
              to GPR32 -1
  LiveReg: %66
  UpdateRegP: SU(24) $w3 = COPY %66:gpr32
              to GPR32 -1
  LiveReg: %65
  UpdateRegP: SU(23) $w2 = COPY %65:gpr32
              to GPR32 -1
  LiveReg: %86
  UpdateRegP: SU(22) $w1 = COPY %86:gpr32
              to GPR32 -1
  LiveReg: %88
  UpdateRegP: SU(18) STRWui %88:gpr32, $sp, 2 :: (store 4 into stack + 8)
              to 
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:
FPR8=4
GPR32=12
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %89:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_23__none__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%89
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %89:gpr64, $sp, 10 :: (store 8 into stack + 80)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%89
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %91:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_22__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_22__O3__mcmod
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%91
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %91:gpr64, $sp, 9 :: (store 8 into stack + 72)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%91
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %92:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_21__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_21__g__Wall__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%92
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %92:gpr64, $sp, 8 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%92
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %93:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_20__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_20__I___commo
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%93
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %93:gpr64, $sp, 7 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%93
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %94:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_19__lm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_19__lm_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%94
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %94:gpr64, $sp, 6 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%94
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %95:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_18___CC__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_18___CC__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%95
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %95:gpr64, $sp, 5 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%95
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %96:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_17_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_17_gcc_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%96
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %96:gpr64, $sp, 4 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%96
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %97:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_16_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_16_03_Nov_201
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%97
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %97:gpr64, $sp, 3 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%97
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %98:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_15_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_15_3_3_1_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%98
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %98:gpr64, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%98
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   STRWui %88:gpr32, $sp, 2 :: (store 4 into stack + 8)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %99:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_14___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_14___________
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%99
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %99:gpr64, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%99
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_13_LU_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_13_LU_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   $w1 = COPY %86:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   $w2 = COPY %65:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   $w3 = COPY %66:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(25):   $w4 = COPY %68:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(26):   $w5 = COPY %87:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   $d0 = COPY %81:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(28):   $d1 = COPY %85:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 23 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 28 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(28) $d1 = COPY %85:fpr64
Bottom Pressure:
FPR8=3
GPR32=12
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 27 26 25 24 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(27) $d0 = COPY %81:fpr64
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 26 25 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(26) $w5 = COPY %87:gpr32
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 24 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(25) $w4 = COPY %68:gpr32
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(24) $w3 = COPY %66:gpr32
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w2 = COPY %65:gpr32
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w1 = COPY %86:gpr32
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(20) STRXui %99:gpr64, $sp, 0 :: (store 8 into stack)
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %99
  UpdateRegP: SU(20) STRXui %99:gpr64, $sp, 0 :: (store 8 into stack)
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %97:gpr64, $sp, 3 :: (store 8 into stack + 24)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %97
  UpdateRegP: SU(15) STRXui %97:gpr64, $sp, 3 :: (store 8 into stack + 24)
              to 
  Ready @1c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 21 13 11 9 7 5 3 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(17) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %98:gpr64, $sp, 2 :: (store 8 into stack + 16)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %98
  UpdateRegP: SU(17) STRXui %98:gpr64, $sp, 2 :: (store 8 into stack + 16)
              to 
  Ready @2c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 11 9 7 5 3 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %95:gpr64, $sp, 5 :: (store 8 into stack + 40)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %95
  UpdateRegP: SU(11) STRXui %95:gpr64, $sp, 5 :: (store 8 into stack + 40)
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 16 9 7 5 3 19 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %96:gpr64, $sp, 4 :: (store 8 into stack + 32)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %96
  UpdateRegP: SU(13) STRXui %96:gpr64, $sp, 4 :: (store 8 into stack + 32)
              to 
  Ready @4c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 10 16 9 7 5 3 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(21) $x0 = MOVaddr target-flags(aarch64-page) @lu__str_13_LU_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_13_LU_
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @5c
  BotQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 7 5 3 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %93:gpr64, $sp, 7 :: (store 8 into stack + 56)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %93
  UpdateRegP: SU(7) STRXui %93:gpr64, $sp, 7 :: (store 8 into stack + 56)
              to 
  Ready @6c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 19 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %94:gpr64, $sp, 6 :: (store 8 into stack + 48)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 13 <= 15(+ 6 livethru)
  LiveReg: %94
  UpdateRegP: SU(9) STRXui %94:gpr64, $sp, 6 :: (store 8 into stack + 48)
              to 
  Ready @7c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 19 5 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) %99:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_14___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_14___________
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 13 <= 15(+ 6 livethru)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %91:gpr64, $sp, 9 :: (store 8 into stack + 72)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 13 <= 15(+ 6 livethru)
  LiveReg: %91
  UpdateRegP: SU(3) STRXui %91:gpr64, $sp, 9 :: (store 8 into stack + 72)
              to 
  Ready @9c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %92:gpr64, $sp, 8 :: (store 8 into stack + 64)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %92
  UpdateRegP: SU(5) STRXui %92:gpr64, $sp, 8 :: (store 8 into stack + 64)
              to 
  Ready @10c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(18) STRWui %88:gpr32, $sp, 2 :: (store 4 into stack + 8)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 16 6 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %98:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_15_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_15_3_3_1_
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 2 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %89:gpr64, $sp, 10 :: (store 8 into stack + 80)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %89
  UpdateRegP: SU(1) STRXui %89:gpr64, $sp, 10 :: (store 8 into stack + 80)
              to 
  Ready @13c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 14 12 10 2 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %97:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_16_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_16_03_Nov_201
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 12 10 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %96:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_17_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_17_gcc_
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 10 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %95:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_18___CC__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_18___CC__
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %94:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_19__lm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_19__lm_
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %93:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_20__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_20__I___commo
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %92:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_21__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_21__g__Wall__
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %91:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_22__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_22__O3__mcmod
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %89:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_23__none__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %89:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_23__none__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__
SU(2):   %91:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_22__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_22__O3__mcmod
SU(4):   %92:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_21__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_21__g__Wall__
SU(6):   %93:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_20__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_20__I___commo
SU(8):   %94:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_19__lm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_19__lm_
SU(10):   %95:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_18___CC__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_18___CC__
SU(12):   %96:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_17_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_17_gcc_
SU(14):   %97:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_16_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_16_03_Nov_201
SU(1):   STRXui %89:gpr64, $sp, 10 :: (store 8 into stack + 80)
SU(16):   %98:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_15_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_15_3_3_1_
SU(18):   STRWui %88:gpr32, $sp, 2 :: (store 4 into stack + 8)
SU(5):   STRXui %92:gpr64, $sp, 8 :: (store 8 into stack + 64)
SU(3):   STRXui %91:gpr64, $sp, 9 :: (store 8 into stack + 72)
SU(19):   %99:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_14___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_14___________
SU(9):   STRXui %94:gpr64, $sp, 6 :: (store 8 into stack + 48)
SU(7):   STRXui %93:gpr64, $sp, 7 :: (store 8 into stack + 56)
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_13_LU_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_13_LU_
SU(13):   STRXui %96:gpr64, $sp, 4 :: (store 8 into stack + 32)
SU(11):   STRXui %95:gpr64, $sp, 5 :: (store 8 into stack + 40)
SU(17):   STRXui %98:gpr64, $sp, 2 :: (store 8 into stack + 16)
SU(15):   STRXui %97:gpr64, $sp, 3 :: (store 8 into stack + 24)
SU(20):   STRXui %99:gpr64, $sp, 0 :: (store 8 into stack)
SU(22):   $w1 = COPY %86:gpr32
SU(23):   $w2 = COPY %65:gpr32
SU(24):   $w3 = COPY %66:gpr32
SU(25):   $w4 = COPY %68:gpr32
SU(26):   $w5 = COPY %87:gpr32
SU(27):   $d0 = COPY %81:fpr64
SU(28):   $d1 = COPY %85:fpr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %60:fpr64 = COPY killed $d0
    To: ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 30
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=5
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
Live In: %24 %37 %56 %48 %44 %38 %51 B0 
Live Out: %88 %87 %86 %85 %81 %68 %65 %66 
Live Thru: 
  LiveReg: %88
  LiveReg: %87
  LiveReg: %86
  LiveReg: %85
  UpdateRegP: SU(26) STRDui %85:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
              to 
  LiveReg: %81
  UpdateRegP: SU(24) %84:fpr64 = FMULDrr %81:fpr64, %83:fpr64
              to 
  LiveReg: %68
  UpdateRegP: SU(9) %69:gpr32 = nsw ADDWrr %67:gpr32, %68:gpr32
              to 
  LiveReg: %65
  UpdateRegP: SU(7) %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
              to 
  LiveReg: %66
  UpdateRegP: SU(7) %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
              to GPR32 -1
Top Pressure:
GPR64temp=4
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Excess PSets: 
SU(0):   %60:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=0 Reg=%60
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(1):   %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Data Latency=1 Reg=%61
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(2):   %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(1): Data Latency=1 Reg=%61
  Successors:
    SU(3): Data Latency=4 Reg=%62
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %63:fpr64 = FMULDrr %60:fpr64, %62:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%62
    SU(0): Data Latency=0 Reg=%60
  Successors:
    SU(4): Data Latency=1 Reg=%63
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(4):   %64:fpr64 = FADDDrr %51:fpr64, %63:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%63
  Successors:
    SU(15): Data Latency=1 Reg=%64
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   %65:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(7): Data Latency=4 Reg=%65
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
SU(6):   %66:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(7): Data Latency=4 Reg=%66
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
SU(7):   %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(6): Data Latency=4 Reg=%66
    SU(5): Data Latency=4 Reg=%65
  Successors:
    SU(9): Data Latency=1 Reg=%67
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %68:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(9): Data Latency=4 Reg=%68
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
SU(9):   %69:gpr32 = nsw ADDWrr %67:gpr32, %68:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(7): Data Latency=1 Reg=%67
    SU(8): Data Latency=4 Reg=%68
  Successors:
    SU(10): Data Latency=1 Reg=%69
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %70:fpr64 = SCVTFUWDri %69:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(9): Data Latency=1 Reg=%69
  Successors:
    SU(13): Data Latency=1 Reg=%70
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(11):   %71:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(12): Data Latency=1 Reg=%71
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(12):   %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(11): Data Latency=1 Reg=%71
  Successors:
    SU(13): Data Latency=4 Reg=%72
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(13):   %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(10): Data Latency=1 Reg=%70
    SU(12): Data Latency=4 Reg=%72
  Successors:
    SU(14): Data Latency=1 Reg=%73
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(14):   %74:fpr64 = FDIVDrr %73:fpr64, %56:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(13): Data Latency=1 Reg=%73
  Successors:
    SU(15): Data Latency=1 Reg=%74
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(15):   %75:fpr64 = FADDDrr %64:fpr64, %74:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(14): Data Latency=1 Reg=%74
    SU(4): Data Latency=1 Reg=%64
  Successors:
    SU(18): Data Latency=1 Reg=%75
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(16):   %76:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(17): Data Latency=1 Reg=%76
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(17):   %77:fpr64 = LDRDui %76:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(16): Data Latency=1 Reg=%76
  Successors:
    SU(18): Data Latency=4 Reg=%77
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(18):   %78:fpr64 = FADDDrr %75:fpr64, %77:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 3
  Predecessors:
    SU(15): Data Latency=1 Reg=%75
    SU(17): Data Latency=4 Reg=%77
  Successors:
    SU(19): Data Latency=1 Reg=%78
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(19):   %79:fpr64 = FMULDrr %37:fpr64, %78:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(18): Data Latency=1 Reg=%78
  Successors:
    SU(25): Data Latency=1 Reg=%79
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(20):   %80:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(21): Data Latency=1 Reg=%80
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(21):   %81:fpr64 = LDRDui %80:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(20): Data Latency=1 Reg=%80
  Successors:
    SU(24): Data Latency=4 Reg=%81
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(22):   %82:gpr64temp = ADRP target-flags(aarch64-page) %const.6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(23): Data Latency=1 Reg=%82
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(23):   %83:fpr64 = LDRDui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(22): Data Latency=1 Reg=%82
  Successors:
    SU(24): Data Latency=4 Reg=%83
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(24):   %84:fpr64 = FMULDrr %81:fpr64, %83:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(23): Data Latency=4 Reg=%83
    SU(21): Data Latency=4 Reg=%81
  Successors:
    SU(25): Data Latency=1 Reg=%84
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %85:fpr64 = FDIVDrr %79:fpr64, %84:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(19): Data Latency=1 Reg=%79
    SU(24): Data Latency=1 Reg=%84
  Successors:
    SU(26): Data Latency=1 Reg=%85
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(26):   STRDui %85:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(25): Data Latency=1 Reg=%85
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   %86:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(28):   %87:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
SU(29):   %88:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(29): Ord  Latency=3 Artificial
    SU(28): Ord  Latency=3 Artificial
    SU(27): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 28 27 
Queue BotQ.A: 26 
Pick Bot ONLY1     
Scheduling SU(26) STRDui %85:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
  BotQ.A TopLatency SU(26) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 28 27 
Queue BotQ.A: 25 
Pick Bot ONLY1     
Scheduling SU(25) %85:fpr64 = FDIVDrr %79:fpr64, %84:fpr64
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %79
  UpdateRegP: SU(25) %85:fpr64 = FDIVDrr %79:fpr64, %84:fpr64
              to 
  LiveReg: %84
  UpdateRegP: SU(25) %85:fpr64 = FDIVDrr %79:fpr64, %84:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 28 27 
Queue BotQ.A: 19 24 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 8 11 16 20 22 27 28 29 
BotQ.A RemLatency SU(19) 11c
Picking from Bot:
  Cand SU(19) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %60:fpr64 = COPY killed $d0
Top Pressure:
GPR64temp=4
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 28 27 
Queue BotQ.A: 19 24 
Queue TopQ.P: 
Queue TopQ.A: 29 1 5 6 8 11 16 20 22 27 28 
BotQ.A RemLatency SU(19) 11c
Picking from Bot:
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(29) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(24) %84:fpr64 = FMULDrr %81:fpr64, %83:fpr64
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %83
  UpdateRegP: SU(24) %84:fpr64 = FMULDrr %81:fpr64, %83:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(24) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 23 
Queue BotQ.A: 19 29 28 27 
Queue TopQ.P: 
Queue TopQ.A: 29 1 5 6 8 11 16 20 22 27 28 
BotQ.A RemLatency SU(19) 11c
BotQ.A RemLatency SU(21) 1c
  BotQ.A RemainingLatency 11 + 3c > CritPath 13
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %79:fpr64 = FMULDrr %37:fpr64, %78:fpr64
Bottom Pressure:
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %37
  UpdateRegP: SU(19) %79:fpr64 = FMULDrr %37:fpr64, %78:fpr64
              to 
  LiveReg: %78
  UpdateRegP: SU(19) %79:fpr64 = FMULDrr %37:fpr64, %78:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A TopLatency SU(19) 11c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 23 
Queue BotQ.A: 27 29 28 18 
Queue TopQ.P: 
Queue TopQ.A: 29 1 5 6 8 11 16 20 22 27 28 
BotQ.A RemLatency SU(18) 10c
BotQ.A RemLatency SU(21) 1c
  BotQ.A RemainingLatency 10 + 4c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(29) ORDER                              
  Cand SU(18) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %78:fpr64 = FADDDrr %75:fpr64, %77:fpr64
Bottom Pressure:
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %75
  UpdateRegP: SU(18) %78:fpr64 = FADDDrr %75:fpr64, %77:fpr64
              to 
  LiveReg: %77
  UpdateRegP: SU(18) %78:fpr64 = FADDDrr %75:fpr64, %77:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A BotLatency SU(18) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 23 17 
Queue BotQ.A: 27 29 28 15 
Queue TopQ.P: 
Queue TopQ.A: 29 1 5 6 8 11 16 20 22 27 28 
BotQ.A RemLatency SU(15) 9c
BotQ.A RemLatency SU(21) 1c
  BotQ.A RemainingLatency 9 + 5c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(29) %88:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 
Queue BotQ.A: 27 15 28 21 23 
Queue TopQ.P: 
Queue TopQ.A: 28 1 5 6 8 11 16 20 22 27 
BotQ.A RemLatency SU(15) 9c
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 9 + 6c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(28) ORDER                              
  Cand SU(21) BOT-PATH                  1 cycles 
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(23) %83:fpr64 = LDRDui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %82
  UpdateRegP: SU(23) %83:fpr64 = LDRDui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A BotLatency SU(23) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 
Queue BotQ.A: 27 15 28 21 22 
Queue TopQ.P: 
Queue TopQ.A: 28 1 5 6 8 11 16 20 22 27 
BotQ.A RemLatency SU(15) 9c
BotQ.A RemLatency SU(17) 1c
  BotQ.A RemainingLatency 9 + 7c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(15) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %75:fpr64 = FADDDrr %64:fpr64, %74:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %64
  UpdateRegP: SU(15) %75:fpr64 = FADDDrr %64:fpr64, %74:fpr64
              to 
  LiveReg: %74
  UpdateRegP: SU(15) %75:fpr64 = FADDDrr %64:fpr64, %74:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(15) 9c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 22 28 21 14 4 17 
Queue TopQ.P: 
Queue TopQ.A: 28 1 5 6 8 11 16 20 22 27 
BotQ.A RemLatency SU(14) 8c
  BotQ.A RemainingLatency 8 + 8c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) %87:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %24
  UpdateRegP: SU(28) %87:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
              to GPR32 -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 22 17 21 14 4 
Queue TopQ.P: 
Queue TopQ.A: 27 1 5 6 8 11 16 20 22 
BotQ.A RemLatency SU(14) 8c
  BotQ.A RemainingLatency 8 + 9c > CritPath 13
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) %86:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 22 17 21 14 
Queue TopQ.P: 
Queue TopQ.A: 22 1 5 6 8 11 16 20 
BotQ.A RemLatency SU(14) 8c
  BotQ.A RemainingLatency 8 + 10c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(22) REG-MAX                            
  Cand SU(17) BOT-PATH                  1 cycles 
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(21) %81:fpr64 = LDRDui %80:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
Bottom Pressure:
GPR64temp=3
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %80
  UpdateRegP: SU(21) %81:fpr64 = LDRDui %80:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 22 17 14 20 
Queue TopQ.P: 
Queue TopQ.A: 22 1 5 6 8 11 16 20 
BotQ.A RemLatency SU(14) 8c
  BotQ.A RemainingLatency 8 + 11c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(14) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %74:fpr64 = FDIVDrr %73:fpr64, %56:fpr64
Bottom Pressure:
GPR64temp=3
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %73
  UpdateRegP: SU(14) %74:fpr64 = FDIVDrr %73:fpr64, %56:fpr64
              to 
  LiveReg: %56
  UpdateRegP: SU(14) %74:fpr64 = FDIVDrr %73:fpr64, %56:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A TopLatency SU(14) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 22 17 20 13 
Queue TopQ.P: 
Queue TopQ.A: 22 1 5 6 8 11 16 20 
BotQ.A RemLatency SU(13) 7c
  BotQ.A RemainingLatency 7 + 12c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(22) REG-MAX                            
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(22) %82:gpr64temp = ADRP target-flags(aarch64-page) %const.6
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @12c
  BotQ.A BotLatency SU(22) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 13 17 20 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
BotQ.A RemLatency SU(13) 7c
  BotQ.A RemainingLatency 7 + 13c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(13) BOT-PATH                  7 cycles 
  Cand SU(17) REG-MAX                            
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %77:fpr64 = LDRDui %76:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=3
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %76
  UpdateRegP: SU(17) %77:fpr64 = LDRDui %76:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 13 20 16 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
  BotQ.A RemainingLatency 0 + 14c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(13) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64
Bottom Pressure:
GPR64temp=3
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %70
  UpdateRegP: SU(13) %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64
              to 
  LiveReg: %72
  UpdateRegP: SU(13) %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @14c
  BotQ.A TopLatency SU(13) 7c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 4 16 20 10 
Queue TopQ.P: 
Queue TopQ.A: 20 1 5 6 8 11 16 
  BotQ.A RemainingLatency 0 + 15c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(20) %80:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 4 16 10 
Queue TopQ.P: 
Queue TopQ.A: 16 1 5 6 8 11 
  BotQ.A RemainingLatency 0 + 16c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(10) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %70:fpr64 = SCVTFUWDri %69:gpr32
Bottom Pressure:
GPR64temp=2
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %69
  UpdateRegP: SU(10) %70:fpr64 = SCVTFUWDri %69:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @16c
  BotQ.A TopLatency SU(10) 6c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 4 16 9 
Queue TopQ.P: 
Queue TopQ.A: 16 1 5 6 8 11 
  BotQ.A RemainingLatency 0 + 17c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %64:fpr64 = FADDDrr %51:fpr64, %63:fpr64
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %51
  UpdateRegP: SU(4) %64:fpr64 = FADDDrr %51:fpr64, %63:fpr64
              to 
  LiveReg: %63
  UpdateRegP: SU(4) %64:fpr64 = FADDDrr %51:fpr64, %63:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @17c
  BotQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 16 3 12 
Queue TopQ.P: 
Queue TopQ.A: 16 1 5 6 8 11 
  BotQ.A RemainingLatency 0 + 18c > CritPath 13
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(9) %69:gpr32 = nsw ADDWrr %67:gpr32, %68:gpr32
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %67
  UpdateRegP: SU(9) %69:gpr32 = nsw ADDWrr %67:gpr32, %68:gpr32
              to GPR32 -1
  Ready @18c
  BotQ.A BotLatency SU(9) 8c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 12 16 3 7 
Queue TopQ.P: 
Queue TopQ.A: 16 1 5 6 8 11 
  BotQ.A RemainingLatency 0 + 19c > CritPath 13
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(16) REG-MAX                            
  Cand SU(7) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @19c
  BotQ.A BotLatency SU(7) 9c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 6 5 
Queue BotQ.A: 12 16 3 
Queue TopQ.P: 
Queue TopQ.A: 16 1 5 6 8 11 
  BotQ.A RemainingLatency 0 + 20c > CritPath 13
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=3
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %71
  UpdateRegP: SU(12) %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @20c
  BotQ.A BotLatency SU(12) 10c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 6 5 
Queue BotQ.A: 3 16 11 
Queue TopQ.P: 
Queue TopQ.A: 16 1 5 6 8 11 
  BotQ.A RemainingLatency 0 + 21c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %63:fpr64 = FMULDrr %60:fpr64, %62:fpr64
Bottom Pressure:
GPR64temp=3
FPR8=5
GPR32=6
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %60
  UpdateRegP: SU(3) %63:fpr64 = FMULDrr %60:fpr64, %62:fpr64
              to 
  LiveReg: %62
  UpdateRegP: SU(3) %63:fpr64 = FMULDrr %60:fpr64, %62:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @21c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 6 5 
Queue BotQ.A: 11 16 8 
Queue TopQ.P: 
Queue TopQ.A: 16 1 5 6 8 11 
  BotQ.A RemainingLatency 0 + 22c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %76:gpr64temp = ADRP target-flags(aarch64-page) %const.5
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 11 8 6 5 
Queue TopQ.P: 
Queue TopQ.A: 11 1 5 6 8 
  BotQ.A RemainingLatency 0 + 23c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %71:gpr64temp = ADRP target-flags(aarch64-page) %const.4
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @23c
  BotQ.A BotLatency SU(11) 11c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 5 8 6 
Queue TopQ.P: 
Queue TopQ.A: 8 1 5 6 
  BotQ.A RemainingLatency 0 + 24c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %68:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
Bottom Pressure:
GPR64temp=2
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %48
  UpdateRegP: SU(8) %68:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
              to GPR32 -1
  Ready @24c
  BotQ.A BotLatency SU(8) 12c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 2 
Queue TopQ.P: 
Queue TopQ.A: 6 1 5 
  BotQ.A RemainingLatency 0 + 25c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=3
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %61
  UpdateRegP: SU(2) %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 1 
Queue TopQ.P: 
Queue TopQ.A: 6 1 5 
  BotQ.A RemainingLatency 0 + 26c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %66:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
Bottom Pressure:
GPR64temp=4
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  GPR64temp: 4 <= 6(+ 0 livethru)
  LiveReg: %44
  UpdateRegP: SU(6) %66:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
              to GPR32 -1
  Ready @26c
  BotQ.A BotLatency SU(6) 13c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 5 1 
  BotQ.A RemainingLatency 0 + 27c > CritPath 13
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %65:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
Bottom Pressure:
GPR64temp=5
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  GPR64temp: 5 <= 6(+ 0 livethru)
  LiveReg: %38
  UpdateRegP: SU(5) %65:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
              to GPR32 -1
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
Bottom Pressure:
GPR64temp=4
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  GPR64temp: 5 <= 6(+ 0 livethru)
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %60:fpr64 = COPY killed $d0
SU(1):   %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
SU(5):   %65:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
SU(6):   %66:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
SU(2):   %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(8):   %68:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
SU(11):   %71:gpr64temp = ADRP target-flags(aarch64-page) %const.4
SU(16):   %76:gpr64temp = ADRP target-flags(aarch64-page) %const.5
SU(3):   %63:fpr64 = FMULDrr %60:fpr64, %62:fpr64
SU(12):   %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(7):   %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
SU(9):   %69:gpr32 = nsw ADDWrr %67:gpr32, %68:gpr32
SU(4):   %64:fpr64 = FADDDrr %51:fpr64, %63:fpr64
SU(10):   %70:fpr64 = SCVTFUWDri %69:gpr32
SU(20):   %80:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
SU(13):   %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64
SU(17):   %77:fpr64 = LDRDui %76:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(22):   %82:gpr64temp = ADRP target-flags(aarch64-page) %const.6
SU(14):   %74:fpr64 = FDIVDrr %73:fpr64, %56:fpr64
SU(21):   %81:fpr64 = LDRDui %80:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
SU(27):   %86:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(28):   %87:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
SU(15):   %75:fpr64 = FADDDrr %64:fpr64, %74:fpr64
SU(23):   %83:fpr64 = LDRDui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
SU(29):   %88:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
SU(18):   %78:fpr64 = FADDDrr %75:fpr64, %77:fpr64
SU(19):   %79:fpr64 = FMULDrr %37:fpr64, %78:fpr64
SU(24):   %84:fpr64 = FMULDrr %81:fpr64, %83:fpr64
SU(25):   %85:fpr64 = FDIVDrr %79:fpr64, %84:fpr64
SU(26):   STRDui %85:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%58
  Single Issue       : false;
SU(1):   %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%58
  Successors:
    SU(3): Data Latency=4 Reg=%59
  Single Issue       : false;
SU(2):   $d0 = COPY %57:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %59:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%59
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %59:fpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %57:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
SU(1):   %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(2):   $d0 = COPY %57:fpr64
SU(3):   $d1 = COPY %59:fpr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: undef %33.ssub:fpr64 = LDRSui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=5
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %24 
Live Out: %57 %56 %51 %48 %44 %38 %37 %24 
Live Thru: GPR64temp=1
GPR32=1
  LiveReg: %57
  LiveReg: %56
  UpdateRegP: SU(22) %57:fpr64 = FDIVDrr %54:fpr64, %56:fpr64
              to 
  LiveReg: %51
  LiveReg: %48
  UpdateRegP: SU(14) %49:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
              to GPR32 -1
  LiveReg: %44
  UpdateRegP: SU(10) %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
              to GPR32 -1
  LiveReg: %38
  UpdateRegP: SU(4) %39:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
              to GPR32 -1
  LiveReg: %37
  LiveReg: %24
  UpdateRegP: SU(0) undef %33.ssub:fpr64 = LDRSui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR64temp=1
GPR32=1
Bottom Pressure:
GPR64temp=4
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Excess PSets: 
SU(0):   undef %33.ssub:fpr64 = LDRSui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%33
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%33
  Successors:
    SU(2): Data Latency=1 Reg=%35
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%35
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %38:gpr64temp = ADRP target-flags(aarch64-page) @nx0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=1 Reg=%38
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(4):   %39:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(3): Data Latency=1 Reg=%38
  Successors:
    SU(17): Data Latency=4 Reg=%39
    SU(5): Data Latency=4 Reg=%39
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %40:fpr64 = SCVTFUWDri %39:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(4): Data Latency=4 Reg=%39
  Successors:
    SU(8): Data Latency=1 Reg=%40
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(6):   %41:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(7): Data Latency=1 Reg=%41
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(7):   %42:fpr64 = LDRDui %41:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(6): Data Latency=1 Reg=%41
  Successors:
    SU(8): Data Latency=4 Reg=%42
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=%40
    SU(7): Data Latency=4 Reg=%42
  Successors:
    SU(12): Data Latency=1 Reg=%43
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   %44:gpr64temp = ADRP target-flags(aarch64-page) @ny0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(10): Data Latency=1 Reg=%44
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(10):   %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(9): Data Latency=1 Reg=%44
  Successors:
    SU(17): Data Latency=4 Reg=%45
    SU(11): Data Latency=4 Reg=%45
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %46:fpr64 = SCVTFUWDri %45:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(10): Data Latency=4 Reg=%45
  Successors:
    SU(12): Data Latency=1 Reg=%46
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(12):   %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%43
    SU(11): Data Latency=1 Reg=%46
  Successors:
    SU(16): Data Latency=1 Reg=%47
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(13):   %48:gpr64temp = ADRP target-flags(aarch64-page) @nz0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(14): Data Latency=1 Reg=%48
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(14):   %49:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(13): Data Latency=1 Reg=%48
  Successors:
    SU(18): Data Latency=4 Reg=%49
    SU(15): Data Latency=4 Reg=%49
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   %50:fpr64 = SCVTFUWDri %49:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(14): Data Latency=4 Reg=%49
  Successors:
    SU(16): Data Latency=1 Reg=%50
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(16):   %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%47
    SU(15): Data Latency=1 Reg=%50
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(17):   %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(10): Data Latency=4 Reg=%45
    SU(4): Data Latency=4 Reg=%39
  Successors:
    SU(18): Data Latency=1 Reg=%52
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(17): Data Latency=1 Reg=%52
    SU(14): Data Latency=4 Reg=%49
  Successors:
    SU(19): Data Latency=1 Reg=%53
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   %54:fpr64 = SCVTFUWDri %53:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(18): Data Latency=1 Reg=%53
  Successors:
    SU(22): Data Latency=1 Reg=%54
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(20):   %55:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(21): Data Latency=1 Reg=%55
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(21):   %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(20): Data Latency=1 Reg=%55
  Successors:
    SU(22): Data Latency=4 Reg=%56
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(22):   %57:fpr64 = FDIVDrr %54:fpr64, %56:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%54
    SU(21): Data Latency=4 Reg=%56
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 16 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
Picking from Bot:
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(22) %57:fpr64 = FDIVDrr %54:fpr64, %56:fpr64
Bottom Pressure:
GPR64temp=4
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %54
  UpdateRegP: SU(22) %57:fpr64 = FDIVDrr %54:fpr64, %56:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(22) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 2 16 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(16) 8c
BotQ.A RemLatency SU(21) 1c
  BotQ.A RemainingLatency 8 + 1c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(19) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %54:fpr64 = SCVTFUWDri %53:gpr32
Bottom Pressure:
GPR64temp=4
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %53
  UpdateRegP: SU(19) %54:fpr64 = SCVTFUWDri %53:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 2 16 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(16) 8c
BotQ.A RemLatency SU(21) 1c
  BotQ.A RemainingLatency 8 + 2c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(16) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
Bottom Pressure:
GPR64temp=4
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %47
  UpdateRegP: SU(16) %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
              to 
  LiveReg: %50
  UpdateRegP: SU(16) %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A TopLatency SU(16) 8c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 2 18 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(12) 7c
BotQ.A RemLatency SU(21) 1c
  BotQ.A RemainingLatency 7 + 3c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(18) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(18) %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
Bottom Pressure:
GPR64temp=4
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %52
  UpdateRegP: SU(18) %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
              to 
  LiveReg: %49
  UpdateRegP: SU(15) %50:fpr64 = SCVTFUWDri %49:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(18) %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
              to GPR32 -1
  Ready @3c
  BotQ.A BotLatency SU(18) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 15 12 17 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(12) 7c
  BotQ.A RemainingLatency 7 + 4c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
Bottom Pressure:
GPR64temp=4
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %39
  UpdateRegP: SU(5) %40:fpr64 = SCVTFUWDri %39:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(17) %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
              to 
  LiveReg: %45
  UpdateRegP: SU(11) %46:fpr64 = SCVTFUWDri %45:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(17) %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
              to GPR32 -1
  Ready @4c
  BotQ.A BotLatency SU(17) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 15 12 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(12) 7c
  BotQ.A RemainingLatency 7 + 5c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %50:fpr64 = SCVTFUWDri %49:gpr32
Bottom Pressure:
GPR64temp=4
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 2 21 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(12) 7c
BotQ.A RemLatency SU(14) 1c
  BotQ.A RemainingLatency 7 + 6c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(12) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
Bottom Pressure:
GPR64temp=4
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %43
  UpdateRegP: SU(12) %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
              to 
  LiveReg: %46
  UpdateRegP: SU(12) %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A TopLatency SU(12) 7c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 
Queue BotQ.A: 2 21 8 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(8) 6c
BotQ.A RemLatency SU(14) 1c
  BotQ.A RemainingLatency 6 + 7c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %46:fpr64 = SCVTFUWDri %45:gpr32
Bottom Pressure:
GPR64temp=4
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 14 10 
Queue BotQ.A: 2 21 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
BotQ.A RemLatency SU(8) 6c
BotQ.A RemLatency SU(14) 1c
  BotQ.A RemainingLatency 6 + 8c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(8) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
Bottom Pressure:
GPR64temp=4
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %40
  UpdateRegP: SU(8) %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
              to 
  LiveReg: %42
  UpdateRegP: SU(8) %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  BotQ.A TopLatency SU(8) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 10 
Queue BotQ.A: 2 21 5 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 9c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %40:fpr64 = SCVTFUWDri %39:gpr32
Bottom Pressure:
GPR64temp=4
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 10 4 
Queue BotQ.A: 2 21 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 10c > CritPath 8
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(2) %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
Bottom Pressure:
GPR64temp=4
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %35
  UpdateRegP: SU(2) %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 4 
Queue BotQ.A: 14 21 1 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 11c > CritPath 8
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
Bottom Pressure:
GPR64temp=4
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %33
  UpdateRegP: SU(1) %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 4 
Queue BotQ.A: 14 21 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 12c > CritPath 8
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(14) %49:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
Bottom Pressure:
GPR64temp=4
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @12c
  BotQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 21 10 13 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 13c > CritPath 8
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(21) %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=5
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR64temp: 5 <= 6(+ 1 livethru)
  LiveReg: %55
  UpdateRegP: SU(21) %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 4 10 13 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 14c > CritPath 8
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
Bottom Pressure:
GPR64temp=5
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @14c
  BotQ.A BotLatency SU(10) 7c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 4 20 13 9 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 15c > CritPath 8
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %39:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
Bottom Pressure:
GPR64temp=5
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @15c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 20 13 9 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 20 
  BotQ.A RemainingLatency 0 + 16c > CritPath 8
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(0) REG-MAX                            
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %55:gpr64temp = ADRP target-flags(aarch64-page) %const.1
Bottom Pressure:
GPR64temp=4
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR64temp: 5 <= 6(+ 1 livethru)
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 3 13 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 
  BotQ.A RemainingLatency 0 + 17c > CritPath 8
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %42:fpr64 = LDRDui %41:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=5
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR64temp: 5 <= 6(+ 1 livethru)
  LiveReg: %41
  UpdateRegP: SU(7) %42:fpr64 = LDRDui %41:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @17c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 3 13 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 13 
  BotQ.A RemainingLatency 0 + 18c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %48:gpr64temp = ADRP target-flags(aarch64-page) @nz0
Bottom Pressure:
GPR64temp=4
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR64temp: 5 <= 6(+ 1 livethru)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 9 
  BotQ.A RemainingLatency 0 + 19c > CritPath 8
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %44:gpr64temp = ADRP target-flags(aarch64-page) @ny0
Bottom Pressure:
GPR64temp=3
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR64temp: 5 <= 6(+ 1 livethru)
  Ready @19c
  BotQ.A BotLatency SU(9) 8c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 
  BotQ.A RemainingLatency 0 + 20c > CritPath 8
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %41:gpr64temp = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR64temp: 5 <= 6(+ 1 livethru)
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 21c > CritPath 8
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %38:gpr64temp = ADRP target-flags(aarch64-page) @nx0
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR64temp: 5 <= 6(+ 1 livethru)
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) undef %33.ssub:fpr64 = LDRSui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   undef %33.ssub:fpr64 = LDRSui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
SU(3):   %38:gpr64temp = ADRP target-flags(aarch64-page) @nx0
SU(6):   %41:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(9):   %44:gpr64temp = ADRP target-flags(aarch64-page) @ny0
SU(13):   %48:gpr64temp = ADRP target-flags(aarch64-page) @nz0
SU(7):   %42:fpr64 = LDRDui %41:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(20):   %55:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(4):   %39:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
SU(10):   %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
SU(21):   %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(14):   %49:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
SU(1):   %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
SU(2):   %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
SU(5):   %40:fpr64 = SCVTFUWDri %39:gpr32
SU(8):   %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
SU(11):   %46:fpr64 = SCVTFUWDri %45:gpr32
SU(12):   %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
SU(15):   %50:fpr64 = SCVTFUWDri %49:gpr32
SU(17):   %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
SU(18):   %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
SU(16):   %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
SU(19):   %54:fpr64 = SCVTFUWDri %53:gpr32
SU(22):   %57:fpr64 = FDIVDrr %54:fpr64, %56:fpr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
    To: BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $x2, implicit killed $x3, implicit-def $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %27:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x2 = ADDXri %stack.3.Class, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $x3 = ADDXri %stack.4.verified, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $x2, implicit killed $x3, implicit-def $sp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 3 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %27:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 3 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) $x3 = ADDXri %stack.4.verified, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $x2 = ADDXri %stack.3.Class, 0, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
SU(3):   $x2 = ADDXri %stack.3.Class, 0, 0
SU(4):   $x3 = ADDXri %stack.4.verified, 0, 0
SU(2):   $d0 = COPY %27:fpr64

********** MI Scheduling **********
main:%bb.3 if.end
  From: %26:gpr64temp = ADRP target-flags(aarch64-page) @frc
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %26:gpr64temp = ADRP target-flags(aarch64-page) @frc
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%26
  Single Issue       : false;
SU(1):   %27:fpr64 = LDRDui %26:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%26
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %27:fpr64 = LDRDui %26:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %26:gpr64temp = ADRP target-flags(aarch64-page) @frc
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %26:gpr64temp = ADRP target-flags(aarch64-page) @frc
SU(1):   %27:fpr64 = LDRDui %26:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %24:gpr64temp = ADRP target-flags(aarch64-page) @itmax
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr64temp = ADRP target-flags(aarch64-page) @itmax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%24
  Single Issue       : false;
SU(1):   %25:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%24
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %25:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr64temp = ADRP target-flags(aarch64-page) @itmax
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %24:gpr64temp = ADRP target-flags(aarch64-page) @itmax
SU(1):   %25:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)

********** MI Scheduling **********
main:%bb.4 if.then31
  From: %103:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %103:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%103
  Single Issue       : false;
SU(1):   STRWui %103:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%103
  Single Issue       : false;
SU(2):   %158:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %158:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %103:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %103:gpr32 = MOVi32imm 1
  Ready @2c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %103:gpr32 = MOVi32imm 1
SU(1):   STRWui %103:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
SU(2):   %158:gpr64sp = ADDXri %stack.8.trecs, 0, 0

********** MI Scheduling **********
main:%bb.5 for.cond
  From: %104:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.7, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %104:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%104
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %104:gpr32common, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%104
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.7, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %104:gpr32common, 11, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %104:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %104:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %104:gpr32common, 11, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.6 for.body
  From: %156:fpr64 = COPY $d0
    To: B %bb.5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(3)
  Copy Succ SU(2)
  Copy Succ SU(5)
SU(0):   %156:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%156
  Single Issue       : false;
SU(1):   %157:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%157
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   STRDroX %156:fpr64, %158:gpr64sp, %157:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%157
    SU(0): Data Latency=0 Reg=%156
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   %159:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(4): Data Latency=4 Reg=%159
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%159
  Successors:
    SU(5): Data Latency=1 Reg=%160
  Single Issue       : false;
SU(5):   STRWui %160:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%160
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %156:fpr64 = COPY $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot ORDER     
Scheduling SU(5) STRWui %160:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDroX %156:fpr64, %158:gpr64sp, %157:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
  Ready @2c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %159:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %157:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %156:fpr64 = COPY $d0
SU(1):   %157:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(3):   %159:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX %156:fpr64, %158:gpr64sp, %157:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
SU(4):   %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
SU(5):   STRWui %160:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.7 for.end
  From: %106:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
    To: Bcc 1, %bb.9, implicit killed $nzcv
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %106:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=%106
  Single Issue       : false;
SU(1):   %107:fpr64 = LDRDui %106:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=%106
  Successors:
    SU(3): Data Latency=4 Reg=%107
    SU(2): Data Latency=4 Reg=%107
  Single Issue       : false;
SU(2):   STRDui %107:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%107
  Single Issue       : false;
SU(3):   FCMPDri %107:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%107
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.9, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDui %107:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) FCMPDri %107:fpr64, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %107:fpr64 = LDRDui %106:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %106:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %106:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
SU(1):   %107:fpr64 = LDRDui %106:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
SU(3):   FCMPDri %107:fpr64, implicit-def $nzcv
SU(2):   STRDui %107:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.8 if.then38
  From: %108:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %108:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%108
  Single Issue       : false;
SU(1):   STRXui %108:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%108
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %108:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %108:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %108:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %108:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.9 if.end39
  From: %111:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %111:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(1):   STRWui %111:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(2):   %117:gpr64sp = ADDXri %stack.10.t_names, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %119:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %121:gpr64temp = ADRP target-flags(aarch64-page) %const.7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1 Reg=%121
  Single Issue       : false;
SU(5):   %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%121
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %119:gpr64sp = ADDXri %stack.8.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
BotQ.A RemLatency SU(1) 1c
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %117:gpr64sp = ADDXri %stack.10.t_names, 0, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %111:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A TopLatency SU(5) 1c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %121:gpr64temp = ADRP target-flags(aarch64-page) %const.7
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %111:gpr32 = MOVi32imm 1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %111:gpr32 = MOVi32imm 1
SU(4):   %121:gpr64temp = ADRP target-flags(aarch64-page) %const.7
SU(5):   %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
SU(1):   STRWui %111:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
SU(2):   %117:gpr64sp = ADDXri %stack.10.t_names, 0, 0
SU(3):   %119:gpr64sp = ADDXri %stack.8.trecs, 0, 0

********** MI Scheduling **********
main:%bb.10 for.cond41
  From: %112:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.14, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %112:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%112
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %112:gpr32common, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%112
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.14, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %112:gpr32common, 11, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %112:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %112:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %112:gpr32common, 11, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.11 for.body44
  From: %128:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %128:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %128:gpr32common, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%128
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %128:gpr32common, 5, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %128:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %128:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %128:gpr32common, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.11 for.body44
  From: $x0 = MOVaddr target-flags(aarch64-page) @lu__str_25_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_25_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %118:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %120:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %125:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %125:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %120:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = COPY %118:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @lu__str_25_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_25_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_
SU(1):   $x1 = COPY %118:gpr64
SU(2):   $d0 = COPY %120:fpr64
SU(3):   $d1 = COPY %125:fpr64

********** MI Scheduling **********
main:%bb.11 for.body44
  From: %115:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %115:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%115
  Single Issue       : false;
SU(1):   %116:gpr64 = UBFMXri %115:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%115
  Successors:
    SU(3): Data Latency=1 Reg=%116
    SU(2): Data Latency=1 Reg=%116
  Single Issue       : false;
SU(2):   %118:gpr64 = LDRXroX %117:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%116
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %120:fpr64 = LDRDroX %119:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%116
  Successors:
    SU(4): Data Latency=4 Reg=%120
  Single Issue       : false;
SU(4):   %123:fpr64 = FMULDrr %120:fpr64, %122:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%120
  Successors:
    SU(6): Data Latency=1 Reg=%123
  Single Issue       : false;
SU(5):   %124:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%124
  Single Issue       : false;
SU(6):   %125:fpr64 = FDIVDrr %123:fpr64, %124:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%123
    SU(5): Data Latency=4 Reg=%124
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %125:fpr64 = FDIVDrr %123:fpr64, %124:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 5 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %123:fpr64 = FMULDrr %120:fpr64, %122:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 3 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %118:gpr64 = LDRXroX %117:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %124:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %120:fpr64 = LDRDroX %119:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %116:gpr64 = UBFMXri %115:gpr64, 61, 60
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %115:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %115:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %116:gpr64 = UBFMXri %115:gpr64, 61, 60
SU(3):   %120:fpr64 = LDRDroX %119:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
SU(5):   %124:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %118:gpr64 = LDRXroX %117:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
SU(4):   %123:fpr64 = FMULDrr %120:fpr64, %122:fpr64
SU(6):   %125:fpr64 = FDIVDrr %123:fpr64, %124:fpr64

********** MI Scheduling **********
main:%bb.12 if.then56
  From: $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @lu__str_28_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_28_rest_rhs_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %147:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %150:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %150:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %147:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @lu__str_28_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_28_rest_rhs_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @lu__str_28_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_28_rest_rhs_
SU(2):   $d0 = COPY %147:fpr64
SU(3):   $d1 = COPY %150:fpr64

********** MI Scheduling **********
main:%bb.12 if.then56
  From: %143:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %122 %119 
Live Out: %150 %147 %122 %119 
Live Thru: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %150
  LiveReg: %147
  UpdateRegP: SU(4) STRDui %147:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
              to 
  UpdateRegP: SU(5) %148:fpr64 = FMULDrr %147:fpr64, %122:fpr64
              to 
  LiveReg: %122
  UpdateRegP: SU(5) %148:fpr64 = FMULDrr %147:fpr64, %122:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %119
  UpdateRegP: SU(1) %145:fpr64 = LDRDroX %119:gpr64sp, %143:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Excess PSets: 
SU(0):   %143:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%143
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %145:fpr64 = LDRDroX %119:gpr64sp, %143:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%143
  Successors:
    SU(3): Data Latency=4 Reg=%145
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %146:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%146
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %147:fpr64 = FSUBDrr %145:fpr64, %146:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%145
    SU(2): Data Latency=4 Reg=%146
  Successors:
    SU(5): Data Latency=1 Reg=%147
    SU(4): Data Latency=1 Reg=%147
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(4):   STRDui %147:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%147
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %148:fpr64 = FMULDrr %147:fpr64, %122:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%147
  Successors:
    SU(7): Data Latency=1 Reg=%148
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(6):   %149:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=4 Reg=%149
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %150:fpr64 = FDIVDrr %148:fpr64, %149:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%148
    SU(6): Data Latency=4 Reg=%149
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %150:fpr64 = FDIVDrr %148:fpr64, %149:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %148
  UpdateRegP: SU(7) %150:fpr64 = FDIVDrr %148:fpr64, %149:fpr64
              to 
  LiveReg: %149
  UpdateRegP: SU(7) %150:fpr64 = FDIVDrr %148:fpr64, %149:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(4) 9c
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %148:fpr64 = FMULDrr %147:fpr64, %122:fpr64
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDui %147:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @2c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %147:fpr64 = FSUBDrr %145:fpr64, %146:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %145
  UpdateRegP: SU(3) %147:fpr64 = FSUBDrr %145:fpr64, %146:fpr64
              to 
  LiveReg: %146
  UpdateRegP: SU(3) %147:fpr64 = FSUBDrr %145:fpr64, %146:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %149:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @4c
  BotQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 10
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %145:fpr64 = LDRDroX %119:gpr64sp, %143:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %143
  UpdateRegP: SU(1) %145:fpr64 = LDRDroX %119:gpr64sp, %143:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %146:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %143:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @11c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %143:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   %146:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
SU(1):   %145:fpr64 = LDRDroX %119:gpr64sp, %143:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
SU(6):   %149:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
SU(3):   %147:fpr64 = FSUBDrr %145:fpr64, %146:fpr64
SU(4):   STRDui %147:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
SU(5):   %148:fpr64 = FMULDrr %147:fpr64, %122:fpr64
SU(7):   %150:fpr64 = FDIVDrr %148:fpr64, %149:fpr64

********** MI Scheduling **********
main:%bb.12 if.then56
  From: $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @lu__str_27_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_27_sub_rhs_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %134:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %139:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %139:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %134:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @lu__str_27_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_27_sub_rhs_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @lu__str_27_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_27_sub_rhs_
SU(2):   $d0 = COPY %134:fpr64
SU(3):   $d1 = COPY %139:fpr64

********** MI Scheduling **********
main:%bb.12 if.then56
  From: %130:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %122 
Live Out: %139 %134 %122 
Live Thru: FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %139
  LiveReg: %134
  UpdateRegP: SU(5) STRDui %134:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
              to 
  UpdateRegP: SU(6) %137:fpr64 = FMULDrr %134:fpr64, %122:fpr64
              to 
  LiveReg: %122
  UpdateRegP: SU(6) %137:fpr64 = FMULDrr %134:fpr64, %122:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Excess PSets: 
Cluster ld/st SU(3) - SU(1)
  Copy Succ SU(4)
SU(0):   %130:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%130
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %131:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(3): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%131
    SU(4): Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%131
    SU(0): Data Latency=4 Reg=%130
  Successors:
    SU(4): Data Latency=1 Reg=%132
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %133:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%133
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %134:fpr64 = FADDDrr %132:fpr64, %133:fpr64
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%132
    SU(3): Data Latency=4 Reg=%133
    SU(1): Ord  Latency=0 Artificial
  Successors:
    SU(6): Data Latency=1 Reg=%134
    SU(5): Data Latency=1 Reg=%134
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDui %134:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%134
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %137:fpr64 = FMULDrr %134:fpr64, %122:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%134
  Successors:
    SU(8): Data Latency=1 Reg=%137
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %138:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=%138
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %139:fpr64 = FDIVDrr %137:fpr64, %138:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%137
    SU(7): Data Latency=4 Reg=%138
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %139:fpr64 = FDIVDrr %137:fpr64, %138:fpr64
Bottom Pressure:
FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %137
  UpdateRegP: SU(8) %139:fpr64 = FDIVDrr %137:fpr64, %138:fpr64
              to 
  LiveReg: %138
  UpdateRegP: SU(8) %139:fpr64 = FDIVDrr %137:fpr64, %138:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %137:fpr64 = FMULDrr %134:fpr64, %122:fpr64
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRDui %134:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %134:fpr64 = FADDDrr %132:fpr64, %133:fpr64
Bottom Pressure:
FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %132
  UpdateRegP: SU(4) %134:fpr64 = FADDDrr %132:fpr64, %133:fpr64
              to 
  LiveReg: %133
  UpdateRegP: SU(4) %134:fpr64 = FADDDrr %132:fpr64, %133:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %138:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
Bottom Pressure:
FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %130
  UpdateRegP: SU(2) %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
              to 
  LiveReg: %131
  UpdateRegP: SU(2) %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %133:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @7c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %131:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %130:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %130:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
SU(1):   %131:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
SU(3):   %133:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
SU(2):   %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
SU(7):   %138:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
SU(4):   %134:fpr64 = FADDDrr %132:fpr64, %133:fpr64
SU(5):   STRDui %134:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
SU(6):   %137:fpr64 = FMULDrr %134:fpr64, %122:fpr64
SU(8):   %139:fpr64 = FDIVDrr %137:fpr64, %138:fpr64

********** MI Scheduling **********
main:%bb.13 for.inc72
  From: %153:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.10
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %153:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%153
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%153
  Successors:
    SU(2): Data Latency=1 Reg=%154
  Single Issue       : false;
SU(2):   STRWui %154:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%154
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %154:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %153:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %153:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
SU(2):   STRWui %154:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)

********** INTERVALS **********
WSP [112r,112d:109)[192r,192d:108)[208r,208d:107)[224r,224d:106)[256r,256d:105)[800r,800d:104)[816r,816d:103)[824r,824d:102)[832r,832d:101)[864r,864d:100)[976r,976d:99)[992r,992d:98)[1008r,1008d:97)[1024r,1024d:96)[1056r,1056d:95)[1072r,1072d:94)[1088r,1088d:93)[1104r,1104d:92)[1120r,1120d:91)[1152r,1152d:90)[1168r,1168d:89)[1184r,1184d:88)[1200r,1200d:87)[1216r,1216d:86)[1248r,1248d:85)[1264r,1264d:84)[1280r,1280d:83)[1296r,1296d:82)[1312r,1312d:81)[1344r,1344d:80)[1360r,1360d:79)[1376r,1376d:78)[1392r,1392d:77)[1408r,1408d:76)[1440r,1440d:75)[1456r,1456d:74)[1472r,1472d:73)[1488r,1488d:72)[1504r,1504d:71)[1536r,1536d:70)[1552r,1552d:69)[1600r,1600d:68)[1616r,1616d:67)[1632r,1632d:66)[1664r,1664d:65)[1680r,1680d:64)[1696r,1696d:63)[1712r,1712d:62)[1728r,1728d:61)[1760r,1760d:60)[1776r,1776d:59)[1792r,1792d:58)[1808r,1808d:57)[1824r,1824d:56)[1856r,1856d:55)[1904r,1904d:54)[1936r,1936d:53)[1952r,1952d:52)[1968r,1968d:51)[2000r,2000d:50)[2016r,2016d:49)[2032r,2032d:48)[2048r,2048d:47)[2064r,2064d:46)[2096r,2096d:45)[2112r,2112d:44)[2128r,2128d:43)[2144r,2144d:42)[2160r,2160d:41)[2192r,2192d:40)[2240r,2240d:39)[2400r,2400d:38)[2416r,2416d:37)[2432r,2432d:36)[2464r,2464d:35)[2952r,2952d:34)[2992r,2992d:33)[3000r,3000d:32)[3008r,3008d:31)[3024r,3024d:30)[3552r,3552d:29)[4032r,4032d:28)[4048r,4048d:27)[4064r,4064d:26)[4096r,4096d:25)[4352r,4352d:4)[4384r,4384d:3)[4400r,4400d:2)[4416r,4416d:1)[4448r,4448d:0)[4752r,4752d:24)[4800r,4800d:23)[4816r,4816d:22)[4832r,4832d:21)[4864r,4864d:20)[5248r,5248d:19)[5328r,5328d:18)[5344r,5344d:17)[5360r,5360d:16)[5392r,5392d:15)[5640r,5640d:14)[5712r,5712d:13)[5728r,5728d:12)[5744r,5744d:11)[5776r,5776d:10)[5928r,5928d:9)[6000r,6000d:8)[6016r,6016d:7)[6032r,6032d:6)[6064r,6064d:5)  0@4448r 1@4416r 2@4400r 3@4384r 4@4352r 5@6064r 6@6032r 7@6016r 8@6000r 9@5928r 10@5776r 11@5744r 12@5728r 13@5712r 14@5640r 15@5392r 16@5360r 17@5344r 18@5328r 19@5248r 20@4864r 21@4832r 22@4816r 23@4800r 24@4752r 25@4096r 26@4064r 27@4048r 28@4032r 29@3552r 30@3024r 31@3008r 32@3000r 33@2992r 34@2952r 35@2464r 36@2432r 37@2416r 38@2400r 39@2240r 40@2192r 41@2160r 42@2144r 43@2128r 44@2112r 45@2096r 46@2064r 47@2048r 48@2032r 49@2016r 50@2000r 51@1968r 52@1952r 53@1936r 54@1904r 55@1856r 56@1824r 57@1808r 58@1792r 59@1776r 60@1760r 61@1728r 62@1712r 63@1696r 64@1680r 65@1664r 66@1632r 67@1616r 68@1600r 69@1552r 70@1536r 71@1504r 72@1488r 73@1472r 74@1456r 75@1440r 76@1408r 77@1392r 78@1376r 79@1360r 80@1344r 81@1312r 82@1296r 83@1280r 84@1264r 85@1248r 86@1216r 87@1200r 88@1184r 89@1168r 90@1152r 91@1120r 92@1104r 93@1088r 94@1072r 95@1056r 96@1024r 97@1008r 98@992r 99@976r 100@864r 101@832r 102@824r 103@816r 104@800r 105@256r 106@224r 107@208r 108@192r 109@112r
B0 [2392r,2400r:7)[2976r,2992r:6)[2992r,3040r:5)[4000r,4032r:4)[4384r,4464r:0)[5296r,5328r:3)[5680r,5712r:2)[5968r,6000r:1)  0@4384r 1@5968r 2@5680r 3@5296r 4@4000r 5@2992r 6@2976r 7@2392r
W0 [0B,32r:0)[160r,192r:11)[808r,816r:10)[1584r,1600r:3)[1920r,1936r:2)[2320r,2400r:9)[3904r,4032r:8)[4368r,4384r:1)[4784r,4800r:7)[5264r,5328r:6)[5648r,5712r:5)[5936r,6000r:4)  0@0B-phi 1@4368r 2@1920r 3@1584r 4@5936r 5@5648r 6@5264r 7@4784r 8@3904r 9@2320r 10@808r 11@160r
W1 [0B,16r:0)[176r,192r:6)[2336r,2400r:5)[3952r,4032r:1)[5280r,5328r:4)[5664r,5712r:3)[5952r,6000r:2)  0@0B-phi 1@3952r 2@5952r 3@5664r 4@5280r 5@2336r 6@176r
%0 [32r,80r:0)  0@32r weight:0.000000e+00
%1 [16r,96r:0)  0@16r weight:0.000000e+00
%5 [272r,304r:0)  0@272r weight:0.000000e+00
%6 [912r,944r:0)  0@912r weight:0.000000e+00
%8 [352r,536r:0)  0@352r weight:0.000000e+00
%9 [368r,536r:0)  0@368r weight:0.000000e+00
%10 [400r,600r:0)  0@400r weight:0.000000e+00
%11 [432r,632r:0)  0@432r weight:0.000000e+00
%12 [464r,628r:0)  0@464r weight:0.000000e+00
%13 [496r,664r:0)  0@496r weight:0.000000e+00
%14 [528r,660r:0)  0@528r weight:0.000000e+00
%15 [560r,696r:0)  0@560r weight:0.000000e+00
%16 [592r,692r:0)  0@592r weight:0.000000e+00
%17 [624r,768r:0)  0@624r weight:0.000000e+00
%18 [656r,760r:0)  0@656r weight:0.000000e+00
%19 [688r,792r:0)  0@688r weight:0.000000e+00
%20 [776r,784r:0)  0@776r weight:0.000000e+00
%21 [752r,848r:0)  0@752r weight:0.000000e+00
%24 [1872r,3488r:0)  0@1872r weight:0.000000e+00
%25 [1888r,1984r:0)  0@1888r weight:0.000000e+00
%26 [2208r,2224r:0)  0@2208r weight:0.000000e+00
%27 [2224r,2448r:0)  0@2224r weight:0.000000e+00
%33 [2480r,2856r:0)  0@2480r weight:0.000000e+00
%35 [2856r,2864r:0)  0@2856r weight:0.000000e+00
%37 [2864r,3520r:0)  0@2864r weight:0.000000e+00
%38 [2560r,3120r:0)  0@2560r weight:0.000000e+00
%39 [2836r,2912r:0)  0@2836r weight:0.000000e+00
%40 [2872r,2880r:0)  0@2872r weight:0.000000e+00
%41 [2608r,2728r:0)  0@2608r weight:0.000000e+00
%42 [2728r,2880r:0)  0@2728r weight:0.000000e+00
%43 [2880r,2896r:0)  0@2880r weight:0.000000e+00
%44 [2656r,3136r:0)  0@2656r weight:0.000000e+00
%45 [2840r,2912r:0)  0@2840r weight:0.000000e+00
%46 [2888r,2896r:0)  0@2888r weight:0.000000e+00
%47 [2896r,2928r:0)  0@2896r weight:0.000000e+00
%48 [2720r,3168r:0)  0@2720r weight:0.000000e+00
%49 [2852r,2920r:0)  0@2852r weight:0.000000e+00
%50 [2904r,2928r:0)  0@2904r weight:0.000000e+00
%51 [2928r,3328r:0)  0@2928r weight:0.000000e+00
%52 [2912r,2920r:0)  0@2912r weight:0.000000e+00
%53 [2920r,2936r:0)  0@2920r weight:0.000000e+00
%54 [2936r,2944r:0)  0@2936r weight:0.000000e+00
%55 [2832r,2848r:0)  0@2832r weight:0.000000e+00
%56 [2848r,3408r:0)  0@2848r weight:0.000000e+00
%57 [2944r,3016r:0)  0@2944r weight:0.000000e+00
%58 [2960r,2968r:0)  0@2960r weight:0.000000e+00
%59 [2968r,2984r:0)  0@2968r weight:0.000000e+00
%60 [3040r,3300r:0)  0@3040r weight:0.000000e+00
%61 [3056r,3144r:0)  0@3056r weight:0.000000e+00
%62 [3144r,3300r:0)  0@3144r weight:0.000000e+00
%63 [3300r,3328r:0)  0@3300r weight:0.000000e+00
%64 [3328r,3492r:0)  0@3328r weight:0.000000e+00
%65 [3120r,4080r:0)  0@3120r weight:0.000000e+00
%66 [3136r,4080r:0)  0@3136r weight:0.000000e+00
%67 [3312r,3320r:0)  0@3312r weight:0.000000e+00
%68 [3168r,4080r:0)  0@3168r weight:0.000000e+00
%69 [3320r,3336r:0)  0@3320r weight:0.000000e+00
%70 [3336r,3376r:0)  0@3336r weight:0.000000e+00
%71 [3216r,3304r:0)  0@3216r weight:0.000000e+00
%72 [3304r,3376r:0)  0@3304r weight:0.000000e+00
%73 [3376r,3408r:0)  0@3376r weight:0.000000e+00
%74 [3408r,3492r:0)  0@3408r weight:0.000000e+00
%75 [3492r,3512r:0)  0@3492r weight:0.000000e+00
%76 [3296r,3384r:0)  0@3296r weight:0.000000e+00
%77 [3384r,3512r:0)  0@3384r weight:0.000000e+00
%78 [3512r,3520r:0)  0@3512r weight:0.000000e+00
%79 [3520r,3536r:0)  0@3520r weight:0.000000e+00
%80 [3368r,3416r:0)  0@3368r weight:0.000000e+00
%81 [3416r,4080r:0)  0@3416r weight:0.000000e+00
%82 [3400r,3496r:0)  0@3400r weight:0.000000e+00
%83 [3496r,3528r:0)  0@3496r weight:0.000000e+00
%84 [3528r,3536r:0)  0@3528r weight:0.000000e+00
%85 [3536r,4080r:0)  0@3536r weight:0.000000e+00
%86 [3472r,4080r:0)  0@3472r weight:0.000000e+00
%87 [3488r,4080r:0)  0@3488r weight:0.000000e+00
%88 [3504r,4080r:0)  0@3504r weight:0.000000e+00
%89 [3560r,3784r:0)  0@3560r weight:0.000000e+00
%91 [3584r,3848r:0)  0@3584r weight:0.000000e+00
%92 [3616r,3844r:0)  0@3616r weight:0.000000e+00
%93 [3648r,3864r:0)  0@3648r weight:0.000000e+00
%94 [3680r,3860r:0)  0@3680r weight:0.000000e+00
%95 [3712r,3920r:0)  0@3712r weight:0.000000e+00
%96 [3744r,3912r:0)  0@3744r weight:0.000000e+00
%97 [3776r,3936r:0)  0@3776r weight:0.000000e+00
%98 [3808r,3928r:0)  0@3808r weight:0.000000e+00
%99 [3856r,3944r:0)  0@3856r weight:0.000000e+00
%101 [4112r,4128r:0)  0@4112r weight:0.000000e+00
%102 [4128r,4144r:0)  0@4128r weight:0.000000e+00
%103 [4192r,4208r:0)  0@4192r weight:0.000000e+00
%104 [4256r,4272r:0)  0@4256r weight:0.000000e+00
%106 [4592r,4608r:0)  0@4592r weight:0.000000e+00
%107 [4608r,4648r:0)  0@4608r weight:0.000000e+00
%108 [4704r,4720r:0)  0@4704r weight:0.000000e+00
%111 [4880r,4968r:0)  0@4880r weight:0.000000e+00
%112 [5056r,5072r:0)  0@5056r weight:0.000000e+00
%115 [5136r,5152r:0)  0@5136r weight:0.000000e+00
%116 [5152r,5220r:0)  0@5152r weight:0.000000e+00
%117 [4976r,6160B:0)  0@4976r weight:0.000000e+00
%118 [5220r,5376r:0)  0@5220r weight:0.000000e+00
%119 [4984r,6160B:0)  0@4984r weight:0.000000e+00
%120 [5184r,5376r:0)  0@5184r weight:0.000000e+00
%121 [4944r,4960r:0)  0@4944r weight:0.000000e+00
%122 [4960r,6160B:0)  0@4960r weight:0.000000e+00
%123 [5224r,5232r:0)  0@5224r weight:0.000000e+00
%124 [5216r,5232r:0)  0@5216r weight:0.000000e+00
%125 [5232r,5376r:0)  0@5232r weight:0.000000e+00
%128 [5408r,5424r:0)  0@5408r weight:0.000000e+00
%130 [5488r,5544r:0)  0@5488r weight:0.000000e+00
%131 [5504r,5544r:0)  0@5504r weight:0.000000e+00
%132 [5544r,5608r:0)  0@5544r weight:0.000000e+00
%133 [5536r,5608r:0)  0@5536r weight:0.000000e+00
%134 [5608r,5760r:0)  0@5608r weight:0.000000e+00
%137 [5624r,5632r:0)  0@5624r weight:0.000000e+00
%138 [5600r,5632r:0)  0@5600r weight:0.000000e+00
%139 [5632r,5760r:0)  0@5632r weight:0.000000e+00
%143 [5792r,5832r:0)  0@5792r weight:0.000000e+00
%145 [5832r,5896r:0)  0@5832r weight:0.000000e+00
%146 [5824r,5896r:0)  0@5824r weight:0.000000e+00
%147 [5896r,6048r:0)  0@5896r weight:0.000000e+00
%148 [5912r,5920r:0)  0@5912r weight:0.000000e+00
%149 [5888r,5920r:0)  0@5888r weight:0.000000e+00
%150 [5920r,6048r:0)  0@5920r weight:0.000000e+00
%153 [6096r,6112r:0)  0@6096r weight:0.000000e+00
%154 [6112r,6128r:0)  0@6112r weight:0.000000e+00
%155 [4336r,4432r:0)  0@4336r weight:0.000000e+00
%156 [4464r,4520r:0)  0@4464r weight:0.000000e+00
%157 [4480r,4520r:0)  0@4480r weight:0.000000e+00
%158 [4224r,4576B:0)  0@4224r weight:0.000000e+00
%159 [4512r,4528r:0)  0@4512r weight:0.000000e+00
%160 [4528r,4544r:0)  0@4528r weight:0.000000e+00
RegMasks: 192r 816r 992r 1088r 1184r 1280r 1376r 1472r 1600r 1696r 1792r 1936r 2032r 2128r 2400r 2992r 4032r 4384r 4800r 5328r 5712r 6000r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=1, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=8, align=8, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=96, align=16, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=96, align=16, at location [SP]
  fi#11: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: 3.000000e+00, align=8
  cp#2: 2.000000e+00, align=8
  cp#3: -1.092330e+04, align=8
  cp#4: 2.777090e+04, align=8
  cp#5: -1.440100e+05, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0, $x1
16B	  %1:gpr64 = COPY $x1
32B	  %0:gpr32 = COPY $w0
64B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
80B	  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
96B	  STRXui %1:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
112B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
160B	  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag
176B	  $x1 = MOVaddr target-flags(aarch64-page) @lu__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_1_r_
192B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
208B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
224B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
240B	  PCN_STACKMAP 0, 0, 0, %stack.3.Class, 0, 0, %stack.11.fp, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.11.fp), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
256B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
272B	  %5:gpr64 = COPY killed $x8
288B	  STRXui %5:gpr64, %stack.11.fp, 0 :: (store 8 into %ir.fp)
304B	  CBZX %5:gpr64, %bb.2
320B	  B %bb.1

336B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

352B	  %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
368B	  %9:gpr32 = MOVi32imm 1
400B	  %10:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_2_total_
432B	  %11:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_3_rhsx_
464B	  %12:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_4_rhsy_
496B	  %13:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_5_rhsz_
528B	  %14:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_6_rhs_
536B	  STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
560B	  %15:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_7_jacld_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_7_jacld_
592B	  %16:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_8_blts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_8_blts_
600B	  STRXui %10:gpr64, %stack.10.t_names, 1 :: (store 8 into %ir.arrayidx)
624B	  %17:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_9_jacu_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_9_jacu_
628B	  STRXui %12:gpr64, %stack.10.t_names, 3 :: (store 8 into %ir.arrayidx2)
632B	  STRXui %11:gpr64, %stack.10.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
656B	  %18:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_10_buts_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_10_buts_
660B	  STRXui %14:gpr64, %stack.10.t_names, 5 :: (store 8 into %ir.arrayidx4)
664B	  STRXui %13:gpr64, %stack.10.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
688B	  %19:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_11_add_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_11_add_
692B	  STRXui %16:gpr64, %stack.10.t_names, 7 :: (store 8 into %ir.arrayidx6)
696B	  STRXui %15:gpr64, %stack.10.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
752B	  %21:gpr64 = LDRXui %stack.11.fp, 0 :: (dereferenceable load 8 from %ir.fp)
760B	  STRXui %18:gpr64, %stack.10.t_names, 9 :: (store 8 into %ir.arrayidx8)
768B	  STRXui %17:gpr64, %stack.10.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
776B	  %20:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_12_l2norm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_12_l2norm_
784B	  STRXui %20:gpr64, %stack.10.t_names, 11 :: (store 8 into %ir.arrayidx10)
792B	  STRXui %19:gpr64, %stack.10.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
800B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
808B	  $x0 = COPY %21:gpr64
816B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
824B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
832B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
848B	  PCN_STACKMAP 1, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %21:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
864B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
880B	  B %bb.3

896B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

912B	  %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
944B	  STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

960B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)

976B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
992B	  BL @read_input, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1008B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1024B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1040B	  PCN_STACKMAP 2, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1056B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1072B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1088B	  BL @domain, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1104B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1120B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1136B	  PCN_STACKMAP 3, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1152B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1168B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1184B	  BL @setcoeff, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1200B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1216B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1232B	  PCN_STACKMAP 4, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1248B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1264B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1280B	  BL @setbv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1296B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1312B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1328B	  PCN_STACKMAP 5, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1344B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1360B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1376B	  BL @setiv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1392B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1408B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1424B	  PCN_STACKMAP 6, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1440B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1456B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1472B	  BL @erhs, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1488B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1504B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1520B	  PCN_STACKMAP 7, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1536B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1552B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1584B	  $w0 = MOVi32imm 1
1600B	  BL @ssor, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
1616B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1632B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1648B	  PCN_STACKMAP 8, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1664B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1680B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1696B	  BL @setbv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1712B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1728B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1744B	  PCN_STACKMAP 9, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1760B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1776B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1792B	  BL @setiv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
1808B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1824B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1840B	  PCN_STACKMAP 10, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
1856B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1872B	  %24:gpr64temp = ADRP target-flags(aarch64-page) @itmax
1888B	  %25:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
1904B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1920B	  $w0 = COPY %25:gpr32
1936B	  BL @ssor, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
1952B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1968B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1984B	  PCN_STACKMAP 11, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %25:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
2000B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2016B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2032B	  BL @error, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
2048B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2064B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2080B	  PCN_STACKMAP 12, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
2096B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2112B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2128B	  BL @pintgr, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
2144B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2160B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2176B	  PCN_STACKMAP 13, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
2192B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2208B	  %26:gpr64temp = ADRP target-flags(aarch64-page) @frc
2224B	  %27:fpr64 = LDRDui %26:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
2240B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2320B	  $x0 = MOVaddr target-flags(aarch64-page) @rsdnm, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm
2336B	  $x1 = MOVaddr target-flags(aarch64-page) @errnm, target-flags(aarch64-pageoff, aarch64-nc) @errnm
2368B	  $x2 = ADDXri %stack.3.Class, 0, 0
2384B	  $x3 = ADDXri %stack.4.verified, 0, 0
2392B	  $d0 = COPY %27:fpr64
2400B	  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $x2, implicit killed $x3, implicit-def $sp
2416B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2432B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2448B	  PCN_STACKMAP 14, 0, 0, %stack.3.Class, 0, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, %27:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
2464B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2480B	  undef %33.ssub:fpr64 = LDRSui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
2560B	  %38:gpr64temp = ADRP target-flags(aarch64-page) @nx0
2608B	  %41:gpr64temp = ADRP target-flags(aarch64-page) %const.0
2656B	  %44:gpr64temp = ADRP target-flags(aarch64-page) @ny0
2720B	  %48:gpr64temp = ADRP target-flags(aarch64-page) @nz0
2728B	  %42:fpr64 = LDRDui %41:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
2832B	  %55:gpr64temp = ADRP target-flags(aarch64-page) %const.1
2836B	  %39:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
2840B	  %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
2848B	  %56:fpr64 = LDRDui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
2852B	  %49:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
2856B	  %35:fpr128 = SSHLLv2i32_shift %33:fpr64, 0
2864B	  %37:fpr64 = SCVTFv1i64 %35.dsub:fpr128
2872B	  %40:fpr64 = SCVTFUWDri %39:gpr32
2880B	  %43:fpr64 = FMULDrr %40:fpr64, %42:fpr64
2888B	  %46:fpr64 = SCVTFUWDri %45:gpr32
2896B	  %47:fpr64 = FMULDrr %43:fpr64, %46:fpr64
2904B	  %50:fpr64 = SCVTFUWDri %49:gpr32
2912B	  %52:gpr32 = nsw ADDWrr %39:gpr32, %45:gpr32
2920B	  %53:gpr32 = nsw ADDWrr %52:gpr32, %49:gpr32
2928B	  %51:fpr64 = FMULDrr %47:fpr64, %50:fpr64
2936B	  %54:fpr64 = SCVTFUWDri %53:gpr32
2944B	  %57:fpr64 = FDIVDrr %54:fpr64, %56:fpr64
2952B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2960B	  %58:gpr64temp = ADRP target-flags(aarch64-page) %const.2
2968B	  %59:fpr64 = LDRDui %58:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
2976B	  $d0 = COPY %57:fpr64
2984B	  $d1 = COPY %59:fpr64
2992B	  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def $d0
3000B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3008B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3016B	  PCN_STACKMAP 15, 0, 0, %stack.3.Class, 0, %37:fpr64, %57:fpr64, 0, %stack.9.i, 0, 0, %stack.5.mflops, 0, %51:fpr64, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, 0, %stack.4.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
3024B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3040B	  %60:fpr64 = COPY $d0
3056B	  %61:gpr64temp = ADRP target-flags(aarch64-page) %const.3
3120B	  %65:gpr32 = LDRWui %38:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
3136B	  %66:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
3144B	  %62:fpr64 = LDRDui %61:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
3168B	  %68:gpr32 = LDRWui %48:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
3216B	  %71:gpr64temp = ADRP target-flags(aarch64-page) %const.4
3296B	  %76:gpr64temp = ADRP target-flags(aarch64-page) %const.5
3300B	  %63:fpr64 = FMULDrr %60:fpr64, %62:fpr64
3304B	  %72:fpr64 = LDRDui %71:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
3312B	  %67:gpr32 = nsw ADDWrr %65:gpr32, %66:gpr32
3320B	  %69:gpr32 = nsw ADDWrr %67:gpr32, %68:gpr32
3328B	  %64:fpr64 = FADDDrr %51:fpr64, %63:fpr64
3336B	  %70:fpr64 = SCVTFUWDri %69:gpr32
3368B	  %80:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
3376B	  %73:fpr64 = FMULDrr %70:fpr64, %72:fpr64
3384B	  %77:fpr64 = LDRDui %76:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
3400B	  %82:gpr64temp = ADRP target-flags(aarch64-page) %const.6
3408B	  %74:fpr64 = FDIVDrr %73:fpr64, %56:fpr64
3416B	  %81:fpr64 = LDRDui %80:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
3472B	  %86:gpr32 = LDRSBWui %stack.3.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
3488B	  %87:gpr32 = LDRWui %24:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
3492B	  %75:fpr64 = FADDDrr %64:fpr64, %74:fpr64
3496B	  %83:fpr64 = LDRDui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
3504B	  %88:gpr32 = LDRWui %stack.4.verified, 0 :: (dereferenceable load 4 from %ir.verified)
3512B	  %78:fpr64 = FADDDrr %75:fpr64, %77:fpr64
3520B	  %79:fpr64 = FMULDrr %37:fpr64, %78:fpr64
3528B	  %84:fpr64 = FMULDrr %81:fpr64, %83:fpr64
3536B	  %85:fpr64 = FDIVDrr %79:fpr64, %84:fpr64
3544B	  STRDui %85:fpr64, %stack.5.mflops, 0 :: (store 8 into %ir.mflops)
3552B	  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
3560B	  %89:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_23__none__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__
3584B	  %91:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_22__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_22__O3__mcmod
3616B	  %92:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_21__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_21__g__Wall__
3648B	  %93:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_20__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_20__I___commo
3680B	  %94:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_19__lm_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_19__lm_
3712B	  %95:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_18___CC__, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_18___CC__
3744B	  %96:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_17_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_17_gcc_
3776B	  %97:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_16_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_16_03_Nov_201
3784B	  STRXui %89:gpr64, $sp, 10 :: (store 8 into stack + 80)
3808B	  %98:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_15_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_15_3_3_1_
3840B	  STRWui %88:gpr32, $sp, 2 :: (store 4 into stack + 8)
3844B	  STRXui %92:gpr64, $sp, 8 :: (store 8 into stack + 64)
3848B	  STRXui %91:gpr64, $sp, 9 :: (store 8 into stack + 72)
3856B	  %99:gpr64 = MOVaddr target-flags(aarch64-page) @lu__str_14___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_14___________
3860B	  STRXui %94:gpr64, $sp, 6 :: (store 8 into stack + 48)
3864B	  STRXui %93:gpr64, $sp, 7 :: (store 8 into stack + 56)
3904B	  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_13_LU_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_13_LU_
3912B	  STRXui %96:gpr64, $sp, 4 :: (store 8 into stack + 32)
3920B	  STRXui %95:gpr64, $sp, 5 :: (store 8 into stack + 40)
3928B	  STRXui %98:gpr64, $sp, 2 :: (store 8 into stack + 16)
3936B	  STRXui %97:gpr64, $sp, 3 :: (store 8 into stack + 24)
3944B	  STRXui %99:gpr64, $sp, 0 :: (store 8 into stack)
3952B	  $w1 = COPY %86:gpr32
3960B	  $w2 = COPY %65:gpr32
3968B	  $w3 = COPY %66:gpr32
3976B	  $w4 = COPY %68:gpr32
3984B	  $w5 = COPY %87:gpr32
4000B	  $d0 = COPY %81:fpr64
4016B	  $d1 = COPY %85:fpr64
4032B	  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp
4048B	  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp
4064B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4080B	  PCN_STACKMAP 16, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %86:gpr32, %65:gpr32, %66:gpr32, %68:gpr32, %87:gpr32, %81:fpr64, %85:fpr64, %88:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
4096B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4112B	  %101:gpr64temp = ADRP target-flags(aarch64-page) @timeron
4128B	  %102:gpr32 = LDRWui %101:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
4144B	  CBZW %102:gpr32, %bb.14
4160B	  B %bb.4

4176B	bb.4.if.then31:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

4192B	  %103:gpr32 = MOVi32imm 1
4208B	  STRWui %103:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
4224B	  %158:gpr64sp = ADDXri %stack.8.trecs, 0, 0

4240B	bb.5.for.cond:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

4256B	  %104:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
4272B	  dead $wzr = SUBSWri %104:gpr32common, 11, 0, implicit-def $nzcv
4288B	  Bcc 12, %bb.7, implicit killed $nzcv
4304B	  B %bb.6

4320B	bb.6.for.body:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

4336B	  %155:gpr32 = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
4352B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4368B	  $w0 = COPY %155:gpr32
4384B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
4400B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4416B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4432B	  PCN_STACKMAP 17, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %155:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
4448B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4464B	  %156:fpr64 = COPY $d0
4480B	  %157:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
4512B	  %159:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
4520B	  STRDroX %156:fpr64, %158:gpr64sp, %157:gpr64, 0, 1 :: (store 8 into %ir.arrayidx35)
4528B	  %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
4544B	  STRWui %160:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
4560B	  B %bb.5

4576B	bb.7.for.end:
	; predecessors: %bb.5
	  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)

4592B	  %106:gpr64temp = ADRP target-flags(aarch64-page) @maxtime
4608B	  %107:fpr64 = LDRDui %106:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
4640B	  FCMPDri %107:fpr64, implicit-def $nzcv
4648B	  STRDui %107:fpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)
4656B	  Bcc 1, %bb.9, implicit killed $nzcv
4672B	  B %bb.8

4688B	bb.8.if.then38:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

4704B	  %108:gpr64 = MOVi64imm 4607182418800017408
4720B	  STRXui %108:gpr64, %stack.7.tmax, 0 :: (store 8 into %ir.tmax)

4736B	bb.9.if.end39:
	; predecessors: %bb.7, %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

4752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4784B	  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_24___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_24___SECTION_
4800B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
4816B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4832B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4848B	  PCN_STACKMAP 18, 0, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
4864B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4880B	  %111:gpr32 = MOVi32imm 1
4944B	  %121:gpr64temp = ADRP target-flags(aarch64-page) %const.7
4960B	  %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
4968B	  STRWui %111:gpr32, %stack.9.i, 0 :: (store 4 into %ir.i)
4976B	  %117:gpr64sp = ADDXri %stack.10.t_names, 0, 0
4984B	  %119:gpr64sp = ADDXri %stack.8.trecs, 0, 0

5040B	bb.10.for.cond41:
	; predecessors: %bb.9, %bb.13
	  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)

5056B	  %112:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
5072B	  dead $wzr = SUBSWri %112:gpr32common, 11, 0, implicit-def $nzcv
5088B	  Bcc 12, %bb.14, implicit killed $nzcv
5104B	  B %bb.11

5120B	bb.11.for.body44:
	; predecessors: %bb.10
	  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)

5136B	  %115:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
5152B	  %116:gpr64 = UBFMXri %115:gpr64, 61, 60
5184B	  %120:fpr64 = LDRDroX %119:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
5216B	  %124:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
5220B	  %118:gpr64 = LDRXroX %117:gpr64sp, %116:gpr64, 0, 0 :: (load 8 from %ir.arrayidx46)
5224B	  %123:fpr64 = FMULDrr %120:fpr64, %122:fpr64
5232B	  %125:fpr64 = FDIVDrr %123:fpr64, %124:fpr64
5248B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5264B	  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_25_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_
5280B	  $x1 = COPY %118:gpr64
5296B	  $d0 = COPY %120:fpr64
5312B	  $d1 = COPY %125:fpr64
5328B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
5344B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5360B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5376B	  PCN_STACKMAP 19, 0, %125:fpr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %118:gpr64, %120:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
5392B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5408B	  %128:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
5424B	  dead $wzr = SUBSWri %128:gpr32common, 5, 0, implicit-def $nzcv
5440B	  Bcc 1, %bb.13, implicit killed $nzcv
5456B	  B %bb.12

5472B	bb.12.if.then56:
	; predecessors: %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

5488B	  %130:fpr64 = LDRDui %stack.8.trecs, 2 :: (dereferenceable load 8 from %ir.arrayidx57, align 16)
5504B	  %131:fpr64 = LDRDui %stack.8.trecs, 3 :: (dereferenceable load 8 from %ir.arrayidx58)
5536B	  %133:fpr64 = LDRDui %stack.8.trecs, 4 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
5544B	  %132:fpr64 = FADDDrr %130:fpr64, %131:fpr64
5600B	  %138:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
5608B	  %134:fpr64 = FADDDrr %132:fpr64, %133:fpr64
5616B	  STRDui %134:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
5624B	  %137:fpr64 = FMULDrr %134:fpr64, %122:fpr64
5632B	  %139:fpr64 = FDIVDrr %137:fpr64, %138:fpr64
5640B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5648B	  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
5664B	  $x1 = MOVaddr target-flags(aarch64-page) @lu__str_27_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_27_sub_rhs_
5680B	  $d0 = COPY %134:fpr64
5696B	  $d1 = COPY %139:fpr64
5712B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
5728B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5744B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5760B	  PCN_STACKMAP 20, 0, %139:fpr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %134:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
5776B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5792B	  %143:gpr64 = LDRSWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
5824B	  %146:fpr64 = LDRDui %stack.6.t, 0 :: (dereferenceable load 8 from %ir.t)
5832B	  %145:fpr64 = LDRDroX %119:gpr64sp, %143:gpr64, 0, 1 :: (load 8 from %ir.arrayidx66)
5888B	  %149:fpr64 = LDRDui %stack.7.tmax, 0 :: (dereferenceable load 8 from %ir.tmax)
5896B	  %147:fpr64 = FSUBDrr %145:fpr64, %146:fpr64
5904B	  STRDui %147:fpr64, %stack.6.t, 0 :: (store 8 into %ir.t)
5912B	  %148:fpr64 = FMULDrr %147:fpr64, %122:fpr64
5920B	  %150:fpr64 = FDIVDrr %148:fpr64, %149:fpr64
5928B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5936B	  $x0 = MOVaddr target-flags(aarch64-page) @lu__str_26___________, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________
5952B	  $x1 = MOVaddr target-flags(aarch64-page) @lu__str_28_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_28_rest_rhs_
5968B	  $d0 = COPY %147:fpr64
5984B	  $d1 = COPY %150:fpr64
6000B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
6016B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6032B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6048B	  PCN_STACKMAP 21, 0, %150:fpr64, 0, %stack.9.i, 0, 0, %stack.6.t, 0, 0, %stack.10.t_names, 0, 0, %stack.7.tmax, 0, 0, %stack.8.trecs, 0, %147:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
6064B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6080B	bb.13.for.inc72:
	; predecessors: %bb.11, %bb.12
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

6096B	  %153:gpr32common = LDRWui %stack.9.i, 0 :: (dereferenceable load 4 from %ir.i)
6112B	  %154:gpr32common = nsw ADDWri %153:gpr32common, 1, 0
6128B	  STRWui %154:gpr32common, %stack.9.i, 0 :: (store 4 into %ir.i)
6144B	  B %bb.10

6160B	bb.14.if.end75:
	; predecessors: %bb.3, %bb.10

6192B	  $w8 = COPY $wzr
6208B	  RET_ReallyLR implicit killed $w8

# End machine code for function main.

Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=4, align=4, at location [SP-48]
  fi#2: size=8, align=8, at location [SP-56]
  fi#3: size=1, align=4, at location [SP-60]
  fi#4: size=4, align=4, at location [SP-64]
  fi#5: size=8, align=8, at location [SP-72]
  fi#6: size=8, align=8, at location [SP-80]
  fi#7: size=8, align=8, at location [SP-88]
  fi#8: size=96, align=16, at location [SP-192]
  fi#9: size=4, align=4, at location [SP-196]
  fi#10: size=96, align=16, at location [SP-304]
  fi#11: size=8, align=8, at location [SP-312]
  fi#12: size=8, align=8, at location [SP-320]
  fi#13: size=8, align=8, at location [SP-328]
  fi#14: size=8, align=8, at location [SP-336]
  fi#15: size=8, align=8, at location [SP-344]
  fi#16: size=4, align=4, at location [SP-348]
  fi#17: size=8, align=8, at location [SP-360]
  fi#18: dead
  fi#19: dead
  fi#20: dead
  fi#21: dead
  fi#22: dead
  fi#23: dead
  fi#24: dead
  fi#25: dead
  fi#26: dead
  fi#27: dead
  fi#28: dead
  fi#29: dead
  fi#30: size=8, align=8, at location [SP-40]
  fi#31: size=8, align=8, at location [SP-8]
  fi#32: size=8, align=8, at location [SP-16]
  fi#33: size=8, align=8, at location [SP-24]
  fi#34: size=8, align=8, at location [SP-32]
Constant Pool:
  cp#0: 1.984770e+03, align=8
  cp#1: 3.000000e+00, align=8
  cp#2: 2.000000e+00, align=8
  cp#3: -1.092330e+04, align=8
  cp#4: 2.777090e+04, align=8
  cp#5: -1.440100e+05, align=8
  cp#6: 1.000000e+06, align=8
  cp#7: 1.000000e+02, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 448, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 52 :: (store 8 into %stack.34), (store 8 into %stack.33)
  frame-setup STPXi killed $fp, killed $lr, $sp, 54 :: (store 8 into %stack.32), (store 8 into %stack.31)
  $fp = frame-setup ADDXri $sp, 432, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STURXi killed renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
  $x0 = ADRP target-flags(aarch64-page) @lu__str_timer_flag
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag, 0
  $x1 = ADRP target-flags(aarch64-page) @lu__str_1_r_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_1_r_, 0
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  PCN_STACKMAP 0, 0, 0, $fp, -44, 0, $fp, -296, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.11.fp), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  STRXui renamable $x8, $sp, 17 :: (store 8 into %ir.fp)
  CBZX killed renamable $x8, %bb.2

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  $w16 = MOVZWi 1, 0
  $x17 = ADRP target-flags(aarch64-page) @lu__str_2_total_
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_2_total_, 0
  $x18 = ADRP target-flags(aarch64-page) @lu__str_3_rhsx_
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_3_rhsx_, 0
  $x0 = ADRP target-flags(aarch64-page) @lu__str_4_rhsy_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_4_rhsy_, 0
  $x1 = ADRP target-flags(aarch64-page) @lu__str_5_rhsz_
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_5_rhsz_, 0
  $x2 = ADRP target-flags(aarch64-page) @lu__str_6_rhs_
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_6_rhs_, 0
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  $x8 = ADRP target-flags(aarch64-page) @lu__str_7_jacld_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_7_jacld_, 0
  $x16 = ADRP target-flags(aarch64-page) @lu__str_8_blts_
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_8_blts_, 0
  STPXi renamable $x17, renamable $x18, $sp, 19 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
  $x17 = ADRP target-flags(aarch64-page) @lu__str_9_jacu_
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_9_jacu_, 0
  STPXi renamable $x0, renamable $x1, $sp, 21 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
  $x18 = ADRP target-flags(aarch64-page) @lu__str_10_buts_
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_10_buts_, 0
  STPXi renamable $x2, renamable $x8, $sp, 23 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
  $x0 = ADRP target-flags(aarch64-page) @lu__str_11_add_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_11_add_, 0
  STPXi renamable $x16, renamable $x17, $sp, 25 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
  renamable $x19 = LDRXui $sp, 17 :: (dereferenceable load 8 from %ir.fp)
  STPXi renamable $x18, renamable $x0, $sp, 27 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
  $x8 = ADRP target-flags(aarch64-page) @lu__str_12_l2norm_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_12_l2norm_, 0
  STRXui killed renamable $x8, $sp, 29 :: (store 8 into %ir.arrayidx10)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 1, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  STRWui $wzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.14(0x30000000); %bb.4(62.50%), %bb.14(37.50%)

  BL @read_input, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 2, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  BL @domain, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 3, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  BL @setcoeff, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 4, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  BL @setbv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 5, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  BL @setiv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 6, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  BL @erhs, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 7, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  $w0 = MOVZWi 1, 0
  BL @ssor, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 8, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  BL @setbv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 9, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  BL @setiv, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 10, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @itmax
  renamable $w19 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @ssor, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 11, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  BL @error, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 12, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  BL @pintgr, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 13, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @frc
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)
  $x0 = ADRP target-flags(aarch64-page) @rsdnm
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm, 0
  $x1 = ADRP target-flags(aarch64-page) @errnm
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @errnm, 0
  $x2 = SUBXri $fp, 44, 0
  $x3 = SUBXri $fp, 48, 0
  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $x2, implicit $x3, implicit-def $sp
  PCN_STACKMAP 14, 0, 0, $fp, -44, 0, $fp, -180, 0, $fp, -56, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, 1, 8, $fp, -304, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4), (load 8 from %stack.12)
  renamable $x8 = ADRP target-flags(aarch64-page) @itmax
  renamable $s0 = LDRSui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax, implicit-def $d0 :: (dereferenceable load 4 from @itmax)
  renamable $x16 = ADRP target-flags(aarch64-page) @nx0
  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $x17 = ADRP target-flags(aarch64-page) @ny0
  renamable $x18 = ADRP target-flags(aarch64-page) @nz0
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  renamable $w17 = LDRWui killed renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  renamable $d2 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  renamable $w8 = LDRWui killed renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  renamable $q0 = SSHLLv2i32_shift killed renamable $d0, 0
  renamable $d0 = SCVTFv1i64 renamable $d0, implicit killed $q0
  STRDui killed renamable $d0, $sp, 16 :: (store 8 into %stack.12)
  renamable $d0 = SCVTFUWDri renamable $w16
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = SCVTFUWDri renamable $w17
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = SCVTFUWDri renamable $w8
  $w16 = ADDWrs killed renamable $w16, killed renamable $w17, 0
  $w8 = ADDWrs killed renamable $w16, killed renamable $w8, 0
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  STPDi renamable $d2, killed renamable $d0, $sp, 14 :: (store 8 into %stack.14), (store 8 into %stack.13)
  renamable $d0 = SCVTFUWDri killed renamable $w8
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d2
  STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.15)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
  renamable $d2, renamable $d4 = LDPDi $sp, 15 :: (load 8 from %stack.12), (load 8 from %stack.13)
  PCN_STACKMAP 15, 0, 0, $fp, -44, 1, 8, $fp, -304, 1, 8, $fp, -328, 0, $fp, -180, 0, $fp, -56, 1, 8, $fp, -312, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 0, $fp, -48, implicit-def dead early-clobber $lr, implicit-def dead early-clobber $lr, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.Class, align 4), (load 8 from %stack.9.i, align 4), (load 8 from %stack.5.mflops), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.4.verified, align 4), (load 8 from %stack.15)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  renamable $x16 = ADRP target-flags(aarch64-page) @nx0
  renamable $w17 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  renamable $x16 = ADRP target-flags(aarch64-page) @ny0
  renamable $w18 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) @nz0
  renamable $w0 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  $w8 = ADDWrs renamable $w17, renamable $w18, 0
  $w3 = ORRWrs $wzr, $w18, 0
  STPWi $w18, $w17, $sp, 25 :: (store 4 into %stack.16), (store 4 into %stack.15)
  $w2 = ORRWrs $wzr, $w17, 0
  $w8 = ADDWrs killed renamable $w8, renamable $w0, 0
  $w4 = ORRWrs $wzr, killed $w0, 0
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  renamable $d2 = SCVTFUWDri killed renamable $w8
  renamable $x8 = ADRP target-flags(aarch64-page) @maxtime
  renamable $d1 = FMULDrr killed renamable $d2, killed renamable $d1
  renamable $d2 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  renamable $x16 = ADRP target-flags(aarch64-page) %const.6
  renamable $d3 = LDRDui $sp, 14 :: (load 8 from %stack.14)
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d3
  renamable $d3 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  renamable $w1 = LDURSBWi $fp, -44 :: (dereferenceable load 1 from %ir.Class, align 4)
  STRWui renamable $w1, $sp, 28 :: (store 4 into %stack.14)
  renamable $x8 = ADRP target-flags(aarch64-page) @itmax
  renamable $w5 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  renamable $w20 = LDURWi $fp, -48 :: (dereferenceable load 4 from %ir.verified)
  STRWui renamable $w20, $sp, 30 :: (store 4 into %stack.13)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d2
  renamable $d0 = FMULDrr killed renamable $d4, killed renamable $d0
  renamable $d1 = FMULDrr renamable $d3, killed renamable $d1
  STRDui renamable $d3, $sp, 11 :: (store 8 into %stack.17)
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1
  STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.mflops)
  $q1 = ORRv16i8 $q0, $q0
  STRDui $d0, $sp, 16 :: (store 8 into %stack.12)
  $x8 = ADRP target-flags(aarch64-page) @lu__str_23__none__
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__, 0
  $x16 = ADRP target-flags(aarch64-page) @lu__str_22__O3__mcmod
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_22__O3__mcmod, 0
  $x17 = ADRP target-flags(aarch64-page) @lu__str_21__g__Wall__
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_21__g__Wall__, 0
  $x18 = ADRP target-flags(aarch64-page) @lu__str_20__I___commo
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_20__I___commo, 0
  $x0 = ADRP target-flags(aarch64-page) @lu__str_19__lm_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_19__lm_, 0
  $x7 = ADRP target-flags(aarch64-page) @lu__str_18___CC__
  renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_18___CC__, 0
  $x6 = ADRP target-flags(aarch64-page) @lu__str_17_gcc_
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_17_gcc_, 0
  $x19 = ADRP target-flags(aarch64-page) @lu__str_16_03_Nov_201
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_16_03_Nov_201, 0
  STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  $x8 = ADRP target-flags(aarch64-page) @lu__str_15_3_3_1_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_15_3_3_1_, 0
  STRWui killed renamable $w20, $sp, 2 :: (store 4 into stack + 8)
  STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  $x16 = ADRP target-flags(aarch64-page) @lu__str_14___________
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_14___________, 0
  STPXi renamable $x7, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  $x0 = ADRP target-flags(aarch64-page) @lu__str_13_LU_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_13_LU_, 0
  STPXi renamable $x19, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  STRXui killed renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  STRXui killed renamable $x16, $sp, 0 :: (store 8 into stack)
  $w20 = ORRWrs $wzr, $w4, 0
  $w19 = ORRWrs $wzr, $w5, 0
  $q0 = ORRv16i8 $q3, killed $q3
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
  PCN_STACKMAP 16, 0, 0, $fp, -180, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 1, 4, $fp, -320, 1, 4, $fp, -328, 1, 4, $fp, -332, killed renamable $w20, killed renamable $w19, 1, 8, $fp, -344, 1, 8, $fp, -304, 1, 4, $fp, -312, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 4 from %stack.13), (load 4 from %stack.14), (load 4 from %stack.15), (load 4 from %stack.16), (load 8 from %stack.17), (load 8 from %stack.12)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.14

bb.4.if.then31:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  $x20 = SUBXri $fp, 176, 0

bb.5.for.cond:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.7, implicit $nzcv

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x20
  renamable $w19 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  PCN_STACKMAP 17, 0, 0, $fp, -180, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  renamable $w16 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  STRDroX killed renamable $d0, renamable $x20, killed renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx35)
  renamable $w8 = nsw ADDWri killed renamable $w16, 1, 0
  STURWi killed renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  B %bb.5

bb.7.for.end:
; predecessors: %bb.5
  successors: %bb.8(0x50000000), %bb.9(0x30000000); %bb.8(62.50%), %bb.9(37.50%)

  renamable $x8 = ADRP target-flags(aarch64-page) @maxtime
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  FCMPDri renamable $d0, implicit-def $nzcv
  STURDi killed renamable $d0, $fp, -72 :: (store 8 into %ir.tmax)
  Bcc 1, %bb.9, implicit $nzcv

bb.8.if.then38:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  $x8 = MOVZXi 16368, 48
  STURXi killed renamable $x8, $fp, -72 :: (store 8 into %ir.tmax)

bb.9.if.end39:
; predecessors: %bb.7, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @lu__str_24___SECTION_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_24___SECTION_, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 18, 0, 0, $fp, -180, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16)
  $w8 = MOVZWi 1, 0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.7
  renamable $d0 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  STRDui killed renamable $d0, $sp, 16 :: (store 8 into %stack.12)
  STURWi killed renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  $x20 = SUBXri $fp, 176, 0

bb.10.for.cond41:
; predecessors: %bb.9, %bb.13
  successors: %bb.11(0x7c000000), %bb.14(0x04000000); %bb.11(96.88%), %bb.14(3.12%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 11, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit $nzcv

bb.11.for.body44:
; predecessors: %bb.10
  successors: %bb.12(0x40000000), %bb.13(0x40000000); %bb.12(50.00%), %bb.13(50.00%)
  liveins: $x20
  renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60
  renamable $d0 = LDRDroX renamable $x20, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx50)
  renamable $d2 = LDURDi $fp, -72 :: (dereferenceable load 8 from %ir.tmax)
  $x16 = ADDXri $sp, 144, 0
  renamable $x19 = LDRXroX killed renamable $x16, killed renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx46)
  renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.12)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2
  STPDi renamable $d1, renamable $d0, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)
  $x0 = ADRP target-flags(aarch64-page) @lu__str_25_____8s__9_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_, 0
  $x1 = ORRXrs $xzr, $x19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 19, 0, 1, 8, $fp, -320, 0, $fp, -180, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, killed renamable $x19, 1, 8, $fp, -312, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.13), (load 8 from %stack.14)
  renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.13, implicit $nzcv

bb.12.if.then56:
; predecessors: %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $x20
  renamable $d0, renamable $d1 = LDPDi $fp, -20 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
  renamable $d2 = LDURDi $fp, -144 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDURDi $fp, -72 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d2 = FADDDrr killed renamable $d0, killed renamable $d2
  STURDi renamable $d2, $fp, -64 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 16 :: (load 8 from %stack.12)
  renamable $d0 = FMULDrr renamable $d2, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d1
  STPDi renamable $d1, renamable $d2, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)
  $x0 = ADRP target-flags(aarch64-page) @lu__str_26___________
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________, 0
  $x1 = ADRP target-flags(aarch64-page) @lu__str_27_sub_rhs_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_27_sub_rhs_, 0
  $q0 = ORRv16i8 $q2, killed $q2
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 20, 0, 1, 8, $fp, -320, 0, $fp, -180, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 1, 8, $fp, -312, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.13), (load 8 from %stack.14)
  renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  renamable $d2, renamable $d0 = LDPDi $fp, -9 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  renamable $d1 = LDRDroX renamable $x20, killed renamable $x8, 0, 1 :: (load 8 from %ir.arrayidx66)
  renamable $d3 = FSUBDrr killed renamable $d1, killed renamable $d0
  STURDi renamable $d3, $fp, -64 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 16 :: (load 8 from %stack.12)
  renamable $d0 = FMULDrr renamable $d3, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d2
  STPDi renamable $d1, renamable $d3, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)
  $x0 = ADRP target-flags(aarch64-page) @lu__str_26___________
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________, 0
  $x1 = ADRP target-flags(aarch64-page) @lu__str_28_rest_rhs_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_28_rest_rhs_, 0
  $q0 = ORRv16i8 $q3, killed $q3
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 21, 0, 1, 8, $fp, -320, 0, $fp, -180, 0, $fp, -64, 0, $fp, -288, 0, $fp, -72, 0, $fp, -176, 1, 8, $fp, -312, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.i, align 4), (load 8 from %stack.6.t), (load 8 from %stack.10.t_names, align 16), (load 8 from %stack.7.tmax), (load 8 from %stack.8.trecs, align 16), (load 8 from %stack.13), (load 8 from %stack.14)

bb.13.for.inc72:
; predecessors: %bb.11, %bb.12
  successors: %bb.10(0x80000000); %bb.10(100.00%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  B %bb.10

bb.14.if.end75:
; predecessors: %bb.3, %bb.10

  $w8 = ORRWrs $wzr, $wzr, 0
  $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.32), (load 8 from %stack.31)
  $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.34), (load 8 from %stack.33)
  $sp = frame-destroy ADDXri $sp, 448, 0
  RET undef $lr, implicit $w8

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Anti Latency=0
SU(1):   STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Anti Latency=0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @lu__str_timer_flag
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADRP target-flags(aarch64-page) @lu__str_1_r_
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
SU(5):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_1_r_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @lu__str_timer_flag
  Ready @2c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x1 = ADRP target-flags(aarch64-page) @lu__str_1_r_
  Ready @3c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag, 0
  Ready @4c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_1_r_, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(1):   STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @lu__str_timer_flag
SU(4):   $x1 = ADRP target-flags(aarch64-page) @lu__str_1_r_
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_timer_flag, 0
SU(5):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_1_r_, 0

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 52 :: (store 8 into %stack.34), (store 8 into %stack.33)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 52 :: (store 8 into %stack.34), (store 8 into %stack.33)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 54 :: (store 8 into %stack.32), (store 8 into %stack.31)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 432, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 52 :: (store 8 into %stack.34), (store 8 into %stack.33)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 54 :: (store 8 into %stack.32), (store 8 into %stack.31)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 432, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 52 :: (store 8 into %stack.34), (store 8 into %stack.33)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 54 :: (store 8 into %stack.32), (store 8 into %stack.31)
SU(2):   $fp = frame-setup ADDXri $sp, 432, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 if.then
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 33
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
SU(1):   $w16 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(15): Out  Latency=1
    SU(12): Data Latency=1 Reg=$w16
SU(2):   $x17 = ADRP target-flags(aarch64-page) @lu__str_2_total_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_2_total_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x17
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x17
SU(4):   $x18 = ADRP target-flags(aarch64-page) @lu__str_3_rhsx_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x18
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_3_rhsx_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
  Successors:
    SU(21): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x18
SU(6):   $x0 = ADRP target-flags(aarch64-page) @lu__str_4_rhsy_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_4_rhsy_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    SU(24): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x0
SU(8):   $x1 = ADRP target-flags(aarch64-page) @lu__str_5_rhsz_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
SU(9):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_5_rhsz_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
  Successors:
    SU(20): Data Latency=1 Reg=$x1
SU(10):   $x2 = ADRP target-flags(aarch64-page) @lu__str_6_rhs_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x2
SU(11):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_6_rhs_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x2
  Successors:
    SU(23): Data Latency=1 Reg=$x2
SU(12):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(15): Anti Latency=0
    SU(13): Anti Latency=0
SU(13):   $x8 = ADRP target-flags(aarch64-page) @lu__str_7_jacld_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(12): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_7_jacld_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
  Successors:
    SU(29): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x8
SU(15):   $x16 = ADRP target-flags(aarch64-page) @lu__str_8_blts_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(12): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x16
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_8_blts_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x16
  Successors:
    SU(26): Data Latency=1 Reg=$x16
SU(17):   STPXi renamable $x17, renamable $x18, $sp, 19 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1 Reg=$x18
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    SU(18): Anti Latency=0
    SU(21): Anti Latency=0
SU(18):   $x17 = ADRP target-flags(aarch64-page) @lu__str_9_jacu_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(17): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x17
SU(19):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_9_jacu_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x17
  Successors:
    SU(26): Data Latency=1 Reg=$x17
SU(20):   STPXi renamable $x0, renamable $x1, $sp, 21 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(9): Data Latency=1 Reg=$x1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    SU(24): Anti Latency=0
SU(21):   $x18 = ADRP target-flags(aarch64-page) @lu__str_10_buts_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(17): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x18
SU(22):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_10_buts_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x18
  Successors:
    SU(28): Data Latency=1 Reg=$x18
SU(23):   STPXi renamable $x2, renamable $x8, $sp, 23 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(14): Data Latency=1 Reg=$x8
    SU(11): Data Latency=1 Reg=$x2
  Successors:
    SU(29): Anti Latency=0
SU(24):   $x0 = ADRP target-flags(aarch64-page) @lu__str_11_add_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(20): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x0
SU(25):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_11_add_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x0
  Successors:
    SU(32): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x0
SU(26):   STPXi renamable $x16, renamable $x17, $sp, 25 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$x17
    SU(16): Data Latency=1 Reg=$x16
SU(27):   renamable $x19 = LDRXui $sp, 17 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(32): Data Latency=4 Reg=$x19
SU(28):   STPXi renamable $x18, renamable $x0, $sp, 27 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(25): Data Latency=1 Reg=$x0
    SU(22): Data Latency=1 Reg=$x18
  Successors:
    SU(32): Anti Latency=0
SU(29):   $x8 = ADRP target-flags(aarch64-page) @lu__str_12_l2norm_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(23): Anti Latency=0
    SU(14): Out  Latency=1
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x8
SU(30):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_12_l2norm_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x8
  Successors:
    SU(31): Data Latency=1 Reg=$x8
SU(31):   STRXui renamable $x8, $sp, 29 :: (store 8 into %ir.arrayidx10)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(30): Data Latency=1 Reg=$x8
SU(32):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(28): Anti Latency=0
    SU(27): Data Latency=4 Reg=$x19
    SU(25): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(32): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 8 10 27 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 1 2 4 6 8 10 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $w16 = MOVZWi 1, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 2 4 6 8 12 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x17 = ADRP target-flags(aarch64-page) @lu__str_2_total_
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 12 4 6 8 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x18 = ADRP target-flags(aarch64-page) @lu__str_3_rhsx_
  Ready @3c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 12 3 6 8 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @lu__str_4_rhsy_
  Ready @4c
  TopQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 12 3 5 8 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(27) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADRP target-flags(aarch64-page) @lu__str_5_rhsz_
  Ready @5c
  TopQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 10 12 3 5 7 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(27) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(27) renamable $x19 = LDRXui $sp, 17 :: (dereferenceable load 8 from %ir.fp)
  Ready @6c
  TopQ.A BotLatency SU(27) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 12 3 5 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_2_total_, 0
  Ready @7c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 12 7 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_3_rhsx_, 0
  Ready @8c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 12 7 17 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_4_rhsy_, 0
  Ready @9c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 12 17 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_5_rhsz_, 0
  Ready @10c
  TopQ.A BotLatency SU(9) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 10 12 20 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(10) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x2 = ADRP target-flags(aarch64-page) @lu__str_6_rhs_
  Ready @11c
  TopQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 12 11 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(12) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @12c
  TopQ.A BotLatency SU(12) 4c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 11 15 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x8 = ADRP target-flags(aarch64-page) @lu__str_7_jacld_
  Ready @13c
  TopQ.A BotLatency SU(13) 4c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 11 15 14 
  TopQ.A RemainingLatency 0 + 14c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_6_rhs_, 0
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 14 15 
  TopQ.A RemainingLatency 0 + 15c > CritPath 5
  Cand SU(17) ORDER                              
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_7_jacld_, 0
  Ready @15c
  TopQ.A TopLatency SU(14) 2c
  TopQ.A BotLatency SU(14) 3c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 20 15 23 
  TopQ.A RemainingLatency 0 + 16c > CritPath 5
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) STPXi renamable $x17, renamable $x18, $sp, 19 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
  Ready @16c
  TopQ.A BotLatency SU(17) 3c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 20 15 18 21 
  TopQ.A RemainingLatency 0 + 17c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(20) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) STPXi renamable $x0, renamable $x1, $sp, 21 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
  Ready @17c
  TopQ.A BotLatency SU(20) 3c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 21 15 18 24 
  TopQ.A RemainingLatency 0 + 18c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(21) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) $x18 = ADRP target-flags(aarch64-page) @lu__str_10_buts_
  Ready @18c
  TopQ.A BotLatency SU(21) 3c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 24 15 18 22 
  TopQ.A RemainingLatency 0 + 19c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) $x0 = ADRP target-flags(aarch64-page) @lu__str_11_add_
  Ready @19c
  TopQ.A BotLatency SU(24) 3c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 22 15 18 25 
  TopQ.A RemainingLatency 0 + 20c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(15) ORDER                              
Pick Top ORDER     
Scheduling SU(15) $x16 = ADRP target-flags(aarch64-page) @lu__str_8_blts_
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 22 25 18 16 
  TopQ.A RemainingLatency 0 + 21c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(22) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) $x17 = ADRP target-flags(aarch64-page) @lu__str_9_jacu_
  Ready @21c
  TopQ.A BotLatency SU(18) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 22 25 16 19 
  TopQ.A RemainingLatency 0 + 22c > CritPath 5
  Cand SU(23) ORDER                              
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_10_buts_, 0
  Ready @22c
  TopQ.A TopLatency SU(22) 3c
  TopQ.A BotLatency SU(22) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 19 25 16 
  TopQ.A RemainingLatency 0 + 23c > CritPath 5
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) STPXi renamable $x2, renamable $x8, $sp, 23 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
  Ready @23c
  TopQ.A BotLatency SU(23) 2c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 19 25 29 
  TopQ.A RemainingLatency 0 + 24c > CritPath 5
  Cand SU(16) ORDER                              
  Cand SU(25) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_11_add_, 0
  Ready @24c
  TopQ.A BotLatency SU(25) 2c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 19 29 28 
  TopQ.A RemainingLatency 0 + 25c > CritPath 5
  Cand SU(16) ORDER                              
  Cand SU(29) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(29) $x8 = ADRP target-flags(aarch64-page) @lu__str_12_l2norm_
  Ready @25c
  TopQ.A BotLatency SU(29) 2c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 19 28 30 
  TopQ.A RemainingLatency 0 + 26c > CritPath 5
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_8_blts_, 0
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 19 28 
  TopQ.A RemainingLatency 0 + 27c > CritPath 5
  Cand SU(30) ORDER                              
  Cand SU(19) ORDER                              
Pick Top ORDER     
Scheduling SU(19) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_9_jacu_, 0
  Ready @27c
  TopQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 28 26 
  TopQ.A RemainingLatency 0 + 28c > CritPath 5
  Cand SU(30) ORDER                              
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) STPXi renamable $x18, renamable $x0, $sp, 27 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
  Ready @28c
  TopQ.A TopLatency SU(28) 4c
  TopQ.A BotLatency SU(28) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 30 26 32 
  TopQ.A RemainingLatency 0 + 29c > CritPath 5
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_12_l2norm_, 0
  Ready @29c
  TopQ.A BotLatency SU(30) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 32 26 31 
  TopQ.A RemainingLatency 0 + 30c > CritPath 5
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) $x0 = ORRXrs $xzr, $x19, 0
  Ready @30c
  TopQ.A BotLatency SU(32) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 26 
  TopQ.A RemainingLatency 0 + 31c > CritPath 5
  Cand SU(31) ORDER                              
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) STPXi renamable $x16, renamable $x17, $sp, 25 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 31 
Pick Top ONLY1     
Scheduling SU(31) STRXui renamable $x8, $sp, 29 :: (store 8 into %ir.arrayidx10)
  Ready @32c
  TopQ.A TopLatency SU(31) 5c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   $w16 = MOVZWi 1, 0
SU(2):   $x17 = ADRP target-flags(aarch64-page) @lu__str_2_total_
SU(4):   $x18 = ADRP target-flags(aarch64-page) @lu__str_3_rhsx_
SU(6):   $x0 = ADRP target-flags(aarch64-page) @lu__str_4_rhsy_
SU(8):   $x1 = ADRP target-flags(aarch64-page) @lu__str_5_rhsz_
SU(27):   renamable $x19 = LDRXui $sp, 17 :: (dereferenceable load 8 from %ir.fp)
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_2_total_, 0
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_3_rhsx_, 0
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_4_rhsy_, 0
SU(9):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_5_rhsz_, 0
SU(10):   $x2 = ADRP target-flags(aarch64-page) @lu__str_6_rhs_
SU(12):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(13):   $x8 = ADRP target-flags(aarch64-page) @lu__str_7_jacld_
SU(11):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_6_rhs_, 0
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_7_jacld_, 0
SU(17):   STPXi renamable $x17, renamable $x18, $sp, 19 :: (store 8 into %ir.arrayidx), (store 8 into %ir.arrayidx1, align 16)
SU(20):   STPXi renamable $x0, renamable $x1, $sp, 21 :: (store 8 into %ir.arrayidx2), (store 8 into %ir.arrayidx3, align 16)
SU(21):   $x18 = ADRP target-flags(aarch64-page) @lu__str_10_buts_
SU(24):   $x0 = ADRP target-flags(aarch64-page) @lu__str_11_add_
SU(15):   $x16 = ADRP target-flags(aarch64-page) @lu__str_8_blts_
SU(18):   $x17 = ADRP target-flags(aarch64-page) @lu__str_9_jacu_
SU(22):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_10_buts_, 0
SU(23):   STPXi renamable $x2, renamable $x8, $sp, 23 :: (store 8 into %ir.arrayidx4), (store 8 into %ir.arrayidx5, align 16)
SU(25):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_11_add_, 0
SU(29):   $x8 = ADRP target-flags(aarch64-page) @lu__str_12_l2norm_
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_8_blts_, 0
SU(19):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_9_jacu_, 0
SU(28):   STPXi renamable $x18, renamable $x0, $sp, 27 :: (store 8 into %ir.arrayidx8), (store 8 into %ir.arrayidx9, align 16)
SU(30):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_12_l2norm_, 0
SU(32):   $x0 = ORRXrs $xzr, $x19, 0
SU(26):   STPXi renamable $x16, renamable $x17, $sp, 25 :: (store 8 into %ir.arrayidx6), (store 8 into %ir.arrayidx7, align 16)
SU(31):   STRXui renamable $x8, $sp, 29 :: (store 8 into %ir.arrayidx10)

Fixup kills for %bb.1
********** MI Scheduling **********
main:%bb.2 if.else
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.14
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.3
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
 RegionInstrs: 75
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 18
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nx0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 18
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w17 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 17
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(47): Out  Latency=1
    SU(15): Data Latency=4 Reg=$w17
    SU(14): Data Latency=4 Reg=$w17
    SU(12): Data Latency=4 Reg=$w17
    SU(3): Anti Latency=0
SU(3):   renamable $x16 = ADRP target-flags(aarch64-page) @ny0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 17
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
SU(4):   renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 16
  Predecessors:
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    SU(49): Out  Latency=1
    SU(14): Data Latency=4 Reg=$w18
    SU(13): Data Latency=4 Reg=$w18
    SU(12): Data Latency=4 Reg=$w18
    SU(9): Anti Latency=0
SU(5):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 17
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(11): Out  Latency=1
    SU(41): Out  Latency=1
    SU(10): Data Latency=4 Reg=$d1
    SU(6): Anti Latency=0
SU(6):   renamable $x8 = ADRP target-flags(aarch64-page) @nz0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 16
  Predecessors:
    SU(5): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x8
SU(7):   renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 15
  Predecessors:
    SU(6): Data Latency=1 Reg=$x8
  Successors:
    SU(51): Out  Latency=1
    SU(17): Data Latency=4 Reg=$w0
    SU(16): Data Latency=4 Reg=$w0
    SU(8): Anti Latency=0
SU(8):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 14
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(12): Out  Latency=1
    SU(20): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
SU(9):   renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 9
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x16
SU(10):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 1
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 13
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
  Successors:
    SU(18): Out  Latency=1
    SU(74): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d0
    SU(41): Data Latency=1 Reg=$q0
    SU(74): Anti Latency=0
    SU(11): Anti Latency=0
    SU(41): Anti Latency=0
SU(11):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 13
  Predecessors:
    SU(10): Anti Latency=0
    SU(8): Data Latency=1 Reg=$x8
    SU(5): Out  Latency=1
  Successors:
    SU(21): Out  Latency=1
    SU(41): Out  Latency=1
    SU(21): Data Latency=4 Reg=$d1
    SU(12): Anti Latency=0
    SU(20): Anti Latency=0
SU(12):   $w8 = ADDWrs renamable $w17, renamable $w18, 0
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 12
  Predecessors:
    SU(11): Anti Latency=0
    SU(8): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w18
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    SU(16): Out  Latency=1
    SU(20): Out  Latency=1
    SU(16): Data Latency=1 Reg=$w8
    SU(47): Anti Latency=0
    SU(49): Anti Latency=0
SU(13):   $w3 = ORRWrs $wzr, $w18, 0
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(49): Anti Latency=0
SU(14):   STPWi $w18, $w17, $sp, 25 :: (store 4 into %stack.16), (store 4 into %stack.15)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=$w18
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    SU(49): Anti Latency=0
    SU(47): Anti Latency=0
SU(15):   $w2 = ORRWrs $wzr, $w17, 0
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(47): Anti Latency=0
SU(16):   $w8 = ADDWrs renamable $w8, renamable $w0, 0
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 11
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$w8
    SU(7): Data Latency=4 Reg=$w0
  Successors:
    SU(20): Out  Latency=1
    SU(19): Data Latency=1 Reg=$w8
    SU(20): Anti Latency=0
    SU(51): Anti Latency=0
SU(17):   $w4 = ORRWrs $wzr, $w0, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(7): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(72): Data Latency=1 Reg=$w4
    SU(51): Anti Latency=0
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 2
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d0
  Successors:
    SU(31): Out  Latency=1
    SU(74): Out  Latency=1
    SU(31): Data Latency=1 Reg=$d0
    SU(41): Data Latency=1 Reg=$q0
    SU(19): Anti Latency=0
    SU(74): Anti Latency=0
SU(19):   renamable $d2 = SCVTFUWDri renamable $w8
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 10
  Predecessors:
    SU(18): Anti Latency=0
    SU(16): Data Latency=1 Reg=$w8
  Successors:
    SU(22): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d2
    SU(20): Anti Latency=0
SU(20):   renamable $x8 = ADRP target-flags(aarch64-page) @maxtime
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(19): Anti Latency=0
    SU(16): Out  Latency=1
    SU(16): Anti Latency=0
    SU(12): Out  Latency=1
    SU(11): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(29): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x8
SU(21):   renamable $d1 = FMULDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 9
  Predecessors:
    SU(19): Data Latency=1 Reg=$d2
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$d1
  Successors:
    SU(25): Out  Latency=1
    SU(41): Out  Latency=1
    SU(25): Data Latency=1 Reg=$d1
    SU(22): Anti Latency=0
    SU(41): Anti Latency=0
SU(22):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(21): Anti Latency=0
    SU(19): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x16
  Successors:
    SU(35): Data Latency=4 Reg=$d2
    SU(23): Anti Latency=0
SU(23):   renamable $x16 = ADRP target-flags(aarch64-page) %const.6
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(22): Anti Latency=0
    SU(9): Out  Latency=1
  Successors:
    SU(45): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x16
SU(24):   renamable $d3 = LDRDui $sp, 14 :: (load 8 from %stack.14)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(26): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d3
    SU(74): Data Latency=4 Reg=$q3
    SU(28): Ord  Latency=0 Memory
SU(25):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 8
  Predecessors:
    SU(21): Data Latency=1 Reg=$d1
    SU(21): Out  Latency=1
    SU(24): Data Latency=4 Reg=$d3
  Successors:
    SU(32): Out  Latency=1
    SU(41): Out  Latency=1
    SU(31): Data Latency=1 Reg=$d1
    SU(41): Anti Latency=0
    SU(26): Anti Latency=0
SU(26):   renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 7
  Predecessors:
    SU(25): Anti Latency=0
    SU(24): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x8
  Successors:
    SU(38): Data Latency=4 Reg=$d3
    SU(37): Data Latency=4 Reg=$d3
    SU(74): Data Latency=4 Reg=$q3
    SU(29): Anti Latency=0
SU(27):   renamable $w1 = LDURSBWi $fp, -44 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(28): Data Latency=4 Reg=$w1
SU(28):   STRWui renamable $w1, $sp, 28 :: (store 4 into %stack.14)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(27): Data Latency=4 Reg=$w1
    SU(24): Ord  Latency=0 Memory
SU(29):   renamable $x8 = ADRP target-flags(aarch64-page) @itmax
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(26): Anti Latency=0
    SU(20): Out  Latency=1
  Successors:
    SU(43): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x8
SU(30):   renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(29): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(73): Data Latency=4 Reg=$w5
    SU(43): Anti Latency=0
SU(31):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 7
  Predecessors:
    SU(25): Data Latency=1 Reg=$d1
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d0
  Successors:
    SU(35): Out  Latency=1
    SU(74): Out  Latency=1
    SU(35): Data Latency=1 Reg=$d0
    SU(41): Data Latency=1 Reg=$q0
    SU(74): Anti Latency=0
    SU(32): Anti Latency=0
    SU(41): Anti Latency=0
SU(32):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 7
  Predecessors:
    SU(31): Anti Latency=0
    SU(25): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x16
  Successors:
    SU(37): Out  Latency=1
    SU(41): Out  Latency=1
    SU(37): Data Latency=4 Reg=$d1
    SU(45): Anti Latency=0
SU(33):   renamable $w20 = LDURWi $fp, -48 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(72): Out  Latency=1
    SU(62): Data Latency=4 Reg=$w20
    SU(34): Data Latency=4 Reg=$w20
SU(34):   STRWui renamable $w20, $sp, 30 :: (store 4 into %stack.13)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(33): Data Latency=4 Reg=$w20
  Successors:
    SU(72): Anti Latency=0
SU(35):   renamable $d0 = FADDDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 4
  Predecessors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$d0
    SU(22): Data Latency=4 Reg=$d2
  Successors:
    SU(36): Out  Latency=1
    SU(74): Out  Latency=1
    SU(36): Data Latency=1 Reg=$d0
    SU(41): Data Latency=1 Reg=$q0
    SU(74): Anti Latency=0
SU(36):   renamable $d0 = FMULDrr renamable $d4, renamable $d0
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 3
  Predecessors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$d0
  Successors:
    SU(39): Out  Latency=1
    SU(74): Out  Latency=1
    SU(39): Data Latency=1 Reg=$d0
    SU(41): Data Latency=1 Reg=$q0
    SU(74): Anti Latency=0
SU(37):   renamable $d1 = FMULDrr renamable $d3, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 3
  Predecessors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=4 Reg=$d1
    SU(26): Data Latency=4 Reg=$d3
  Successors:
    SU(41): Out  Latency=1
    SU(39): Data Latency=1 Reg=$d1
    SU(41): Anti Latency=0
SU(38):   STRDui renamable $d3, $sp, 11 :: (store 8 into %stack.17)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(26): Data Latency=4 Reg=$d3
SU(39):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 2
  Predecessors:
    SU(37): Data Latency=1 Reg=$d1
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$d0
  Successors:
    SU(74): Out  Latency=1
    SU(42): Data Latency=1 Reg=$d0
    SU(40): Data Latency=1 Reg=$d0
    SU(41): Data Latency=1 Reg=$q0
    SU(74): Anti Latency=0
    SU(41): Anti Latency=0
SU(40):   STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 1
  Predecessors:
    SU(39): Data Latency=1 Reg=$d0
  Successors:
    SU(74): Anti Latency=0
SU(41):   $q1 = ORRv16i8 $q0, $q0
  # preds left       : 18
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 1
  Predecessors:
    SU(39): Data Latency=1 Reg=$q0
    SU(39): Anti Latency=0
    SU(37): Out  Latency=1
    SU(37): Anti Latency=0
    SU(36): Data Latency=1 Reg=$q0
    SU(35): Data Latency=1 Reg=$q0
    SU(32): Out  Latency=1
    SU(31): Data Latency=1 Reg=$q0
    SU(31): Anti Latency=0
    SU(25): Out  Latency=1
    SU(25): Anti Latency=0
    SU(21): Out  Latency=1
    SU(21): Anti Latency=0
    SU(18): Data Latency=1 Reg=$q0
    SU(11): Out  Latency=1
    SU(10): Data Latency=1 Reg=$q0
    SU(10): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(74): Anti Latency=0
SU(42):   STRDui $d0, $sp, 16 :: (store 8 into %stack.12)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 1
  Predecessors:
    SU(39): Data Latency=1 Reg=$d0
  Successors:
    SU(74): Anti Latency=0
SU(43):   $x8 = ADRP target-flags(aarch64-page) @lu__str_23__none__
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(30): Anti Latency=0
    SU(29): Out  Latency=1
  Successors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$x8
SU(44):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(43): Out  Latency=1
    SU(43): Data Latency=1 Reg=$x8
  Successors:
    SU(60): Out  Latency=1
    SU(59): Data Latency=1 Reg=$x8
SU(45):   $x16 = ADRP target-flags(aarch64-page) @lu__str_22__O3__mcmod
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(32): Anti Latency=0
    SU(23): Out  Latency=1
  Successors:
    SU(46): Out  Latency=1
    SU(46): Data Latency=1 Reg=$x16
SU(46):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_22__O3__mcmod, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(45): Out  Latency=1
    SU(45): Data Latency=1 Reg=$x16
  Successors:
    SU(64): Out  Latency=1
    SU(59): Data Latency=1 Reg=$x16
SU(47):   $x17 = ADRP target-flags(aarch64-page) @lu__str_21__g__Wall__
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(15): Anti Latency=0
    SU(14): Anti Latency=0
    SU(12): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(48): Out  Latency=1
    SU(48): Data Latency=1 Reg=$x17
SU(48):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_21__g__Wall__, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(47): Out  Latency=1
    SU(47): Data Latency=1 Reg=$x17
  Successors:
    SU(63): Data Latency=1 Reg=$x17
SU(49):   $x18 = ADRP target-flags(aarch64-page) @lu__str_20__I___commo
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(14): Anti Latency=0
    SU(13): Anti Latency=0
    SU(12): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(50): Out  Latency=1
    SU(50): Data Latency=1 Reg=$x18
SU(50):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_20__I___commo, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(49): Out  Latency=1
    SU(49): Data Latency=1 Reg=$x18
  Successors:
    SU(63): Data Latency=1 Reg=$x18
SU(51):   $x0 = ADRP target-flags(aarch64-page) @lu__str_19__lm_
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 4
  Predecessors:
    SU(17): Anti Latency=0
    SU(16): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(52): Out  Latency=1
    SU(52): Data Latency=1 Reg=$x0
SU(52):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_19__lm_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 3
  Predecessors:
    SU(51): Out  Latency=1
    SU(51): Data Latency=1 Reg=$x0
  Successors:
    SU(67): Out  Latency=1
    SU(66): Data Latency=1 Reg=$x0
SU(53):   $x7 = ADRP target-flags(aarch64-page) @lu__str_18___CC__
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(54): Out  Latency=1
    SU(54): Data Latency=1 Reg=$x7
SU(54):   renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_18___CC__, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(53): Out  Latency=1
    SU(53): Data Latency=1 Reg=$x7
  Successors:
    SU(66): Data Latency=1 Reg=$x7
SU(55):   $x6 = ADRP target-flags(aarch64-page) @lu__str_17_gcc_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(56): Out  Latency=1
    SU(56): Data Latency=1 Reg=$x6
SU(56):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_17_gcc_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(55): Out  Latency=1
    SU(55): Data Latency=1 Reg=$x6
  Successors:
    SU(69): Data Latency=1 Reg=$x6
SU(57):   $x19 = ADRP target-flags(aarch64-page) @lu__str_16_03_Nov_201
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(58): Out  Latency=1
    SU(58): Data Latency=1 Reg=$x19
SU(58):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_16_03_Nov_201, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(57): Out  Latency=1
    SU(57): Data Latency=1 Reg=$x19
  Successors:
    SU(73): Out  Latency=1
    SU(69): Data Latency=1 Reg=$x19
SU(59):   STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(46): Data Latency=1 Reg=$x16
    SU(44): Data Latency=1 Reg=$x8
  Successors:
    SU(64): Anti Latency=0
    SU(60): Anti Latency=0
SU(60):   $x8 = ADRP target-flags(aarch64-page) @lu__str_15_3_3_1_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(59): Anti Latency=0
    SU(44): Out  Latency=1
  Successors:
    SU(61): Out  Latency=1
    SU(61): Data Latency=1 Reg=$x8
SU(61):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_15_3_3_1_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(60): Out  Latency=1
    SU(60): Data Latency=1 Reg=$x8
  Successors:
    SU(70): Data Latency=1 Reg=$x8
SU(62):   STRWui renamable $w20, $sp, 2 :: (store 4 into stack + 8)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(33): Data Latency=4 Reg=$w20
  Successors:
    SU(72): Anti Latency=0
SU(63):   STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(50): Data Latency=1 Reg=$x18
    SU(48): Data Latency=1 Reg=$x17
SU(64):   $x16 = ADRP target-flags(aarch64-page) @lu__str_14___________
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(59): Anti Latency=0
    SU(46): Out  Latency=1
  Successors:
    SU(65): Out  Latency=1
    SU(65): Data Latency=1 Reg=$x16
SU(65):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_14___________, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(64): Out  Latency=1
    SU(64): Data Latency=1 Reg=$x16
  Successors:
    SU(71): Data Latency=1 Reg=$x16
SU(66):   STPXi renamable $x7, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(52): Data Latency=1 Reg=$x0
    SU(54): Data Latency=1 Reg=$x7
  Successors:
    SU(67): Anti Latency=0
SU(67):   $x0 = ADRP target-flags(aarch64-page) @lu__str_13_LU_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(66): Anti Latency=0
    SU(52): Out  Latency=1
  Successors:
    SU(68): Out  Latency=1
    SU(68): Data Latency=1 Reg=$x0
SU(68):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_13_LU_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(67): Out  Latency=1
    SU(67): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(69):   STPXi renamable $x19, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(58): Data Latency=1 Reg=$x19
    SU(56): Data Latency=1 Reg=$x6
  Successors:
    SU(73): Anti Latency=0
SU(70):   STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(61): Data Latency=1 Reg=$x8
SU(71):   STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(65): Data Latency=1 Reg=$x16
SU(72):   $w20 = ORRWrs $wzr, $w4, 0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(62): Anti Latency=0
    SU(34): Anti Latency=0
    SU(33): Out  Latency=1
    SU(17): Data Latency=1 Reg=$w4
SU(73):   $w19 = ORRWrs $wzr, $w5, 0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(69): Anti Latency=0
    SU(58): Out  Latency=1
    SU(30): Data Latency=4 Reg=$w5
SU(74):   $q0 = ORRv16i8 $q3, $q3
  # preds left       : 17
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 1
  Predecessors:
    SU(42): Anti Latency=0
    SU(41): Anti Latency=0
    SU(40): Anti Latency=0
    SU(39): Out  Latency=1
    SU(39): Anti Latency=0
    SU(36): Out  Latency=1
    SU(36): Anti Latency=0
    SU(35): Out  Latency=1
    SU(35): Anti Latency=0
    SU(31): Out  Latency=1
    SU(31): Anti Latency=0
    SU(26): Data Latency=4 Reg=$q3
    SU(24): Data Latency=4 Reg=$q3
    SU(18): Out  Latency=1
    SU(18): Anti Latency=0
    SU(10): Out  Latency=1
    SU(10): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 18
  Height             : 0
  Predecessors:
    SU(74): Ord  Latency=1 Artificial
    SU(68): Ord  Latency=1 Artificial
    SU(41): Ord  Latency=1 Artificial
    SU(30): Ord  Latency=4 Artificial
    SU(27): Ord  Latency=4 Artificial
    SU(17): Ord  Latency=1 Artificial
    SU(15): Ord  Latency=1 Artificial
    SU(13): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 18
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 24 27 33 53 55 57 
  TopQ.A RemainingLatency 0 + 0c > CritPath 18
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  Ready @0c
  TopQ.A BotLatency SU(0) 18c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 1 24 27 33 53 55 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(1) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nx0
  Ready @1c
  TopQ.A BotLatency SU(1) 18c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 5 24 27 33 53 55 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(5) TOP-PATH                  17 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $w17 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 15 
Queue TopQ.A: 57 5 24 27 33 53 55 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(5) TOP-PATH                  17 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x16 = ADRP target-flags(aarch64-page) @ny0
  Ready @3c
  TopQ.A BotLatency SU(3) 17c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 15 
Queue TopQ.A: 57 5 24 27 33 53 55 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(5) TOP-PATH                  17 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @4c
  TopQ.A BotLatency SU(5) 17c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 15 10 
Queue TopQ.A: 57 4 24 27 33 53 55 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(4) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  Ready @5c
  TopQ.A TopLatency SU(4) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 10 14 
Queue TopQ.A: 57 6 24 27 33 53 55 9 15 
  TopQ.A RemainingLatency 0 + 6c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(6) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x8 = ADRP target-flags(aarch64-page) @nz0
  Ready @6c
  TopQ.A BotLatency SU(6) 16c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 10 14 
Queue TopQ.A: 57 15 24 27 33 53 55 9 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(24) TOP-PATH                  12 cycles 
  Cand SU(7) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 17 14 
Queue TopQ.A: 57 15 24 27 33 53 55 9 8 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(24) TOP-PATH                  12 cycles 
  Cand SU(8) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 57 15 24 27 33 53 55 9 10 13 14 
  TopQ.A RemainingLatency 0 + 9c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(24) TOP-PATH                  12 cycles 
  Cand SU(10) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @9c
  TopQ.A TopLatency SU(10) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 57 15 24 27 33 53 55 9 14 13 18 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(24) TOP-PATH                  12 cycles 
  Cand SU(11) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  Ready @10c
  TopQ.A BotLatency SU(11) 13c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 24 27 33 53 55 9 14 13 18 12 17 
  TopQ.A RemainingLatency 0 + 11c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(24) TOP-PATH                  12 cycles 
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $w8 = ADDWrs renamable $w17, renamable $w18, 0
  Ready @11c
  TopQ.A TopLatency SU(12) 6c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 24 27 33 53 55 9 14 13 18 17 16 
  TopQ.A RemainingLatency 0 + 12c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(24) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) renamable $d3 = LDRDui $sp, 14 :: (load 8 from %stack.14)
  Ready @12c
  TopQ.A BotLatency SU(24) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 16 27 33 53 55 9 14 13 18 17 
  TopQ.A RemainingLatency 0 + 13c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(16) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $w8 = ADDWrs renamable $w8, renamable $w0, 0
  Ready @13c
  TopQ.A TopLatency SU(16) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 17 27 33 53 55 9 14 13 18 
  TopQ.A RemainingLatency 0 + 14c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(9) TOP-PATH                  9 cycles 
  Cand SU(18) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 17 27 33 53 55 9 14 13 19 
  TopQ.A RemainingLatency 0 + 15c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(9) TOP-PATH                  9 cycles 
  Cand SU(19) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $d2 = SCVTFUWDri renamable $w8
  Ready @15c
  TopQ.A TopLatency SU(19) 8c
  TopQ.A BotLatency SU(19) 10c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 17 27 33 53 55 9 14 13 21 20 
  TopQ.A RemainingLatency 0 + 16c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(9) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 17 27 33 53 55 20 14 13 21 
  TopQ.A RemainingLatency 0 + 17c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(20) TOP-PATH                  8 cycles 
  Cand SU(21) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d1 = FMULDrr renamable $d2, renamable $d1
  Ready @17c
  TopQ.A TopLatency SU(21) 9c
  TopQ.A BotLatency SU(21) 9c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 17 27 33 53 55 20 14 13 25 22 
  TopQ.A RemainingLatency 0 + 18c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(20) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) renamable $x8 = ADRP target-flags(aarch64-page) @maxtime
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 17 27 33 53 55 22 14 13 25 
  TopQ.A RemainingLatency 0 + 19c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(22) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  Ready @19c
  TopQ.A BotLatency SU(22) 8c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 17 27 33 53 55 25 14 13 23 
  TopQ.A RemainingLatency 0 + 20c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(25) TOP-PATH                  8 cycles 
  Cand SU(23) ORDER                              
Pick Top ORDER     
Scheduling SU(23) renamable $x16 = ADRP target-flags(aarch64-page) %const.6
  Ready @20c
  TopQ.A BotLatency SU(23) 8c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 17 27 33 53 55 25 14 13 
  TopQ.A RemainingLatency 0 + 21c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(25) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  Ready @21c
  TopQ.A TopLatency SU(25) 10c
  TopQ.A BotLatency SU(25) 8c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 17 27 33 53 55 13 14 31 26 
  TopQ.A RemainingLatency 0 + 22c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(31) TOP-PATH                  7 cycles 
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 57 15 17 27 33 53 55 13 14 31 29 
  TopQ.A RemainingLatency 0 + 23c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(31) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(31) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @23c
  TopQ.A TopLatency SU(31) 11c
  TopQ.A BotLatency SU(31) 7c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 57 15 17 27 33 53 55 13 14 29 35 32 
  TopQ.A RemainingLatency 0 + 24c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(29) TOP-PATH                  5 cycles 
  Cand SU(32) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  Ready @24c
  TopQ.A BotLatency SU(32) 7c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 37 
Queue TopQ.A: 57 15 17 27 33 53 55 13 14 29 35 45 
  TopQ.A RemainingLatency 0 + 25c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
  Cand SU(29) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(29) renamable $x8 = ADRP target-flags(aarch64-page) @itmax
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 37 
Queue TopQ.A: 57 15 17 27 33 53 55 13 14 45 35 30 38 
  TopQ.A RemainingLatency 0 + 26c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(17) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $w4 = ORRWrs $wzr, $w0, 0
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 37 
Queue TopQ.A: 57 15 38 27 33 53 55 13 14 45 35 30 51 
  TopQ.A RemainingLatency 0 + 27c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(27) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) renamable $w1 = LDURSBWi $fp, -44 :: (dereferenceable load 1 from %ir.Class, align 4)
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 28 
Queue TopQ.A: 57 15 38 51 33 53 55 13 14 45 35 30 37 
  TopQ.A RemainingLatency 0 + 28c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(51) TOP-PATH                  4 cycles 
  Cand SU(33) ORDER                              
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  Ready @28c
  TopQ.A BotLatency SU(30) 4c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 28 
Queue TopQ.A: 57 15 38 51 33 53 55 13 14 45 35 37 43 
  TopQ.A RemainingLatency 0 + 29c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(51) TOP-PATH                  4 cycles 
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) renamable $w20 = LDURWi $fp, -48 :: (dereferenceable load 4 from %ir.verified)
  Ready @29c
  TopQ.A BotLatency SU(33) 4c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 28 62 34 
Queue TopQ.A: 57 15 38 51 43 53 55 13 14 45 35 37 
  TopQ.A RemainingLatency 0 + 30c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(51) TOP-PATH                  4 cycles 
  Cand SU(43) ORDER                              
  Cand SU(35) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(35) renamable $d0 = FADDDrr renamable $d0, renamable $d2
  Ready @30c
  TopQ.A TopLatency SU(35) 13c
  TopQ.A BotLatency SU(35) 4c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 34 62 
Queue TopQ.A: 57 15 38 51 43 53 55 13 14 45 37 36 28 
  TopQ.A RemainingLatency 0 + 31c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(51) TOP-PATH                  4 cycles 
  Cand SU(43) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(43) $x8 = ADRP target-flags(aarch64-page) @lu__str_23__none__
  Ready @31c
  TopQ.A BotLatency SU(43) 4c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 34 62 
Queue TopQ.A: 57 15 38 51 28 53 55 13 14 45 37 36 44 
  TopQ.A RemainingLatency 0 + 32c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(51) TOP-PATH                  4 cycles 
  Cand SU(45) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(45) $x16 = ADRP target-flags(aarch64-page) @lu__str_22__O3__mcmod
  Ready @32c
  TopQ.A BotLatency SU(45) 4c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 51 28 53 55 13 14 44 37 36 46 34 62 
  TopQ.A RemainingLatency 0 + 33c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(51) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(51) $x0 = ADRP target-flags(aarch64-page) @lu__str_19__lm_
  Ready @33c
  TopQ.A BotLatency SU(51) 4c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 53 55 13 14 44 37 36 46 34 52 
  TopQ.A RemainingLatency 0 + 34c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(53) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(53) $x7 = ADRP target-flags(aarch64-page) @lu__str_18___CC__
  Ready @34c
  TopQ.A BotLatency SU(53) 4c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 52 55 13 14 44 37 36 46 34 54 
  TopQ.A RemainingLatency 0 + 35c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(52) TOP-PATH                  3 cycles 
  Cand SU(44) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) renamable $d0 = FMULDrr renamable $d4, renamable $d0
  Ready @35c
  TopQ.A TopLatency SU(36) 14c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 52 55 13 14 44 37 54 46 34 
  TopQ.A RemainingLatency 0 + 36c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(52) TOP-PATH                  3 cycles 
  Cand SU(44) ORDER                              
  Cand SU(37) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(37) renamable $d1 = FMULDrr renamable $d3, renamable $d1
  Ready @36c
  TopQ.A TopLatency SU(37) 15c
  TopQ.A BotLatency SU(37) 3c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 52 55 13 14 44 34 54 46 39 
  TopQ.A RemainingLatency 0 + 37c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(52) TOP-PATH                  3 cycles 
  Cand SU(44) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(44) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__, 0
  Ready @37c
  TopQ.A BotLatency SU(44) 3c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 52 55 13 14 39 34 54 46 
  TopQ.A RemainingLatency 0 + 38c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(52) TOP-PATH                  3 cycles 
  Cand SU(46) ORDER                              
Pick Top ORDER     
Scheduling SU(46) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_22__O3__mcmod, 0
  Ready @38c
  TopQ.A BotLatency SU(46) 3c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 52 55 13 14 39 34 54 59 
  TopQ.A RemainingLatency 0 + 39c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(52) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(52) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_19__lm_, 0
  Ready @39c
  TopQ.A BotLatency SU(52) 3c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 59 55 13 14 39 34 54 
  TopQ.A RemainingLatency 0 + 40c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(54) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(54) renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_18___CC__, 0
  Ready @40c
  TopQ.A BotLatency SU(54) 3c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 59 55 13 14 39 34 66 
  TopQ.A RemainingLatency 0 + 41c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $w3 = ORRWrs $wzr, $w18, 0
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 59 55 66 14 39 34 
  TopQ.A RemainingLatency 0 + 42c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) STPWi $w18, $w17, $sp, 25 :: (store 4 into %stack.16), (store 4 into %stack.15)
  Ready @42c
  TopQ.A BotLatency SU(14) 2c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 15 38 62 28 59 55 66 34 39 49 
  TopQ.A RemainingLatency 0 + 43c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) $w2 = ORRWrs $wzr, $w17, 0
  Ready @43c
  TopQ.A BotLatency SU(15) 2c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 49 38 62 28 59 55 66 34 39 47 
  TopQ.A RemainingLatency 0 + 44c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(49) ORDER                              
  Cand SU(39) ORDER                              
Pick Top ORDER     
Scheduling SU(39) renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  Ready @44c
  TopQ.A TopLatency SU(39) 16c
  TopQ.A BotLatency SU(39) 2c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 49 38 62 28 59 55 66 34 47 42 40 41 
  TopQ.A RemainingLatency 0 + 45c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(49) ORDER                              
  Cand SU(47) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(47) $x17 = ADRP target-flags(aarch64-page) @lu__str_21__g__Wall__
  Ready @45c
  TopQ.A BotLatency SU(47) 2c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 49 38 62 28 59 55 66 34 41 42 40 48 
  TopQ.A RemainingLatency 0 + 46c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(49) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(49) $x18 = ADRP target-flags(aarch64-page) @lu__str_20__I___commo
  Ready @46c
  TopQ.A BotLatency SU(49) 2c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 48 38 62 28 59 55 66 34 41 42 40 50 
  TopQ.A RemainingLatency 0 + 47c > CritPath 18
  Cand SU(57) ORDER                              
  Cand SU(55) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(55) $x6 = ADRP target-flags(aarch64-page) @lu__str_17_gcc_
  Ready @47c
  TopQ.A BotLatency SU(55) 2c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 57 48 38 62 28 59 50 66 34 41 42 40 56 
  TopQ.A RemainingLatency 0 + 48c > CritPath 18
  Cand SU(57) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(57) $x19 = ADRP target-flags(aarch64-page) @lu__str_16_03_Nov_201
  Ready @48c
  TopQ.A BotLatency SU(57) 2c
  *** Max MOps 1 at cycle 48
Cycle: 49 TopQ.A
TopQ.A @49c
  Retired: 49
  Executed: 49c
  Critical: 49c, 49 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 48 38 62 28 59 50 66 34 41 42 40 58 
  TopQ.A RemainingLatency 0 + 49c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(59) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(59) STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  Ready @49c
  TopQ.A BotLatency SU(59) 2c
  *** Max MOps 1 at cycle 49
Cycle: 50 TopQ.A
TopQ.A @50c
  Retired: 50
  Executed: 50c
  Critical: 50c, 50 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 48 38 62 28 58 50 66 34 41 42 40 64 60 
  TopQ.A RemainingLatency 0 + 50c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(66) TOP-PATH                  2 cycles 
  Cand SU(64) ORDER                              
  Cand SU(60) ORDER                              
Pick Top ORDER     
Scheduling SU(60) $x8 = ADRP target-flags(aarch64-page) @lu__str_15_3_3_1_
  Ready @50c
  TopQ.A BotLatency SU(60) 2c
  *** Max MOps 1 at cycle 50
Cycle: 51 TopQ.A
TopQ.A @51c
  Retired: 51
  Executed: 51c
  Critical: 51c, 51 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 48 38 62 28 58 50 66 34 41 42 40 64 61 
  TopQ.A RemainingLatency 0 + 51c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(66) TOP-PATH                  2 cycles 
  Cand SU(64) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(64) $x16 = ADRP target-flags(aarch64-page) @lu__str_14___________
  Ready @51c
  TopQ.A BotLatency SU(64) 2c
  *** Max MOps 1 at cycle 51
Cycle: 52 TopQ.A
TopQ.A @52c
  Retired: 52
  Executed: 52c
  Critical: 52c, 52 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 48 38 62 28 58 50 66 34 41 42 40 61 65 
  TopQ.A RemainingLatency 0 + 52c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(66) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(66) STPXi renamable $x7, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  Ready @52c
  TopQ.A BotLatency SU(66) 2c
  *** Max MOps 1 at cycle 52
Cycle: 53 TopQ.A
TopQ.A @53c
  Retired: 53
  Executed: 53c
  Critical: 53c, 53 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 48 38 62 28 58 50 65 34 41 42 40 61 67 
  TopQ.A RemainingLatency 0 + 53c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(40) ORDER                              
  Cand SU(67) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(67) $x0 = ADRP target-flags(aarch64-page) @lu__str_13_LU_
  Ready @53c
  TopQ.A BotLatency SU(67) 2c
  *** Max MOps 1 at cycle 53
Cycle: 54 TopQ.A
TopQ.A @54c
  Retired: 54
  Executed: 54c
  Critical: 54c, 54 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 48 38 62 28 58 50 65 34 41 42 40 61 68 
  TopQ.A RemainingLatency 0 + 54c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(40) ORDER                              
Pick Top ORDER     
Scheduling SU(40) STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.mflops)
  Ready @54c
  TopQ.A TopLatency SU(40) 17c
  *** Max MOps 1 at cycle 54
Cycle: 55 TopQ.A
TopQ.A @55c
  Retired: 55
  Executed: 55c
  Critical: 55c, 55 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 48 38 62 28 58 50 65 34 41 42 68 61 
  TopQ.A RemainingLatency 0 + 55c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(41) ORDER                              
Pick Top ORDER     
Scheduling SU(41) $q1 = ORRv16i8 $q0, $q0
  Ready @55c
  TopQ.A BotLatency SU(41) 1c
  *** Max MOps 1 at cycle 55
Cycle: 56 TopQ.A
TopQ.A @56c
  Retired: 56
  Executed: 56c
  Critical: 56c, 56 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 48 38 62 28 58 50 65 34 61 42 68 
  TopQ.A RemainingLatency 0 + 56c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(48) ORDER                              
  Cand SU(42) ORDER                              
Pick Top ORDER     
Scheduling SU(42) STRDui $d0, $sp, 16 :: (store 8 into %stack.12)
  Ready @56c
  TopQ.A BotLatency SU(42) 1c
  *** Max MOps 1 at cycle 56
Cycle: 57 TopQ.A
TopQ.A @57c
  Retired: 57
  Executed: 57c
  Critical: 57c, 57 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 48 38 62 28 58 50 65 34 61 68 74 
  TopQ.A RemainingLatency 0 + 57c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(48) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(48) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_21__g__Wall__, 0
  Ready @57c
  TopQ.A BotLatency SU(48) 1c
  *** Max MOps 1 at cycle 57
Cycle: 58 TopQ.A
TopQ.A @58c
  Retired: 58
  Executed: 58c
  Critical: 58c, 58 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 74 38 62 28 58 50 65 34 61 68 
  TopQ.A RemainingLatency 0 + 58c > CritPath 18
  Cand SU(56) ORDER                              
  Cand SU(50) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(50) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_20__I___commo, 0
  Ready @58c
  TopQ.A BotLatency SU(50) 1c
  *** Max MOps 1 at cycle 58
Cycle: 59 TopQ.A
TopQ.A @59c
  Retired: 59
  Executed: 59c
  Critical: 59c, 59 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 56 74 38 62 28 58 68 65 34 61 63 
  TopQ.A RemainingLatency 0 + 59c > CritPath 18
  Cand SU(56) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(56) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_17_gcc_, 0
  Ready @59c
  TopQ.A BotLatency SU(56) 1c
  *** Max MOps 1 at cycle 59
Cycle: 60 TopQ.A
TopQ.A @60c
  Retired: 60
  Executed: 60c
  Critical: 60c, 60 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 74 38 62 28 58 68 65 34 61 
  TopQ.A RemainingLatency 0 + 60c > CritPath 18
  Cand SU(63) ORDER                              
  Cand SU(74) TOP-PATH                  1 cycles 
  Cand SU(58) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(58) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_16_03_Nov_201, 0
  Ready @60c
  TopQ.A BotLatency SU(58) 1c
  *** Max MOps 1 at cycle 60
Cycle: 61 TopQ.A
TopQ.A @61c
  Retired: 61
  Executed: 61c
  Critical: 61c, 61 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 74 38 62 28 61 68 65 34 69 
  TopQ.A RemainingLatency 0 + 61c > CritPath 18
  Cand SU(63) ORDER                              
  Cand SU(74) TOP-PATH                  1 cycles 
  Cand SU(61) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(61) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_15_3_3_1_, 0
  Ready @61c
  TopQ.A BotLatency SU(61) 1c
  *** Max MOps 1 at cycle 61
Cycle: 62 TopQ.A
TopQ.A @62c
  Retired: 62
  Executed: 62c
  Critical: 62c, 62 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 74 38 62 28 69 68 65 34 70 
  TopQ.A RemainingLatency 0 + 62c > CritPath 18
  Cand SU(63) ORDER                              
  Cand SU(74) TOP-PATH                  1 cycles 
  Cand SU(68) ORDER                              
  Cand SU(65) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(65) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_14___________, 0
  Ready @62c
  TopQ.A BotLatency SU(65) 1c
  *** Max MOps 1 at cycle 62
Cycle: 63 TopQ.A
TopQ.A @63c
  Retired: 63
  Executed: 63c
  Critical: 63c, 63 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 74 38 62 28 69 68 70 34 71 
  TopQ.A RemainingLatency 0 + 63c > CritPath 18
  Cand SU(63) ORDER                              
  Cand SU(74) TOP-PATH                  1 cycles 
  Cand SU(68) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(68) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_13_LU_, 0
  Ready @63c
  TopQ.A BotLatency SU(68) 1c
  *** Max MOps 1 at cycle 63
Cycle: 64 TopQ.A
TopQ.A @64c
  Retired: 64
  Executed: 64c
  Critical: 64c, 64 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 74 38 62 28 69 71 70 34 
  TopQ.A RemainingLatency 0 + 64c > CritPath 18
  Cand SU(63) ORDER                              
  Cand SU(74) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(74) $q0 = ORRv16i8 $q3, $q3
  Ready @64c
  TopQ.A BotLatency SU(74) 1c
  *** Max MOps 1 at cycle 64
Cycle: 65 TopQ.A
TopQ.A @65c
  Retired: 65
  Executed: 65c
  Critical: 65c, 65 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 34 38 62 28 69 71 70 
  TopQ.A RemainingLatency 0 + 65c > CritPath 18
  Cand SU(63) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(28) ORDER                              
Pick Top ORDER     
Scheduling SU(28) STRWui renamable $w1, $sp, 28 :: (store 4 into %stack.14)
  Ready @65c
  *** Max MOps 1 at cycle 65
Cycle: 66 TopQ.A
TopQ.A @66c
  Retired: 66
  Executed: 66c
  Critical: 66c, 66 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 34 38 62 70 69 71 
  TopQ.A RemainingLatency 0 + 66c > CritPath 18
  Cand SU(63) ORDER                              
  Cand SU(34) ORDER                              
Pick Top ORDER     
Scheduling SU(34) STRWui renamable $w20, $sp, 30 :: (store 4 into %stack.13)
  Ready @66c
  *** Max MOps 1 at cycle 66
Cycle: 67 TopQ.A
TopQ.A @67c
  Retired: 67
  Executed: 67c
  Critical: 67c, 67 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 71 38 62 70 69 
  TopQ.A RemainingLatency 0 + 67c > CritPath 18
  Cand SU(63) ORDER                              
  Cand SU(38) ORDER                              
Pick Top ORDER     
Scheduling SU(38) STRDui renamable $d3, $sp, 11 :: (store 8 into %stack.17)
  Ready @67c
  *** Max MOps 1 at cycle 67
Cycle: 68 TopQ.A
TopQ.A @68c
  Retired: 68
  Executed: 68c
  Critical: 68c, 68 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 71 69 62 70 
  TopQ.A RemainingLatency 0 + 68c > CritPath 18
  Cand SU(63) ORDER                              
  Cand SU(62) ORDER                              
Pick Top ORDER     
Scheduling SU(62) STRWui renamable $w20, $sp, 2 :: (store 4 into stack + 8)
  Ready @68c
  *** Max MOps 1 at cycle 68
Cycle: 69 TopQ.A
TopQ.A @69c
  Retired: 69
  Executed: 69c
  Critical: 69c, 69 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 63 71 69 70 72 
  TopQ.A RemainingLatency 0 + 69c > CritPath 18
  Cand SU(63) ORDER                              
Pick Top ORDER     
Scheduling SU(63) STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  Ready @69c
  *** Max MOps 1 at cycle 69
Cycle: 70 TopQ.A
TopQ.A @70c
  Retired: 70
  Executed: 70c
  Critical: 70c, 70 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 72 71 69 70 
  TopQ.A RemainingLatency 0 + 70c > CritPath 18
  Cand SU(72) ORDER                              
  Cand SU(71) ORDER                              
  Cand SU(69) ORDER                              
Pick Top ORDER     
Scheduling SU(69) STPXi renamable $x19, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  Ready @70c
  *** Max MOps 1 at cycle 70
Cycle: 71 TopQ.A
TopQ.A @71c
  Retired: 71
  Executed: 71c
  Critical: 71c, 71 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 72 71 70 73 
  TopQ.A RemainingLatency 0 + 71c > CritPath 18
  Cand SU(72) ORDER                              
  Cand SU(71) ORDER                              
  Cand SU(70) ORDER                              
Pick Top ORDER     
Scheduling SU(70) STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  Ready @71c
  *** Max MOps 1 at cycle 71
Cycle: 72 TopQ.A
TopQ.A @72c
  Retired: 72
  Executed: 72c
  Critical: 72c, 72 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 72 71 73 
  TopQ.A RemainingLatency 0 + 72c > CritPath 18
  Cand SU(72) ORDER                              
  Cand SU(71) ORDER                              
Pick Top ORDER     
Scheduling SU(71) STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
  Ready @72c
  *** Max MOps 1 at cycle 72
Cycle: 73 TopQ.A
TopQ.A @73c
  Retired: 73
  Executed: 73c
  Critical: 73c, 73 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 72 73 
  TopQ.A RemainingLatency 0 + 73c > CritPath 18
  Cand SU(72) ORDER                              
Pick Top ORDER     
Scheduling SU(72) $w20 = ORRWrs $wzr, $w4, 0
  Ready @73c
  *** Max MOps 1 at cycle 73
Cycle: 74 TopQ.A
TopQ.A @74c
  Retired: 74
  Executed: 74c
  Critical: 74c, 74 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 73 
Pick Top ONLY1     
Scheduling SU(73) $w19 = ORRWrs $wzr, $w5, 0
  Ready @74c
  *** Max MOps 1 at cycle 74
Cycle: 75 TopQ.A
TopQ.A @75c
  Retired: 75
  Executed: 75c
  Critical: 75c, 75 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nx0
SU(2):   renamable $w17 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
SU(3):   renamable $x16 = ADRP target-flags(aarch64-page) @ny0
SU(5):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(4):   renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
SU(6):   renamable $x8 = ADRP target-flags(aarch64-page) @nz0
SU(7):   renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
SU(8):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
SU(10):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(11):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(12):   $w8 = ADDWrs renamable $w17, renamable $w18, 0
SU(24):   renamable $d3 = LDRDui $sp, 14 :: (load 8 from %stack.14)
SU(16):   $w8 = ADDWrs renamable $w8, renamable $w0, 0
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(19):   renamable $d2 = SCVTFUWDri renamable $w8
SU(9):   renamable $x16 = ADRP target-flags(aarch64-page) %const.5
SU(21):   renamable $d1 = FMULDrr renamable $d2, renamable $d1
SU(20):   renamable $x8 = ADRP target-flags(aarch64-page) @maxtime
SU(22):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(23):   renamable $x16 = ADRP target-flags(aarch64-page) %const.6
SU(25):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
SU(26):   renamable $d3 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
SU(31):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(32):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
SU(29):   renamable $x8 = ADRP target-flags(aarch64-page) @itmax
SU(17):   $w4 = ORRWrs $wzr, $w0, 0
SU(27):   renamable $w1 = LDURSBWi $fp, -44 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(30):   renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
SU(33):   renamable $w20 = LDURWi $fp, -48 :: (dereferenceable load 4 from %ir.verified)
SU(35):   renamable $d0 = FADDDrr renamable $d0, renamable $d2
SU(43):   $x8 = ADRP target-flags(aarch64-page) @lu__str_23__none__
SU(45):   $x16 = ADRP target-flags(aarch64-page) @lu__str_22__O3__mcmod
SU(51):   $x0 = ADRP target-flags(aarch64-page) @lu__str_19__lm_
SU(53):   $x7 = ADRP target-flags(aarch64-page) @lu__str_18___CC__
SU(36):   renamable $d0 = FMULDrr renamable $d4, renamable $d0
SU(37):   renamable $d1 = FMULDrr renamable $d3, renamable $d1
SU(44):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_23__none__, 0
SU(46):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_22__O3__mcmod, 0
SU(52):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_19__lm_, 0
SU(54):   renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_18___CC__, 0
SU(13):   $w3 = ORRWrs $wzr, $w18, 0
SU(14):   STPWi $w18, $w17, $sp, 25 :: (store 4 into %stack.16), (store 4 into %stack.15)
SU(15):   $w2 = ORRWrs $wzr, $w17, 0
SU(39):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
SU(47):   $x17 = ADRP target-flags(aarch64-page) @lu__str_21__g__Wall__
SU(49):   $x18 = ADRP target-flags(aarch64-page) @lu__str_20__I___commo
SU(55):   $x6 = ADRP target-flags(aarch64-page) @lu__str_17_gcc_
SU(57):   $x19 = ADRP target-flags(aarch64-page) @lu__str_16_03_Nov_201
SU(59):   STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
SU(60):   $x8 = ADRP target-flags(aarch64-page) @lu__str_15_3_3_1_
SU(64):   $x16 = ADRP target-flags(aarch64-page) @lu__str_14___________
SU(66):   STPXi renamable $x7, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
SU(67):   $x0 = ADRP target-flags(aarch64-page) @lu__str_13_LU_
SU(40):   STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.mflops)
SU(41):   $q1 = ORRv16i8 $q0, $q0
SU(42):   STRDui $d0, $sp, 16 :: (store 8 into %stack.12)
SU(48):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_21__g__Wall__, 0
SU(50):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_20__I___commo, 0
SU(56):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_17_gcc_, 0
SU(58):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_16_03_Nov_201, 0
SU(61):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_15_3_3_1_, 0
SU(65):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_14___________, 0
SU(68):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_13_LU_, 0
SU(74):   $q0 = ORRv16i8 $q3, $q3
SU(28):   STRWui renamable $w1, $sp, 28 :: (store 4 into %stack.14)
SU(34):   STRWui renamable $w20, $sp, 30 :: (store 4 into %stack.13)
SU(38):   STRDui renamable $d3, $sp, 11 :: (store 8 into %stack.17)
SU(62):   STRWui renamable $w20, $sp, 2 :: (store 4 into stack + 8)
SU(63):   STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
SU(69):   STPXi renamable $x19, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
SU(70):   STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
SU(71):   STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
SU(72):   $w20 = ORRWrs $wzr, $w4, 0
SU(73):   $w19 = ORRWrs $wzr, $w5, 0

********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) @itmax
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
 RegionInstrs: 29
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @itmax
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 16
  Successors:
    SU(3): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $s0 = LDRSui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax, implicit-def $d0 :: (dereferenceable load 4 from @itmax)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 15
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=4 Reg=$d0
    SU(3): Anti Latency=0
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @nx0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x16
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 13
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
SU(4):   renamable $x17 = ADRP target-flags(aarch64-page) @ny0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 13
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x17
SU(5):   renamable $x18 = ADRP target-flags(aarch64-page) @nz0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
    SU(11): Data Latency=1 Reg=$x18
SU(6):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 12
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d1
    SU(7): Anti Latency=0
SU(7):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 12
  Predecessors:
    SU(6): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(27): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
SU(8):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 13
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=4 Reg=$w16
    SU(15): Data Latency=4 Reg=$w16
SU(9):   renamable $w17 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 12
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
  Successors:
    SU(20): Data Latency=4 Reg=$w17
    SU(17): Data Latency=4 Reg=$w17
SU(10):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 3
  Height             : 11
  Predecessors:
    SU(7): Data Latency=1 Reg=$x8
  Successors:
    SU(25): Data Latency=4 Reg=$d2
    SU(23): Data Latency=4 Reg=$d2
    SU(11): Anti Latency=0
    SU(27): Anti Latency=0
SU(11):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 3
  Height             : 11
  Predecessors:
    SU(10): Anti Latency=0
    SU(7): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x18
  Successors:
    SU(21): Out  Latency=1
    SU(27): Out  Latency=1
    SU(21): Data Latency=4 Reg=$w8
    SU(19): Data Latency=4 Reg=$w8
SU(12):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$d0
    SU(13): Data Latency=0 Reg=$q0
SU(13):   renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$d0
    SU(12): Data Latency=0 Reg=$q0
  Successors:
    SU(15): Out  Latency=1
    SU(14): Data Latency=1 Reg=$d0
SU(14):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(13): Data Latency=1 Reg=$d0
  Successors:
    SU(15): Anti Latency=0
SU(15):   renamable $d0 = SCVTFUWDri renamable $w16
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(14): Anti Latency=0
    SU(13): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w16
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d0
    SU(20): Anti Latency=0
SU(16):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d1
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d0
    SU(17): Anti Latency=0
SU(17):   renamable $d1 = SCVTFUWDri renamable $w17
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(16): Anti Latency=0
    SU(9): Data Latency=4 Reg=$w17
    SU(6): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d1
SU(18):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(17): Data Latency=1 Reg=$d1
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d0
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$d0
    SU(19): Anti Latency=0
SU(19):   renamable $d1 = SCVTFUWDri renamable $w8
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(18): Anti Latency=0
    SU(17): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w8
  Successors:
    SU(28): Out  Latency=1
    SU(22): Data Latency=1 Reg=$d1
    SU(21): Anti Latency=0
    SU(27): Anti Latency=0
SU(20):   $w16 = ADDWrs renamable $w16, renamable $w17, 0
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(15): Anti Latency=0
    SU(9): Data Latency=4 Reg=$w17
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w16
  Successors:
    SU(21): Data Latency=1 Reg=$w16
SU(21):   $w8 = ADDWrs renamable $w16, renamable $w8, 0
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(20): Data Latency=1 Reg=$w16
    SU(19): Anti Latency=0
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w8
  Successors:
    SU(27): Out  Latency=1
    SU(24): Data Latency=1 Reg=$w8
    SU(27): Anti Latency=0
SU(22):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(19): Data Latency=1 Reg=$d1
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d0
  Successors:
    SU(24): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d0
    SU(28): Anti Latency=0
SU(23):   STPDi renamable $d2, renamable $d0, $sp, 14 :: (store 8 into %stack.14), (store 8 into %stack.13)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(22): Data Latency=1 Reg=$d0
    SU(10): Data Latency=4 Reg=$d2
  Successors:
    SU(24): Anti Latency=0
SU(24):   renamable $d0 = SCVTFUWDri renamable $w8
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(23): Anti Latency=0
    SU(22): Out  Latency=1
    SU(21): Data Latency=1 Reg=$w8
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$d0
    SU(27): Anti Latency=0
SU(25):   renamable $d0 = FDIVDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$d0
    SU(10): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(26): Data Latency=1 Reg=$d0
SU(26):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.15)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(25): Data Latency=1 Reg=$d0
SU(27):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(24): Anti Latency=0
    SU(21): Out  Latency=1
    SU(21): Anti Latency=0
    SU(19): Anti Latency=0
    SU(11): Out  Latency=1
    SU(10): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(28): Data Latency=1 Reg=$x8
SU(28):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(27): Data Latency=1 Reg=$x8
    SU(22): Anti Latency=0
    SU(19): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=4 Artificial
    SU(25): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @itmax
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 2 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 16
  Cand SU(5) ORDER                              
  Cand SU(2) TOP-PATH                  14 cycles 
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $s0 = LDRSui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax, implicit-def $d0 :: (dereferenceable load 4 from @itmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 5 2 4 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 16
  Cand SU(5) ORDER                              
  Cand SU(2) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x16 = ADRP target-flags(aarch64-page) @nx0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 5 3 4 8 
  TopQ.A RemainingLatency 0 + 3c > CritPath 16
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 5 8 4 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 16
  Cand SU(5) ORDER                              
  Cand SU(8) TOP-PATH                  13 cycles 
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x17 = ADRP target-flags(aarch64-page) @ny0
  Ready @4c
  TopQ.A BotLatency SU(4) 13c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 8 6 9 12 
  TopQ.A RemainingLatency 0 + 5c > CritPath 16
  Cand SU(5) ORDER                              
  Cand SU(8) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
  Ready @5c
  TopQ.A BotLatency SU(8) 13c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 12 6 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 16
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x18 = ADRP target-flags(aarch64-page) @nz0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 12 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 16
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @7c
  TopQ.A TopLatency SU(6) 2c
  TopQ.A BotLatency SU(6) 12c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 12 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 16
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  Ready @8c
  TopQ.A BotLatency SU(7) 12c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 12 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 16
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $w17 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
  Ready @9c
  TopQ.A BotLatency SU(9) 12c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 16
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @10c
  TopQ.A TopLatency SU(10) 3c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 11c > CritPath 16
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
  Ready @11c
  TopQ.A BotLatency SU(11) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
  Ready @12c
  TopQ.A TopLatency SU(12) 5c
  TopQ.A BotLatency SU(12) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
  Ready @13c
  TopQ.A TopLatency SU(13) 6c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)
  Ready @14c
  TopQ.A TopLatency SU(14) 7c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) renamable $d0 = SCVTFUWDri renamable $w16
  Ready @15c
  TopQ.A BotLatency SU(15) 9c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 20 
  TopQ.A RemainingLatency 0 + 16c > CritPath 16
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @16c
  TopQ.A TopLatency SU(16) 8c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 17 
  TopQ.A RemainingLatency 0 + 17c > CritPath 16
  Cand SU(20) ORDER                              
  Cand SU(17) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) renamable $d1 = SCVTFUWDri renamable $w17
  Ready @17c
  TopQ.A BotLatency SU(17) 8c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 16
  Cand SU(20) ORDER                              
  Cand SU(18) ORDER                              
Pick Top ORDER     
Scheduling SU(18) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @18c
  TopQ.A TopLatency SU(18) 9c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 19 
  TopQ.A RemainingLatency 0 + 19c > CritPath 16
  Cand SU(20) ORDER                              
  Cand SU(19) ORDER                              
Pick Top ORDER     
Scheduling SU(19) renamable $d1 = SCVTFUWDri renamable $w8
  Ready @19c
  TopQ.A BotLatency SU(19) 7c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 22 
  TopQ.A RemainingLatency 0 + 20c > CritPath 16
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) $w16 = ADDWrs renamable $w16, renamable $w17, 0
  Ready @20c
  TopQ.A BotLatency SU(20) 7c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 21 
  TopQ.A RemainingLatency 0 + 21c > CritPath 16
  Cand SU(22) ORDER                              
  Cand SU(21) ORDER                              
Pick Top ORDER     
Scheduling SU(21) $w8 = ADDWrs renamable $w16, renamable $w8, 0
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 
Pick Top ONLY1     
Scheduling SU(22) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @22c
  TopQ.A TopLatency SU(22) 10c
  TopQ.A BotLatency SU(22) 6c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 
Pick Top ONLY1     
Scheduling SU(23) STPDi renamable $d2, renamable $d0, $sp, 14 :: (store 8 into %stack.14), (store 8 into %stack.13)
  Ready @23c
  TopQ.A TopLatency SU(23) 11c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 24 
Pick Top ONLY1     
Scheduling SU(24) renamable $d0 = SCVTFUWDri renamable $w8
  Ready @24c
  TopQ.A BotLatency SU(24) 5c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 25 27 
  TopQ.A RemainingLatency 0 + 25c > CritPath 16
  Cand SU(25) ORDER                              
  Cand SU(27) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  Ready @25c
  TopQ.A BotLatency SU(27) 5c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 25 28 
  TopQ.A RemainingLatency 0 + 26c > CritPath 16
  Cand SU(25) ORDER                              
  Cand SU(28) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @26c
  TopQ.A TopLatency SU(28) 12c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 25 
Pick Top ONLY1     
Scheduling SU(25) renamable $d0 = FDIVDrr renamable $d0, renamable $d2
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 
Pick Top ONLY1     
Scheduling SU(26) STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.15)
  Ready @28c
  TopQ.A TopLatency SU(26) 13c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @itmax
SU(1):   renamable $s0 = LDRSui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax, implicit-def $d0 :: (dereferenceable load 4 from @itmax)
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @nx0
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(4):   renamable $x17 = ADRP target-flags(aarch64-page) @ny0
SU(8):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nx0 :: (dereferenceable load 4 from @nx0)
SU(5):   renamable $x18 = ADRP target-flags(aarch64-page) @nz0
SU(6):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(7):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
SU(9):   renamable $w17 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @ny0 :: (dereferenceable load 4 from @ny0)
SU(10):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(11):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @nz0 :: (dereferenceable load 4 from @nz0)
SU(12):   renamable $q0 = SSHLLv2i32_shift renamable $d0, 0
SU(13):   renamable $d0 = SCVTFv1i64 renamable $d0, implicit $q0
SU(14):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)
SU(15):   renamable $d0 = SCVTFUWDri renamable $w16
SU(16):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(17):   renamable $d1 = SCVTFUWDri renamable $w17
SU(18):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(19):   renamable $d1 = SCVTFUWDri renamable $w8
SU(20):   $w16 = ADDWrs renamable $w16, renamable $w17, 0
SU(21):   $w8 = ADDWrs renamable $w16, renamable $w8, 0
SU(22):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(23):   STPDi renamable $d2, renamable $d0, $sp, 14 :: (store 8 into %stack.14), (store 8 into %stack.13)
SU(24):   renamable $d0 = SCVTFUWDri renamable $w8
SU(27):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
SU(28):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(25):   renamable $d0 = FDIVDrr renamable $d0, renamable $d2
SU(26):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.15)

********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) @frc
    To: BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $x2, implicit $x3, implicit-def $sp
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @frc
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
SU(3):   $x0 = ADRP target-flags(aarch64-page) @rsdnm
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @errnm
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @errnm, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x2 = SUBXri $fp, 44, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x3 = SUBXri $fp, 48, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $x2, implicit $x3, implicit-def $sp
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 5 7 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @frc
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 3 5 7 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 8 3 5 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @rsdnm
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 8 7 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @errnm
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 8 7 4 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 7 6 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @errnm, 0
  Ready @5c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 7 2 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x2 = SUBXri $fp, 44, 0
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 2 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x3 = SUBXri $fp, 48, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)
  Ready @8c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @frc
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @frc :: (dereferenceable load 8 from @frc)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @rsdnm
SU(5):   $x1 = ADRP target-flags(aarch64-page) @errnm
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rsdnm, 0
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @errnm, 0
SU(7):   $x2 = SUBXri $fp, 44, 0
SU(8):   $x3 = SUBXri $fp, 48, 0
SU(2):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)

********** MI Scheduling **********
main:%bb.3 if.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) @itmax
    To: BL @ssor, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @itmax
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(2): Data Latency=4 Reg=$w19
SU(2):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @ssor, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @itmax
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w0 = ORRWrs $wzr, $w19, 0
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @itmax
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @itmax :: (dereferenceable load 4 from @itmax)
SU(2):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then31
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(2):   $x20 = SUBXri $fp, 176, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x20 = SUBXri $fp, 176, 0
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $w8 = MOVZWi 1, 0
SU(2):   $x20 = SUBXri $fp, 176, 0
SU(1):   STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)

Fixup kills for %bb.4
********** MI Scheduling **********
main:%bb.5 for.cond
  From: renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.7, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.7, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv

Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 for.body
  From: renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.5
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $w16 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w16
    SU(4): Ord  Latency=0 Memory
SU(2):   STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx35)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx35)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w16 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx35)
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
SU(4):   STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.6 for.body
  From: renamable $w19 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $w19 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
SU(1):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 for.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) @maxtime
    To: Bcc 1, %bb.9, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @maxtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Data Latency=4 Reg=$d0
    SU(2): Data Latency=4 Reg=$d0
SU(2):   FCMPDri renamable $d0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   STURDi renamable $d0, $fp, -72 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
ExitSU:   Bcc 1, %bb.9, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @maxtime
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) FCMPDri renamable $d0, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURDi renamable $d0, $fp, -72 :: (store 8 into %ir.tmax)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @maxtime
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @maxtime :: (dereferenceable load 8 from @maxtime)
SU(2):   FCMPDri renamable $d0, implicit-def $nzcv
SU(3):   STURDi renamable $d0, $fp, -72 :: (store 8 into %ir.tmax)

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 if.then38
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STURXi renamable $x8, $fp, -72 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURXi renamable $x8, $fp, -72 :: (store 8 into %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STURXi renamable $x8, $fp, -72 :: (store 8 into %ir.tmax)

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 if.end39
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.7
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$d0
SU(3):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
SU(4):   STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(5):   $x20 = SUBXri $fp, 176, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) %const.7
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x20 = SUBXri $fp, 176, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.7
SU(2):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.7 :: (load 8 from constant-pool)
SU(0):   $w8 = MOVZWi 1, 0
SU(5):   $x20 = SUBXri $fp, 176, 0
SU(4):   STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)
SU(3):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.12)

********** MI Scheduling **********
main:%bb.9 if.end39
  From: $x0 = ADRP target-flags(aarch64-page) @lu__str_24___SECTION_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @lu__str_24___SECTION_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_24___SECTION_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @lu__str_24___SECTION_
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_24___SECTION_, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @lu__str_24___SECTION_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_24___SECTION_, 0

Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 for.cond41
  From: renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.14, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.14, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 11, 0, implicit-def $nzcv

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 for.body44
  From: renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.13, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.13, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.11 for.body44
  From: renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDroX renamable $x20, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx50)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(9): Data Latency=4 Reg=$d0
    SU(7): Data Latency=4 Reg=$d0
SU(3):   renamable $d2 = LDURDi $fp, -72 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=$d2
SU(4):   $x16 = ADDXri $sp, 144, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=1 Reg=$x16
SU(5):   renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx46)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(12): Data Latency=4 Reg=$x19
SU(6):   renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.12)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
    SU(6): Data Latency=4 Reg=$d1
    SU(6): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d1
    SU(3): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$d1
SU(9):   STPDi renamable $d1, renamable $d0, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d1
    SU(2): Data Latency=4 Reg=$d0
SU(10):   $x0 = ADRP target-flags(aarch64-page) @lu__str_25_____8s__9_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x1 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 6 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 10 3 4 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x16 = ADDXri $sp, 144, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 10 3 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
  Cand SU(6) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.12)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 10 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d2 = LDURDi $fp, -72 :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 5 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x20, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx50)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 10 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx46)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 12 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) $x0 = ADRP target-flags(aarch64-page) @lu__str_25_____8s__9_
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 12 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d1 = FMULDrr renamable $d0, renamable $d1
  Ready @9c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 11
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  Ready @10c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 9 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x1 = ORRXrs $xzr, $x19, 0
  Ready @11c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STPDi renamable $d1, renamable $d0, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)
  Ready @12c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
SU(4):   $x16 = ADDXri $sp, 144, 0
SU(6):   renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.12)
SU(3):   renamable $d2 = LDURDi $fp, -72 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
SU(2):   renamable $d0 = LDRDroX renamable $x20, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx50)
SU(5):   renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx46)
SU(10):   $x0 = ADRP target-flags(aarch64-page) @lu__str_25_____8s__9_
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_25_____8s__9_, 0
SU(7):   renamable $d1 = FMULDrr renamable $d0, renamable $d1
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
SU(12):   $x1 = ORRXrs $xzr, $x19, 0
SU(9):   STPDi renamable $d1, renamable $d0, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 if.then56
  From: renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $d2, renamable $d0 = LDPDi $fp, -9 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=$d2
    SU(5): Out  Latency=1
    SU(13): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(2):   renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 1 :: (load 8 from %ir.arrayidx66)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(3):   renamable $d3 = FSUBDrr renamable $d1, renamable $d0
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(8): Data Latency=1 Reg=$d3
    SU(6): Data Latency=1 Reg=$d3
    SU(4): Data Latency=1 Reg=$d3
    SU(13): Data Latency=1 Reg=$q3
    SU(7): Anti Latency=0
    SU(5): Anti Latency=0
    SU(13): Anti Latency=0
SU(4):   STURDi renamable $d3, $fp, -64 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d3
    SU(1): Ord  Latency=0 Memory
SU(5):   renamable $d0 = LDRDui $sp, 16 :: (load 8 from %stack.12)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(13): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
SU(6):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(3): Data Latency=1 Reg=$d3
  Successors:
    SU(13): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(13): Anti Latency=0
SU(7):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(8): Data Latency=1 Reg=$d1
    SU(13): Anti Latency=0
SU(8):   STPDi renamable $d1, renamable $d3, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$d1
    SU(3): Data Latency=1 Reg=$d3
SU(9):   $x0 = ADRP target-flags(aarch64-page) @lu__str_26___________
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
SU(10):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x1 = ADRP target-flags(aarch64-page) @lu__str_28_rest_rhs_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x1
SU(12):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_28_rest_rhs_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $q0 = ORRv16i8 $q3, $q3
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
    SU(3): Data Latency=1 Reg=$q3
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=1 Artificial
    SU(10): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 9 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 11 1 9 
  TopQ.A RemainingLatency 0 + 1c > CritPath 14
  Cand SU(11) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2, renamable $d0 = LDPDi $fp, -9 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 11 9 
  TopQ.A RemainingLatency 0 + 2c > CritPath 14
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x0 = ADRP target-flags(aarch64-page) @lu__str_26___________
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 11 10 
  TopQ.A RemainingLatency 0 + 3c > CritPath 14
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x1 = ADRP target-flags(aarch64-page) @lu__str_28_rest_rhs_
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 14
  Cand SU(10) ORDER                              
  Cand SU(2) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 1 :: (load 8 from %ir.arrayidx66)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 10 12 
  TopQ.A RemainingLatency 0 + 5c > CritPath 14
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_28_rest_rhs_, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d3 = FSUBDrr renamable $d1, renamable $d0
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 9c > CritPath 14
  Cand SU(4) ORDER                              
  Cand SU(5) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = LDRDui $sp, 16 :: (load 8 from %stack.12)
  Ready @9c
  TopQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURDi renamable $d3, $fp, -64 :: (store 8 into %ir.t)
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = FMULDrr renamable $d3, renamable $d0
  Ready @13c
  TopQ.A TopLatency SU(6) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  Ready @14c
  TopQ.A TopLatency SU(7) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 12
  Executed: 15c
  Critical: 12c, 12 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 13 
  TopQ.A RemainingLatency 0 + 15c > CritPath 14
  Cand SU(8) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $q0 = ORRv16i8 $q3, $q3
  Ready @15c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 13
  Executed: 16c
  Critical: 13c, 13 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STPDi renamable $d1, renamable $d3, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)
  Ready @16c
  TopQ.A TopLatency SU(8) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 14
  Executed: 17c
  Critical: 14c, 14 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = LDURSWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $d2, renamable $d0 = LDPDi $fp, -9 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
SU(9):   $x0 = ADRP target-flags(aarch64-page) @lu__str_26___________
SU(11):   $x1 = ADRP target-flags(aarch64-page) @lu__str_28_rest_rhs_
SU(2):   renamable $d1 = LDRDroX renamable $x20, renamable $x8, 0, 1 :: (load 8 from %ir.arrayidx66)
SU(10):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________, 0
SU(12):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_28_rest_rhs_, 0
SU(3):   renamable $d3 = FSUBDrr renamable $d1, renamable $d0
SU(5):   renamable $d0 = LDRDui $sp, 16 :: (load 8 from %stack.12)
SU(4):   STURDi renamable $d3, $fp, -64 :: (store 8 into %ir.t)
SU(6):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
SU(7):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
SU(13):   $q0 = ORRv16i8 $q3, $q3
SU(8):   STPDi renamable $d1, renamable $d3, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)

********** MI Scheduling **********
main:%bb.12 if.then56
  From: renamable $d0, renamable $d1 = LDPDi $fp, -20 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi $fp, -20 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Out  Latency=1
    SU(14): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDURDi $fp, -144 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d2
    SU(14): Data Latency=4 Reg=$q2
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Out  Latency=1
    SU(14): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
    SU(14): Anti Latency=0
    SU(3): Anti Latency=0
SU(3):   renamable $d1 = LDURDi $fp, -72 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d1
SU(4):   renamable $d2 = FADDDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(9): Data Latency=1 Reg=$d2
    SU(7): Data Latency=1 Reg=$d2
    SU(5): Data Latency=1 Reg=$d2
    SU(14): Data Latency=1 Reg=$q2
    SU(6): Anti Latency=0
    SU(14): Anti Latency=0
SU(5):   STURDi renamable $d2, $fp, -64 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d2
SU(6):   renamable $d0 = LDRDui $sp, 16 :: (load 8 from %stack.12)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(14): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
SU(7):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
    SU(4): Data Latency=1 Reg=$d2
  Successors:
    SU(14): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(14): Anti Latency=0
SU(8):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$d0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$d1
    SU(14): Anti Latency=0
SU(9):   STPDi renamable $d1, renamable $d2, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d1
    SU(4): Data Latency=1 Reg=$d2
SU(10):   $x0 = ADRP target-flags(aarch64-page) @lu__str_26___________
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x1 = ADRP target-flags(aarch64-page) @lu__str_27_sub_rhs_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x1
SU(13):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_27_sub_rhs_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(14):   $q0 = ORRv16i8 $q2, $q2
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
    SU(4): Data Latency=1 Reg=$q2
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$q2
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=1 Artificial
    SU(13): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 12 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi $fp, -20 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 12 1 10 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDURDi $fp, -144 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 12 10 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x0 = ADRP target-flags(aarch64-page) @lu__str_26___________
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 3c > CritPath 11
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x1 = ADRP target-flags(aarch64-page) @lu__str_27_sub_rhs_
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 4 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d2 = FADDDrr renamable $d0, renamable $d2
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 3 5 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
  Cand SU(6) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d0 = LDRDui $sp, 16 :: (load 8 from %stack.12)
  Ready @6c
  TopQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 11 13 3 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDURDi $fp, -72 :: (dereferenceable load 8 from %ir.tmax)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 11 13 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 11
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 13 
  TopQ.A RemainingLatency 0 + 9c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_27_sub_rhs_, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d2, renamable $d0
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $q0 = ORRv16i8 $q2, $q2
  Ready @12c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 
  TopQ.A RemainingLatency 0 + 13c > CritPath 11
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STURDi renamable $d2, $fp, -64 :: (store 8 into %ir.t)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STPDi renamable $d1, renamable $d2, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)
  Ready @14c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi $fp, -20 :: (dereferenceable load 8 from %ir.arrayidx57, align 16), (dereferenceable load 8 from %ir.arrayidx58)
SU(1):   renamable $d2 = LDURDi $fp, -144 :: (dereferenceable load 8 from %ir.arrayidx60, align 16)
SU(10):   $x0 = ADRP target-flags(aarch64-page) @lu__str_26___________
SU(12):   $x1 = ADRP target-flags(aarch64-page) @lu__str_27_sub_rhs_
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(4):   renamable $d2 = FADDDrr renamable $d0, renamable $d2
SU(6):   renamable $d0 = LDRDui $sp, 16 :: (load 8 from %stack.12)
SU(3):   renamable $d1 = LDURDi $fp, -72 :: (dereferenceable load 8 from %ir.tmax)
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_26___________, 0
SU(13):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @lu__str_27_sub_rhs_, 0
SU(7):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
SU(8):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
SU(14):   $q0 = ORRv16i8 $q2, $q2
SU(5):   STURDi renamable $d2, $fp, -64 :: (store 8 into %ir.t)
SU(9):   STPDi renamable $d1, renamable $d2, $sp, 14 :: (store 8 into %stack.13), (store 8 into %stack.14)

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 for.inc72
  From: renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.10
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w8 = LDURWi $fp, -180 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -180 :: (store 4 into %ir.i)

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 if.end75
  From: $w8 = ORRWrs $wzr, $wzr, 0
    To: $sp = frame-destroy ADDXri $sp, 448, 0
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.32), (load 8 from %stack.31)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.34), (load 8 from %stack.33)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 448, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.32), (load 8 from %stack.31)
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.34), (load 8 from %stack.33)
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = ORRWrs $wzr, $wzr, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 54 :: (load 8 from %stack.32), (load 8 from %stack.31)
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 52 :: (load 8 from %stack.34), (load 8 from %stack.33)
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0

Fixup kills for %bb.14
