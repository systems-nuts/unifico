Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=128, align=16, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=1, align=4, at location [SP]
  fi#13: size=128, align=16, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x408B89645A1CAC08, align=8
  cp#2: -4.683910e+03, align=8
  cp#3: 1.148450e+04, align=8
  cp#4: -1.927240e+04, align=8
  cp#5: 1.000000e+06, align=8
  cp#6: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1
  %293:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  %1:gpr64 = COPY $x1
  %0:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %1:gpr64, %293:gpr64sp, 40 :: (store 8 into %ir.argv.addr)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag
  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 0, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %5:gpr64 = COPY killed $x8
  STRXui %5:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  CBZX %5:gpr64, %bb.2
  B %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %9:gpr32 = MOVi32imm 1
  STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  %10:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_2_total_
  STRXui %10:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
  %11:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_3_rhsx_
  STRXui %11:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  %12:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_4_rhsy_
  STRXui %12:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
  %13:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_5_rhsz_
  STRXui %13:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  %14:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_6_rhs_
  STRXui %14:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
  %15:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_7_xsolve_
  STRXui %15:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  %16:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_8_ysolve_
  STRXui %16:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
  %17:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_9_zsolve_
  STRXui %17:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  %18:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_10_redist1_
  STRXui %18:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
  %19:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_11_redist2_
  STRXui %19:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  %20:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_12_tzetar_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_12_tzetar_
  STRXui %20:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
  %21:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_13_ninvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_13_ninvr_
  STRXui %21:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
  %22:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_14_pinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_14_pinvr_
  STRXui %22:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
  %23:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_15_txinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_15_txinvr_
  STRXui %23:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
  %24:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_16_add_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_16_add_
  STRXui %24:gpr64, %293:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
  %25:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %25:gpr64
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 1, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %25:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_17____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_17____NAS_Par
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 2, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_18_inputsp_da, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da
  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 3, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %31:gpr64 = COPY killed $x8
  STRXui %31:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  CBZX %31:gpr64, %bb.9
  B %bb.4

bb.4.if.then19:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_19__Reading_f, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_19__Reading_f
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 4, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %42:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %42:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_20__d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_20__d_
  $x2 = ADDXri %stack.4.niter, 0, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 5, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %42:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %45:gpr32 = COPY killed $w8
  STRWui %45:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %46:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %46:gpr64
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 6, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %46:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %47:gpr32sp = COPY killed $w8
  dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit killed $nzcv
  B %bb.6

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %49:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %49:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_21__lf_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_21__lf_
  $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 7, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %49:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %52:gpr32 = COPY killed $w8
  STRWui %52:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

bb.7.while.cond25:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %53:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %53:gpr64
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 8, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %53:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %54:gpr32sp = COPY killed $w8
  dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit killed $nzcv
  B %bb.8

bb.8.while.end29:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %56:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %57:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %58:gpr64sp = nuw ADDXri %57:gpr64common, 4, 0
  %59:gpr64sp = nuw ADDXri %57:gpr64common, 8, 0
  $x0 = COPY %56:gpr64
  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_22__d_d_d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_22__d_d_d_
  $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  $x3 = COPY %58:gpr64sp
  $x4 = COPY %59:gpr64sp
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 9, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %56:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %61:gpr32 = COPY killed $w8
  STRWui %61:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  %62:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %62:gpr64
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 10, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %62:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.10

bb.9.if.else32:
; predecessors: %bb.3
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_23__No_input_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_23__No_input_
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 11, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %34:gpr32 = MOVi32imm 400
  STRWui %34:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
  %35:gpr64temp = ADRP target-flags(aarch64-page) @dt
  %36:gpr64 = MOVi64imm 4562254508917369340
  STRXui %36:gpr64, %35:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  %37:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %38:gpr64 = MOVi64imm 438086664294
  STRXui %38:gpr64, %37:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  %39:gpr32 = MOVi32imm 102
  STRWui %39:gpr32, %37:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

bb.10.if.end34:
; predecessors: %bb.9, %bb.8
  successors: %bb.13(0x10000000), %bb.11(0x70000000); %bb.13(12.50%), %bb.11(87.50%)

  %66:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %67:gpr32 = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %68:gpr32 = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %69:gpr32 = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_24__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d
  $w1 = COPY %67:gpr32
  $w2 = COPY %68:gpr32
  $w3 = COPY %69:gpr32
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 12, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %67:gpr32, %68:gpr32, %69:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %72:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  %73:gpr64temp = ADRP target-flags(aarch64-page) @dt
  %74:fpr64 = LDRDui %73:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_25__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration
  $w1 = COPY %72:gpr32
  $d0 = COPY %74:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 13, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %72:gpr32, %74:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_26___, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_26___
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 14, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %79:gpr32common = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  dead $wzr = SUBSWri %79:gpr32common, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit killed $nzcv
  B %bb.11

bb.11.if.end34:
; predecessors: %bb.10
  successors: %bb.13(0x12492492), %bb.12(0x6db6db6e); %bb.13(14.29%), %bb.12(85.71%)

  %64:gpr32common = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  dead $wzr = SUBSWri %64:gpr32common, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit killed $nzcv
  B %bb.12

bb.12.if.end34:
; predecessors: %bb.11
  successors: %bb.13(0x2aaaaaab), %bb.14(0x55555555); %bb.13(33.33%), %bb.14(66.67%)

  %65:gpr32common = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  dead $wzr = SUBSWri %65:gpr32common, 103, 0, implicit-def $nzcv
  Bcc 11, %bb.14, implicit killed $nzcv
  B %bb.13

bb.13.if.then42:
; predecessors: %bb.10, %bb.11, %bb.12
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %283:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %284:gpr32 = LDRWui %283:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %285:gpr32 = LDRWui %283:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %286:gpr32 = LDRWui %283:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_27___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___
  $w1 = COPY %284:gpr32
  $w2 = COPY %285:gpr32
  $w3 = COPY %286:gpr32
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 15, 0, 0, %stack.0.retval, 0, %284:gpr32, %285:gpr32, %286:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_28__Problem_s, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_28__Problem_s
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 16, 0, 0, %stack.0.retval, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  B %bb.45

bb.14.if.end45:
; predecessors: %bb.12
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %85:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %86:gpr32common = LDRWui %85:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %87:gpr32common = SUBWri %86:gpr32common, 2, 0
  %88:gpr64temp = ADRP target-flags(aarch64-page) @nx2
  STRWui %87:gpr32common, %88:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  %89:gpr32common = LDRWui %85:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %90:gpr32common = SUBWri %89:gpr32common, 2, 0
  %91:gpr64temp = ADRP target-flags(aarch64-page) @ny2
  STRWui %90:gpr32common, %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  %92:gpr32common = LDRWui %85:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %93:gpr32common = SUBWri %92:gpr32common, 2, 0
  %94:gpr64temp = ADRP target-flags(aarch64-page) @nz2
  STRWui %93:gpr32common, %94:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @set_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 17, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %95:gpr32 = MOVi32imm 1
  STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

bb.15.for.cond:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.17, implicit killed $nzcv
  B %bb.16

bb.16.for.body:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %280:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %280:gpr32
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 18, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %280:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %281:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0
  STRWui %282:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.15

bb.17.for.end:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @exact_rhs, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 19, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 20, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 21, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 22, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %98:gpr32 = MOVi32imm 1
  STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

bb.18.for.cond49:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.20, implicit killed $nzcv
  B %bb.19

bb.19.for.body51:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %277:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %277:gpr32
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 23, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %277:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %278:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %279:gpr32common = nsw ADDWri %278:gpr32common, 1, 0
  STRWui %279:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.18

bb.20.for.end54:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %101:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 24, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
  undef %261.sub_32:gpr64 = MOVi32imm 1717986919
  %268:gpr32 = MOVi32imm 20

bb.21.for.cond55:
; predecessors: %bb.20, %bb.25
  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

  %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv
  Bcc 12, %bb.26, implicit killed $nzcv
  B %bb.22

bb.22.for.body57:
; predecessors: %bb.21
  successors: %bb.24(0x20000000), %bb.23(0x60000000); %bb.24(25.00%), %bb.23(75.00%)

  %259:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  %262:gpr64 = MADDXrrr %259:gpr64common, %261:gpr64, $xzr
  %263:gpr64 = UBFMXri %262:gpr64, 63, 63
  %265:gpr64 = SBFMXri %262:gpr64, 35, 63
  %267:gpr32 = ADDWrr %265.sub_32:gpr64, %263.sub_32:gpr64
  %270:gpr32 = MSUBWrrr %267:gpr32, %268:gpr32, %259.sub_32:gpr64common
  CBZW %270:gpr32, %bb.24
  B %bb.23

bb.23.for.body57:
; predecessors: %bb.22
  successors: %bb.24(0x2aaaaaab), %bb.25(0x55555555); %bb.24(33.33%), %bb.25(66.67%)

  dead $wzr = SUBSWri %259.sub_32:gpr64common, 1, 0, implicit-def $nzcv
  Bcc 1, %bb.25, implicit killed $nzcv
  B %bb.24

bb.24.if.then61:
; predecessors: %bb.22, %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %272:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_29__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step
  $w1 = COPY %272:gpr32
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 25, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %272:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.25.if.end63:
; predecessors: %bb.23, %bb.24
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 26, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %275:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  %276:gpr32common = nsw ADDWri %275:gpr32common, 1, 0
  STRWui %276:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
  B %bb.21

bb.26.for.end66:
; predecessors: %bb.21
  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 27, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 1
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 28, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %106:fpr64 = COPY killed $d0
  STRDui %106:fpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)
  %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %107:gpr32
  $x1 = ADDXri %stack.12.Class, 0, 0
  $x2 = ADDXri %stack.11.verified, 0, 0
  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 29, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %107:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %110:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri %110:fpr64, implicit-def $nzcv
  Bcc 0, %bb.28, implicit killed $nzcv
  B %bb.27

bb.27.if.then69:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %112:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %113:gpr32 = LDRWui %112:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %114:gpr32 = LDRWui %112:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
  %116:gpr32 = LDRWui %112:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
  STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
  %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
  %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
  %120:fpr64 = SCVTFUWDri %119:gpr32
  %121:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %123:fpr64 = FDIVDrr %120:fpr64, %122:fpr64
  STRDui %123:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  %124:fpr64 = SCVTFUWDri %117:gpr32
  %125:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %126:fpr64 = LDRDui %125:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  %127:fpr64 = FMULDrr %124:fpr64, %126:fpr64
  %128:fpr64 = FMULDrr %123:fpr64, %123:fpr64
  %129:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  %130:fpr64 = LDRDui %129:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  %131:fpr64 = FMULDrr %128:fpr64, %130:fpr64
  %132:fpr64 = FADDDrr %127:fpr64, %131:fpr64
  %133:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  %134:fpr64 = LDRDui %133:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  %135:fpr64 = FMULDrr %123:fpr64, %134:fpr64
  %136:fpr64 = FADDDrr %132:fpr64, %135:fpr64
  %137:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  %138:fpr64 = LDRDui %137:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  %139:fpr64 = FADDDrr %136:fpr64, %138:fpr64
  undef %141.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  %143:fpr128 = SSHLLv2i32_shift %141:fpr64, 0
  %145:fpr64 = SCVTFv1i64 %143.dsub:fpr128
  %146:fpr64 = FMULDrr %139:fpr64, %145:fpr64
  %147:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %148:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  %149:fpr64 = LDRDui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  %150:fpr64 = FMULDrr %147:fpr64, %149:fpr64
  %151:fpr64 = FDIVDrr %146:fpr64, %150:fpr64
  STRDui %151:fpr64, %293:gpr64sp, 37 :: (store 8 into %ir.mflops)
  B %bb.29

bb.28.if.else84:
; predecessors: %bb.26
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  STRXui $xzr, %293:gpr64sp, 37 :: (store 8 into %ir.mflops)

bb.29.if.end85:
; predecessors: %bb.28, %bb.27
  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

  %152:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  %153:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  %154:gpr32 = LDRWui %153:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  %155:gpr32 = LDRWui %153:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  %156:gpr32 = LDRWui %153:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  %157:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  %158:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %159:fpr64 = LDRDui %293:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
  %160:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
  %161:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_40__none__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__
  STRXui %161:gpr64, $sp, 10 :: (store 8 into stack + 80)
  %163:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_39__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_39__O3__mcmod
  STRXui %163:gpr64, $sp, 9 :: (store 8 into stack + 72)
  %164:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_38__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_38__g__Wall__
  STRXui %164:gpr64, $sp, 8 :: (store 8 into stack + 64)
  %165:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_37__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_37__I___commo
  STRXui %165:gpr64, $sp, 7 :: (store 8 into stack + 56)
  %166:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_36__lm_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_36__lm_
  STRXui %166:gpr64, $sp, 6 :: (store 8 into stack + 48)
  %167:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_35___CC__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_35___CC__
  STRXui %167:gpr64, $sp, 5 :: (store 8 into stack + 40)
  %168:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_34_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_34_gcc_
  STRXui %168:gpr64, $sp, 4 :: (store 8 into stack + 32)
  %169:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_33_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_33_03_Nov_201
  STRXui %169:gpr64, $sp, 3 :: (store 8 into stack + 24)
  %170:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_32_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_32_3_3_1_
  STRXui %170:gpr64, $sp, 2 :: (store 8 into stack + 16)
  STRWui %160:gpr32, $sp, 2 :: (store 4 into stack + 8)
  %171:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_31___________, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_31___________
  STRXui %171:gpr64, $sp, 0 :: (store 8 into stack)
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_30_SP_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_30_SP_
  $w1 = COPY %152:gpr32
  $w2 = COPY %154:gpr32
  $w3 = COPY %155:gpr32
  $w4 = COPY %156:gpr32
  $w5 = COPY %157:gpr32
  $d0 = COPY %158:fpr64
  $d1 = COPY %159:fpr64
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp
  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 30, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %152:gpr32, %154:gpr32, %155:gpr32, %156:gpr32, %157:gpr32, %158:fpr64, %159:fpr64, %160:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %173:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %174:gpr32 = LDRWui %173:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %174:gpr32, %bb.44
  B %bb.30

bb.30.if.then86:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %175:gpr32 = MOVi32imm 1
  STRWui %175:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  %255:gpr64sp = ADDXri %stack.10.trecs, 0, 0

bb.31.for.cond87:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  %176:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %176:gpr32common, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit killed $nzcv
  B %bb.32

bb.32.for.body90:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %252:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = COPY %252:gpr32
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 31, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %252:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %253:fpr64 = COPY killed $d0
  %254:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  STRDroX %253:fpr64, %255:gpr64sp, %254:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
  %256:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %257:gpr32common = nsw ADDWri %256:gpr32common, 1, 0
  STRWui %257:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.31

bb.33.for.end95:
; predecessors: %bb.31
  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

  %178:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri %178:fpr64, implicit-def $nzcv
  Bcc 1, %bb.35, implicit killed $nzcv
  B %bb.34

bb.34.if.then98:
; predecessors: %bb.33
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  %179:gpr64 = MOVi64imm 4607182418800017408
  STRXui %179:gpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)

bb.35.if.end99:
; predecessors: %bb.33, %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_41___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_41___SECTION_
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 32, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %182:gpr32 = MOVi32imm 1
  STRWui %182:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  %188:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  %190:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  %192:gpr64temp = ADRP target-flags(aarch64-page) %const.6
  %193:fpr64 = LDRDui %192:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)

bb.36.for.cond101:
; predecessors: %bb.35, %bb.43
  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

  %183:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %183:gpr32common, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit killed $nzcv
  B %bb.37

bb.37.for.body104:
; predecessors: %bb.36
  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

  %186:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %187:gpr64 = UBFMXri %186:gpr64, 61, 60
  %189:gpr64 = LDRXroX %188:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  %191:fpr64 = LDRDroX %190:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
  %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64
  %195:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %196:fpr64 = FDIVDrr %194:fpr64, %195:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_42_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_
  $x1 = COPY %189:gpr64
  $d0 = COPY %191:fpr64
  $d1 = COPY %196:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 33, 0, %196:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %189:gpr64, %191:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %199:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %199:gpr32common, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.39, implicit killed $nzcv
  B %bb.38

bb.38.if.then116:
; predecessors: %bb.37
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %229:fpr64 = LDRDui %293:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
  %230:fpr64 = LDRDui %293:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
  %231:fpr64 = FADDDrr %229:fpr64, %230:fpr64
  %232:fpr64 = LDRDui %293:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  %233:fpr64 = FADDDrr %231:fpr64, %232:fpr64
  STRDui %233:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  %236:fpr64 = FMULDrr %233:fpr64, %193:fpr64
  %237:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %238:fpr64 = FDIVDrr %236:fpr64, %237:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_44_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_44_sub_rhs_
  $d0 = COPY %233:fpr64
  $d1 = COPY %238:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 34, 0, %238:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %233:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %242:fpr64 = LDRDui %293:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  %243:fpr64 = LDRDui %293:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
  %244:fpr64 = FSUBDrr %242:fpr64, %243:fpr64
  STRDui %244:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  %245:fpr64 = FMULDrr %244:fpr64, %193:fpr64
  %246:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %247:fpr64 = FDIVDrr %245:fpr64, %246:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_45_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_45_rest_rhs_
  $d0 = COPY %244:fpr64
  $d1 = COPY %247:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 35, 0, %247:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %244:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.43

bb.39.if.else130:
; predecessors: %bb.37
  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

  %201:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %201:gpr32common, 8, 0, implicit-def $nzcv
  Bcc 1, %bb.41, implicit killed $nzcv
  B %bb.40

bb.40.if.then133:
; predecessors: %bb.39
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %216:fpr64 = LDRDui %293:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
  %217:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
  %218:fpr64 = FSUBDrr %216:fpr64, %217:fpr64
  %219:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  %220:fpr64 = FSUBDrr %218:fpr64, %219:fpr64
  STRDui %220:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  %223:fpr64 = FMULDrr %220:fpr64, %193:fpr64
  %224:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_46_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_46_sub_zsol_
  $d0 = COPY %220:fpr64
  $d1 = COPY %225:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 36, 0, %225:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %220:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.43

bb.41.if.else142:
; predecessors: %bb.39
  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

  %203:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %203:gpr32common, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.43, implicit killed $nzcv
  B %bb.42

bb.42.if.then145:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %205:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
  %206:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
  %207:fpr64 = FADDDrr %205:fpr64, %206:fpr64
  STRDui %207:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  %210:fpr64 = FMULDrr %207:fpr64, %193:fpr64
  %211:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_47_redist_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_47_redist_
  $d0 = COPY %207:fpr64
  $d1 = COPY %212:fpr64
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 37, 0, %212:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %207:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.43.for.inc155:
; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %250:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
  STRWui %251:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  B %bb.36

bb.44.if.end158:
; predecessors: %bb.29, %bb.36
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)

bb.45.return:
; predecessors: %bb.44, %bb.13

  %292:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
  $w8 = COPY %292:gpr32
  RET_ReallyLR implicit killed $w8

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %5:gpr64 = COPY killed $x8
    To: CBZX %5:gpr64, %bb.2
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gpr64 = COPY killed $x8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%5
    SU(1): Data Latency=0 Reg=%5
  Single Issue       : false;
SU(1):   STRXui %5:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Single Issue       : false;
ExitSU:   CBZX %5:gpr64, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %5:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:gpr64 = COPY killed $x8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gpr64 = COPY killed $x8
SU(1):   STRXui %5:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.0 entry
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_

********** MI Scheduling **********
main:%bb.0 entry
  From: %293:gpr64sp = ADDXri %stack.13.t_names, 0, 0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %293:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%293
  Single Issue       : false;
SU(1):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%1
  Single Issue       : false;
SU(2):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(5):   STRXui %1:gpr64, %293:gpr64sp, 40 :: (store 8 into %ir.argv.addr)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
    SU(0): Data Latency=1 Reg=%293
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %1:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %0:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRXui %1:gpr64, %293:gpr64sp, 40 :: (store 8 into %ir.argv.addr)
  Ready @0c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %293:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  Ready @3c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   %1:gpr64 = COPY $x1
SU(2):   %0:gpr32 = COPY $w0
SU(0):   %293:gpr64sp = ADDXri %stack.13.t_names, 0, 0
SU(3):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(4):   STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(5):   STRXui %1:gpr64, %293:gpr64sp, 40 :: (store 8 into %ir.argv.addr)

********** MI Scheduling **********
main:%bb.1 if.then
  From: %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 34
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=3
Live In: %293 
Live Out: %25 %293 
Live Thru: GPR32=1
  LiveReg: %25
  LiveReg: %293
  UpdateRegP: SU(32) STRXui %24:gpr64, %293:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
              to GPR32 1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=2
Excess PSets: 
Cluster ld/st SU(24) - SU(26)
  Copy Succ SU(32)
Cluster ld/st SU(28) - SU(30)
  Copy Succ SU(32)
Cluster ld/st SU(22) - SU(20)
  Copy Succ SU(32)
Cluster ld/st SU(18) - SU(16)
  Copy Succ SU(32)
Cluster ld/st SU(14) - SU(12)
  Copy Succ SU(32)
Cluster ld/st SU(10) - SU(8)
  Copy Succ SU(32)
Cluster ld/st SU(6) - SU(4)
  Copy Succ SU(32)
SU(0):   %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%8
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   %9:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%9
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%9
    SU(0): Data Latency=1 Reg=%8
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(3):   %10:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_2_total_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRXui %10:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%10
    SU(6): Ord  Latency=0 Cluster
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_3_rhsx_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%11
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   STRXui %11:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%11
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_4_rhsy_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%12
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   STRXui %12:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%12
    SU(10): Ord  Latency=0 Cluster
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_5_rhsz_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%13
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   STRXui %13:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%13
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_6_rhs_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=%14
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   STRXui %14:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%14
    SU(14): Ord  Latency=0 Cluster
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_7_xsolve_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=1 Reg=%15
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   STRXui %15:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=%15
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_8_ysolve_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(16): Data Latency=1 Reg=%16
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   STRXui %16:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=%16
    SU(18): Ord  Latency=0 Cluster
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(17):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_9_zsolve_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(18): Data Latency=1 Reg=%17
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   STRXui %17:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(17): Data Latency=1 Reg=%17
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_10_redist1_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%18
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %18:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%18
    SU(22): Ord  Latency=0 Cluster
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_11_redist2_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(22): Data Latency=1 Reg=%19
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   STRXui %19:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%19
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(23):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_12_tzetar_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_12_tzetar_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(24): Data Latency=1 Reg=%20
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   STRXui %20:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(23): Data Latency=1 Reg=%20
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(25):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_13_ninvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_13_ninvr_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(26): Data Latency=1 Reg=%21
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(26):   STRXui %21:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(25): Data Latency=1 Reg=%21
    SU(24): Ord  Latency=0 Cluster
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(27):   %22:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_14_pinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_14_pinvr_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(28): Data Latency=1 Reg=%22
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(28):   STRXui %22:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(27): Data Latency=1 Reg=%22
  Successors:
    SU(32): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(29):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_15_txinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_15_txinvr_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(30): Data Latency=1 Reg=%23
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(30):   STRXui %23:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(29): Data Latency=1 Reg=%23
    SU(28): Ord  Latency=0 Cluster
  Successors:
    SU(32): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(31):   %24:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_16_add_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_16_add_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(32): Data Latency=1 Reg=%24
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(32):   STRXui %24:gpr64, %293:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
  # preds left       : 15
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(31): Data Latency=1 Reg=%24
    SU(30): Ord  Latency=0 Memory
    SU(28): Ord  Latency=0 Memory
    SU(26): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(33):   %25:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(33): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 33 
Queue BotQ.A: 32 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 
Picking from Bot:
  Cand SU(32) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(32) STRXui %24:gpr64, %293:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
Bottom Pressure:
GPR32=3
  LiveReg: %24
  UpdateRegP: SU(32) STRXui %24:gpr64, %293:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
              to 
  Ready @0c
  BotQ.A TopLatency SU(32) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 33 
Queue BotQ.A: 2 31 30 28 26 24 22 20 18 16 14 12 10 8 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(31) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(31) %24:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_16_add_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_16_add_
Bottom Pressure:
GPR32=2
  Ready @1c
  BotQ.A BotLatency SU(31) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 33 
Queue BotQ.A: 2 4 30 28 26 24 22 20 18 16 14 12 10 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 33 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(30) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(30) STRXui %23:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
Bottom Pressure:
GPR32=3
  LiveReg: %23
  UpdateRegP: SU(30) STRXui %23:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
              to 
  Ready @2c
  BotQ.A TopLatency SU(30) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 28 26 24 22 20 18 16 14 12 10 8 29 33 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 33 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(28) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(28) STRXui %22:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
Bottom Pressure:
GPR32=4
  LiveReg: %22
  UpdateRegP: SU(28) STRXui %22:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
              to 
  Ready @3c
  BotQ.A TopLatency SU(28) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 33 26 24 22 20 18 16 14 12 10 8 29 27 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 33 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(33) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(33) %25:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
Bottom Pressure:
GPR32=3
  Ready @4c
  BotQ.A BotLatency SU(33) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 27 26 24 22 20 18 16 14 12 10 8 29 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(26) STRXui %21:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
Bottom Pressure:
GPR32=4
  LiveReg: %21
  UpdateRegP: SU(26) STRXui %21:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
              to 
  Ready @5c
  BotQ.A TopLatency SU(26) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 27 29 24 22 20 18 16 14 12 10 8 25 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(27) REG-MAX                            
  Cand SU(29) ORDER                              
  Cand SU(24) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(24) STRXui %20:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
Bottom Pressure:
GPR32=5
  LiveReg: %20
  UpdateRegP: SU(24) STRXui %20:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
              to 
  Ready @6c
  BotQ.A TopLatency SU(24) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 27 29 25 22 20 18 16 14 12 10 8 23 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(27) REG-MAX                            
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(29) %23:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_15_txinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_15_txinvr_
Bottom Pressure:
GPR32=4
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 27 23 25 22 20 18 16 14 12 10 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(20) STRXui %18:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
Bottom Pressure:
GPR32=5
  LiveReg: %18
  UpdateRegP: SU(20) STRXui %18:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
              to 
  Ready @8c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 27 23 25 22 8 18 16 14 12 10 19 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(27) REG-MAX                            
  Cand SU(22) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(22) STRXui %19:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
Bottom Pressure:
GPR32=6
  LiveReg: %19
  UpdateRegP: SU(22) STRXui %19:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
              to 
  Ready @9c
  BotQ.A TopLatency SU(22) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 27 23 25 19 8 18 16 14 12 10 21 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 27 
  BotQ.A RemainingLatency 0 + 10c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(27) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(27) %22:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_14_pinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_14_pinvr_
Bottom Pressure:
GPR32=5
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 21 23 25 19 8 18 16 14 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 
  BotQ.A RemainingLatency 0 + 11c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(8) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(16) STRXui %16:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
Bottom Pressure:
GPR32=6
  LiveReg: %16
  UpdateRegP: SU(16) STRXui %16:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
              to 
  Ready @11c
  BotQ.A TopLatency SU(16) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 21 23 25 19 8 18 10 14 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 
  BotQ.A RemainingLatency 0 + 12c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(21) REG-MAX                            
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(18) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(18) STRXui %17:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
Bottom Pressure:
GPR32=7
  LiveReg: %17
  UpdateRegP: SU(18) STRXui %17:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
              to 
  Ready @12c
  BotQ.A TopLatency SU(18) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 21 23 25 19 8 15 10 14 12 17 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 25 
  BotQ.A RemainingLatency 0 + 13c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(21) REG-MAX                            
  Cand SU(23) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(25) %21:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_13_ninvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_13_ninvr_
Bottom Pressure:
GPR32=6
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 21 23 17 19 8 15 10 14 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 
  BotQ.A RemainingLatency 0 + 14c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) STRXui %14:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
Bottom Pressure:
GPR32=7
  LiveReg: %14
  UpdateRegP: SU(12) STRXui %14:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
              to 
  Ready @14c
  BotQ.A TopLatency SU(12) 1c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 21 23 17 19 8 15 10 14 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 
  BotQ.A RemainingLatency 0 + 15c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(21) REG-MAX                            
  Cand SU(23) ORDER                              
  Cand SU(14) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(14) STRXui %15:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
Bottom Pressure:
GPR32=8
  LiveReg: %15
  UpdateRegP: SU(14) STRXui %15:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
              to 
  Ready @15c
  BotQ.A TopLatency SU(14) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 21 23 17 19 8 15 10 11 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 23 
  BotQ.A RemainingLatency 0 + 16c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(21) REG-MAX                            
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(23) %20:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_12_tzetar_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_12_tzetar_
Bottom Pressure:
GPR32=7
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 21 13 17 19 8 15 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 
  BotQ.A RemainingLatency 0 + 17c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(8) STRXui %12:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
Bottom Pressure:
GPR32=8
  LiveReg: %12
  UpdateRegP: SU(8) STRXui %12:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
              to 
  Ready @17c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 21 13 17 19 11 15 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 
  BotQ.A RemainingLatency 0 + 18c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(21) REG-MAX                            
  Cand SU(10) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(10) STRXui %13:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
Bottom Pressure:
GPR32=9
  LiveReg: %13
  UpdateRegP: SU(10) STRXui %13:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
              to 
  Ready @18c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 21 13 17 19 11 15 7 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 21 
  BotQ.A RemainingLatency 0 + 19c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX    GPR32:1                    
  Cand SU(21) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(21) %19:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_11_redist2_
Bottom Pressure:
GPR32=8
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 6 9 13 17 19 11 15 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 20c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(4) STRXui %10:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
Bottom Pressure:
GPR32=9
  LiveReg: %10
  UpdateRegP: SU(4) STRXui %10:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
              to 
  Ready @20c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 6 9 13 17 19 11 15 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 21c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
  Cand SU(6) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(6) STRXui %11:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
Bottom Pressure:
GPR32=10
  LiveReg: %11
  UpdateRegP: SU(6) STRXui %11:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
              to 
  Ready @21c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 3 9 13 17 19 11 15 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 19 
  BotQ.A RemainingLatency 0 + 22c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
  Cand SU(9) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(19) %18:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_10_redist1_
Bottom Pressure:
GPR32=9
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 3 9 13 17 5 11 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 17 
  BotQ.A RemainingLatency 0 + 23c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
  Cand SU(9) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(17) %17:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_9_zsolve_
Bottom Pressure:
GPR32=8
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 3 9 13 15 5 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 
  BotQ.A RemainingLatency 0 + 24c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
Bottom Pressure:
GPR64temp=1
GPR32=10
  LiveReg: %9
  UpdateRegP: SU(2) STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to GPR64temp 1    GPR32 1
  LiveReg: %8
  UpdateRegP: SU(2) STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
              to 
  Ready @24c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 7 3 9 13 15 5 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 15 
  BotQ.A RemainingLatency 0 + 25c > CritPath 3
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) %16:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_8_ysolve_
Bottom Pressure:
GPR64temp=1
GPR32=9
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 7 3 9 13 0 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 13 
  BotQ.A RemainingLatency 0 + 26c > CritPath 3
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %15:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_7_xsolve_
Bottom Pressure:
GPR64temp=1
GPR32=8
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 7 3 9 1 0 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 27c > CritPath 3
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %14:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_6_rhs_
Bottom Pressure:
GPR64temp=1
GPR32=7
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 3 9 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 
  BotQ.A RemainingLatency 0 + 28c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %13:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_5_rhsz_
Bottom Pressure:
GPR64temp=1
GPR32=6
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 
  BotQ.A RemainingLatency 0 + 29c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %12:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_4_rhsy_
Bottom Pressure:
GPR64temp=1
GPR32=5
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 1 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  BotQ.A RemainingLatency 0 + 30c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %11:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_3_rhsx_
Bottom Pressure:
GPR64temp=1
GPR32=4
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 31c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %10:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_2_total_
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 32c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %9:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
Bottom Pressure:
GPR32=1
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %9:gpr32 = MOVi32imm 1
SU(3):   %10:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_2_total_
SU(5):   %11:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_3_rhsx_
SU(7):   %12:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_4_rhsy_
SU(9):   %13:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_5_rhsz_
SU(11):   %14:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_6_rhs_
SU(13):   %15:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_7_xsolve_
SU(15):   %16:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_8_ysolve_
SU(2):   STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(17):   %17:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_9_zsolve_
SU(19):   %18:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_10_redist1_
SU(6):   STRXui %11:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
SU(4):   STRXui %10:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
SU(21):   %19:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_11_redist2_
SU(10):   STRXui %13:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
SU(8):   STRXui %12:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
SU(23):   %20:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_12_tzetar_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_12_tzetar_
SU(14):   STRXui %15:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
SU(12):   STRXui %14:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
SU(25):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_13_ninvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_13_ninvr_
SU(18):   STRXui %17:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
SU(16):   STRXui %16:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
SU(27):   %22:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_14_pinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_14_pinvr_
SU(22):   STRXui %19:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
SU(20):   STRXui %18:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
SU(29):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_15_txinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_15_txinvr_
SU(24):   STRXui %20:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
SU(26):   STRXui %21:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
SU(33):   %25:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(28):   STRXui %22:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
SU(30):   STRXui %23:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
SU(31):   %24:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_16_add_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_16_add_
SU(32):   STRXui %24:gpr64, %293:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)

********** MI Scheduling **********
main:%bb.2 if.else
  From: %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%6
  Single Issue       : false;
SU(1):   STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%6
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

********** MI Scheduling **********
main:%bb.3 if.end
  From: %31:gpr64 = COPY killed $x8
    To: CBZX %31:gpr64, %bb.9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %31:gpr64 = COPY killed $x8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%31
    SU(1): Data Latency=0 Reg=%31
  Single Issue       : false;
SU(1):   STRXui %31:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%31
  Single Issue       : false;
ExitSU:   CBZX %31:gpr64, %bb.9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%31
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %31:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %31:gpr64 = COPY killed $x8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %31:gpr64 = COPY killed $x8
SU(1):   STRXui %31:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_18_inputsp_da, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_18_inputsp_da, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_18_inputsp_da, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_18_inputsp_da, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_

********** MI Scheduling **********
main:%bb.4 if.then19
  From: %45:gpr32 = COPY killed $w8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %45:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%45
  Single Issue       : false;
SU(1):   STRWui %45:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%45
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %45:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %45:gpr32 = COPY killed $w8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %45:gpr32 = COPY killed $w8
SU(1):   STRWui %45:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.4 if.then19
  From: $x0 = COPY %42:gpr64
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %42:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_20__d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_20__d_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = ADDXri %stack.4.niter, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %42:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = ADDXri %stack.4.niter, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @sp__str_20__d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_20__d_
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_20__d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_20__d_
SU(2):   $x2 = ADDXri %stack.4.niter, 0, 0
SU(0):   $x0 = COPY %42:gpr64

********** MI Scheduling **********
main:%bb.5 while.cond
  From: %47:gpr32sp = COPY killed $w8
    To: Bcc 1, %bb.5, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %47:gpr32sp = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%47
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%47
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.5, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %47:gpr32sp = COPY killed $w8
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %47:gpr32sp = COPY killed $w8
SU(1):   dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.6 while.end
  From: %52:gpr32 = COPY killed $w8
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %52:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%52
  Single Issue       : false;
SU(1):   STRWui %52:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%52
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %52:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %52:gpr32 = COPY killed $w8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %52:gpr32 = COPY killed $w8
SU(1):   STRWui %52:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.6 while.end
  From: $x0 = COPY %49:gpr64
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %49:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_21__lf_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_21__lf_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %49:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @sp__str_21__lf_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_21__lf_
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_21__lf_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_21__lf_
SU(2):   $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
SU(0):   $x0 = COPY %49:gpr64

********** MI Scheduling **********
main:%bb.7 while.cond25
  From: %54:gpr32sp = COPY killed $w8
    To: Bcc 1, %bb.7, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %54:gpr32sp = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=0 Reg=%54
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%54
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.7, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %54:gpr32sp = COPY killed $w8
  Ready @2c
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %54:gpr32sp = COPY killed $w8
SU(1):   dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.8 while.end29
  From: %61:gpr32 = COPY killed $w8
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %61:gpr32 = COPY killed $w8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%61
  Single Issue       : false;
SU(1):   STRWui %61:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%61
  Single Issue       : false;
SU(2):   %62:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %61:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %61:gpr32 = COPY killed $w8
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %62:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(2):   %62:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
SU(0):   %61:gpr32 = COPY $w8
SU(1):   STRWui %61:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

********** MI Scheduling **********
main:%bb.8 while.end29
  From: %57:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w8
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=6
Live In: %56 
Live Out: W8 %56 
Live Thru: GPR32=1
  LiveReg: %56
  UpdateRegP: SU(3) $x0 = COPY %56:gpr64
              to GPR32 -1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=6
Excess PSets: 
SU(0):   %57:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%57
    SU(1): Data Latency=1 Reg=%57
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %58:gpr64sp = nuw ADDXri %57:gpr64common, 4, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=%57
  Successors:
    SU(6): Data Latency=1 Reg=%58
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %59:gpr64sp = nuw ADDXri %57:gpr64common, 8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=%57
  Successors:
    SU(7): Data Latency=1 Reg=%59
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   $x0 = COPY %56:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_22__d_d_d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_22__d_d_d_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   $x3 = COPY %58:gpr64sp
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%58
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   $x4 = COPY %59:gpr64sp
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%59
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w8
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=0 Artificial
    SU(6): Ord  Latency=0 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 2
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 4 
Queue BotQ.A: 7 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 5 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $x4 = COPY %59:gpr64sp
Bottom Pressure:
GPR32=6
  LiveReg: %59
  UpdateRegP: SU(7) $x4 = COPY %59:gpr64sp
              to GPR32 -1
  Ready @0c
  BotQ.A TopLatency SU(7) 2c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 4 2 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 5 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(6) $x3 = COPY %58:gpr64sp
Bottom Pressure:
GPR32=6
  LiveReg: %58
  UpdateRegP: SU(6) $x3 = COPY %58:gpr64sp
              to GPR32 -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 4 2 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) $x0 = COPY %56:gpr64
Bottom Pressure:
GPR32=5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 1 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 5 4 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=4
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 2c > CritPath 2
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %59:gpr64sp = nuw ADDXri %57:gpr64common, 8, 0
Bottom Pressure:
GPR32=4
  LiveReg: %57
  UpdateRegP: SU(1) %58:gpr64sp = nuw ADDXri %57:gpr64common, 4, 0
              to GPR32 -1
  UpdateRegP: SU(2) %59:gpr64sp = nuw ADDXri %57:gpr64common, 8, 0
              to GPR32 -1
  Ready @2c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  BotQ.A RemainingLatency 0 + 3c > CritPath 2
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(1) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %58:gpr64sp = nuw ADDXri %57:gpr64common, 4, 0
Bottom Pressure:
GPR32=3
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  BotQ.A RemainingLatency 0 + 4c > CritPath 2
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) $x1 = MOVaddr target-flags(aarch64-page) @sp__str_22__d_d_d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_22__d_d_d_
Bottom Pressure:
GPR32=2
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %57:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=1
  Ready @5c
  BotQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %57:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(4):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_22__d_d_d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_22__d_d_d_
SU(1):   %58:gpr64sp = nuw ADDXri %57:gpr64common, 4, 0
SU(2):   %59:gpr64sp = nuw ADDXri %57:gpr64common, 8, 0
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(3):   $x0 = COPY %56:gpr64
SU(6):   $x3 = COPY %58:gpr64sp
SU(7):   $x4 = COPY %59:gpr64sp

********** MI Scheduling **********
main:%bb.9 if.else32
  From: %34:gpr32 = MOVi32imm 400
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %34:gpr32 = MOVi32imm 400
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%34
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRWui %34:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%34
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %35:gpr64temp = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%35
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(3):   %36:gpr64 = MOVi64imm 4562254508917369340
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%36
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRXui %36:gpr64, %35:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%36
    SU(2): Data Latency=1 Reg=%35
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(5):   %37:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%37
    SU(7): Data Latency=1 Reg=%37
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %38:gpr64 = MOVi64imm 438086664294
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%38
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %38:gpr64, %37:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%38
    SU(5): Data Latency=1 Reg=%37
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(8):   %39:gpr32 = MOVi32imm 102
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%39
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRWui %39:gpr32, %37:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%39
    SU(5): Data Latency=1 Reg=%37
  Pressure Diff      : GPR32 2
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) STRWui %39:gpr32, %37:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GPR32=2
  LiveReg: %39
  UpdateRegP: SU(9) STRWui %39:gpr32, %37:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to GPR32 1
  LiveReg: %37
  UpdateRegP: SU(7) STRXui %38:gpr64, %37:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
              to GPR32 1
  UpdateRegP: SU(9) STRWui %39:gpr32, %37:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 4 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(8) %39:gpr32 = MOVi32imm 102
Bottom Pressure:
GPR32=1
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) STRXui %38:gpr64, %37:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
Bottom Pressure:
GPR32=2
  LiveReg: %38
  UpdateRegP: SU(7) STRXui %38:gpr64, %37:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
              to 
  Ready @2c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %38:gpr64 = MOVi64imm 438086664294
Bottom Pressure:
GPR32=1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(1) STRWui %34:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
Bottom Pressure:
GPR32=2
  LiveReg: %34
  UpdateRegP: SU(1) STRWui %34:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
              to 
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %37:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(0) %34:gpr32 = MOVi32imm 400
Bottom Pressure:

  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRXui %36:gpr64, %35:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
Bottom Pressure:
GPR64temp=1
GPR32=2
  LiveReg: %36
  UpdateRegP: SU(4) STRXui %36:gpr64, %35:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
              to GPR64temp 1    GPR32 1
  LiveReg: %35
  UpdateRegP: SU(4) STRXui %36:gpr64, %35:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
              to 
  Ready @7c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %36:gpr64 = MOVi64imm 4562254508917369340
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %35:gpr64temp = ADRP target-flags(aarch64-page) @dt
Bottom Pressure:

  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(2):   %35:gpr64temp = ADRP target-flags(aarch64-page) @dt
SU(3):   %36:gpr64 = MOVi64imm 4562254508917369340
SU(4):   STRXui %36:gpr64, %35:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
SU(0):   %34:gpr32 = MOVi32imm 400
SU(5):   %37:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(1):   STRWui %34:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
SU(6):   %38:gpr64 = MOVi64imm 438086664294
SU(7):   STRXui %38:gpr64, %37:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
SU(8):   %39:gpr32 = MOVi32imm 102
SU(9):   STRWui %39:gpr32, %37:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %79:gpr32common = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
    To: Bcc 12, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %79:gpr32common = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%79
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %79:gpr32common, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%79
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %79:gpr32common, 102, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %79:gpr32common = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %79:gpr32common = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(1):   dead $wzr = SUBSWri %79:gpr32common, 102, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.10 if.end34
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_25__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_25__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %72:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %74:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %74:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %72:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_25__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_25__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration
SU(1):   $w1 = COPY %72:gpr32
SU(2):   $d0 = COPY %74:fpr64

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %72:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %72:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %73:gpr64temp = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=1 Reg=%73
  Single Issue       : false;
SU(2):   %74:fpr64 = LDRDui %73:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%73
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %74:fpr64 = LDRDui %73:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  Ready @3c
  BotQ.A TopLatency SU(2) 1c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %73:gpr64temp = ADRP target-flags(aarch64-page) @dt
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %72:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %72:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(1):   %73:gpr64temp = ADRP target-flags(aarch64-page) @dt
SU(2):   %74:fpr64 = LDRDui %73:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)

********** MI Scheduling **********
main:%bb.10 if.end34
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_24__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_24__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %67:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %68:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w3 = COPY %69:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w3 = COPY %69:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %68:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %67:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_24__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_24__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d
SU(1):   $w1 = COPY %67:gpr32
SU(2):   $w2 = COPY %68:gpr32
SU(3):   $w3 = COPY %69:gpr32

********** MI Scheduling **********
main:%bb.10 if.end34
  From: %66:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(2)
  Copy Succ SU(4294967295)
SU(0):   %66:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1 Reg=%66
    SU(2): Data Latency=1 Reg=%66
    SU(1): Data Latency=1 Reg=%66
  Single Issue       : false;
SU(1):   %67:gpr32 = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%66
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(2): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   %68:gpr32 = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%66
    SU(1): Ord  Latency=0 Cluster
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %69:gpr32 = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%66
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %66:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
BotQ.A RemLatency SU(3) 1c
TopQ.A RemLatency SU(3) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot WEAK      
Scheduling SU(3) %69:gpr32 = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
TopQ.A RemLatency SU(1) 3c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot WEAK      
Scheduling SU(2) %68:gpr32 = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @4c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %67:gpr32 = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %66:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(1):   %67:gpr32 = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(2):   %68:gpr32 = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(3):   %69:gpr32 = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.11 if.end34
  From: %64:gpr32common = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
    To: Bcc 12, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %64:gpr32common = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%64
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %64:gpr32common, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%64
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %64:gpr32common, 102, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %64:gpr32common = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %64:gpr32common = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(1):   dead $wzr = SUBSWri %64:gpr32common, 102, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.12 if.end34
  From: %65:gpr32common = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
    To: Bcc 11, %bb.14, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %65:gpr32common = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%65
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %65:gpr32common, 103, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%65
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.14, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %65:gpr32common, 103, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %65:gpr32common = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %65:gpr32common = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(1):   dead $wzr = SUBSWri %65:gpr32common, 103, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.13 if.then42
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_27___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_27___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %284:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %285:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w3 = COPY %286:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w3 = COPY %286:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %285:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %284:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_27___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_27___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___
SU(1):   $w1 = COPY %284:gpr32
SU(2):   $w2 = COPY %285:gpr32
SU(3):   $w3 = COPY %286:gpr32

********** MI Scheduling **********
main:%bb.13 if.then42
  From: %283:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(2)
  Copy Succ SU(4294967295)
SU(0):   %283:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1 Reg=%283
    SU(2): Data Latency=1 Reg=%283
    SU(1): Data Latency=1 Reg=%283
  Single Issue       : false;
SU(1):   %284:gpr32 = LDRWui %283:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%283
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(2): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   %285:gpr32 = LDRWui %283:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%283
    SU(1): Ord  Latency=0 Cluster
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %286:gpr32 = LDRWui %283:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%283
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %283:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 1 
BotQ.A RemLatency SU(3) 1c
TopQ.A RemLatency SU(3) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot WEAK      
Scheduling SU(3) %286:gpr32 = LDRWui %283:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
TopQ.A RemLatency SU(1) 3c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot WEAK      
Scheduling SU(2) %285:gpr32 = LDRWui %283:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @4c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %284:gpr32 = LDRWui %283:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @5c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %283:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(1):   %284:gpr32 = LDRWui %283:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(2):   %285:gpr32 = LDRWui %283:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(3):   %286:gpr32 = LDRWui %283:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.14 if.end45
  From: %95:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %95:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%95
  Single Issue       : false;
SU(1):   STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%95
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %95:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %95:gpr32 = MOVi32imm 1
SU(1):   STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.14 if.end45
  From: %85:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
Cluster ld/st SU(1) - SU(5)
  Copy Succ SU(2)
SU(0):   %85:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(9): Data Latency=1 Reg=%85
    SU(5): Data Latency=1 Reg=%85
    SU(1): Data Latency=1 Reg=%85
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %86:gpr32common = LDRWui %85:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=%85
  Successors:
    SU(2): Data Latency=4 Reg=%86
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %87:gpr32common = SUBWri %86:gpr32common, 2, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%86
    SU(5): Ord  Latency=0 Artificial
  Successors:
    SU(4): Data Latency=1 Reg=%87
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %88:gpr64temp = ADRP target-flags(aarch64-page) @nx2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%88
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(4):   STRWui %87:gpr32common, %88:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%87
    SU(3): Data Latency=1 Reg=%88
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(5):   %89:gpr32common = LDRWui %85:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=%85
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(6): Data Latency=4 Reg=%89
    SU(2): Ord  Latency=0 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %90:gpr32common = SUBWri %89:gpr32common, 2, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=%89
  Successors:
    SU(8): Data Latency=1 Reg=%90
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %91:gpr64temp = ADRP target-flags(aarch64-page) @ny2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%91
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(8):   STRWui %90:gpr32common, %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%90
    SU(7): Data Latency=1 Reg=%91
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(9):   %92:gpr32common = LDRWui %85:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=%85
  Successors:
    SU(10): Data Latency=4 Reg=%92
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %93:gpr32common = SUBWri %92:gpr32common, 2, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=%92
  Successors:
    SU(12): Data Latency=1 Reg=%93
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %94:gpr64temp = ADRP target-flags(aarch64-page) @nz2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=%94
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(12):   STRWui %93:gpr32common, %94:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%93
    SU(11): Data Latency=1 Reg=%94
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 8 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 11 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %93:gpr32common, %94:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
Bottom Pressure:
GPR64temp=1
GPR32=2
  LiveReg: %93
  UpdateRegP: SU(12) STRWui %93:gpr32common, %94:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
              to GPR64temp 1    GPR32 1
  LiveReg: %94
  UpdateRegP: SU(12) STRWui %93:gpr32common, %94:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
              to 
  Ready @0c
  BotQ.A TopLatency SU(12) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 11 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 1c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(10) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(10) %93:gpr32common = SUBWri %92:gpr32common, 2, 0
Bottom Pressure:
GPR64temp=1
GPR32=2
  LiveReg: %92
  UpdateRegP: SU(10) %93:gpr32common = SUBWri %92:gpr32common, 2, 0
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 4 8 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 11 
BotQ.A RemLatency SU(4) 6c
BotQ.A RemLatency SU(9) 1c
  BotQ.A RemainingLatency 6 + 2c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(11) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %94:gpr64temp = ADRP target-flags(aarch64-page) @nz2
Bottom Pressure:
GPR32=1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 4 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 
BotQ.A RemLatency SU(4) 6c
BotQ.A RemLatency SU(9) 1c
  BotQ.A RemainingLatency 6 + 3c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRWui %90:gpr32common, %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %90
  UpdateRegP: SU(8) STRWui %90:gpr32common, %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
              to GPR64temp 1    GPR32 1
  LiveReg: %91
  UpdateRegP: SU(8) STRWui %90:gpr32common, %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
              to 
  Ready @3c
  BotQ.A TopLatency SU(8) 6c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 4 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 
BotQ.A RemLatency SU(4) 6c
BotQ.A RemLatency SU(9) 1c
  BotQ.A RemainingLatency 6 + 4c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %90:gpr32common = SUBWri %89:gpr32common, 2, 0
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %89
  UpdateRegP: SU(6) %90:gpr32common = SUBWri %89:gpr32common, 2, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 5c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) REG-MAX                            
  Cand SU(9) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %92:gpr32common = LDRWui %85:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %85
  UpdateRegP: SU(1) %86:gpr32common = LDRWui %85:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
              to GPR32 -1
  UpdateRegP: SU(5) %89:gpr32common = LDRWui %85:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
              to GPR32 -1
  UpdateRegP: SU(9) %92:gpr32common = LDRWui %85:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to GPR32 -1
  Ready @5c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 6c > CritPath 6
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %91:gpr64temp = ADRP target-flags(aarch64-page) @ny2
Bottom Pressure:
GPR32=2
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %87:gpr32common, %88:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
Bottom Pressure:
GPR64temp=1
GPR32=4
  LiveReg: %87
  UpdateRegP: SU(4) STRWui %87:gpr32common, %88:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
              to GPR64temp 1    GPR32 1
  LiveReg: %88
  UpdateRegP: SU(4) STRWui %87:gpr32common, %88:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
              to 
  Ready @7c
  BotQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 8c > CritPath 6
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %87:gpr32common = SUBWri %86:gpr32common, 2, 0
Bottom Pressure:
GPR64temp=1
GPR32=4
  LiveReg: %86
  UpdateRegP: SU(2) %87:gpr32common = SUBWri %86:gpr32common, 2, 0
              to GPR32 -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 9c > CritPath 6
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %89:gpr32common = LDRWui %85:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %88:gpr64temp = ADRP target-flags(aarch64-page) @nx2
Bottom Pressure:
GPR32=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 12 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %86:gpr32common = LDRWui %85:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:
GPR32=1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %85:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:

  Ready @13c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %85:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(1):   %86:gpr32common = LDRWui %85:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(3):   %88:gpr64temp = ADRP target-flags(aarch64-page) @nx2
SU(5):   %89:gpr32common = LDRWui %85:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(2):   %87:gpr32common = SUBWri %86:gpr32common, 2, 0
SU(4):   STRWui %87:gpr32common, %88:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
SU(7):   %91:gpr64temp = ADRP target-flags(aarch64-page) @ny2
SU(9):   %92:gpr32common = LDRWui %85:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(6):   %90:gpr32common = SUBWri %89:gpr32common, 2, 0
SU(8):   STRWui %90:gpr32common, %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
SU(11):   %94:gpr64temp = ADRP target-flags(aarch64-page) @nz2
SU(10):   %93:gpr32common = SUBWri %92:gpr32common, 2, 0
SU(12):   STRWui %93:gpr32common, %94:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)

********** MI Scheduling **********
main:%bb.15 for.cond
  From: %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.17, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%96
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%96
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.17, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.16 for.body
  From: %281:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.15
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %281:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%281
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%281
  Successors:
    SU(2): Data Latency=1 Reg=%282
  Single Issue       : false;
SU(2):   STRWui %282:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%282
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %282:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %281:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %281:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0
SU(2):   STRWui %282:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.17 for.end
  From: %98:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %98:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%98
  Single Issue       : false;
SU(1):   STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%98
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %98:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %98:gpr32 = MOVi32imm 1
SU(1):   STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.18 for.cond49
  From: %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.20, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%99
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%99
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.20, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.19 for.body51
  From: %278:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.18
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %278:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%278
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %279:gpr32common = nsw ADDWri %278:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%278
  Successors:
    SU(2): Data Latency=1 Reg=%279
  Single Issue       : false;
SU(2):   STRWui %279:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%279
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %279:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %279:gpr32common = nsw ADDWri %278:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %278:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %278:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %279:gpr32common = nsw ADDWri %278:gpr32common, 1, 0
SU(2):   STRWui %279:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.20 for.end54
  From: STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %261.sub_32:gpr64 = MOVi32imm 1717986919
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %268:gpr32 = MOVi32imm 20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %268:gpr32 = MOVi32imm 20
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %261.sub_32:gpr64 = MOVi32imm 1717986919
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
SU(1):   undef %261.sub_32:gpr64 = MOVi32imm 1717986919
SU(2):   %268:gpr32 = MOVi32imm 20

********** MI Scheduling **********
main:%bb.20 for.end54
  From: %101:gpr32 = MOVi32imm 1
    To: BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %101:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %101:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(1):   $w0 = MOVi32imm 1
SU(0):   %101:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.21 for.cond55
  From: %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: Bcc 12, %bb.26, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(1):   %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%103
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%103
    SU(0): Data Latency=4 Reg=%102
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.26, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(2):   dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.22 for.body57
  From: %259:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: CBZW %270:gpr32, %bb.24
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %259:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=%259
    SU(1): Data Latency=4 Reg=%259
  Single Issue       : false;
SU(1):   %262:gpr64 = MADDXrrr %259:gpr64common, %261:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%259
  Successors:
    SU(3): Data Latency=1 Reg=%262
    SU(2): Data Latency=1 Reg=%262
  Single Issue       : false;
SU(2):   %263:gpr64 = UBFMXri %262:gpr64, 63, 63
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%262
  Successors:
    SU(4): Data Latency=1 Reg=%263
  Single Issue       : false;
SU(3):   %265:gpr64 = SBFMXri %262:gpr64, 35, 63
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%262
  Successors:
    SU(4): Data Latency=1 Reg=%265
  Single Issue       : false;
SU(4):   %267:gpr32 = ADDWrr %265.sub_32:gpr64, %263.sub_32:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%265
    SU(2): Data Latency=1 Reg=%263
  Successors:
    SU(5): Data Latency=1 Reg=%267
  Single Issue       : false;
SU(5):   %270:gpr32 = MSUBWrrr %267:gpr32, %268:gpr32, %259.sub_32:gpr64common
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%267
    SU(0): Data Latency=4 Reg=%259
  Successors:
    ExitSU: Data Latency=1 Reg=%270
  Single Issue       : false;
ExitSU:   CBZW %270:gpr32, %bb.24
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%270
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %270:gpr32 = MSUBWrrr %267:gpr32, %268:gpr32, %259.sub_32:gpr64common
  Ready @1c
  BotQ.A TopLatency SU(5) 7c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %267:gpr32 = ADDWrr %265.sub_32:gpr64, %263.sub_32:gpr64
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %259:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %262:gpr64 = MADDXrrr %259:gpr64common, %261:gpr64, $xzr
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
BotQ.A RemLatency SU(3) 5c
TopQ.A RemLatency SU(3) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %265:gpr64 = SBFMXri %262:gpr64, 35, 63
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %263:gpr64 = UBFMXri %262:gpr64, 63, 63
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %259:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %262:gpr64 = MADDXrrr %259:gpr64common, %261:gpr64, $xzr
SU(2):   %263:gpr64 = UBFMXri %262:gpr64, 63, 63
SU(3):   %265:gpr64 = SBFMXri %262:gpr64, 35, 63
SU(4):   %267:gpr32 = ADDWrr %265.sub_32:gpr64, %263.sub_32:gpr64
SU(5):   %270:gpr32 = MSUBWrrr %267:gpr32, %268:gpr32, %259.sub_32:gpr64common

********** MI Scheduling **********
main:%bb.24 if.then61
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_29__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_29__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %272:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %272:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_29__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_29__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step
SU(1):   $w1 = COPY %272:gpr32

********** MI Scheduling **********
main:%bb.25 if.end63
  From: %275:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
    To: B %bb.21
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %275:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%275
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %276:gpr32common = nsw ADDWri %275:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%275
  Successors:
    SU(2): Data Latency=1 Reg=%276
  Single Issue       : false;
SU(2):   STRWui %276:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%276
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %276:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %276:gpr32common = nsw ADDWri %275:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %275:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %275:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
SU(1):   %276:gpr32common = nsw ADDWri %275:gpr32common, 1, 0
SU(2):   STRWui %276:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)

********** MI Scheduling **********
main:%bb.26 for.end66
  From: %110:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 0, %bb.28, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %110:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(1):   FCMPDri %110:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%110
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.28, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %110:fpr64, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %110:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %110:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri %110:fpr64, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.26 for.end66
  From: $w0 = COPY %107:gpr32
    To: BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = COPY %107:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.12.Class, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = ADDXri %stack.11.verified, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $w0 = COPY %107:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $x2 = ADDXri %stack.11.verified, 0, 0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = ADDXri %stack.12.Class, 0, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(1):   $x1 = ADDXri %stack.12.Class, 0, 0
SU(2):   $x2 = ADDXri %stack.11.verified, 0, 0
SU(0):   $w0 = COPY %107:gpr32

********** MI Scheduling **********
main:%bb.26 for.end66
  From: %106:fpr64 = COPY killed $d0
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %106:fpr64 = COPY killed $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%106
  Single Issue       : false;
SU(1):   STRDui %106:fpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%106
  Single Issue       : false;
SU(2):   %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %106:fpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %106:fpr64 = COPY killed $d0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(2):   %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(0):   %106:fpr64 = COPY $d0
SU(1):   STRDui %106:fpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.27 if.then69
  From: %112:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
    To: B %bb.29
 RegionInstrs: 40
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %293 
Live Out: %293 
Live Thru: GPR32=1
  LiveReg: %293
  UpdateRegP: SU(13) STRDui %123:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  UpdateRegP: SU(34) %147:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(39) STRDui %151:fpr64, %293:gpr64sp, 37 :: (store 8 into %ir.mflops)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=1
Excess PSets: 
Cluster ld/st SU(1) - SU(2)
  Copy Succ SU(7)
  Copy Succ SU(3)
Cluster ld/st SU(13) - SU(39)
SU(0):   %112:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 16
  Successors:
    SU(4): Data Latency=1 Reg=%112
    SU(2): Data Latency=1 Reg=%112
    SU(1): Data Latency=1 Reg=%112
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %113:gpr32 = LDRWui %112:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 15
  Predecessors:
    SU(0): Data Latency=1 Reg=%112
  Successors:
    SU(7): Data Latency=4 Reg=%113
    SU(3): Data Latency=4 Reg=%113
    SU(2): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %114:gpr32 = LDRWui %112:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 15
  Predecessors:
    SU(0): Data Latency=1 Reg=%112
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(7): Data Latency=4 Reg=%114
    SU(3): Data Latency=4 Reg=%114
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(2): Data Latency=4 Reg=%114
    SU(1): Data Latency=4 Reg=%113
  Successors:
    SU(5): Data Latency=1 Reg=%115
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %116:gpr32 = LDRWui %112:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 14
  Predecessors:
    SU(0): Data Latency=1 Reg=%112
  Successors:
    SU(8): Data Latency=4 Reg=%116
    SU(5): Data Latency=4 Reg=%116
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(3): Data Latency=1 Reg=%115
    SU(4): Data Latency=4 Reg=%116
  Successors:
    SU(14): Data Latency=1 Reg=%117
    SU(6): Data Latency=1 Reg=%117
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%117
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=4 Reg=%114
    SU(1): Data Latency=4 Reg=%113
  Successors:
    SU(8): Data Latency=1 Reg=%118
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(7): Data Latency=1 Reg=%118
    SU(4): Data Latency=4 Reg=%116
  Successors:
    SU(9): Data Latency=1 Reg=%119
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %120:fpr64 = SCVTFUWDri %119:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(8): Data Latency=1 Reg=%119
  Successors:
    SU(12): Data Latency=1 Reg=%120
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %121:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 13
  Successors:
    SU(11): Data Latency=1 Reg=%121
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(11):   %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 12
  Predecessors:
    SU(10): Data Latency=1 Reg=%121
  Successors:
    SU(12): Data Latency=4 Reg=%122
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(12):   %123:fpr64 = FDIVDrr %120:fpr64, %122:fpr64
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(9): Data Latency=1 Reg=%120
    SU(11): Data Latency=4 Reg=%122
  Successors:
    SU(25): Data Latency=1 Reg=%123
    SU(18): Data Latency=1 Reg=%123
    SU(13): Data Latency=1 Reg=%123
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(13):   STRDui %123:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%123
  Successors:
    SU(39): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(14):   %124:fpr64 = SCVTFUWDri %117:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(5): Data Latency=1 Reg=%117
  Successors:
    SU(17): Data Latency=1 Reg=%124
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(15):   %125:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(16): Data Latency=1 Reg=%125
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(16):   %126:fpr64 = LDRDui %125:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(15): Data Latency=1 Reg=%125
  Successors:
    SU(17): Data Latency=4 Reg=%126
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(17):   %127:fpr64 = FMULDrr %124:fpr64, %126:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(14): Data Latency=1 Reg=%124
    SU(16): Data Latency=4 Reg=%126
  Successors:
    SU(22): Data Latency=1 Reg=%127
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   %128:fpr64 = FMULDrr %123:fpr64, %123:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(12): Data Latency=1 Reg=%123
  Successors:
    SU(21): Data Latency=1 Reg=%128
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %129:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(20): Data Latency=1 Reg=%129
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(20):   %130:fpr64 = LDRDui %129:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(19): Data Latency=1 Reg=%129
  Successors:
    SU(21): Data Latency=4 Reg=%130
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(21):   %131:fpr64 = FMULDrr %128:fpr64, %130:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(18): Data Latency=1 Reg=%128
    SU(20): Data Latency=4 Reg=%130
  Successors:
    SU(22): Data Latency=1 Reg=%131
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(22):   %132:fpr64 = FADDDrr %127:fpr64, %131:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(21): Data Latency=1 Reg=%131
    SU(17): Data Latency=1 Reg=%127
  Successors:
    SU(26): Data Latency=1 Reg=%132
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(23):   %133:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(24): Data Latency=1 Reg=%133
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(24):   %134:fpr64 = LDRDui %133:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(23): Data Latency=1 Reg=%133
  Successors:
    SU(25): Data Latency=4 Reg=%134
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(25):   %135:fpr64 = FMULDrr %123:fpr64, %134:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(12): Data Latency=1 Reg=%123
    SU(24): Data Latency=4 Reg=%134
  Successors:
    SU(26): Data Latency=1 Reg=%135
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(26):   %136:fpr64 = FADDDrr %132:fpr64, %135:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(22): Data Latency=1 Reg=%132
    SU(25): Data Latency=1 Reg=%135
  Successors:
    SU(29): Data Latency=1 Reg=%136
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(27):   %137:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(28): Data Latency=1 Reg=%137
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(28):   %138:fpr64 = LDRDui %137:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(27): Data Latency=1 Reg=%137
  Successors:
    SU(29): Data Latency=4 Reg=%138
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(29):   %139:fpr64 = FADDDrr %136:fpr64, %138:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(26): Data Latency=1 Reg=%136
    SU(28): Data Latency=4 Reg=%138
  Successors:
    SU(33): Data Latency=1 Reg=%139
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(30):   undef %141.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(31): Data Latency=4 Reg=%141
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(31):   %143:fpr128 = SSHLLv2i32_shift %141:fpr64, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(30): Data Latency=4 Reg=%141
  Successors:
    SU(32): Data Latency=1 Reg=%143
  Pressure Diff      : 
  Single Issue       : false;
SU(32):   %145:fpr64 = SCVTFv1i64 %143.dsub:fpr128
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(31): Data Latency=1 Reg=%143
  Successors:
    SU(33): Data Latency=1 Reg=%145
  Pressure Diff      : 
  Single Issue       : false;
SU(33):   %146:fpr64 = FMULDrr %139:fpr64, %145:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 2
  Predecessors:
    SU(29): Data Latency=1 Reg=%139
    SU(32): Data Latency=1 Reg=%145
  Successors:
    SU(38): Data Latency=1 Reg=%146
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(34):   %147:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(37): Data Latency=4 Reg=%147
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(35):   %148:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(36): Data Latency=1 Reg=%148
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(36):   %149:fpr64 = LDRDui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(35): Data Latency=1 Reg=%148
  Successors:
    SU(37): Data Latency=4 Reg=%149
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(37):   %150:fpr64 = FMULDrr %147:fpr64, %149:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(36): Data Latency=4 Reg=%149
    SU(34): Data Latency=4 Reg=%147
  Successors:
    SU(38): Data Latency=1 Reg=%150
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(38):   %151:fpr64 = FDIVDrr %146:fpr64, %150:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(33): Data Latency=1 Reg=%146
    SU(37): Data Latency=1 Reg=%150
  Successors:
    SU(39): Data Latency=1 Reg=%151
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(39):   STRDui %151:fpr64, %293:gpr64sp, 37 :: (store 8 into %ir.mflops)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(38): Data Latency=1 Reg=%151
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 39 13 6 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
Picking from Bot:
  Cand SU(39) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(39) STRDui %151:fpr64, %293:gpr64sp, 37 :: (store 8 into %ir.mflops)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %151
  UpdateRegP: SU(39) STRDui %151:fpr64, %293:gpr64sp, 37 :: (store 8 into %ir.mflops)
              to 
  Ready @0c
  BotQ.A TopLatency SU(39) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 13 38 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(38) 15c
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRDui %123:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %123
  UpdateRegP: SU(13) STRDui %123:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
              to 
  UpdateRegP: SU(18) %128:fpr64 = FMULDrr %123:fpr64, %123:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(25) %135:fpr64 = FMULDrr %123:fpr64, %134:fpr64
              to 
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 38 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(38) 15c
  BotQ.A RemainingLatency 15 + 2c > CritPath 16
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(38) BOT-PATH                  15 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(38) %151:fpr64 = FDIVDrr %146:fpr64, %150:fpr64
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %146
  UpdateRegP: SU(38) %151:fpr64 = FDIVDrr %146:fpr64, %150:fpr64
              to 
  LiveReg: %150
  UpdateRegP: SU(38) %151:fpr64 = FDIVDrr %146:fpr64, %150:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A TopLatency SU(38) 15c
  BotQ.A BotLatency SU(38) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 33 37 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(33) 14c
  BotQ.A RemainingLatency 14 + 3c > CritPath 16
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(33) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(33) %146:fpr64 = FMULDrr %139:fpr64, %145:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %139
  UpdateRegP: SU(33) %146:fpr64 = FMULDrr %139:fpr64, %145:fpr64
              to 
  LiveReg: %145
  UpdateRegP: SU(33) %146:fpr64 = FMULDrr %139:fpr64, %145:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(33) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 37 29 32 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(29) 13c
  BotQ.A RemainingLatency 13 + 4c > CritPath 16
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %117
  UpdateRegP: SU(6) STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
              to 
  UpdateRegP: SU(14) %124:fpr64 = SCVTFUWDri %117:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 32 37 29 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(29) 13c
  BotQ.A RemainingLatency 13 + 5c > CritPath 16
Picking from Bot:
  Cand SU(32) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(32) %145:fpr64 = SCVTFv1i64 %143.dsub:fpr128
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %143
  UpdateRegP: SU(32) %145:fpr64 = SCVTFv1i64 %143.dsub:fpr128
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A BotLatency SU(32) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 29 37 31 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(29) 13c
  BotQ.A RemainingLatency 13 + 6c > CritPath 16
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(31) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(31) %143:fpr128 = SSHLLv2i32_shift %141:fpr64, 0
Bottom Pressure:
FPR8=4
GPR32=2
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %141
  UpdateRegP: SU(31) %143:fpr128 = SSHLLv2i32_shift %141:fpr64, 0
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A BotLatency SU(31) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 30 
Queue BotQ.A: 29 37 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(29) 13c
  BotQ.A RemainingLatency 13 + 7c > CritPath 16
Picking from Bot:
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(29) %139:fpr64 = FADDDrr %136:fpr64, %138:fpr64
Bottom Pressure:
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %136
  UpdateRegP: SU(29) %139:fpr64 = FADDDrr %136:fpr64, %138:fpr64
              to 
  LiveReg: %138
  UpdateRegP: SU(29) %139:fpr64 = FADDDrr %136:fpr64, %138:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(29) 13c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 30 28 
Queue BotQ.A: 37 26 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(26) 12c
BotQ.A RemLatency SU(28) 1c
  BotQ.A RemainingLatency 12 + 8c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(26) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(26) %136:fpr64 = FADDDrr %132:fpr64, %135:fpr64
Bottom Pressure:
FPR8=6
GPR32=2
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %132
  UpdateRegP: SU(26) %136:fpr64 = FADDDrr %132:fpr64, %135:fpr64
              to 
  LiveReg: %135
  UpdateRegP: SU(26) %136:fpr64 = FADDDrr %132:fpr64, %135:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 30 28 
Queue BotQ.A: 37 22 25 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(22) 11c
BotQ.A RemLatency SU(28) 1c
  BotQ.A RemainingLatency 11 + 9c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(22) BOT-PATH                  11 cycles 
  Cand SU(25) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(25) %135:fpr64 = FMULDrr %123:fpr64, %134:fpr64
Bottom Pressure:
FPR8=6
GPR32=2
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %134
  UpdateRegP: SU(25) %135:fpr64 = FMULDrr %123:fpr64, %134:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @9c
  BotQ.A BotLatency SU(25) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 28 
Queue BotQ.A: 37 22 30 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 30 34 35 
BotQ.A RemLatency SU(22) 11c
BotQ.A RemLatency SU(24) 1c
  BotQ.A RemainingLatency 11 + 10c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(22) BOT-PATH                  11 cycles 
  Cand SU(30) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(30) undef %141.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
Bottom Pressure:
FPR8=5
GPR32=2
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @10c
  BotQ.A BotLatency SU(30) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 
Queue BotQ.A: 37 22 28 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
BotQ.A RemLatency SU(22) 11c
BotQ.A RemLatency SU(24) 1c
  BotQ.A RemainingLatency 11 + 11c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(22) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(22) %132:fpr64 = FADDDrr %127:fpr64, %131:fpr64
Bottom Pressure:
FPR8=6
GPR32=2
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %127
  UpdateRegP: SU(22) %132:fpr64 = FADDDrr %127:fpr64, %131:fpr64
              to 
  LiveReg: %131
  UpdateRegP: SU(22) %132:fpr64 = FADDDrr %127:fpr64, %131:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A TopLatency SU(22) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 24 
Queue BotQ.A: 37 28 21 17 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
BotQ.A RemLatency SU(21) 10c
BotQ.A RemLatency SU(24) 1c
  BotQ.A RemainingLatency 10 + 12c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(28) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) %138:fpr64 = LDRDui %137:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=3
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %137
  UpdateRegP: SU(28) %138:fpr64 = LDRDui %137:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 37 17 21 27 24 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
BotQ.A RemLatency SU(21) 10c
  BotQ.A RemainingLatency 10 + 13c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(17) BOT-PATH                  8 cycles 
  Cand SU(21) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(21) %131:fpr64 = FMULDrr %128:fpr64, %130:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=6
GPR32=3
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %128
  UpdateRegP: SU(21) %131:fpr64 = FMULDrr %128:fpr64, %130:fpr64
              to 
  LiveReg: %130
  UpdateRegP: SU(21) %131:fpr64 = FMULDrr %128:fpr64, %130:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @13c
  BotQ.A TopLatency SU(21) 10c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 20 
Queue BotQ.A: 37 17 24 27 18 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
BotQ.A RemLatency SU(18) 9c
BotQ.A RemLatency SU(20) 1c
  BotQ.A RemainingLatency 9 + 14c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(17) BOT-PATH                  8 cycles 
  Cand SU(27) REG-MAX                            
  Cand SU(18) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %128:fpr64 = FMULDrr %123:fpr64, %123:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=3
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 20 
Queue BotQ.A: 37 17 24 27 12 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
BotQ.A RemLatency SU(17) 8c
BotQ.A RemLatency SU(20) 1c
  BotQ.A RemainingLatency 8 + 15c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(17) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %127:fpr64 = FMULDrr %124:fpr64, %126:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=6
GPR32=3
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %124
  UpdateRegP: SU(17) %127:fpr64 = FMULDrr %124:fpr64, %126:fpr64
              to 
  LiveReg: %126
  UpdateRegP: SU(17) %127:fpr64 = FMULDrr %124:fpr64, %126:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 20 16 
Queue BotQ.A: 37 12 24 27 14 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
BotQ.A RemLatency SU(12) 8c
BotQ.A RemLatency SU(20) 1c
  BotQ.A RemainingLatency 8 + 16c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(12) BOT-PATH                  8 cycles 
  Cand SU(27) REG-MAX                            
  Cand SU(14) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %124:fpr64 = SCVTFUWDri %117:gpr32
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=3
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 
Queue BotQ.A: 37 12 24 27 5 20 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
  BotQ.A RemainingLatency 0 + 17c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(12) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %123:fpr64 = FDIVDrr %120:fpr64, %122:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=6
GPR32=3
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %120
  UpdateRegP: SU(12) %123:fpr64 = FDIVDrr %120:fpr64, %122:fpr64
              to 
  LiveReg: %122
  UpdateRegP: SU(12) %123:fpr64 = FDIVDrr %120:fpr64, %122:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @17c
  BotQ.A TopLatency SU(12) 8c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 11 
Queue BotQ.A: 37 20 24 27 5 9 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
  BotQ.A RemainingLatency 0 + 18c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(27) REG-MAX                            
  Cand SU(5) BOT-PATH                  6 cycles 
  Cand SU(9) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %120:fpr64 = SCVTFUWDri %119:gpr32
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %119
  UpdateRegP: SU(9) %120:fpr64 = SCVTFUWDri %119:gpr32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @18c
  BotQ.A BotLatency SU(9) 9c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 37 20 24 27 5 8 16 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
  BotQ.A RemainingLatency 0 + 19c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(5) BOT-PATH                  6 cycles 
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(8) %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %118
  UpdateRegP: SU(8) %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
              to 
  LiveReg: %116
  UpdateRegP: SU(5) %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
              to 
  UpdateRegP: SU(8) %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
              to GPR32 -1
  Ready @19c
  BotQ.A BotLatency SU(8) 10c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 37 20 24 27 5 16 7 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
  BotQ.A RemainingLatency 0 + 20c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
  Cand SU(5) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %115
  UpdateRegP: SU(5) %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
              to GPR32 -1
  Ready @20c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 37 20 24 27 7 16 3 11 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
  BotQ.A RemainingLatency 0 + 21c > CritPath 16
Picking from Bot:
  Cand SU(37) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(37) %150:fpr64 = FMULDrr %147:fpr64, %149:fpr64
Bottom Pressure:
GPR64temp=1
FPR8=6
GPR32=5
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %147
  UpdateRegP: SU(37) %150:fpr64 = FMULDrr %147:fpr64, %149:fpr64
              to 
  LiveReg: %149
  UpdateRegP: SU(37) %150:fpr64 = FMULDrr %147:fpr64, %149:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 36 34 
Queue BotQ.A: 11 20 24 27 7 16 3 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 27 35 34 
  BotQ.A RemainingLatency 0 + 22c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(27) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) %137:gpr64temp = ADRP target-flags(aarch64-page) %const.4
Bottom Pressure:
FPR8=6
GPR32=4
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 36 34 
Queue BotQ.A: 11 20 24 3 7 16 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 34 35 
  BotQ.A RemainingLatency 0 + 23c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
Bottom Pressure:
FPR8=6
GPR32=5
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %113
  UpdateRegP: SU(3) %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
              to 
  UpdateRegP: SU(7) %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
              to 
  LiveReg: %114
  UpdateRegP: SU(3) %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
              to GPR32 -1
  UpdateRegP: SU(7) %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
              to GPR32 -1
  Ready @23c
  BotQ.A TopLatency SU(7) 5c
  BotQ.A BotLatency SU(7) 11c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 34 36 
Queue BotQ.A: 11 20 24 3 16 4 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 34 35 
  BotQ.A RemainingLatency 0 + 24c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(3) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(3) %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
Bottom Pressure:
FPR8=6
GPR32=4
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  Ready @24c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 2 
Queue BotQ.A: 11 20 24 4 16 34 36 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 34 35 
  BotQ.A RemainingLatency 0 + 25c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(36) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(36) %149:fpr64 = LDRDui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %148
  UpdateRegP: SU(36) %149:fpr64 = LDRDui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 2 
Queue BotQ.A: 11 20 24 4 16 34 35 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 34 35 
  BotQ.A RemainingLatency 0 + 26c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %116:gpr32 = LDRWui %112:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
GPR64temp=1
FPR8=5
GPR32=5
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %112
  UpdateRegP: SU(1) %113:gpr32 = LDRWui %112:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
              to GPR32 -1
  UpdateRegP: SU(2) %114:gpr32 = LDRWui %112:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
              to GPR32 -1
  UpdateRegP: SU(4) %116:gpr32 = LDRWui %112:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to GPR32 -1
  Ready @26c
  BotQ.A BotLatency SU(4) 14c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 2 
Queue BotQ.A: 11 20 24 35 16 34 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 34 35 
  BotQ.A RemainingLatency 0 + 27c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(35) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(35) %148:gpr64temp = ADRP target-flags(aarch64-page) %const.5
Bottom Pressure:
FPR8=5
GPR32=4
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 20 24 34 16 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 34 
  BotQ.A RemainingLatency 0 + 28c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(24) %134:fpr64 = LDRDui %133:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=5
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %133
  UpdateRegP: SU(24) %134:fpr64 = LDRDui %133:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 20 2 34 16 1 23 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 34 
  BotQ.A RemainingLatency 0 + 29c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(2) %114:gpr32 = LDRWui %112:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @29c
  BotQ.A TopLatency SU(2) 1c
  BotQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 20 23 34 16 1 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 34 
  BotQ.A RemainingLatency 0 + 30c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(23) REG-MAX                            
  Cand SU(34) ORDER                              
  Cand SU(1) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(1) %113:gpr32 = LDRWui %112:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:
GPR64temp=1
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @30c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 20 23 34 16 0 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 34 
  BotQ.A RemainingLatency 0 + 31c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(23) REG-MAX                            
  Cand SU(34) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(34) %147:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
GPR64temp=1
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 20 23 0 16 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 23 
  BotQ.A RemainingLatency 0 + 32c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
  Cand SU(23) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(23) %133:gpr64temp = ADRP target-flags(aarch64-page) %const.3
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 20 16 0 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 
  BotQ.A RemainingLatency 0 + 33c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(20) %130:fpr64 = LDRDui %129:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %129
  UpdateRegP: SU(20) %130:fpr64 = LDRDui %129:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @33c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 0 16 19 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 19 
  BotQ.A RemainingLatency 0 + 34c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(0) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(19) %129:gpr64temp = ADRP target-flags(aarch64-page) %const.2
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 0 16 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 
  BotQ.A RemainingLatency 0 + 35c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %126:fpr64 = LDRDui %125:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %125
  UpdateRegP: SU(16) %126:fpr64 = LDRDui %125:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @35c
  BotQ.A TopLatency SU(16) 1c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 0 15 
Queue TopQ.P: 
Queue TopQ.A: 0 10 15 
  BotQ.A RemainingLatency 0 + 36c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(0) REG-MAX                            
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) %125:gpr64temp = ADRP target-flags(aarch64-page) %const.1
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 0 
Queue TopQ.P: 
Queue TopQ.A: 0 10 
  BotQ.A RemainingLatency 0 + 37c > CritPath 16
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %121
  UpdateRegP: SU(11) %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @37c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 10 
Queue TopQ.P: 
Queue TopQ.A: 0 10 
  BotQ.A RemainingLatency 0 + 38c > CritPath 16
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %121:gpr64temp = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
GPR32=2
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %112:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=1
  Ready @39c
  BotQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %112:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(10):   %121:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(11):   %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(15):   %125:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(16):   %126:fpr64 = LDRDui %125:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(19):   %129:gpr64temp = ADRP target-flags(aarch64-page) %const.2
SU(20):   %130:fpr64 = LDRDui %129:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(23):   %133:gpr64temp = ADRP target-flags(aarch64-page) %const.3
SU(34):   %147:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   %113:gpr32 = LDRWui %112:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(2):   %114:gpr32 = LDRWui %112:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(24):   %134:fpr64 = LDRDui %133:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(35):   %148:gpr64temp = ADRP target-flags(aarch64-page) %const.5
SU(4):   %116:gpr32 = LDRWui %112:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(36):   %149:fpr64 = LDRDui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(3):   %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
SU(7):   %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
SU(27):   %137:gpr64temp = ADRP target-flags(aarch64-page) %const.4
SU(37):   %150:fpr64 = FMULDrr %147:fpr64, %149:fpr64
SU(5):   %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
SU(8):   %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
SU(9):   %120:fpr64 = SCVTFUWDri %119:gpr32
SU(12):   %123:fpr64 = FDIVDrr %120:fpr64, %122:fpr64
SU(14):   %124:fpr64 = SCVTFUWDri %117:gpr32
SU(17):   %127:fpr64 = FMULDrr %124:fpr64, %126:fpr64
SU(18):   %128:fpr64 = FMULDrr %123:fpr64, %123:fpr64
SU(21):   %131:fpr64 = FMULDrr %128:fpr64, %130:fpr64
SU(28):   %138:fpr64 = LDRDui %137:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(22):   %132:fpr64 = FADDDrr %127:fpr64, %131:fpr64
SU(30):   undef %141.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(25):   %135:fpr64 = FMULDrr %123:fpr64, %134:fpr64
SU(26):   %136:fpr64 = FADDDrr %132:fpr64, %135:fpr64
SU(29):   %139:fpr64 = FADDDrr %136:fpr64, %138:fpr64
SU(31):   %143:fpr128 = SSHLLv2i32_shift %141:fpr64, 0
SU(32):   %145:fpr64 = SCVTFv1i64 %143.dsub:fpr128
SU(6):   STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
SU(33):   %146:fpr64 = FMULDrr %139:fpr64, %145:fpr64
SU(38):   %151:fpr64 = FDIVDrr %146:fpr64, %150:fpr64
SU(13):   STRDui %123:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
SU(39):   STRDui %151:fpr64, %293:gpr64sp, 37 :: (store 8 into %ir.mflops)

********** MI Scheduling **********
main:%bb.29 if.end85
  From: %173:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: CBZW %174:gpr32, %bb.44
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %173:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%173
  Single Issue       : false;
SU(1):   %174:gpr32 = LDRWui %173:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%173
  Successors:
    ExitSU: Data Latency=4 Reg=%174
  Single Issue       : false;
ExitSU:   CBZW %174:gpr32, %bb.44
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%174
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %174:gpr32 = LDRWui %173:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %173:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %173:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %174:gpr32 = LDRWui %173:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.29 if.end85
  From: %161:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_40__none__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=12
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %159 %158 %157 %156 %155 %154 %152 %160 
Live Out: %159 %158 %157 %156 %155 %154 %152 %160 
Live Thru: FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %159
  UpdateRegP: SU(28) $d1 = COPY %159:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %158
  UpdateRegP: SU(27) $d0 = COPY %158:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %157
  UpdateRegP: SU(26) $w5 = COPY %157:gpr32
              to GPR32 -1
  LiveReg: %156
  UpdateRegP: SU(25) $w4 = COPY %156:gpr32
              to GPR32 -1
  LiveReg: %155
  UpdateRegP: SU(24) $w3 = COPY %155:gpr32
              to GPR32 -1
  LiveReg: %154
  UpdateRegP: SU(23) $w2 = COPY %154:gpr32
              to GPR32 -1
  LiveReg: %152
  UpdateRegP: SU(22) $w1 = COPY %152:gpr32
              to GPR32 -1
  LiveReg: %160
  UpdateRegP: SU(18) STRWui %160:gpr32, $sp, 2 :: (store 4 into stack + 8)
              to 
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:
FPR8=4
GPR32=12
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_40__none__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%161
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %161:gpr64, $sp, 10 :: (store 8 into stack + 80)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%161
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %163:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_39__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_39__O3__mcmod
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%163
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %163:gpr64, $sp, 9 :: (store 8 into stack + 72)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%163
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %164:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_38__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_38__g__Wall__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%164
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %164:gpr64, $sp, 8 :: (store 8 into stack + 64)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%164
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %165:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_37__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_37__I___commo
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%165
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %165:gpr64, $sp, 7 :: (store 8 into stack + 56)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%165
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %166:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_36__lm_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_36__lm_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%166
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %166:gpr64, $sp, 6 :: (store 8 into stack + 48)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%166
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %167:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_35___CC__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_35___CC__
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%167
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %167:gpr64, $sp, 5 :: (store 8 into stack + 40)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%167
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %168:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_34_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_34_gcc_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%168
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %168:gpr64, $sp, 4 :: (store 8 into stack + 32)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%168
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %169:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_33_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_33_03_Nov_201
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%169
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %169:gpr64, $sp, 3 :: (store 8 into stack + 24)
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%169
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %170:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_32_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_32_3_3_1_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%170
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %170:gpr64, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%170
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   STRWui %160:gpr32, $sp, 2 :: (store 4 into stack + 8)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %171:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_31___________, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_31___________
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%171
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %171:gpr64, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%171
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_30_SP_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_30_SP_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   $w1 = COPY %152:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   $w2 = COPY %154:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   $w3 = COPY %155:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(25):   $w4 = COPY %156:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(26):   $w5 = COPY %157:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   $d0 = COPY %158:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(28):   $d1 = COPY %159:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=0 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=0 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 26 25 24 23 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 28 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(28) $d1 = COPY %159:fpr64
Bottom Pressure:
FPR8=3
GPR32=12
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 27 26 25 24 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(27) $d0 = COPY %158:fpr64
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 26 25 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(26) $w5 = COPY %157:gpr32
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 24 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(25) $w4 = COPY %156:gpr32
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(24) $w3 = COPY %155:gpr32
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w2 = COPY %154:gpr32
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(22) $w1 = COPY %152:gpr32
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(20) STRXui %171:gpr64, $sp, 0 :: (store 8 into stack)
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %171
  UpdateRegP: SU(20) STRXui %171:gpr64, $sp, 0 :: (store 8 into stack)
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %169:gpr64, $sp, 3 :: (store 8 into stack + 24)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %169
  UpdateRegP: SU(15) STRXui %169:gpr64, $sp, 3 :: (store 8 into stack + 24)
              to 
  Ready @1c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 21 13 11 9 7 5 3 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(17) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %170:gpr64, $sp, 2 :: (store 8 into stack + 16)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %170
  UpdateRegP: SU(17) STRXui %170:gpr64, $sp, 2 :: (store 8 into stack + 16)
              to 
  Ready @2c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 11 9 7 5 3 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %167:gpr64, $sp, 5 :: (store 8 into stack + 40)
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %167
  UpdateRegP: SU(11) STRXui %167:gpr64, $sp, 5 :: (store 8 into stack + 40)
              to 
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 16 9 7 5 3 19 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %168:gpr64, $sp, 4 :: (store 8 into stack + 32)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %168
  UpdateRegP: SU(13) STRXui %168:gpr64, $sp, 4 :: (store 8 into stack + 32)
              to 
  Ready @4c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 10 16 9 7 5 3 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(21) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_30_SP_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_30_SP_
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @5c
  BotQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 7 5 3 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %165:gpr64, $sp, 7 :: (store 8 into stack + 56)
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %165
  UpdateRegP: SU(7) STRXui %165:gpr64, $sp, 7 :: (store 8 into stack + 56)
              to 
  Ready @6c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 19 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %166:gpr64, $sp, 6 :: (store 8 into stack + 48)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 13 <= 15(+ 6 livethru)
  LiveReg: %166
  UpdateRegP: SU(9) STRXui %166:gpr64, $sp, 6 :: (store 8 into stack + 48)
              to 
  Ready @7c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 19 5 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) %171:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_31___________, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_31___________
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 13 <= 15(+ 6 livethru)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %163:gpr64, $sp, 9 :: (store 8 into stack + 72)
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 13 <= 15(+ 6 livethru)
  LiveReg: %163
  UpdateRegP: SU(3) STRXui %163:gpr64, $sp, 9 :: (store 8 into stack + 72)
              to 
  Ready @9c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %164:gpr64, $sp, 8 :: (store 8 into stack + 64)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %164
  UpdateRegP: SU(5) STRXui %164:gpr64, $sp, 8 :: (store 8 into stack + 64)
              to 
  Ready @10c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(18) STRWui %160:gpr32, $sp, 2 :: (store 4 into stack + 8)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 16 6 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %170:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_32_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_32_3_3_1_
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 2 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %161:gpr64, $sp, 10 :: (store 8 into stack + 80)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %161
  UpdateRegP: SU(1) STRXui %161:gpr64, $sp, 10 :: (store 8 into stack + 80)
              to 
  Ready @13c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 14 12 10 2 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %169:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_33_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_33_03_Nov_201
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 12 10 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %168:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_34_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_34_gcc_
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 10 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %167:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_35___CC__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_35___CC__
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %166:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_36__lm_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_36__lm_
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %165:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_37__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_37__I___commo
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %164:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_38__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_38__g__Wall__
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %163:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_39__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_39__O3__mcmod
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %161:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_40__none__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_40__none__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__
SU(2):   %163:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_39__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_39__O3__mcmod
SU(4):   %164:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_38__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_38__g__Wall__
SU(6):   %165:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_37__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_37__I___commo
SU(8):   %166:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_36__lm_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_36__lm_
SU(10):   %167:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_35___CC__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_35___CC__
SU(12):   %168:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_34_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_34_gcc_
SU(14):   %169:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_33_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_33_03_Nov_201
SU(1):   STRXui %161:gpr64, $sp, 10 :: (store 8 into stack + 80)
SU(16):   %170:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_32_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_32_3_3_1_
SU(18):   STRWui %160:gpr32, $sp, 2 :: (store 4 into stack + 8)
SU(5):   STRXui %164:gpr64, $sp, 8 :: (store 8 into stack + 64)
SU(3):   STRXui %163:gpr64, $sp, 9 :: (store 8 into stack + 72)
SU(19):   %171:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_31___________, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_31___________
SU(9):   STRXui %166:gpr64, $sp, 6 :: (store 8 into stack + 48)
SU(7):   STRXui %165:gpr64, $sp, 7 :: (store 8 into stack + 56)
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_30_SP_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_30_SP_
SU(13):   STRXui %168:gpr64, $sp, 4 :: (store 8 into stack + 32)
SU(11):   STRXui %167:gpr64, $sp, 5 :: (store 8 into stack + 40)
SU(17):   STRXui %170:gpr64, $sp, 2 :: (store 8 into stack + 16)
SU(15):   STRXui %169:gpr64, $sp, 3 :: (store 8 into stack + 24)
SU(20):   STRXui %171:gpr64, $sp, 0 :: (store 8 into stack)
SU(22):   $w1 = COPY %152:gpr32
SU(23):   $w2 = COPY %154:gpr32
SU(24):   $w3 = COPY %155:gpr32
SU(25):   $w4 = COPY %156:gpr32
SU(26):   $w5 = COPY %157:gpr32
SU(27):   $d0 = COPY %158:fpr64
SU(28):   $d1 = COPY %159:fpr64

********** MI Scheduling **********
main:%bb.29 if.end85
  From: %152:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
    To: ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %293 
Live Out: %160 %159 %293 %158 %157 %156 %155 %154 %152 
Live Thru: GPR32=1
  LiveReg: %160
  LiveReg: %159
  LiveReg: %293
  UpdateRegP: SU(6) %158:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(7) %159:fpr64 = LDRDui %293:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %158
  LiveReg: %157
  LiveReg: %156
  LiveReg: %155
  LiveReg: %154
  LiveReg: %152
Top Pressure:
GPR32=1
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Excess PSets: 
Cluster ld/st SU(2) - SU(3)
  Copy Succ SU(4294967295)
SU(0):   %152:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %153:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=1 Reg=%153
    SU(3): Data Latency=1 Reg=%153
    SU(2): Data Latency=1 Reg=%153
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %154:gpr32 = LDRWui %153:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%153
  Successors:
    ExitSU: Ord  Latency=3 Artificial
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %155:gpr32 = LDRWui %153:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%153
    SU(2): Ord  Latency=0 Cluster
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %156:gpr32 = LDRWui %153:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%153
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %157:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %158:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %159:fpr64 = LDRDui %293:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %160:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 0 2 3 4 5 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 8 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(8) %160:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @3c
  BotQ.A BotLatency SU(8) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 2 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %156:gpr32 = LDRWui %153:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %153
  UpdateRegP: SU(2) %154:gpr32 = LDRWui %153:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
              to GPR32 -1
  UpdateRegP: SU(3) %155:gpr32 = LDRWui %153:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
              to GPR32 -1
  UpdateRegP: SU(4) %156:gpr32 = LDRWui %153:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
              to GPR32 -1
  Ready @4c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 2 3 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(3) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %155:gpr32 = LDRWui %153:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @5c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 2 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(2) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(2) %154:gpr32 = LDRWui %153:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 6 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 7 
  BotQ.A RemainingLatency 0 + 7c > CritPath 4
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %159:fpr64 = LDRDui %293:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 6 
  BotQ.A RemainingLatency 0 + 8c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %158:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
GPR32=4
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  BotQ.A RemainingLatency 0 + 9c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %157:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
Bottom Pressure:
GPR32=3
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %153:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
Bottom Pressure:
GPR32=2
  Ready @10c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %152:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
Bottom Pressure:
GPR32=1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %152:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(1):   %153:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
SU(5):   %157:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
SU(6):   %158:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(7):   %159:fpr64 = LDRDui %293:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
SU(2):   %154:gpr32 = LDRWui %153:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(3):   %155:gpr32 = LDRWui %153:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(4):   %156:gpr32 = LDRWui %153:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(8):   %160:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)

********** MI Scheduling **********
main:%bb.30 if.then86
  From: %175:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %175:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%175
  Single Issue       : false;
SU(1):   STRWui %175:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%175
  Single Issue       : false;
SU(2):   %255:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %255:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %175:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %175:gpr32 = MOVi32imm 1
  Ready @2c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %175:gpr32 = MOVi32imm 1
SU(1):   STRWui %175:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
SU(2):   %255:gpr64sp = ADDXri %stack.10.trecs, 0, 0

********** MI Scheduling **********
main:%bb.31 for.cond87
  From: %176:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.33, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %176:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%176
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %176:gpr32common, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%176
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.33, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %176:gpr32common, 15, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %176:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %176:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %176:gpr32common, 15, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.32 for.body90
  From: %253:fpr64 = COPY $d0
    To: B %bb.31
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(1) - SU(3)
  Copy Succ SU(2)
  Copy Succ SU(5)
SU(0):   %253:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%253
  Single Issue       : false;
SU(1):   %254:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%254
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(2):   STRDroX %253:fpr64, %255:gpr64sp, %254:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%254
    SU(0): Data Latency=0 Reg=%253
    SU(3): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   %256:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Ord  Latency=0 Cluster
  Successors:
    SU(4): Data Latency=4 Reg=%256
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(4):   %257:gpr32common = nsw ADDWri %256:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%256
  Successors:
    SU(5): Data Latency=1 Reg=%257
  Single Issue       : false;
SU(5):   STRWui %257:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%257
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %253:fpr64 = COPY $d0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) WEAK                               
Pick Bot ORDER     
Scheduling SU(5) STRWui %257:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %257:gpr32common = nsw ADDWri %256:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRDroX %253:fpr64, %255:gpr64sp, %254:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
  Ready @2c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %256:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %254:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %253:fpr64 = COPY $d0
SU(1):   %254:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(3):   %256:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX %253:fpr64, %255:gpr64sp, %254:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
SU(4):   %257:gpr32common = nsw ADDWri %256:gpr32common, 1, 0
SU(5):   STRWui %257:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.33 for.end95
  From: %178:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 1, %bb.35, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %178:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%178
  Single Issue       : false;
SU(1):   FCMPDri %178:fpr64, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%178
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.35, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %178:fpr64, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %178:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %178:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri %178:fpr64, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.34 if.then98
  From: %179:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %179:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%179
  Single Issue       : false;
SU(1):   STRXui %179:gpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%179
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %179:gpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %179:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %179:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %179:gpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)

********** MI Scheduling **********
main:%bb.35 if.end99
  From: %182:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %182:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%182
  Single Issue       : false;
SU(1):   STRWui %182:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%182
  Single Issue       : false;
SU(2):   %188:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %190:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %192:gpr64temp = ADRP target-flags(aarch64-page) %const.6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1 Reg=%192
  Single Issue       : false;
SU(5):   %193:fpr64 = LDRDui %192:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%192
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %190:gpr64sp = ADDXri %stack.10.trecs, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
BotQ.A RemLatency SU(1) 1c
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %188:gpr64sp = ADDXri %stack.13.t_names, 0, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %182:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %193:fpr64 = LDRDui %192:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A TopLatency SU(5) 1c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %192:gpr64temp = ADRP target-flags(aarch64-page) %const.6
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %182:gpr32 = MOVi32imm 1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %182:gpr32 = MOVi32imm 1
SU(4):   %192:gpr64temp = ADRP target-flags(aarch64-page) %const.6
SU(5):   %193:fpr64 = LDRDui %192:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
SU(1):   STRWui %182:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
SU(2):   %188:gpr64sp = ADDXri %stack.13.t_names, 0, 0
SU(3):   %190:gpr64sp = ADDXri %stack.10.trecs, 0, 0

********** MI Scheduling **********
main:%bb.36 for.cond101
  From: %183:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.44, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %183:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%183
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %183:gpr32common, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%183
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.44, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %183:gpr32common, 15, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %183:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %183:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %183:gpr32common, 15, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.37 for.body104
  From: %199:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.39, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %199:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%199
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %199:gpr32common, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%199
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.39, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %199:gpr32common, 5, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %199:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %199:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %199:gpr32common, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.37 for.body104
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_42_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_42_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %189:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %191:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %196:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %196:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %191:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = COPY %189:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_42_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_42_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_
SU(1):   $x1 = COPY %189:gpr64
SU(2):   $d0 = COPY %191:fpr64
SU(3):   $d1 = COPY %196:fpr64

********** MI Scheduling **********
main:%bb.37 for.body104
  From: %186:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %186:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Data Latency=4 Reg=%186
  Single Issue       : false;
SU(1):   %187:gpr64 = UBFMXri %186:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%186
  Successors:
    SU(3): Data Latency=1 Reg=%187
    SU(2): Data Latency=1 Reg=%187
  Single Issue       : false;
SU(2):   %189:gpr64 = LDRXroX %188:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=%187
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %191:fpr64 = LDRDroX %190:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%187
  Successors:
    SU(4): Data Latency=4 Reg=%191
  Single Issue       : false;
SU(4):   %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%191
  Successors:
    SU(6): Data Latency=1 Reg=%194
  Single Issue       : false;
SU(5):   %195:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%195
  Single Issue       : false;
SU(6):   %196:fpr64 = FDIVDrr %194:fpr64, %195:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%194
    SU(5): Data Latency=4 Reg=%195
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %196:fpr64 = FDIVDrr %194:fpr64, %195:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 5 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 3 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %189:gpr64 = LDRXroX %188:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %195:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %191:fpr64 = LDRDroX %190:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %187:gpr64 = UBFMXri %186:gpr64, 61, 60
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %186:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @10c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %186:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %187:gpr64 = UBFMXri %186:gpr64, 61, 60
SU(3):   %191:fpr64 = LDRDroX %190:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
SU(5):   %195:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %189:gpr64 = LDRXroX %188:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(4):   %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64
SU(6):   %196:fpr64 = FDIVDrr %194:fpr64, %195:fpr64

********** MI Scheduling **********
main:%bb.38 if.then116
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_45_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_45_rest_rhs_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %244:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %247:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %247:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %244:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @sp__str_45_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_45_rest_rhs_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_45_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_45_rest_rhs_
SU(2):   $d0 = COPY %244:fpr64
SU(3):   $d1 = COPY %247:fpr64

********** MI Scheduling **********
main:%bb.38 if.then116
  From: %242:fpr64 = LDRDui %293:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(5) - SU(1)
  Copy Succ SU(6)
SU(0):   %242:fpr64 = LDRDui %293:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%242
  Single Issue       : false;
SU(1):   %243:fpr64 = LDRDui %293:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(5): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%243
    SU(3): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   %244:fpr64 = FSUBDrr %242:fpr64, %243:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%243
    SU(0): Data Latency=4 Reg=%242
  Successors:
    SU(4): Data Latency=1 Reg=%244
    SU(3): Data Latency=1 Reg=%244
  Single Issue       : false;
SU(3):   STRDui %244:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%244
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %245:fpr64 = FMULDrr %244:fpr64, %193:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%244
  Successors:
    SU(6): Data Latency=1 Reg=%245
  Single Issue       : false;
SU(5):   %246:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(6): Data Latency=4 Reg=%246
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(6):   %247:fpr64 = FDIVDrr %245:fpr64, %246:fpr64
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%245
    SU(5): Data Latency=4 Reg=%246
    SU(1): Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %247:fpr64 = FDIVDrr %245:fpr64, %246:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %245:fpr64 = FMULDrr %244:fpr64, %193:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %244:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %244:fpr64 = FSUBDrr %242:fpr64, %243:fpr64
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %246:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %243:fpr64 = LDRDui %293:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %242:fpr64 = LDRDui %293:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %242:fpr64 = LDRDui %293:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
SU(1):   %243:fpr64 = LDRDui %293:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
SU(5):   %246:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %244:fpr64 = FSUBDrr %242:fpr64, %243:fpr64
SU(3):   STRDui %244:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
SU(4):   %245:fpr64 = FMULDrr %244:fpr64, %193:fpr64
SU(6):   %247:fpr64 = FDIVDrr %245:fpr64, %246:fpr64

********** MI Scheduling **********
main:%bb.38 if.then116
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_44_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_44_sub_rhs_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %233:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %238:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %238:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %233:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @sp__str_44_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_44_sub_rhs_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_44_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_44_sub_rhs_
SU(2):   $d0 = COPY %233:fpr64
SU(3):   $d1 = COPY %238:fpr64

********** MI Scheduling **********
main:%bb.38 if.then116
  From: %229:fpr64 = LDRDui %293:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %293 %193 
Live Out: %238 %293 %233 %193 
Live Thru: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %238
  LiveReg: %293
  UpdateRegP: SU(0) %229:fpr64 = LDRDui %293:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(1) %230:fpr64 = LDRDui %293:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(3) %232:fpr64 = LDRDui %293:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDui %233:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  UpdateRegP: SU(7) %237:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %233
  UpdateRegP: SU(5) STRDui %233:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
              to 
  UpdateRegP: SU(6) %236:fpr64 = FMULDrr %233:fpr64, %193:fpr64
              to 
  LiveReg: %193
  UpdateRegP: SU(6) %236:fpr64 = FMULDrr %233:fpr64, %193:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Excess PSets: 
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %229:fpr64 = LDRDui %293:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%229
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %230:fpr64 = LDRDui %293:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%230
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %231:fpr64 = FADDDrr %229:fpr64, %230:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%230
    SU(0): Data Latency=4 Reg=%229
  Successors:
    SU(4): Data Latency=1 Reg=%231
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %232:fpr64 = LDRDui %293:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%232
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %233:fpr64 = FADDDrr %231:fpr64, %232:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%231
    SU(3): Data Latency=4 Reg=%232
  Successors:
    SU(6): Data Latency=1 Reg=%233
    SU(5): Data Latency=1 Reg=%233
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDui %233:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%233
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %236:fpr64 = FMULDrr %233:fpr64, %193:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%233
  Successors:
    SU(8): Data Latency=1 Reg=%236
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %237:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=%237
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %238:fpr64 = FDIVDrr %236:fpr64, %237:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%236
    SU(7): Data Latency=4 Reg=%237
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %238:fpr64 = FDIVDrr %236:fpr64, %237:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %236
  UpdateRegP: SU(8) %238:fpr64 = FDIVDrr %236:fpr64, %237:fpr64
              to 
  LiveReg: %237
  UpdateRegP: SU(8) %238:fpr64 = FDIVDrr %236:fpr64, %237:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %236:fpr64 = FMULDrr %233:fpr64, %193:fpr64
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRDui %233:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %233:fpr64 = FADDDrr %231:fpr64, %232:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %231
  UpdateRegP: SU(4) %233:fpr64 = FADDDrr %231:fpr64, %232:fpr64
              to 
  LiveReg: %232
  UpdateRegP: SU(4) %233:fpr64 = FADDDrr %231:fpr64, %232:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %237:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %231:fpr64 = FADDDrr %229:fpr64, %230:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %229
  UpdateRegP: SU(2) %231:fpr64 = FADDDrr %229:fpr64, %230:fpr64
              to 
  LiveReg: %230
  UpdateRegP: SU(2) %231:fpr64 = FADDDrr %229:fpr64, %230:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %232:fpr64 = LDRDui %293:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %230:fpr64 = LDRDui %293:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %229:fpr64 = LDRDui %293:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %229:fpr64 = LDRDui %293:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
SU(1):   %230:fpr64 = LDRDui %293:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
SU(3):   %232:fpr64 = LDRDui %293:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
SU(2):   %231:fpr64 = FADDDrr %229:fpr64, %230:fpr64
SU(7):   %237:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(4):   %233:fpr64 = FADDDrr %231:fpr64, %232:fpr64
SU(5):   STRDui %233:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
SU(6):   %236:fpr64 = FMULDrr %233:fpr64, %193:fpr64
SU(8):   %238:fpr64 = FDIVDrr %236:fpr64, %237:fpr64

********** MI Scheduling **********
main:%bb.39 if.else130
  From: %201:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.41, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %201:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%201
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %201:gpr32common, 8, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%201
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.41, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %201:gpr32common, 8, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %201:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %201:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %201:gpr32common, 8, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.40 if.then133
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_46_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_46_sub_zsol_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %220:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %225:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %225:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %220:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @sp__str_46_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_46_sub_zsol_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_46_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_46_sub_zsol_
SU(2):   $d0 = COPY %220:fpr64
SU(3):   $d1 = COPY %225:fpr64

********** MI Scheduling **********
main:%bb.40 if.then133
  From: %216:fpr64 = LDRDui %293:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %293 %193 
Live Out: %225 %293 %220 %193 
Live Thru: FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %225
  LiveReg: %293
  UpdateRegP: SU(0) %216:fpr64 = LDRDui %293:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(1) %217:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(3) %219:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDui %220:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
              to FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  UpdateRegP: SU(7) %224:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %220
  UpdateRegP: SU(5) STRDui %220:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
              to 
  UpdateRegP: SU(6) %223:fpr64 = FMULDrr %220:fpr64, %193:fpr64
              to 
  LiveReg: %193
  UpdateRegP: SU(6) %223:fpr64 = FMULDrr %220:fpr64, %193:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Excess PSets: 
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %216:fpr64 = LDRDui %293:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%216
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %217:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%217
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(2):   %218:fpr64 = FSUBDrr %216:fpr64, %217:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%217
    SU(0): Data Latency=4 Reg=%216
  Successors:
    SU(4): Data Latency=1 Reg=%218
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   %219:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%219
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %220:fpr64 = FSUBDrr %218:fpr64, %219:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%218
    SU(3): Data Latency=4 Reg=%219
  Successors:
    SU(6): Data Latency=1 Reg=%220
    SU(5): Data Latency=1 Reg=%220
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDui %220:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%220
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %223:fpr64 = FMULDrr %220:fpr64, %193:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%220
  Successors:
    SU(8): Data Latency=1 Reg=%223
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %224:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(8): Data Latency=4 Reg=%224
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%223
    SU(7): Data Latency=4 Reg=%224
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %223
  UpdateRegP: SU(8) %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
              to 
  LiveReg: %224
  UpdateRegP: SU(8) %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(5) 6c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %223:fpr64 = FMULDrr %220:fpr64, %193:fpr64
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRDui %220:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @2c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %220:fpr64 = FSUBDrr %218:fpr64, %219:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %218
  UpdateRegP: SU(4) %220:fpr64 = FSUBDrr %218:fpr64, %219:fpr64
              to 
  LiveReg: %219
  UpdateRegP: SU(4) %220:fpr64 = FSUBDrr %218:fpr64, %219:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 4c > CritPath 7
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(7) %224:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %218:fpr64 = FSUBDrr %216:fpr64, %217:fpr64
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %216
  UpdateRegP: SU(2) %218:fpr64 = FSUBDrr %216:fpr64, %217:fpr64
              to 
  LiveReg: %217
  UpdateRegP: SU(2) %218:fpr64 = FSUBDrr %216:fpr64, %217:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %219:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %217:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @9c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %216:fpr64 = LDRDui %293:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %216:fpr64 = LDRDui %293:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
SU(1):   %217:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
SU(3):   %219:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
SU(2):   %218:fpr64 = FSUBDrr %216:fpr64, %217:fpr64
SU(7):   %224:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(4):   %220:fpr64 = FSUBDrr %218:fpr64, %219:fpr64
SU(5):   STRDui %220:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
SU(6):   %223:fpr64 = FMULDrr %220:fpr64, %193:fpr64
SU(8):   %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64

********** MI Scheduling **********
main:%bb.41 if.else142
  From: %203:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.43, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %203:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%203
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %203:gpr32common, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%203
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.43, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %203:gpr32common, 10, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %203:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %203:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %203:gpr32common, 10, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.42 if.then145
  From: $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_47_redist_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_47_redist_
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %207:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %212:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %212:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %207:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @sp__str_47_redist_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_47_redist_
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @sp__str_47_redist_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_47_redist_
SU(2):   $d0 = COPY %207:fpr64
SU(3):   $d1 = COPY %212:fpr64

********** MI Scheduling **********
main:%bb.42 if.then145
  From: %205:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Cluster ld/st SU(0) - SU(1)
  Copy Succ SU(2)
SU(0):   %205:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%205
    SU(1): Ord  Latency=0 Cluster
  Single Issue       : false;
SU(1):   %206:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
  # preds left       : 0
  # succs left       : 1
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(2): Data Latency=4 Reg=%206
  Single Issue       : false;
SU(2):   %207:fpr64 = FADDDrr %205:fpr64, %206:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%206
    SU(0): Data Latency=4 Reg=%205
  Successors:
    SU(4): Data Latency=1 Reg=%207
    SU(3): Data Latency=1 Reg=%207
  Single Issue       : false;
SU(3):   STRDui %207:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%207
  Single Issue       : false;
SU(4):   %210:fpr64 = FMULDrr %207:fpr64, %193:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%207
  Successors:
    SU(6): Data Latency=1 Reg=%210
  Single Issue       : false;
SU(5):   %211:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(6): Data Latency=4 Reg=%211
  Single Issue       : false;
SU(6):   %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%210
    SU(5): Data Latency=4 Reg=%211
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
  Ready @0c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %210:fpr64 = FMULDrr %207:fpr64, %193:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %207:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %207:fpr64 = FADDDrr %205:fpr64, %206:fpr64
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %211:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) %206:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %205:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %205:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
SU(1):   %206:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
SU(5):   %211:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   %207:fpr64 = FADDDrr %205:fpr64, %206:fpr64
SU(3):   STRDui %207:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
SU(4):   %210:fpr64 = FMULDrr %207:fpr64, %193:fpr64
SU(6):   %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64

********** MI Scheduling **********
main:%bb.43 for.inc155
  From: %250:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.36
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %250:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%250
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%250
  Successors:
    SU(2): Data Latency=1 Reg=%251
  Single Issue       : false;
SU(2):   STRWui %251:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%251
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.36
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %251:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %250:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %250:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
SU(2):   STRWui %251:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.45 return
  From: %292:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
    To: RET_ReallyLR implicit $w8
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %292:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%292
  Single Issue       : false;
SU(1):   $w8 = COPY %292:gpr32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%292
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   RET_ReallyLR implicit $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w8 = COPY %292:gpr32
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %292:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %292:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
SU(1):   $w8 = COPY %292:gpr32

********** INTERVALS **********
WSP [128r,128d:189)[208r,208d:188)[224r,224d:187)[240r,240d:186)[272r,272d:185)[928r,928d:184)[944r,944d:183)[960r,960d:182)[976r,976d:181)[1008r,1008d:180)[1120r,1120d:179)[1168r,1168d:178)[1184r,1184d:177)[1200r,1200d:176)[1232r,1232d:175)[1248r,1248d:174)[1328r,1328d:173)[1344r,1344d:172)[1360r,1360d:171)[1392r,1392d:170)[1488r,1488d:164)[1536r,1536d:163)[1552r,1552d:162)[1568r,1568d:161)[1600r,1600d:160)[1632r,1632d:159)[1728r,1728d:158)[1744r,1744d:157)[1760r,1760d:156)[1792r,1792d:155)[1872r,1872d:154)[1904r,1904d:153)[1920r,1920d:152)[1936r,1936d:151)[1968r,1968d:150)[2080r,2080d:149)[2176r,2176d:148)[2192r,2192d:147)[2208r,2208d:146)[2240r,2240d:145)[2320r,2320d:144)[2352r,2352d:143)[2368r,2368d:142)[2384r,2384d:141)[2416r,2416d:140)[2528r,2528d:139)[2688r,2688d:138)[2704r,2704d:137)[2720r,2720d:136)[2752r,2752d:135)[2816r,2816d:134)[2848r,2848d:133)[2864r,2864d:132)[2880r,2880d:131)[2912r,2912d:130)[2960r,2960d:169)[3008r,3008d:168)[3024r,3024d:167)[3040r,3040d:166)[3072r,3072d:165)[3328r,3328d:129)[3424r,3424d:128)[3440r,3440d:127)[3456r,3456d:126)[3488r,3488d:125)[3552r,3552d:124)[3632r,3632d:123)[3648r,3648d:122)[3664r,3664d:121)[3696r,3696d:120)[3712r,3712d:119)[3760r,3760d:118)[3776r,3776d:117)[3792r,3792d:116)[3824r,3824d:115)[4176r,4176d:9)[4272r,4272d:8)[4288r,4288d:7)[4304r,4304d:6)[4336r,4336d:5)[4352r,4352d:4)[4400r,4400d:3)[4416r,4416d:2)[4432r,4432d:1)[4464r,4464d:0)[4752r,4752d:114)[4768r,4768d:113)[4784r,4784d:112)[4800r,4800d:111)[4832r,4832d:110)[4992r,4992d:14)[5024r,5024d:13)[5040r,5040d:12)[5056r,5056d:11)[5088r,5088d:10)[5184r,5184d:109)[5200r,5200d:108)[5216r,5216d:107)[5232r,5232d:106)[5264r,5264d:105)[5280r,5280d:104)[5296r,5296d:103)[5312r,5312d:102)[5328r,5328d:101)[5360r,5360d:100)[5376r,5376d:99)[5392r,5392d:98)[5408r,5408d:97)[5424r,5424d:96)[5456r,5456d:95)[5472r,5472d:94)[5488r,5488d:93)[5504r,5504d:92)[5520r,5520d:91)[5552r,5552d:90)[5712r,5712d:19)[5744r,5744d:18)[5760r,5760d:17)[5776r,5776d:16)[5808r,5808d:15)[5904r,5904d:89)[5952r,5952d:88)[5968r,5968d:87)[5984r,5984d:86)[6016r,6016d:85)[6496r,6496d:29)[6544r,6544d:28)[6560r,6560d:27)[6576r,6576d:26)[6608r,6608d:25)[6640r,6640d:24)[6656r,6656d:23)[6672r,6672d:22)[6688r,6688d:21)[6720r,6720d:20)[6816r,6816d:84)[6864r,6864d:83)[6880r,6880d:82)[6896r,6896d:81)[6928r,6928d:80)[6944r,6944d:79)[6976r,6976d:78)[6992r,6992d:77)[7008r,7008d:76)[7040r,7040d:75)[7104r,7104d:74)[7200r,7200d:73)[7216r,7216d:72)[7232r,7232d:71)[7264r,7264d:70)[8320r,8320d:69)[8768r,8768d:68)[8784r,8784d:67)[8800r,8800d:66)[8832r,8832d:65)[9088r,9088d:34)[9120r,9120d:33)[9136r,9136d:32)[9152r,9152d:31)[9184r,9184d:30)[9456r,9456d:64)[9504r,9504d:63)[9520r,9520d:62)[9536r,9536d:61)[9568r,9568d:60)[9984r,9984d:59)[10064r,10064d:58)[10080r,10080d:57)[10096r,10096d:56)[10128r,10128d:55)[10376r,10376d:44)[10448r,10448d:43)[10464r,10464d:42)[10480r,10480d:41)[10512r,10512d:40)[10648r,10648d:39)[10720r,10720d:38)[10736r,10736d:37)[10752r,10752d:36)[10784r,10784d:35)[11064r,11064d:49)[11136r,11136d:48)[11152r,11152d:47)[11168r,11168d:46)[11200r,11200d:45)[11448r,11448d:54)[11520r,11520d:53)[11536r,11536d:52)[11552r,11552d:51)[11584r,11584d:50)  0@4464r 1@4432r 2@4416r 3@4400r 4@4352r 5@4336r 6@4304r 7@4288r 8@4272r 9@4176r 10@5088r 11@5056r 12@5040r 13@5024r 14@4992r 15@5808r 16@5776r 17@5760r 18@5744r 19@5712r 20@6720r 21@6688r 22@6672r 23@6656r 24@6640r 25@6608r 26@6576r 27@6560r 28@6544r 29@6496r 30@9184r 31@9152r 32@9136r 33@9120r 34@9088r 35@10784r 36@10752r 37@10736r 38@10720r 39@10648r 40@10512r 41@10480r 42@10464r 43@10448r 44@10376r 45@11200r 46@11168r 47@11152r 48@11136r 49@11064r 50@11584r 51@11552r 52@11536r 53@11520r 54@11448r 55@10128r 56@10096r 57@10080r 58@10064r 59@9984r 60@9568r 61@9536r 62@9520r 63@9504r 64@9456r 65@8832r 66@8800r 67@8784r 68@8768r 69@8320r 70@7264r 71@7232r 72@7216r 73@7200r 74@7104r 75@7040r 76@7008r 77@6992r 78@6976r 79@6944r 80@6928r 81@6896r 82@6880r 83@6864r 84@6816r 85@6016r 86@5984r 87@5968r 88@5952r 89@5904r 90@5552r 91@5520r 92@5504r 93@5488r 94@5472r 95@5456r 96@5424r 97@5408r 98@5392r 99@5376r 100@5360r 101@5328r 102@5312r 103@5296r 104@5280r 105@5264r 106@5232r 107@5216r 108@5200r 109@5184r 110@4832r 111@4800r 112@4784r 113@4768r 114@4752r 115@3824r 116@3792r 117@3776r 118@3760r 119@3712r 120@3696r 121@3664r 122@3648r 123@3632r 124@3552r 125@3488r 126@3456r 127@3440r 128@3424r 129@3328r 130@2912r 131@2880r 132@2864r 133@2848r 134@2816r 135@2752r 136@2720r 137@2704r 138@2688r 139@2528r 140@2416r 141@2384r 142@2368r 143@2352r 144@2320r 145@2240r 146@2208r 147@2192r 148@2176r 149@2080r 150@1968r 151@1936r 152@1920r 153@1904r 154@1872r 155@1792r 156@1760r 157@1744r 158@1728r 159@1632r 160@1600r 161@1568r 162@1552r 163@1536r 164@1488r 165@3072r 166@3040r 167@3024r 168@3008r 169@2960r 170@1392r 171@1360r 172@1344r 173@1328r 174@1248r 175@1232r 176@1200r 177@1184r 178@1168r 179@1120r 180@1008r 181@976r 182@960r 183@944r 184@928r 185@272r 186@240r 187@224r 188@208r 189@128r
B0 [3616r,3632r:8)[6976r,7092r:7)[8736r,8768r:6)[9120r,9200r:0)[10032r,10064r:5)[10416r,10448r:2)[10688r,10720r:1)[11104r,11136r:3)[11488r,11520r:4)  0@9120r 1@10688r 2@10416r 3@11104r 4@11488r 5@10032r 6@8736r 7@6976r 8@3616r
W0 [0B,12r:0)[176r,208r:32)[936r,944r:31)[1152r,1168r:30)[1296r,1328r:29)[1520r,1536r:27)[1720r,1728r:26)[1888r,1904r:25)[2168r,2176r:24)[2336r,2352r:23)[2648r,2688r:22)[2832r,2848r:21)[2992r,3008r:28)[3360r,3424r:20)[3584r,3632r:19)[3744r,3760r:18)[4208r,4272r:9)[4384r,4400r:8)[5008r,5024r:1)[5728r,5744r:2)[5936r,5952r:7)[6512r,6544r:10)[6848r,6864r:6)[6960r,6976r:5)[7192r,7200r:4)[8640r,8768r:17)[9104r,9120r:3)[9488r,9504r:16)[10000r,10064r:15)[10384r,10448r:12)[10656r,10720r:11)[11072r,11136r:13)[11456r,11520r:14)  0@0B-phi 1@5008r 2@5728r 3@9104r 4@7192r 5@6960r 6@6848r 7@5936r 8@4384r 9@4208r 10@6512r 11@10656r 12@10384r 13@11072r 14@11456r 15@10000r 16@9488r 17@8640r 18@3744r 19@3584r 20@3360r 21@2832r 22@2648r 23@2336r 24@2168r 25@1888r 26@1720r 27@1520r 28@2992r 29@1296r 30@1152r 31@936r 32@176r
W1 [0B,8r:0)[192r,208r:16)[1312r,1328r:15)[1696r,1728r:14)[2144r,2176r:13)[2624r,2688r:12)[3376r,3424r:5)[3600r,3632r:4)[4224r,4272r:1)[6528r,6544r:2)[7168r,7200r:11)[8688r,8768r:3)[10016r,10064r:10)[10400r,10448r:7)[10672r,10720r:6)[11088r,11136r:8)[11472r,11520r:9)  0@0B-phi 1@4224r 2@6528r 3@8688r 4@3600r 5@3376r 6@10672r 7@10400r 8@11088r 9@11472r 10@10016r 11@7168r 12@2624r 13@2144r 14@1696r 15@1312r 16@192r
W8 [208r,288r:24)[944r,944d:22)[1168r,1168d:21)[1328r,1408r:23)[1536r,1536d:19)[1728r,1808r:18)[1904r,1984r:17)[2176r,2256r:16)[2352r,2432r:15)[2688r,2804r:14)[2848r,2848d:13)[3008r,3008d:20)[3424r,3424d:12)[3632r,3632d:11)[3760r,3760d:10)[4272r,4272d:2)[4400r,4400d:1)[6544r,6544d:3)[9504r,9504d:9)[10064r,10064d:8)[10448r,10448d:5)[10720r,10720d:4)[11136r,11136d:6)[11520r,11520d:7)[11760r,11776r:0)  0@11760r 1@4400r 2@4272r 3@6544r 4@10720r 5@10448r 6@11136r 7@11520r 8@10064r 9@9504r 10@3760r 11@3632r 12@3424r 13@2848r 14@2688r 15@2352r 16@2176r 17@1904r 18@1728r 19@1536r 20@3008r 21@1168r 22@944r 23@1328r 24@208r
%0 [12r,96r:0)  0@12r weight:0.000000e+00
%1 [8r,112r:0)  0@8r weight:0.000000e+00
%5 [288r,320r:0)  0@288r weight:0.000000e+00
%6 [1056r,1088r:0)  0@1056r weight:0.000000e+00
%8 [368r,616r:0)  0@368r weight:0.000000e+00
%9 [384r,616r:0)  0@384r weight:0.000000e+00
%10 [416r,680r:0)  0@416r weight:0.000000e+00
%11 [448r,676r:0)  0@448r weight:0.000000e+00
%12 [480r,712r:0)  0@480r weight:0.000000e+00
%13 [512r,708r:0)  0@512r weight:0.000000e+00
%14 [544r,744r:0)  0@544r weight:0.000000e+00
%15 [576r,740r:0)  0@576r weight:0.000000e+00
%16 [608r,776r:0)  0@608r weight:0.000000e+00
%17 [640r,772r:0)  0@640r weight:0.000000e+00
%18 [672r,808r:0)  0@672r weight:0.000000e+00
%19 [704r,804r:0)  0@704r weight:0.000000e+00
%20 [736r,836r:0)  0@736r weight:0.000000e+00
%21 [768r,840r:0)  0@768r weight:0.000000e+00
%22 [800r,900r:0)  0@800r weight:0.000000e+00
%23 [832r,904r:0)  0@832r weight:0.000000e+00
%24 [912r,920r:0)  0@912r weight:0.000000e+00
%25 [896r,992r:0)  0@896r weight:0.000000e+00
%31 [1408r,1440r:0)  0@1408r weight:0.000000e+00
%34 [3160r,3176r:0)  0@3160r weight:0.000000e+00
%35 [3120r,3152r:0)  0@3120r weight:0.000000e+00
%36 [3136r,3152r:0)  0@3136r weight:0.000000e+00
%37 [3168r,3232r:0)  0@3168r weight:0.000000e+00
%38 [3184r,3200r:0)  0@3184r weight:0.000000e+00
%39 [3216r,3232r:0)  0@3216r weight:0.000000e+00
%42 [1616r,1776r:0)  0@1616r weight:0.000000e+00
%45 [1808r,1824r:0)  0@1808r weight:0.000000e+00
%46 [1856r,1952r:0)  0@1856r weight:0.000000e+00
%47 [1984r,2000r:0)  0@1984r weight:0.000000e+00
%49 [2064r,2224r:0)  0@2064r weight:0.000000e+00
%52 [2256r,2272r:0)  0@2256r weight:0.000000e+00
%53 [2304r,2400r:0)  0@2304r weight:0.000000e+00
%54 [2432r,2448r:0)  0@2432r weight:0.000000e+00
%56 [2512r,2736r:0)  0@2512r weight:0.000000e+00
%57 [2544r,2632r:0)  0@2544r weight:0.000000e+00
%58 [2628r,2656r:0)  0@2628r weight:0.000000e+00
%59 [2632r,2672r:0)  0@2632r weight:0.000000e+00
%61 [2804r,2808r:0)  0@2804r weight:0.000000e+00
%62 [2800r,2896r:0)  0@2800r weight:0.000000e+00
%64 [3920r,3952r:0)  0@3920r weight:0.000000e+00
%65 [4016r,4048r:0)  0@4016r weight:0.000000e+00
%66 [3264r,4016r:0)  0@3264r weight:0.000000e+00
%67 [3280r,3472r:0)  0@3280r weight:0.000000e+00
%68 [3296r,3472r:0)  0@3296r weight:0.000000e+00
%69 [3312r,3472r:0)  0@3312r weight:0.000000e+00
%72 [3504r,3680r:0)  0@3504r weight:0.000000e+00
%73 [3520r,3536r:0)  0@3520r weight:0.000000e+00
%74 [3536r,3680r:0)  0@3536r weight:0.000000e+00
%79 [3840r,3856r:0)  0@3840r weight:0.000000e+00
%85 [4544r,4688r:0)  0@4544r weight:0.000000e+00
%86 [4560r,4628r:0)  0@4560r weight:0.000000e+00
%87 [4628r,4632r:0)  0@4628r weight:0.000000e+00
%88 [4592r,4632r:0)  0@4592r weight:0.000000e+00
%89 [4624r,4692r:0)  0@4624r weight:0.000000e+00
%90 [4692r,4696r:0)  0@4692r weight:0.000000e+00
%91 [4656r,4696r:0)  0@4656r weight:0.000000e+00
%92 [4688r,4728r:0)  0@4688r weight:0.000000e+00
%93 [4728r,4736r:0)  0@4728r weight:0.000000e+00
%94 [4720r,4736r:0)  0@4720r weight:0.000000e+00
%95 [4848r,4864r:0)  0@4848r weight:0.000000e+00
%96 [4896r,4912r:0)  0@4896r weight:0.000000e+00
%98 [5568r,5584r:0)  0@5568r weight:0.000000e+00
%99 [5616r,5632r:0)  0@5616r weight:0.000000e+00
%101 [5944r,6032r:0)  0@5944r weight:0.000000e+00
%102 [6128r,6160r:0)  0@6128r weight:0.000000e+00
%103 [6144r,6160r:0)  0@6144r weight:0.000000e+00
%106 [7092r,7096r:0)  0@7092r weight:0.000000e+00
%107 [7088r,7248r:0)  0@7088r weight:0.000000e+00
%110 [7280r,7296r:0)  0@7280r weight:0.000000e+00
%112 [7360r,7976r:0)  0@7360r weight:0.000000e+00
%113 [7944r,8000r:0)  0@7944r weight:0.000000e+00
%114 [7952r,8000r:0)  0@7952r weight:0.000000e+00
%115 [7992r,8024r:0)  0@7992r weight:0.000000e+00
%116 [7976r,8032r:0)  0@7976r weight:0.000000e+00
%117 [8024r,8152r:0)  0@8024r weight:0.000000e+00
%118 [8000r,8032r:0)  0@8000r weight:0.000000e+00
%119 [8032r,8040r:0)  0@8032r weight:0.000000e+00
%120 [8040r,8048r:0)  0@8040r weight:0.000000e+00
%121 [7520r,7536r:0)  0@7520r weight:0.000000e+00
%122 [7536r,8048r:0)  0@7536r weight:0.000000e+00
%123 [8048r,8176r:0)  0@8048r weight:0.000000e+00
%124 [8056r,8064r:0)  0@8056r weight:0.000000e+00
%125 [7600r,7616r:0)  0@7600r weight:0.000000e+00
%126 [7616r,8064r:0)  0@7616r weight:0.000000e+00
%127 [8064r,8096r:0)  0@8064r weight:0.000000e+00
%128 [8072r,8080r:0)  0@8072r weight:0.000000e+00
%129 [7664r,7680r:0)  0@7664r weight:0.000000e+00
%130 [7680r,8080r:0)  0@7680r weight:0.000000e+00
%131 [8080r,8096r:0)  0@8080r weight:0.000000e+00
%132 [8096r,8120r:0)  0@8096r weight:0.000000e+00
%133 [7728r,7960r:0)  0@7728r weight:0.000000e+00
%134 [7960r,8112r:0)  0@7960r weight:0.000000e+00
%135 [8112r,8120r:0)  0@8112r weight:0.000000e+00
%136 [8120r,8128r:0)  0@8120r weight:0.000000e+00
%137 [8008r,8088r:0)  0@8008r weight:0.000000e+00
%138 [8088r,8128r:0)  0@8088r weight:0.000000e+00
%139 [8128r,8160r:0)  0@8128r weight:0.000000e+00
%141 [8104r,8136r:0)  0@8104r weight:0.000000e+00
%143 [8136r,8144r:0)  0@8136r weight:0.000000e+00
%145 [8144r,8160r:0)  0@8144r weight:0.000000e+00
%146 [8160r,8168r:0)  0@8160r weight:0.000000e+00
%147 [7936r,8016r:0)  0@7936r weight:0.000000e+00
%148 [7968r,7984r:0)  0@7968r weight:0.000000e+00
%149 [7984r,8016r:0)  0@7984r weight:0.000000e+00
%150 [8016r,8168r:0)  0@8016r weight:0.000000e+00
%151 [8168r,8184r:0)  0@8168r weight:0.000000e+00
%152 [8232r,8816r:0)  0@8232r weight:0.000000e+00
%153 [8240r,8304r:0)  0@8240r weight:0.000000e+00
%154 [8292r,8816r:0)  0@8292r weight:0.000000e+00
%155 [8296r,8816r:0)  0@8296r weight:0.000000e+00
%156 [8304r,8816r:0)  0@8304r weight:0.000000e+00
%157 [8272r,8816r:0)  0@8272r weight:0.000000e+00
%158 [8280r,8816r:0)  0@8280r weight:0.000000e+00
%159 [8288r,8816r:0)  0@8288r weight:0.000000e+00
%160 [8312r,8816r:0)  0@8312r weight:0.000000e+00
%161 [8328r,8520r:0)  0@8328r weight:0.000000e+00
%163 [8352r,8584r:0)  0@8352r weight:0.000000e+00
%164 [8368r,8580r:0)  0@8368r weight:0.000000e+00
%165 [8384r,8600r:0)  0@8384r weight:0.000000e+00
%166 [8416r,8596r:0)  0@8416r weight:0.000000e+00
%167 [8448r,8656r:0)  0@8448r weight:0.000000e+00
%168 [8480r,8648r:0)  0@8480r weight:0.000000e+00
%169 [8512r,8672r:0)  0@8512r weight:0.000000e+00
%170 [8544r,8664r:0)  0@8544r weight:0.000000e+00
%171 [8592r,8680r:0)  0@8592r weight:0.000000e+00
%173 [8848r,8864r:0)  0@8848r weight:0.000000e+00
%174 [8864r,8880r:0)  0@8864r weight:0.000000e+00
%175 [8928r,8944r:0)  0@8928r weight:0.000000e+00
%176 [8992r,9008r:0)  0@8992r weight:0.000000e+00
%178 [9328r,9344r:0)  0@9328r weight:0.000000e+00
%179 [9408r,9424r:0)  0@9408r weight:0.000000e+00
%182 [9584r,9672r:0)  0@9584r weight:0.000000e+00
%183 [9792r,9808r:0)  0@9792r weight:0.000000e+00
%186 [9872r,9888r:0)  0@9872r weight:0.000000e+00
%187 [9888r,9956r:0)  0@9888r weight:0.000000e+00
%188 [9680r,11680B:0)  0@9680r weight:0.000000e+00
%189 [9956r,10112r:0)  0@9956r weight:0.000000e+00
%190 [9688r,11680B:0)  0@9688r weight:0.000000e+00
%191 [9920r,10112r:0)  0@9920r weight:0.000000e+00
%192 [9648r,9664r:0)  0@9648r weight:0.000000e+00
%193 [9664r,11680B:0)  0@9664r weight:0.000000e+00
%194 [9960r,9968r:0)  0@9960r weight:0.000000e+00
%195 [9952r,9968r:0)  0@9952r weight:0.000000e+00
%196 [9968r,10112r:0)  0@9968r weight:0.000000e+00
%199 [10144r,10160r:0)  0@10144r weight:0.000000e+00
%201 [10832r,10848r:0)  0@10832r weight:0.000000e+00
%203 [11248r,11264r:0)  0@11248r weight:0.000000e+00
%205 [11328r,11416r:0)  0@11328r weight:0.000000e+00
%206 [11344r,11416r:0)  0@11344r weight:0.000000e+00
%207 [11416r,11568r:0)  0@11416r weight:0.000000e+00
%210 [11432r,11440r:0)  0@11432r weight:0.000000e+00
%211 [11408r,11440r:0)  0@11408r weight:0.000000e+00
%212 [11440r,11568r:0)  0@11440r weight:0.000000e+00
%216 [10912r,10968r:0)  0@10912r weight:0.000000e+00
%217 [10928r,10968r:0)  0@10928r weight:0.000000e+00
%218 [10968r,11032r:0)  0@10968r weight:0.000000e+00
%219 [10960r,11032r:0)  0@10960r weight:0.000000e+00
%220 [11032r,11184r:0)  0@11032r weight:0.000000e+00
%223 [11048r,11056r:0)  0@11048r weight:0.000000e+00
%224 [11024r,11056r:0)  0@11024r weight:0.000000e+00
%225 [11056r,11184r:0)  0@11056r weight:0.000000e+00
%229 [10224r,10280r:0)  0@10224r weight:0.000000e+00
%230 [10240r,10280r:0)  0@10240r weight:0.000000e+00
%231 [10280r,10344r:0)  0@10280r weight:0.000000e+00
%232 [10272r,10344r:0)  0@10272r weight:0.000000e+00
%233 [10344r,10496r:0)  0@10344r weight:0.000000e+00
%236 [10360r,10368r:0)  0@10360r weight:0.000000e+00
%237 [10336r,10368r:0)  0@10336r weight:0.000000e+00
%238 [10368r,10496r:0)  0@10368r weight:0.000000e+00
%242 [10528r,10616r:0)  0@10528r weight:0.000000e+00
%243 [10544r,10616r:0)  0@10544r weight:0.000000e+00
%244 [10616r,10768r:0)  0@10616r weight:0.000000e+00
%245 [10632r,10640r:0)  0@10632r weight:0.000000e+00
%246 [10608r,10640r:0)  0@10608r weight:0.000000e+00
%247 [10640r,10768r:0)  0@10640r weight:0.000000e+00
%250 [11616r,11632r:0)  0@11616r weight:0.000000e+00
%251 [11632r,11648r:0)  0@11632r weight:0.000000e+00
%252 [9072r,9168r:0)  0@9072r weight:0.000000e+00
%253 [9200r,9256r:0)  0@9200r weight:0.000000e+00
%254 [9216r,9256r:0)  0@9216r weight:0.000000e+00
%255 [8960r,9312B:0)  0@8960r weight:0.000000e+00
%256 [9248r,9264r:0)  0@9248r weight:0.000000e+00
%257 [9264r,9280r:0)  0@9264r weight:0.000000e+00
%259 [6224r,6416r:0)  0@6224r weight:0.000000e+00
%261 [6048r,6800B:0)  0@6048r weight:0.000000e+00
%262 [6256r,6304r:0)  0@6256r weight:0.000000e+00
%263 [6272r,6336r:0)  0@6272r weight:0.000000e+00
%265 [6304r,6336r:0)  0@6304r weight:0.000000e+00
%267 [6336r,6352r:0)  0@6336r weight:0.000000e+00
%268 [6080r,6800B:0)  0@6080r weight:0.000000e+00
%270 [6352r,6368r:0)  0@6352r weight:0.000000e+00
%272 [6480r,6592r:0)  0@6480r weight:0.000000e+00
%275 [6736r,6752r:0)  0@6736r weight:0.000000e+00
%276 [6752r,6768r:0)  0@6752r weight:0.000000e+00
%277 [5696r,5792r:0)  0@5696r weight:0.000000e+00
%278 [5824r,5840r:0)  0@5824r weight:0.000000e+00
%279 [5840r,5856r:0)  0@5840r weight:0.000000e+00
%280 [4976r,5072r:0)  0@4976r weight:0.000000e+00
%281 [5104r,5120r:0)  0@5104r weight:0.000000e+00
%282 [5120r,5136r:0)  0@5120r weight:0.000000e+00
%283 [4112r,4160r:0)  0@4112r weight:0.000000e+00
%284 [4128r,4320r:0)  0@4128r weight:0.000000e+00
%285 [4144r,4320r:0)  0@4144r weight:0.000000e+00
%286 [4160r,4320r:0)  0@4160r weight:0.000000e+00
%292 [11744r,11760r:0)  0@11744r weight:0.000000e+00
%293 [16r,4096B:0)[4528B,11680B:0)  0@16r weight:0.000000e+00
RegMasks: 208r 944r 1168r 1328r 1536r 1728r 1904r 2176r 2352r 2688r 2848r 3008r 3424r 3632r 3760r 4272r 4400r 4768r 5024r 5200r 5296r 5392r 5488r 5744r 5952r 6544r 6656r 6864r 6976r 7200r 8768r 9120r 9504r 10064r 10448r 10720r 11136r 11520r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=128, align=16, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=1, align=4, at location [SP]
  fi#13: size=128, align=16, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x408B89645A1CAC08, align=8
  cp#2: -4.683910e+03, align=8
  cp#3: 1.148450e+04, align=8
  cp#4: -1.927240e+04, align=8
  cp#5: 1.000000e+06, align=8
  cp#6: 1.000000e+02, align=8
Function Live Ins: $w0 in %0, $x1 in %1

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0, $x1
8B	  %1:gpr64 = COPY $x1
12B	  %0:gpr32 = COPY $w0
16B	  %293:gpr64sp = ADDXri %stack.13.t_names, 0, 0
80B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
96B	  STRWui %0:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
112B	  STRXui %1:gpr64, %293:gpr64sp, 40 :: (store 8 into %ir.argv.addr)
128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
176B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag
192B	  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_
208B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
224B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
240B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
256B	  PCN_STACKMAP 0, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
288B	  %5:gpr64 = COPY $x8
304B	  STRXui %5:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
320B	  CBZX %5:gpr64, %bb.2
336B	  B %bb.1

352B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

368B	  %8:gpr64temp = ADRP target-flags(aarch64-page) @timeron
384B	  %9:gpr32 = MOVi32imm 1
416B	  %10:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_2_total_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_2_total_
448B	  %11:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_3_rhsx_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_3_rhsx_
480B	  %12:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_4_rhsy_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_4_rhsy_
512B	  %13:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_5_rhsz_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_5_rhsz_
544B	  %14:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_6_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_6_rhs_
576B	  %15:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_7_xsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_7_xsolve_
608B	  %16:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_8_ysolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_8_ysolve_
616B	  STRWui %9:gpr32, %8:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
640B	  %17:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_9_zsolve_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_9_zsolve_
672B	  %18:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_10_redist1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_10_redist1_
676B	  STRXui %11:gpr64, %stack.13.t_names, 2 :: (store 8 into %ir.arrayidx1, align 16)
680B	  STRXui %10:gpr64, %stack.13.t_names, 1 :: (store 8 into %ir.arrayidx)
704B	  %19:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_11_redist2_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_11_redist2_
708B	  STRXui %13:gpr64, %stack.13.t_names, 4 :: (store 8 into %ir.arrayidx3, align 16)
712B	  STRXui %12:gpr64, %stack.13.t_names, 3 :: (store 8 into %ir.arrayidx2)
736B	  %20:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_12_tzetar_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_12_tzetar_
740B	  STRXui %15:gpr64, %stack.13.t_names, 6 :: (store 8 into %ir.arrayidx5, align 16)
744B	  STRXui %14:gpr64, %stack.13.t_names, 5 :: (store 8 into %ir.arrayidx4)
768B	  %21:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_13_ninvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_13_ninvr_
772B	  STRXui %17:gpr64, %stack.13.t_names, 8 :: (store 8 into %ir.arrayidx7, align 16)
776B	  STRXui %16:gpr64, %stack.13.t_names, 7 :: (store 8 into %ir.arrayidx6)
800B	  %22:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_14_pinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_14_pinvr_
804B	  STRXui %19:gpr64, %stack.13.t_names, 10 :: (store 8 into %ir.arrayidx9, align 16)
808B	  STRXui %18:gpr64, %stack.13.t_names, 9 :: (store 8 into %ir.arrayidx8)
832B	  %23:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_15_txinvr_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_15_txinvr_
836B	  STRXui %20:gpr64, %stack.13.t_names, 14 :: (store 8 into %ir.arrayidx10, align 16)
840B	  STRXui %21:gpr64, %stack.13.t_names, 13 :: (store 8 into %ir.arrayidx11)
896B	  %25:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
900B	  STRXui %22:gpr64, %stack.13.t_names, 12 :: (store 8 into %ir.arrayidx12, align 16)
904B	  STRXui %23:gpr64, %stack.13.t_names, 11 :: (store 8 into %ir.arrayidx13)
912B	  %24:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_16_add_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_16_add_
920B	  STRXui %24:gpr64, %293:gpr64sp, 15 :: (store 8 into %ir.arrayidx14)
928B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
936B	  $x0 = COPY %25:gpr64
944B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
960B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
976B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
992B	  PCN_STACKMAP 1, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %25:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1008B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1024B	  B %bb.3

1040B	bb.2.if.else:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1056B	  %6:gpr64temp = ADRP target-flags(aarch64-page) @timeron
1088B	  STRWui $wzr, %6:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

1104B	bb.3.if.end:
	; predecessors: %bb.2, %bb.1
	  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

1120B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1152B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_17____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_17____NAS_Par
1168B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
1184B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1200B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1216B	  PCN_STACKMAP 2, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1232B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1248B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1296B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_18_inputsp_da, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da
1312B	  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_
1328B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
1344B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1360B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1376B	  PCN_STACKMAP 3, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1392B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1408B	  %31:gpr64 = COPY $x8
1424B	  STRXui %31:gpr64, %stack.14.fp, 0 :: (store 8 into %ir.fp)
1440B	  CBZX %31:gpr64, %bb.9
1456B	  B %bb.4

1472B	bb.4.if.then19:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1488B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1520B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_19__Reading_f, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_19__Reading_f
1536B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
1552B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1568B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1584B	  PCN_STACKMAP 4, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1600B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1616B	  %42:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1632B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1696B	  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_20__d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_20__d_
1712B	  $x2 = ADDXri %stack.4.niter, 0, 0
1720B	  $x0 = COPY %42:gpr64
1728B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
1744B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1760B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1776B	  PCN_STACKMAP 5, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %42:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1792B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1808B	  %45:gpr32 = COPY $w8
1824B	  STRWui %45:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

1840B	bb.5.while.cond:
	; predecessors: %bb.4, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

1856B	  %46:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
1872B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1888B	  $x0 = COPY %46:gpr64
1904B	  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
1920B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1936B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1952B	  PCN_STACKMAP 6, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %46:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
1968B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1984B	  %47:gpr32sp = COPY $w8
2000B	  dead $wzr = SUBSWri %47:gpr32sp, 10, 0, implicit-def $nzcv
2016B	  Bcc 1, %bb.5, implicit killed $nzcv
2032B	  B %bb.6

2048B	bb.6.while.end:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2064B	  %49:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2080B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2144B	  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_21__lf_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_21__lf_
2160B	  $x2 = MOVaddr target-flags(aarch64-page) @dt, target-flags(aarch64-pageoff, aarch64-nc) @dt
2168B	  $x0 = COPY %49:gpr64
2176B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit-def $sp, implicit-def $w8
2192B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2208B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2224B	  PCN_STACKMAP 7, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %49:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
2240B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2256B	  %52:gpr32 = COPY $w8
2272B	  STRWui %52:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)

2288B	bb.7.while.cond25:
	; predecessors: %bb.6, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

2304B	  %53:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2320B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2336B	  $x0 = COPY %53:gpr64
2352B	  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
2368B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2384B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2400B	  PCN_STACKMAP 8, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %53:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
2416B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2432B	  %54:gpr32sp = COPY $w8
2448B	  dead $wzr = SUBSWri %54:gpr32sp, 10, 0, implicit-def $nzcv
2464B	  Bcc 1, %bb.7, implicit killed $nzcv
2480B	  B %bb.8

2496B	bb.8.while.end29:
	; predecessors: %bb.7
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2512B	  %56:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2528B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2544B	  %57:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
2624B	  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_22__d_d_d_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_22__d_d_d_
2628B	  %58:gpr64sp = nuw ADDXri %57:gpr64common, 4, 0
2632B	  %59:gpr64sp = nuw ADDXri %57:gpr64common, 8, 0
2640B	  $x2 = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
2648B	  $x0 = COPY %56:gpr64
2656B	  $x3 = COPY %58:gpr64sp
2672B	  $x4 = COPY %59:gpr64sp
2688B	  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit-def $sp, implicit-def $w8
2704B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2720B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2736B	  PCN_STACKMAP 9, 0, 0, %stack.12.Class, 0, 0, %stack.14.fp, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.15.result, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %56:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
2752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2800B	  %62:gpr64 = LDRXui %stack.14.fp, 0 :: (dereferenceable load 8 from %ir.fp)
2804B	  %61:gpr32 = COPY $w8
2808B	  STRWui %61:gpr32, %stack.15.result, 0 :: (store 4 into %ir.result)
2816B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2832B	  $x0 = COPY %62:gpr64
2848B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
2864B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
2880B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
2896B	  PCN_STACKMAP 10, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %62:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
2912B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
2928B	  B %bb.10

2944B	bb.9.if.else32:
	; predecessors: %bb.3
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2960B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
2992B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_23__No_input_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_23__No_input_
3008B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
3024B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3040B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3056B	  PCN_STACKMAP 11, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
3072B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3120B	  %35:gpr64temp = ADRP target-flags(aarch64-page) @dt
3136B	  %36:gpr64 = MOVi64imm 4562254508917369340
3152B	  STRXui %36:gpr64, %35:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
3160B	  %34:gpr32 = MOVi32imm 400
3168B	  %37:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
3176B	  STRWui %34:gpr32, %stack.4.niter, 0 :: (store 4 into %ir.niter)
3184B	  %38:gpr64 = MOVi64imm 438086664294
3200B	  STRXui %38:gpr64, %37:gpr64common, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
3216B	  %39:gpr32 = MOVi32imm 102
3232B	  STRWui %39:gpr32, %37:gpr64common, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

3248B	bb.10.if.end34:
	; predecessors: %bb.9, %bb.8
	  successors: %bb.13(0x10000000), %bb.11(0x70000000); %bb.13(12.50%), %bb.11(87.50%)

3264B	  %66:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
3280B	  %67:gpr32 = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
3296B	  %68:gpr32 = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
3312B	  %69:gpr32 = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
3328B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3360B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_24__Size___4d, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d
3376B	  $w1 = COPY %67:gpr32
3392B	  $w2 = COPY %68:gpr32
3408B	  $w3 = COPY %69:gpr32
3424B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
3440B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3456B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3472B	  PCN_STACKMAP 12, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %67:gpr32, %68:gpr32, %69:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
3488B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3504B	  %72:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
3520B	  %73:gpr64temp = ADRP target-flags(aarch64-page) @dt
3536B	  %74:fpr64 = LDRDui %73:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
3552B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3584B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_25__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration
3600B	  $w1 = COPY %72:gpr32
3616B	  $d0 = COPY %74:fpr64
3632B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
3648B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3664B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3680B	  PCN_STACKMAP 13, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %72:gpr32, %74:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
3696B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3712B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3744B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_26___, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_26___
3760B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
3776B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3792B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3808B	  PCN_STACKMAP 14, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
3824B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3840B	  %79:gpr32common = LDRWui %66:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
3856B	  dead $wzr = SUBSWri %79:gpr32common, 102, 0, implicit-def $nzcv
3872B	  Bcc 12, %bb.13, implicit killed $nzcv
3888B	  B %bb.11

3904B	bb.11.if.end34:
	; predecessors: %bb.10
	  successors: %bb.13(0x12492492), %bb.12(0x6db6db6e); %bb.13(14.29%), %bb.12(85.71%)

3920B	  %64:gpr32common = LDRWui %66:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
3952B	  dead $wzr = SUBSWri %64:gpr32common, 102, 0, implicit-def $nzcv
3968B	  Bcc 12, %bb.13, implicit killed $nzcv
3984B	  B %bb.12

4000B	bb.12.if.end34:
	; predecessors: %bb.11
	  successors: %bb.13(0x2aaaaaab), %bb.14(0x55555555); %bb.13(33.33%), %bb.14(66.67%)

4016B	  %65:gpr32common = LDRWui %66:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
4048B	  dead $wzr = SUBSWri %65:gpr32common, 103, 0, implicit-def $nzcv
4064B	  Bcc 11, %bb.14, implicit killed $nzcv
4080B	  B %bb.13

4096B	bb.13.if.then42:
	; predecessors: %bb.10, %bb.11, %bb.12
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

4112B	  %283:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
4128B	  %284:gpr32 = LDRWui %283:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
4144B	  %285:gpr32 = LDRWui %283:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
4160B	  %286:gpr32 = LDRWui %283:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
4176B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4208B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_27___d___d___, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___
4224B	  $w1 = COPY %284:gpr32
4240B	  $w2 = COPY %285:gpr32
4256B	  $w3 = COPY %286:gpr32
4272B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit-def $sp, implicit-def dead $w8
4288B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4304B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4320B	  PCN_STACKMAP 15, 0, 0, %stack.0.retval, 0, %284:gpr32, %285:gpr32, %286:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)
4336B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4352B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4384B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_28__Problem_s, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_28__Problem_s
4400B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
4416B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4432B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4448B	  PCN_STACKMAP 16, 0, 0, %stack.0.retval, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)
4464B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4496B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
4512B	  B %bb.45

4528B	bb.14.if.end45:
	; predecessors: %bb.12
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

4544B	  %85:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
4560B	  %86:gpr32common = LDRWui %85:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
4592B	  %88:gpr64temp = ADRP target-flags(aarch64-page) @nx2
4624B	  %89:gpr32common = LDRWui %85:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
4628B	  %87:gpr32common = SUBWri %86:gpr32common, 2, 0
4632B	  STRWui %87:gpr32common, %88:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
4656B	  %91:gpr64temp = ADRP target-flags(aarch64-page) @ny2
4688B	  %92:gpr32common = LDRWui %85:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
4692B	  %90:gpr32common = SUBWri %89:gpr32common, 2, 0
4696B	  STRWui %90:gpr32common, %91:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
4720B	  %94:gpr64temp = ADRP target-flags(aarch64-page) @nz2
4728B	  %93:gpr32common = SUBWri %92:gpr32common, 2, 0
4736B	  STRWui %93:gpr32common, %94:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
4752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
4768B	  BL @set_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
4784B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
4800B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
4816B	  PCN_STACKMAP 17, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
4832B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
4848B	  %95:gpr32 = MOVi32imm 1
4864B	  STRWui %95:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

4880B	bb.15.for.cond:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

4896B	  %96:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4912B	  dead $wzr = SUBSWri %96:gpr32common, 15, 0, implicit-def $nzcv
4928B	  Bcc 12, %bb.17, implicit killed $nzcv
4944B	  B %bb.16

4960B	bb.16.for.body:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

4976B	  %280:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
4992B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5008B	  $w0 = COPY %280:gpr32
5024B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5040B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5056B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5072B	  PCN_STACKMAP 18, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %280:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5088B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5104B	  %281:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
5120B	  %282:gpr32common = nsw ADDWri %281:gpr32common, 1, 0
5136B	  STRWui %282:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
5152B	  B %bb.15

5168B	bb.17.for.end:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

5184B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5200B	  BL @exact_rhs, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
5216B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5232B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5248B	  PCN_STACKMAP 19, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5264B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5280B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5296B	  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
5312B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5328B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5344B	  PCN_STACKMAP 20, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5360B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5392B	  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
5408B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5424B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5440B	  PCN_STACKMAP 21, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5456B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5472B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5488B	  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
5504B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5520B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5536B	  PCN_STACKMAP 22, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5552B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5568B	  %98:gpr32 = MOVi32imm 1
5584B	  STRWui %98:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)

5600B	bb.18.for.cond49:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

5616B	  %99:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
5632B	  dead $wzr = SUBSWri %99:gpr32common, 15, 0, implicit-def $nzcv
5648B	  Bcc 12, %bb.20, implicit killed $nzcv
5664B	  B %bb.19

5680B	bb.19.for.body51:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

5696B	  %277:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
5712B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5728B	  $w0 = COPY %277:gpr32
5744B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5760B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5776B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
5792B	  PCN_STACKMAP 23, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %277:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
5808B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
5824B	  %278:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
5840B	  %279:gpr32common = nsw ADDWri %278:gpr32common, 1, 0
5856B	  STRWui %279:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
5872B	  B %bb.18

5888B	bb.20.for.end54:
	; predecessors: %bb.18
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

5904B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
5936B	  $w0 = MOVi32imm 1
5944B	  %101:gpr32 = MOVi32imm 1
5952B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
5968B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
5984B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6000B	  PCN_STACKMAP 24, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
6016B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6032B	  STRWui %101:gpr32, %stack.5.step, 0 :: (store 4 into %ir.step)
6048B	  undef %261.sub_32:gpr64 = MOVi32imm 1717986919
6080B	  %268:gpr32 = MOVi32imm 20

6112B	bb.21.for.cond55:
	; predecessors: %bb.20, %bb.25
	  successors: %bb.22(0x7c000000), %bb.26(0x04000000); %bb.22(96.88%), %bb.26(3.12%)

6128B	  %102:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
6144B	  %103:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
6160B	  dead $wzr = SUBSWrr %102:gpr32, %103:gpr32, implicit-def $nzcv
6176B	  Bcc 12, %bb.26, implicit killed $nzcv
6192B	  B %bb.22

6208B	bb.22.for.body57:
	; predecessors: %bb.21
	  successors: %bb.24(0x20000000), %bb.23(0x60000000); %bb.24(25.00%), %bb.23(75.00%)

6224B	  %259:gpr64common = LDRSWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
6256B	  %262:gpr64 = MADDXrrr %259:gpr64common, %261:gpr64, $xzr
6272B	  %263:gpr64 = UBFMXri %262:gpr64, 63, 63
6304B	  %265:gpr64 = SBFMXri %262:gpr64, 35, 63
6336B	  %267:gpr32 = ADDWrr %265.sub_32:gpr64, %263.sub_32:gpr64
6352B	  %270:gpr32 = MSUBWrrr %267:gpr32, %268:gpr32, %259.sub_32:gpr64common
6368B	  CBZW %270:gpr32, %bb.24
6384B	  B %bb.23

6400B	bb.23.for.body57:
	; predecessors: %bb.22
	  successors: %bb.24(0x2aaaaaab), %bb.25(0x55555555); %bb.24(33.33%), %bb.25(66.67%)

6416B	  dead $wzr = SUBSWri %259.sub_32:gpr64common, 1, 0, implicit-def $nzcv
6432B	  Bcc 1, %bb.25, implicit killed $nzcv
6448B	  B %bb.24

6464B	bb.24.if.then61:
	; predecessors: %bb.22, %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

6480B	  %272:gpr32 = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
6496B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6512B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_29__Time_step, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step
6528B	  $w1 = COPY %272:gpr32
6544B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
6560B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6576B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6592B	  PCN_STACKMAP 25, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %272:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
6608B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6624B	bb.25.if.end63:
	; predecessors: %bb.23, %bb.24
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

6640B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6656B	  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
6672B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6688B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6704B	  PCN_STACKMAP 26, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.5.step, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
6720B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6736B	  %275:gpr32common = LDRWui %stack.5.step, 0 :: (dereferenceable load 4 from %ir.step)
6752B	  %276:gpr32common = nsw ADDWri %275:gpr32common, 1, 0
6768B	  STRWui %276:gpr32common, %stack.5.step, 0 :: (store 4 into %ir.step)
6784B	  B %bb.21

6800B	bb.26.for.end66:
	; predecessors: %bb.21
	  successors: %bb.27(0x50000000), %bb.28(0x30000000); %bb.27(62.50%), %bb.28(37.50%)

6816B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6848B	  $w0 = MOVi32imm 1
6864B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6880B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6896B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6912B	  PCN_STACKMAP 27, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
6928B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6944B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6960B	  $w0 = MOVi32imm 1
6976B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
6992B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
7008B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
7024B	  PCN_STACKMAP 28, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
7040B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
7088B	  %107:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
7092B	  %106:fpr64 = COPY $d0
7096B	  STRDui %106:fpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)
7104B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7168B	  $x1 = ADDXri %stack.12.Class, 0, 0
7184B	  $x2 = ADDXri %stack.11.verified, 0, 0
7192B	  $w0 = COPY %107:gpr32
7200B	  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit killed $x2, implicit-def $sp
7216B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
7232B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
7248B	  PCN_STACKMAP 29, 0, 0, %stack.12.Class, 0, 0, %stack.3.i, 0, 0, %stack.7.mflops, 0, 0, %stack.6.n3, 0, 0, %stack.4.niter, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, 0, %stack.11.verified, 0, %107:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
7264B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
7280B	  %110:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
7296B	  FCMPDri %110:fpr64, implicit-def $nzcv
7312B	  Bcc 0, %bb.28, implicit killed $nzcv
7328B	  B %bb.27

7344B	bb.27.if.then69:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

7360B	  %112:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
7520B	  %121:gpr64temp = ADRP target-flags(aarch64-page) %const.0
7536B	  %122:fpr64 = LDRDui %121:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
7600B	  %125:gpr64temp = ADRP target-flags(aarch64-page) %const.1
7616B	  %126:fpr64 = LDRDui %125:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
7664B	  %129:gpr64temp = ADRP target-flags(aarch64-page) %const.2
7680B	  %130:fpr64 = LDRDui %129:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
7728B	  %133:gpr64temp = ADRP target-flags(aarch64-page) %const.3
7936B	  %147:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
7944B	  %113:gpr32 = LDRWui %112:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
7952B	  %114:gpr32 = LDRWui %112:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
7960B	  %134:fpr64 = LDRDui %133:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
7968B	  %148:gpr64temp = ADRP target-flags(aarch64-page) %const.5
7976B	  %116:gpr32 = LDRWui %112:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
7984B	  %149:fpr64 = LDRDui %148:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
7992B	  %115:gpr32 = nsw MADDWrrr %113:gpr32, %114:gpr32, $wzr
8000B	  %118:gpr32 = nsw ADDWrr %113:gpr32, %114:gpr32
8008B	  %137:gpr64temp = ADRP target-flags(aarch64-page) %const.4
8016B	  %150:fpr64 = FMULDrr %147:fpr64, %149:fpr64
8024B	  %117:gpr32 = nsw MADDWrrr %115:gpr32, %116:gpr32, $wzr
8032B	  %119:gpr32 = nsw ADDWrr %118:gpr32, %116:gpr32
8040B	  %120:fpr64 = SCVTFUWDri %119:gpr32
8048B	  %123:fpr64 = FDIVDrr %120:fpr64, %122:fpr64
8056B	  %124:fpr64 = SCVTFUWDri %117:gpr32
8064B	  %127:fpr64 = FMULDrr %124:fpr64, %126:fpr64
8072B	  %128:fpr64 = FMULDrr %123:fpr64, %123:fpr64
8080B	  %131:fpr64 = FMULDrr %128:fpr64, %130:fpr64
8088B	  %138:fpr64 = LDRDui %137:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
8096B	  %132:fpr64 = FADDDrr %127:fpr64, %131:fpr64
8104B	  undef %141.ssub:fpr64 = LDRSui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
8112B	  %135:fpr64 = FMULDrr %123:fpr64, %134:fpr64
8120B	  %136:fpr64 = FADDDrr %132:fpr64, %135:fpr64
8128B	  %139:fpr64 = FADDDrr %136:fpr64, %138:fpr64
8136B	  %143:fpr128 = SSHLLv2i32_shift %141:fpr64, 0
8144B	  %145:fpr64 = SCVTFv1i64 %143.dsub:fpr128
8152B	  STRWui %117:gpr32, %stack.6.n3, 0 :: (store 4 into %ir.n3)
8160B	  %146:fpr64 = FMULDrr %139:fpr64, %145:fpr64
8168B	  %151:fpr64 = FDIVDrr %146:fpr64, %150:fpr64
8176B	  STRDui %123:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
8184B	  STRDui %151:fpr64, %293:gpr64sp, 37 :: (store 8 into %ir.mflops)
8192B	  B %bb.29

8200B	bb.28.if.else84:
	; predecessors: %bb.26
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

8216B	  STRXui $xzr, %293:gpr64sp, 37 :: (store 8 into %ir.mflops)

8224B	bb.29.if.end85:
	; predecessors: %bb.28, %bb.27
	  successors: %bb.30(0x50000000), %bb.44(0x30000000); %bb.30(62.50%), %bb.44(37.50%)

8232B	  %152:gpr32 = LDRSBWui %stack.12.Class, 0 :: (dereferenceable load 1 from %ir.Class, align 4)
8240B	  %153:gpr64common = MOVaddr target-flags(aarch64-page) @grid_points, target-flags(aarch64-pageoff, aarch64-nc) @grid_points
8272B	  %157:gpr32 = LDRWui %stack.4.niter, 0 :: (dereferenceable load 4 from %ir.niter)
8280B	  %158:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
8288B	  %159:fpr64 = LDRDui %293:gpr64sp, 37 :: (dereferenceable load 8 from %ir.mflops)
8292B	  %154:gpr32 = LDRWui %153:gpr64common, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
8296B	  %155:gpr32 = LDRWui %153:gpr64common, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
8304B	  %156:gpr32 = LDRWui %153:gpr64common, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
8312B	  %160:gpr32 = LDRWui %stack.11.verified, 0 :: (dereferenceable load 4 from %ir.verified)
8320B	  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp
8328B	  %161:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_40__none__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__
8352B	  %163:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_39__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_39__O3__mcmod
8368B	  %164:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_38__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_38__g__Wall__
8384B	  %165:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_37__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_37__I___commo
8416B	  %166:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_36__lm_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_36__lm_
8448B	  %167:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_35___CC__, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_35___CC__
8480B	  %168:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_34_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_34_gcc_
8512B	  %169:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_33_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_33_03_Nov_201
8520B	  STRXui %161:gpr64, $sp, 10 :: (store 8 into stack + 80)
8544B	  %170:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_32_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_32_3_3_1_
8576B	  STRWui %160:gpr32, $sp, 2 :: (store 4 into stack + 8)
8580B	  STRXui %164:gpr64, $sp, 8 :: (store 8 into stack + 64)
8584B	  STRXui %163:gpr64, $sp, 9 :: (store 8 into stack + 72)
8592B	  %171:gpr64 = MOVaddr target-flags(aarch64-page) @sp__str_31___________, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_31___________
8596B	  STRXui %166:gpr64, $sp, 6 :: (store 8 into stack + 48)
8600B	  STRXui %165:gpr64, $sp, 7 :: (store 8 into stack + 56)
8640B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_30_SP_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_30_SP_
8648B	  STRXui %168:gpr64, $sp, 4 :: (store 8 into stack + 32)
8656B	  STRXui %167:gpr64, $sp, 5 :: (store 8 into stack + 40)
8664B	  STRXui %170:gpr64, $sp, 2 :: (store 8 into stack + 16)
8672B	  STRXui %169:gpr64, $sp, 3 :: (store 8 into stack + 24)
8680B	  STRXui %171:gpr64, $sp, 0 :: (store 8 into stack)
8688B	  $w1 = COPY %152:gpr32
8696B	  $w2 = COPY %154:gpr32
8704B	  $w3 = COPY %155:gpr32
8712B	  $w4 = COPY %156:gpr32
8720B	  $w5 = COPY %157:gpr32
8736B	  $d0 = COPY %158:fpr64
8752B	  $d1 = COPY %159:fpr64
8768B	  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp
8784B	  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp
8800B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
8816B	  PCN_STACKMAP 30, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %152:gpr32, %154:gpr32, %155:gpr32, %156:gpr32, %157:gpr32, %158:fpr64, %159:fpr64, %160:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
8832B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
8848B	  %173:gpr64temp = ADRP target-flags(aarch64-page) @timeron
8864B	  %174:gpr32 = LDRWui %173:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
8880B	  CBZW %174:gpr32, %bb.44
8896B	  B %bb.30

8912B	bb.30.if.then86:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

8928B	  %175:gpr32 = MOVi32imm 1
8944B	  STRWui %175:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
8960B	  %255:gpr64sp = ADDXri %stack.10.trecs, 0, 0

8976B	bb.31.for.cond87:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

8992B	  %176:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9008B	  dead $wzr = SUBSWri %176:gpr32common, 15, 0, implicit-def $nzcv
9024B	  Bcc 12, %bb.33, implicit killed $nzcv
9040B	  B %bb.32

9056B	bb.32.for.body90:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

9072B	  %252:gpr32 = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9088B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9104B	  $w0 = COPY %252:gpr32
9120B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
9136B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
9152B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
9168B	  PCN_STACKMAP 31, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %252:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
9184B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9200B	  %253:fpr64 = COPY $d0
9216B	  %254:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9248B	  %256:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9256B	  STRDroX %253:fpr64, %255:gpr64sp, %254:gpr64, 0, 1 :: (store 8 into %ir.arrayidx92)
9264B	  %257:gpr32common = nsw ADDWri %256:gpr32common, 1, 0
9280B	  STRWui %257:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
9296B	  B %bb.31

9312B	bb.33.for.end95:
	; predecessors: %bb.31
	  successors: %bb.34(0x50000000), %bb.35(0x30000000); %bb.34(62.50%), %bb.35(37.50%)

9328B	  %178:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
9344B	  FCMPDri %178:fpr64, implicit-def $nzcv
9360B	  Bcc 1, %bb.35, implicit killed $nzcv
9376B	  B %bb.34

9392B	bb.34.if.then98:
	; predecessors: %bb.33
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

9408B	  %179:gpr64 = MOVi64imm 4607182418800017408
9424B	  STRXui %179:gpr64, %293:gpr64sp, 35 :: (store 8 into %ir.tmax)

9440B	bb.35.if.end99:
	; predecessors: %bb.33, %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

9456B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
9488B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_41___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_41___SECTION_
9504B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
9520B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
9536B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
9552B	  PCN_STACKMAP 32, 0, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
9568B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
9584B	  %182:gpr32 = MOVi32imm 1
9648B	  %192:gpr64temp = ADRP target-flags(aarch64-page) %const.6
9664B	  %193:fpr64 = LDRDui %192:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
9672B	  STRWui %182:gpr32, %stack.3.i, 0 :: (store 4 into %ir.i)
9680B	  %188:gpr64sp = ADDXri %stack.13.t_names, 0, 0
9688B	  %190:gpr64sp = ADDXri %stack.10.trecs, 0, 0

9776B	bb.36.for.cond101:
	; predecessors: %bb.35, %bb.43
	  successors: %bb.37(0x7c000000), %bb.44(0x04000000); %bb.37(96.88%), %bb.44(3.12%)

9792B	  %183:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9808B	  dead $wzr = SUBSWri %183:gpr32common, 15, 0, implicit-def $nzcv
9824B	  Bcc 12, %bb.44, implicit killed $nzcv
9840B	  B %bb.37

9856B	bb.37.for.body104:
	; predecessors: %bb.36
	  successors: %bb.38(0x40000000), %bb.39(0x40000000); %bb.38(50.00%), %bb.39(50.00%)

9872B	  %186:gpr64 = LDRSWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
9888B	  %187:gpr64 = UBFMXri %186:gpr64, 61, 60
9920B	  %191:fpr64 = LDRDroX %190:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx110)
9952B	  %195:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
9956B	  %189:gpr64 = LDRXroX %188:gpr64sp, %187:gpr64, 0, 0 :: (load 8 from %ir.arrayidx106)
9960B	  %194:fpr64 = FMULDrr %191:fpr64, %193:fpr64
9968B	  %196:fpr64 = FDIVDrr %194:fpr64, %195:fpr64
9984B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10000B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_42_____8s__9_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_
10016B	  $x1 = COPY %189:gpr64
10032B	  $d0 = COPY %191:fpr64
10048B	  $d1 = COPY %196:fpr64
10064B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
10080B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10096B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10112B	  PCN_STACKMAP 33, 0, %196:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %189:gpr64, %191:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
10128B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10144B	  %199:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
10160B	  dead $wzr = SUBSWri %199:gpr32common, 5, 0, implicit-def $nzcv
10176B	  Bcc 1, %bb.39, implicit killed $nzcv
10192B	  B %bb.38

10208B	bb.38.if.then116:
	; predecessors: %bb.37
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

10224B	  %229:fpr64 = LDRDui %293:gpr64sp, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16)
10240B	  %230:fpr64 = LDRDui %293:gpr64sp, 21 :: (dereferenceable load 8 from %ir.arrayidx118)
10272B	  %232:fpr64 = LDRDui %293:gpr64sp, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
10280B	  %231:fpr64 = FADDDrr %229:fpr64, %230:fpr64
10336B	  %237:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
10344B	  %233:fpr64 = FADDDrr %231:fpr64, %232:fpr64
10352B	  STRDui %233:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
10360B	  %236:fpr64 = FMULDrr %233:fpr64, %193:fpr64
10368B	  %238:fpr64 = FDIVDrr %236:fpr64, %237:fpr64
10376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10384B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
10400B	  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_44_sub_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_44_sub_rhs_
10416B	  $d0 = COPY %233:fpr64
10432B	  $d1 = COPY %238:fpr64
10448B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
10464B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10480B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10496B	  PCN_STACKMAP 34, 0, %238:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %233:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
10512B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10528B	  %242:fpr64 = LDRDui %293:gpr64sp, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
10544B	  %243:fpr64 = LDRDui %293:gpr64sp, 36 :: (dereferenceable load 8 from %ir.t)
10608B	  %246:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
10616B	  %244:fpr64 = FSUBDrr %242:fpr64, %243:fpr64
10624B	  STRDui %244:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
10632B	  %245:fpr64 = FMULDrr %244:fpr64, %193:fpr64
10640B	  %247:fpr64 = FDIVDrr %245:fpr64, %246:fpr64
10648B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10656B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
10672B	  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_45_rest_rhs_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_45_rest_rhs_
10688B	  $d0 = COPY %244:fpr64
10704B	  $d1 = COPY %247:fpr64
10720B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
10736B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10752B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10768B	  PCN_STACKMAP 35, 0, %247:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %244:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
10784B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10800B	  B %bb.43

10816B	bb.39.if.else130:
	; predecessors: %bb.37
	  successors: %bb.40(0x40000000), %bb.41(0x40000000); %bb.40(50.00%), %bb.41(50.00%)

10832B	  %201:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
10848B	  dead $wzr = SUBSWri %201:gpr32common, 8, 0, implicit-def $nzcv
10864B	  Bcc 1, %bb.41, implicit killed $nzcv
10880B	  B %bb.40

10896B	bb.40.if.then133:
	; predecessors: %bb.39
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

10912B	  %216:fpr64 = LDRDui %293:gpr64sp, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16)
10928B	  %217:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx135)
10960B	  %219:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
10968B	  %218:fpr64 = FSUBDrr %216:fpr64, %217:fpr64
11024B	  %224:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
11032B	  %220:fpr64 = FSUBDrr %218:fpr64, %219:fpr64
11040B	  STRDui %220:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
11048B	  %223:fpr64 = FMULDrr %220:fpr64, %193:fpr64
11056B	  %225:fpr64 = FDIVDrr %223:fpr64, %224:fpr64
11064B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11072B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
11088B	  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_46_sub_zsol_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_46_sub_zsol_
11104B	  $d0 = COPY %220:fpr64
11120B	  $d1 = COPY %225:fpr64
11136B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
11152B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
11168B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11184B	  PCN_STACKMAP 36, 0, %225:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %220:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
11200B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
11216B	  B %bb.43

11232B	bb.41.if.else142:
	; predecessors: %bb.39
	  successors: %bb.42(0x40000000), %bb.43(0x40000000); %bb.42(50.00%), %bb.43(50.00%)

11248B	  %203:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
11264B	  dead $wzr = SUBSWri %203:gpr32common, 10, 0, implicit-def $nzcv
11280B	  Bcc 1, %bb.43, implicit killed $nzcv
11296B	  B %bb.42

11312B	bb.42.if.then145:
	; predecessors: %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

11328B	  %205:fpr64 = LDRDui %293:gpr64sp, 27 :: (dereferenceable load 8 from %ir.arrayidx146)
11344B	  %206:fpr64 = LDRDui %293:gpr64sp, 28 :: (dereferenceable load 8 from %ir.arrayidx147, align 16)
11408B	  %211:fpr64 = LDRDui %293:gpr64sp, 35 :: (dereferenceable load 8 from %ir.tmax)
11416B	  %207:fpr64 = FADDDrr %205:fpr64, %206:fpr64
11424B	  STRDui %207:fpr64, %293:gpr64sp, 36 :: (store 8 into %ir.t)
11432B	  %210:fpr64 = FMULDrr %207:fpr64, %193:fpr64
11440B	  %212:fpr64 = FDIVDrr %210:fpr64, %211:fpr64
11448B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11456B	  $x0 = MOVaddr target-flags(aarch64-page) @sp__str_43__________8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8
11472B	  $x1 = MOVaddr target-flags(aarch64-page) @sp__str_47_redist_, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_47_redist_
11488B	  $d0 = COPY %207:fpr64
11504B	  $d1 = COPY %212:fpr64
11520B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8
11536B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
11552B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11568B	  PCN_STACKMAP 37, 0, %212:fpr64, 0, %stack.3.i, 0, 0, %stack.0.retval, 0, 0, %stack.8.t, 0, 0, %stack.13.t_names, 0, 0, %stack.9.tmax, 0, 0, %stack.10.trecs, 0, %207:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
11584B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

11600B	bb.43.for.inc155:
	; predecessors: %bb.41, %bb.42, %bb.40, %bb.38
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

11616B	  %250:gpr32common = LDRWui %stack.3.i, 0 :: (dereferenceable load 4 from %ir.i)
11632B	  %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
11648B	  STRWui %251:gpr32common, %stack.3.i, 0 :: (store 4 into %ir.i)
11664B	  B %bb.36

11680B	bb.44.if.end158:
	; predecessors: %bb.29, %bb.36
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

11712B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)

11728B	bb.45.return:
	; predecessors: %bb.44, %bb.13

11744B	  %292:gpr32 = LDRWui %stack.0.retval, 0 :: (dereferenceable load 4 from %ir.retval)
11760B	  $w8 = COPY %292:gpr32
11776B	  RET_ReallyLR implicit $w8

# End machine code for function main.

warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled register X19 across call to adi
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
warning: <unknown>:0:0: (x86_64-unknown-linux-gnu) Stack transformation: unhandled stack slot 16 across call to printf
Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-52]
  fi#1: size=4, align=4, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=4, align=4, at location [SP-68]
  fi#4: size=4, align=4, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-76]
  fi#6: size=4, align=4, at location [SP-80]
  fi#7: size=8, align=8, at location [SP-88]
  fi#8: size=8, align=8, at location [SP-96]
  fi#9: size=8, align=8, at location [SP-104]
  fi#10: size=128, align=16, at location [SP-240]
  fi#11: size=4, align=4, at location [SP-244]
  fi#12: size=1, align=4, at location [SP-248]
  fi#13: size=128, align=16, at location [SP-384]
  fi#14: size=8, align=8, at location [SP-392]
  fi#15: size=4, align=4, at location [SP-396]
  fi#16: size=8, align=8, at location [SP-408]
  fi#17: size=8, align=8, at location [SP-416]
  fi#18: size=8, align=8, at location [SP-424]
  fi#19: size=4, align=4, at location [SP-428]
  fi#20: size=8, align=8, at location [SP-440]
  fi#21: size=8, align=8, at location [SP-448]
  fi#22: dead
  fi#23: dead
  fi#24: dead
  fi#25: dead
  fi#26: dead
  fi#27: dead
  fi#28: dead
  fi#29: dead
  fi#30: dead
  fi#31: dead
  fi#32: dead
  fi#33: dead
  fi#34: dead
  fi#35: dead
  fi#36: size=8, align=8, at location [SP-40]
  fi#37: size=8, align=8, at location [SP-8]
  fi#38: size=8, align=8, at location [SP-16]
  fi#39: size=8, align=8, at location [SP-24]
  fi#40: size=8, align=8, at location [SP-32]
Constant Pool:
  cp#0: 3.000000e+00, align=8
  cp#1: 0x408B89645A1CAC08, align=8
  cp#2: -4.683910e+03, align=8
  cp#3: 1.148450e+04, align=8
  cp#4: -1.927240e+04, align=8
  cp#5: 1.000000e+06, align=8
  cp#6: 1.000000e+02, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x1, $x19, $x20, $lr
  early-clobber $sp = frame-setup STPXpre killed $x20, killed $x19, $sp(tied-def 0), -4 :: (store 8 into %stack.40), (store 8 into %stack.39)
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store 8 into %stack.38), (store 8 into %stack.37)
  $fp = frame-setup ADDXri $sp, 16, 0
  $sp = frame-setup SUBXri $sp, 512, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  $x20 = ADDXri $sp, 160, 0
  STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STRXui killed renamable $x1, renamable $x20, 40 :: (store 8 into %ir.argv.addr)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_timer_flag
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag, 0
  $x1 = ADRP target-flags(aarch64-page) @sp__str_1_r_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_, 0
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  PCN_STACKMAP 0, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  STRXui renamable $x8, $sp, 19 :: (store 8 into %ir.fp)
  CBZX killed renamable $x8, %bb.2

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x20
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  $w16 = MOVZWi 1, 0
  $x17 = ADRP target-flags(aarch64-page) @sp__str_2_total_
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_2_total_, 0
  $x18 = ADRP target-flags(aarch64-page) @sp__str_3_rhsx_
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_3_rhsx_, 0
  $x0 = ADRP target-flags(aarch64-page) @sp__str_4_rhsy_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_4_rhsy_, 0
  $x1 = ADRP target-flags(aarch64-page) @sp__str_5_rhsz_
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_5_rhsz_, 0
  $x2 = ADRP target-flags(aarch64-page) @sp__str_6_rhs_
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_6_rhs_, 0
  $x3 = ADRP target-flags(aarch64-page) @sp__str_7_xsolve_
  renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_7_xsolve_, 0
  $x4 = ADRP target-flags(aarch64-page) @sp__str_8_ysolve_
  renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_8_ysolve_, 0
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  $x8 = ADRP target-flags(aarch64-page) @sp__str_9_zsolve_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_9_zsolve_, 0
  $x16 = ADRP target-flags(aarch64-page) @sp__str_10_redist1_
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_10_redist1_, 0
  STPXi renamable $x17, renamable $x18, $sp, 21 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  $x17 = ADRP target-flags(aarch64-page) @sp__str_11_redist2_
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_11_redist2_, 0
  STPXi renamable $x0, renamable $x1, $sp, 23 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  $x18 = ADRP target-flags(aarch64-page) @sp__str_12_tzetar_
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_12_tzetar_, 0
  STPXi renamable $x2, renamable $x3, $sp, 25 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_13_ninvr_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_13_ninvr_, 0
  STPXi renamable $x4, renamable $x8, $sp, 27 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  $x8 = ADRP target-flags(aarch64-page) @sp__str_14_pinvr_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_14_pinvr_, 0
  STPXi renamable $x16, renamable $x17, $sp, 29 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  $x16 = ADRP target-flags(aarch64-page) @sp__str_15_txinvr_
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_15_txinvr_, 0
  STPXi renamable $x0, renamable $x18, $sp, 33 :: (store 8 into %ir.arrayidx10, align 16), (store 8 into %ir.arrayidx11)
  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  STPXi renamable $x16, renamable $x8, $sp, 31 :: (store 8 into %ir.arrayidx12, align 16), (store 8 into %ir.arrayidx13)
  $x8 = ADRP target-flags(aarch64-page) @sp__str_16_add_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_16_add_, 0
  STRXui killed renamable $x8, killed renamable $x20, 15 :: (store 8 into %ir.arrayidx14)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 1, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  B %bb.3

bb.2.if.else:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  STRWui $wzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

bb.3.if.end:
; predecessors: %bb.2, %bb.1
  successors: %bb.4(0x50000000), %bb.9(0x30000000); %bb.4(62.50%), %bb.9(37.50%)

  $x0 = ADRP target-flags(aarch64-page) @sp__str_17____NAS_Par
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_17____NAS_Par, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 2, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_18_inputsp_da
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da, 0
  $x1 = ADRP target-flags(aarch64-page) @sp__str_1_r_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_, 0
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  PCN_STACKMAP 3, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  STRXui renamable $x8, $sp, 19 :: (store 8 into %ir.fp)
  CBZX killed renamable $x8, %bb.9

bb.4.if.then19:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @sp__str_19__Reading_f
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_19__Reading_f, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 4, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @sp__str_20__d_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_20__d_, 0
  $x2 = SUBXri $fp, 56, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 5, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  STRWui killed renamable $w8, $sp, 37 :: (store 4 into %ir.result)

bb.5.while.cond:
; predecessors: %bb.4, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 6, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.5, implicit $nzcv

bb.6.while.end:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x1 = ADRP target-flags(aarch64-page) @sp__str_21__lf_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_21__lf_, 0
  $x2 = ADRP target-flags(aarch64-page) @dt
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 7, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  STRWui killed renamable $w8, $sp, 37 :: (store 4 into %ir.result)

bb.7.while.cond25:
; predecessors: %bb.6, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 8, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.7, implicit $nzcv

bb.8.while.end29:
; predecessors: %bb.7
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  $x1 = ADRP target-flags(aarch64-page) @sp__str_22__d_d_d_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_22__d_d_d_, 0
  renamable $x3 = nuw ADDXri renamable $x8, 4, 0
  renamable $x4 = nuw ADDXri killed renamable $x8, 8, 0
  $x2 = ADRP target-flags(aarch64-page) @grid_points
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w8
  PCN_STACKMAP 9, 0, 0, $fp, -232, 0, $fp, -376, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -380, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.14.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.15.result, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  STRWui killed renamable $w8, $sp, 37 :: (store 4 into %ir.result)
  $x0 = ORRXrs $xzr, $x19, 0
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 10, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  B %bb.10

bb.9.if.else32:
; predecessors: %bb.3
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @sp__str_23__No_input_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_23__No_input_, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 11, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  renamable $x8 = ADRP target-flags(aarch64-page) @dt
  $x16 = MOVZXi 43516, 0
  $x16 = MOVKXi $x16(tied-def 0), 54001, 16
  $x16 = MOVKXi $x16(tied-def 0), 25165, 32
  $x16 = MOVKXi $x16(tied-def 0), 16208, 48
  STRXui killed renamable $x16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  $w8 = MOVZWi 400, 0
  $x16 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  STURWi killed renamable $w8, $fp, -56 :: (store 4 into %ir.niter)
  $x8 = MOVZXi 102, 0
  $x8 = MOVKXi $x8(tied-def 0), 102, 32
  STRXui killed renamable $x8, renamable $x16, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  $w8 = MOVZWi 102, 0
  STRWui killed renamable $w8, killed renamable $x16, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

bb.10.if.end34:
; predecessors: %bb.9, %bb.8
  successors: %bb.13(0x10000000), %bb.11(0x70000000); %bb.13(12.50%), %bb.11(87.50%)

  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.16)
  renamable $w19 = LDRWui killed renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_24__Size___4d
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d, 0
  $w2 = ORRWrs $wzr, $w20, 0
  $w3 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 12, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, 1, 4, $fp, -392, killed renamable $w20, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4), (load 4 from %stack.16)
  renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  renamable $x8 = ADRP target-flags(aarch64-page) @dt
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  STRDui renamable $d0, $sp, 17 :: (store 8 into %stack.16)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_25__Iteration
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration, 0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 13, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $w19, 1, 8, $fp, -392, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4), (load 8 from %stack.16)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_26___
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_26___, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 14, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  $x16 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $w8 = LDRWui renamable $x16, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  dead $wzr = SUBSWri killed renamable $w8, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit $nzcv

bb.11.if.end34:
; predecessors: %bb.10
  successors: %bb.13(0x12492492), %bb.12(0x6db6db6e); %bb.13(14.29%), %bb.12(85.71%)
  liveins: $x16
  renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  dead $wzr = SUBSWri killed renamable $w8, 102, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit $nzcv

bb.12.if.end34:
; predecessors: %bb.11
  successors: %bb.13(0x2aaaaaab), %bb.15(0x55555555); %bb.13(33.33%), %bb.15(66.67%)
  liveins: $x16
  renamable $w8 = LDRWui killed renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  dead $wzr = SUBSWri killed renamable $w8, 103, 0, implicit-def $nzcv
  Bcc 11, %bb.15, implicit $nzcv

bb.13.if.then42:
; predecessors: %bb.10, %bb.11, %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.16)
  renamable $w19 = LDRWui killed renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_27___d___d___
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___, 0
  $w2 = ORRWrs $wzr, $w20, 0
  $w3 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 15, 0, 0, $fp, -36, 1, 4, $fp, -392, killed renamable $w20, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4), (load 4 from %stack.16)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_28__Problem_s
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_28__Problem_s, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 16, 0, 0, $fp, -36, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.0.retval, align 4)

bb.14.if.end158:
; predecessors: %bb.30, %bb.37, %bb.13

  STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
  $w8 = ORRWrs $wzr, $wzr, 0
  $sp = frame-destroy ADDXri $sp, 512, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.38), (load 8 from %stack.37)
  early-clobber $sp, $x20, $x19 = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load 8 from %stack.40), (load 8 from %stack.39)
  RET undef $lr, implicit $w8

bb.15.if.end45:
; predecessors: %bb.12
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $w16, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  renamable $x17 = ADRP target-flags(aarch64-page) @nx2
  renamable $w16 = SUBWri killed renamable $w16, 2, 0
  STRWui killed renamable $w16, killed renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  renamable $x16 = ADRP target-flags(aarch64-page) @ny2
  renamable $w8 = LDRWui killed renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  renamable $w17 = SUBWri killed renamable $w18, 2, 0
  STRWui killed renamable $w17, killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  renamable $x16 = ADRP target-flags(aarch64-page) @nz2
  renamable $w8 = SUBWri killed renamable $w8, 2, 0
  STRWui killed renamable $w8, killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  BL @set_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 17, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  $w8 = MOVZWi 1, 0

bb.16.for.cond:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)
  liveins: $w8
  STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.18, implicit $nzcv

bb.17.for.body:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 18, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.16

bb.18.for.end:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  BL @exact_rhs, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 19, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 20, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 21, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  BL @initialize, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 22, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  $w8 = MOVZWi 1, 0

bb.19.for.cond49:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)
  liveins: $w8
  STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  dead $wzr = SUBSWri killed renamable $w8, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.21, implicit $nzcv

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 23, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.19

bb.21.for.end54:
; predecessors: %bb.19
  successors: %bb.22(0x80000000); %bb.22(100.00%)

  $w0 = MOVZWi 1, 0
  $w19 = MOVZWi 1, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 24, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  STURWi killed renamable $w19, $fp, -60 :: (store 4 into %ir.step)
  $w19 = MOVZWi 26215, 0
  $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  $w20 = MOVZWi 20, 0

bb.22.for.cond55:
; predecessors: %bb.21, %bb.26
  successors: %bb.23(0x7c000000), %bb.27(0x04000000); %bb.23(96.88%), %bb.27(3.12%)
  liveins: $w20, $x19
  renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 12, %bb.27, implicit $nzcv

bb.23.for.body57:
; predecessors: %bb.22
  successors: %bb.25(0x20000000), %bb.24(0x60000000); %bb.25(25.00%), %bb.24(75.00%)
  liveins: $w20, $x19
  renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  renamable $x16 = MADDXrrr renamable $x8, renamable $x19, $xzr
  renamable $x17 = UBFMXri renamable $x16, 63, 63
  renamable $x16 = SBFMXri killed renamable $x16, 35, 63
  $w16 = ADDWrs renamable $w16, renamable $w17, 0, implicit killed $x17, implicit killed $x16
  renamable $w16 = MSUBWrrr killed renamable $w16, renamable $w20, renamable $w8
  CBZW killed renamable $w16, %bb.25

bb.24.for.body57:
; predecessors: %bb.23
  successors: %bb.25(0x2aaaaaab), %bb.26(0x55555555); %bb.25(33.33%), %bb.26(66.67%)
  liveins: $w20, $x8, $x19
  dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, implicit killed $x8
  Bcc 1, %bb.26, implicit $nzcv

bb.25.if.then61:
; predecessors: %bb.23, %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $w20
  renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_29__Time_step
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step, 0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 25, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  $w19 = MOVZWi 26215, 0
  $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19

bb.26.if.end63:
; predecessors: %bb.24, %bb.25
  successors: %bb.22(0x80000000); %bb.22(100.00%)
  liveins: $w20, $x19
  BL @adi, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 26, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -60, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.5.step, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -60 :: (store 4 into %ir.step)
  B %bb.22

bb.27.for.end66:
; predecessors: %bb.22
  successors: %bb.28(0x50000000), %bb.29(0x30000000); %bb.28(62.50%), %bb.29(37.50%)

  $w0 = MOVZWi 1, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 27, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  $w0 = MOVZWi 1, 0
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  PCN_STACKMAP 28, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  $x20 = ADDXri $sp, 160, 0
  STRDui killed renamable $d0, renamable $x20, 35 :: (store 8 into %ir.tmax)
  $x1 = SUBXri $fp, 232, 0
  $x2 = SUBXri $fp, 228, 0
  $w0 = ORRWrs $wzr, $w19, 0
  BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
  PCN_STACKMAP 29, 0, 0, $fp, -232, 0, $fp, -52, 0, $fp, -72, 0, $fp, -64, 0, $fp, -56, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 0, $fp, -228, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.12.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.7.mflops), (load 8 from %stack.6.n3, align 4), (load 8 from %stack.4.niter, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.11.verified, align 4)
  renamable $d0 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri killed renamable $d0, implicit-def $nzcv
  Bcc 0, %bb.29, implicit $nzcv

bb.28.if.then69:
; predecessors: %bb.27
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x20
  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.0
  renamable $d0 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  renamable $d1 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  renamable $x16 = ADRP target-flags(aarch64-page) %const.2
  renamable $d2 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  renamable $x16 = ADRP target-flags(aarch64-page) %const.3
  renamable $d3 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $w17, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  renamable $d4 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  renamable $w8 = LDRWui killed renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  renamable $d5 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  renamable $w16 = nsw MADDWrrr renamable $w17, renamable $w18, $wzr
  $w17 = ADDWrs killed renamable $w17, killed renamable $w18, 0
  renamable $x18 = ADRP target-flags(aarch64-page) %const.4
  renamable $d3 = FMULDrr killed renamable $d3, killed renamable $d5
  renamable $w16 = nsw MADDWrrr killed renamable $w16, renamable $w8, $wzr
  $w8 = ADDWrs killed renamable $w17, killed renamable $w8, 0
  renamable $d5 = SCVTFUWDri killed renamable $w8
  renamable $d0 = FDIVDrr killed renamable $d5, killed renamable $d0
  renamable $d5 = SCVTFUWDri renamable $w16
  renamable $d1 = FMULDrr killed renamable $d5, killed renamable $d1
  renamable $d5 = FMULDrr renamable $d0, renamable $d0
  renamable $d2 = FMULDrr killed renamable $d5, killed renamable $d2
  renamable $d5 = LDRDui killed renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  renamable $d1 = FADDDrr killed renamable $d1, killed renamable $d2
  renamable $s2 = LDURSi $fp, -56, implicit-def $d2 :: (dereferenceable load 4 from %ir.niter)
  renamable $d4 = FMULDrr renamable $d0, killed renamable $d4
  renamable $d1 = FADDDrr killed renamable $d1, killed renamable $d4
  renamable $d1 = FADDDrr killed renamable $d1, killed renamable $d5
  renamable $q2 = SSHLLv2i32_shift killed renamable $d2, 0
  renamable $d2 = SCVTFv1i64 renamable $d2, implicit killed $q2
  STURWi killed renamable $w16, $fp, -64 :: (store 4 into %ir.n3)
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d2
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d3
  STPDi renamable $d0, renamable $d1, renamable $x20, 36 :: (store 8 into %ir.t), (store 8 into %ir.mflops)
  B %bb.30

bb.29.if.else84:
; predecessors: %bb.27
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x20
  STRXui $xzr, renamable $x20, 37 :: (store 8 into %ir.mflops)

bb.30.if.end85:
; predecessors: %bb.29, %bb.28
  successors: %bb.31(0x50000000), %bb.14(0x30000000); %bb.31(62.50%), %bb.14(37.50%)
  liveins: $x20
  renamable $w1 = LDURSBWi $fp, -232 :: (dereferenceable load 1 from %ir.Class, align 4)
  STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.17)
  $x8 = ADRP target-flags(aarch64-page) @grid_points
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  renamable $w5 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  renamable $d0 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d1 = LDRDui killed renamable $x20, 37 :: (dereferenceable load 8 from %ir.mflops)
  STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  STPWi renamable $w3, renamable $w2, $sp, 29 :: (store 4 into %stack.18), (store 4 into %stack.19)
  renamable $w4 = LDRWui killed renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  renamable $w20 = LDURWi $fp, -228 :: (dereferenceable load 4 from %ir.verified)
  STRWui renamable $w20, $sp, 34 :: (store 4 into %stack.16)
  $x8 = ADRP target-flags(aarch64-page) @sp__str_40__none__
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__, 0
  $x16 = ADRP target-flags(aarch64-page) @sp__str_39__O3__mcmod
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_39__O3__mcmod, 0
  $x17 = ADRP target-flags(aarch64-page) @sp__str_38__g__Wall__
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_38__g__Wall__, 0
  $x18 = ADRP target-flags(aarch64-page) @sp__str_37__I___commo
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_37__I___commo, 0
  $x0 = ADRP target-flags(aarch64-page) @sp__str_36__lm_
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_36__lm_, 0
  $x19 = ADRP target-flags(aarch64-page) @sp__str_35___CC__
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_35___CC__, 0
  $x6 = ADRP target-flags(aarch64-page) @sp__str_34_gcc_
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_34_gcc_, 0
  $x7 = ADRP target-flags(aarch64-page) @sp__str_33_03_Nov_201
  renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_33_03_Nov_201, 0
  STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  $x8 = ADRP target-flags(aarch64-page) @sp__str_32_3_3_1_
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_32_3_3_1_, 0
  STRWui killed renamable $w20, $sp, 2 :: (store 4 into stack + 8)
  STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  $x16 = ADRP target-flags(aarch64-page) @sp__str_31___________
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_31___________, 0
  STPXi renamable $x19, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_30_SP_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_30_SP_, 0
  STPXi renamable $x7, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  STRXui killed renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  STRXui killed renamable $x16, $sp, 0 :: (store 8 into stack)
  $w20 = ORRWrs $wzr, $w4, 0
  $w19 = ORRWrs $wzr, $w5, 0
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
  PCN_STACKMAP 30, 0, 0, $fp, -52, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 1, 4, $fp, -400, 1, 4, $fp, -408, 1, 4, $fp, -412, killed renamable $w20, killed renamable $w19, 1, 8, $fp, -424, 1, 8, $fp, -432, 1, 4, $fp, -392, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 4 from %stack.16), (load 4 from %stack.17), (load 4 from %stack.18), (load 4 from %stack.19), (load 8 from %stack.20), (load 8 from %stack.21)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.14

bb.31.if.then86:
; predecessors: %bb.30
  successors: %bb.32(0x80000000); %bb.32(100.00%)

  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  $x20 = SUBXri $fp, 224, 0

bb.32.for.cond87:
; predecessors: %bb.31, %bb.33
  successors: %bb.33(0x7c000000), %bb.34(0x04000000); %bb.33(96.88%), %bb.34(3.12%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.34, implicit $nzcv

bb.33.for.body90:
; predecessors: %bb.32
  successors: %bb.32(0x80000000); %bb.32(100.00%)
  liveins: $x20
  renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  $w0 = ORRWrs $wzr, $w19, 0
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  PCN_STACKMAP 31, 0, 0, $fp, -52, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $w16 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  STRDroX killed renamable $d0, renamable $x20, killed renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx92)
  renamable $w8 = nsw ADDWri killed renamable $w16, 1, 0
  STURWi killed renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  B %bb.32

bb.34.for.end95:
; predecessors: %bb.32
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

  $x16 = ADDXri $sp, 160, 0
  renamable $d0 = LDRDui renamable $x16, 35 :: (dereferenceable load 8 from %ir.tmax)
  FCMPDri killed renamable $d0, implicit-def $nzcv
  Bcc 1, %bb.36, implicit $nzcv

bb.35.if.then98:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $x16
  $x8 = MOVZXi 16368, 48
  STRXui killed renamable $x8, killed renamable $x16, 35 :: (store 8 into %ir.tmax)

bb.36.if.end99:
; predecessors: %bb.34, %bb.35
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @sp__str_41___SECTION_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_41___SECTION_, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 32, 0, 0, $fp, -52, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16)
  $w8 = MOVZWi 1, 0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.6
  renamable $d1 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  STURWi killed renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  STRDui renamable $d1, $sp, 17 :: (store 8 into %stack.16)

bb.37.for.cond101:
; predecessors: %bb.36, %bb.44
  successors: %bb.38(0x7c000000), %bb.14(0x04000000); %bb.38(96.88%), %bb.14(3.12%)
  liveins: $d1
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 15, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit $nzcv

bb.38.for.body104:
; predecessors: %bb.37
  successors: %bb.39(0x40000000), %bb.40(0x40000000); %bb.39(50.00%), %bb.40(50.00%)
  liveins: $d1
  renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60
  $x16 = SUBXri $fp, 224, 0
  renamable $d0 = LDRDroX killed renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx110)
  $x20 = ADDXri $sp, 160, 0
  renamable $d2 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  $x16 = ADDXri $sp, 160, 0
  renamable $x19 = LDRXroX killed renamable $x16, killed renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2
  STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_42_____8s__9_
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_, 0
  $x1 = ORRXrs $xzr, $x19, 0
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 33, 0, 1, 8, $fp, -408, 0, $fp, -52, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, killed renamable $x19, 1, 8, $fp, -400, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.17), (load 8 from %stack.18)
  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 5, 0, implicit-def $nzcv
  Bcc 1, %bb.40, implicit $nzcv

bb.39.if.then116:
; predecessors: %bb.38
  successors: %bb.44(0x80000000); %bb.44(100.00%)
  liveins: $x20
  renamable $d0, renamable $d1 = LDPDi renamable $x20, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
  renamable $d2 = LDRDui renamable $x20, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d2 = FADDDrr killed renamable $d0, killed renamable $d2
  STRDui renamable $d2, renamable $x20, 36 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  renamable $d0 = FMULDrr renamable $d2, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d1
  STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  $x1 = ADRP target-flags(aarch64-page) @sp__str_44_sub_rhs_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_44_sub_rhs_, 0
  $q0 = ORRv16i8 $q2, killed $q2
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 34, 0, 1, 8, $fp, -408, 0, $fp, -52, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 1, 8, $fp, -400, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.17), (load 8 from %stack.18)
  renamable $d0 = LDRDui renamable $x20, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  renamable $d2, renamable $d1 = LDPDi renamable $x20, 35 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  renamable $d3 = FSUBDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d3, killed renamable $x20, 36 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  renamable $d0 = FMULDrr renamable $d3, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d2
  STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  $x1 = ADRP target-flags(aarch64-page) @sp__str_45_rest_rhs_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_45_rest_rhs_, 0
  $q0 = ORRv16i8 $q3, killed $q3
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 35, 0, 1, 8, $fp, -408, 0, $fp, -52, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 1, 8, $fp, -400, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.17), (load 8 from %stack.18)
  B %bb.44

bb.40.if.else130:
; predecessors: %bb.38
  successors: %bb.41(0x40000000), %bb.42(0x40000000); %bb.41(50.00%), %bb.42(50.00%)

  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 8, 0, implicit-def $nzcv
  Bcc 1, %bb.42, implicit $nzcv

bb.41.if.then133:
; predecessors: %bb.40
  successors: %bb.44(0x80000000); %bb.44(100.00%)

  $x8 = ADDXri $sp, 160, 0
  renamable $d0, renamable $d1 = LDPDi renamable $x8, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16), (dereferenceable load 8 from %ir.arrayidx135)
  renamable $d2 = LDRDui renamable $x8, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui renamable $x8, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d2 = FSUBDrr killed renamable $d0, killed renamable $d2
  STRDui renamable $d2, killed renamable $x8, 36 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  renamable $d0 = FMULDrr renamable $d2, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d1
  STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  $x1 = ADRP target-flags(aarch64-page) @sp__str_46_sub_zsol_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_46_sub_zsol_, 0
  $q0 = ORRv16i8 $q2, killed $q2
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 36, 0, 1, 8, $fp, -408, 0, $fp, -52, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 1, 8, $fp, -400, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.17), (load 8 from %stack.18)
  B %bb.44

bb.42.if.else142:
; predecessors: %bb.40
  successors: %bb.43(0x40000000), %bb.44(0x40000000); %bb.43(50.00%), %bb.44(50.00%)

  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 10, 0, implicit-def $nzcv
  Bcc 1, %bb.44, implicit $nzcv

bb.43.if.then145:
; predecessors: %bb.42
  successors: %bb.44(0x80000000); %bb.44(100.00%)

  $x8 = ADDXri $sp, 160, 0
  renamable $d0, renamable $d1 = LDPDi renamable $x8, 27 :: (dereferenceable load 8 from %ir.arrayidx146), (dereferenceable load 8 from %ir.arrayidx147, align 16)
  renamable $d2 = LDRDui renamable $x8, 35 :: (dereferenceable load 8 from %ir.tmax)
  renamable $d3 = FADDDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d3, killed renamable $x8, 36 :: (store 8 into %ir.t)
  renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  renamable $d0 = FMULDrr renamable $d3, killed renamable $d0
  renamable $d1 = FDIVDrr killed renamable $d0, killed renamable $d2
  STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  $x1 = ADRP target-flags(aarch64-page) @sp__str_47_redist_
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_47_redist_, 0
  $q0 = ORRv16i8 $q3, killed $q3
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  PCN_STACKMAP 37, 0, 1, 8, $fp, -408, 0, $fp, -52, 0, $fp, -36, 0, $fp, -80, 0, $fp, -368, 0, $fp, -88, 0, $fp, -224, 1, 8, $fp, -400, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.0.retval, align 4), (load 8 from %stack.8.t), (load 8 from %stack.13.t_names, align 16), (load 8 from %stack.9.tmax), (load 8 from %stack.10.trecs, align 16), (load 8 from %stack.17), (load 8 from %stack.18)

bb.44.for.inc155:
; predecessors: %bb.42, %bb.43, %bb.41, %bb.39
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STURWi killed renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  renamable $d1 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  B %bb.37

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: $x20 = ADDXri $sp, 160, 0
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   $x20 = ADDXri $sp, 160, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1 Reg=$x20
SU(1):   STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Anti Latency=0
SU(2):   STRXui renamable $x1, renamable $x20, 40 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=1 Reg=$x20
  Successors:
    SU(5): Anti Latency=0
SU(3):   $x0 = ADRP target-flags(aarch64-page) @sp__str_timer_flag
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(1): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x1 = ADRP target-flags(aarch64-page) @sp__str_1_r_
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Anti Latency=0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x20 = ADDXri $sp, 160, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STRXui renamable $x1, renamable $x20, 40 :: (store 8 into %ir.argv.addr)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @sp__str_timer_flag
  Ready @3c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x1 = ADRP target-flags(aarch64-page) @sp__str_1_r_
  Ready @4c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 3
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_, 0
  Ready @6c
  TopQ.A TopLatency SU(6) 2c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $x20 = ADDXri $sp, 160, 0
SU(1):   STPWi renamable $w0, $wzr, $fp, -10 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(2):   STRXui renamable $x1, renamable $x20, 40 :: (store 8 into %ir.argv.addr)
SU(3):   $x0 = ADRP target-flags(aarch64-page) @sp__str_timer_flag
SU(5):   $x1 = ADRP target-flags(aarch64-page) @sp__str_1_r_
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_timer_flag, 0
SU(6):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_, 0

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store 8 into %stack.38), (store 8 into %stack.37)
    To: $sp = frame-setup SUBXri $sp, 512, 0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $fp, $lr, $sp, 2 :: (store 8 into %stack.38), (store 8 into %stack.37)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Anti Latency=0
SU(1):   $fp = frame-setup ADDXri $sp, 16, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Anti Latency=0
ExitSU:   $sp = frame-setup SUBXri $sp, 512, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) frame-setup STPXi $fp, $lr, $sp, 2 :: (store 8 into %stack.38), (store 8 into %stack.37)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $fp = frame-setup ADDXri $sp, 16, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $fp, $lr, $sp, 2 :: (store 8 into %stack.38), (store 8 into %stack.37)
SU(1):   $fp = frame-setup ADDXri $sp, 16, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 if.then
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 43
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x8
SU(1):   $w16 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(19): Out  Latency=1
    SU(16): Data Latency=1 Reg=$w16
SU(2):   $x17 = ADRP target-flags(aarch64-page) @sp__str_2_total_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_2_total_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x17
  Successors:
    SU(22): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x17
SU(4):   $x18 = ADRP target-flags(aarch64-page) @sp__str_3_rhsx_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x18
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_3_rhsx_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
  Successors:
    SU(25): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x18
SU(6):   $x0 = ADRP target-flags(aarch64-page) @sp__str_4_rhsy_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_4_rhsy_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    SU(28): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x0
SU(8):   $x1 = ADRP target-flags(aarch64-page) @sp__str_5_rhsz_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
SU(9):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_5_rhsz_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
  Successors:
    SU(24): Data Latency=1 Reg=$x1
SU(10):   $x2 = ADRP target-flags(aarch64-page) @sp__str_6_rhs_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x2
SU(11):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_6_rhs_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x2
  Successors:
    SU(27): Data Latency=1 Reg=$x2
SU(12):   $x3 = ADRP target-flags(aarch64-page) @sp__str_7_xsolve_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x3
SU(13):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_7_xsolve_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x3
  Successors:
    SU(27): Data Latency=1 Reg=$x3
SU(14):   $x4 = ADRP target-flags(aarch64-page) @sp__str_8_ysolve_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x4
SU(15):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_8_ysolve_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x4
  Successors:
    SU(30): Data Latency=1 Reg=$x4
SU(16):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(19): Anti Latency=0
    SU(17): Anti Latency=0
SU(17):   $x8 = ADRP target-flags(aarch64-page) @sp__str_9_zsolve_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(16): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x8
SU(18):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_9_zsolve_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x8
  Successors:
    SU(31): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x8
SU(19):   $x16 = ADRP target-flags(aarch64-page) @sp__str_10_redist1_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(16): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x16
SU(20):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_10_redist1_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x16
  Successors:
    SU(34): Out  Latency=1
    SU(33): Data Latency=1 Reg=$x16
SU(21):   STPXi renamable $x17, renamable $x18, $sp, 21 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=$x18
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    SU(22): Anti Latency=0
    SU(25): Anti Latency=0
    SU(41): Ord  Latency=0 Memory
SU(22):   $x17 = ADRP target-flags(aarch64-page) @sp__str_11_redist2_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(21): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x17
SU(23):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_11_redist2_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 5
  Predecessors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x17
  Successors:
    SU(33): Data Latency=1 Reg=$x17
SU(24):   STPXi renamable $x0, renamable $x1, $sp, 23 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(9): Data Latency=1 Reg=$x1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    SU(28): Anti Latency=0
    SU(41): Ord  Latency=0 Memory
SU(25):   $x18 = ADRP target-flags(aarch64-page) @sp__str_12_tzetar_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(21): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x18
SU(26):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_12_tzetar_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x18
  Successors:
    SU(36): Data Latency=1 Reg=$x18
SU(27):   STPXi renamable $x2, renamable $x3, $sp, 25 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=$x3
    SU(11): Data Latency=1 Reg=$x2
  Successors:
    SU(41): Ord  Latency=0 Memory
SU(28):   $x0 = ADRP target-flags(aarch64-page) @sp__str_13_ninvr_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(24): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x0
SU(29):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_13_ninvr_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x0
  Successors:
    SU(42): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x0
SU(30):   STPXi renamable $x4, renamable $x8, $sp, 27 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 4
  Predecessors:
    SU(18): Data Latency=1 Reg=$x8
    SU(15): Data Latency=1 Reg=$x4
  Successors:
    SU(31): Anti Latency=0
    SU(41): Ord  Latency=0 Memory
SU(31):   $x8 = ADRP target-flags(aarch64-page) @sp__str_14_pinvr_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 4
  Predecessors:
    SU(30): Anti Latency=0
    SU(18): Out  Latency=1
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x8
SU(32):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_14_pinvr_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x8
  Successors:
    SU(39): Out  Latency=1
    SU(38): Data Latency=1 Reg=$x8
SU(33):   STPXi renamable $x16, renamable $x17, $sp, 29 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(23): Data Latency=1 Reg=$x17
    SU(20): Data Latency=1 Reg=$x16
  Successors:
    SU(34): Anti Latency=0
    SU(41): Ord  Latency=0 Memory
SU(34):   $x16 = ADRP target-flags(aarch64-page) @sp__str_15_txinvr_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(33): Anti Latency=0
    SU(20): Out  Latency=1
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x16
SU(35):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_15_txinvr_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x16
  Successors:
    SU(38): Data Latency=1 Reg=$x16
SU(36):   STPXi renamable $x0, renamable $x18, $sp, 33 :: (store 8 into %ir.arrayidx10, align 16), (store 8 into %ir.arrayidx11)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(29): Data Latency=1 Reg=$x0
    SU(26): Data Latency=1 Reg=$x18
  Successors:
    SU(42): Anti Latency=0
    SU(41): Ord  Latency=0 Memory
SU(37):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(42): Data Latency=4 Reg=$x19
SU(38):   STPXi renamable $x16, renamable $x8, $sp, 31 :: (store 8 into %ir.arrayidx12, align 16), (store 8 into %ir.arrayidx13)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(35): Data Latency=1 Reg=$x16
    SU(32): Data Latency=1 Reg=$x8
  Successors:
    SU(39): Anti Latency=0
    SU(41): Ord  Latency=0 Memory
SU(39):   $x8 = ADRP target-flags(aarch64-page) @sp__str_16_add_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(38): Anti Latency=0
    SU(32): Out  Latency=1
  Successors:
    SU(40): Out  Latency=1
    SU(40): Data Latency=1 Reg=$x8
SU(40):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_16_add_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$x8
  Successors:
    SU(41): Data Latency=1 Reg=$x8
SU(41):   STRXui renamable $x8, renamable $x20, 15 :: (store 8 into %ir.arrayidx14)
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(40): Data Latency=1 Reg=$x8
    SU(38): Ord  Latency=0 Memory
    SU(36): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(30): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(24): Ord  Latency=0 Memory
    SU(21): Ord  Latency=0 Memory
SU(42):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(37): Data Latency=4 Reg=$x19
    SU(36): Anti Latency=0
    SU(29): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(42): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 8 10 12 14 37 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x17 = ADRP target-flags(aarch64-page) @sp__str_2_total_
  Ready @0c
  TopQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 37 4 6 8 10 12 14 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x18 = ADRP target-flags(aarch64-page) @sp__str_3_rhsx_
  Ready @1c
  TopQ.A BotLatency SU(4) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 37 3 6 8 10 12 14 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 37 3 6 8 10 12 14 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) $w16 = MOVZWi 1, 0
  Ready @3c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 14 37 3 6 8 10 12 16 
  TopQ.A RemainingLatency 0 + 4c > CritPath 8
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_2_total_, 0
  Ready @4c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 14 37 16 6 8 10 12 
  TopQ.A RemainingLatency 0 + 5c > CritPath 8
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_3_rhsx_, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 37 16 6 8 10 21 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(14) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x4 = ADRP target-flags(aarch64-page) @sp__str_8_ysolve_
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 21 37 16 6 8 10 15 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(21) TOP-PATH                  6 cycles 
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @7c
  TopQ.A BotLatency SU(16) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 21 37 15 6 8 10 19 17 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(21) TOP-PATH                  6 cycles 
  Cand SU(19) ORDER                              
  Cand SU(17) ORDER                              
Pick Top ORDER     
Scheduling SU(17) $x8 = ADRP target-flags(aarch64-page) @sp__str_9_zsolve_
  Ready @8c
  TopQ.A BotLatency SU(17) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 21 37 15 6 8 10 19 18 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(21) TOP-PATH                  6 cycles 
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) $x16 = ADRP target-flags(aarch64-page) @sp__str_10_redist1_
  Ready @9c
  TopQ.A BotLatency SU(19) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 21 37 15 6 8 10 18 20 
  TopQ.A RemainingLatency 0 + 10c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(21) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) STPXi renamable $x17, renamable $x18, $sp, 21 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
  Ready @10c
  TopQ.A TopLatency SU(21) 2c
  TopQ.A BotLatency SU(21) 6c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 20 37 15 6 8 10 18 22 25 
  TopQ.A RemainingLatency 0 + 11c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(20) TOP-PATH                  5 cycles 
  Cand SU(15) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(22) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) $x17 = ADRP target-flags(aarch64-page) @sp__str_11_redist2_
  Ready @11c
  TopQ.A BotLatency SU(22) 6c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 20 37 15 6 8 10 18 25 23 
  TopQ.A RemainingLatency 0 + 12c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(20) TOP-PATH                  5 cycles 
  Cand SU(15) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @sp__str_4_rhsy_
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 20 37 15 23 8 10 18 25 7 
  TopQ.A RemainingLatency 0 + 13c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(20) TOP-PATH                  5 cycles 
  Cand SU(15) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADRP target-flags(aarch64-page) @sp__str_5_rhsz_
  Ready @13c
  TopQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 20 37 15 23 7 10 18 25 9 
  TopQ.A RemainingLatency 0 + 14c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(20) TOP-PATH                  5 cycles 
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_8_ysolve_, 0
  Ready @14c
  TopQ.A BotLatency SU(15) 5c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 20 37 9 23 7 10 18 25 
  TopQ.A RemainingLatency 0 + 15c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(20) TOP-PATH                  5 cycles 
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_9_zsolve_, 0
  Ready @15c
  TopQ.A BotLatency SU(18) 5c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 20 37 9 23 7 10 25 30 
  TopQ.A RemainingLatency 0 + 16c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(20) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_10_redist1_, 0
  Ready @16c
  TopQ.A BotLatency SU(20) 5c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 30 37 9 23 7 10 25 
  TopQ.A RemainingLatency 0 + 17c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(37) TOP-PATH                  5 cycles 
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_11_redist2_, 0
  Ready @17c
  TopQ.A TopLatency SU(23) 3c
  TopQ.A BotLatency SU(23) 5c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 30 37 9 25 7 10 33 
  TopQ.A RemainingLatency 0 + 18c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(37) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @18c
  TopQ.A BotLatency SU(37) 5c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 30 33 9 25 7 10 
  TopQ.A RemainingLatency 0 + 19c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_4_rhsy_, 0
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 30 33 9 25 10 
  TopQ.A RemainingLatency 0 + 20c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_5_rhsz_, 0
  Ready @20c
  TopQ.A BotLatency SU(9) 4c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 30 33 10 25 24 
  TopQ.A RemainingLatency 0 + 21c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(30) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(30) STPXi renamable $x4, renamable $x8, $sp, 27 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
  Ready @21c
  TopQ.A BotLatency SU(30) 4c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 24 33 10 25 31 
  TopQ.A RemainingLatency 0 + 22c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
  Cand SU(33) TOP-PATH                  4 cycles 
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) $x8 = ADRP target-flags(aarch64-page) @sp__str_14_pinvr_
  Ready @22c
  TopQ.A BotLatency SU(31) 4c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 24 33 10 25 32 
  TopQ.A RemainingLatency 0 + 23c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
  Cand SU(33) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(33) STPXi renamable $x16, renamable $x17, $sp, 29 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
  Ready @23c
  TopQ.A TopLatency SU(33) 4c
  TopQ.A BotLatency SU(33) 4c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 24 32 10 25 34 
  TopQ.A RemainingLatency 0 + 24c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
  Cand SU(34) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(34) $x16 = ADRP target-flags(aarch64-page) @sp__str_15_txinvr_
  Ready @24c
  TopQ.A BotLatency SU(34) 4c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 24 32 10 25 35 
  TopQ.A RemainingLatency 0 + 25c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) STPXi renamable $x0, renamable $x1, $sp, 23 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 35 32 10 25 28 
  TopQ.A RemainingLatency 0 + 26c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(35) TOP-PATH                  3 cycles 
  Cand SU(32) ORDER                              
  Cand SU(25) ORDER                              
Pick Top ORDER     
Scheduling SU(25) $x18 = ADRP target-flags(aarch64-page) @sp__str_12_tzetar_
  Ready @26c
  TopQ.A BotLatency SU(25) 3c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 35 32 10 28 26 
  TopQ.A RemainingLatency 0 + 27c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(35) TOP-PATH                  3 cycles 
  Cand SU(32) ORDER                              
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) $x0 = ADRP target-flags(aarch64-page) @sp__str_13_ninvr_
  Ready @27c
  TopQ.A BotLatency SU(28) 3c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 35 32 10 26 29 
  TopQ.A RemainingLatency 0 + 28c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(35) TOP-PATH                  3 cycles 
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_14_pinvr_, 0
  Ready @28c
  TopQ.A BotLatency SU(32) 3c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 35 29 10 26 
  TopQ.A RemainingLatency 0 + 29c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(35) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_15_txinvr_, 0
  Ready @29c
  TopQ.A TopLatency SU(35) 5c
  TopQ.A BotLatency SU(35) 3c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 26 29 10 38 
  TopQ.A RemainingLatency 0 + 30c > CritPath 8
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x2 = ADRP target-flags(aarch64-page) @sp__str_6_rhs_
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 26 29 38 11 
  TopQ.A RemainingLatency 0 + 31c > CritPath 8
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x3 = ADRP target-flags(aarch64-page) @sp__str_7_xsolve_
  Ready @31c
  TopQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 26 29 38 13 
  TopQ.A RemainingLatency 0 + 32c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(26) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(26) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_12_tzetar_, 0
  Ready @32c
  TopQ.A BotLatency SU(26) 2c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 29 38 
  TopQ.A RemainingLatency 0 + 33c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(29) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(29) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_13_ninvr_, 0
  Ready @33c
  TopQ.A BotLatency SU(29) 2c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 38 36 
  TopQ.A RemainingLatency 0 + 34c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(38) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) STPXi renamable $x16, renamable $x8, $sp, 31 :: (store 8 into %ir.arrayidx12, align 16), (store 8 into %ir.arrayidx13)
  Ready @34c
  TopQ.A TopLatency SU(38) 6c
  TopQ.A BotLatency SU(38) 2c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 36 39 
  TopQ.A RemainingLatency 0 + 35c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(39) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(39) $x8 = ADRP target-flags(aarch64-page) @sp__str_16_add_
  Ready @35c
  TopQ.A BotLatency SU(39) 2c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 36 40 
  TopQ.A RemainingLatency 0 + 36c > CritPath 8
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_6_rhs_, 0
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 13 36 
  TopQ.A RemainingLatency 0 + 37c > CritPath 8
  Cand SU(40) ORDER                              
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_7_xsolve_, 0
  Ready @37c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 36 27 
  TopQ.A RemainingLatency 0 + 38c > CritPath 8
  Cand SU(40) ORDER                              
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) STPXi renamable $x0, renamable $x18, $sp, 33 :: (store 8 into %ir.arrayidx10, align 16), (store 8 into %ir.arrayidx11)
  Ready @38c
  TopQ.A BotLatency SU(36) 1c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 27 42 
  TopQ.A RemainingLatency 0 + 39c > CritPath 8
  Cand SU(40) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(40) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_16_add_, 0
  Ready @39c
  TopQ.A TopLatency SU(40) 7c
  TopQ.A BotLatency SU(40) 1c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 42 27 
  TopQ.A RemainingLatency 0 + 40c > CritPath 8
  Cand SU(42) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(42) $x0 = ORRXrs $xzr, $x19, 0
  Ready @40c
  TopQ.A BotLatency SU(42) 1c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 
Pick Top ONLY1     
Scheduling SU(27) STPXi renamable $x2, renamable $x3, $sp, 25 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 
Pick Top ONLY1     
Scheduling SU(41) STRXui renamable $x8, renamable $x20, 15 :: (store 8 into %ir.arrayidx14)
  Ready @42c
  TopQ.A TopLatency SU(41) 8c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(2):   $x17 = ADRP target-flags(aarch64-page) @sp__str_2_total_
SU(4):   $x18 = ADRP target-flags(aarch64-page) @sp__str_3_rhsx_
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   $w16 = MOVZWi 1, 0
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_2_total_, 0
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_3_rhsx_, 0
SU(14):   $x4 = ADRP target-flags(aarch64-page) @sp__str_8_ysolve_
SU(16):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
SU(17):   $x8 = ADRP target-flags(aarch64-page) @sp__str_9_zsolve_
SU(19):   $x16 = ADRP target-flags(aarch64-page) @sp__str_10_redist1_
SU(21):   STPXi renamable $x17, renamable $x18, $sp, 21 :: (store 8 into %ir.arrayidx1, align 16), (store 8 into %ir.arrayidx)
SU(22):   $x17 = ADRP target-flags(aarch64-page) @sp__str_11_redist2_
SU(6):   $x0 = ADRP target-flags(aarch64-page) @sp__str_4_rhsy_
SU(8):   $x1 = ADRP target-flags(aarch64-page) @sp__str_5_rhsz_
SU(15):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_8_ysolve_, 0
SU(18):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_9_zsolve_, 0
SU(20):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_10_redist1_, 0
SU(23):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_11_redist2_, 0
SU(37):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(7):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_4_rhsy_, 0
SU(9):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_5_rhsz_, 0
SU(30):   STPXi renamable $x4, renamable $x8, $sp, 27 :: (store 8 into %ir.arrayidx7, align 16), (store 8 into %ir.arrayidx6)
SU(31):   $x8 = ADRP target-flags(aarch64-page) @sp__str_14_pinvr_
SU(33):   STPXi renamable $x16, renamable $x17, $sp, 29 :: (store 8 into %ir.arrayidx9, align 16), (store 8 into %ir.arrayidx8)
SU(34):   $x16 = ADRP target-flags(aarch64-page) @sp__str_15_txinvr_
SU(24):   STPXi renamable $x0, renamable $x1, $sp, 23 :: (store 8 into %ir.arrayidx3, align 16), (store 8 into %ir.arrayidx2)
SU(25):   $x18 = ADRP target-flags(aarch64-page) @sp__str_12_tzetar_
SU(28):   $x0 = ADRP target-flags(aarch64-page) @sp__str_13_ninvr_
SU(32):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_14_pinvr_, 0
SU(35):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_15_txinvr_, 0
SU(10):   $x2 = ADRP target-flags(aarch64-page) @sp__str_6_rhs_
SU(12):   $x3 = ADRP target-flags(aarch64-page) @sp__str_7_xsolve_
SU(26):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_12_tzetar_, 0
SU(29):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_13_ninvr_, 0
SU(38):   STPXi renamable $x16, renamable $x8, $sp, 31 :: (store 8 into %ir.arrayidx12, align 16), (store 8 into %ir.arrayidx13)
SU(39):   $x8 = ADRP target-flags(aarch64-page) @sp__str_16_add_
SU(11):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_6_rhs_, 0
SU(13):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_7_xsolve_, 0
SU(36):   STPXi renamable $x0, renamable $x18, $sp, 33 :: (store 8 into %ir.arrayidx10, align 16), (store 8 into %ir.arrayidx11)
SU(40):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_16_add_, 0
SU(42):   $x0 = ORRXrs $xzr, $x19, 0
SU(27):   STPXi renamable $x2, renamable $x3, $sp, 25 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx4)
SU(41):   STRXui renamable $x8, renamable $x20, 15 :: (store 8 into %ir.arrayidx14)

Fixup kills for %bb.1
********** MI Scheduling **********
main:%bb.2 if.else
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (store 4 into @timeron)

Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @sp__str_18_inputsp_da
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_18_inputsp_da
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @sp__str_1_r_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @sp__str_18_inputsp_da
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @sp__str_1_r_
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_18_inputsp_da
SU(2):   $x1 = ADRP target-flags(aarch64-page) @sp__str_1_r_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_18_inputsp_da, 0
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_1_r_, 0

********** MI Scheduling **********
main:%bb.3 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @sp__str_17____NAS_Par
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_17____NAS_Par
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_17____NAS_Par, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @sp__str_17____NAS_Par
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_17____NAS_Par, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_17____NAS_Par
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_17____NAS_Par, 0

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then19
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$x19
SU(1):   $x1 = ADRP target-flags(aarch64-page) @sp__str_20__d_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_20__d_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = SUBXri $fp, 56, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @sp__str_20__d_
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_20__d_, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x2 = SUBXri $fp, 56, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @sp__str_20__d_
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_20__d_, 0
SU(3):   $x2 = SUBXri $fp, 56, 0
SU(4):   $x0 = ORRXrs $xzr, $x19, 0

********** MI Scheduling **********
main:%bb.4 if.then19
  From: $x0 = ADRP target-flags(aarch64-page) @sp__str_19__Reading_f
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_19__Reading_f
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_19__Reading_f, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @sp__str_19__Reading_f
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_19__Reading_f, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_19__Reading_f
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_19__Reading_f, 0

Fixup kills for %bb.4
********** MI Scheduling **********
main:%bb.5 while.cond
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$x19
SU(1):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 while.end
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$x19
SU(1):   $x1 = ADRP target-flags(aarch64-page) @sp__str_21__lf_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_21__lf_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x2 = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x2
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit-def $sp, implicit-def $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x1 = ADRP target-flags(aarch64-page) @sp__str_21__lf_
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x2 = ADRP target-flags(aarch64-page) @dt
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_21__lf_, 0
  Ready @3c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ORRXrs $xzr, $x19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x1 = ADRP target-flags(aarch64-page) @sp__str_21__lf_
SU(3):   $x2 = ADRP target-flags(aarch64-page) @dt
SU(2):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_21__lf_, 0
SU(4):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @dt, 0
SU(5):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 while.cond25
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$x19
SU(1):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fgetc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 while.end29
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$x19
SU(1):   STRWui renamable $w8, $sp, 37 :: (store 4 into %ir.result)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w8, $sp, 37 :: (store 4 into %ir.result)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   STRWui renamable $w8, $sp, 37 :: (store 4 into %ir.result)
SU(2):   $x0 = ORRXrs $xzr, $x19, 0

********** MI Scheduling **********
main:%bb.8 while.end29
  From: renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
    To: BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w8
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=$x19
SU(1):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$x8
    SU(5): Data Latency=1 Reg=$x8
SU(3):   $x1 = ADRP target-flags(aarch64-page) @sp__str_22__d_d_d_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
SU(4):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_22__d_d_d_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   renamable $x3 = nuw ADDXri renamable $x8, 4, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   renamable $x4 = nuw ADDXri renamable $x8, 8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x2 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x2
SU(8):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fscanf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit-def $sp, implicit-def $w8
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 7 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 7 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 7 3 6 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x1 = ADRP target-flags(aarch64-page) @sp__str_22__d_d_d_
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 6 4 9 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x2 = ADRP target-flags(aarch64-page) @grid_points
  Ready @4c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 6 4 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_22__d_d_d_, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 5 6 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x3 = nuw ADDXri renamable $x8, 4, 0
  Ready @6c
  TopQ.A TopLatency SU(5) 2c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x4 = nuw ADDXri renamable $x8, 8, 0
  Ready @7c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @8c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) $x0 = ORRXrs $xzr, $x19, 0
  Ready @9c
  TopQ.A TopLatency SU(9) 4c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x19 = LDRXui $sp, 19 :: (dereferenceable load 8 from %ir.fp)
SU(1):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(3):   $x1 = ADRP target-flags(aarch64-page) @sp__str_22__d_d_d_
SU(7):   $x2 = ADRP target-flags(aarch64-page) @grid_points
SU(4):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_22__d_d_d_, 0
SU(5):   renamable $x3 = nuw ADDXri renamable $x8, 4, 0
SU(6):   renamable $x4 = nuw ADDXri renamable $x8, 8, 0
SU(8):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(9):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 if.else32
  From: renamable $x8 = ADRP target-flags(aarch64-page) @dt
    To: End RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Out  Latency=1
    SU(10): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(1):   $x16 = MOVZXi 43516, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   $x16 = MOVKXi $x16(tied-def 0), 54001, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   $x16 = MOVKXi $x16(tied-def 0), 25165, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
SU(4):   $x16 = MOVKXi $x16(tied-def 0), 16208, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 5
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    SU(7): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
SU(5):   STRXui renamable $x16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=$x16
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Anti Latency=0
    SU(6): Anti Latency=0
    SU(10): Anti Latency=0
SU(6):   $w8 = MOVZWi 400, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(5): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$w8
SU(7):   $x16 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x16
SU(8):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
  Successors:
    SU(14): Data Latency=1 Reg=$x16
    SU(12): Data Latency=1 Reg=$x16
SU(9):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.niter)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(6): Data Latency=1 Reg=$w8
  Successors:
    SU(10): Anti Latency=0
SU(10):   $x8 = MOVZXi 102, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(9): Anti Latency=0
    SU(6): Out  Latency=1
    SU(5): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
SU(11):   $x8 = MOVKXi $x8(tied-def 0), 102, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
SU(12):   STRXui renamable $x8, renamable $x16, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(11): Data Latency=1 Reg=$x8
    SU(8): Data Latency=1 Reg=$x16
  Successors:
    SU(13): Anti Latency=0
SU(13):   $w8 = MOVZWi 102, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    SU(14): Data Latency=1 Reg=$w8
SU(14):   STRWui renamable $w8, renamable $x16, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(13): Data Latency=1 Reg=$w8
    SU(8): Data Latency=1 Reg=$x16
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x16 = MOVZXi 43516, 0
  Ready @0c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = MOVKXi $x16(tied-def 0), 54001, 16
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x16 = MOVKXi $x16(tied-def 0), 25165, 32
  Ready @2c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @dt
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x16 = MOVKXi $x16(tied-def 0), 16208, 48
  Ready @4c
  TopQ.A TopLatency SU(4) 3c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRXui renamable $x16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(7) ORDER                              
  Cand SU(6) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $w8 = MOVZWi 400, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 9 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x16 = ADRP target-flags(aarch64-page) @grid_points
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.niter)
  Ready @8c
  TopQ.A TopLatency SU(9) 5c
  TopQ.A BotLatency SU(9) 3c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(8) ORDER                              
  Cand SU(10) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x8 = MOVZXi 102, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 3c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 8
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $x8 = MOVKXi $x8(tied-def 0), 102, 32
  Ready @11c
  TopQ.A TopLatency SU(11) 6c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRXui renamable $x8, renamable $x16, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
  Ready @12c
  TopQ.A TopLatency SU(12) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) $w8 = MOVZWi 102, 0
  Ready @13c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STRWui renamable $w8, renamable $x16, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @14c
  TopQ.A TopLatency SU(14) 8c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(1):   $x16 = MOVZXi 43516, 0
SU(2):   $x16 = MOVKXi $x16(tied-def 0), 54001, 16
SU(3):   $x16 = MOVKXi $x16(tied-def 0), 25165, 32
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @dt
SU(4):   $x16 = MOVKXi $x16(tied-def 0), 16208, 48
SU(5):   STRXui renamable $x16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (store 8 into @dt)
SU(6):   $w8 = MOVZWi 400, 0
SU(7):   $x16 = ADRP target-flags(aarch64-page) @grid_points
SU(9):   STURWi renamable $w8, $fp, -56 :: (store 4 into %ir.niter)
SU(10):   $x8 = MOVZXi 102, 0
SU(8):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(11):   $x8 = MOVKXi $x8(tied-def 0), 102, 32
SU(12):   STRXui renamable $x8, renamable $x16, 0 :: (store 8 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`, align 4)
SU(13):   $w8 = MOVZWi 102, 0
SU(14):   STRWui renamable $w8, renamable $x16, 2 :: (store 4 into `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)

********** MI Scheduling **********
main:%bb.9 if.else32
  From: $x0 = ADRP target-flags(aarch64-page) @sp__str_23__No_input_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_23__No_input_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_23__No_input_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @sp__str_23__No_input_
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_23__No_input_, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_23__No_input_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_23__No_input_, 0

Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 if.end34
  From: $x16 = ADRP target-flags(aarch64-page) @grid_points
    To: Bcc 12, %bb.13, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x16 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
SU(1):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w8 = LDRWui renamable $x16, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(3):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x16 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWui renamable $x16, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x16 = ADRP target-flags(aarch64-page) @grid_points
SU(1):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(2):   renamable $w8 = LDRWui renamable $x16, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`)
SU(3):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.10 if.end34
  From: $x0 = ADRP target-flags(aarch64-page) @sp__str_26___
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_26___
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_26___, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @sp__str_26___
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_26___, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_26___
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_26___, 0

********** MI Scheduling **********
main:%bb.10 if.end34
  From: renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=$w19
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @dt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$d0
SU(3):   STRDui renamable $d0, $sp, 17 :: (store 8 into %stack.16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
SU(4):   $x0 = ADRP target-flags(aarch64-page) @sp__str_25__Iteration
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @dt
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @sp__str_25__Iteration
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $w1 = ORRWrs $wzr, $w19, 0
  Ready @5c
  TopQ.A TopLatency SU(6) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDui renamable $d0, $sp, 17 :: (store 8 into %stack.16)
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @dt
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dt :: (dereferenceable load 8 from @dt)
SU(4):   $x0 = ADRP target-flags(aarch64-page) @sp__str_25__Iteration
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_25__Iteration, 0
SU(6):   $w1 = ORRWrs $wzr, $w19, 0
SU(3):   STRDui renamable $d0, $sp, 17 :: (store 8 into %stack.16)

********** MI Scheduling **********
main:%bb.10 if.end34
  From: $x8 = ADRP target-flags(aarch64-page) @grid_points
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w1
    SU(7): Data Latency=4 Reg=$w20
SU(3):   STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w1
SU(4):   renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Data Latency=4 Reg=$w19
SU(5):   $x0 = ADRP target-flags(aarch64-page) @sp__str_24__Size___4d
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $w2 = ORRWrs $wzr, $w20, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $w3 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 8 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @sp__str_24__Size___4d
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 8 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w2 = ORRWrs $wzr, $w20, 0
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $w3 = ORRWrs $wzr, $w19, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.16)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(2):   renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(4):   renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(5):   $x0 = ADRP target-flags(aarch64-page) @sp__str_24__Size___4d
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_24__Size___4d, 0
SU(7):   $w2 = ORRWrs $wzr, $w20, 0
SU(8):   $w3 = ORRWrs $wzr, $w19, 0
SU(3):   STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.16)

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 if.end34
  From: renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
    To: Bcc 12, %bb.13, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w8 = LDRWui renamable $x16, 1 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(1):   dead $wzr = SUBSWri renamable $w8, 102, 0, implicit-def $nzcv

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 if.end34
  From: renamable $w8 = LDRWui killed renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
    To: Bcc 11, %bb.15, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 103, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 11, %bb.15, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 103, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $w8 = LDRWui renamable $x16, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(1):   dead $wzr = SUBSWri renamable $w8, 103, 0, implicit-def $nzcv

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 if.then42
  From: $x0 = ADRP target-flags(aarch64-page) @sp__str_28__Problem_s
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_28__Problem_s
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_28__Problem_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @sp__str_28__Problem_s
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_28__Problem_s, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_28__Problem_s
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_28__Problem_s, 0

********** MI Scheduling **********
main:%bb.13 if.then42
  From: $x8 = ADRP target-flags(aarch64-page) @grid_points
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w1
    SU(7): Data Latency=4 Reg=$w20
SU(3):   STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w1
SU(4):   renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Data Latency=4 Reg=$w19
SU(5):   $x0 = ADRP target-flags(aarch64-page) @sp__str_27___d___d___
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $w2 = ORRWrs $wzr, $w20, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $w3 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 8 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @sp__str_27___d___d___
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 7 8 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w2 = ORRWrs $wzr, $w20, 0
  Ready @6c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(3) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $w3 = ORRWrs $wzr, $w19, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.16)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(2):   renamable $w1, renamable $w20 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(4):   renamable $w19 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(5):   $x0 = ADRP target-flags(aarch64-page) @sp__str_27___d___d___
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_27___d___d___, 0
SU(7):   $w2 = ORRWrs $wzr, $w20, 0
SU(8):   $w3 = ORRWrs $wzr, $w19, 0
SU(3):   STRWui renamable $w1, $sp, 34 :: (store 4 into %stack.16)

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 if.end158
  From: STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
    To: $sp = frame-destroy ADDXri $sp, 512, 0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = ORRWrs $wzr, $wzr, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   $sp = frame-destroy ADDXri $sp, 512, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, $wzr, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   STURWi $wzr, $fp, -36 :: (store 4 into %ir.retval)
SU(1):   $w8 = ORRWrs $wzr, $wzr, 0

Fixup kills for %bb.14
********** MI Scheduling **********
main:%bb.15 if.end45
  From: $x8 = ADRP target-flags(aarch64-page) @grid_points
    To: BL @set_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w16, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(6): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w16
    SU(8): Data Latency=4 Reg=$w18
    SU(7): Anti Latency=0
SU(3):   renamable $x17 = ADRP target-flags(aarch64-page) @nx2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(8): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
SU(4):   renamable $w16 = SUBWri renamable $w16, 2, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 3
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w16
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w16
    SU(6): Anti Latency=0
SU(5):   STRWui renamable $w16, renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=$w16
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    SU(6): Anti Latency=0
    SU(8): Anti Latency=0
SU(6):   renamable $x16 = ADRP target-flags(aarch64-page) @ny2
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x16
SU(7):   renamable $w8 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w8
SU(8):   renamable $w17 = SUBWri renamable $w18, 2, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w18
  Successors:
    SU(9): Data Latency=1 Reg=$w17
SU(9):   STRWui renamable $w17, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=$w17
    SU(6): Data Latency=1 Reg=$x16
  Successors:
    SU(10): Anti Latency=0
SU(10):   renamable $x16 = ADRP target-flags(aarch64-page) @nz2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(9): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(12): Data Latency=1 Reg=$x16
SU(11):   renamable $w8 = SUBWri renamable $w8, 2, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
  Successors:
    SU(12): Data Latency=1 Reg=$w8
SU(12):   STRWui renamable $w8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$x16
    SU(11): Data Latency=1 Reg=$w8
ExitSU:   BL @set_constants, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w16, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 9
  Cand SU(3) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $w8 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 11 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x17 = ADRP target-flags(aarch64-page) @nx2
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 11 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w16 = SUBWri renamable $w16, 2, 0
  Ready @6c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 9
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) STRWui renamable $w16, renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
  Ready @7c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 6 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x16 = ADRP target-flags(aarch64-page) @ny2
  Ready @8c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 8 
  TopQ.A RemainingLatency 0 + 9c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w17 = SUBWri renamable $w18, 2, 0
  Ready @9c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STRWui renamable $w17, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
  Ready @10c
  TopQ.A TopLatency SU(9) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 10 
  TopQ.A RemainingLatency 0 + 11c > CritPath 9
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x16 = ADRP target-flags(aarch64-page) @nz2
  Ready @11c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $w8 = SUBWri renamable $w8, 2, 0
  Ready @12c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWui renamable $w8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)
  Ready @13c
  TopQ.A TopLatency SU(12) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(2):   renamable $w16, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(7):   renamable $w8 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(3):   renamable $x17 = ADRP target-flags(aarch64-page) @nx2
SU(4):   renamable $w16 = SUBWri renamable $w16, 2, 0
SU(5):   STRWui renamable $w16, renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @nx2 :: (store 4 into @nx2)
SU(6):   renamable $x16 = ADRP target-flags(aarch64-page) @ny2
SU(8):   renamable $w17 = SUBWri renamable $w18, 2, 0
SU(9):   STRWui renamable $w17, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @ny2 :: (store 4 into @ny2)
SU(10):   renamable $x16 = ADRP target-flags(aarch64-page) @nz2
SU(11):   renamable $w8 = SUBWri renamable $w8, 2, 0
SU(12):   STRWui renamable $w8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nz2 :: (store 4 into @nz2)

Fixup kills for %bb.15
********** MI Scheduling **********
main:%bb.16 for.cond
  From: STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.18, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.18, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv

Fixup kills for %bb.16
********** MI Scheduling **********
main:%bb.17 for.body
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.16
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

********** MI Scheduling **********
main:%bb.17 for.body
  From: renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.17
Fixup kills for %bb.18
********** MI Scheduling **********
main:%bb.19 for.cond49
  From: STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
    To: Bcc 12, %bb.21, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.21, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(2):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv

Fixup kills for %bb.19
********** MI Scheduling **********
main:%bb.20 for.body51
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.19
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

********** MI Scheduling **********
main:%bb.20 for.body51
  From: renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.20
********** MI Scheduling **********
main:%bb.21 for.end54
  From: STURWi killed renamable $w19, $fp, -60 :: (store 4 into %ir.step)
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w19, $fp, -60 :: (store 4 into %ir.step)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
    SU(2): Anti Latency=0
SU(1):   $w19 = MOVZWi 26215, 0
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w19
SU(2):   $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$w19
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w20 = MOVZWi 20, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) STURWi renamable $w19, $fp, -60 :: (store 4 into %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w19 = MOVZWi 26215, 0
  Ready @1c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w20 = MOVZWi 20, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   STURWi renamable $w19, $fp, -60 :: (store 4 into %ir.step)
SU(1):   $w19 = MOVZWi 26215, 0
SU(2):   $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
SU(3):   $w20 = MOVZWi 20, 0

********** MI Scheduling **********
main:%bb.21 for.end54
  From: $w0 = MOVZWi 1, 0
    To: BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w0 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w19 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w0 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w19 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   $w0 = MOVZWi 1, 0
SU(1):   $w19 = MOVZWi 1, 0

Fixup kills for %bb.21
********** MI Scheduling **********
main:%bb.22 for.cond55
  From: renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
    To: Bcc 12, %bb.27, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w16
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.27, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $w8, renamable $w16 = LDPWi $fp, -15 :: (dereferenceable load 4 from %ir.step), (dereferenceable load 4 from %ir.niter)
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 for.body57
  From: renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
    To: CBZW killed renamable $w16, %bb.25
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Data Latency=4 Reg=$w8
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = MADDXrrr renamable $x8, renamable $x19, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $x17 = UBFMXri renamable $x16, 63, 63
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(4): Data Latency=1 Reg=$w17
    SU(4): Data Latency=0 Reg=$x17
    SU(3): Anti Latency=0
SU(3):   renamable $x16 = SBFMXri renamable $x16, 35, 63
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w16
    SU(4): Data Latency=0 Reg=$x16
SU(4):   $w16 = ADDWrs renamable $w16, renamable $w17, 0, implicit $x17, implicit $x16
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w16
    SU(3): Data Latency=0 Reg=$x16
    SU(2): Data Latency=1 Reg=$w17
    SU(2): Data Latency=0 Reg=$x17
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w16
SU(5):   renamable $w16 = MSUBWrrr renamable $w16, renamable $w20, renamable $w8
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   CBZW killed renamable $w16, %bb.25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = MADDXrrr renamable $x8, renamable $x19, $xzr
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x17 = UBFMXri renamable $x16, 63, 63
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x16 = SBFMXri renamable $x16, 35, 63
  Ready @6c
  TopQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w16 = ADDWrs renamable $w16, renamable $w17, 0, implicit $x17, implicit $x16
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w16 = MSUBWrrr renamable $w16, renamable $w20, renamable $w8
  Ready @8c
  TopQ.A TopLatency SU(5) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $x8 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
SU(1):   renamable $x16 = MADDXrrr renamable $x8, renamable $x19, $xzr
SU(2):   renamable $x17 = UBFMXri renamable $x16, 63, 63
SU(3):   renamable $x16 = SBFMXri renamable $x16, 35, 63
SU(4):   $w16 = ADDWrs renamable $w16, renamable $w17, 0, implicit $x17, implicit $x16
SU(5):   renamable $w16 = MSUBWrrr renamable $w16, renamable $w20, renamable $w8

Fixup kills for %bb.23
Fixup kills for %bb.24
********** MI Scheduling **********
main:%bb.25 if.then61
  From: $w19 = MOVZWi 26215, 0
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w19 = MOVZWi 26215, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$w19
SU(1):   $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w19 = MOVZWi 26215, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   $w19 = MOVZWi 26215, 0
SU(1):   $w19 = MOVKWi $w19(tied-def 0), 26214, 16, implicit-def $x19

********** MI Scheduling **********
main:%bb.25 if.then61
  From: renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w19
SU(1):   $x0 = ADRP target-flags(aarch64-page) @sp__str_29__Time_step
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @sp__str_29__Time_step
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w1 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w19 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
SU(1):   $x0 = ADRP target-flags(aarch64-page) @sp__str_29__Time_step
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_29__Time_step, 0
SU(3):   $w1 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 if.end63
  From: renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
    To: B %bb.22
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -60 :: (store 4 into %ir.step)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.22
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -60 :: (store 4 into %ir.step)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $w8 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.step)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -60 :: (store 4 into %ir.step)

Fixup kills for %bb.26
********** MI Scheduling **********
main:%bb.27 for.end66
  From: renamable $d0 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
    To: Bcc 0, %bb.29, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.29, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $d0 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.27 for.end66
  From: renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
    To: BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w19
SU(1):   $x20 = ADDXri $sp, 160, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=$x20
SU(2):   STRDui renamable $d0, renamable $x20, 35 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x20
SU(3):   $x1 = SUBXri $fp, 232, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x2 = SUBXri $fp, 228, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @verify, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x20 = ADDXri $sp, 160, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x1 = SUBXri $fp, 232, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x2 = SUBXri $fp, 228, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, renamable $x20, 35 :: (store 8 into %ir.tmax)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $w19 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
SU(1):   $x20 = ADDXri $sp, 160, 0
SU(3):   $x1 = SUBXri $fp, 232, 0
SU(4):   $x2 = SUBXri $fp, 228, 0
SU(5):   $w0 = ORRWrs $wzr, $w19, 0
SU(2):   STRDui renamable $d0, renamable $x20, 35 :: (store 8 into %ir.tmax)

Fixup kills for %bb.27
********** MI Scheduling **********
main:%bb.28 if.then69
  From: $x8 = ADRP target-flags(aarch64-page) @grid_points
    To: B %bb.30
 RegionInstrs: 39
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 20
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 19
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
    SU(10): Data Latency=1 Reg=$x8
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 20
  Predecessors:
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=4 Reg=$d0
    SU(4): Anti Latency=0
SU(4):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 20
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
SU(5):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 19
  Predecessors:
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=4 Reg=$d1
    SU(6): Anti Latency=0
SU(6):   renamable $x16 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 19
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
SU(7):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 3
  Height             : 18
  Predecessors:
    SU(6): Data Latency=1 Reg=$x16
  Successors:
    SU(26): Out  Latency=1
    SU(33): Out  Latency=1
    SU(26): Data Latency=4 Reg=$d2
    SU(8): Anti Latency=0
SU(8):   renamable $x16 = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 18
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(12): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x16
SU(9):   renamable $d3 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=4 Reg=$d3
SU(10):   renamable $w17, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 18
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=4 Reg=$w17
    SU(15): Data Latency=4 Reg=$w17
    SU(17): Out  Latency=1
    SU(16): Data Latency=4 Reg=$w18
    SU(15): Data Latency=4 Reg=$w18
    SU(13): Anti Latency=0
SU(11):   renamable $d4 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(8): Data Latency=1 Reg=$x16
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=4 Reg=$d4
    SU(12): Anti Latency=0
SU(12):   renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(11): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x16
SU(13):   renamable $w8 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 17
  Predecessors:
    SU(10): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=4 Reg=$w8
    SU(19): Data Latency=4 Reg=$w8
SU(14):   renamable $d5 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(12): Data Latency=1 Reg=$x16
  Successors:
    SU(21): Out  Latency=1
    SU(18): Data Latency=4 Reg=$d5
    SU(15): Anti Latency=0
SU(15):   renamable $w16 = nsw MADDWrrr renamable $w17, renamable $w18, $wzr
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(14): Anti Latency=0
    SU(12): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w17
    SU(10): Data Latency=4 Reg=$w18
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$w16
    SU(16): Anti Latency=0
    SU(17): Anti Latency=0
SU(16):   $w17 = ADDWrs renamable $w17, renamable $w18, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 14
  Predecessors:
    SU(15): Anti Latency=0
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w17
    SU(10): Data Latency=4 Reg=$w18
  Successors:
    SU(20): Data Latency=1 Reg=$w17
    SU(17): Anti Latency=0
SU(17):   renamable $x18 = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(16): Anti Latency=0
    SU(15): Anti Latency=0
    SU(10): Out  Latency=1
  Successors:
    SU(27): Data Latency=1 Reg=$x18
SU(18):   renamable $d3 = FMULDrr renamable $d3, renamable $d5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 12
  Predecessors:
    SU(14): Data Latency=4 Reg=$d5
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$d3
  Successors:
    SU(37): Data Latency=1 Reg=$d3
    SU(21): Anti Latency=0
SU(19):   renamable $w16 = nsw MADDWrrr renamable $w16, renamable $w8, $wzr
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$w16
    SU(13): Data Latency=4 Reg=$w8
  Successors:
    SU(35): Data Latency=1 Reg=$w16
    SU(23): Data Latency=1 Reg=$w16
    SU(20): Anti Latency=0
SU(20):   $w8 = ADDWrs renamable $w17, renamable $w8, 0
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 13
  Predecessors:
    SU(19): Anti Latency=0
    SU(16): Data Latency=1 Reg=$w17
    SU(13): Out  Latency=1
    SU(13): Data Latency=4 Reg=$w8
  Successors:
    SU(21): Data Latency=1 Reg=$w8
SU(21):   renamable $d5 = SCVTFUWDri renamable $w8
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 12
  Predecessors:
    SU(20): Data Latency=1 Reg=$w8
    SU(18): Anti Latency=0
    SU(14): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(22): Data Latency=1 Reg=$d5
SU(22):   renamable $d0 = FDIVDrr renamable $d5, renamable $d0
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 11
  Predecessors:
    SU(21): Data Latency=1 Reg=$d5
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(38): Data Latency=1 Reg=$d0
    SU(30): Data Latency=1 Reg=$d0
    SU(25): Data Latency=1 Reg=$d0
    SU(23): Anti Latency=0
SU(23):   renamable $d5 = SCVTFUWDri renamable $w16
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 11
  Predecessors:
    SU(22): Anti Latency=0
    SU(21): Out  Latency=1
    SU(19): Data Latency=1 Reg=$w16
  Successors:
    SU(25): Out  Latency=1
    SU(24): Data Latency=1 Reg=$d5
SU(24):   renamable $d1 = FMULDrr renamable $d5, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 10
  Predecessors:
    SU(23): Data Latency=1 Reg=$d5
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
  Successors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$d1
    SU(25): Anti Latency=0
SU(25):   renamable $d5 = FMULDrr renamable $d0, renamable $d0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 10
  Predecessors:
    SU(24): Anti Latency=0
    SU(23): Out  Latency=1
    SU(22): Data Latency=1 Reg=$d0
  Successors:
    SU(27): Out  Latency=1
    SU(26): Data Latency=1 Reg=$d5
SU(26):   renamable $d2 = FMULDrr renamable $d5, renamable $d2
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 9
  Predecessors:
    SU(25): Data Latency=1 Reg=$d5
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d2
  Successors:
    SU(29): Out  Latency=1
    SU(33): Out  Latency=1
    SU(28): Data Latency=1 Reg=$d2
    SU(27): Anti Latency=0
    SU(33): Anti Latency=0
SU(27):   renamable $d5 = LDRDui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 7
  Predecessors:
    SU(26): Anti Latency=0
    SU(25): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x18
  Successors:
    SU(32): Data Latency=4 Reg=$d5
SU(28):   renamable $d1 = FADDDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(26): Data Latency=1 Reg=$d2
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$d1
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$d1
    SU(29): Anti Latency=0
    SU(33): Anti Latency=0
SU(29):   renamable $s2 = LDURSi $fp, -56, implicit-def $d2 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(28): Anti Latency=0
    SU(26): Out  Latency=1
  Successors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=4 Reg=$d2
SU(30):   renamable $d4 = FMULDrr renamable $d0, renamable $d4
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(22): Data Latency=1 Reg=$d0
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$d4
  Successors:
    SU(31): Data Latency=1 Reg=$d4
SU(31):   renamable $d1 = FADDDrr renamable $d1, renamable $d4
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 4
  Predecessors:
    SU(28): Data Latency=1 Reg=$d1
    SU(28): Out  Latency=1
    SU(30): Data Latency=1 Reg=$d4
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$d1
SU(32):   renamable $d1 = FADDDrr renamable $d1, renamable $d5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 3
  Predecessors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$d1
    SU(27): Data Latency=4 Reg=$d5
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$d1
SU(33):   renamable $q2 = SSHLLv2i32_shift renamable $d2, 0
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 4
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=4 Reg=$d2
    SU(28): Anti Latency=0
    SU(26): Out  Latency=1
    SU(26): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$d2
    SU(34): Data Latency=0 Reg=$q2
SU(34):   renamable $d2 = SCVTFv1i64 renamable $d2, implicit $q2
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 3
  Predecessors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$d2
    SU(33): Data Latency=0 Reg=$q2
  Successors:
    SU(36): Data Latency=1 Reg=$d2
SU(35):   STURWi renamable $w16, $fp, -64 :: (store 4 into %ir.n3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$w16
SU(36):   renamable $d1 = FMULDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 2
  Predecessors:
    SU(34): Data Latency=1 Reg=$d2
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$d1
  Successors:
    SU(37): Out  Latency=1
    SU(37): Data Latency=1 Reg=$d1
SU(37):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 1
  Predecessors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$d1
    SU(18): Data Latency=1 Reg=$d3
  Successors:
    SU(38): Data Latency=1 Reg=$d1
SU(38):   STPDi renamable $d0, renamable $d1, renamable $x20, 36 :: (store 8 into %ir.t), (store 8 into %ir.mflops)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(37): Data Latency=1 Reg=$d1
    SU(22): Data Latency=1 Reg=$d0
ExitSU:   B %bb.30
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 21
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 21
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x16 = ADRP target-flags(aarch64-page) %const.0
  Ready @0c
  TopQ.A BotLatency SU(2) 21c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 21
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 9 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 21
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 20c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 9 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 21
  Cand SU(1) ORDER                              
  Cand SU(4) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x16 = ADRP target-flags(aarch64-page) %const.1
  Ready @3c
  TopQ.A BotLatency SU(4) 20c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 9 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 21
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 10 
  TopQ.A RemainingLatency 0 + 5c > CritPath 21
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @5c
  TopQ.A TopLatency SU(5) 2c
  TopQ.A BotLatency SU(5) 19c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 21
  Cand SU(10) ORDER                              
  Cand SU(6) TOP-PATH                  19 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x16 = ADRP target-flags(aarch64-page) %const.2
  Ready @6c
  TopQ.A BotLatency SU(6) 19c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 21
  Cand SU(10) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @7c
  TopQ.A TopLatency SU(7) 3c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 21
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x16 = ADRP target-flags(aarch64-page) %const.3
  Ready @8c
  TopQ.A BotLatency SU(8) 18c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 11 
  TopQ.A RemainingLatency 0 + 9c > CritPath 21
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $w17, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @9c
  TopQ.A BotLatency SU(10) 18c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 13 
  TopQ.A RemainingLatency 0 + 10c > CritPath 21
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) renamable $d4 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @10c
  TopQ.A TopLatency SU(11) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 21
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  Ready @11c
  TopQ.A BotLatency SU(12) 17c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 9 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 21
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) renamable $w8 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @12c
  TopQ.A BotLatency SU(13) 17c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 9 
  TopQ.A RemainingLatency 0 + 13c > CritPath 21
  Cand SU(14) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $d3 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $d5 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  Ready @14c
  TopQ.A TopLatency SU(14) 5c
  TopQ.A BotLatency SU(14) 16c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 18 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) renamable $w16 = nsw MADDWrrr renamable $w17, renamable $w18, $wzr
  Ready @15c
  TopQ.A TopLatency SU(15) 6c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 18 
Queue TopQ.A: 19 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 21
  Cand SU(19) ORDER                              
  Cand SU(16) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $w17 = ADDWrs renamable $w17, renamable $w18, 0
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 18 
Queue TopQ.A: 19 17 
  TopQ.A RemainingLatency 0 + 17c > CritPath 21
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) renamable $w16 = nsw MADDWrrr renamable $w16, renamable $w8, $wzr
  Ready @17c
  TopQ.A TopLatency SU(19) 7c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 35 20 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 21
  Cand SU(17) ORDER                              
  Cand SU(20) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) $w8 = ADDWrs renamable $w17, renamable $w8, 0
  Ready @18c
  TopQ.A BotLatency SU(20) 13c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 35 18 
  TopQ.A RemainingLatency 0 + 19c > CritPath 21
  Cand SU(17) ORDER                              
  Cand SU(18) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $d3 = FMULDrr renamable $d3, renamable $d5
  Ready @19c
  TopQ.A TopLatency SU(18) 9c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 35 21 
  TopQ.A RemainingLatency 0 + 20c > CritPath 21
  Cand SU(17) ORDER                              
  Cand SU(21) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d5 = SCVTFUWDri renamable $w8
  Ready @20c
  TopQ.A BotLatency SU(21) 12c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 35 22 
  TopQ.A RemainingLatency 0 + 21c > CritPath 21
  Cand SU(17) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) renamable $d0 = FDIVDrr renamable $d5, renamable $d0
  Ready @21c
  TopQ.A TopLatency SU(22) 10c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 35 30 23 
  TopQ.A RemainingLatency 0 + 22c > CritPath 21
  Cand SU(17) ORDER                              
  Cand SU(23) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $d5 = SCVTFUWDri renamable $w16
  Ready @22c
  TopQ.A BotLatency SU(23) 11c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 35 30 24 
  TopQ.A RemainingLatency 0 + 23c > CritPath 21
  Cand SU(17) ORDER                              
  Cand SU(24) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) renamable $d1 = FMULDrr renamable $d5, renamable $d1
  Ready @23c
  TopQ.A TopLatency SU(24) 11c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 35 30 25 
  TopQ.A RemainingLatency 0 + 24c > CritPath 21
  Cand SU(17) ORDER                              
  Cand SU(25) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $d5 = FMULDrr renamable $d0, renamable $d0
  Ready @24c
  TopQ.A BotLatency SU(25) 10c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 35 30 26 
  TopQ.A RemainingLatency 0 + 25c > CritPath 21
  Cand SU(17) ORDER                              
  Cand SU(26) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(26) renamable $d2 = FMULDrr renamable $d5, renamable $d2
  Ready @25c
  TopQ.A TopLatency SU(26) 12c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 35 30 28 
  TopQ.A RemainingLatency 0 + 26c > CritPath 21
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) renamable $x18 = ADRP target-flags(aarch64-page) %const.4
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 28 35 30 27 
  TopQ.A RemainingLatency 0 + 27c > CritPath 21
  Cand SU(28) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(28) renamable $d1 = FADDDrr renamable $d1, renamable $d2
  Ready @27c
  TopQ.A TopLatency SU(28) 13c
  TopQ.A BotLatency SU(28) 8c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 27 35 30 29 
  TopQ.A RemainingLatency 0 + 28c > CritPath 21
  Cand SU(27) ORDER                              
  Cand SU(29) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(29) renamable $s2 = LDURSi $fp, -56, implicit-def $d2 :: (dereferenceable load 4 from %ir.niter)
  Ready @28c
  TopQ.A BotLatency SU(29) 8c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 33 
Queue TopQ.A: 27 35 30 
  TopQ.A RemainingLatency 0 + 29c > CritPath 21
  Cand SU(27) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(27) renamable $d5 = LDRDui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 33 
Queue TopQ.A: 30 35 
  TopQ.A RemainingLatency 0 + 30c > CritPath 21
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) renamable $d4 = FMULDrr renamable $d0, renamable $d4
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 33 
Queue TopQ.A: 35 31 
  TopQ.A RemainingLatency 0 + 31c > CritPath 21
  Cand SU(35) ORDER                              
  Cand SU(31) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(31) renamable $d1 = FADDDrr renamable $d1, renamable $d4
  Ready @31c
  TopQ.A TopLatency SU(31) 14c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 32 
Queue TopQ.A: 35 33 
  TopQ.A RemainingLatency 0 + 32c > CritPath 21
  Cand SU(35) ORDER                              
  Cand SU(33) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(33) renamable $q2 = SSHLLv2i32_shift renamable $d2, 0
  Ready @32c
  TopQ.A TopLatency SU(33) 17c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 34 32 
  TopQ.A RemainingLatency 0 + 33c > CritPath 21
  Cand SU(35) ORDER                              
  Cand SU(34) TOP-PATH                  3 cycles 
  Cand SU(32) ORDER                              
Pick Top ORDER     
Scheduling SU(32) renamable $d1 = FADDDrr renamable $d1, renamable $d5
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 34 
  TopQ.A RemainingLatency 0 + 34c > CritPath 21
  Cand SU(35) ORDER                              
  Cand SU(34) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(34) renamable $d2 = SCVTFv1i64 renamable $d2, implicit $q2
  Ready @34c
  TopQ.A TopLatency SU(34) 18c
  TopQ.A BotLatency SU(34) 3c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 36 
  TopQ.A RemainingLatency 0 + 35c > CritPath 21
  Cand SU(35) ORDER                              
  Cand SU(36) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) renamable $d1 = FMULDrr renamable $d1, renamable $d2
  Ready @35c
  TopQ.A TopLatency SU(36) 19c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 37 
  TopQ.A RemainingLatency 0 + 36c > CritPath 21
  Cand SU(35) ORDER                              
  Cand SU(37) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) renamable $d1 = FDIVDrr renamable $d1, renamable $d3
  Ready @36c
  TopQ.A TopLatency SU(37) 20c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 38 
  TopQ.A RemainingLatency 0 + 37c > CritPath 21
  Cand SU(35) ORDER                              
Pick Top ORDER     
Scheduling SU(35) STURWi renamable $w16, $fp, -64 :: (store 4 into %ir.n3)
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 
Pick Top ONLY1     
Scheduling SU(38) STPDi renamable $d0, renamable $d1, renamable $x20, 36 :: (store 8 into %ir.t), (store 8 into %ir.mflops)
  Ready @38c
  TopQ.A TopLatency SU(38) 21c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) %const.0
SU(0):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(3):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(4):   renamable $x16 = ADRP target-flags(aarch64-page) %const.1
SU(1):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(5):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(6):   renamable $x16 = ADRP target-flags(aarch64-page) %const.2
SU(7):   renamable $d2 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(8):   renamable $x16 = ADRP target-flags(aarch64-page) %const.3
SU(10):   renamable $w17, renamable $w18 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(11):   renamable $d4 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(12):   renamable $x16 = ADRP target-flags(aarch64-page) %const.5
SU(13):   renamable $w8 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(9):   renamable $d3 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(14):   renamable $d5 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(15):   renamable $w16 = nsw MADDWrrr renamable $w17, renamable $w18, $wzr
SU(16):   $w17 = ADDWrs renamable $w17, renamable $w18, 0
SU(19):   renamable $w16 = nsw MADDWrrr renamable $w16, renamable $w8, $wzr
SU(20):   $w8 = ADDWrs renamable $w17, renamable $w8, 0
SU(18):   renamable $d3 = FMULDrr renamable $d3, renamable $d5
SU(21):   renamable $d5 = SCVTFUWDri renamable $w8
SU(22):   renamable $d0 = FDIVDrr renamable $d5, renamable $d0
SU(23):   renamable $d5 = SCVTFUWDri renamable $w16
SU(24):   renamable $d1 = FMULDrr renamable $d5, renamable $d1
SU(25):   renamable $d5 = FMULDrr renamable $d0, renamable $d0
SU(26):   renamable $d2 = FMULDrr renamable $d5, renamable $d2
SU(17):   renamable $x18 = ADRP target-flags(aarch64-page) %const.4
SU(28):   renamable $d1 = FADDDrr renamable $d1, renamable $d2
SU(29):   renamable $s2 = LDURSi $fp, -56, implicit-def $d2 :: (dereferenceable load 4 from %ir.niter)
SU(27):   renamable $d5 = LDRDui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(30):   renamable $d4 = FMULDrr renamable $d0, renamable $d4
SU(31):   renamable $d1 = FADDDrr renamable $d1, renamable $d4
SU(33):   renamable $q2 = SSHLLv2i32_shift renamable $d2, 0
SU(32):   renamable $d1 = FADDDrr renamable $d1, renamable $d5
SU(34):   renamable $d2 = SCVTFv1i64 renamable $d2, implicit $q2
SU(36):   renamable $d1 = FMULDrr renamable $d1, renamable $d2
SU(37):   renamable $d1 = FDIVDrr renamable $d1, renamable $d3
SU(35):   STURWi renamable $w16, $fp, -64 :: (store 4 into %ir.n3)
SU(38):   STPDi renamable $d0, renamable $d1, renamable $x20, 36 :: (store 8 into %ir.t), (store 8 into %ir.mflops)

Fixup kills for %bb.28
Fixup kills for %bb.29
********** MI Scheduling **********
main:%bb.30 if.end85
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.14
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
main:%bb.30 if.end85
  From: renamable $w1 = LDURSBWi $fp, -232 :: (dereferenceable load 1 from %ir.Class, align 4)
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
 RegionInstrs: 44
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDURSBWi $fp, -232 :: (dereferenceable load 1 from %ir.Class, align 4)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$w1
SU(1):   STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.17)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$w1
SU(2):   $x8 = ADRP target-flags(aarch64-page) @grid_points
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
    SU(8): Data Latency=1 Reg=$x8
SU(4):   renamable $w5 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(43): Data Latency=4 Reg=$w5
SU(5):   renamable $d0 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(7): Data Latency=4 Reg=$d0
    SU(11): Anti Latency=0
SU(6):   renamable $d1 = LDRDui renamable $x20, 37 :: (dereferenceable load 8 from %ir.mflops)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(7): Data Latency=4 Reg=$d1
    SU(11): Anti Latency=0
SU(7):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=$d1
    SU(5): Data Latency=4 Reg=$d0
SU(8):   renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(9): Data Latency=4 Reg=$w2
    SU(9): Data Latency=4 Reg=$w3
    SU(13): Anti Latency=0
SU(9):   STPWi renamable $w3, renamable $w2, $sp, 29 :: (store 4 into %stack.18), (store 4 into %stack.19)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=$w2
    SU(8): Data Latency=4 Reg=$w3
SU(10):   renamable $w4 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(42): Data Latency=4 Reg=$w4
    SU(13): Anti Latency=0
SU(11):   renamable $w20 = LDURWi $fp, -228 :: (dereferenceable load 4 from %ir.verified)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
  Successors:
    SU(42): Out  Latency=1
    SU(32): Data Latency=4 Reg=$w20
    SU(12): Data Latency=4 Reg=$w20
SU(12):   STRWui renamable $w20, $sp, 34 :: (store 4 into %stack.16)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(11): Data Latency=4 Reg=$w20
  Successors:
    SU(42): Anti Latency=0
SU(13):   $x8 = ADRP target-flags(aarch64-page) @sp__str_40__none__
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(10): Anti Latency=0
    SU(8): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
  Successors:
    SU(30): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x8
SU(15):   $x16 = ADRP target-flags(aarch64-page) @sp__str_39__O3__mcmod
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x16
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_39__O3__mcmod, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x16
  Successors:
    SU(34): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x16
SU(17):   $x17 = ADRP target-flags(aarch64-page) @sp__str_38__g__Wall__
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x17
SU(18):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_38__g__Wall__, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x17
  Successors:
    SU(33): Data Latency=1 Reg=$x17
SU(19):   $x18 = ADRP target-flags(aarch64-page) @sp__str_37__I___commo
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x18
SU(20):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_37__I___commo, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x18
  Successors:
    SU(33): Data Latency=1 Reg=$x18
SU(21):   $x0 = ADRP target-flags(aarch64-page) @sp__str_36__lm_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x0
SU(22):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_36__lm_, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x0
  Successors:
    SU(37): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x0
SU(23):   $x19 = ADRP target-flags(aarch64-page) @sp__str_35___CC__
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x19
SU(24):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_35___CC__, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x19
  Successors:
    SU(43): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x19
SU(25):   $x6 = ADRP target-flags(aarch64-page) @sp__str_34_gcc_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x6
SU(26):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_34_gcc_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x6
  Successors:
    SU(39): Data Latency=1 Reg=$x6
SU(27):   $x7 = ADRP target-flags(aarch64-page) @sp__str_33_03_Nov_201
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x7
SU(28):   renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_33_03_Nov_201, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x7
  Successors:
    SU(39): Data Latency=1 Reg=$x7
SU(29):   STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(14): Data Latency=1 Reg=$x8
    SU(16): Data Latency=1 Reg=$x16
  Successors:
    SU(34): Anti Latency=0
    SU(30): Anti Latency=0
SU(30):   $x8 = ADRP target-flags(aarch64-page) @sp__str_32_3_3_1_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(29): Anti Latency=0
    SU(14): Out  Latency=1
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x8
SU(31):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_32_3_3_1_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x8
  Successors:
    SU(40): Data Latency=1 Reg=$x8
SU(32):   STRWui renamable $w20, $sp, 2 :: (store 4 into stack + 8)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(11): Data Latency=4 Reg=$w20
  Successors:
    SU(42): Anti Latency=0
SU(33):   STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=$x18
    SU(18): Data Latency=1 Reg=$x17
SU(34):   $x16 = ADRP target-flags(aarch64-page) @sp__str_31___________
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(29): Anti Latency=0
    SU(16): Out  Latency=1
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x16
SU(35):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_31___________, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x16
  Successors:
    SU(41): Data Latency=1 Reg=$x16
SU(36):   STPXi renamable $x19, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(24): Data Latency=1 Reg=$x19
    SU(22): Data Latency=1 Reg=$x0
  Successors:
    SU(43): Anti Latency=0
    SU(37): Anti Latency=0
SU(37):   $x0 = ADRP target-flags(aarch64-page) @sp__str_30_SP_
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(36): Anti Latency=0
    SU(22): Out  Latency=1
  Successors:
    SU(38): Out  Latency=1
    SU(38): Data Latency=1 Reg=$x0
SU(38):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_30_SP_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(37): Out  Latency=1
    SU(37): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(39):   STPXi renamable $x7, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(28): Data Latency=1 Reg=$x7
    SU(26): Data Latency=1 Reg=$x6
SU(40):   STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(31): Data Latency=1 Reg=$x8
SU(41):   STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(35): Data Latency=1 Reg=$x16
SU(42):   $w20 = ORRWrs $wzr, $w4, 0
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(32): Anti Latency=0
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w4
SU(43):   $w19 = ORRWrs $wzr, $w5, 0
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(36): Anti Latency=0
    SU(24): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w5
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(38): Ord  Latency=1 Artificial
    SU(10): Ord  Latency=4 Artificial
    SU(8): Ord  Latency=4 Artificial
    SU(6): Ord  Latency=4 Artificial
    SU(5): Ord  Latency=4 Artificial
    SU(4): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 6 15 17 19 21 23 25 27 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = ADRP target-flags(aarch64-page) @grid_points
  Ready @0c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 27 4 5 6 15 17 19 21 23 25 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
  Ready @1c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 27 4 5 6 15 17 19 21 23 25 10 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDURSBWi $fp, -232 :: (dereferenceable load 1 from %ir.Class, align 4)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 27 4 5 6 15 17 19 21 23 25 10 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w5 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
  Ready @3c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 27 10 5 6 15 17 19 21 23 25 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @4c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 27 10 25 6 15 17 19 21 23 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = LDRDui renamable $x20, 37 :: (dereferenceable load 8 from %ir.mflops)
  Ready @5c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 8 27 10 25 23 15 17 19 21 11 1 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
  Ready @6c
  TopQ.A TopLatency SU(8) 2c
  TopQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 9 
Queue TopQ.A: 1 27 10 25 23 15 17 19 21 11 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(10) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $w4 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
  Ready @7c
  TopQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 9 
Queue TopQ.A: 1 27 11 25 23 15 17 19 21 13 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(11) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $w20 = LDURWi $fp, -228 :: (dereferenceable load 4 from %ir.verified)
  Ready @8c
  TopQ.A BotLatency SU(11) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 9 32 
Queue TopQ.A: 1 27 13 25 23 15 17 19 21 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(13) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x8 = ADRP target-flags(aarch64-page) @sp__str_40__none__
  Ready @9c
  TopQ.A BotLatency SU(13) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 32 
Queue TopQ.A: 1 27 7 25 23 15 17 19 21 14 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) $x16 = ADRP target-flags(aarch64-page) @sp__str_39__O3__mcmod
  Ready @10c
  TopQ.A BotLatency SU(15) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 32 
Queue TopQ.A: 1 27 7 25 23 9 17 19 21 14 16 
  TopQ.A RemainingLatency 0 + 11c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) $x0 = ADRP target-flags(aarch64-page) @sp__str_36__lm_
  Ready @11c
  TopQ.A BotLatency SU(21) 4c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 23 9 17 19 16 14 22 12 32 
  TopQ.A RemainingLatency 0 + 12c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(23) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) $x19 = ADRP target-flags(aarch64-page) @sp__str_35___CC__
  Ready @12c
  TopQ.A BotLatency SU(23) 4c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 16 14 22 12 24 
  TopQ.A RemainingLatency 0 + 13c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(16) TOP-PATH                  3 cycles 
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__, 0
  Ready @13c
  TopQ.A TopLatency SU(14) 3c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 16 24 22 12 
  TopQ.A RemainingLatency 0 + 14c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(16) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_39__O3__mcmod, 0
  Ready @14c
  TopQ.A BotLatency SU(16) 3c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 12 24 22 29 
  TopQ.A RemainingLatency 0 + 15c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_36__lm_, 0
  Ready @15c
  TopQ.A BotLatency SU(22) 3c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 12 24 29 
  TopQ.A RemainingLatency 0 + 16c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(24) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_35___CC__, 0
  Ready @16c
  TopQ.A BotLatency SU(24) 3c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 17 19 12 29 36 
  TopQ.A RemainingLatency 0 + 17c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) $x17 = ADRP target-flags(aarch64-page) @sp__str_38__g__Wall__
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 36 19 12 29 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(19) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(19) $x18 = ADRP target-flags(aarch64-page) @sp__str_37__I___commo
  Ready @18c
  TopQ.A BotLatency SU(19) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 25 32 9 36 18 12 29 20 
  TopQ.A RemainingLatency 0 + 19c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(25) $x6 = ADRP target-flags(aarch64-page) @sp__str_34_gcc_
  Ready @19c
  TopQ.A BotLatency SU(25) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 27 7 20 32 9 36 18 12 29 26 
  TopQ.A RemainingLatency 0 + 20c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) $x7 = ADRP target-flags(aarch64-page) @sp__str_33_03_Nov_201
  Ready @20c
  TopQ.A BotLatency SU(27) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 36 18 12 29 28 
  TopQ.A RemainingLatency 0 + 21c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(36) TOP-PATH                  2 cycles 
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
  Ready @21c
  TopQ.A TopLatency SU(29) 4c
  TopQ.A BotLatency SU(29) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 36 18 12 28 34 30 
  TopQ.A RemainingLatency 0 + 22c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(36) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
  Cand SU(30) ORDER                              
Pick Top ORDER     
Scheduling SU(30) $x8 = ADRP target-flags(aarch64-page) @sp__str_32_3_3_1_
  Ready @22c
  TopQ.A BotLatency SU(30) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 36 18 12 28 34 31 
  TopQ.A RemainingLatency 0 + 23c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(36) TOP-PATH                  2 cycles 
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) $x16 = ADRP target-flags(aarch64-page) @sp__str_31___________
  Ready @23c
  TopQ.A BotLatency SU(34) 2c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 36 18 12 28 31 35 
  TopQ.A RemainingLatency 0 + 24c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(36) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) STPXi renamable $x19, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
  Ready @24c
  TopQ.A BotLatency SU(36) 2c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 35 18 12 28 31 43 37 
  TopQ.A RemainingLatency 0 + 25c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(18) ORDER                              
  Cand SU(37) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) $x0 = ADRP target-flags(aarch64-page) @sp__str_30_SP_
  Ready @25c
  TopQ.A BotLatency SU(37) 2c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 35 18 12 28 31 43 38 
  TopQ.A RemainingLatency 0 + 26c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
  Cand SU(18) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_38__g__Wall__, 0
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 20 32 9 35 38 12 28 31 43 
  TopQ.A RemainingLatency 0 + 27c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_37__I___commo, 0
  Ready @27c
  TopQ.A BotLatency SU(20) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 26 7 43 32 9 35 38 12 28 31 33 
  TopQ.A RemainingLatency 0 + 28c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(26) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(26) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_34_gcc_, 0
  Ready @28c
  TopQ.A BotLatency SU(26) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 35 38 12 28 31 
  TopQ.A RemainingLatency 0 + 29c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(35) TOP-PATH                  1 cycles 
  Cand SU(28) ORDER                              
Pick Top ORDER     
Scheduling SU(28) renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_33_03_Nov_201, 0
  Ready @29c
  TopQ.A BotLatency SU(28) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 35 38 12 31 39 
  TopQ.A RemainingLatency 0 + 30c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(35) TOP-PATH                  1 cycles 
  Cand SU(31) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(31) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_32_3_3_1_, 0
  Ready @30c
  TopQ.A TopLatency SU(31) 5c
  TopQ.A BotLatency SU(31) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 35 38 12 39 40 
  TopQ.A RemainingLatency 0 + 31c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(35) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_31___________, 0
  Ready @31c
  TopQ.A BotLatency SU(35) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 40 38 12 39 41 
  TopQ.A RemainingLatency 0 + 32c > CritPath 6
  Cand SU(1) ORDER                              
  Cand SU(38) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_30_SP_, 0
  Ready @32c
  TopQ.A BotLatency SU(38) 1c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 33 7 43 32 9 40 41 12 39 
  TopQ.A RemainingLatency 0 + 33c > CritPath 6
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.17)
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 7 43 32 9 40 41 12 
  TopQ.A RemainingLatency 0 + 34c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 12 43 32 9 40 41 
  TopQ.A RemainingLatency 0 + 35c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STPWi renamable $w3, renamable $w2, $sp, 29 :: (store 4 into %stack.18), (store 4 into %stack.19)
  Ready @35c
  TopQ.A TopLatency SU(9) 6c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 12 43 32 41 40 
  TopQ.A RemainingLatency 0 + 36c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) STRWui renamable $w20, $sp, 34 :: (store 4 into %stack.16)
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 40 43 32 41 
  TopQ.A RemainingLatency 0 + 37c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(32) ORDER                              
Pick Top ORDER     
Scheduling SU(32) STRWui renamable $w20, $sp, 2 :: (store 4 into stack + 8)
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 40 43 41 42 
  TopQ.A RemainingLatency 0 + 38c > CritPath 6
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
Pick Top ORDER     
Scheduling SU(33) STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 42 40 43 41 
  TopQ.A RemainingLatency 0 + 39c > CritPath 6
  Cand SU(39) ORDER                              
Pick Top ORDER     
Scheduling SU(39) STPXi renamable $x7, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
  Ready @39c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 42 40 43 
  TopQ.A RemainingLatency 0 + 40c > CritPath 6
  Cand SU(41) ORDER                              
  Cand SU(40) ORDER                              
Pick Top ORDER     
Scheduling SU(40) STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
  Ready @40c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 42 43 
  TopQ.A RemainingLatency 0 + 41c > CritPath 6
  Cand SU(41) ORDER                              
Pick Top ORDER     
Scheduling SU(41) STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 42 
  TopQ.A RemainingLatency 0 + 42c > CritPath 6
  Cand SU(43) ORDER                              
  Cand SU(42) ORDER                              
Pick Top ORDER     
Scheduling SU(42) $w20 = ORRWrs $wzr, $w4, 0
  Ready @42c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 
Pick Top ONLY1     
Scheduling SU(43) $w19 = ORRWrs $wzr, $w5, 0
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(2):   $x8 = ADRP target-flags(aarch64-page) @grid_points
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @grid_points, 0
SU(0):   renamable $w1 = LDURSBWi $fp, -232 :: (dereferenceable load 1 from %ir.Class, align 4)
SU(4):   renamable $w5 = LDURWi $fp, -56 :: (dereferenceable load 4 from %ir.niter)
SU(5):   renamable $d0 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(6):   renamable $d1 = LDRDui renamable $x20, 37 :: (dereferenceable load 8 from %ir.mflops)
SU(8):   renamable $w2, renamable $w3 = LDPWi renamable $x8, 0 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 0)`), (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 1)`)
SU(10):   renamable $w4 = LDRWui renamable $x8, 2 :: (dereferenceable load 4 from `i32* getelementptr inbounds ([3 x i32], [3 x i32]* @grid_points, i64 0, i64 2)`)
SU(11):   renamable $w20 = LDURWi $fp, -228 :: (dereferenceable load 4 from %ir.verified)
SU(13):   $x8 = ADRP target-flags(aarch64-page) @sp__str_40__none__
SU(15):   $x16 = ADRP target-flags(aarch64-page) @sp__str_39__O3__mcmod
SU(21):   $x0 = ADRP target-flags(aarch64-page) @sp__str_36__lm_
SU(23):   $x19 = ADRP target-flags(aarch64-page) @sp__str_35___CC__
SU(14):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_40__none__, 0
SU(16):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_39__O3__mcmod, 0
SU(22):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_36__lm_, 0
SU(24):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_35___CC__, 0
SU(17):   $x17 = ADRP target-flags(aarch64-page) @sp__str_38__g__Wall__
SU(19):   $x18 = ADRP target-flags(aarch64-page) @sp__str_37__I___commo
SU(25):   $x6 = ADRP target-flags(aarch64-page) @sp__str_34_gcc_
SU(27):   $x7 = ADRP target-flags(aarch64-page) @sp__str_33_03_Nov_201
SU(29):   STPXi renamable $x16, renamable $x8, $sp, 9 :: (store 8 into stack + 80), (store 8 into stack + 72)
SU(30):   $x8 = ADRP target-flags(aarch64-page) @sp__str_32_3_3_1_
SU(34):   $x16 = ADRP target-flags(aarch64-page) @sp__str_31___________
SU(36):   STPXi renamable $x19, renamable $x0, $sp, 5 :: (store 8 into stack + 48), (store 8 into stack + 40)
SU(37):   $x0 = ADRP target-flags(aarch64-page) @sp__str_30_SP_
SU(18):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_38__g__Wall__, 0
SU(20):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_37__I___commo, 0
SU(26):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_34_gcc_, 0
SU(28):   renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_33_03_Nov_201, 0
SU(31):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_32_3_3_1_, 0
SU(35):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_31___________, 0
SU(38):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_30_SP_, 0
SU(1):   STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.17)
SU(7):   STPDi renamable $d1, renamable $d0, $sp, 12 :: (store 8 into %stack.20), (store 8 into %stack.21)
SU(9):   STPWi renamable $w3, renamable $w2, $sp, 29 :: (store 4 into %stack.18), (store 4 into %stack.19)
SU(12):   STRWui renamable $w20, $sp, 34 :: (store 4 into %stack.16)
SU(32):   STRWui renamable $w20, $sp, 2 :: (store 4 into stack + 8)
SU(33):   STPXi renamable $x18, renamable $x17, $sp, 7 :: (store 8 into stack + 64), (store 8 into stack + 56)
SU(39):   STPXi renamable $x7, renamable $x6, $sp, 3 :: (store 8 into stack + 32), (store 8 into stack + 24)
SU(40):   STRXui renamable $x8, $sp, 2 :: (store 8 into stack + 16)
SU(41):   STRXui renamable $x16, $sp, 0 :: (store 8 into stack)
SU(42):   $w20 = ORRWrs $wzr, $w4, 0
SU(43):   $w19 = ORRWrs $wzr, $w5, 0

Fixup kills for %bb.30
********** MI Scheduling **********
main:%bb.31 if.then86
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(2):   $x20 = SUBXri $fp, 224, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x20 = SUBXri $fp, 224, 0
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   $w8 = MOVZWi 1, 0
SU(2):   $x20 = SUBXri $fp, 224, 0
SU(1):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)

Fixup kills for %bb.31
********** MI Scheduling **********
main:%bb.32 for.cond87
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.34, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.34, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv

Fixup kills for %bb.32
********** MI Scheduling **********
main:%bb.33 for.body90
  From: renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.32
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $w16 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w16
    SU(4): Ord  Latency=0 Memory
SU(2):   STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx92)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.32
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx92)
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w16, 1, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   renamable $w16 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(2):   STRDroX renamable $d0, renamable $x20, renamable $x8, 0, 1 :: (store 8 into %ir.arrayidx92)
SU(3):   renamable $w8 = nsw ADDWri renamable $w16, 1, 0
SU(4):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)

********** MI Scheduling **********
main:%bb.33 for.body90
  From: renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $w19 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   $w0 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.33
********** MI Scheduling **********
main:%bb.34 for.end95
  From: $x16 = ADDXri $sp, 160, 0
    To: Bcc 1, %bb.36, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x16 = ADDXri $sp, 160, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(1): Data Latency=1 Reg=$x16
SU(1):   renamable $d0 = LDRDui renamable $x16, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x16
  Successors:
    SU(2): Data Latency=4 Reg=$d0
SU(2):   FCMPDri renamable $d0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.36, implicit $nzcv
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x16 = ADDXri $sp, 160, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDRDui renamable $x16, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDri renamable $d0, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   $x16 = ADDXri $sp, 160, 0
SU(1):   renamable $d0 = LDRDui renamable $x16, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(2):   FCMPDri renamable $d0, implicit-def $nzcv

Fixup kills for %bb.34
********** MI Scheduling **********
main:%bb.35 if.then98
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, renamable $x16, 35 :: (store 8 into %ir.tmax)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXui renamable $x8, renamable $x16, 35 :: (store 8 into %ir.tmax)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STRXui renamable $x8, renamable $x16, 35 :: (store 8 into %ir.tmax)

Fixup kills for %bb.35
********** MI Scheduling **********
main:%bb.36 if.end99
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Data Latency=4 Reg=$d1
SU(3):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(4):   STRDui renamable $d1, $sp, 17 :: (store 8 into %stack.16)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) %const.6
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d1, $sp, 17 :: (store 8 into %stack.16)
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) %const.6
SU(2):   renamable $d1 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.6 :: (load 8 from constant-pool)
SU(0):   $w8 = MOVZWi 1, 0
SU(3):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
SU(4):   STRDui renamable $d1, $sp, 17 :: (store 8 into %stack.16)

********** MI Scheduling **********
main:%bb.36 if.end99
  From: $x0 = ADRP target-flags(aarch64-page) @sp__str_41___SECTION_
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_41___SECTION_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_41___SECTION_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @sp__str_41___SECTION_
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_41___SECTION_, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @sp__str_41___SECTION_
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_41___SECTION_, 0

Fixup kills for %bb.36
********** MI Scheduling **********
main:%bb.37 for.cond101
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.14, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.14, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 15, 0, implicit-def $nzcv

Fixup kills for %bb.37
********** MI Scheduling **********
main:%bb.38 for.body104
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.40, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.40, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
main:%bb.38 for.body104
  From: renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(2):   $x16 = SUBXri $fp, 224, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx110)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(10): Data Latency=4 Reg=$d0
    SU(8): Data Latency=4 Reg=$d0
    SU(6): Anti Latency=0
SU(4):   $x20 = ADDXri $sp, 160, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=1 Reg=$x20
SU(5):   renamable $d2 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$x20
  Successors:
    SU(9): Data Latency=4 Reg=$d2
SU(6):   $x16 = ADDXri $sp, 160, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=$x16
SU(7):   renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=$x16
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Data Latency=4 Reg=$x19
SU(8):   renamable $d1 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
SU(9):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(5): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(10): Data Latency=1 Reg=$d1
SU(10):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(3): Data Latency=4 Reg=$d0
SU(11):   $x0 = ADRP target-flags(aarch64-page) @sp__str_42_____8s__9_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x0
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $x1 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 11 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = SUBXri $fp, 224, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 11 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x20 = ADDXri $sp, 160, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 11 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d2 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 1 
  TopQ.A RemainingLatency 0 + 4c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx110)
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 11 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(6) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x16 = ADDXri $sp, 160, 0
  Ready @6c
  TopQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 11 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
  Ready @7c
  TopQ.A TopLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 13 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $x0 = ADRP target-flags(aarch64-page) @sp__str_42_____8s__9_
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 
Queue TopQ.A: 12 8 
  TopQ.A RemainingLatency 0 + 9c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FMULDrr renamable $d0, renamable $d1
  Ready @9c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 
Queue TopQ.A: 12 9 
  TopQ.A RemainingLatency 0 + 10c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $d1 = FDIVDrr renamable $d1, renamable $d2
  Ready @10c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_, 0
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 10 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x1 = ORRXrs $xzr, $x19, 0
  Ready @12c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  Ready @13c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $x8 = LDURSWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(2):   $x16 = SUBXri $fp, 224, 0
SU(4):   $x20 = ADDXri $sp, 160, 0
SU(5):   renamable $d2 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(1):   renamable $x8 = UBFMXri renamable $x8, 61, 60
SU(3):   renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx110)
SU(6):   $x16 = ADDXri $sp, 160, 0
SU(7):   renamable $x19 = LDRXroX renamable $x16, renamable $x8, 0, 0 :: (load 8 from %ir.arrayidx106)
SU(11):   $x0 = ADRP target-flags(aarch64-page) @sp__str_42_____8s__9_
SU(8):   renamable $d1 = FMULDrr renamable $d0, renamable $d1
SU(9):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_42_____8s__9_, 0
SU(13):   $x1 = ORRXrs $xzr, $x19, 0
SU(10):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)

Fixup kills for %bb.38
********** MI Scheduling **********
main:%bb.39 if.then116
  From: renamable $d0 = LDRDui renamable $x20, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui renamable $x20, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(12): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
SU(1):   renamable $d2, renamable $d1 = LDPDi renamable $x20, 35 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=$d2
    SU(6): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $d3 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(7): Data Latency=1 Reg=$d3
    SU(5): Data Latency=1 Reg=$d3
    SU(3): Data Latency=1 Reg=$d3
    SU(12): Data Latency=1 Reg=$q3
    SU(4): Anti Latency=0
    SU(12): Anti Latency=0
    SU(6): Anti Latency=0
SU(3):   STRDui renamable $d3, renamable $x20, 36 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$d3
    SU(1): Ord  Latency=0 Memory
SU(4):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(12): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(5):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
    SU(2): Data Latency=1 Reg=$d3
  Successors:
    SU(12): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
    SU(12): Anti Latency=0
SU(6):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$d2
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d1
    SU(12): Anti Latency=0
SU(7):   STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(2): Data Latency=1 Reg=$d3
SU(8):   $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ADRP target-flags(aarch64-page) @sp__str_45_rest_rhs_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x1
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_45_rest_rhs_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $q0 = ORRv16i8 $q3, $q3
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
    SU(2): Data Latency=1 Reg=$q3
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui renamable $x20, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 1 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2, renamable $d1 = LDPDi renamable $x20, 35 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 10 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 10
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ADRP target-flags(aarch64-page) @sp__str_45_rest_rhs_
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 9 11 
  TopQ.A RemainingLatency 0 + 4c > CritPath 10
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  Ready @4c
  TopQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d3 = FSUBDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 3 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  Ready @6c
  TopQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 11 3 
  TopQ.A RemainingLatency 0 + 7c > CritPath 10
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_45_rest_rhs_, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDui renamable $d3, renamable $x20, 36 :: (store 8 into %ir.t)
  Ready @8c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d3, renamable $d0
  Ready @10c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 10
  Cand SU(7) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $q0 = ORRv16i8 $q3, $q3
  Ready @12c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  Ready @13c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $d0 = LDRDui renamable $x20, 23 :: (dereferenceable load 8 from %ir.arrayidx125)
SU(1):   renamable $d2, renamable $d1 = LDPDi renamable $x20, 35 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.tmax)
SU(8):   $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
SU(10):   $x1 = ADRP target-flags(aarch64-page) @sp__str_45_rest_rhs_
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
SU(2):   renamable $d3 = FSUBDrr renamable $d0, renamable $d1
SU(4):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_45_rest_rhs_, 0
SU(3):   STRDui renamable $d3, renamable $x20, 36 :: (store 8 into %ir.t)
SU(5):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
SU(6):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
SU(12):   $q0 = ORRv16i8 $q3, $q3
SU(7):   STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)

********** MI Scheduling **********
main:%bb.39 if.then116
  From: renamable $d0, renamable $d1 = LDPDi renamable $x20, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x20, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Out  Latency=1
    SU(14): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui renamable $x20, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d2
    SU(14): Data Latency=4 Reg=$q2
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Out  Latency=1
    SU(14): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
    SU(14): Anti Latency=0
    SU(3): Anti Latency=0
SU(3):   renamable $d1 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d1
SU(4):   renamable $d2 = FADDDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(9): Data Latency=1 Reg=$d2
    SU(7): Data Latency=1 Reg=$d2
    SU(5): Data Latency=1 Reg=$d2
    SU(14): Data Latency=1 Reg=$q2
    SU(6): Anti Latency=0
    SU(14): Anti Latency=0
SU(5):   STRDui renamable $d2, renamable $x20, 36 :: (store 8 into %ir.t)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d2
SU(6):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(14): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
SU(7):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
    SU(4): Data Latency=1 Reg=$d2
  Successors:
    SU(14): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(14): Anti Latency=0
SU(8):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$d0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$d1
    SU(14): Anti Latency=0
SU(9):   STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d1
    SU(4): Data Latency=1 Reg=$d2
SU(10):   $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x1 = ADRP target-flags(aarch64-page) @sp__str_44_sub_rhs_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x1
SU(13):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_44_sub_rhs_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(14):   $q0 = ORRv16i8 $q2, $q2
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
    SU(4): Data Latency=1 Reg=$q2
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$q2
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(14): Ord  Latency=1 Artificial
    SU(13): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 10 12 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi renamable $x20, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 12 1 10 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui renamable $x20, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 12 10 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 3c > CritPath 11
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x1 = ADRP target-flags(aarch64-page) @sp__str_44_sub_rhs_
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = FADDDrr renamable $d0, renamable $d1
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 4 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d2 = FADDDrr renamable $d0, renamable $d2
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 3 5 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
  Cand SU(6) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  Ready @6c
  TopQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 11 13 3 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 11 13 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 11
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 13 
  TopQ.A RemainingLatency 0 + 9c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_44_sub_rhs_, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d2, renamable $d0
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(5) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $q0 = ORRv16i8 $q2, $q2
  Ready @12c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 9 
  TopQ.A RemainingLatency 0 + 13c > CritPath 11
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRDui renamable $d2, renamable $x20, 36 :: (store 8 into %ir.t)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  Ready @14c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi renamable $x20, 20 :: (dereferenceable load 8 from %ir.arrayidx117, align 16), (dereferenceable load 8 from %ir.arrayidx118)
SU(1):   renamable $d2 = LDRDui renamable $x20, 22 :: (dereferenceable load 8 from %ir.arrayidx120, align 16)
SU(10):   $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
SU(12):   $x1 = ADRP target-flags(aarch64-page) @sp__str_44_sub_rhs_
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1
SU(4):   renamable $d2 = FADDDrr renamable $d0, renamable $d2
SU(6):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
SU(3):   renamable $d1 = LDRDui renamable $x20, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(11):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
SU(13):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_44_sub_rhs_, 0
SU(7):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
SU(8):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
SU(14):   $q0 = ORRv16i8 $q2, $q2
SU(5):   STRDui renamable $d2, renamable $x20, 36 :: (store 8 into %ir.t)
SU(9):   STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)

Fixup kills for %bb.39
********** MI Scheduling **********
main:%bb.40 if.else130
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.42, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 8, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.42, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 8, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 8, 0, implicit-def $nzcv

Fixup kills for %bb.40
********** MI Scheduling **********
main:%bb.41 if.then133
  From: $x8 = ADDXri $sp, 160, 0
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 16
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADDXri $sp, 160, 0
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16), (dereferenceable load 8 from %ir.arrayidx135)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 11
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(15): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   renamable $d2 = LDRDui renamable $x8, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d2
    SU(15): Data Latency=4 Reg=$q2
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(7): Out  Latency=1
    SU(15): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(15): Anti Latency=0
    SU(4): Anti Latency=0
SU(4):   renamable $d1 = LDRDui renamable $x8, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$d1
SU(5):   renamable $d2 = FSUBDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d2
  Successors:
    SU(10): Data Latency=1 Reg=$d2
    SU(8): Data Latency=1 Reg=$d2
    SU(6): Data Latency=1 Reg=$d2
    SU(15): Data Latency=1 Reg=$q2
    SU(7): Anti Latency=0
    SU(15): Anti Latency=0
SU(6):   STRDui renamable $d2, renamable $x8, 36 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d2
    SU(0): Data Latency=1 Reg=$x8
SU(7):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(15): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d0
SU(8):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(5): Data Latency=1 Reg=$d2
  Successors:
    SU(15): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(15): Anti Latency=0
SU(9):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(10): Data Latency=1 Reg=$d1
    SU(15): Anti Latency=0
SU(10):   STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(5): Data Latency=1 Reg=$d2
SU(11):   $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x0
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $x1 = ADRP target-flags(aarch64-page) @sp__str_46_sub_zsol_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x1
SU(14):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_46_sub_zsol_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(15):   $q0 = ORRv16i8 $q2, $q2
  # preds left       : 10
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(5): Data Latency=1 Reg=$q2
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Anti Latency=0
    SU(2): Data Latency=4 Reg=$q2
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(15): Ord  Latency=1 Artificial
    SU(14): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 12
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 11 13 
  TopQ.A RemainingLatency 0 + 0c > CritPath 12
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADDXri $sp, 160, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 11 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 12
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  10 cycles 
  Cand SU(1) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0, renamable $d1 = LDPDi renamable $x8, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16), (dereferenceable load 8 from %ir.arrayidx135)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 13 11 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 12
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d2 = LDRDui renamable $x8, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 13 11 
  TopQ.A RemainingLatency 0 + 3c > CritPath 12
  Cand SU(13) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 13 12 
  TopQ.A RemainingLatency 0 + 4c > CritPath 12
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) $x1 = ADRP target-flags(aarch64-page) @sp__str_46_sub_zsol_
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 12
  Cand SU(12) ORDER                              
  Cand SU(3) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d0 = FSUBDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 5 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 12
  Cand SU(12) ORDER                              
  Cand SU(5) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d2 = FSUBDrr renamable $d0, renamable $d2
  Ready @6c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 14 4 6 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 12
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
  Cand SU(7) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  Ready @7c
  TopQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 12 14 4 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 12
  Cand SU(12) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDRDui renamable $x8, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 12 14 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 12
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 6 14 
  TopQ.A RemainingLatency 0 + 10c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_46_sub_zsol_, 0
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d0 = FMULDrr renamable $d2, renamable $d0
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 9 
  TopQ.A RemainingLatency 0 + 12c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $d1 = FDIVDrr renamable $d0, renamable $d1
  Ready @12c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 10 15 
  TopQ.A RemainingLatency 0 + 13c > CritPath 12
  Cand SU(6) ORDER                              
  Cand SU(15) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) $q0 = ORRv16i8 $q2, $q2
  Ready @13c
  TopQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 10 
  TopQ.A RemainingLatency 0 + 14c > CritPath 12
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRDui renamable $d2, renamable $x8, 36 :: (store 8 into %ir.t)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  Ready @15c
  TopQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   $x8 = ADDXri $sp, 160, 0
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 26 :: (dereferenceable load 8 from %ir.arrayidx134, align 16), (dereferenceable load 8 from %ir.arrayidx135)
SU(2):   renamable $d2 = LDRDui renamable $x8, 28 :: (dereferenceable load 8 from %ir.arrayidx137, align 16)
SU(11):   $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
SU(13):   $x1 = ADRP target-flags(aarch64-page) @sp__str_46_sub_zsol_
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1
SU(5):   renamable $d2 = FSUBDrr renamable $d0, renamable $d2
SU(7):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
SU(4):   renamable $d1 = LDRDui renamable $x8, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(12):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
SU(14):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_46_sub_zsol_, 0
SU(8):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
SU(9):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1
SU(15):   $q0 = ORRv16i8 $q2, $q2
SU(6):   STRDui renamable $d2, renamable $x8, 36 :: (store 8 into %ir.t)
SU(10):   STPDi renamable $d1, renamable $d2, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)

Fixup kills for %bb.41
********** MI Scheduling **********
main:%bb.42 if.else142
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 1, %bb.44, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.44, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 10, 0, implicit-def $nzcv

Fixup kills for %bb.42
********** MI Scheduling **********
main:%bb.43 if.then145
  From: $x8 = ADDXri $sp, 160, 0
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   $x8 = ADDXri $sp, 160, 0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(4): Data Latency=1 Reg=$x8
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 27 :: (dereferenceable load 8 from %ir.arrayidx146), (dereferenceable load 8 from %ir.arrayidx147, align 16)
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(13): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(7): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   renamable $d2 = LDRDui renamable $x8, 35 :: (dereferenceable load 8 from %ir.tmax)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Data Latency=4 Reg=$d2
SU(3):   renamable $d3 = FADDDrr renamable $d0, renamable $d1
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(8): Data Latency=1 Reg=$d3
    SU(6): Data Latency=1 Reg=$d3
    SU(4): Data Latency=1 Reg=$d3
    SU(13): Data Latency=1 Reg=$q3
    SU(5): Anti Latency=0
    SU(13): Anti Latency=0
    SU(7): Anti Latency=0
SU(4):   STRDui renamable $d3, renamable $x8, 36 :: (store 8 into %ir.t)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d3
    SU(0): Data Latency=1 Reg=$x8
SU(5):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(13): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
SU(6):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(3): Data Latency=1 Reg=$d3
  Successors:
    SU(13): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(13): Anti Latency=0
SU(7):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
    SU(3): Anti Latency=0
    SU(2): Data Latency=4 Reg=$d2
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(8): Data Latency=1 Reg=$d1
    SU(13): Anti Latency=0
SU(8):   STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$d1
    SU(3): Data Latency=1 Reg=$d3
SU(9):   $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x0
SU(10):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x1 = ADRP target-flags(aarch64-page) @sp__str_47_redist_
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x1
SU(12):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_47_redist_, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $q0 = ORRv16i8 $q3, $q3
  # preds left       : 7
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
    SU(3): Data Latency=1 Reg=$q3
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
    SU(12): Ord  Latency=1 Artificial
    SU(10): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = ADDXri $sp, 160, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0, renamable $d1 = LDPDi renamable $x8, 27 :: (dereferenceable load 8 from %ir.arrayidx146), (dereferenceable load 8 from %ir.arrayidx147, align 16)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 11 9 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d2 = LDRDui renamable $x8, 35 :: (dereferenceable load 8 from %ir.tmax)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 11 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 11
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 11 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 11
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x1 = ADRP target-flags(aarch64-page) @sp__str_47_redist_
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d3 = FADDDrr renamable $d0, renamable $d1
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 12 4 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(10) ORDER                              
  Cand SU(5) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  Ready @6c
  TopQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 10 12 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 11
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 12 
  TopQ.A RemainingLatency 0 + 8c > CritPath 11
  Cand SU(4) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_47_redist_, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d3, renamable $x8, 36 :: (store 8 into %ir.t)
  Ready @9c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = FMULDrr renamable $d3, renamable $d0
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d1 = FDIVDrr renamable $d0, renamable $d2
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(8) ORDER                              
  Cand SU(13) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $q0 = ORRv16i8 $q3, $q3
  Ready @12c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)
  Ready @13c
  TopQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   $x8 = ADDXri $sp, 160, 0
SU(1):   renamable $d0, renamable $d1 = LDPDi renamable $x8, 27 :: (dereferenceable load 8 from %ir.arrayidx146), (dereferenceable load 8 from %ir.arrayidx147, align 16)
SU(2):   renamable $d2 = LDRDui renamable $x8, 35 :: (dereferenceable load 8 from %ir.tmax)
SU(9):   $x0 = ADRP target-flags(aarch64-page) @sp__str_43__________8
SU(11):   $x1 = ADRP target-flags(aarch64-page) @sp__str_47_redist_
SU(3):   renamable $d3 = FADDDrr renamable $d0, renamable $d1
SU(5):   renamable $d0 = LDRDui $sp, 17 :: (load 8 from %stack.16)
SU(10):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_43__________8, 0
SU(12):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @sp__str_47_redist_, 0
SU(4):   STRDui renamable $d3, renamable $x8, 36 :: (store 8 into %ir.t)
SU(6):   renamable $d0 = FMULDrr renamable $d3, renamable $d0
SU(7):   renamable $d1 = FDIVDrr renamable $d0, renamable $d2
SU(13):   $q0 = ORRv16i8 $q3, $q3
SU(8):   STPDi renamable $d1, renamable $d3, $sp, 15 :: (store 8 into %stack.17), (store 8 into %stack.18)

Fixup kills for %bb.43
********** MI Scheduling **********
main:%bb.44 for.inc155
  From: renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
    To: B %bb.37
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
SU(3):   renamable $d1 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   B %bb.37
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui $sp, 17 :: (load 8 from %stack.16)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $w8 = LDURWi $fp, -52 :: (dereferenceable load 4 from %ir.i)
SU(3):   renamable $d1 = LDRDui $sp, 17 :: (load 8 from %stack.16)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STURWi renamable $w8, $fp, -52 :: (store 4 into %ir.i)

Fixup kills for %bb.44
