Before MISched:
# Machine code for function diffusion: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)
  %1:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %2:gpr32 = LDRWui %1:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %2:gpr32, %bb.2
  B %bb.1

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 5
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 0, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.0.ifmortar.addr, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.0.ifmortar.addr, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  %4:gpr32 = LDRWui %stack.0.ifmortar.addr, 0 :: (dereferenceable load 4 from %ir.ifmortar.addr)
  CBZW %4:gpr32, %bb.4
  B %bb.3

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setuppc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 1, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  BL @setpcmo, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 2, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %5:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  %6:gpr32 = LDRWui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  $w1 = COPY %6:gpr32
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 3, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %6:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %9:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  %10:gpr32 = LDRWui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  $w1 = COPY %10:gpr32
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 4, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %10:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  %15:gpr64temp = ADRP target-flags(aarch64-page) @nelt
  undef %339.sub_32:gpr64 = MOVi32imm 1000
  %341:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
  undef %345.sub_32:gpr64 = MOVi32imm 200
  %355:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  %361:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  %385:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult

bb.5.for.cond:
; predecessors: %bb.4, %bb.15
  successors: %bb.6(0x7c000000), %bb.16(0x04000000); %bb.6(96.88%), %bb.16(3.12%)

  %14:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %16:gpr32 = LDRWui %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %14:gpr32, %16:gpr32, implicit-def $nzcv
  Bcc 10, %bb.16, implicit killed $nzcv
  B %bb.6

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

bb.7.for.cond4:
; predecessors: %bb.6, %bb.14
  successors: %bb.8(0x7c000000), %bb.15(0x04000000); %bb.8(96.88%), %bb.15(3.12%)

  %323:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %323:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.15, implicit killed $nzcv
  B %bb.8

bb.8.for.body6:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

bb.9.for.cond7:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

  %328:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %328:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit killed $nzcv
  B %bb.10

bb.10.for.body9:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

bb.11.for.cond10:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %333:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit killed $nzcv
  B %bb.12

bb.12.for.body12:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %337:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %340:gpr64 = MADDXrrr %337:gpr64, %339:gpr64, $xzr
  %342:gpr64 = ADDXrr %341:gpr64, %340:gpr64
  %343:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %346:gpr64 = MADDXrrr %343:gpr64, %345:gpr64, $xzr
  %347:gpr64 = ADDXrr %342:gpr64, %346:gpr64
  %348:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %349:gpr64 = ADDXrs %348:gpr64, %348:gpr64, 2
  %350:gpr64 = UBFMXri %349:gpr64, 61, 60
  %351:gpr64common = ADDXrr %347:gpr64, %350:gpr64
  %352:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %353:gpr64 = UBFMXri %352:gpr64, 61, 60
  %354:fpr64 = LDRDroX %351:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
  %356:gpr64 = ADDXrr %355:gpr64, %340:gpr64
  %357:gpr64 = ADDXrr %356:gpr64, %346:gpr64
  %358:gpr64common = ADDXrr %357:gpr64, %350:gpr64
  %359:fpr64 = LDRDroX %358:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
  %360:fpr64 = FMULDrr %354:fpr64, %359:fpr64
  %362:gpr64 = ADDXrr %361:gpr64, %340:gpr64
  %363:gpr64 = ADDXrr %362:gpr64, %346:gpr64
  %364:gpr64common = ADDXrr %363:gpr64, %350:gpr64
  STRDroX %360:fpr64, %364:gpr64common, %353:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
  %365:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  %366:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %367:gpr64 = MADDXrrr %366:gpr64, %339:gpr64, $xzr
  %368:gpr64 = ADDXrr %355:gpr64, %367:gpr64
  %369:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %370:gpr64 = MADDXrrr %369:gpr64, %345:gpr64, $xzr
  %371:gpr64 = ADDXrr %368:gpr64, %370:gpr64
  %372:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %373:gpr64 = ADDXrs %372:gpr64, %372:gpr64, 2
  %374:gpr64 = UBFMXri %373:gpr64, 61, 60
  %375:gpr64common = ADDXrr %371:gpr64, %374:gpr64
  %376:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %378:gpr64 = UBFMXri %376:gpr64common, 61, 60
  %379:fpr64 = LDRDroX %375:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
  %380:gpr64 = ADDXrr %361:gpr64, %367:gpr64
  %381:gpr64 = ADDXrr %380:gpr64, %370:gpr64
  %382:gpr64common = ADDXrr %381:gpr64, %374:gpr64
  %383:fpr64 = LDRDroX %382:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  %384:fpr64 = FMULDrr %379:fpr64, %383:fpr64
  %386:gpr64 = ADDXrr %385:gpr64, %367:gpr64
  %387:gpr64 = ADDXrr %386:gpr64, %370:gpr64
  %388:gpr64common = ADDXrr %387:gpr64, %374:gpr64
  %389:fpr64 = LDRDroX %388:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
  %390:fpr64 = FMULDrr %384:fpr64, %389:fpr64
  %391:fpr64 = FADDDrr %365:fpr64, %390:fpr64
  STRDui %391:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  %392:gpr32common = nsw ADDWri %376.sub_32:gpr64common, 1, 0
  STRWui %392:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  B %bb.11

bb.13.for.inc61:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %335:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
  STRWui %336:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  B %bb.9

bb.14.for.inc64:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %330:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
  STRWui %331:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  B %bb.7

bb.15.for.inc67:
; predecessors: %bb.7
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %325:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0
  STRWui %326:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.5

bb.16.for.end69:
; predecessors: %bb.5
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
  %20:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  %310:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
  %313:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  %316:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx

bb.17.for.cond70:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

  %19:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  dead $wzr = SUBSWrr %19:gpr32, %21:gpr32, implicit-def $nzcv
  Bcc 10, %bb.19, implicit killed $nzcv
  B %bb.18

bb.18.for.body72:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %308:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %311:gpr64 = UBFMXri %308:gpr64common, 61, 60
  %312:fpr64 = LDRDroX %310:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
  %314:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
  %315:fpr64 = FMULDrr %312:fpr64, %314:fpr64
  STRDroX %315:fpr64, %316:gpr64common, %311:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
  %317:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  %318:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
  %319:fpr64 = FMULDrr %318:fpr64, %315:fpr64
  %320:fpr64 = FADDDrr %317:fpr64, %319:fpr64
  STRDui %320:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  %321:gpr32common = nsw ADDWri %308.sub_32:gpr64common, 1, 0
  STRWui %321:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  B %bb.17

bb.19.for.end88:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %23:gpr32 = MOVi32imm 1
  STRWui %23:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  %25:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
  %44:gpr64temp = ADRP target-flags(aarch64-page) @nelt
  undef %254.sub_32:gpr64 = MOVi32imm 1000
  %256:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
  undef %260.sub_32:gpr64 = MOVi32imm 200
  %270:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  %276:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  %300:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult
  %49:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  %225:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
  %228:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  %231:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  %55:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  %57:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  %62:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  %64:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %219:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  undef %195.sub_32:gpr64 = MOVi32imm 24
  %197:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  %130:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor

bb.20.for.cond89:
; predecessors: %bb.19, %bb.72
  successors: %bb.21(0x7c000000), %bb.73(0x04000000); %bb.21(96.88%), %bb.73(3.12%)

  %24:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  %26:gpr32 = LDRWui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  dead $wzr = SUBSWrr %24:gpr32, %26:gpr32, implicit-def $nzcv
  Bcc 12, %bb.73, implicit killed $nzcv
  B %bb.21

bb.21.for.body91:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.38(0x40000000); %bb.22(50.00%), %bb.38(50.00%)

  %39:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  dead $wzr = SUBSWri %39:gpr32common, 2, 0, implicit-def $nzcv
  Bcc 11, %bb.38, implicit killed $nzcv
  B %bb.22

bb.22.if.then93:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

bb.23.for.cond94:
; predecessors: %bb.22, %bb.33
  successors: %bb.24(0x7c000000), %bb.34(0x04000000); %bb.24(96.88%), %bb.34(3.12%)

  %43:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %43:gpr32, %45:gpr32, implicit-def $nzcv
  Bcc 10, %bb.34, implicit killed $nzcv
  B %bb.24

bb.24.for.body96:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

bb.25.for.cond97:
; predecessors: %bb.24, %bb.32
  successors: %bb.26(0x7c000000), %bb.33(0x04000000); %bb.26(96.88%), %bb.33(3.12%)

  %238:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %238:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit killed $nzcv
  B %bb.26

bb.26.for.body99:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

bb.27.for.cond100:
; predecessors: %bb.26, %bb.31
  successors: %bb.28(0x7c000000), %bb.32(0x04000000); %bb.28(96.88%), %bb.32(3.12%)

  %243:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %243:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.32, implicit killed $nzcv
  B %bb.28

bb.28.for.body102:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

bb.29.for.cond103:
; predecessors: %bb.28, %bb.30
  successors: %bb.30(0x7c000000), %bb.31(0x04000000); %bb.30(96.88%), %bb.31(3.12%)

  %248:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %248:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.31, implicit killed $nzcv
  B %bb.30

bb.30.for.body105:
; predecessors: %bb.29
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %252:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %255:gpr64 = MADDXrrr %252:gpr64, %254:gpr64, $xzr
  %257:gpr64 = ADDXrr %256:gpr64, %255:gpr64
  %258:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %261:gpr64 = MADDXrrr %258:gpr64, %260:gpr64, $xzr
  %262:gpr64 = ADDXrr %257:gpr64, %261:gpr64
  %263:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %264:gpr64 = ADDXrs %263:gpr64, %263:gpr64, 2
  %265:gpr64 = UBFMXri %264:gpr64, 61, 60
  %266:gpr64common = ADDXrr %262:gpr64, %265:gpr64
  %267:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %268:gpr64 = UBFMXri %267:gpr64, 61, 60
  %269:fpr64 = LDRDroX %266:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
  %271:gpr64 = ADDXrr %270:gpr64, %255:gpr64
  %272:gpr64 = ADDXrr %271:gpr64, %261:gpr64
  %273:gpr64common = ADDXrr %272:gpr64, %265:gpr64
  %274:fpr64 = LDRDroX %273:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
  %275:fpr64 = FMULDrr %269:fpr64, %274:fpr64
  %277:gpr64 = ADDXrr %276:gpr64, %255:gpr64
  %278:gpr64 = ADDXrr %277:gpr64, %261:gpr64
  %279:gpr64common = ADDXrr %278:gpr64, %265:gpr64
  STRDroX %275:fpr64, %279:gpr64common, %268:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
  %280:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  %281:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %282:gpr64 = MADDXrrr %281:gpr64, %254:gpr64, $xzr
  %283:gpr64 = ADDXrr %270:gpr64, %282:gpr64
  %284:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %285:gpr64 = MADDXrrr %284:gpr64, %260:gpr64, $xzr
  %286:gpr64 = ADDXrr %283:gpr64, %285:gpr64
  %287:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %288:gpr64 = ADDXrs %287:gpr64, %287:gpr64, 2
  %289:gpr64 = UBFMXri %288:gpr64, 61, 60
  %290:gpr64common = ADDXrr %286:gpr64, %289:gpr64
  %291:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %293:gpr64 = UBFMXri %291:gpr64common, 61, 60
  %294:fpr64 = LDRDroX %290:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
  %295:gpr64 = ADDXrr %276:gpr64, %282:gpr64
  %296:gpr64 = ADDXrr %295:gpr64, %285:gpr64
  %297:gpr64common = ADDXrr %296:gpr64, %289:gpr64
  %298:fpr64 = LDRDroX %297:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
  %299:fpr64 = FMULDrr %294:fpr64, %298:fpr64
  %301:gpr64 = ADDXrr %300:gpr64, %282:gpr64
  %302:gpr64 = ADDXrr %301:gpr64, %285:gpr64
  %303:gpr64common = ADDXrr %302:gpr64, %289:gpr64
  %304:fpr64 = LDRDroX %303:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
  %305:fpr64 = FMULDrr %299:fpr64, %304:fpr64
  %306:fpr64 = FADDDrr %280:fpr64, %305:fpr64
  STRDui %306:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  %307:gpr32common = nsw ADDWri %291.sub_32:gpr64common, 1, 0
  STRWui %307:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  B %bb.29

bb.31.for.inc161:
; predecessors: %bb.29
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %250:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
  STRWui %251:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  B %bb.27

bb.32.for.inc164:
; predecessors: %bb.27
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %245:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0
  STRWui %246:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  B %bb.25

bb.33.for.inc167:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %240:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %241:gpr32common = nsw ADDWri %240:gpr32common, 1, 0
  STRWui %241:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.23

bb.34.for.end169:
; predecessors: %bb.23
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)

bb.35.for.cond170:
; predecessors: %bb.34, %bb.36
  successors: %bb.36(0x7c000000), %bb.37(0x04000000); %bb.36(96.88%), %bb.37(3.12%)

  %48:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %50:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  dead $wzr = SUBSWrr %48:gpr32, %50:gpr32, implicit-def $nzcv
  Bcc 10, %bb.37, implicit killed $nzcv
  B %bb.36

bb.36.for.body172:
; predecessors: %bb.35
  successors: %bb.35(0x80000000); %bb.35(100.00%)

  %223:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %226:gpr64 = UBFMXri %223:gpr64common, 61, 60
  %227:fpr64 = LDRDroX %225:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
  %229:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
  %230:fpr64 = FMULDrr %227:fpr64, %229:fpr64
  STRDroX %230:fpr64, %231:gpr64common, %226:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
  %232:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  %233:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
  %234:fpr64 = FMULDrr %233:fpr64, %230:fpr64
  %235:fpr64 = FADDDrr %232:fpr64, %234:fpr64
  STRDui %235:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  %236:gpr32common = nsw ADDWri %223.sub_32:gpr64common, 1, 0
  STRWui %236:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  B %bb.35

bb.37.for.end188:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  %52:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  STRDui %52:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
  %53:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  STRDui %53:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  %54:fpr64 = FDIVDrr %53:fpr64, %52:fpr64
  STRDui %54:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)
  %56:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  $d0 = COPY %54:fpr64
  $w2 = COPY %56:gpr32
  BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 5, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %54:fpr64, %56:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %59:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
  %61:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  $d0 = COPY %59:fpr64
  $w2 = COPY %61:gpr32
  BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 6, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %59:fpr64, %61:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.38.if.end189:
; predecessors: %bb.21, %bb.37
  successors: %bb.39(0x50000000), %bb.40(0x30000000); %bb.39(62.50%), %bb.40(37.50%)

  %65:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %65:gpr32, %bb.40
  B %bb.39

bb.39.if.then191:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 6
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 7, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.40.if.end192:
; predecessors: %bb.38, %bb.39
  successors: %bb.41(0x50000000), %bb.42(0x30000000); %bb.41(62.50%), %bb.42(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 8, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %70:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %70:gpr32, %bb.42
  B %bb.41

bb.41.if.then194:
; predecessors: %bb.40
  successors: %bb.42(0x80000000); %bb.42(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 6
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 9, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.42.if.end195:
; predecessors: %bb.40, %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

bb.43.for.cond196:
; predecessors: %bb.42, %bb.44
  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)

  %73:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %75:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %73:gpr32, %75:gpr32, implicit-def $nzcv
  Bcc 10, %bb.45, implicit killed $nzcv
  B %bb.44

bb.44.for.body198:
; predecessors: %bb.43
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %211:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %214:gpr64 = MADDXrrr %211:gpr64, %254:gpr64, $xzr
  %216:gpr64 = ADDXrr %276:gpr64, %214:gpr64
  %218:gpr64 = ADDXrr %57:gpr64, %214:gpr64
  %220:gpr32 = LDRWroX %219:gpr64common, %211:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %216:gpr64
  $x1 = COPY %218:gpr64
  $w2 = COPY %220:gpr32
  BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 10, 0, %216:gpr64, %218:gpr64, %216:gpr64, %218:gpr64, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %220:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %221:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0
  STRWui %222:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.43

bb.45.for.end208:
; predecessors: %bb.43
  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

  %78:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %78:gpr32, %bb.47
  B %bb.46

bb.46.if.then210:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 7
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 11, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.47.if.end211:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x50000000), %bb.49(0x30000000); %bb.48(62.50%), %bb.49(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 12, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %83:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %83:gpr32, %bb.49
  B %bb.48

bb.48.if.then213:
; predecessors: %bb.47
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 7
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 13, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.49.if.end214:
; predecessors: %bb.47, %bb.48
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

bb.50.for.cond215:
; predecessors: %bb.49, %bb.56
  successors: %bb.51(0x7c000000), %bb.57(0x04000000); %bb.51(96.88%), %bb.57(3.12%)

  %86:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %88:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %86:gpr32, %88:gpr32, implicit-def $nzcv
  Bcc 10, %bb.57, implicit killed $nzcv
  B %bb.51

bb.51.for.body217:
; predecessors: %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  STRWui $wzr, %stack.9.iside, 0 :: (store 4 into %ir.iside)

bb.52.for.cond218:
; predecessors: %bb.51, %bb.55
  successors: %bb.53(0x7c000000), %bb.56(0x04000000); %bb.53(96.88%), %bb.56(3.12%)

  %189:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  dead $wzr = SUBSWri %189:gpr32common, 5, 0, implicit-def $nzcv
  Bcc 12, %bb.56, implicit killed $nzcv
  B %bb.53

bb.53.for.body220:
; predecessors: %bb.52
  successors: %bb.54(0x30000000), %bb.55(0x50000000); %bb.54(37.50%), %bb.55(62.50%)

  %193:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %198:gpr64common = MADDXrrr %193:gpr64, %195:gpr64, %197:gpr64
  %199:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)
  CBNZW %200:gpr32, %bb.55
  B %bb.54

bb.54.if.then226:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)

  %201:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %206:gpr64 = MADDXrrr %201:gpr64, %254:gpr64, %276:gpr64
  %207:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %206:gpr64
  $w1 = COPY %207:gpr32
  $d0 = FMOVD0
  BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 14, 0, %206:gpr64, %206:gpr64, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %207:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.55.for.inc231:
; predecessors: %bb.53, %bb.54
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  %209:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0
  STRWui %210:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)
  B %bb.52

bb.56.for.inc234:
; predecessors: %bb.52
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  %191:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
  STRWui %192:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.50

bb.57.for.end236:
; predecessors: %bb.50
  successors: %bb.58(0x80000000); %bb.58(100.00%)

  STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

bb.58.for.cond237:
; predecessors: %bb.57, %bb.68
  successors: %bb.59(0x7c000000), %bb.69(0x04000000); %bb.59(96.88%), %bb.69(3.12%)

  %92:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %94:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  dead $wzr = SUBSWrr %92:gpr32, %94:gpr32, implicit-def $nzcv
  Bcc 10, %bb.69, implicit killed $nzcv
  B %bb.59

bb.59.for.body239:
; predecessors: %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

bb.60.for.cond240:
; predecessors: %bb.59, %bb.67
  successors: %bb.61(0x7c000000), %bb.68(0x04000000); %bb.61(96.88%), %bb.68(3.12%)

  %140:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %140:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.68, implicit killed $nzcv
  B %bb.61

bb.61.for.body242:
; predecessors: %bb.60
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

bb.62.for.cond243:
; predecessors: %bb.61, %bb.66
  successors: %bb.63(0x7c000000), %bb.67(0x04000000); %bb.63(96.88%), %bb.67(3.12%)

  %145:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %145:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.67, implicit killed $nzcv
  B %bb.63

bb.63.for.body245:
; predecessors: %bb.62
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

bb.64.for.cond246:
; predecessors: %bb.63, %bb.65
  successors: %bb.65(0x7c000000), %bb.66(0x04000000); %bb.65(96.88%), %bb.66(3.12%)

  %150:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %150:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.66, implicit killed $nzcv
  B %bb.65

bb.65.for.body248:
; predecessors: %bb.64
  successors: %bb.64(0x80000000); %bb.64(100.00%)

  %154:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %155:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %158:gpr64 = MADDXrrr %155:gpr64, %254:gpr64, $xzr
  %160:gpr64 = ADDXrr %57:gpr64, %158:gpr64
  %161:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %164:gpr64 = MADDXrrr %161:gpr64, %260:gpr64, $xzr
  %165:gpr64 = ADDXrr %160:gpr64, %164:gpr64
  %166:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
  %168:gpr64 = UBFMXri %167:gpr64, 61, 60
  %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
  %170:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  %172:gpr64 = UBFMXri %170:gpr64common, 61, 60
  %173:fpr64 = LDRDroX %169:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
  %175:gpr64 = ADDXrr %276:gpr64, %158:gpr64
  %176:gpr64 = ADDXrr %175:gpr64, %164:gpr64
  %177:gpr64common = ADDXrr %176:gpr64, %168:gpr64
  %178:fpr64 = LDRDroX %177:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
  %179:fpr64 = FMULDrr %173:fpr64, %178:fpr64
  %181:gpr64 = ADDXrr %300:gpr64, %158:gpr64
  %182:gpr64 = ADDXrr %181:gpr64, %164:gpr64
  %183:gpr64common = ADDXrr %182:gpr64, %168:gpr64
  %184:fpr64 = LDRDroX %183:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
  %185:fpr64 = FMULDrr %179:fpr64, %184:fpr64
  %186:fpr64 = FADDDrr %154:fpr64, %185:fpr64
  STRDui %186:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  %187:gpr32common = nsw ADDWri %170.sub_32:gpr64common, 1, 0
  STRWui %187:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  B %bb.64

bb.66.for.inc279:
; predecessors: %bb.64
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  %152:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  %153:gpr32common = nsw ADDWri %152:gpr32common, 1, 0
  STRWui %153:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  B %bb.62

bb.67.for.inc282:
; predecessors: %bb.62
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  %147:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  %148:gpr32common = nsw ADDWri %147:gpr32common, 1, 0
  STRWui %148:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  B %bb.60

bb.68.for.inc285:
; predecessors: %bb.60
  successors: %bb.58(0x80000000); %bb.58(100.00%)

  %142:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0
  STRWui %143:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  B %bb.58

bb.69.for.end287:
; predecessors: %bb.58
  successors: %bb.70(0x80000000); %bb.70(100.00%)

  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)

bb.70.for.cond288:
; predecessors: %bb.69, %bb.71
  successors: %bb.71(0x7c000000), %bb.72(0x04000000); %bb.71(96.88%), %bb.72(3.12%)

  %97:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %99:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  dead $wzr = SUBSWrr %97:gpr32, %99:gpr32, implicit-def $nzcv
  Bcc 10, %bb.72, implicit killed $nzcv
  B %bb.71

bb.71.for.body290:
; predecessors: %bb.70
  successors: %bb.70(0x80000000); %bb.70(100.00%)

  %125:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  %128:gpr64 = UBFMXri %125:gpr64common, 61, 60
  %129:fpr64 = LDRDroX %231:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
  %131:fpr64 = LDRDroX %130:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
  %132:fpr64 = FMULDrr %129:fpr64, %131:fpr64
  STRDroX %132:fpr64, %231:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
  %133:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %135:fpr64 = LDRDroX %62:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
  %136:fpr64 = FMULDrr %135:fpr64, %132:fpr64
  %137:fpr64 = FADDDrr %133:fpr64, %136:fpr64
  STRDui %137:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  %138:gpr32common = nsw ADDWri %125.sub_32:gpr64common, 1, 0
  STRWui %138:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  B %bb.70

bb.72.for.end306:
; predecessors: %bb.70
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  %101:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  %102:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %103:fpr64 = FDIVDrr %101:fpr64, %102:fpr64
  STRDui %103:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  %105:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  $d0 = COPY %103:fpr64
  $w2 = COPY %105:gpr32
  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 15, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %103:fpr64, %105:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %108:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %110:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  $x1 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  $d0 = COPY %108:fpr64
  $w2 = COPY %110:gpr32
  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 16, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %108:fpr64, %110:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %113:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %114:fpr64 = FNEGDr %113:fpr64
  %115:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  $d0 = COPY %114:fpr64
  $w2 = COPY %115:gpr32
  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 17, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %114:fpr64, %115:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %118:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  %119:fpr64 = FNEGDr %118:fpr64
  %120:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  $d0 = COPY %119:fpr64
  $w2 = COPY %120:gpr32
  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 18, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %119:fpr64, %120:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %123:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0
  STRWui %124:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  B %bb.20

bb.73.for.end311:
; predecessors: %bb.20
  successors: %bb.74(0x50000000), %bb.75(0x30000000); %bb.74(62.50%), %bb.75(37.50%)

  %28:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %29:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %29:gpr32, %bb.75
  B %bb.74

bb.74.if.then313:
; predecessors: %bb.73
  successors: %bb.75(0x80000000); %bb.75(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 6
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 19, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.75.if.end314:
; predecessors: %bb.73, %bb.74
  successors: %bb.76(0x50000000), %bb.77(0x30000000); %bb.76(62.50%), %bb.77(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $x1, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 20, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  %33:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %34:gpr32 = LDRWui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %34:gpr32, %bb.77
  B %bb.76

bb.76.if.then316:
; predecessors: %bb.75
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 6
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 21, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.77.if.end317:
; predecessors: %bb.75, %bb.76
  successors: %bb.78(0x50000000), %bb.79(0x30000000); %bb.78(62.50%), %bb.79(37.50%)

  %36:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW %37:gpr32, %bb.79
  B %bb.78

bb.78.if.then319:
; predecessors: %bb.77
  successors: %bb.79(0x80000000); %bb.79(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $w0 = MOVi32imm 5
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 22, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.79.if.end320:
; predecessors: %bb.77, %bb.78

  RET_ReallyLR

# End machine code for function diffusion.

********** MI Scheduling **********
diffusion:%bb.0 entry
  From: %0:gpr32 = COPY $w0
    To: CBZW %2:gpr32, %bb.2
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(1):   STRWui %0:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
  Single Issue       : false;
SU(2):   %1:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=%1
  Single Issue       : false;
SU(3):   %2:gpr32 = LDRWui %1:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=%1
  Successors:
    ExitSU: Data Latency=4 Reg=%2
  Single Issue       : false;
ExitSU:   CBZW %2:gpr32, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%2
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %0:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %0:gpr32 = COPY $w0
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %2:gpr32 = LDRWui %1:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %1:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(2):   %1:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(3):   %2:gpr32 = LDRWui %1:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
SU(0):   %0:gpr32 = COPY $w0
SU(1):   STRWui %0:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
    To: End RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=7
Live In: 
Live Out: %385 %361 %355 %345 %341 %339 %15 
Live Thru: 
  LiveReg: %385
  LiveReg: %361
  LiveReg: %355
  LiveReg: %345
  LiveReg: %341
  LiveReg: %339
  LiveReg: %15
Top Pressure:

Bottom Pressure:
GPR64temp=1
GPR32=7
Excess PSets: 
SU(0):   STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %15:gpr64temp = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(3):   undef %339.sub_32:gpr64 = MOVi32imm 1000
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %341:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   undef %345.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %355:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %361:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %385:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %385:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult
Bottom Pressure:
GPR64temp=1
GPR32=6
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %361:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
Bottom Pressure:
GPR64temp=1
GPR32=5
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %355:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
Bottom Pressure:
GPR64temp=1
GPR32=4
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) undef %345.sub_32:gpr64 = MOVi32imm 200
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %341:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) undef %339.sub_32:gpr64 = MOVi32imm 1000
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 6c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %15:gpr64temp = ADRP target-flags(aarch64-page) @nelt
Bottom Pressure:

  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
Bottom Pressure:

  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
Bottom Pressure:

  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
SU(2):   %15:gpr64temp = ADRP target-flags(aarch64-page) @nelt
SU(3):   undef %339.sub_32:gpr64 = MOVi32imm 1000
SU(4):   %341:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
SU(5):   undef %345.sub_32:gpr64 = MOVi32imm 200
SU(6):   %355:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
SU(7):   %361:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
SU(8):   %385:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %10:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %10:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
SU(2):   $d0 = FMOVD0
SU(1):   $w1 = COPY %10:gpr32

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: %9:gpr64temp = ADRP target-flags(aarch64-page) @nmor
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %9:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%9
  Single Issue       : false;
SU(1):   %10:gpr32 = LDRWui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%9
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %10:gpr32 = LDRWui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %9:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %9:gpr64temp = ADRP target-flags(aarch64-page) @nmor
SU(1):   %10:gpr32 = LDRWui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %6:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %6:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
SU(2):   $d0 = FMOVD0
SU(1):   $w1 = COPY %6:gpr32

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: %5:gpr64temp = ADRP target-flags(aarch64-page) @ntot
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %5:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=1 Reg=%5
  Single Issue       : false;
SU(1):   %6:gpr32 = LDRWui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=1 Reg=%5
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %6:gpr32 = LDRWui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %5:gpr64temp = ADRP target-flags(aarch64-page) @ntot
SU(1):   %6:gpr32 = LDRWui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)

********** MI Scheduling **********
diffusion:%bb.5 for.cond
  From: %14:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.16, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %14:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(1):   %16:gpr32 = LDRWui %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%16
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %14:gpr32, %16:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%16
    SU(0): Data Latency=4 Reg=%14
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.16, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %14:gpr32, %16:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %16:gpr32 = LDRWui %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %14:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %16:gpr32 = LDRWui %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %14:gpr32, %16:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.7 for.cond4
  From: %323:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.15, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %323:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%323
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %323:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%323
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.15, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %323:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %323:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %323:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %323:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.9 for.cond7
  From: %328:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.14, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %328:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%328
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %328:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%328
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.14, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %328:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %328:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %328:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %328:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.11 for.cond10
  From: %333:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.13, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %333:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%333
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%333
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.13, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %333:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %333:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.12 for.body12
  From: %337:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.11
 RegionInstrs: 50
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=12
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %385 %361 %345 %355 %339 %341 
Live Out: %385 %361 %345 %355 %339 %341 
Live Thru: GPR32=6
  LiveReg: %385
  UpdateRegP: SU(41) %386:gpr64 = ADDXrr %385:gpr64, %367:gpr64
              to 
  LiveReg: %361
  UpdateRegP: SU(18) %362:gpr64 = ADDXrr %361:gpr64, %340:gpr64
              to 
  UpdateRegP: SU(36) %380:gpr64 = ADDXrr %361:gpr64, %367:gpr64
              to 
  LiveReg: %345
  UpdateRegP: SU(4) %346:gpr64 = MADDXrrr %343:gpr64, %345:gpr64, $xzr
              to 
  UpdateRegP: SU(27) %370:gpr64 = MADDXrrr %369:gpr64, %345:gpr64, $xzr
              to 
  LiveReg: %355
  UpdateRegP: SU(13) %356:gpr64 = ADDXrr %355:gpr64, %340:gpr64
              to 
  UpdateRegP: SU(25) %368:gpr64 = ADDXrr %355:gpr64, %367:gpr64
              to 
  LiveReg: %339
  UpdateRegP: SU(1) %340:gpr64 = MADDXrrr %337:gpr64, %339:gpr64, $xzr
              to 
  UpdateRegP: SU(24) %367:gpr64 = MADDXrrr %366:gpr64, %339:gpr64, $xzr
              to 
  LiveReg: %341
  UpdateRegP: SU(2) %342:gpr64 = ADDXrr %341:gpr64, %340:gpr64
              to 
Top Pressure:
GPR32=6
Bottom Pressure:
GPR32=6
Excess PSets: 
Cluster ld/st SU(3) - SU(26)
  Copy Succ SU(4)
Cluster ld/st SU(6) - SU(29)
  Copy Succ SU(7)
Cluster ld/st SU(10) - SU(33)
  Copy Succ SU(11)
  Copy Succ SU(49)
Cluster ld/st SU(0) - SU(23)
  Copy Succ SU(1)
SU(0):   %337:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(1): Data Latency=4 Reg=%337
    SU(23): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %340:gpr64 = MADDXrrr %337:gpr64, %339:gpr64, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(0): Data Latency=4 Reg=%337
    SU(23): Ord  Latency=0 Artificial
  Successors:
    SU(18): Data Latency=1 Reg=%340
    SU(13): Data Latency=1 Reg=%340
    SU(2): Data Latency=1 Reg=%340
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %342:gpr64 = ADDXrr %341:gpr64, %340:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%340
  Successors:
    SU(5): Data Latency=1 Reg=%342
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %343:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(4): Data Latency=4 Reg=%343
    SU(26): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %346:gpr64 = MADDXrrr %343:gpr64, %345:gpr64, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(3): Data Latency=4 Reg=%343
    SU(26): Ord  Latency=0 Artificial
  Successors:
    SU(19): Data Latency=1 Reg=%346
    SU(14): Data Latency=1 Reg=%346
    SU(5): Data Latency=1 Reg=%346
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %347:gpr64 = ADDXrr %342:gpr64, %346:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(2): Data Latency=1 Reg=%342
    SU(4): Data Latency=1 Reg=%346
  Successors:
    SU(9): Data Latency=1 Reg=%347
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %348:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(7): Data Latency=4 Reg=%348
    SU(29): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %349:gpr64 = ADDXrs %348:gpr64, %348:gpr64, 2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(6): Data Latency=4 Reg=%348
    SU(29): Ord  Latency=0 Artificial
  Successors:
    SU(8): Data Latency=1 Reg=%349
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %350:gpr64 = UBFMXri %349:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(7): Data Latency=1 Reg=%349
  Successors:
    SU(20): Data Latency=1 Reg=%350
    SU(15): Data Latency=1 Reg=%350
    SU(9): Data Latency=1 Reg=%350
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %351:gpr64common = ADDXrr %347:gpr64, %350:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(5): Data Latency=1 Reg=%347
    SU(8): Data Latency=1 Reg=%350
  Successors:
    SU(12): Data Latency=1 Reg=%351
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %352:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(11): Data Latency=4 Reg=%352
    SU(49): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %353:gpr64 = UBFMXri %352:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(10): Data Latency=4 Reg=%352
    SU(33): Ord  Latency=0 Artificial
  Successors:
    SU(21): Data Latency=1 Reg=%353
    SU(16): Data Latency=1 Reg=%353
    SU(12): Data Latency=1 Reg=%353
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %354:fpr64 = LDRDroX %351:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(9): Data Latency=1 Reg=%351
    SU(11): Data Latency=1 Reg=%353
  Successors:
    SU(17): Data Latency=4 Reg=%354
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(13):   %356:gpr64 = ADDXrr %355:gpr64, %340:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%340
  Successors:
    SU(14): Data Latency=1 Reg=%356
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %357:gpr64 = ADDXrr %356:gpr64, %346:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(13): Data Latency=1 Reg=%356
    SU(4): Data Latency=1 Reg=%346
  Successors:
    SU(15): Data Latency=1 Reg=%357
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %358:gpr64common = ADDXrr %357:gpr64, %350:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(14): Data Latency=1 Reg=%357
    SU(8): Data Latency=1 Reg=%350
  Successors:
    SU(16): Data Latency=1 Reg=%358
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %359:fpr64 = LDRDroX %358:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(15): Data Latency=1 Reg=%358
    SU(11): Data Latency=1 Reg=%353
  Successors:
    SU(17): Data Latency=4 Reg=%359
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(17):   %360:fpr64 = FMULDrr %354:fpr64, %359:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 9
  Predecessors:
    SU(16): Data Latency=4 Reg=%359
    SU(12): Data Latency=4 Reg=%354
  Successors:
    SU(21): Data Latency=1 Reg=%360
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   %362:gpr64 = ADDXrr %361:gpr64, %340:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(1): Data Latency=1 Reg=%340
  Successors:
    SU(19): Data Latency=1 Reg=%362
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %363:gpr64 = ADDXrr %362:gpr64, %346:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(18): Data Latency=1 Reg=%362
    SU(4): Data Latency=1 Reg=%346
  Successors:
    SU(20): Data Latency=1 Reg=%363
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(20):   %364:gpr64common = ADDXrr %363:gpr64, %350:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(19): Data Latency=1 Reg=%363
    SU(8): Data Latency=1 Reg=%350
  Successors:
    SU(21): Data Latency=1 Reg=%364
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   STRDroX %360:fpr64, %364:gpr64common, %353:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(17): Data Latency=1 Reg=%360
    SU(20): Data Latency=1 Reg=%364
    SU(11): Data Latency=1 Reg=%353
  Successors:
    SU(39): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(22):   %365:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(46): Data Latency=4 Reg=%365
    SU(47): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(23):   %366:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(24): Data Latency=4 Reg=%366
    SU(1): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   %367:gpr64 = MADDXrrr %366:gpr64, %339:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(23): Data Latency=4 Reg=%366
  Successors:
    SU(41): Data Latency=1 Reg=%367
    SU(36): Data Latency=1 Reg=%367
    SU(25): Data Latency=1 Reg=%367
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %368:gpr64 = ADDXrr %355:gpr64, %367:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%367
  Successors:
    SU(28): Data Latency=1 Reg=%368
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %369:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Predecessors:
    SU(3): Ord  Latency=0 Cluster
  Successors:
    SU(27): Data Latency=4 Reg=%369
    SU(4): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   %370:gpr64 = MADDXrrr %369:gpr64, %345:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(26): Data Latency=4 Reg=%369
  Successors:
    SU(42): Data Latency=1 Reg=%370
    SU(37): Data Latency=1 Reg=%370
    SU(28): Data Latency=1 Reg=%370
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %371:gpr64 = ADDXrr %368:gpr64, %370:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(25): Data Latency=1 Reg=%368
    SU(27): Data Latency=1 Reg=%370
  Successors:
    SU(32): Data Latency=1 Reg=%371
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(29):   %372:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Predecessors:
    SU(6): Ord  Latency=0 Cluster
  Successors:
    SU(30): Data Latency=4 Reg=%372
    SU(7): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(30):   %373:gpr64 = ADDXrs %372:gpr64, %372:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(29): Data Latency=4 Reg=%372
  Successors:
    SU(31): Data Latency=1 Reg=%373
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %374:gpr64 = UBFMXri %373:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(30): Data Latency=1 Reg=%373
  Successors:
    SU(43): Data Latency=1 Reg=%374
    SU(38): Data Latency=1 Reg=%374
    SU(32): Data Latency=1 Reg=%374
  Pressure Diff      : 
  Single Issue       : false;
SU(32):   %375:gpr64common = ADDXrr %371:gpr64, %374:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(28): Data Latency=1 Reg=%371
    SU(31): Data Latency=1 Reg=%374
  Successors:
    SU(35): Data Latency=1 Reg=%375
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(33):   %376:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Predecessors:
    SU(10): Ord  Latency=0 Cluster
  Successors:
    SU(48): Data Latency=4 Reg=%376
    SU(34): Data Latency=4 Reg=%376
    SU(49): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(34):   %378:gpr64 = UBFMXri %376:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(33): Data Latency=4 Reg=%376
  Successors:
    SU(44): Data Latency=1 Reg=%378
    SU(39): Data Latency=1 Reg=%378
    SU(35): Data Latency=1 Reg=%378
  Pressure Diff      : 
  Single Issue       : false;
SU(35):   %379:fpr64 = LDRDroX %375:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(32): Data Latency=1 Reg=%375
    SU(34): Data Latency=1 Reg=%378
  Successors:
    SU(40): Data Latency=4 Reg=%379
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(36):   %380:gpr64 = ADDXrr %361:gpr64, %367:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%367
  Successors:
    SU(37): Data Latency=1 Reg=%380
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %381:gpr64 = ADDXrr %380:gpr64, %370:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(36): Data Latency=1 Reg=%380
    SU(27): Data Latency=1 Reg=%370
  Successors:
    SU(38): Data Latency=1 Reg=%381
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(38):   %382:gpr64common = ADDXrr %381:gpr64, %374:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(37): Data Latency=1 Reg=%381
    SU(31): Data Latency=1 Reg=%374
  Successors:
    SU(39): Data Latency=1 Reg=%382
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(39):   %383:fpr64 = LDRDroX %382:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 7
  Predecessors:
    SU(38): Data Latency=1 Reg=%382
    SU(34): Data Latency=1 Reg=%378
    SU(21): Ord  Latency=1 Memory
  Successors:
    SU(40): Data Latency=4 Reg=%383
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(40):   %384:fpr64 = FMULDrr %379:fpr64, %383:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 3
  Predecessors:
    SU(39): Data Latency=4 Reg=%383
    SU(35): Data Latency=4 Reg=%379
  Successors:
    SU(45): Data Latency=1 Reg=%384
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(41):   %386:gpr64 = ADDXrr %385:gpr64, %367:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(24): Data Latency=1 Reg=%367
  Successors:
    SU(42): Data Latency=1 Reg=%386
  Pressure Diff      : 
  Single Issue       : false;
SU(42):   %387:gpr64 = ADDXrr %386:gpr64, %370:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(41): Data Latency=1 Reg=%386
    SU(27): Data Latency=1 Reg=%370
  Successors:
    SU(43): Data Latency=1 Reg=%387
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(43):   %388:gpr64common = ADDXrr %387:gpr64, %374:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(42): Data Latency=1 Reg=%387
    SU(31): Data Latency=1 Reg=%374
  Successors:
    SU(44): Data Latency=1 Reg=%388
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(44):   %389:fpr64 = LDRDroX %388:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(43): Data Latency=1 Reg=%388
    SU(34): Data Latency=1 Reg=%378
  Successors:
    SU(45): Data Latency=4 Reg=%389
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(45):   %390:fpr64 = FMULDrr %384:fpr64, %389:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 2
  Predecessors:
    SU(40): Data Latency=1 Reg=%384
    SU(44): Data Latency=4 Reg=%389
  Successors:
    SU(46): Data Latency=1 Reg=%390
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(46):   %391:fpr64 = FADDDrr %365:fpr64, %390:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 1
  Predecessors:
    SU(45): Data Latency=1 Reg=%390
    SU(22): Data Latency=4 Reg=%365
  Successors:
    SU(47): Data Latency=1 Reg=%391
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(47):   STRDui %391:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(46): Data Latency=1 Reg=%391
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(48):   %392:gpr32common = nsw ADDWri %376.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(33): Data Latency=4 Reg=%376
  Successors:
    SU(49): Data Latency=1 Reg=%392
  Pressure Diff      : 
  Single Issue       : false;
SU(49):   STRWui %392:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(48): Data Latency=1 Reg=%392
    SU(33): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 21
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 49 47 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
Picking from Bot:
  Cand SU(49) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(49) STRWui %392:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=7
  LiveReg: %392
  UpdateRegP: SU(49) STRWui %392:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(49) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 47 48 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(47) 21c
  BotQ.A RemainingLatency 21 + 1c > CritPath 21
Picking from Bot:
  Cand SU(47) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(47) STRDui %391:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %391
  UpdateRegP: SU(47) STRDui %391:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
              to 
  Ready @1c
  BotQ.A TopLatency SU(47) 21c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 46 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(46) 20c
  BotQ.A RemainingLatency 20 + 2c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
  Cand SU(46) BOT-PATH                  20 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(46) %391:fpr64 = FADDDrr %365:fpr64, %390:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %365
  UpdateRegP: SU(46) %391:fpr64 = FADDDrr %365:fpr64, %390:fpr64
              to 
  LiveReg: %390
  UpdateRegP: SU(46) %391:fpr64 = FADDDrr %365:fpr64, %390:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(46) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 48 45 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(45) 19c
  BotQ.A RemainingLatency 19 + 3c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
  Cand SU(45) BOT-PATH                  19 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(45) %390:fpr64 = FMULDrr %384:fpr64, %389:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %384
  UpdateRegP: SU(45) %390:fpr64 = FMULDrr %384:fpr64, %389:fpr64
              to 
  LiveReg: %389
  UpdateRegP: SU(45) %390:fpr64 = FMULDrr %384:fpr64, %389:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(45) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 44 
Queue BotQ.A: 48 40 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(40) 18c
BotQ.A RemLatency SU(44) 8c
  BotQ.A RemainingLatency 18 + 4c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(48) %392:gpr32common = nsw ADDWri %376.sub_32:gpr64common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %376
  UpdateRegP: SU(34) %378:gpr64 = UBFMXri %376:gpr64common, 61, 60
              to GPR32 -1
  UpdateRegP: SU(48) %392:gpr32common = nsw ADDWri %376.sub_32:gpr64common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 44 
Queue BotQ.A: 40 
Pick Bot ONLY1     
Scheduling SU(40) %384:fpr64 = FMULDrr %379:fpr64, %383:fpr64
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %379
  UpdateRegP: SU(40) %384:fpr64 = FMULDrr %379:fpr64, %383:fpr64
              to 
  LiveReg: %383
  UpdateRegP: SU(40) %384:fpr64 = FMULDrr %379:fpr64, %383:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(40) 18c
  BotQ.A BotLatency SU(40) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 44 39 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) %365:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @6c
  BotQ.A BotLatency SU(22) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 39 
Queue BotQ.A: 44 
Pick Bot ONLY1     
Scheduling SU(44) %389:fpr64 = LDRDroX %388:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %388
  UpdateRegP: SU(44) %389:fpr64 = LDRDroX %388:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %378
  UpdateRegP: SU(35) %379:fpr64 = LDRDroX %375:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(39) %383:fpr64 = LDRDroX %382:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(44) %389:fpr64 = LDRDroX %388:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(44) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 39 
Queue BotQ.A: 43 
Pick Bot ONLY1     
Scheduling SU(43) %388:gpr64common = ADDXrr %387:gpr64, %374:gpr64
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %387
  UpdateRegP: SU(43) %388:gpr64common = ADDXrr %387:gpr64, %374:gpr64
              to 
  LiveReg: %374
  UpdateRegP: SU(32) %375:gpr64common = ADDXrr %371:gpr64, %374:gpr64
              to 
  UpdateRegP: SU(38) %382:gpr64common = ADDXrr %381:gpr64, %374:gpr64
              to 
  UpdateRegP: SU(43) %388:gpr64common = ADDXrr %387:gpr64, %374:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(43) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 35 39 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(39) 14c
  BotQ.A RemainingLatency 14 + 9c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  8 cycles 
  Cand SU(39) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(39) %383:fpr64 = LDRDroX %382:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
Bottom Pressure:
FPR8=1
GPR32=11
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %382
  UpdateRegP: SU(39) %383:fpr64 = LDRDroX %382:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 35 38 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 10c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(35) %379:fpr64 = LDRDroX %375:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
Bottom Pressure:
GPR32=12
  LiveReg: %375
  UpdateRegP: SU(35) %379:fpr64 = LDRDroX %375:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 38 32 34 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 11c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(38) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(38) %382:gpr64common = ADDXrr %381:gpr64, %374:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %381
  UpdateRegP: SU(38) %382:gpr64common = ADDXrr %381:gpr64, %374:gpr64
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(38) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 32 37 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 12c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(32) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(32) %375:gpr64common = ADDXrr %371:gpr64, %374:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %371
  UpdateRegP: SU(32) %375:gpr64common = ADDXrr %371:gpr64, %374:gpr64
              to GPR32 -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 37 28 31 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 13c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(31) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(31) %374:gpr64 = UBFMXri %373:gpr64, 61, 60
Bottom Pressure:
GPR32=12
  LiveReg: %373
  UpdateRegP: SU(31) %374:gpr64 = UBFMXri %373:gpr64, 61, 60
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(31) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 37 28 30 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 14c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(34) %378:gpr64 = UBFMXri %376:gpr64common, 61, 60
Bottom Pressure:
GPR32=11
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 30 37 28 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 15c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(42) %387:gpr64 = ADDXrr %386:gpr64, %370:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %386
  UpdateRegP: SU(42) %387:gpr64 = ADDXrr %386:gpr64, %370:gpr64
              to 
  LiveReg: %370
  UpdateRegP: SU(28) %371:gpr64 = ADDXrr %368:gpr64, %370:gpr64
              to 
  UpdateRegP: SU(37) %381:gpr64 = ADDXrr %380:gpr64, %370:gpr64
              to 
  UpdateRegP: SU(42) %387:gpr64 = ADDXrr %386:gpr64, %370:gpr64
              to GPR32 -1
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 21 30 37 41 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 16c > CritPath 21
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(37) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(37) %381:gpr64 = ADDXrr %380:gpr64, %370:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %380
  UpdateRegP: SU(37) %381:gpr64 = ADDXrr %380:gpr64, %370:gpr64
              to GPR32 -1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 21 30 41 36 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 17c > CritPath 21
Picking from Bot:
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) %371:gpr64 = ADDXrr %368:gpr64, %370:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %368
  UpdateRegP: SU(28) %371:gpr64 = ADDXrr %368:gpr64, %370:gpr64
              to GPR32 -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 21 30 41 25 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 18c > CritPath 21
Picking from Bot:
  Cand SU(36) ORDER                              
  Cand SU(41) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(41) %386:gpr64 = ADDXrr %385:gpr64, %367:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %367
  UpdateRegP: SU(25) %368:gpr64 = ADDXrr %355:gpr64, %367:gpr64
              to GPR32 -1
  UpdateRegP: SU(36) %380:gpr64 = ADDXrr %361:gpr64, %367:gpr64
              to GPR32 -1
  UpdateRegP: SU(41) %386:gpr64 = ADDXrr %385:gpr64, %367:gpr64
              to GPR32 -1
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 21 30 27 25 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 19c > CritPath 21
Picking from Bot:
  Cand SU(36) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(36) %380:gpr64 = ADDXrr %361:gpr64, %367:gpr64
Bottom Pressure:
GPR32=11
  Ready @19c
  BotQ.A TopLatency SU(36) 5c
  BotQ.A BotLatency SU(36) 10c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 21 30 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 20c > CritPath 21
Picking from Bot:
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(25) %368:gpr64 = ADDXrr %355:gpr64, %367:gpr64
Bottom Pressure:
GPR32=10
  Ready @20c
  BotQ.A TopLatency SU(25) 5c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 21 30 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 21c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(21) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(21) STRDroX %360:fpr64, %364:gpr64common, %353:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
Bottom Pressure:
FPR8=1
GPR32=12
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %360
  UpdateRegP: SU(21) STRDroX %360:fpr64, %364:gpr64common, %353:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
              to GPR32 2
  LiveReg: %364
  UpdateRegP: SU(21) STRDroX %360:fpr64, %364:gpr64common, %353:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
              to GPR32 1
  LiveReg: %353
  UpdateRegP: SU(12) %354:fpr64 = LDRDroX %351:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(16) %359:fpr64 = LDRDroX %358:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(21) STRDroX %360:fpr64, %364:gpr64common, %353:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
              to 
  Ready @21c
  BotQ.A TopLatency SU(21) 13c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 24 30 17 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 22c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(17) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %360:fpr64 = FMULDrr %354:fpr64, %359:fpr64
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %354
  UpdateRegP: SU(17) %360:fpr64 = FMULDrr %354:fpr64, %359:fpr64
              to 
  LiveReg: %359
  UpdateRegP: SU(17) %360:fpr64 = FMULDrr %354:fpr64, %359:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 27 24 30 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 23c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(30) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(30) %373:gpr64 = ADDXrs %372:gpr64, %372:gpr64, 2
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %372
  UpdateRegP: SU(30) %373:gpr64 = ADDXrs %372:gpr64, %372:gpr64, 2
              to GPR32 -1
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 27 24 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 24c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) %370:gpr64 = MADDXrrr %369:gpr64, %345:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %369
  UpdateRegP: SU(27) %370:gpr64 = MADDXrrr %369:gpr64, %345:gpr64, $xzr
              to GPR32 -1
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 20 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 25c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(24) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(24) %367:gpr64 = MADDXrrr %366:gpr64, %339:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %366
  UpdateRegP: SU(24) %367:gpr64 = MADDXrrr %366:gpr64, %339:gpr64, $xzr
              to GPR32 -1
  Ready @25c
  BotQ.A BotLatency SU(24) 11c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 16 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 26c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(16) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %359:fpr64 = LDRDroX %358:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
Bottom Pressure:
FPR8=1
GPR32=13
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR32: 13 <= 15(+ 6 livethru)
  LiveReg: %358
  UpdateRegP: SU(16) %359:fpr64 = LDRDroX %358:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @26c
  BotQ.A BotLatency SU(16) 13c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 27c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %354:fpr64 = LDRDroX %351:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
Bottom Pressure:
GPR32=14
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %351
  UpdateRegP: SU(12) %354:fpr64 = LDRDroX %351:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @27c
  BotQ.A TopLatency SU(12) 8c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 15 9 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 28c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(11) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %353:gpr64 = UBFMXri %352:gpr64, 61, 60
Bottom Pressure:
GPR32=14
  LiveReg: %352
  UpdateRegP: SU(11) %353:gpr64 = UBFMXri %352:gpr64, 61, 60
              to GPR32 -1
  Ready @28c
  BotQ.A BotLatency SU(11) 14c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 20 15 9 33 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 29c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(33) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(33) %376:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=13
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 20 15 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 30c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %364:gpr64common = ADDXrr %363:gpr64, %350:gpr64
Bottom Pressure:
GPR32=14
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %363
  UpdateRegP: SU(20) %364:gpr64common = ADDXrr %363:gpr64, %350:gpr64
              to 
  LiveReg: %350
  UpdateRegP: SU(9) %351:gpr64common = ADDXrr %347:gpr64, %350:gpr64
              to 
  UpdateRegP: SU(15) %358:gpr64common = ADDXrr %357:gpr64, %350:gpr64
              to 
  UpdateRegP: SU(20) %364:gpr64common = ADDXrr %363:gpr64, %350:gpr64
              to GPR32 -1
  Ready @30c
  BotQ.A TopLatency SU(20) 7c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 9 15 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 31c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %358:gpr64common = ADDXrr %357:gpr64, %350:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %357
  UpdateRegP: SU(15) %358:gpr64common = ADDXrr %357:gpr64, %350:gpr64
              to GPR32 -1
  Ready @31c
  BotQ.A TopLatency SU(15) 7c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 19 14 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 32c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(10) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(10) %352:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=13
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @32c
  BotQ.A BotLatency SU(10) 18c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 33c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %351:gpr64common = ADDXrr %347:gpr64, %350:gpr64
Bottom Pressure:
GPR32=13
  LiveReg: %347
  UpdateRegP: SU(9) %351:gpr64common = ADDXrr %347:gpr64, %350:gpr64
              to GPR32 -1
  Ready @33c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 19 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 34c > CritPath 21
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %363:gpr64 = ADDXrr %362:gpr64, %346:gpr64
Bottom Pressure:
GPR32=14
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %362
  UpdateRegP: SU(19) %363:gpr64 = ADDXrr %362:gpr64, %346:gpr64
              to 
  LiveReg: %346
  UpdateRegP: SU(5) %347:gpr64 = ADDXrr %342:gpr64, %346:gpr64
              to 
  UpdateRegP: SU(14) %357:gpr64 = ADDXrr %356:gpr64, %346:gpr64
              to 
  UpdateRegP: SU(19) %363:gpr64 = ADDXrr %362:gpr64, %346:gpr64
              to GPR32 -1
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 8 5 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 35c > CritPath 21
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %357:gpr64 = ADDXrr %356:gpr64, %346:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %356
  UpdateRegP: SU(14) %357:gpr64 = ADDXrr %356:gpr64, %346:gpr64
              to GPR32 -1
  Ready @35c
  BotQ.A TopLatency SU(14) 6c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 8 5 13 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 36c > CritPath 21
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(5) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %347:gpr64 = ADDXrr %342:gpr64, %346:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %342
  UpdateRegP: SU(5) %347:gpr64 = ADDXrr %342:gpr64, %346:gpr64
              to GPR32 -1
  Ready @36c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 8 13 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 37c > CritPath 21
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %362:gpr64 = ADDXrr %361:gpr64, %340:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %340
  UpdateRegP: SU(2) %342:gpr64 = ADDXrr %341:gpr64, %340:gpr64
              to GPR32 -1
  UpdateRegP: SU(13) %356:gpr64 = ADDXrr %355:gpr64, %340:gpr64
              to GPR32 -1
  UpdateRegP: SU(18) %362:gpr64 = ADDXrr %361:gpr64, %340:gpr64
              to GPR32 -1
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 13 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 38c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %356:gpr64 = ADDXrr %355:gpr64, %340:gpr64
Bottom Pressure:
GPR32=13
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @38c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 39c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %350:gpr64 = UBFMXri %349:gpr64, 61, 60
Bottom Pressure:
GPR32=13
  LiveReg: %349
  UpdateRegP: SU(8) %350:gpr64 = UBFMXri %349:gpr64, 61, 60
              to GPR32 -1
  Ready @39c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 40c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %342:gpr64 = ADDXrr %341:gpr64, %340:gpr64
Bottom Pressure:
GPR32=12
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @40c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 40
Cycle: 41 BotQ.A
BotQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 41c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %349:gpr64 = ADDXrs %348:gpr64, %348:gpr64, 2
Bottom Pressure:
GPR32=12
  LiveReg: %348
  UpdateRegP: SU(7) %349:gpr64 = ADDXrs %348:gpr64, %348:gpr64, 2
              to GPR32 -1
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 BotQ.A
BotQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 1 29 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 42c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %346:gpr64 = MADDXrrr %343:gpr64, %345:gpr64, $xzr
Bottom Pressure:
GPR32=12
  LiveReg: %343
  UpdateRegP: SU(4) %346:gpr64 = MADDXrrr %343:gpr64, %345:gpr64, $xzr
              to GPR32 -1
  Ready @42c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 42
Cycle: 43 BotQ.A
BotQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 29 1 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 43c > CritPath 21
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %340:gpr64 = MADDXrrr %337:gpr64, %339:gpr64, $xzr
Bottom Pressure:
GPR32=12
  LiveReg: %337
  UpdateRegP: SU(1) %340:gpr64 = MADDXrrr %337:gpr64, %339:gpr64, $xzr
              to GPR32 -1
  Ready @43c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 43
Cycle: 44 BotQ.A
BotQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 0 
Queue BotQ.A: 29 26 23 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 44c > CritPath 21
Picking from Bot:
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(29) %372:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=11
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 BotQ.A
BotQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 23 26 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 23 
  BotQ.A RemainingLatency 0 + 45c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(6) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(6) %348:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=10
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @45c
  BotQ.A BotLatency SU(6) 20c
  *** Max MOps 1 at cycle 45
Cycle: 46 BotQ.A
BotQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 23 26 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 23 26 
  BotQ.A RemainingLatency 0 + 46c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(26) %369:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=9
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @46c
  *** Max MOps 1 at cycle 46
Cycle: 47 BotQ.A
BotQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 23 
  BotQ.A RemainingLatency 0 + 47c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(3) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(3) %343:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=8
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @47c
  *** Max MOps 1 at cycle 47
Cycle: 48 BotQ.A
BotQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 0 
Queue TopQ.P: 
Queue TopQ.A: 0 23 
  BotQ.A RemainingLatency 0 + 48c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(23) %366:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=7
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @48c
  *** Max MOps 1 at cycle 48
Cycle: 49 BotQ.A
BotQ.A @49c
  Retired: 49
  Executed: 49c
  Critical: 49c, 49 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %337:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=6
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @49c
  BotQ.A BotLatency SU(0) 21c
  *** Max MOps 1 at cycle 49
Cycle: 50 BotQ.A
BotQ.A @50c
  Retired: 50
  Executed: 50c
  Critical: 50c, 50 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %337:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(23):   %366:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(3):   %343:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(26):   %369:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(6):   %348:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(29):   %372:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %340:gpr64 = MADDXrrr %337:gpr64, %339:gpr64, $xzr
SU(4):   %346:gpr64 = MADDXrrr %343:gpr64, %345:gpr64, $xzr
SU(7):   %349:gpr64 = ADDXrs %348:gpr64, %348:gpr64, 2
SU(2):   %342:gpr64 = ADDXrr %341:gpr64, %340:gpr64
SU(8):   %350:gpr64 = UBFMXri %349:gpr64, 61, 60
SU(13):   %356:gpr64 = ADDXrr %355:gpr64, %340:gpr64
SU(18):   %362:gpr64 = ADDXrr %361:gpr64, %340:gpr64
SU(5):   %347:gpr64 = ADDXrr %342:gpr64, %346:gpr64
SU(14):   %357:gpr64 = ADDXrr %356:gpr64, %346:gpr64
SU(19):   %363:gpr64 = ADDXrr %362:gpr64, %346:gpr64
SU(9):   %351:gpr64common = ADDXrr %347:gpr64, %350:gpr64
SU(10):   %352:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(15):   %358:gpr64common = ADDXrr %357:gpr64, %350:gpr64
SU(20):   %364:gpr64common = ADDXrr %363:gpr64, %350:gpr64
SU(33):   %376:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(11):   %353:gpr64 = UBFMXri %352:gpr64, 61, 60
SU(12):   %354:fpr64 = LDRDroX %351:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
SU(16):   %359:fpr64 = LDRDroX %358:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
SU(24):   %367:gpr64 = MADDXrrr %366:gpr64, %339:gpr64, $xzr
SU(27):   %370:gpr64 = MADDXrrr %369:gpr64, %345:gpr64, $xzr
SU(30):   %373:gpr64 = ADDXrs %372:gpr64, %372:gpr64, 2
SU(17):   %360:fpr64 = FMULDrr %354:fpr64, %359:fpr64
SU(21):   STRDroX %360:fpr64, %364:gpr64common, %353:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
SU(25):   %368:gpr64 = ADDXrr %355:gpr64, %367:gpr64
SU(36):   %380:gpr64 = ADDXrr %361:gpr64, %367:gpr64
SU(41):   %386:gpr64 = ADDXrr %385:gpr64, %367:gpr64
SU(28):   %371:gpr64 = ADDXrr %368:gpr64, %370:gpr64
SU(37):   %381:gpr64 = ADDXrr %380:gpr64, %370:gpr64
SU(42):   %387:gpr64 = ADDXrr %386:gpr64, %370:gpr64
SU(34):   %378:gpr64 = UBFMXri %376:gpr64common, 61, 60
SU(31):   %374:gpr64 = UBFMXri %373:gpr64, 61, 60
SU(32):   %375:gpr64common = ADDXrr %371:gpr64, %374:gpr64
SU(38):   %382:gpr64common = ADDXrr %381:gpr64, %374:gpr64
SU(35):   %379:fpr64 = LDRDroX %375:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
SU(39):   %383:fpr64 = LDRDroX %382:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
SU(43):   %388:gpr64common = ADDXrr %387:gpr64, %374:gpr64
SU(44):   %389:fpr64 = LDRDroX %388:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
SU(22):   %365:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
SU(40):   %384:fpr64 = FMULDrr %379:fpr64, %383:fpr64
SU(48):   %392:gpr32common = nsw ADDWri %376.sub_32:gpr64common, 1, 0
SU(45):   %390:fpr64 = FMULDrr %384:fpr64, %389:fpr64
SU(46):   %391:fpr64 = FADDDrr %365:fpr64, %390:fpr64
SU(47):   STRDui %391:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
SU(49):   STRWui %392:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
diffusion:%bb.13 for.inc61
  From: %335:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %335:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%335
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%335
  Successors:
    SU(2): Data Latency=1 Reg=%336
  Single Issue       : false;
SU(2):   STRWui %336:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%336
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %336:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %335:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %335:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
SU(2):   STRWui %336:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
diffusion:%bb.14 for.inc64
  From: %330:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.7
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %330:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%330
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%330
  Successors:
    SU(2): Data Latency=1 Reg=%331
  Single Issue       : false;
SU(2):   STRWui %331:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%331
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %331:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %330:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %330:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
SU(2):   STRWui %331:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
diffusion:%bb.15 for.inc67
  From: %325:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %325:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%325
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%325
  Successors:
    SU(2): Data Latency=1 Reg=%326
  Single Issue       : false;
SU(2):   STRWui %326:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%326
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %326:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %325:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %325:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0
SU(2):   STRWui %326:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.16 for.end69
  From: STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %20:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %310:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %313:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %316:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %316:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %313:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %310:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %20:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
SU(1):   %20:gpr64temp = ADRP target-flags(aarch64-page) @nmor
SU(2):   %310:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
SU(3):   %313:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
SU(4):   %316:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx

********** MI Scheduling **********
diffusion:%bb.17 for.cond70
  From: %19:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.19, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %19:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(1):   %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%21
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %19:gpr32, %21:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%21
    SU(0): Data Latency=4 Reg=%19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.19, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %19:gpr32, %21:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %19:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %19:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   dead $wzr = SUBSWrr %19:gpr32, %21:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.18 for.body72
  From: %308:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.17
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %313 %316 %310 
Live Out: %313 %316 %310 
Live Thru: GPR32=3
  LiveReg: %313
  UpdateRegP: SU(3) %314:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(7) %318:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %316
  UpdateRegP: SU(5) STRDroX %315:fpr64, %316:gpr64common, %311:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
              to FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %310
  UpdateRegP: SU(2) %312:fpr64 = LDRDroX %310:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR32=3
Bottom Pressure:
GPR32=3
Excess PSets: 
SU(0):   %308:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(11): Data Latency=4 Reg=%308
    SU(1): Data Latency=4 Reg=%308
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %311:gpr64 = UBFMXri %308:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%308
  Successors:
    SU(7): Data Latency=1 Reg=%311
    SU(5): Data Latency=1 Reg=%311
    SU(3): Data Latency=1 Reg=%311
    SU(2): Data Latency=1 Reg=%311
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %312:fpr64 = LDRDroX %310:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%311
  Successors:
    SU(4): Data Latency=4 Reg=%312
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %314:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%311
  Successors:
    SU(4): Data Latency=4 Reg=%314
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %315:fpr64 = FMULDrr %312:fpr64, %314:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%314
    SU(2): Data Latency=4 Reg=%312
  Successors:
    SU(8): Data Latency=1 Reg=%315
    SU(5): Data Latency=1 Reg=%315
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDroX %315:fpr64, %316:gpr64common, %311:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%315
    SU(1): Data Latency=1 Reg=%311
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %317:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%317
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %318:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%311
  Successors:
    SU(8): Data Latency=4 Reg=%318
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %319:fpr64 = FMULDrr %318:fpr64, %315:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%315
    SU(7): Data Latency=4 Reg=%318
  Successors:
    SU(9): Data Latency=1 Reg=%319
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   %320:fpr64 = FADDDrr %317:fpr64, %319:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%319
    SU(6): Data Latency=4 Reg=%317
  Successors:
    SU(10): Data Latency=1 Reg=%320
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   STRDui %320:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%320
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   %321:gpr32common = nsw ADDWri %308.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%308
  Successors:
    SU(12): Data Latency=1 Reg=%321
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   STRWui %321:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%321
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 5 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %321:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
Bottom Pressure:
GPR32=4
  LiveReg: %321
  UpdateRegP: SU(12) STRWui %321:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
              to 
  Ready @0c
  BotQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(10) 12c
  BotQ.A RemainingLatency 12 + 1c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(10) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRDui %320:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %320
  UpdateRegP: SU(10) STRDui %320:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
              to 
  Ready @1c
  BotQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(9) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %320:fpr64 = FADDDrr %317:fpr64, %319:fpr64
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %317
  UpdateRegP: SU(9) %320:fpr64 = FADDDrr %317:fpr64, %319:fpr64
              to 
  LiveReg: %319
  UpdateRegP: SU(9) %320:fpr64 = FADDDrr %317:fpr64, %319:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 11 8 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %319:fpr64 = FMULDrr %318:fpr64, %315:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %318
  UpdateRegP: SU(8) %319:fpr64 = FMULDrr %318:fpr64, %315:fpr64
              to 
  LiveReg: %315
  UpdateRegP: SU(5) STRDroX %315:fpr64, %316:gpr64common, %311:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
              to GPR32 1
  UpdateRegP: SU(8) %319:fpr64 = FMULDrr %318:fpr64, %315:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 5 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 10 + 4c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %315:fpr64, %316:gpr64common, %311:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %311
  UpdateRegP: SU(2) %312:fpr64 = LDRDroX %310:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(3) %314:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDroX %315:fpr64, %316:gpr64common, %311:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
              to 
  UpdateRegP: SU(7) %318:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 11 4 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 9 + 5c > CritPath 12
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %321:gpr32common = nsw ADDWri %308.sub_32:gpr64common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %308
  UpdateRegP: SU(1) %311:gpr64 = UBFMXri %308:gpr64common, 61, 60
              to GPR32 -1
  UpdateRegP: SU(11) %321:gpr32common = nsw ADDWri %308.sub_32:gpr64common, 1, 0
              to GPR32 -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 9 + 6c > CritPath 12
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %317:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %308:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
Top Pressure:
GPR32=4
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %311:gpr64 = UBFMXri %308:gpr64common, 61, 60
Top Pressure:
GPR32=5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 7 3 2 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 7c > CritPath 12
TopQ.A RemLatency SU(3) 7c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(4) %315:fpr64 = FMULDrr %312:fpr64, %314:fpr64
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %312
  UpdateRegP: SU(4) %315:fpr64 = FMULDrr %312:fpr64, %314:fpr64
              to 
  LiveReg: %314
  UpdateRegP: SU(4) %315:fpr64 = FMULDrr %312:fpr64, %314:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %318:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @8c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 2 3 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 12
TopQ.A RemLatency SU(2) 7c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %314:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @11c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %312:fpr64 = LDRDroX %310:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
Bottom Pressure:
GPR32=5
  Ready @12c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %308:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %311:gpr64 = UBFMXri %308:gpr64common, 61, 60
SU(2):   %312:fpr64 = LDRDroX %310:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
SU(3):   %314:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
SU(7):   %318:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
SU(4):   %315:fpr64 = FMULDrr %312:fpr64, %314:fpr64
SU(6):   %317:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
SU(11):   %321:gpr32common = nsw ADDWri %308.sub_32:gpr64common, 1, 0
SU(5):   STRDroX %315:fpr64, %316:gpr64common, %311:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
SU(8):   %319:fpr64 = FMULDrr %318:fpr64, %315:fpr64
SU(9):   %320:fpr64 = FADDDrr %317:fpr64, %319:fpr64
SU(10):   STRDui %320:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
SU(12):   STRWui %321:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)

********** MI Scheduling **********
diffusion:%bb.19 for.end88
  From: %23:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 22
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=5
GPR32=20
Live In: 
Live Out: %130 %197 %195 %219 %64 %62 %57 %55 %231 %228 %225 %49 %300 %276 %270 %260 %256 %254 %44 %25 
Live Thru: 
  LiveReg: %130
  LiveReg: %197
  LiveReg: %195
  LiveReg: %219
  LiveReg: %64
  LiveReg: %62
  LiveReg: %57
  LiveReg: %55
  LiveReg: %231
  LiveReg: %228
  LiveReg: %225
  LiveReg: %49
  LiveReg: %300
  LiveReg: %276
  LiveReg: %270
  LiveReg: %260
  LiveReg: %256
  LiveReg: %254
  LiveReg: %44
  LiveReg: %25
Top Pressure:

Bottom Pressure:
GPR64temp=5
GPR32=20
GPR32 Limit 15 Actual 20
Excess PSets: GPR32 
SU(0):   %23:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%23
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRWui %23:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%23
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %25:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(3):   %44:gpr64temp = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(4):   undef %254.sub_32:gpr64 = MOVi32imm 1000
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %256:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   undef %260.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %270:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %276:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %300:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   %49:gpr64temp = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(11):   %225:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %228:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   %231:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %55:gpr64temp = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(15):   %57:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   %62:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   %64:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(18):   %219:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   undef %195.sub_32:gpr64 = MOVi32imm 24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   %197:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 
Picking from Bot:
  Try  SU(21) GPR32:-1
  Cand SU(21) ORDER                              
  Try  SU(20) GPR32:-1
  Try  SU(19) GPR32:-1
  Try  SU(18) GPR32:-1
  Try  SU(17) GPR32:-1
  Try  SU(16) GPR32:-1
  Try  SU(15) GPR32:-1
  Try  SU(14) GPR32:-1
  Try  SU(13) GPR32:-1
  Try  SU(12) GPR32:-1
  Try  SU(11) GPR32:-1
  Try  SU(10) GPR32:-1
  Try  SU(9) GPR32:-1
  Try  SU(8) GPR32:-1
  Try  SU(7) GPR32:-1
  Try  SU(6) GPR32:-1
  Try  SU(5) GPR32:-1
  Try  SU(4) GPR32:-1
  Try  SU(3) GPR32:-1
  Try  SU(2) GPR32:-1
  Try  SU(1) GPR32:1
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-EXCESS
Scheduling SU(21) %130:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor
Bottom Pressure:
GPR64temp=5
GPR32=19
  GPR32: 20 > 15(+ 0 livethru)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Try  SU(1) GPR32:1
  Cand SU(1) ORDER                              
  Try  SU(20) GPR32:-1
  Cand SU(20) REG-EXCESS GPR32:-1                    
  Try  SU(19) GPR32:-1
  Try  SU(18) GPR32:-1
  Try  SU(17) GPR32:-1
  Try  SU(16) GPR32:-1
  Try  SU(15) GPR32:-1
  Try  SU(14) GPR32:-1
  Try  SU(13) GPR32:-1
  Try  SU(12) GPR32:-1
  Try  SU(11) GPR32:-1
  Try  SU(10) GPR32:-1
  Try  SU(9) GPR32:-1
  Try  SU(8) GPR32:-1
  Try  SU(7) GPR32:-1
  Try  SU(6) GPR32:-1
  Try  SU(5) GPR32:-1
  Try  SU(4) GPR32:-1
  Try  SU(3) GPR32:-1
  Try  SU(2) GPR32:-1
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-EXCESS
Scheduling SU(20) %197:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
Bottom Pressure:
GPR64temp=5
GPR32=18
  GPR32: 20 > 15(+ 0 livethru)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Try  SU(1) GPR32:1
  Cand SU(1) ORDER                              
  Try  SU(2) GPR32:-1
  Cand SU(2) REG-EXCESS GPR32:-1                    
  Try  SU(19) GPR32:-1
  Cand SU(19) ORDER                              
  Try  SU(18) GPR32:-1
  Try  SU(17) GPR32:-1
  Try  SU(16) GPR32:-1
  Try  SU(15) GPR32:-1
  Try  SU(14) GPR32:-1
  Try  SU(13) GPR32:-1
  Try  SU(12) GPR32:-1
  Try  SU(11) GPR32:-1
  Try  SU(10) GPR32:-1
  Try  SU(9) GPR32:-1
  Try  SU(8) GPR32:-1
  Try  SU(7) GPR32:-1
  Try  SU(6) GPR32:-1
  Try  SU(5) GPR32:-1
  Try  SU(4) GPR32:-1
  Try  SU(3) GPR32:-1
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-EXCESS
Scheduling SU(19) undef %195.sub_32:gpr64 = MOVi32imm 24
Bottom Pressure:
GPR64temp=5
GPR32=17
  GPR32: 20 > 15(+ 0 livethru)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Try  SU(1) GPR32:1
  Cand SU(1) ORDER                              
  Try  SU(2) GPR32:-1
  Cand SU(2) REG-EXCESS GPR32:-1                    
  Try  SU(3) GPR32:-1
  Cand SU(3) ORDER                              
  Try  SU(18) GPR32:-1
  Cand SU(18) ORDER                              
  Try  SU(17) GPR32:-1
  Try  SU(16) GPR32:-1
  Try  SU(15) GPR32:-1
  Try  SU(14) GPR32:-1
  Try  SU(13) GPR32:-1
  Try  SU(12) GPR32:-1
  Try  SU(11) GPR32:-1
  Try  SU(10) GPR32:-1
  Try  SU(9) GPR32:-1
  Try  SU(8) GPR32:-1
  Try  SU(7) GPR32:-1
  Try  SU(6) GPR32:-1
  Try  SU(5) GPR32:-1
  Try  SU(4) GPR32:-1
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-EXCESS
Scheduling SU(18) %219:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
Bottom Pressure:
GPR64temp=5
GPR32=16
  GPR32: 20 > 15(+ 0 livethru)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 4 17 16 15 14 13 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Try  SU(1) GPR32:1
  Cand SU(1) ORDER                              
  Try  SU(2) GPR32:-1
  Cand SU(2) REG-EXCESS GPR32:-1                    
  Try  SU(3) GPR32:-1
  Cand SU(3) ORDER                              
  Try  SU(4) GPR32:-1
  Cand SU(4) ORDER                              
  Try  SU(17) GPR32:-1
  Cand SU(17) ORDER                              
  Try  SU(16) GPR32:-1
  Try  SU(15) GPR32:-1
  Try  SU(14) GPR32:-1
  Try  SU(13) GPR32:-1
  Try  SU(12) GPR32:-1
  Try  SU(11) GPR32:-1
  Try  SU(10) GPR32:-1
  Try  SU(9) GPR32:-1
  Try  SU(8) GPR32:-1
  Try  SU(7) GPR32:-1
  Try  SU(6) GPR32:-1
  Try  SU(5) GPR32:-1
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-EXCESS
Scheduling SU(17) %64:gpr64temp = ADRP target-flags(aarch64-page) @timeron
Bottom Pressure:
GPR64temp=4
GPR32=15
  GPR64temp: 5 <= 6(+ 0 livethru)
  GPR32: 20 > 15(+ 0 livethru)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 4 5 16 15 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Try  SU(1) GPR32:1
  Cand SU(1) ORDER                              
  Cand SU(2) REG-EXCESS                         
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %62:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
Bottom Pressure:
GPR64temp=4
GPR32=14
  GPR32: 20 > 15(+ 0 livethru)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 4 5 6 15 14 13 12 11 10 9 8 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %23:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
Bottom Pressure:
GPR64temp=4
GPR32=15
  GPR32: 20 > 15(+ 0 livethru)
  LiveReg: %23
  UpdateRegP: SU(1) STRWui %23:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
              to 
  Ready @6c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 15 14 13 12 11 10 9 8 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) %57:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
Bottom Pressure:
GPR64temp=4
GPR32=14
  GPR32: 20 > 15(+ 0 livethru)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 0 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %55:gpr64temp = ADRP target-flags(aarch64-page) @ntot
Bottom Pressure:
GPR64temp=3
GPR32=13
  GPR64temp: 5 <= 6(+ 0 livethru)
  GPR32: 20 > 15(+ 0 livethru)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 0 8 13 12 11 10 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 13 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %231:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
Bottom Pressure:
GPR64temp=3
GPR32=12
  GPR32: 20 > 15(+ 0 livethru)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 0 8 9 12 11 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 12 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %228:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
Bottom Pressure:
GPR64temp=3
GPR32=11
  GPR32: 20 > 15(+ 0 livethru)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 0 8 9 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 11 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %225:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
Bottom Pressure:
GPR64temp=3
GPR32=10
  GPR32: 20 > 15(+ 0 livethru)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 0 8 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 10 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %49:gpr64temp = ADRP target-flags(aarch64-page) @nmor
Bottom Pressure:
GPR64temp=2
GPR32=9
  GPR64temp: 5 <= 6(+ 0 livethru)
  GPR32: 20 > 15(+ 0 livethru)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 0 8 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 9 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %300:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult
Bottom Pressure:
GPR64temp=2
GPR32=8
  GPR32: 20 > 15(+ 0 livethru)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 0 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 8 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %276:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
Bottom Pressure:
GPR64temp=2
GPR32=7
  GPR32: 20 > 15(+ 0 livethru)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %270:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
Bottom Pressure:
GPR64temp=2
GPR32=6
  GPR32: 20 > 15(+ 0 livethru)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) undef %260.sub_32:gpr64 = MOVi32imm 200
Bottom Pressure:
GPR64temp=2
GPR32=5
  GPR32: 20 > 15(+ 0 livethru)
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %256:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
Bottom Pressure:
GPR64temp=2
GPR32=4
  GPR32: 20 > 15(+ 0 livethru)
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) undef %254.sub_32:gpr64 = MOVi32imm 1000
Bottom Pressure:
GPR64temp=2
GPR32=3
  GPR32: 20 > 15(+ 0 livethru)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %44:gpr64temp = ADRP target-flags(aarch64-page) @nelt
Bottom Pressure:
GPR64temp=1
GPR32=2
  GPR64temp: 5 <= 6(+ 0 livethru)
  GPR32: 20 > 15(+ 0 livethru)
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %25:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
Bottom Pressure:
GPR32=1
  GPR64temp: 5 <= 6(+ 0 livethru)
  GPR32: 20 > 15(+ 0 livethru)
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %23:gpr32 = MOVi32imm 1
Bottom Pressure:

  GPR32: 20 > 15(+ 0 livethru)
  Ready @21c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %23:gpr32 = MOVi32imm 1
SU(2):   %25:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
SU(3):   %44:gpr64temp = ADRP target-flags(aarch64-page) @nelt
SU(4):   undef %254.sub_32:gpr64 = MOVi32imm 1000
SU(5):   %256:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
SU(6):   undef %260.sub_32:gpr64 = MOVi32imm 200
SU(7):   %270:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
SU(8):   %276:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
SU(9):   %300:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult
SU(10):   %49:gpr64temp = ADRP target-flags(aarch64-page) @nmor
SU(11):   %225:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
SU(12):   %228:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
SU(13):   %231:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
SU(14):   %55:gpr64temp = ADRP target-flags(aarch64-page) @ntot
SU(15):   %57:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
SU(1):   STRWui %23:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
SU(16):   %62:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
SU(17):   %64:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(18):   %219:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
SU(19):   undef %195.sub_32:gpr64 = MOVi32imm 24
SU(20):   %197:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
SU(21):   %130:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor

********** MI Scheduling **********
diffusion:%bb.20 for.cond89
  From: %24:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
    To: Bcc 12, %bb.73, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(1):   %26:gpr32 = LDRWui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %24:gpr32, %26:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%26
    SU(0): Data Latency=4 Reg=%24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.73, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %24:gpr32, %26:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %26:gpr32 = LDRWui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %24:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
SU(1):   %26:gpr32 = LDRWui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(2):   dead $wzr = SUBSWrr %24:gpr32, %26:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.21 for.body91
  From: %39:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
    To: Bcc 11, %bb.38, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %39:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%39
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %39:gpr32common, 2, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.38, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %39:gpr32common, 2, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %39:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %39:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
SU(1):   dead $wzr = SUBSWri %39:gpr32common, 2, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.22 if.then93
  From: STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.23 for.cond94
  From: %43:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.34, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %43:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%43
  Single Issue       : false;
SU(1):   %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%45
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %43:gpr32, %45:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%45
    SU(0): Data Latency=4 Reg=%43
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.34, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %43:gpr32, %45:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %43:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %43:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %43:gpr32, %45:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.25 for.cond97
  From: %238:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.33, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %238:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%238
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %238:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%238
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.33, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %238:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %238:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %238:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %238:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.27 for.cond100
  From: %243:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.32, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %243:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%243
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %243:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%243
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.32, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %243:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %243:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %243:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %243:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.29 for.cond103
  From: %248:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.31, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %248:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%248
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %248:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%248
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.31, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %248:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %248:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %248:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %248:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.30 for.body105
  From: %252:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.29
 RegionInstrs: 50
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=12
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %300 %276 %260 %270 %254 %256 
Live Out: %300 %276 %260 %270 %254 %256 
Live Thru: GPR32=6
  LiveReg: %300
  UpdateRegP: SU(41) %301:gpr64 = ADDXrr %300:gpr64, %282:gpr64
              to 
  LiveReg: %276
  UpdateRegP: SU(18) %277:gpr64 = ADDXrr %276:gpr64, %255:gpr64
              to 
  UpdateRegP: SU(36) %295:gpr64 = ADDXrr %276:gpr64, %282:gpr64
              to 
  LiveReg: %260
  UpdateRegP: SU(4) %261:gpr64 = MADDXrrr %258:gpr64, %260:gpr64, $xzr
              to 
  UpdateRegP: SU(27) %285:gpr64 = MADDXrrr %284:gpr64, %260:gpr64, $xzr
              to 
  LiveReg: %270
  UpdateRegP: SU(13) %271:gpr64 = ADDXrr %270:gpr64, %255:gpr64
              to 
  UpdateRegP: SU(25) %283:gpr64 = ADDXrr %270:gpr64, %282:gpr64
              to 
  LiveReg: %254
  UpdateRegP: SU(1) %255:gpr64 = MADDXrrr %252:gpr64, %254:gpr64, $xzr
              to 
  UpdateRegP: SU(24) %282:gpr64 = MADDXrrr %281:gpr64, %254:gpr64, $xzr
              to 
  LiveReg: %256
  UpdateRegP: SU(2) %257:gpr64 = ADDXrr %256:gpr64, %255:gpr64
              to 
Top Pressure:
GPR32=6
Bottom Pressure:
GPR32=6
Excess PSets: 
Cluster ld/st SU(3) - SU(26)
  Copy Succ SU(4)
Cluster ld/st SU(6) - SU(29)
  Copy Succ SU(7)
Cluster ld/st SU(10) - SU(33)
  Copy Succ SU(11)
  Copy Succ SU(49)
Cluster ld/st SU(0) - SU(23)
  Copy Succ SU(1)
SU(0):   %252:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(1): Data Latency=4 Reg=%252
    SU(23): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %255:gpr64 = MADDXrrr %252:gpr64, %254:gpr64, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(0): Data Latency=4 Reg=%252
    SU(23): Ord  Latency=0 Artificial
  Successors:
    SU(18): Data Latency=1 Reg=%255
    SU(13): Data Latency=1 Reg=%255
    SU(2): Data Latency=1 Reg=%255
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %257:gpr64 = ADDXrr %256:gpr64, %255:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%255
  Successors:
    SU(5): Data Latency=1 Reg=%257
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %258:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(4): Data Latency=4 Reg=%258
    SU(26): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %261:gpr64 = MADDXrrr %258:gpr64, %260:gpr64, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(3): Data Latency=4 Reg=%258
    SU(26): Ord  Latency=0 Artificial
  Successors:
    SU(19): Data Latency=1 Reg=%261
    SU(14): Data Latency=1 Reg=%261
    SU(5): Data Latency=1 Reg=%261
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %262:gpr64 = ADDXrr %257:gpr64, %261:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(2): Data Latency=1 Reg=%257
    SU(4): Data Latency=1 Reg=%261
  Successors:
    SU(9): Data Latency=1 Reg=%262
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %263:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(7): Data Latency=4 Reg=%263
    SU(29): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %264:gpr64 = ADDXrs %263:gpr64, %263:gpr64, 2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(6): Data Latency=4 Reg=%263
    SU(29): Ord  Latency=0 Artificial
  Successors:
    SU(8): Data Latency=1 Reg=%264
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   %265:gpr64 = UBFMXri %264:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(7): Data Latency=1 Reg=%264
  Successors:
    SU(20): Data Latency=1 Reg=%265
    SU(15): Data Latency=1 Reg=%265
    SU(9): Data Latency=1 Reg=%265
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %266:gpr64common = ADDXrr %262:gpr64, %265:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(5): Data Latency=1 Reg=%262
    SU(8): Data Latency=1 Reg=%265
  Successors:
    SU(12): Data Latency=1 Reg=%266
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %267:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(11): Data Latency=4 Reg=%267
    SU(49): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %268:gpr64 = UBFMXri %267:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(10): Data Latency=4 Reg=%267
    SU(33): Ord  Latency=0 Artificial
  Successors:
    SU(21): Data Latency=1 Reg=%268
    SU(16): Data Latency=1 Reg=%268
    SU(12): Data Latency=1 Reg=%268
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %269:fpr64 = LDRDroX %266:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(9): Data Latency=1 Reg=%266
    SU(11): Data Latency=1 Reg=%268
  Successors:
    SU(17): Data Latency=4 Reg=%269
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(13):   %271:gpr64 = ADDXrr %270:gpr64, %255:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%255
  Successors:
    SU(14): Data Latency=1 Reg=%271
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %272:gpr64 = ADDXrr %271:gpr64, %261:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(13): Data Latency=1 Reg=%271
    SU(4): Data Latency=1 Reg=%261
  Successors:
    SU(15): Data Latency=1 Reg=%272
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %273:gpr64common = ADDXrr %272:gpr64, %265:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(14): Data Latency=1 Reg=%272
    SU(8): Data Latency=1 Reg=%265
  Successors:
    SU(16): Data Latency=1 Reg=%273
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %274:fpr64 = LDRDroX %273:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(15): Data Latency=1 Reg=%273
    SU(11): Data Latency=1 Reg=%268
  Successors:
    SU(17): Data Latency=4 Reg=%274
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(17):   %275:fpr64 = FMULDrr %269:fpr64, %274:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 9
  Predecessors:
    SU(16): Data Latency=4 Reg=%274
    SU(12): Data Latency=4 Reg=%269
  Successors:
    SU(21): Data Latency=1 Reg=%275
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   %277:gpr64 = ADDXrr %276:gpr64, %255:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(1): Data Latency=1 Reg=%255
  Successors:
    SU(19): Data Latency=1 Reg=%277
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %278:gpr64 = ADDXrr %277:gpr64, %261:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(18): Data Latency=1 Reg=%277
    SU(4): Data Latency=1 Reg=%261
  Successors:
    SU(20): Data Latency=1 Reg=%278
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(20):   %279:gpr64common = ADDXrr %278:gpr64, %265:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(19): Data Latency=1 Reg=%278
    SU(8): Data Latency=1 Reg=%265
  Successors:
    SU(21): Data Latency=1 Reg=%279
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   STRDroX %275:fpr64, %279:gpr64common, %268:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(17): Data Latency=1 Reg=%275
    SU(20): Data Latency=1 Reg=%279
    SU(11): Data Latency=1 Reg=%268
  Successors:
    SU(39): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(22):   %280:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(46): Data Latency=4 Reg=%280
    SU(47): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(23):   %281:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Predecessors:
    SU(0): Ord  Latency=0 Cluster
  Successors:
    SU(24): Data Latency=4 Reg=%281
    SU(1): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   %282:gpr64 = MADDXrrr %281:gpr64, %254:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(23): Data Latency=4 Reg=%281
  Successors:
    SU(41): Data Latency=1 Reg=%282
    SU(36): Data Latency=1 Reg=%282
    SU(25): Data Latency=1 Reg=%282
  Pressure Diff      : 
  Single Issue       : false;
SU(25):   %283:gpr64 = ADDXrr %270:gpr64, %282:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%282
  Successors:
    SU(28): Data Latency=1 Reg=%283
  Pressure Diff      : 
  Single Issue       : false;
SU(26):   %284:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Predecessors:
    SU(3): Ord  Latency=0 Cluster
  Successors:
    SU(27): Data Latency=4 Reg=%284
    SU(4): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   %285:gpr64 = MADDXrrr %284:gpr64, %260:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(26): Data Latency=4 Reg=%284
  Successors:
    SU(42): Data Latency=1 Reg=%285
    SU(37): Data Latency=1 Reg=%285
    SU(28): Data Latency=1 Reg=%285
  Pressure Diff      : 
  Single Issue       : false;
SU(28):   %286:gpr64 = ADDXrr %283:gpr64, %285:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(25): Data Latency=1 Reg=%283
    SU(27): Data Latency=1 Reg=%285
  Successors:
    SU(32): Data Latency=1 Reg=%286
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(29):   %287:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Predecessors:
    SU(6): Ord  Latency=0 Cluster
  Successors:
    SU(30): Data Latency=4 Reg=%287
    SU(7): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(30):   %288:gpr64 = ADDXrs %287:gpr64, %287:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(29): Data Latency=4 Reg=%287
  Successors:
    SU(31): Data Latency=1 Reg=%288
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %289:gpr64 = UBFMXri %288:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(30): Data Latency=1 Reg=%288
  Successors:
    SU(43): Data Latency=1 Reg=%289
    SU(38): Data Latency=1 Reg=%289
    SU(32): Data Latency=1 Reg=%289
  Pressure Diff      : 
  Single Issue       : false;
SU(32):   %290:gpr64common = ADDXrr %286:gpr64, %289:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(28): Data Latency=1 Reg=%286
    SU(31): Data Latency=1 Reg=%289
  Successors:
    SU(35): Data Latency=1 Reg=%290
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(33):   %291:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Predecessors:
    SU(10): Ord  Latency=0 Cluster
  Successors:
    SU(48): Data Latency=4 Reg=%291
    SU(34): Data Latency=4 Reg=%291
    SU(49): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(34):   %293:gpr64 = UBFMXri %291:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(33): Data Latency=4 Reg=%291
  Successors:
    SU(44): Data Latency=1 Reg=%293
    SU(39): Data Latency=1 Reg=%293
    SU(35): Data Latency=1 Reg=%293
  Pressure Diff      : 
  Single Issue       : false;
SU(35):   %294:fpr64 = LDRDroX %290:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(32): Data Latency=1 Reg=%290
    SU(34): Data Latency=1 Reg=%293
  Successors:
    SU(40): Data Latency=4 Reg=%294
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(36):   %295:gpr64 = ADDXrr %276:gpr64, %282:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%282
  Successors:
    SU(37): Data Latency=1 Reg=%295
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %296:gpr64 = ADDXrr %295:gpr64, %285:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(36): Data Latency=1 Reg=%295
    SU(27): Data Latency=1 Reg=%285
  Successors:
    SU(38): Data Latency=1 Reg=%296
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(38):   %297:gpr64common = ADDXrr %296:gpr64, %289:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(37): Data Latency=1 Reg=%296
    SU(31): Data Latency=1 Reg=%289
  Successors:
    SU(39): Data Latency=1 Reg=%297
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(39):   %298:fpr64 = LDRDroX %297:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 7
  Predecessors:
    SU(38): Data Latency=1 Reg=%297
    SU(34): Data Latency=1 Reg=%293
    SU(21): Ord  Latency=1 Memory
  Successors:
    SU(40): Data Latency=4 Reg=%298
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(40):   %299:fpr64 = FMULDrr %294:fpr64, %298:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 3
  Predecessors:
    SU(39): Data Latency=4 Reg=%298
    SU(35): Data Latency=4 Reg=%294
  Successors:
    SU(45): Data Latency=1 Reg=%299
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(41):   %301:gpr64 = ADDXrr %300:gpr64, %282:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(24): Data Latency=1 Reg=%282
  Successors:
    SU(42): Data Latency=1 Reg=%301
  Pressure Diff      : 
  Single Issue       : false;
SU(42):   %302:gpr64 = ADDXrr %301:gpr64, %285:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(41): Data Latency=1 Reg=%301
    SU(27): Data Latency=1 Reg=%285
  Successors:
    SU(43): Data Latency=1 Reg=%302
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(43):   %303:gpr64common = ADDXrr %302:gpr64, %289:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(42): Data Latency=1 Reg=%302
    SU(31): Data Latency=1 Reg=%289
  Successors:
    SU(44): Data Latency=1 Reg=%303
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(44):   %304:fpr64 = LDRDroX %303:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(43): Data Latency=1 Reg=%303
    SU(34): Data Latency=1 Reg=%293
  Successors:
    SU(45): Data Latency=4 Reg=%304
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(45):   %305:fpr64 = FMULDrr %299:fpr64, %304:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 2
  Predecessors:
    SU(40): Data Latency=1 Reg=%299
    SU(44): Data Latency=4 Reg=%304
  Successors:
    SU(46): Data Latency=1 Reg=%305
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(46):   %306:fpr64 = FADDDrr %280:fpr64, %305:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 1
  Predecessors:
    SU(45): Data Latency=1 Reg=%305
    SU(22): Data Latency=4 Reg=%280
  Successors:
    SU(47): Data Latency=1 Reg=%306
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(47):   STRDui %306:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 0
  Predecessors:
    SU(46): Data Latency=1 Reg=%306
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(48):   %307:gpr32common = nsw ADDWri %291.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(33): Data Latency=4 Reg=%291
  Successors:
    SU(49): Data Latency=1 Reg=%307
  Pressure Diff      : 
  Single Issue       : false;
SU(49):   STRWui %307:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(48): Data Latency=1 Reg=%307
    SU(33): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 21
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 49 47 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
Picking from Bot:
  Cand SU(49) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(49) STRWui %307:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=7
  LiveReg: %307
  UpdateRegP: SU(49) STRWui %307:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(49) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 47 48 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(47) 21c
  BotQ.A RemainingLatency 21 + 1c > CritPath 21
Picking from Bot:
  Cand SU(47) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(47) STRDui %306:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %306
  UpdateRegP: SU(47) STRDui %306:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
              to 
  Ready @1c
  BotQ.A TopLatency SU(47) 21c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 46 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(46) 20c
  BotQ.A RemainingLatency 20 + 2c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
  Cand SU(46) BOT-PATH                  20 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(46) %306:fpr64 = FADDDrr %280:fpr64, %305:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %280
  UpdateRegP: SU(46) %306:fpr64 = FADDDrr %280:fpr64, %305:fpr64
              to 
  LiveReg: %305
  UpdateRegP: SU(46) %306:fpr64 = FADDDrr %280:fpr64, %305:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(46) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 
Queue BotQ.A: 48 45 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(45) 19c
  BotQ.A RemainingLatency 19 + 3c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
  Cand SU(45) BOT-PATH                  19 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(45) %305:fpr64 = FMULDrr %299:fpr64, %304:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %299
  UpdateRegP: SU(45) %305:fpr64 = FMULDrr %299:fpr64, %304:fpr64
              to 
  LiveReg: %304
  UpdateRegP: SU(45) %305:fpr64 = FMULDrr %299:fpr64, %304:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(45) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 44 
Queue BotQ.A: 48 40 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 22 23 26 29 33 
BotQ.A RemLatency SU(40) 18c
BotQ.A RemLatency SU(44) 8c
  BotQ.A RemainingLatency 18 + 4c > CritPath 21
Picking from Bot:
  Cand SU(48) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(48) %307:gpr32common = nsw ADDWri %291.sub_32:gpr64common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %291
  UpdateRegP: SU(34) %293:gpr64 = UBFMXri %291:gpr64common, 61, 60
              to GPR32 -1
  UpdateRegP: SU(48) %307:gpr32common = nsw ADDWri %291.sub_32:gpr64common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 22 44 
Queue BotQ.A: 40 
Pick Bot ONLY1     
Scheduling SU(40) %299:fpr64 = FMULDrr %294:fpr64, %298:fpr64
Bottom Pressure:
FPR8=4
GPR32=7
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %294
  UpdateRegP: SU(40) %299:fpr64 = FMULDrr %294:fpr64, %298:fpr64
              to 
  LiveReg: %298
  UpdateRegP: SU(40) %299:fpr64 = FMULDrr %294:fpr64, %298:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(40) 18c
  BotQ.A BotLatency SU(40) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 44 39 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) %280:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @6c
  BotQ.A BotLatency SU(22) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 39 
Queue BotQ.A: 44 
Pick Bot ONLY1     
Scheduling SU(44) %304:fpr64 = LDRDroX %303:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %303
  UpdateRegP: SU(44) %304:fpr64 = LDRDroX %303:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %293
  UpdateRegP: SU(35) %294:fpr64 = LDRDroX %290:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(39) %298:fpr64 = LDRDroX %297:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(44) %304:fpr64 = LDRDroX %303:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(44) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 35 39 
Queue BotQ.A: 43 
Pick Bot ONLY1     
Scheduling SU(43) %303:gpr64common = ADDXrr %302:gpr64, %289:gpr64
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %302
  UpdateRegP: SU(43) %303:gpr64common = ADDXrr %302:gpr64, %289:gpr64
              to 
  LiveReg: %289
  UpdateRegP: SU(32) %290:gpr64common = ADDXrr %286:gpr64, %289:gpr64
              to 
  UpdateRegP: SU(38) %297:gpr64common = ADDXrr %296:gpr64, %289:gpr64
              to 
  UpdateRegP: SU(43) %303:gpr64common = ADDXrr %302:gpr64, %289:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(43) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 35 39 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(39) 14c
  BotQ.A RemainingLatency 14 + 9c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  8 cycles 
  Cand SU(39) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(39) %298:fpr64 = LDRDroX %297:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
Bottom Pressure:
FPR8=1
GPR32=11
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %297
  UpdateRegP: SU(39) %298:fpr64 = LDRDroX %297:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 35 38 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 10c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(35) %294:fpr64 = LDRDroX %290:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
Bottom Pressure:
GPR32=12
  LiveReg: %290
  UpdateRegP: SU(35) %294:fpr64 = LDRDroX %290:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 38 32 34 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 11c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(38) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(38) %297:gpr64common = ADDXrr %296:gpr64, %289:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %296
  UpdateRegP: SU(38) %297:gpr64common = ADDXrr %296:gpr64, %289:gpr64
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(38) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 32 37 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 12c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(32) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(32) %290:gpr64common = ADDXrr %286:gpr64, %289:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %286
  UpdateRegP: SU(32) %290:gpr64common = ADDXrr %286:gpr64, %289:gpr64
              to GPR32 -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 37 28 31 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 13c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
  Cand SU(31) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(31) %289:gpr64 = UBFMXri %288:gpr64, 61, 60
Bottom Pressure:
GPR32=12
  LiveReg: %288
  UpdateRegP: SU(31) %289:gpr64 = UBFMXri %288:gpr64, 61, 60
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(31) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 34 37 28 30 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 14c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(34) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(34) %293:gpr64 = UBFMXri %291:gpr64common, 61, 60
Bottom Pressure:
GPR32=11
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 21 30 37 28 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 15c > CritPath 21
Picking from Bot:
  Cand SU(42) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(42) %302:gpr64 = ADDXrr %301:gpr64, %285:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %301
  UpdateRegP: SU(42) %302:gpr64 = ADDXrr %301:gpr64, %285:gpr64
              to 
  LiveReg: %285
  UpdateRegP: SU(28) %286:gpr64 = ADDXrr %283:gpr64, %285:gpr64
              to 
  UpdateRegP: SU(37) %296:gpr64 = ADDXrr %295:gpr64, %285:gpr64
              to 
  UpdateRegP: SU(42) %302:gpr64 = ADDXrr %301:gpr64, %285:gpr64
              to GPR32 -1
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 21 30 37 41 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 16c > CritPath 21
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(37) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(37) %296:gpr64 = ADDXrr %295:gpr64, %285:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %295
  UpdateRegP: SU(37) %296:gpr64 = ADDXrr %295:gpr64, %285:gpr64
              to GPR32 -1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 28 21 30 41 36 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 17c > CritPath 21
Picking from Bot:
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) %286:gpr64 = ADDXrr %283:gpr64, %285:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %283
  UpdateRegP: SU(28) %286:gpr64 = ADDXrr %283:gpr64, %285:gpr64
              to GPR32 -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 21 30 41 25 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 18c > CritPath 21
Picking from Bot:
  Cand SU(36) ORDER                              
  Cand SU(41) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(41) %301:gpr64 = ADDXrr %300:gpr64, %282:gpr64
Bottom Pressure:
GPR32=12
  LiveReg: %282
  UpdateRegP: SU(25) %283:gpr64 = ADDXrr %270:gpr64, %282:gpr64
              to GPR32 -1
  UpdateRegP: SU(36) %295:gpr64 = ADDXrr %276:gpr64, %282:gpr64
              to GPR32 -1
  UpdateRegP: SU(41) %301:gpr64 = ADDXrr %300:gpr64, %282:gpr64
              to GPR32 -1
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 21 30 27 25 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 19c > CritPath 21
Picking from Bot:
  Cand SU(36) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(36) %295:gpr64 = ADDXrr %276:gpr64, %282:gpr64
Bottom Pressure:
GPR32=11
  Ready @19c
  BotQ.A TopLatency SU(36) 5c
  BotQ.A BotLatency SU(36) 10c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 21 30 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 20c > CritPath 21
Picking from Bot:
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(25) %283:gpr64 = ADDXrr %270:gpr64, %282:gpr64
Bottom Pressure:
GPR32=10
  Ready @20c
  BotQ.A TopLatency SU(25) 5c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 21 30 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
BotQ.A RemLatency SU(21) 13c
  BotQ.A RemainingLatency 13 + 21c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(21) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(21) STRDroX %275:fpr64, %279:gpr64common, %268:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
Bottom Pressure:
FPR8=1
GPR32=12
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %275
  UpdateRegP: SU(21) STRDroX %275:fpr64, %279:gpr64common, %268:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
              to GPR32 2
  LiveReg: %279
  UpdateRegP: SU(21) STRDroX %275:fpr64, %279:gpr64common, %268:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
              to GPR32 1
  LiveReg: %268
  UpdateRegP: SU(12) %269:fpr64 = LDRDroX %266:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(16) %274:fpr64 = LDRDroX %273:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(21) STRDroX %275:fpr64, %279:gpr64common, %268:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
              to 
  Ready @21c
  BotQ.A TopLatency SU(21) 13c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 24 30 17 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 22c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(30) ORDER                              
  Cand SU(17) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(17) %275:fpr64 = FMULDrr %269:fpr64, %274:fpr64
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %269
  UpdateRegP: SU(17) %275:fpr64 = FMULDrr %269:fpr64, %274:fpr64
              to 
  LiveReg: %274
  UpdateRegP: SU(17) %275:fpr64 = FMULDrr %269:fpr64, %274:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 27 24 30 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 23c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
  Cand SU(30) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(30) %288:gpr64 = ADDXrs %287:gpr64, %287:gpr64, 2
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %287
  UpdateRegP: SU(30) %288:gpr64 = ADDXrs %287:gpr64, %287:gpr64, 2
              to GPR32 -1
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 27 24 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 24c > CritPath 21
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) %285:gpr64 = MADDXrrr %284:gpr64, %260:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %284
  UpdateRegP: SU(27) %285:gpr64 = MADDXrrr %284:gpr64, %260:gpr64, $xzr
              to GPR32 -1
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 16 12 
Queue BotQ.A: 20 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 25c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(24) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(24) %282:gpr64 = MADDXrrr %281:gpr64, %254:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %281
  UpdateRegP: SU(24) %282:gpr64 = MADDXrrr %281:gpr64, %254:gpr64, $xzr
              to GPR32 -1
  Ready @25c
  BotQ.A BotLatency SU(24) 11c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 16 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 26c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(16) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %274:fpr64 = LDRDroX %273:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
Bottom Pressure:
FPR8=1
GPR32=13
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR32: 13 <= 15(+ 6 livethru)
  LiveReg: %273
  UpdateRegP: SU(16) %274:fpr64 = LDRDroX %273:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @26c
  BotQ.A BotLatency SU(16) 13c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 27c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %269:fpr64 = LDRDroX %266:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
Bottom Pressure:
GPR32=14
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %266
  UpdateRegP: SU(12) %269:fpr64 = LDRDroX %266:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @27c
  BotQ.A TopLatency SU(12) 8c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 15 9 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 28c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(11) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %268:gpr64 = UBFMXri %267:gpr64, 61, 60
Bottom Pressure:
GPR32=14
  LiveReg: %267
  UpdateRegP: SU(11) %268:gpr64 = UBFMXri %267:gpr64, 61, 60
              to GPR32 -1
  Ready @28c
  BotQ.A BotLatency SU(11) 14c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 20 15 9 33 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 33 23 26 29 
  BotQ.A RemainingLatency 0 + 29c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(33) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(33) %291:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=13
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 20 15 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 30c > CritPath 21
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %279:gpr64common = ADDXrr %278:gpr64, %265:gpr64
Bottom Pressure:
GPR32=14
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %278
  UpdateRegP: SU(20) %279:gpr64common = ADDXrr %278:gpr64, %265:gpr64
              to 
  LiveReg: %265
  UpdateRegP: SU(9) %266:gpr64common = ADDXrr %262:gpr64, %265:gpr64
              to 
  UpdateRegP: SU(15) %273:gpr64common = ADDXrr %272:gpr64, %265:gpr64
              to 
  UpdateRegP: SU(20) %279:gpr64common = ADDXrr %278:gpr64, %265:gpr64
              to GPR32 -1
  Ready @30c
  BotQ.A TopLatency SU(20) 7c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 9 15 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 31c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %273:gpr64common = ADDXrr %272:gpr64, %265:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %272
  UpdateRegP: SU(15) %273:gpr64common = ADDXrr %272:gpr64, %265:gpr64
              to GPR32 -1
  Ready @31c
  BotQ.A TopLatency SU(15) 7c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 19 14 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 10 29 23 26 
  BotQ.A RemainingLatency 0 + 32c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(10) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(10) %267:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=13
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @32c
  BotQ.A BotLatency SU(10) 18c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 33c > CritPath 21
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %266:gpr64common = ADDXrr %262:gpr64, %265:gpr64
Bottom Pressure:
GPR32=13
  LiveReg: %262
  UpdateRegP: SU(9) %266:gpr64common = ADDXrr %262:gpr64, %265:gpr64
              to GPR32 -1
  Ready @33c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 19 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 34c > CritPath 21
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %278:gpr64 = ADDXrr %277:gpr64, %261:gpr64
Bottom Pressure:
GPR32=14
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %277
  UpdateRegP: SU(19) %278:gpr64 = ADDXrr %277:gpr64, %261:gpr64
              to 
  LiveReg: %261
  UpdateRegP: SU(5) %262:gpr64 = ADDXrr %257:gpr64, %261:gpr64
              to 
  UpdateRegP: SU(14) %272:gpr64 = ADDXrr %271:gpr64, %261:gpr64
              to 
  UpdateRegP: SU(19) %278:gpr64 = ADDXrr %277:gpr64, %261:gpr64
              to GPR32 -1
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 8 5 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 35c > CritPath 21
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %272:gpr64 = ADDXrr %271:gpr64, %261:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %271
  UpdateRegP: SU(14) %272:gpr64 = ADDXrr %271:gpr64, %261:gpr64
              to GPR32 -1
  Ready @35c
  BotQ.A TopLatency SU(14) 6c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 8 5 13 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 36c > CritPath 21
Picking from Bot:
  Cand SU(18) ORDER                              
  Cand SU(5) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %262:gpr64 = ADDXrr %257:gpr64, %261:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %257
  UpdateRegP: SU(5) %262:gpr64 = ADDXrr %257:gpr64, %261:gpr64
              to GPR32 -1
  Ready @36c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 8 13 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 37c > CritPath 21
Picking from Bot:
  Cand SU(18) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %277:gpr64 = ADDXrr %276:gpr64, %255:gpr64
Bottom Pressure:
GPR32=14
  LiveReg: %255
  UpdateRegP: SU(2) %257:gpr64 = ADDXrr %256:gpr64, %255:gpr64
              to GPR32 -1
  UpdateRegP: SU(13) %271:gpr64 = ADDXrr %270:gpr64, %255:gpr64
              to GPR32 -1
  UpdateRegP: SU(18) %277:gpr64 = ADDXrr %276:gpr64, %255:gpr64
              to GPR32 -1
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 13 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 38c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %271:gpr64 = ADDXrr %270:gpr64, %255:gpr64
Bottom Pressure:
GPR32=13
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @38c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 39c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(8) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %265:gpr64 = UBFMXri %264:gpr64, 61, 60
Bottom Pressure:
GPR32=13
  LiveReg: %264
  UpdateRegP: SU(8) %265:gpr64 = UBFMXri %264:gpr64, 61, 60
              to GPR32 -1
  Ready @39c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 40c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %257:gpr64 = ADDXrr %256:gpr64, %255:gpr64
Bottom Pressure:
GPR32=12
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @40c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 40
Cycle: 41 BotQ.A
BotQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 41c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %264:gpr64 = ADDXrs %263:gpr64, %263:gpr64, 2
Bottom Pressure:
GPR32=12
  LiveReg: %263
  UpdateRegP: SU(7) %264:gpr64 = ADDXrs %263:gpr64, %263:gpr64, 2
              to GPR32 -1
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 BotQ.A
BotQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 1 29 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 42c > CritPath 21
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %261:gpr64 = MADDXrrr %258:gpr64, %260:gpr64, $xzr
Bottom Pressure:
GPR32=12
  LiveReg: %258
  UpdateRegP: SU(4) %261:gpr64 = MADDXrrr %258:gpr64, %260:gpr64, $xzr
              to GPR32 -1
  Ready @42c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 42
Cycle: 43 BotQ.A
BotQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 
Queue BotQ.A: 29 1 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 43c > CritPath 21
Picking from Bot:
  Cand SU(29) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %255:gpr64 = MADDXrrr %252:gpr64, %254:gpr64, $xzr
Bottom Pressure:
GPR32=12
  LiveReg: %252
  UpdateRegP: SU(1) %255:gpr64 = MADDXrrr %252:gpr64, %254:gpr64, $xzr
              to GPR32 -1
  Ready @43c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 43
Cycle: 44 BotQ.A
BotQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 3 0 
Queue BotQ.A: 29 26 23 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 29 23 
  BotQ.A RemainingLatency 0 + 44c > CritPath 21
Picking from Bot:
  Cand SU(29) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(29) %287:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=11
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 BotQ.A
BotQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 23 26 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 6 26 23 
  BotQ.A RemainingLatency 0 + 45c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(6) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(6) %263:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=10
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @45c
  BotQ.A BotLatency SU(6) 20c
  *** Max MOps 1 at cycle 45
Cycle: 46 BotQ.A
BotQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 23 26 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 23 26 
  BotQ.A RemainingLatency 0 + 46c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(26) %284:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=9
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @46c
  *** Max MOps 1 at cycle 46
Cycle: 47 BotQ.A
BotQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 23 
  BotQ.A RemainingLatency 0 + 47c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
  Cand SU(3) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(3) %258:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=8
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @47c
  *** Max MOps 1 at cycle 47
Cycle: 48 BotQ.A
BotQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 23 0 
Queue TopQ.P: 
Queue TopQ.A: 0 23 
  BotQ.A RemainingLatency 0 + 48c > CritPath 21
Picking from Bot:
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(23) %281:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=7
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @48c
  *** Max MOps 1 at cycle 48
Cycle: 49 BotQ.A
BotQ.A @49c
  Retired: 49
  Executed: 49c
  Critical: 49c, 49 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %252:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=6
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @49c
  BotQ.A BotLatency SU(0) 21c
  *** Max MOps 1 at cycle 49
Cycle: 50 BotQ.A
BotQ.A @50c
  Retired: 50
  Executed: 50c
  Critical: 50c, 50 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %252:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(23):   %281:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(3):   %258:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(26):   %284:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(6):   %263:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(29):   %287:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %255:gpr64 = MADDXrrr %252:gpr64, %254:gpr64, $xzr
SU(4):   %261:gpr64 = MADDXrrr %258:gpr64, %260:gpr64, $xzr
SU(7):   %264:gpr64 = ADDXrs %263:gpr64, %263:gpr64, 2
SU(2):   %257:gpr64 = ADDXrr %256:gpr64, %255:gpr64
SU(8):   %265:gpr64 = UBFMXri %264:gpr64, 61, 60
SU(13):   %271:gpr64 = ADDXrr %270:gpr64, %255:gpr64
SU(18):   %277:gpr64 = ADDXrr %276:gpr64, %255:gpr64
SU(5):   %262:gpr64 = ADDXrr %257:gpr64, %261:gpr64
SU(14):   %272:gpr64 = ADDXrr %271:gpr64, %261:gpr64
SU(19):   %278:gpr64 = ADDXrr %277:gpr64, %261:gpr64
SU(9):   %266:gpr64common = ADDXrr %262:gpr64, %265:gpr64
SU(10):   %267:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(15):   %273:gpr64common = ADDXrr %272:gpr64, %265:gpr64
SU(20):   %279:gpr64common = ADDXrr %278:gpr64, %265:gpr64
SU(33):   %291:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(11):   %268:gpr64 = UBFMXri %267:gpr64, 61, 60
SU(12):   %269:fpr64 = LDRDroX %266:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
SU(16):   %274:fpr64 = LDRDroX %273:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
SU(24):   %282:gpr64 = MADDXrrr %281:gpr64, %254:gpr64, $xzr
SU(27):   %285:gpr64 = MADDXrrr %284:gpr64, %260:gpr64, $xzr
SU(30):   %288:gpr64 = ADDXrs %287:gpr64, %287:gpr64, 2
SU(17):   %275:fpr64 = FMULDrr %269:fpr64, %274:fpr64
SU(21):   STRDroX %275:fpr64, %279:gpr64common, %268:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
SU(25):   %283:gpr64 = ADDXrr %270:gpr64, %282:gpr64
SU(36):   %295:gpr64 = ADDXrr %276:gpr64, %282:gpr64
SU(41):   %301:gpr64 = ADDXrr %300:gpr64, %282:gpr64
SU(28):   %286:gpr64 = ADDXrr %283:gpr64, %285:gpr64
SU(37):   %296:gpr64 = ADDXrr %295:gpr64, %285:gpr64
SU(42):   %302:gpr64 = ADDXrr %301:gpr64, %285:gpr64
SU(34):   %293:gpr64 = UBFMXri %291:gpr64common, 61, 60
SU(31):   %289:gpr64 = UBFMXri %288:gpr64, 61, 60
SU(32):   %290:gpr64common = ADDXrr %286:gpr64, %289:gpr64
SU(38):   %297:gpr64common = ADDXrr %296:gpr64, %289:gpr64
SU(35):   %294:fpr64 = LDRDroX %290:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
SU(39):   %298:fpr64 = LDRDroX %297:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
SU(43):   %303:gpr64common = ADDXrr %302:gpr64, %289:gpr64
SU(44):   %304:fpr64 = LDRDroX %303:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
SU(22):   %280:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
SU(40):   %299:fpr64 = FMULDrr %294:fpr64, %298:fpr64
SU(48):   %307:gpr32common = nsw ADDWri %291.sub_32:gpr64common, 1, 0
SU(45):   %305:fpr64 = FMULDrr %299:fpr64, %304:fpr64
SU(46):   %306:fpr64 = FADDDrr %280:fpr64, %305:fpr64
SU(47):   STRDui %306:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
SU(49):   STRWui %307:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
diffusion:%bb.31 for.inc161
  From: %250:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.27
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %250:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%250
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%250
  Successors:
    SU(2): Data Latency=1 Reg=%251
  Single Issue       : false;
SU(2):   STRWui %251:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%251
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %251:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %250:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %250:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
SU(2):   STRWui %251:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
diffusion:%bb.32 for.inc164
  From: %245:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %245:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%245
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%245
  Successors:
    SU(2): Data Latency=1 Reg=%246
  Single Issue       : false;
SU(2):   STRWui %246:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%246
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %246:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %245:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %245:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0
SU(2):   STRWui %246:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
diffusion:%bb.33 for.inc167
  From: %240:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.23
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %240:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%240
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %241:gpr32common = nsw ADDWri %240:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%240
  Successors:
    SU(2): Data Latency=1 Reg=%241
  Single Issue       : false;
SU(2):   STRWui %241:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%241
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %241:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %241:gpr32common = nsw ADDWri %240:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %240:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %240:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %241:gpr32common = nsw ADDWri %240:gpr32common, 1, 0
SU(2):   STRWui %241:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.35 for.cond170
  From: %48:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.37, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %48:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%48
  Single Issue       : false;
SU(1):   %50:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%50
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %48:gpr32, %50:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%50
    SU(0): Data Latency=4 Reg=%48
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.37, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %48:gpr32, %50:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %50:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %48:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %48:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %50:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   dead $wzr = SUBSWrr %48:gpr32, %50:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.36 for.body172
  From: %223:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.35
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %228 %231 %225 
Live Out: %228 %231 %225 
Live Thru: GPR32=3
  LiveReg: %228
  UpdateRegP: SU(3) %229:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(7) %233:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %231
  UpdateRegP: SU(5) STRDroX %230:fpr64, %231:gpr64common, %226:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
              to FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %225
  UpdateRegP: SU(2) %227:fpr64 = LDRDroX %225:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR32=3
Bottom Pressure:
GPR32=3
Excess PSets: 
SU(0):   %223:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(11): Data Latency=4 Reg=%223
    SU(1): Data Latency=4 Reg=%223
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %226:gpr64 = UBFMXri %223:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%223
  Successors:
    SU(7): Data Latency=1 Reg=%226
    SU(5): Data Latency=1 Reg=%226
    SU(3): Data Latency=1 Reg=%226
    SU(2): Data Latency=1 Reg=%226
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %227:fpr64 = LDRDroX %225:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%226
  Successors:
    SU(4): Data Latency=4 Reg=%227
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %229:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%226
  Successors:
    SU(4): Data Latency=4 Reg=%229
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %230:fpr64 = FMULDrr %227:fpr64, %229:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%229
    SU(2): Data Latency=4 Reg=%227
  Successors:
    SU(8): Data Latency=1 Reg=%230
    SU(5): Data Latency=1 Reg=%230
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDroX %230:fpr64, %231:gpr64common, %226:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%230
    SU(1): Data Latency=1 Reg=%226
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %232:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%232
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %233:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%226
  Successors:
    SU(8): Data Latency=4 Reg=%233
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %234:fpr64 = FMULDrr %233:fpr64, %230:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%230
    SU(7): Data Latency=4 Reg=%233
  Successors:
    SU(9): Data Latency=1 Reg=%234
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   %235:fpr64 = FADDDrr %232:fpr64, %234:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%234
    SU(6): Data Latency=4 Reg=%232
  Successors:
    SU(10): Data Latency=1 Reg=%235
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   STRDui %235:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%235
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   %236:gpr32common = nsw ADDWri %223.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%223
  Successors:
    SU(12): Data Latency=1 Reg=%236
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   STRWui %236:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%236
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.35
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 5 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %236:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
Bottom Pressure:
GPR32=4
  LiveReg: %236
  UpdateRegP: SU(12) STRWui %236:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
              to 
  Ready @0c
  BotQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(10) 12c
  BotQ.A RemainingLatency 12 + 1c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(10) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRDui %235:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %235
  UpdateRegP: SU(10) STRDui %235:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
              to 
  Ready @1c
  BotQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(9) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %235:fpr64 = FADDDrr %232:fpr64, %234:fpr64
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %232
  UpdateRegP: SU(9) %235:fpr64 = FADDDrr %232:fpr64, %234:fpr64
              to 
  LiveReg: %234
  UpdateRegP: SU(9) %235:fpr64 = FADDDrr %232:fpr64, %234:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 11 8 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %234:fpr64 = FMULDrr %233:fpr64, %230:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %233
  UpdateRegP: SU(8) %234:fpr64 = FMULDrr %233:fpr64, %230:fpr64
              to 
  LiveReg: %230
  UpdateRegP: SU(5) STRDroX %230:fpr64, %231:gpr64common, %226:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
              to GPR32 1
  UpdateRegP: SU(8) %234:fpr64 = FMULDrr %233:fpr64, %230:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 5 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 10 + 4c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %230:fpr64, %231:gpr64common, %226:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %226
  UpdateRegP: SU(2) %227:fpr64 = LDRDroX %225:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(3) %229:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDroX %230:fpr64, %231:gpr64common, %226:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
              to 
  UpdateRegP: SU(7) %233:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 11 4 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 9 + 5c > CritPath 12
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %236:gpr32common = nsw ADDWri %223.sub_32:gpr64common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %223
  UpdateRegP: SU(1) %226:gpr64 = UBFMXri %223:gpr64common, 61, 60
              to GPR32 -1
  UpdateRegP: SU(11) %236:gpr32common = nsw ADDWri %223.sub_32:gpr64common, 1, 0
              to GPR32 -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 9 + 6c > CritPath 12
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %232:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %223:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
Top Pressure:
GPR32=4
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %226:gpr64 = UBFMXri %223:gpr64common, 61, 60
Top Pressure:
GPR32=5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 7 3 2 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 7c > CritPath 12
TopQ.A RemLatency SU(3) 7c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(4) %230:fpr64 = FMULDrr %227:fpr64, %229:fpr64
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %227
  UpdateRegP: SU(4) %230:fpr64 = FMULDrr %227:fpr64, %229:fpr64
              to 
  LiveReg: %229
  UpdateRegP: SU(4) %230:fpr64 = FMULDrr %227:fpr64, %229:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %233:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @8c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 2 3 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 12
TopQ.A RemLatency SU(2) 7c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %229:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @11c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %227:fpr64 = LDRDroX %225:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
Bottom Pressure:
GPR32=5
  Ready @12c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %223:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %226:gpr64 = UBFMXri %223:gpr64common, 61, 60
SU(2):   %227:fpr64 = LDRDroX %225:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
SU(3):   %229:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
SU(7):   %233:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
SU(4):   %230:fpr64 = FMULDrr %227:fpr64, %229:fpr64
SU(6):   %232:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
SU(11):   %236:gpr32common = nsw ADDWri %223.sub_32:gpr64common, 1, 0
SU(5):   STRDroX %230:fpr64, %231:gpr64common, %226:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
SU(8):   %234:fpr64 = FMULDrr %233:fpr64, %230:fpr64
SU(9):   %235:fpr64 = FADDDrr %232:fpr64, %234:fpr64
SU(10):   STRDui %235:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
SU(12):   STRWui %236:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
    To: BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %59:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %61:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %61:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %59:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
SU(2):   $d0 = COPY %59:fpr64
SU(3):   $w2 = COPY %61:gpr32

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: %59:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %59:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %61:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %61:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %59:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %59:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
SU(1):   %61:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: $x0 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
    To: BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %54:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %56:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %56:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %54:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
SU(2):   $d0 = COPY %54:fpr64
SU(3):   $w2 = COPY %56:gpr32

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: %52:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %52:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%52
    SU(1): Data Latency=4 Reg=%52
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRDui %52:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%52
  Single Issue       : false;
SU(2):   %53:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%53
    SU(3): Data Latency=4 Reg=%53
  Single Issue       : false;
SU(3):   STRDui %53:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%53
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %54:fpr64 = FDIVDrr %53:fpr64, %52:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%53
    SU(0): Data Latency=4 Reg=%52
  Successors:
    SU(5): Data Latency=1 Reg=%54
  Single Issue       : false;
SU(5):   STRDui %54:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%54
  Single Issue       : false;
SU(6):   %56:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRDui %54:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 1 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(1) 4c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %54:fpr64 = FDIVDrr %53:fpr64, %52:fpr64
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRDui %53:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
  Ready @2c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRDui %52:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %56:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @4c
  BotQ.A BotLatency SU(6) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %53:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %52:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %52:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
SU(2):   %53:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
SU(6):   %56:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(1):   STRDui %52:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
SU(3):   STRDui %53:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
SU(4):   %54:fpr64 = FDIVDrr %53:fpr64, %52:fpr64
SU(5):   STRDui %54:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)

********** MI Scheduling **********
diffusion:%bb.40 if.end192
  From: $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
    To: BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff

********** MI Scheduling **********
diffusion:%bb.43 for.cond196
  From: %73:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.45, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %73:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%73
  Single Issue       : false;
SU(1):   %75:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%75
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %73:gpr32, %75:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%75
    SU(0): Data Latency=4 Reg=%73
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.45, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %73:gpr32, %75:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %75:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %73:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %73:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %75:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %73:gpr32, %75:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: %221:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.43
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %221:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%221
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%221
  Successors:
    SU(2): Data Latency=1 Reg=%222
  Single Issue       : false;
SU(2):   STRWui %222:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%222
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.43
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %222:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %221:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %221:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0
SU(2):   STRWui %222:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: $x0 = COPY %216:gpr64
    To: BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %216:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %218:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %220:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %220:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $x1 = COPY %218:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %216:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $x0 = COPY %216:gpr64
SU(1):   $x1 = COPY %218:gpr64
SU(2):   $w2 = COPY %220:gpr32

********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: %211:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %211:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=%211
    SU(1): Data Latency=4 Reg=%211
  Single Issue       : false;
SU(1):   %214:gpr64 = MADDXrrr %211:gpr64, %254:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%211
  Successors:
    SU(3): Data Latency=1 Reg=%214
    SU(2): Data Latency=1 Reg=%214
  Single Issue       : false;
SU(2):   %216:gpr64 = ADDXrr %276:gpr64, %214:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%214
  Single Issue       : false;
SU(3):   %218:gpr64 = ADDXrr %57:gpr64, %214:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%214
  Single Issue       : false;
SU(4):   %220:gpr32 = LDRWroX %219:gpr64common, %211:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%211
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %211:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 1 
TopQ.A RemLatency SU(4) 3c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %218:gpr64 = ADDXrr %57:gpr64, %214:gpr64
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %216:gpr64 = ADDXrr %276:gpr64, %214:gpr64
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %214:gpr64 = MADDXrrr %211:gpr64, %254:gpr64, $xzr
  Ready @2c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %220:gpr32 = LDRWroX %219:gpr64common, %211:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
  Ready @3c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %211:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(4):   %220:gpr32 = LDRWroX %219:gpr64common, %211:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
SU(1):   %214:gpr64 = MADDXrrr %211:gpr64, %254:gpr64, $xzr
SU(2):   %216:gpr64 = ADDXrr %276:gpr64, %214:gpr64
SU(3):   %218:gpr64 = ADDXrr %57:gpr64, %214:gpr64

********** MI Scheduling **********
diffusion:%bb.47 if.end211
  From: $x0 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
    To: BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp

********** MI Scheduling **********
diffusion:%bb.50 for.cond215
  From: %86:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.57, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %86:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%86
  Single Issue       : false;
SU(1):   %88:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%88
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %86:gpr32, %88:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%88
    SU(0): Data Latency=4 Reg=%86
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.57, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %86:gpr32, %88:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %88:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %86:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %86:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %88:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %86:gpr32, %88:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.52 for.cond218
  From: %189:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
    To: Bcc 12, %bb.56, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %189:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%189
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %189:gpr32common, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%189
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.56, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %189:gpr32common, 5, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %189:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %189:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   dead $wzr = SUBSWri %189:gpr32common, 5, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.53 for.body220
  From: %193:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: CBNZW %200:gpr32, %bb.55
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %193:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=%193
  Single Issue       : false;
SU(1):   %198:gpr64common = MADDXrrr %193:gpr64, %195:gpr64, %197:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=%193
  Successors:
    SU(3): Data Latency=1 Reg=%198
  Single Issue       : false;
SU(2):   %199:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%199
  Single Issue       : false;
SU(3):   %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=%198
    SU(2): Data Latency=4 Reg=%199
  Successors:
    ExitSU: Data Latency=4 Reg=%200
  Single Issue       : false;
ExitSU:   CBNZW %200:gpr32, %bb.55
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%200
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)
  Ready @4c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %198:gpr64common = MADDXrrr %193:gpr64, %195:gpr64, %197:gpr64
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %199:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %193:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @9c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %193:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(2):   %199:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %198:gpr64common = MADDXrrr %193:gpr64, %195:gpr64, %197:gpr64
SU(3):   %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)

********** MI Scheduling **********
diffusion:%bb.54 if.then226
  From: $x0 = COPY %206:gpr64
    To: BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %206:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %207:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = COPY %207:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %206:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = FMOVD0
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(2):   $d0 = FMOVD0
SU(0):   $x0 = COPY %206:gpr64
SU(1):   $w1 = COPY %207:gpr32

********** MI Scheduling **********
diffusion:%bb.54 if.then226
  From: %201:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %201:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%201
  Single Issue       : false;
SU(1):   %206:gpr64 = MADDXrrr %201:gpr64, %254:gpr64, %276:gpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%201
  Single Issue       : false;
SU(2):   %207:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %206:gpr64 = MADDXrrr %201:gpr64, %254:gpr64, %276:gpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %207:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %201:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   %201:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(2):   %207:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %206:gpr64 = MADDXrrr %201:gpr64, %254:gpr64, %276:gpr64

********** MI Scheduling **********
diffusion:%bb.55 for.inc231
  From: %209:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
    To: B %bb.52
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %209:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%209
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%209
  Successors:
    SU(2): Data Latency=1 Reg=%210
  Single Issue       : false;
SU(2):   STRWui %210:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%210
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.52
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %210:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %209:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   %209:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
SU(1):   %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0
SU(2):   STRWui %210:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)

********** MI Scheduling **********
diffusion:%bb.56 for.inc234
  From: %191:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.50
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %191:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%191
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%191
  Successors:
    SU(2): Data Latency=1 Reg=%192
  Single Issue       : false;
SU(2):   STRWui %192:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%192
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %192:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %191:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   %191:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
SU(2):   STRWui %192:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.57 for.end236
  From: STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
SU(1):   STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.58 for.cond237
  From: %92:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.69, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %92:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%92
  Single Issue       : false;
SU(1):   %94:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%94
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %92:gpr32, %94:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%94
    SU(0): Data Latency=4 Reg=%92
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.69, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %92:gpr32, %94:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %94:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %92:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %92:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %94:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   dead $wzr = SUBSWrr %92:gpr32, %94:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.60 for.cond240
  From: %140:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.68, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %140:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%140
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %140:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%140
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.68, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %140:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %140:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %140:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %140:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.62 for.cond243
  From: %145:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.67, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %145:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%145
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %145:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%145
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.67, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %145:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %145:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   %145:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %145:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.64 for.cond246
  From: %150:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.66, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %150:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%150
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %150:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%150
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.66, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %150:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %150:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %150:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %150:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.65 for.body248
  From: %154:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
    To: B %bb.64
 RegionInstrs: 28
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=11
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %300 %276 %260 %57 %254 
Live Out: %300 %276 %260 %57 %254 
Live Thru: GPR32=5
  LiveReg: %300
  UpdateRegP: SU(19) %181:gpr64 = ADDXrr %300:gpr64, %158:gpr64
              to 
  LiveReg: %276
  UpdateRegP: SU(14) %175:gpr64 = ADDXrr %276:gpr64, %158:gpr64
              to 
  LiveReg: %260
  UpdateRegP: SU(5) %164:gpr64 = MADDXrrr %161:gpr64, %260:gpr64, $xzr
              to 
  LiveReg: %57
  UpdateRegP: SU(3) %160:gpr64 = ADDXrr %57:gpr64, %158:gpr64
              to 
  LiveReg: %254
  UpdateRegP: SU(2) %158:gpr64 = MADDXrrr %155:gpr64, %254:gpr64, $xzr
              to 
Top Pressure:
GPR32=5
Bottom Pressure:
GPR32=5
Excess PSets: 
SU(0):   %154:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(24): Data Latency=4 Reg=%154
    SU(25): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %155:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%155
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %158:gpr64 = MADDXrrr %155:gpr64, %254:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%155
  Successors:
    SU(19): Data Latency=1 Reg=%158
    SU(14): Data Latency=1 Reg=%158
    SU(3): Data Latency=1 Reg=%158
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %160:gpr64 = ADDXrr %57:gpr64, %158:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%158
  Successors:
    SU(6): Data Latency=1 Reg=%160
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %161:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(5): Data Latency=4 Reg=%161
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %164:gpr64 = MADDXrrr %161:gpr64, %260:gpr64, $xzr
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(4): Data Latency=4 Reg=%161
  Successors:
    SU(20): Data Latency=1 Reg=%164
    SU(15): Data Latency=1 Reg=%164
    SU(6): Data Latency=1 Reg=%164
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %165:gpr64 = ADDXrr %160:gpr64, %164:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(3): Data Latency=1 Reg=%160
    SU(5): Data Latency=1 Reg=%164
  Successors:
    SU(10): Data Latency=1 Reg=%165
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %166:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Data Latency=4 Reg=%166
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(7): Data Latency=4 Reg=%166
  Successors:
    SU(9): Data Latency=1 Reg=%167
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %168:gpr64 = UBFMXri %167:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(8): Data Latency=1 Reg=%167
  Successors:
    SU(21): Data Latency=1 Reg=%168
    SU(16): Data Latency=1 Reg=%168
    SU(10): Data Latency=1 Reg=%168
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(6): Data Latency=1 Reg=%165
    SU(9): Data Latency=1 Reg=%168
  Successors:
    SU(13): Data Latency=1 Reg=%169
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %170:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(26): Data Latency=4 Reg=%170
    SU(12): Data Latency=4 Reg=%170
    SU(27): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %172:gpr64 = UBFMXri %170:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(11): Data Latency=4 Reg=%170
  Successors:
    SU(22): Data Latency=1 Reg=%172
    SU(17): Data Latency=1 Reg=%172
    SU(13): Data Latency=1 Reg=%172
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %173:fpr64 = LDRDroX %169:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(10): Data Latency=1 Reg=%169
    SU(12): Data Latency=1 Reg=%172
  Successors:
    SU(18): Data Latency=4 Reg=%173
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(14):   %175:gpr64 = ADDXrr %276:gpr64, %158:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%158
  Successors:
    SU(15): Data Latency=1 Reg=%175
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %176:gpr64 = ADDXrr %175:gpr64, %164:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(14): Data Latency=1 Reg=%175
    SU(5): Data Latency=1 Reg=%164
  Successors:
    SU(16): Data Latency=1 Reg=%176
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %177:gpr64common = ADDXrr %176:gpr64, %168:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(15): Data Latency=1 Reg=%176
    SU(9): Data Latency=1 Reg=%168
  Successors:
    SU(17): Data Latency=1 Reg=%177
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(17):   %178:fpr64 = LDRDroX %177:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(16): Data Latency=1 Reg=%177
    SU(12): Data Latency=1 Reg=%172
  Successors:
    SU(18): Data Latency=4 Reg=%178
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(18):   %179:fpr64 = FMULDrr %173:fpr64, %178:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(17): Data Latency=4 Reg=%178
    SU(13): Data Latency=4 Reg=%173
  Successors:
    SU(23): Data Latency=1 Reg=%179
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(19):   %181:gpr64 = ADDXrr %300:gpr64, %158:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(2): Data Latency=1 Reg=%158
  Successors:
    SU(20): Data Latency=1 Reg=%181
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   %182:gpr64 = ADDXrr %181:gpr64, %164:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(19): Data Latency=1 Reg=%181
    SU(5): Data Latency=1 Reg=%164
  Successors:
    SU(21): Data Latency=1 Reg=%182
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   %183:gpr64common = ADDXrr %182:gpr64, %168:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(20): Data Latency=1 Reg=%182
    SU(9): Data Latency=1 Reg=%168
  Successors:
    SU(22): Data Latency=1 Reg=%183
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(22):   %184:fpr64 = LDRDroX %183:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(21): Data Latency=1 Reg=%183
    SU(12): Data Latency=1 Reg=%172
  Successors:
    SU(23): Data Latency=4 Reg=%184
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(23):   %185:fpr64 = FMULDrr %179:fpr64, %184:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(18): Data Latency=1 Reg=%179
    SU(22): Data Latency=4 Reg=%184
  Successors:
    SU(24): Data Latency=1 Reg=%185
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(24):   %186:fpr64 = FADDDrr %154:fpr64, %185:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(23): Data Latency=1 Reg=%185
    SU(0): Data Latency=4 Reg=%154
  Successors:
    SU(25): Data Latency=1 Reg=%186
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(25):   STRDui %186:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(24): Data Latency=1 Reg=%186
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(26):   %187:gpr32common = nsw ADDWri %170.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(11): Data Latency=4 Reg=%170
  Successors:
    SU(27): Data Latency=1 Reg=%187
  Pressure Diff      : 
  Single Issue       : false;
SU(27):   STRWui %187:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(26): Data Latency=1 Reg=%187
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 25 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(27) STRWui %187:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=6
  LiveReg: %187
  UpdateRegP: SU(27) STRWui %187:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(27) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 25 26 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
BotQ.A RemLatency SU(25) 15c
  BotQ.A RemainingLatency 15 + 1c > CritPath 15
Picking from Bot:
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(25) STRDui %186:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
Bottom Pressure:
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %186
  UpdateRegP: SU(25) STRDui %186:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
              to 
  Ready @1c
  BotQ.A TopLatency SU(25) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 24 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
BotQ.A RemLatency SU(24) 14c
  BotQ.A RemainingLatency 14 + 2c > CritPath 15
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(24) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(24) %186:fpr64 = FADDDrr %154:fpr64, %185:fpr64
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %154
  UpdateRegP: SU(24) %186:fpr64 = FADDDrr %154:fpr64, %185:fpr64
              to 
  LiveReg: %185
  UpdateRegP: SU(24) %186:fpr64 = FADDDrr %154:fpr64, %185:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(24) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 26 23 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
BotQ.A RemLatency SU(23) 13c
  BotQ.A RemainingLatency 13 + 3c > CritPath 15
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(23) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(23) %185:fpr64 = FMULDrr %179:fpr64, %184:fpr64
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %179
  UpdateRegP: SU(23) %185:fpr64 = FMULDrr %179:fpr64, %184:fpr64
              to 
  LiveReg: %184
  UpdateRegP: SU(23) %185:fpr64 = FMULDrr %179:fpr64, %184:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(23) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 22 
Queue BotQ.A: 26 18 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 7 11 
BotQ.A RemLatency SU(18) 12c
BotQ.A RemLatency SU(22) 8c
  BotQ.A RemainingLatency 12 + 4c > CritPath 15
Picking from Bot:
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(26) %187:gpr32common = nsw ADDWri %170.sub_32:gpr64common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %170
  UpdateRegP: SU(12) %172:gpr64 = UBFMXri %170:gpr64common, 61, 60
              to GPR32 -1
  UpdateRegP: SU(26) %187:gpr32common = nsw ADDWri %170.sub_32:gpr64common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 22 
Queue BotQ.A: 18 
Pick Bot ONLY1     
Scheduling SU(18) %179:fpr64 = FMULDrr %173:fpr64, %178:fpr64
Bottom Pressure:
FPR8=4
GPR32=6
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %173
  UpdateRegP: SU(18) %179:fpr64 = FMULDrr %173:fpr64, %178:fpr64
              to 
  LiveReg: %178
  UpdateRegP: SU(18) %179:fpr64 = FMULDrr %173:fpr64, %178:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A TopLatency SU(18) 12c
  BotQ.A BotLatency SU(18) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 22 17 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %154:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
Bottom Pressure:
FPR8=3
GPR32=6
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 17 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) %184:fpr64 = LDRDroX %183:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %183
  UpdateRegP: SU(22) %184:fpr64 = LDRDroX %183:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %172
  UpdateRegP: SU(13) %173:fpr64 = LDRDroX %169:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(17) %178:fpr64 = LDRDroX %177:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(22) %184:fpr64 = LDRDroX %183:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(22) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 17 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %183:gpr64common = ADDXrr %182:gpr64, %168:gpr64
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %182
  UpdateRegP: SU(21) %183:gpr64common = ADDXrr %182:gpr64, %168:gpr64
              to 
  LiveReg: %168
  UpdateRegP: SU(10) %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
              to 
  UpdateRegP: SU(16) %177:gpr64common = ADDXrr %176:gpr64, %168:gpr64
              to 
  UpdateRegP: SU(21) %183:gpr64common = ADDXrr %182:gpr64, %168:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(21) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 13 17 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(13) 8c
  BotQ.A RemainingLatency 8 + 9c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(13) BOT-PATH                  8 cycles 
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(11) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(17) %178:fpr64 = LDRDroX %177:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %177
  UpdateRegP: SU(17) %178:fpr64 = LDRDroX %177:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 13 16 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(13) 8c
  BotQ.A RemainingLatency 8 + 10c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(13) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %173:fpr64 = LDRDroX %169:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
Bottom Pressure:
GPR32=11
  LiveReg: %169
  UpdateRegP: SU(13) %173:fpr64 = LDRDroX %169:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  BotQ.A TopLatency SU(13) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 16 10 12 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(16) 7c
  BotQ.A RemainingLatency 7 + 11c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(16) REG-MAX                            
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(16) %177:gpr64common = ADDXrr %176:gpr64, %168:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %176
  UpdateRegP: SU(16) %177:gpr64common = ADDXrr %176:gpr64, %168:gpr64
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(16) 8c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 10 15 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(10) 7c
  BotQ.A RemainingLatency 7 + 12c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) REG-MAX                            
  Cand SU(10) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(10) %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %165
  UpdateRegP: SU(10) %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
              to GPR32 -1
  Ready @12c
  BotQ.A TopLatency SU(10) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 15 6 9 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(20) 6c
  BotQ.A RemainingLatency 6 + 13c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) REG-MAX                            
  Cand SU(9) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %168:gpr64 = UBFMXri %167:gpr64, 61, 60
Bottom Pressure:
GPR32=11
  LiveReg: %167
  UpdateRegP: SU(9) %168:gpr64 = UBFMXri %167:gpr64, 61, 60
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(9) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 12 15 6 8 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(20) 6c
  BotQ.A RemainingLatency 6 + 14c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(12) REG-MAX                            
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %172:gpr64 = UBFMXri %170:gpr64common, 61, 60
Bottom Pressure:
GPR32=10
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 20 8 15 6 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
BotQ.A RemLatency SU(20) 6c
  BotQ.A RemainingLatency 6 + 15c > CritPath 15
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(20) %182:gpr64 = ADDXrr %181:gpr64, %164:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %181
  UpdateRegP: SU(20) %182:gpr64 = ADDXrr %181:gpr64, %164:gpr64
              to 
  LiveReg: %164
  UpdateRegP: SU(6) %165:gpr64 = ADDXrr %160:gpr64, %164:gpr64
              to 
  UpdateRegP: SU(15) %176:gpr64 = ADDXrr %175:gpr64, %164:gpr64
              to 
  UpdateRegP: SU(20) %182:gpr64 = ADDXrr %181:gpr64, %164:gpr64
              to GPR32 -1
  Ready @15c
  BotQ.A TopLatency SU(20) 6c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 6 8 15 19 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 16c > CritPath 15
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %176:gpr64 = ADDXrr %175:gpr64, %164:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %175
  UpdateRegP: SU(15) %176:gpr64 = ADDXrr %175:gpr64, %164:gpr64
              to GPR32 -1
  Ready @16c
  BotQ.A TopLatency SU(15) 6c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 6 8 19 14 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 17c > CritPath 15
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %165:gpr64 = ADDXrr %160:gpr64, %164:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %160
  UpdateRegP: SU(6) %165:gpr64 = ADDXrr %160:gpr64, %164:gpr64
              to GPR32 -1
  Ready @17c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 8 19 3 5 11 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 18c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %181:gpr64 = ADDXrr %300:gpr64, %158:gpr64
Bottom Pressure:
GPR32=11
  LiveReg: %158
  UpdateRegP: SU(3) %160:gpr64 = ADDXrr %57:gpr64, %158:gpr64
              to GPR32 -1
  UpdateRegP: SU(14) %175:gpr64 = ADDXrr %276:gpr64, %158:gpr64
              to GPR32 -1
  UpdateRegP: SU(19) %181:gpr64 = ADDXrr %300:gpr64, %158:gpr64
              to GPR32 -1
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 8 11 3 5 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 19c > CritPath 15
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %175:gpr64 = ADDXrr %276:gpr64, %158:gpr64
Bottom Pressure:
GPR32=10
  Ready @19c
  BotQ.A TopLatency SU(14) 5c
  BotQ.A BotLatency SU(14) 10c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 11 3 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 20c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(3) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %160:gpr64 = ADDXrr %57:gpr64, %158:gpr64
Bottom Pressure:
GPR32=9
  Ready @20c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 8 11 2 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 21c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
Bottom Pressure:
GPR32=9
  LiveReg: %166
  UpdateRegP: SU(8) %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
              to GPR32 -1
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 2 11 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 22c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %164:gpr64 = MADDXrrr %161:gpr64, %260:gpr64, $xzr
Bottom Pressure:
GPR32=9
  LiveReg: %161
  UpdateRegP: SU(5) %164:gpr64 = MADDXrrr %161:gpr64, %260:gpr64, $xzr
              to GPR32 -1
  Ready @22c
  BotQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 4 
Queue BotQ.A: 11 2 
Queue TopQ.P: 
Queue TopQ.A: 11 1 4 7 
  BotQ.A RemainingLatency 0 + 23c > CritPath 15
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %158:gpr64 = MADDXrrr %155:gpr64, %254:gpr64, $xzr
Bottom Pressure:
GPR32=9
  LiveReg: %155
  UpdateRegP: SU(2) %158:gpr64 = MADDXrrr %155:gpr64, %254:gpr64, $xzr
              to GPR32 -1
  Ready @23c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 4 1 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %170:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=8
  Ready @24c
  BotQ.A BotLatency SU(11) 12c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 4 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %166:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=7
  Ready @25c
  BotQ.A BotLatency SU(7) 14c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %161:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=6
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %155:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
Bottom Pressure:
GPR32=5
  Ready @27c
  BotQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(1):   %155:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(4):   %161:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(7):   %166:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(11):   %170:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(2):   %158:gpr64 = MADDXrrr %155:gpr64, %254:gpr64, $xzr
SU(5):   %164:gpr64 = MADDXrrr %161:gpr64, %260:gpr64, $xzr
SU(8):   %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
SU(3):   %160:gpr64 = ADDXrr %57:gpr64, %158:gpr64
SU(14):   %175:gpr64 = ADDXrr %276:gpr64, %158:gpr64
SU(19):   %181:gpr64 = ADDXrr %300:gpr64, %158:gpr64
SU(6):   %165:gpr64 = ADDXrr %160:gpr64, %164:gpr64
SU(15):   %176:gpr64 = ADDXrr %175:gpr64, %164:gpr64
SU(20):   %182:gpr64 = ADDXrr %181:gpr64, %164:gpr64
SU(12):   %172:gpr64 = UBFMXri %170:gpr64common, 61, 60
SU(9):   %168:gpr64 = UBFMXri %167:gpr64, 61, 60
SU(10):   %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
SU(16):   %177:gpr64common = ADDXrr %176:gpr64, %168:gpr64
SU(13):   %173:fpr64 = LDRDroX %169:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
SU(17):   %178:fpr64 = LDRDroX %177:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
SU(21):   %183:gpr64common = ADDXrr %182:gpr64, %168:gpr64
SU(22):   %184:fpr64 = LDRDroX %183:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
SU(0):   %154:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(18):   %179:fpr64 = FMULDrr %173:fpr64, %178:fpr64
SU(26):   %187:gpr32common = nsw ADDWri %170.sub_32:gpr64common, 1, 0
SU(23):   %185:fpr64 = FMULDrr %179:fpr64, %184:fpr64
SU(24):   %186:fpr64 = FADDDrr %154:fpr64, %185:fpr64
SU(25):   STRDui %186:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
SU(27):   STRWui %187:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
diffusion:%bb.66 for.inc279
  From: %152:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.62
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %152:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%152
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %153:gpr32common = nsw ADDWri %152:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%152
  Successors:
    SU(2): Data Latency=1 Reg=%153
  Single Issue       : false;
SU(2):   STRWui %153:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%153
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.62
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %153:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %153:gpr32common = nsw ADDWri %152:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %152:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   %152:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %153:gpr32common = nsw ADDWri %152:gpr32common, 1, 0
SU(2):   STRWui %153:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
diffusion:%bb.67 for.inc282
  From: %147:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.60
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %147:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%147
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %148:gpr32common = nsw ADDWri %147:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%147
  Successors:
    SU(2): Data Latency=1 Reg=%148
  Single Issue       : false;
SU(2):   STRWui %148:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%148
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.60
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %148:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %148:gpr32common = nsw ADDWri %147:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %147:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   %147:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %148:gpr32common = nsw ADDWri %147:gpr32common, 1, 0
SU(2):   STRWui %148:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
diffusion:%bb.68 for.inc285
  From: %142:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.58
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %142:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%142
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%142
  Successors:
    SU(2): Data Latency=1 Reg=%143
  Single Issue       : false;
SU(2):   STRWui %143:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%143
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.58
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %143:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %142:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   %142:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
SU(1):   %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0
SU(2):   STRWui %143:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.70 for.cond288
  From: %97:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.72, implicit killed $nzcv
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %97:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%97
  Single Issue       : false;
SU(1):   %99:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%99
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %97:gpr32, %99:gpr32, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%99
    SU(0): Data Latency=4 Reg=%97
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.72, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %97:gpr32, %99:gpr32, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %99:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %97:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.70 ***
SU(0):   %97:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %99:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   dead $wzr = SUBSWrr %97:gpr32, %99:gpr32, implicit-def $nzcv

********** MI Scheduling **********
diffusion:%bb.71 for.body290
  From: %125:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.70
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %62 %231 %130 
Live Out: %62 %231 %130 
Live Thru: GPR32=3
  LiveReg: %62
  UpdateRegP: SU(7) %135:fpr64 = LDRDroX %62:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %231
  UpdateRegP: SU(2) %129:fpr64 = LDRDroX %231:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDroX %132:fpr64, %231:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
              to FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %130
  UpdateRegP: SU(3) %131:fpr64 = LDRDroX %130:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR32=3
Bottom Pressure:
GPR32=3
Excess PSets: 
SU(0):   %125:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(11): Data Latency=4 Reg=%125
    SU(1): Data Latency=4 Reg=%125
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %128:gpr64 = UBFMXri %125:gpr64common, 61, 60
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(0): Data Latency=4 Reg=%125
  Successors:
    SU(7): Data Latency=1 Reg=%128
    SU(5): Data Latency=1 Reg=%128
    SU(3): Data Latency=1 Reg=%128
    SU(2): Data Latency=1 Reg=%128
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %129:fpr64 = LDRDroX %231:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%128
  Successors:
    SU(4): Data Latency=4 Reg=%129
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %131:fpr64 = LDRDroX %130:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%128
  Successors:
    SU(4): Data Latency=4 Reg=%131
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %132:fpr64 = FMULDrr %129:fpr64, %131:fpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(3): Data Latency=4 Reg=%131
    SU(2): Data Latency=4 Reg=%129
  Successors:
    SU(8): Data Latency=1 Reg=%132
    SU(5): Data Latency=1 Reg=%132
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDroX %132:fpr64, %231:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%132
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=%128
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %133:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%133
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %135:fpr64 = LDRDroX %62:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%128
  Successors:
    SU(8): Data Latency=4 Reg=%135
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %136:fpr64 = FMULDrr %135:fpr64, %132:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%132
    SU(7): Data Latency=4 Reg=%135
  Successors:
    SU(9): Data Latency=1 Reg=%136
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   %137:fpr64 = FADDDrr %133:fpr64, %136:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%136
    SU(6): Data Latency=4 Reg=%133
  Successors:
    SU(10): Data Latency=1 Reg=%137
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   STRDui %137:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%137
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   %138:gpr32common = nsw ADDWri %125.sub_32:gpr64common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%125
  Successors:
    SU(12): Data Latency=1 Reg=%138
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   STRWui %138:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%138
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.70
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 5 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %138:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
Bottom Pressure:
GPR32=4
  LiveReg: %138
  UpdateRegP: SU(12) STRWui %138:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
              to 
  Ready @0c
  BotQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(10) 12c
  BotQ.A RemainingLatency 12 + 1c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(10) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRDui %137:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %137
  UpdateRegP: SU(10) STRDui %137:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
              to 
  Ready @1c
  BotQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(9) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %137:fpr64 = FADDDrr %133:fpr64, %136:fpr64
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %133
  UpdateRegP: SU(9) %137:fpr64 = FADDDrr %133:fpr64, %136:fpr64
              to 
  LiveReg: %136
  UpdateRegP: SU(9) %137:fpr64 = FADDDrr %133:fpr64, %136:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 5 11 8 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %136:fpr64 = FMULDrr %135:fpr64, %132:fpr64
Bottom Pressure:
FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %135
  UpdateRegP: SU(8) %136:fpr64 = FMULDrr %135:fpr64, %132:fpr64
              to 
  LiveReg: %132
  UpdateRegP: SU(5) STRDroX %132:fpr64, %231:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
              to GPR32 1
  UpdateRegP: SU(8) %136:fpr64 = FMULDrr %135:fpr64, %132:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 5 11 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(5) 10c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 10 + 4c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %132:fpr64, %231:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %128
  UpdateRegP: SU(2) %129:fpr64 = LDRDroX %231:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(3) %131:fpr64 = LDRDroX %130:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDroX %132:fpr64, %231:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
              to 
  UpdateRegP: SU(7) %135:fpr64 = LDRDroX %62:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 7 
Queue BotQ.A: 11 4 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 9 + 5c > CritPath 12
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %138:gpr32common = nsw ADDWri %125.sub_32:gpr64common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %125
  UpdateRegP: SU(1) %128:gpr64 = UBFMXri %125:gpr64common, 61, 60
              to GPR32 -1
  UpdateRegP: SU(11) %138:gpr32common = nsw ADDWri %125.sub_32:gpr64common, 1, 0
              to GPR32 -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 6 
BotQ.A RemLatency SU(4) 9c
BotQ.A RemLatency SU(7) 5c
  BotQ.A RemainingLatency 9 + 6c > CritPath 12
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %133:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %125:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
Top Pressure:
GPR32=4
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %128:gpr64 = UBFMXri %125:gpr64common, 61, 60
Top Pressure:
GPR32=5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 7 
Queue TopQ.P: 
Queue TopQ.A: 7 3 2 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 7c > CritPath 12
TopQ.A RemLatency SU(3) 7c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(7) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(4) %132:fpr64 = FMULDrr %129:fpr64, %131:fpr64
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %129
  UpdateRegP: SU(4) %132:fpr64 = FMULDrr %129:fpr64, %131:fpr64
              to 
  LiveReg: %131
  UpdateRegP: SU(4) %132:fpr64 = FMULDrr %129:fpr64, %131:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %135:fpr64 = LDRDroX %62:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @8c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 2 3 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 12
TopQ.A RemLatency SU(2) 7c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %131:fpr64 = LDRDroX %130:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @11c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %129:fpr64 = LDRDroX %231:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
Bottom Pressure:
GPR32=5
  Ready @12c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   %125:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
SU(1):   %128:gpr64 = UBFMXri %125:gpr64common, 61, 60
SU(2):   %129:fpr64 = LDRDroX %231:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
SU(3):   %131:fpr64 = LDRDroX %130:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
SU(7):   %135:fpr64 = LDRDroX %62:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
SU(4):   %132:fpr64 = FMULDrr %129:fpr64, %131:fpr64
SU(6):   %133:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(11):   %138:gpr32common = nsw ADDWri %125.sub_32:gpr64common, 1, 0
SU(5):   STRDroX %132:fpr64, %231:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
SU(8):   %136:fpr64 = FMULDrr %135:fpr64, %132:fpr64
SU(9):   %137:fpr64 = FADDDrr %133:fpr64, %136:fpr64
SU(10):   STRDui %137:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
SU(12):   STRWui %138:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %123:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
    To: B %bb.20
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %123:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%123
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%123
  Successors:
    SU(2): Data Latency=1 Reg=%124
  Single Issue       : false;
SU(2):   STRWui %124:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%124
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %124:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %123:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %123:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
SU(1):   %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0
SU(2):   STRWui %124:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
    To: BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %119:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %120:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %120:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %119:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
SU(2):   $d0 = COPY %119:fpr64
SU(3):   $w2 = COPY %120:gpr32

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %118:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %118:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(1):   %119:fpr64 = FNEGDr %118:fpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(2):   %120:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %119:fpr64 = FNEGDr %118:fpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %120:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %118:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %118:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(2):   %120:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(1):   %119:fpr64 = FNEGDr %118:fpr64

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: $x0 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
    To: BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %114:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %115:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %115:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %114:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
SU(2):   $d0 = COPY %114:fpr64
SU(3):   $w2 = COPY %115:gpr32

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %113:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %113:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%113
  Single Issue       : false;
SU(1):   %114:fpr64 = FNEGDr %113:fpr64
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%113
  Single Issue       : false;
SU(2):   %115:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %114:fpr64 = FNEGDr %113:fpr64
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %115:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %113:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %113:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(2):   %115:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(1):   %114:fpr64 = FNEGDr %113:fpr64

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
    To: BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %108:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %110:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %110:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %108:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
SU(2):   $d0 = COPY %108:fpr64
SU(3):   $w2 = COPY %110:gpr32

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %108:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %108:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %110:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %110:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %108:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %108:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(1):   %110:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
    To: BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %103:fpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $w2 = COPY %105:gpr32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $w2 = COPY %105:gpr32
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %103:fpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
SU(2):   $d0 = COPY %103:fpr64
SU(3):   $w2 = COPY %105:gpr32

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: %101:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %101:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%101
  Single Issue       : false;
SU(1):   %102:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%102
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %103:fpr64 = FDIVDrr %101:fpr64, %102:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%102
    SU(0): Data Latency=4 Reg=%101
  Successors:
    SU(3): Data Latency=1 Reg=%103
  Single Issue       : false;
SU(3):   STRDui %103:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%103
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %105:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %103:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %103:fpr64 = FDIVDrr %101:fpr64, %102:fpr64
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %105:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %102:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %101:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   %101:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
SU(1):   %102:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
SU(4):   %105:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(2):   %103:fpr64 = FDIVDrr %101:fpr64, %102:fpr64
SU(3):   STRDui %103:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)

********** MI Scheduling **********
diffusion:%bb.73 for.end311
  From: %28:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: CBZW %29:gpr32, %bb.75
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %28:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%28
  Single Issue       : false;
SU(1):   %29:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%28
  Successors:
    ExitSU: Data Latency=4 Reg=%29
  Single Issue       : false;
ExitSU:   CBZW %29:gpr32, %bb.75
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%29
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %29:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %28:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   %28:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %29:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
diffusion:%bb.75 if.end314
  From: %33:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: CBZW %34:gpr32, %bb.77
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %33:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(1):   %34:gpr32 = LDRWui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%33
  Successors:
    ExitSU: Data Latency=4 Reg=%34
  Single Issue       : false;
ExitSU:   CBZW %34:gpr32, %bb.77
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%34
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %34:gpr32 = LDRWui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %33:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   %33:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %34:gpr32 = LDRWui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
diffusion:%bb.75 if.end314
  From: $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
    To: BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t

********** MI Scheduling **********
diffusion:%bb.77 if.end317
  From: %36:gpr64temp = ADRP target-flags(aarch64-page) @timeron
    To: CBZW %37:gpr32, %bb.79
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %36:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%36
  Single Issue       : false;
SU(1):   %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%36
  Successors:
    ExitSU: Data Latency=4 Reg=%37
  Single Issue       : false;
ExitSU:   CBZW %37:gpr32, %bb.79
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%37
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %36:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.77 ***
SU(0):   %36:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(1):   %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** INTERVALS **********
W0 [0B,68r:0)[160r,176r:8)[624r,672r:21)[816r,864r:20)[6056r,6112r:18)[6240r,6304r:17)[6480r,6496r:4)[6608r,6640r:16)[6800r,6816r:3)[7176r,7216r:9)[7456r,7472r:2)[7584r,7616r:15)[7776r,7792r:1)[8388r,8400r:10)[10480r,10544r:14)[10672r,10736r:13)[10880r,10944r:12)[11088r,11152r:11)[11424r,11440r:7)[11584r,11616r:19)[11808r,11824r:6)[12032r,12048r:5)  0@0B-phi 1@7776r 2@7456r 3@6800r 4@6480r 5@12032r 6@11808r 7@11424r 8@160r 9@7176r 10@8388r 11@11088r 12@10880r 13@10672r 14@10480r 15@7584r 16@6608r 17@6240r 18@6056r 19@11584r 20@816r 21@624r
W1 [664r,672r:2)[856r,864r:1)[6064r,6112r:9)[6256r,6304r:8)[6624r,6640r:11)[7184r,7216r:12)[7600r,7616r:10)[8392r,8400r:0)[10496r,10544r:7)[10688r,10736r:6)[10896r,10944r:5)[11104r,11152r:4)[11600r,11616r:3)  0@8392r 1@856r 2@664r 3@11600r 4@11104r 5@10896r 6@10688r 7@10496r 8@6256r 9@6064r 10@7600r 11@6624r 12@7184r
%0 [68r,72r:0)  0@68r weight:0.000000e+00
%1 [48r,64r:0)  0@48r weight:0.000000e+00
%2 [64r,80r:0)  0@64r weight:0.000000e+00
%4 [272r,288r:0)  0@272r weight:0.000000e+00
%5 [544r,560r:0)  0@544r weight:0.000000e+00
%6 [560r,720r:0)  0@560r weight:0.000000e+00
%9 [752r,768r:0)  0@752r weight:0.000000e+00
%10 [768r,912r:0)  0@768r weight:0.000000e+00
%14 [1168r,1200r:0)  0@1168r weight:0.000000e+00
%15 [1008r,2720B:0)  0@1008r weight:0.000000e+00
%16 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%19 [2848r,2880r:0)  0@2848r weight:0.000000e+00
%20 [2768r,3184B:0)  0@2768r weight:0.000000e+00
%21 [2864r,2880r:0)  0@2864r weight:0.000000e+00
%23 [3200r,3480r:0)  0@3200r weight:0.000000e+00
%24 [3696r,3728r:0)  0@3696r weight:0.000000e+00
%25 [3232r,11296B:0)  0@3232r weight:0.000000e+00
%26 [3712r,3728r:0)  0@3712r weight:0.000000e+00
%28 [11312r,11328r:0)  0@11312r weight:0.000000e+00
%29 [11328r,11344r:0)  0@11328r weight:0.000000e+00
%33 [11696r,11712r:0)  0@11696r weight:0.000000e+00
%34 [11712r,11728r:0)  0@11712r weight:0.000000e+00
%36 [11920r,11936r:0)  0@11920r weight:0.000000e+00
%37 [11936r,11952r:0)  0@11936r weight:0.000000e+00
%39 [3792r,3808r:0)  0@3792r weight:0.000000e+00
%43 [3952r,3984r:0)  0@3952r weight:0.000000e+00
%44 [3248r,11296B:0)  0@3248r weight:0.000000e+00
%45 [3968r,3984r:0)  0@3968r weight:0.000000e+00
%48 [5568r,5600r:0)  0@5568r weight:0.000000e+00
%49 [3392r,11296B:0)  0@3392r weight:0.000000e+00
%50 [5584r,5600r:0)  0@5584r weight:0.000000e+00
%52 [5920r,6032r:0)  0@5920r weight:0.000000e+00
%53 [5952r,6032r:0)  0@5952r weight:0.000000e+00
%54 [6032r,6160r:0)  0@6032r weight:0.000000e+00
%55 [3456r,11296B:0)  0@3456r weight:0.000000e+00
%56 [6016r,6160r:0)  0@6016r weight:0.000000e+00
%57 [3472r,11296B:0)  0@3472r weight:0.000000e+00
%59 [6192r,6352r:0)  0@6192r weight:0.000000e+00
%61 [6208r,6352r:0)  0@6208r weight:0.000000e+00
%62 [3488r,11296B:0)  0@3488r weight:0.000000e+00
%64 [3504r,11296B:0)  0@3504r weight:0.000000e+00
%65 [6400r,6416r:0)  0@6400r weight:0.000000e+00
%70 [6720r,6736r:0)  0@6720r weight:0.000000e+00
%73 [6960r,6992r:0)  0@6960r weight:0.000000e+00
%75 [6976r,6992r:0)  0@6976r weight:0.000000e+00
%78 [7376r,7392r:0)  0@7376r weight:0.000000e+00
%83 [7696r,7712r:0)  0@7696r weight:0.000000e+00
%86 [7936r,7968r:0)  0@7936r weight:0.000000e+00
%88 [7952r,7968r:0)  0@7952r weight:0.000000e+00
%92 [8736r,8768r:0)  0@8736r weight:0.000000e+00
%94 [8752r,8768r:0)  0@8752r weight:0.000000e+00
%97 [10032r,10064r:0)  0@10032r weight:0.000000e+00
%99 [10048r,10064r:0)  0@10048r weight:0.000000e+00
%101 [10384r,10452r:0)  0@10384r weight:0.000000e+00
%102 [10400r,10452r:0)  0@10400r weight:0.000000e+00
%103 [10452r,10592r:0)  0@10452r weight:0.000000e+00
%105 [10448r,10592r:0)  0@10448r weight:0.000000e+00
%108 [10624r,10784r:0)  0@10624r weight:0.000000e+00
%110 [10640r,10784r:0)  0@10640r weight:0.000000e+00
%113 [10816r,10856r:0)  0@10816r weight:0.000000e+00
%114 [10856r,10992r:0)  0@10856r weight:0.000000e+00
%115 [10848r,10992r:0)  0@10848r weight:0.000000e+00
%118 [11024r,11064r:0)  0@11024r weight:0.000000e+00
%119 [11064r,11200r:0)  0@11064r weight:0.000000e+00
%120 [11056r,11200r:0)  0@11056r weight:0.000000e+00
%123 [11232r,11248r:0)  0@11232r weight:0.000000e+00
%124 [11248r,11264r:0)  0@11248r weight:0.000000e+00
%125 [10128r,10320r:0)  0@10128r weight:0.000000e+00
%128 [10160r,10324r:0)  0@10160r weight:0.000000e+00
%129 [10176r,10260r:0)  0@10176r weight:0.000000e+00
%130 [3632r,11296B:0)  0@3632r weight:0.000000e+00
%131 [10192r,10260r:0)  0@10192r weight:0.000000e+00
%132 [10260r,10328r:0)  0@10260r weight:0.000000e+00
%133 [10264r,10336r:0)  0@10264r weight:0.000000e+00
%135 [10256r,10328r:0)  0@10256r weight:0.000000e+00
%136 [10328r,10336r:0)  0@10328r weight:0.000000e+00
%137 [10336r,10344r:0)  0@10336r weight:0.000000e+00
%138 [10320r,10352r:0)  0@10320r weight:0.000000e+00
%140 [8880r,8896r:0)  0@8880r weight:0.000000e+00
%142 [9904r,9920r:0)  0@9904r weight:0.000000e+00
%143 [9920r,9936r:0)  0@9920r weight:0.000000e+00
%145 [9008r,9024r:0)  0@9008r weight:0.000000e+00
%147 [9824r,9840r:0)  0@9824r weight:0.000000e+00
%148 [9840r,9856r:0)  0@9840r weight:0.000000e+00
%150 [9136r,9152r:0)  0@9136r weight:0.000000e+00
%152 [9744r,9760r:0)  0@9744r weight:0.000000e+00
%153 [9760r,9776r:0)  0@9760r weight:0.000000e+00
%154 [9648r,9704r:0)  0@9648r weight:0.000000e+00
%155 [9232r,9428r:0)  0@9232r weight:0.000000e+00
%158 [9428r,9568r:0)  0@9428r weight:0.000000e+00
%160 [9448r,9572r:0)  0@9448r weight:0.000000e+00
%161 [9296r,9432r:0)  0@9296r weight:0.000000e+00
%164 [9432r,9584r:0)  0@9432r weight:0.000000e+00
%165 [9572r,9600r:0)  0@9572r weight:0.000000e+00
%166 [9360r,9440r:0)  0@9360r weight:0.000000e+00
%167 [9440r,9592r:0)  0@9440r weight:0.000000e+00
%168 [9592r,9632r:0)  0@9592r weight:0.000000e+00
%169 [9600r,9616r:0)  0@9600r weight:0.000000e+00
%170 [9424r,9688r:0)  0@9424r weight:0.000000e+00
%172 [9588r,9640r:0)  0@9588r weight:0.000000e+00
%173 [9616r,9656r:0)  0@9616r weight:0.000000e+00
%175 [9488r,9576r:0)  0@9488r weight:0.000000e+00
%176 [9576r,9608r:0)  0@9576r weight:0.000000e+00
%177 [9608r,9624r:0)  0@9608r weight:0.000000e+00
%178 [9624r,9656r:0)  0@9624r weight:0.000000e+00
%179 [9656r,9696r:0)  0@9656r weight:0.000000e+00
%181 [9568r,9584r:0)  0@9568r weight:0.000000e+00
%182 [9584r,9632r:0)  0@9584r weight:0.000000e+00
%183 [9632r,9640r:0)  0@9632r weight:0.000000e+00
%184 [9640r,9696r:0)  0@9640r weight:0.000000e+00
%185 [9696r,9704r:0)  0@9696r weight:0.000000e+00
%186 [9704r,9712r:0)  0@9704r weight:0.000000e+00
%187 [9688r,9720r:0)  0@9688r weight:0.000000e+00
%189 [8080r,8096r:0)  0@8080r weight:0.000000e+00
%191 [8576r,8592r:0)  0@8576r weight:0.000000e+00
%192 [8592r,8608r:0)  0@8592r weight:0.000000e+00
%193 [8160r,8200r:0)  0@8160r weight:0.000000e+00
%195 [3568r,11296B:0)  0@3568r weight:0.000000e+00
%197 [3600r,11296B:0)  0@3600r weight:0.000000e+00
%198 [8200r,8208r:0)  0@8200r weight:0.000000e+00
%199 [8192r,8208r:0)  0@8192r weight:0.000000e+00
%200 [8208r,8224r:0)  0@8208r weight:0.000000e+00
%201 [8272r,8328r:0)  0@8272r weight:0.000000e+00
%206 [8328r,8448r:0)  0@8328r weight:0.000000e+00
%207 [8320r,8448r:0)  0@8320r weight:0.000000e+00
%209 [8496r,8512r:0)  0@8496r weight:0.000000e+00
%210 [8512r,8528r:0)  0@8512r weight:0.000000e+00
%211 [7056r,7144r:0)  0@7056r weight:0.000000e+00
%214 [7144r,7160r:0)  0@7144r weight:0.000000e+00
%216 [7152r,7264r:0)  0@7152r weight:0.000000e+00
%218 [7160r,7264r:0)  0@7160r weight:0.000000e+00
%219 [3536r,11296B:0)  0@3536r weight:0.000000e+00
%220 [7136r,7264r:0)  0@7136r weight:0.000000e+00
%221 [7296r,7312r:0)  0@7296r weight:0.000000e+00
%222 [7312r,7328r:0)  0@7312r weight:0.000000e+00
%223 [5664r,5856r:0)  0@5664r weight:0.000000e+00
%225 [3408r,11296B:0)  0@3408r weight:0.000000e+00
%226 [5696r,5860r:0)  0@5696r weight:0.000000e+00
%227 [5712r,5796r:0)  0@5712r weight:0.000000e+00
%228 [3424r,11296B:0)  0@3424r weight:0.000000e+00
%229 [5728r,5796r:0)  0@5728r weight:0.000000e+00
%230 [5796r,5864r:0)  0@5796r weight:0.000000e+00
%231 [3440r,11296B:0)  0@3440r weight:0.000000e+00
%232 [5800r,5872r:0)  0@5800r weight:0.000000e+00
%233 [5792r,5864r:0)  0@5792r weight:0.000000e+00
%234 [5864r,5872r:0)  0@5864r weight:0.000000e+00
%235 [5872r,5880r:0)  0@5872r weight:0.000000e+00
%236 [5856r,5888r:0)  0@5856r weight:0.000000e+00
%238 [4096r,4112r:0)  0@4096r weight:0.000000e+00
%240 [5448r,5456r:0)  0@5448r weight:0.000000e+00
%241 [5456r,5472r:0)  0@5456r weight:0.000000e+00
%243 [4224r,4240r:0)  0@4224r weight:0.000000e+00
%245 [5408r,5416r:0)  0@5408r weight:0.000000e+00
%246 [5416r,5424r:0)  0@5416r weight:0.000000e+00
%248 [4352r,4368r:0)  0@4352r weight:0.000000e+00
%250 [5368r,5376r:0)  0@5368r weight:0.000000e+00
%251 [5376r,5384r:0)  0@5376r weight:0.000000e+00
%252 [4432r,4900r:0)  0@4432r weight:0.000000e+00
%254 [3264r,11296B:0)  0@3264r weight:0.000000e+00
%255 [4900r,4944r:0)  0@4900r weight:0.000000e+00
%256 [3296r,11296B:0)  0@3296r weight:0.000000e+00
%257 [4920r,4952r:0)  0@4920r weight:0.000000e+00
%258 [4808r,4904r:0)  0@4808r weight:0.000000e+00
%260 [3312r,11296B:0)  0@3312r weight:0.000000e+00
%261 [4904r,4968r:0)  0@4904r weight:0.000000e+00
%262 [4952r,4976r:0)  0@4952r weight:0.000000e+00
%263 [4856r,4912r:0)  0@4856r weight:0.000000e+00
%264 [4912r,4928r:0)  0@4912r weight:0.000000e+00
%265 [4928r,5000r:0)  0@4928r weight:0.000000e+00
%266 [4976r,5048r:0)  0@4976r weight:0.000000e+00
%267 [4984r,5040r:0)  0@4984r weight:0.000000e+00
%268 [5040r,5096r:0)  0@5040r weight:0.000000e+00
%269 [5048r,5088r:0)  0@5048r weight:0.000000e+00
%270 [3344r,11296B:0)  0@3344r weight:0.000000e+00
%271 [4936r,4960r:0)  0@4936r weight:0.000000e+00
%272 [4960r,4992r:0)  0@4960r weight:0.000000e+00
%273 [4992r,5056r:0)  0@4992r weight:0.000000e+00
%274 [5056r,5088r:0)  0@5056r weight:0.000000e+00
%275 [5088r,5096r:0)  0@5088r weight:0.000000e+00
%276 [3360r,11296B:0)  0@3360r weight:0.000000e+00
%277 [4944r,4968r:0)  0@4944r weight:0.000000e+00
%278 [4968r,5000r:0)  0@4968r weight:0.000000e+00
%279 [5000r,5096r:0)  0@5000r weight:0.000000e+00
%280 [5272r,5328r:0)  0@5272r weight:0.000000e+00
%281 [4800r,5064r:0)  0@4800r weight:0.000000e+00
%282 [5064r,5176r:0)  0@5064r weight:0.000000e+00
%283 [5104r,5184r:0)  0@5104r weight:0.000000e+00
%284 [4848r,5072r:0)  0@4848r weight:0.000000e+00
%285 [5072r,5200r:0)  0@5072r weight:0.000000e+00
%286 [5184r,5224r:0)  0@5184r weight:0.000000e+00
%287 [4896r,5080r:0)  0@4896r weight:0.000000e+00
%288 [5080r,5216r:0)  0@5080r weight:0.000000e+00
%289 [5216r,5256r:0)  0@5216r weight:0.000000e+00
%290 [5224r,5240r:0)  0@5224r weight:0.000000e+00
%291 [5032r,5312r:0)  0@5032r weight:0.000000e+00
%293 [5208r,5264r:0)  0@5208r weight:0.000000e+00
%294 [5240r,5280r:0)  0@5240r weight:0.000000e+00
%295 [5136r,5192r:0)  0@5136r weight:0.000000e+00
%296 [5192r,5232r:0)  0@5192r weight:0.000000e+00
%297 [5232r,5248r:0)  0@5232r weight:0.000000e+00
%298 [5248r,5280r:0)  0@5248r weight:0.000000e+00
%299 [5280r,5320r:0)  0@5280r weight:0.000000e+00
%300 [3376r,11296B:0)  0@3376r weight:0.000000e+00
%301 [5176r,5200r:0)  0@5176r weight:0.000000e+00
%302 [5200r,5256r:0)  0@5200r weight:0.000000e+00
%303 [5256r,5264r:0)  0@5256r weight:0.000000e+00
%304 [5264r,5320r:0)  0@5264r weight:0.000000e+00
%305 [5320r,5328r:0)  0@5320r weight:0.000000e+00
%306 [5328r,5336r:0)  0@5328r weight:0.000000e+00
%307 [5312r,5344r:0)  0@5312r weight:0.000000e+00
%308 [2944r,3136r:0)  0@2944r weight:0.000000e+00
%310 [2784r,3184B:0)  0@2784r weight:0.000000e+00
%311 [2976r,3140r:0)  0@2976r weight:0.000000e+00
%312 [2992r,3076r:0)  0@2992r weight:0.000000e+00
%313 [2800r,3184B:0)  0@2800r weight:0.000000e+00
%314 [3008r,3076r:0)  0@3008r weight:0.000000e+00
%315 [3076r,3144r:0)  0@3076r weight:0.000000e+00
%316 [2816r,3184B:0)  0@2816r weight:0.000000e+00
%317 [3080r,3152r:0)  0@3080r weight:0.000000e+00
%318 [3072r,3144r:0)  0@3072r weight:0.000000e+00
%319 [3144r,3152r:0)  0@3144r weight:0.000000e+00
%320 [3152r,3160r:0)  0@3152r weight:0.000000e+00
%321 [3136r,3168r:0)  0@3136r weight:0.000000e+00
%323 [1312r,1328r:0)  0@1312r weight:0.000000e+00
%325 [2664r,2672r:0)  0@2664r weight:0.000000e+00
%326 [2672r,2688r:0)  0@2672r weight:0.000000e+00
%328 [1440r,1456r:0)  0@1440r weight:0.000000e+00
%330 [2624r,2632r:0)  0@2624r weight:0.000000e+00
%331 [2632r,2640r:0)  0@2632r weight:0.000000e+00
%333 [1568r,1584r:0)  0@1568r weight:0.000000e+00
%335 [2584r,2592r:0)  0@2584r weight:0.000000e+00
%336 [2592r,2600r:0)  0@2592r weight:0.000000e+00
%337 [1648r,2116r:0)  0@1648r weight:0.000000e+00
%339 [1024r,2720B:0)  0@1024r weight:0.000000e+00
%340 [2116r,2160r:0)  0@2116r weight:0.000000e+00
%341 [1056r,2720B:0)  0@1056r weight:0.000000e+00
%342 [2136r,2168r:0)  0@2136r weight:0.000000e+00
%343 [2024r,2120r:0)  0@2024r weight:0.000000e+00
%345 [1072r,2720B:0)  0@1072r weight:0.000000e+00
%346 [2120r,2184r:0)  0@2120r weight:0.000000e+00
%347 [2168r,2192r:0)  0@2168r weight:0.000000e+00
%348 [2072r,2128r:0)  0@2072r weight:0.000000e+00
%349 [2128r,2144r:0)  0@2128r weight:0.000000e+00
%350 [2144r,2216r:0)  0@2144r weight:0.000000e+00
%351 [2192r,2264r:0)  0@2192r weight:0.000000e+00
%352 [2200r,2256r:0)  0@2200r weight:0.000000e+00
%353 [2256r,2312r:0)  0@2256r weight:0.000000e+00
%354 [2264r,2304r:0)  0@2264r weight:0.000000e+00
%355 [1104r,2720B:0)  0@1104r weight:0.000000e+00
%356 [2152r,2176r:0)  0@2152r weight:0.000000e+00
%357 [2176r,2208r:0)  0@2176r weight:0.000000e+00
%358 [2208r,2272r:0)  0@2208r weight:0.000000e+00
%359 [2272r,2304r:0)  0@2272r weight:0.000000e+00
%360 [2304r,2312r:0)  0@2304r weight:0.000000e+00
%361 [1120r,2720B:0)  0@1120r weight:0.000000e+00
%362 [2160r,2184r:0)  0@2160r weight:0.000000e+00
%363 [2184r,2216r:0)  0@2184r weight:0.000000e+00
%364 [2216r,2312r:0)  0@2216r weight:0.000000e+00
%365 [2488r,2544r:0)  0@2488r weight:0.000000e+00
%366 [2016r,2280r:0)  0@2016r weight:0.000000e+00
%367 [2280r,2392r:0)  0@2280r weight:0.000000e+00
%368 [2320r,2400r:0)  0@2320r weight:0.000000e+00
%369 [2064r,2288r:0)  0@2064r weight:0.000000e+00
%370 [2288r,2416r:0)  0@2288r weight:0.000000e+00
%371 [2400r,2440r:0)  0@2400r weight:0.000000e+00
%372 [2112r,2296r:0)  0@2112r weight:0.000000e+00
%373 [2296r,2432r:0)  0@2296r weight:0.000000e+00
%374 [2432r,2472r:0)  0@2432r weight:0.000000e+00
%375 [2440r,2456r:0)  0@2440r weight:0.000000e+00
%376 [2248r,2528r:0)  0@2248r weight:0.000000e+00
%378 [2424r,2480r:0)  0@2424r weight:0.000000e+00
%379 [2456r,2496r:0)  0@2456r weight:0.000000e+00
%380 [2352r,2408r:0)  0@2352r weight:0.000000e+00
%381 [2408r,2448r:0)  0@2408r weight:0.000000e+00
%382 [2448r,2464r:0)  0@2448r weight:0.000000e+00
%383 [2464r,2496r:0)  0@2464r weight:0.000000e+00
%384 [2496r,2536r:0)  0@2496r weight:0.000000e+00
%385 [1136r,2720B:0)  0@1136r weight:0.000000e+00
%386 [2392r,2416r:0)  0@2392r weight:0.000000e+00
%387 [2416r,2472r:0)  0@2416r weight:0.000000e+00
%388 [2472r,2480r:0)  0@2472r weight:0.000000e+00
%389 [2480r,2536r:0)  0@2480r weight:0.000000e+00
%390 [2536r,2544r:0)  0@2536r weight:0.000000e+00
%391 [2544r,2552r:0)  0@2544r weight:0.000000e+00
%392 [2528r,2560r:0)  0@2528r weight:0.000000e+00
RegMasks: 176r 352r 448r 672r 864r 6112r 6304r 6496r 6640r 6816r 7216r 7472r 7616r 7792r 8400r 10544r 10736r 10944r 11152r 11440r 11616r 11824r 12048r
********** MACHINEINSTRS **********
# Machine code for function diffusion: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=4, align=4, at location [SP]
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w0
48B	  %1:gpr64temp = ADRP target-flags(aarch64-page) @timeron
64B	  %2:gpr32 = LDRWui %1:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
68B	  %0:gpr32 = COPY $w0
72B	  STRWui %0:gpr32, %stack.0.ifmortar.addr, 0 :: (store 4 into %ir.ifmortar.addr)
80B	  CBZW %2:gpr32, %bb.2
96B	  B %bb.1

112B	bb.1.if.then:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
160B	  $w0 = MOVi32imm 5
176B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
192B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
208B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
224B	  PCN_STACKMAP 0, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.0.ifmortar.addr, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.0.ifmortar.addr, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
240B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

256B	bb.2.if.end:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

272B	  %4:gpr32 = LDRWui %stack.0.ifmortar.addr, 0 :: (dereferenceable load 4 from %ir.ifmortar.addr)
288B	  CBZW %4:gpr32, %bb.4
304B	  B %bb.3

320B	bb.3.if.then2:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

336B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
352B	  BL @setuppc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
368B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
384B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
400B	  PCN_STACKMAP 1, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
416B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
432B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
448B	  BL @setpcmo, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
464B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
480B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
496B	  PCN_STACKMAP 2, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
512B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

528B	bb.4.if.end3:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

544B	  %5:gpr64temp = ADRP target-flags(aarch64-page) @ntot
560B	  %6:gpr32 = LDRWui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
624B	  $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
656B	  $d0 = FMOVD0
664B	  $w1 = COPY %6:gpr32
672B	  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
688B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
704B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
720B	  PCN_STACKMAP 3, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %6:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
736B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
752B	  %9:gpr64temp = ADRP target-flags(aarch64-page) @nmor
768B	  %10:gpr32 = LDRWui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
784B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
816B	  $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
848B	  $d0 = FMOVD0
856B	  $w1 = COPY %10:gpr32
864B	  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
880B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
896B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
912B	  PCN_STACKMAP 4, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %10:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
928B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
960B	  STRXui $xzr, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
992B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)
1008B	  %15:gpr64temp = ADRP target-flags(aarch64-page) @nelt
1024B	  undef %339.sub_32:gpr64 = MOVi32imm 1000
1056B	  %341:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
1072B	  undef %345.sub_32:gpr64 = MOVi32imm 200
1104B	  %355:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
1120B	  %361:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
1136B	  %385:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult

1152B	bb.5.for.cond:
	; predecessors: %bb.4, %bb.15
	  successors: %bb.6(0x7c000000), %bb.16(0x04000000); %bb.6(96.88%), %bb.16(3.12%)

1168B	  %14:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
1184B	  %16:gpr32 = LDRWui %15:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
1200B	  dead $wzr = SUBSWrr %14:gpr32, %16:gpr32, implicit-def $nzcv
1216B	  Bcc 10, %bb.16, implicit killed $nzcv
1232B	  B %bb.6

1248B	bb.6.for.body:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1280B	  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

1296B	bb.7.for.cond4:
	; predecessors: %bb.6, %bb.14
	  successors: %bb.8(0x7c000000), %bb.15(0x04000000); %bb.8(96.88%), %bb.15(3.12%)

1312B	  %323:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
1328B	  dead $wzr = SUBSWri %323:gpr32common, 4, 0, implicit-def $nzcv
1344B	  Bcc 12, %bb.15, implicit killed $nzcv
1360B	  B %bb.8

1376B	bb.8.for.body6:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1408B	  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

1424B	bb.9.for.cond7:
	; predecessors: %bb.8, %bb.13
	  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

1440B	  %328:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
1456B	  dead $wzr = SUBSWri %328:gpr32common, 4, 0, implicit-def $nzcv
1472B	  Bcc 12, %bb.14, implicit killed $nzcv
1488B	  B %bb.10

1504B	bb.10.for.body9:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1536B	  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

1552B	bb.11.for.cond10:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

1568B	  %333:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
1584B	  dead $wzr = SUBSWri %333:gpr32common, 4, 0, implicit-def $nzcv
1600B	  Bcc 12, %bb.13, implicit killed $nzcv
1616B	  B %bb.12

1632B	bb.12.for.body12:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1648B	  %337:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
2016B	  %366:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
2024B	  %343:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
2064B	  %369:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
2072B	  %348:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
2112B	  %372:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
2116B	  %340:gpr64 = MADDXrrr %337:gpr64, %339:gpr64, $xzr
2120B	  %346:gpr64 = MADDXrrr %343:gpr64, %345:gpr64, $xzr
2128B	  %349:gpr64 = ADDXrs %348:gpr64, %348:gpr64, 2
2136B	  %342:gpr64 = ADDXrr %341:gpr64, %340:gpr64
2144B	  %350:gpr64 = UBFMXri %349:gpr64, 61, 60
2152B	  %356:gpr64 = ADDXrr %355:gpr64, %340:gpr64
2160B	  %362:gpr64 = ADDXrr %361:gpr64, %340:gpr64
2168B	  %347:gpr64 = ADDXrr %342:gpr64, %346:gpr64
2176B	  %357:gpr64 = ADDXrr %356:gpr64, %346:gpr64
2184B	  %363:gpr64 = ADDXrr %362:gpr64, %346:gpr64
2192B	  %351:gpr64common = ADDXrr %347:gpr64, %350:gpr64
2200B	  %352:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
2208B	  %358:gpr64common = ADDXrr %357:gpr64, %350:gpr64
2216B	  %364:gpr64common = ADDXrr %363:gpr64, %350:gpr64
2248B	  %376:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
2256B	  %353:gpr64 = UBFMXri %352:gpr64, 61, 60
2264B	  %354:fpr64 = LDRDroX %351:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx18)
2272B	  %359:fpr64 = LDRDroX %358:gpr64common, %353:gpr64, 0, 0 :: (load 8 from %ir.arrayidx26)
2280B	  %367:gpr64 = MADDXrrr %366:gpr64, %339:gpr64, $xzr
2288B	  %370:gpr64 = MADDXrrr %369:gpr64, %345:gpr64, $xzr
2296B	  %373:gpr64 = ADDXrs %372:gpr64, %372:gpr64, 2
2304B	  %360:fpr64 = FMULDrr %354:fpr64, %359:fpr64
2312B	  STRDroX %360:fpr64, %364:gpr64common, %353:gpr64, 0, 0 :: (store 8 into %ir.arrayidx34)
2320B	  %368:gpr64 = ADDXrr %355:gpr64, %367:gpr64
2352B	  %380:gpr64 = ADDXrr %361:gpr64, %367:gpr64
2392B	  %386:gpr64 = ADDXrr %385:gpr64, %367:gpr64
2400B	  %371:gpr64 = ADDXrr %368:gpr64, %370:gpr64
2408B	  %381:gpr64 = ADDXrr %380:gpr64, %370:gpr64
2416B	  %387:gpr64 = ADDXrr %386:gpr64, %370:gpr64
2424B	  %378:gpr64 = UBFMXri %376:gpr64common, 61, 60
2432B	  %374:gpr64 = UBFMXri %373:gpr64, 61, 60
2440B	  %375:gpr64common = ADDXrr %371:gpr64, %374:gpr64
2448B	  %382:gpr64common = ADDXrr %381:gpr64, %374:gpr64
2456B	  %379:fpr64 = LDRDroX %375:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx42)
2464B	  %383:fpr64 = LDRDroX %382:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx50)
2472B	  %388:gpr64common = ADDXrr %387:gpr64, %374:gpr64
2480B	  %389:fpr64 = LDRDroX %388:gpr64common, %378:gpr64, 0, 0 :: (load 8 from %ir.arrayidx59)
2488B	  %365:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
2496B	  %384:fpr64 = FMULDrr %379:fpr64, %383:fpr64
2528B	  %392:gpr32common = nsw ADDWri %376.sub_32:gpr64common, 1, 0
2536B	  %390:fpr64 = FMULDrr %384:fpr64, %389:fpr64
2544B	  %391:fpr64 = FADDDrr %365:fpr64, %390:fpr64
2552B	  STRDui %391:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
2560B	  STRWui %392:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
2568B	  B %bb.11

2576B	bb.13.for.inc61:
	; predecessors: %bb.11
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2584B	  %335:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
2592B	  %336:gpr32common = nsw ADDWri %335:gpr32common, 1, 0
2600B	  STRWui %336:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
2608B	  B %bb.9

2616B	bb.14.for.inc64:
	; predecessors: %bb.9
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

2624B	  %330:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
2632B	  %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0
2640B	  STRWui %331:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
2648B	  B %bb.7

2656B	bb.15.for.inc67:
	; predecessors: %bb.7
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

2664B	  %325:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
2672B	  %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0
2688B	  STRWui %326:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
2704B	  B %bb.5

2720B	bb.16.for.end69:
	; predecessors: %bb.5
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2752B	  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)
2768B	  %20:gpr64temp = ADRP target-flags(aarch64-page) @nmor
2784B	  %310:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
2800B	  %313:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
2816B	  %316:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx

2832B	bb.17.for.cond70:
	; predecessors: %bb.16, %bb.18
	  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

2848B	  %19:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
2864B	  %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
2880B	  dead $wzr = SUBSWrr %19:gpr32, %21:gpr32, implicit-def $nzcv
2896B	  Bcc 10, %bb.19, implicit killed $nzcv
2912B	  B %bb.18

2928B	bb.18.for.body72:
	; predecessors: %bb.17
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2944B	  %308:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
2976B	  %311:gpr64 = UBFMXri %308:gpr64common, 61, 60
2992B	  %312:fpr64 = LDRDroX %310:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx74)
3008B	  %314:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx76)
3072B	  %318:fpr64 = LDRDroX %313:gpr64common, %311:gpr64, 0, 0 :: (load 8 from %ir.arrayidx81)
3076B	  %315:fpr64 = FMULDrr %312:fpr64, %314:fpr64
3080B	  %317:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
3136B	  %321:gpr32common = nsw ADDWri %308.sub_32:gpr64common, 1, 0
3140B	  STRDroX %315:fpr64, %316:gpr64common, %311:gpr64, 0, 0 :: (store 8 into %ir.arrayidx79)
3144B	  %319:fpr64 = FMULDrr %318:fpr64, %315:fpr64
3152B	  %320:fpr64 = FADDDrr %317:fpr64, %319:fpr64
3160B	  STRDui %320:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
3168B	  STRWui %321:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
3176B	  B %bb.17

3184B	bb.19.for.end88:
	; predecessors: %bb.17
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

3200B	  %23:gpr32 = MOVi32imm 1
3232B	  %25:gpr64temp = ADRP target-flags(aarch64-page) @nmxh
3248B	  %44:gpr64temp = ADRP target-flags(aarch64-page) @nelt
3264B	  undef %254.sub_32:gpr64 = MOVi32imm 1000
3296B	  %256:gpr64 = MOVaddr target-flags(aarch64-page) @dpcelm, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm
3312B	  undef %260.sub_32:gpr64 = MOVi32imm 200
3344B	  %270:gpr64 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
3360B	  %276:gpr64 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
3376B	  %300:gpr64 = MOVaddr target-flags(aarch64-page) @tmult, target-flags(aarch64-pageoff, aarch64-nc) @tmult
3392B	  %49:gpr64temp = ADRP target-flags(aarch64-page) @nmor
3408B	  %225:gpr64common = MOVaddr target-flags(aarch64-page) @dpcmor, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor
3424B	  %228:gpr64common = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
3440B	  %231:gpr64common = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
3456B	  %55:gpr64temp = ADRP target-flags(aarch64-page) @ntot
3472B	  %57:gpr64 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
3480B	  STRWui %23:gpr32, %stack.6.iter, 0 :: (store 4 into %ir.iter)
3488B	  %62:gpr64common = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
3504B	  %64:gpr64temp = ADRP target-flags(aarch64-page) @timeron
3536B	  %219:gpr64common = MOVaddr target-flags(aarch64-page) @size_e, target-flags(aarch64-pageoff, aarch64-nc) @size_e
3568B	  undef %195.sub_32:gpr64 = MOVi32imm 24
3600B	  %197:gpr64 = MOVaddr target-flags(aarch64-page) @cbc, target-flags(aarch64-pageoff, aarch64-nc) @cbc
3632B	  %130:gpr64common = MOVaddr target-flags(aarch64-page) @tmmor, target-flags(aarch64-pageoff, aarch64-nc) @tmmor

3680B	bb.20.for.cond89:
	; predecessors: %bb.19, %bb.72
	  successors: %bb.21(0x7c000000), %bb.73(0x04000000); %bb.21(96.88%), %bb.73(3.12%)

3696B	  %24:gpr32 = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
3712B	  %26:gpr32 = LDRWui %25:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
3728B	  dead $wzr = SUBSWrr %24:gpr32, %26:gpr32, implicit-def $nzcv
3744B	  Bcc 12, %bb.73, implicit killed $nzcv
3760B	  B %bb.21

3776B	bb.21.for.body91:
	; predecessors: %bb.20
	  successors: %bb.22(0x40000000), %bb.38(0x40000000); %bb.22(50.00%), %bb.38(50.00%)

3792B	  %39:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
3808B	  dead $wzr = SUBSWri %39:gpr32common, 2, 0, implicit-def $nzcv
3824B	  Bcc 11, %bb.38, implicit killed $nzcv
3840B	  B %bb.22

3856B	bb.22.if.then93:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

3888B	  STRXui $xzr, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
3920B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

3936B	bb.23.for.cond94:
	; predecessors: %bb.22, %bb.33
	  successors: %bb.24(0x7c000000), %bb.34(0x04000000); %bb.24(96.88%), %bb.34(3.12%)

3952B	  %43:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
3968B	  %45:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
3984B	  dead $wzr = SUBSWrr %43:gpr32, %45:gpr32, implicit-def $nzcv
4000B	  Bcc 10, %bb.34, implicit killed $nzcv
4016B	  B %bb.24

4032B	bb.24.for.body96:
	; predecessors: %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4064B	  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

4080B	bb.25.for.cond97:
	; predecessors: %bb.24, %bb.32
	  successors: %bb.26(0x7c000000), %bb.33(0x04000000); %bb.26(96.88%), %bb.33(3.12%)

4096B	  %238:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
4112B	  dead $wzr = SUBSWri %238:gpr32common, 4, 0, implicit-def $nzcv
4128B	  Bcc 12, %bb.33, implicit killed $nzcv
4144B	  B %bb.26

4160B	bb.26.for.body99:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4192B	  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

4208B	bb.27.for.cond100:
	; predecessors: %bb.26, %bb.31
	  successors: %bb.28(0x7c000000), %bb.32(0x04000000); %bb.28(96.88%), %bb.32(3.12%)

4224B	  %243:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
4240B	  dead $wzr = SUBSWri %243:gpr32common, 4, 0, implicit-def $nzcv
4256B	  Bcc 12, %bb.32, implicit killed $nzcv
4272B	  B %bb.28

4288B	bb.28.for.body102:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

4320B	  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

4336B	bb.29.for.cond103:
	; predecessors: %bb.28, %bb.30
	  successors: %bb.30(0x7c000000), %bb.31(0x04000000); %bb.30(96.88%), %bb.31(3.12%)

4352B	  %248:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
4368B	  dead $wzr = SUBSWri %248:gpr32common, 4, 0, implicit-def $nzcv
4384B	  Bcc 12, %bb.31, implicit killed $nzcv
4400B	  B %bb.30

4416B	bb.30.for.body105:
	; predecessors: %bb.29
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

4432B	  %252:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
4800B	  %281:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
4808B	  %258:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
4848B	  %284:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
4856B	  %263:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
4896B	  %287:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
4900B	  %255:gpr64 = MADDXrrr %252:gpr64, %254:gpr64, $xzr
4904B	  %261:gpr64 = MADDXrrr %258:gpr64, %260:gpr64, $xzr
4912B	  %264:gpr64 = ADDXrs %263:gpr64, %263:gpr64, 2
4920B	  %257:gpr64 = ADDXrr %256:gpr64, %255:gpr64
4928B	  %265:gpr64 = UBFMXri %264:gpr64, 61, 60
4936B	  %271:gpr64 = ADDXrr %270:gpr64, %255:gpr64
4944B	  %277:gpr64 = ADDXrr %276:gpr64, %255:gpr64
4952B	  %262:gpr64 = ADDXrr %257:gpr64, %261:gpr64
4960B	  %272:gpr64 = ADDXrr %271:gpr64, %261:gpr64
4968B	  %278:gpr64 = ADDXrr %277:gpr64, %261:gpr64
4976B	  %266:gpr64common = ADDXrr %262:gpr64, %265:gpr64
4984B	  %267:gpr64 = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
4992B	  %273:gpr64common = ADDXrr %272:gpr64, %265:gpr64
5000B	  %279:gpr64common = ADDXrr %278:gpr64, %265:gpr64
5032B	  %291:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
5040B	  %268:gpr64 = UBFMXri %267:gpr64, 61, 60
5048B	  %269:fpr64 = LDRDroX %266:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx113)
5056B	  %274:fpr64 = LDRDroX %273:gpr64common, %268:gpr64, 0, 0 :: (load 8 from %ir.arrayidx121)
5064B	  %282:gpr64 = MADDXrrr %281:gpr64, %254:gpr64, $xzr
5072B	  %285:gpr64 = MADDXrrr %284:gpr64, %260:gpr64, $xzr
5080B	  %288:gpr64 = ADDXrs %287:gpr64, %287:gpr64, 2
5088B	  %275:fpr64 = FMULDrr %269:fpr64, %274:fpr64
5096B	  STRDroX %275:fpr64, %279:gpr64common, %268:gpr64, 0, 0 :: (store 8 into %ir.arrayidx130)
5104B	  %283:gpr64 = ADDXrr %270:gpr64, %282:gpr64
5136B	  %295:gpr64 = ADDXrr %276:gpr64, %282:gpr64
5176B	  %301:gpr64 = ADDXrr %300:gpr64, %282:gpr64
5184B	  %286:gpr64 = ADDXrr %283:gpr64, %285:gpr64
5192B	  %296:gpr64 = ADDXrr %295:gpr64, %285:gpr64
5200B	  %302:gpr64 = ADDXrr %301:gpr64, %285:gpr64
5208B	  %293:gpr64 = UBFMXri %291:gpr64common, 61, 60
5216B	  %289:gpr64 = UBFMXri %288:gpr64, 61, 60
5224B	  %290:gpr64common = ADDXrr %286:gpr64, %289:gpr64
5232B	  %297:gpr64common = ADDXrr %296:gpr64, %289:gpr64
5240B	  %294:fpr64 = LDRDroX %290:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx138)
5248B	  %298:fpr64 = LDRDroX %297:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx146)
5256B	  %303:gpr64common = ADDXrr %302:gpr64, %289:gpr64
5264B	  %304:fpr64 = LDRDroX %303:gpr64common, %293:gpr64, 0, 0 :: (load 8 from %ir.arrayidx155)
5272B	  %280:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
5280B	  %299:fpr64 = FMULDrr %294:fpr64, %298:fpr64
5312B	  %307:gpr32common = nsw ADDWri %291.sub_32:gpr64common, 1, 0
5320B	  %305:fpr64 = FMULDrr %299:fpr64, %304:fpr64
5328B	  %306:fpr64 = FADDDrr %280:fpr64, %305:fpr64
5336B	  STRDui %306:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
5344B	  STRWui %307:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
5352B	  B %bb.29

5360B	bb.31.for.inc161:
	; predecessors: %bb.29
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

5368B	  %250:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
5376B	  %251:gpr32common = nsw ADDWri %250:gpr32common, 1, 0
5384B	  STRWui %251:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
5392B	  B %bb.27

5400B	bb.32.for.inc164:
	; predecessors: %bb.27
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

5408B	  %245:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
5416B	  %246:gpr32common = nsw ADDWri %245:gpr32common, 1, 0
5424B	  STRWui %246:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
5432B	  B %bb.25

5440B	bb.33.for.inc167:
	; predecessors: %bb.25
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

5448B	  %240:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
5456B	  %241:gpr32common = nsw ADDWri %240:gpr32common, 1, 0
5472B	  STRWui %241:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
5488B	  B %bb.23

5504B	bb.34.for.end169:
	; predecessors: %bb.23
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

5536B	  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)

5552B	bb.35.for.cond170:
	; predecessors: %bb.34, %bb.36
	  successors: %bb.36(0x7c000000), %bb.37(0x04000000); %bb.36(96.88%), %bb.37(3.12%)

5568B	  %48:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
5584B	  %50:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
5600B	  dead $wzr = SUBSWrr %48:gpr32, %50:gpr32, implicit-def $nzcv
5616B	  Bcc 10, %bb.37, implicit killed $nzcv
5632B	  B %bb.36

5648B	bb.36.for.body172:
	; predecessors: %bb.35
	  successors: %bb.35(0x80000000); %bb.35(100.00%)

5664B	  %223:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
5696B	  %226:gpr64 = UBFMXri %223:gpr64common, 61, 60
5712B	  %227:fpr64 = LDRDroX %225:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx174)
5728B	  %229:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx176)
5792B	  %233:fpr64 = LDRDroX %228:gpr64common, %226:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
5796B	  %230:fpr64 = FMULDrr %227:fpr64, %229:fpr64
5800B	  %232:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
5856B	  %236:gpr32common = nsw ADDWri %223.sub_32:gpr64common, 1, 0
5860B	  STRDroX %230:fpr64, %231:gpr64common, %226:gpr64, 0, 0 :: (store 8 into %ir.arrayidx179)
5864B	  %234:fpr64 = FMULDrr %233:fpr64, %230:fpr64
5872B	  %235:fpr64 = FADDDrr %232:fpr64, %234:fpr64
5880B	  STRDui %235:fpr64, %stack.1.rho_aux, 0 :: (store 8 into %ir.rho_aux)
5888B	  STRWui %236:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
5896B	  B %bb.35

5904B	bb.37.for.end188:
	; predecessors: %bb.35
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

5920B	  %52:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
5952B	  %53:fpr64 = LDRDui %stack.1.rho_aux, 0 :: (dereferenceable load 8 from %ir.rho_aux)
6016B	  %56:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
6020B	  STRDui %52:fpr64, %stack.3.rho2, 0 :: (store 8 into %ir.rho2)
6024B	  STRDui %53:fpr64, %stack.2.rho1, 0 :: (store 8 into %ir.rho1)
6032B	  %54:fpr64 = FDIVDrr %53:fpr64, %52:fpr64
6040B	  STRDui %54:fpr64, %stack.4.beta, 0 :: (store 8 into %ir.beta)
6048B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6056B	  $x0 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
6064B	  $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
6080B	  $d0 = COPY %54:fpr64
6096B	  $w2 = COPY %56:gpr32
6112B	  BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
6128B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6144B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6160B	  PCN_STACKMAP 5, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %54:fpr64, %56:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
6176B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6192B	  %59:fpr64 = LDRDui %stack.4.beta, 0 :: (dereferenceable load 8 from %ir.beta)
6208B	  %61:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
6224B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6240B	  $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
6256B	  $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
6272B	  $d0 = COPY %59:fpr64
6288B	  $w2 = COPY %61:gpr32
6304B	  BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
6320B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6336B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6352B	  PCN_STACKMAP 6, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %59:fpr64, %61:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
6368B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6384B	bb.38.if.end189:
	; predecessors: %bb.21, %bb.37
	  successors: %bb.39(0x50000000), %bb.40(0x30000000); %bb.39(62.50%), %bb.40(37.50%)

6400B	  %65:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
6416B	  CBZW %65:gpr32, %bb.40
6432B	  B %bb.39

6448B	bb.39.if.then191:
	; predecessors: %bb.38
	  successors: %bb.40(0x80000000); %bb.40(100.00%)

6464B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6480B	  $w0 = MOVi32imm 6
6496B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6512B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6528B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6544B	  PCN_STACKMAP 7, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
6560B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6576B	bb.40.if.end192:
	; predecessors: %bb.38, %bb.39
	  successors: %bb.41(0x50000000), %bb.42(0x30000000); %bb.41(62.50%), %bb.42(37.50%)

6592B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6608B	  $x0 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
6624B	  $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
6640B	  BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
6656B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6672B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6688B	  PCN_STACKMAP 8, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
6704B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
6720B	  %70:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
6736B	  CBZW %70:gpr32, %bb.42
6752B	  B %bb.41

6768B	bb.41.if.then194:
	; predecessors: %bb.40
	  successors: %bb.42(0x80000000); %bb.42(100.00%)

6784B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
6800B	  $w0 = MOVi32imm 6
6816B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
6832B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
6848B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
6864B	  PCN_STACKMAP 9, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
6880B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

6896B	bb.42.if.end195:
	; predecessors: %bb.40, %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

6928B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

6944B	bb.43.for.cond196:
	; predecessors: %bb.42, %bb.44
	  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)

6960B	  %73:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
6976B	  %75:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
6992B	  dead $wzr = SUBSWrr %73:gpr32, %75:gpr32, implicit-def $nzcv
7008B	  Bcc 10, %bb.45, implicit killed $nzcv
7024B	  B %bb.44

7040B	bb.44.for.body198:
	; predecessors: %bb.43
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

7056B	  %211:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7136B	  %220:gpr32 = LDRWroX %219:gpr64common, %211:gpr64, 0, 1 :: (load 4 from %ir.arrayidx205)
7144B	  %214:gpr64 = MADDXrrr %211:gpr64, %254:gpr64, $xzr
7152B	  %216:gpr64 = ADDXrr %276:gpr64, %214:gpr64
7160B	  %218:gpr64 = ADDXrr %57:gpr64, %214:gpr64
7168B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7176B	  $x0 = COPY %216:gpr64
7184B	  $x1 = COPY %218:gpr64
7200B	  $w2 = COPY %220:gpr32
7216B	  BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $w2, implicit-def $sp
7232B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
7248B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
7264B	  PCN_STACKMAP 10, 0, %216:gpr64, %218:gpr64, %216:gpr64, %218:gpr64, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %220:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
7280B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
7296B	  %221:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7312B	  %222:gpr32common = nsw ADDWri %221:gpr32common, 1, 0
7328B	  STRWui %222:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
7344B	  B %bb.43

7360B	bb.45.for.end208:
	; predecessors: %bb.43
	  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)

7376B	  %78:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
7392B	  CBZW %78:gpr32, %bb.47
7408B	  B %bb.46

7424B	bb.46.if.then210:
	; predecessors: %bb.45
	  successors: %bb.47(0x80000000); %bb.47(100.00%)

7440B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7456B	  $w0 = MOVi32imm 7
7472B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
7488B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
7504B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
7520B	  PCN_STACKMAP 11, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
7536B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

7552B	bb.47.if.end211:
	; predecessors: %bb.45, %bb.46
	  successors: %bb.48(0x50000000), %bb.49(0x30000000); %bb.48(62.50%), %bb.49(37.50%)

7568B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7584B	  $x0 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
7600B	  $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
7616B	  BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
7632B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
7648B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
7664B	  PCN_STACKMAP 12, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
7680B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
7696B	  %83:gpr32 = LDRWui %64:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
7712B	  CBZW %83:gpr32, %bb.49
7728B	  B %bb.48

7744B	bb.48.if.then213:
	; predecessors: %bb.47
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

7760B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
7776B	  $w0 = MOVi32imm 7
7792B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
7808B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
7824B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
7840B	  PCN_STACKMAP 13, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
7856B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

7872B	bb.49.if.end214:
	; predecessors: %bb.47, %bb.48
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

7904B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

7920B	bb.50.for.cond215:
	; predecessors: %bb.49, %bb.56
	  successors: %bb.51(0x7c000000), %bb.57(0x04000000); %bb.51(96.88%), %bb.57(3.12%)

7936B	  %86:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
7952B	  %88:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
7968B	  dead $wzr = SUBSWrr %86:gpr32, %88:gpr32, implicit-def $nzcv
7984B	  Bcc 10, %bb.57, implicit killed $nzcv
8000B	  B %bb.51

8016B	bb.51.for.body217:
	; predecessors: %bb.50
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

8048B	  STRWui $wzr, %stack.9.iside, 0 :: (store 4 into %ir.iside)

8064B	bb.52.for.cond218:
	; predecessors: %bb.51, %bb.55
	  successors: %bb.53(0x7c000000), %bb.56(0x04000000); %bb.53(96.88%), %bb.56(3.12%)

8080B	  %189:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
8096B	  dead $wzr = SUBSWri %189:gpr32common, 5, 0, implicit-def $nzcv
8112B	  Bcc 12, %bb.56, implicit killed $nzcv
8128B	  B %bb.53

8144B	bb.53.for.body220:
	; predecessors: %bb.52
	  successors: %bb.54(0x30000000), %bb.55(0x50000000); %bb.54(37.50%), %bb.55(62.50%)

8160B	  %193:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
8192B	  %199:gpr64 = LDRSWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
8200B	  %198:gpr64common = MADDXrrr %193:gpr64, %195:gpr64, %197:gpr64
8208B	  %200:gpr32 = LDRWroX %198:gpr64common, %199:gpr64, 0, 1 :: (load 4 from %ir.arrayidx224)
8224B	  CBNZW %200:gpr32, %bb.55
8240B	  B %bb.54

8256B	bb.54.if.then226:
	; predecessors: %bb.53
	  successors: %bb.55(0x80000000); %bb.55(100.00%)

8272B	  %201:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
8320B	  %207:gpr32 = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
8328B	  %206:gpr64 = MADDXrrr %201:gpr64, %254:gpr64, %276:gpr64
8336B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
8384B	  $d0 = FMOVD0
8388B	  $x0 = COPY %206:gpr64
8392B	  $w1 = COPY %207:gpr32
8400B	  BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
8416B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
8432B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
8448B	  PCN_STACKMAP 14, 0, %206:gpr64, %206:gpr64, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %207:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
8464B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

8480B	bb.55.for.inc231:
	; predecessors: %bb.53, %bb.54
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

8496B	  %209:gpr32common = LDRWui %stack.9.iside, 0 :: (dereferenceable load 4 from %ir.iside)
8512B	  %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0
8528B	  STRWui %210:gpr32common, %stack.9.iside, 0 :: (store 4 into %ir.iside)
8544B	  B %bb.52

8560B	bb.56.for.inc234:
	; predecessors: %bb.52
	  successors: %bb.50(0x80000000); %bb.50(100.00%)

8576B	  %191:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
8592B	  %192:gpr32common = nsw ADDWri %191:gpr32common, 1, 0
8608B	  STRWui %192:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
8624B	  B %bb.50

8640B	bb.57.for.end236:
	; predecessors: %bb.50
	  successors: %bb.58(0x80000000); %bb.58(100.00%)

8672B	  STRXui $xzr, %stack.5.cona, 0 :: (store 8 into %ir.cona)
8704B	  STRWui $wzr, %stack.7.ie, 0 :: (store 4 into %ir.ie)

8720B	bb.58.for.cond237:
	; predecessors: %bb.57, %bb.68
	  successors: %bb.59(0x7c000000), %bb.69(0x04000000); %bb.59(96.88%), %bb.69(3.12%)

8736B	  %92:gpr32 = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
8752B	  %94:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
8768B	  dead $wzr = SUBSWrr %92:gpr32, %94:gpr32, implicit-def $nzcv
8784B	  Bcc 10, %bb.69, implicit killed $nzcv
8800B	  B %bb.59

8816B	bb.59.for.body239:
	; predecessors: %bb.58
	  successors: %bb.60(0x80000000); %bb.60(100.00%)

8848B	  STRWui $wzr, %stack.12.k, 0 :: (store 4 into %ir.k)

8864B	bb.60.for.cond240:
	; predecessors: %bb.59, %bb.67
	  successors: %bb.61(0x7c000000), %bb.68(0x04000000); %bb.61(96.88%), %bb.68(3.12%)

8880B	  %140:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
8896B	  dead $wzr = SUBSWri %140:gpr32common, 4, 0, implicit-def $nzcv
8912B	  Bcc 12, %bb.68, implicit killed $nzcv
8928B	  B %bb.61

8944B	bb.61.for.body242:
	; predecessors: %bb.60
	  successors: %bb.62(0x80000000); %bb.62(100.00%)

8976B	  STRWui $wzr, %stack.11.j, 0 :: (store 4 into %ir.j)

8992B	bb.62.for.cond243:
	; predecessors: %bb.61, %bb.66
	  successors: %bb.63(0x7c000000), %bb.67(0x04000000); %bb.63(96.88%), %bb.67(3.12%)

9008B	  %145:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
9024B	  dead $wzr = SUBSWri %145:gpr32common, 4, 0, implicit-def $nzcv
9040B	  Bcc 12, %bb.67, implicit killed $nzcv
9056B	  B %bb.63

9072B	bb.63.for.body245:
	; predecessors: %bb.62
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

9104B	  STRWui $wzr, %stack.10.i, 0 :: (store 4 into %ir.i)

9120B	bb.64.for.cond246:
	; predecessors: %bb.63, %bb.65
	  successors: %bb.65(0x7c000000), %bb.66(0x04000000); %bb.65(96.88%), %bb.66(3.12%)

9136B	  %150:gpr32common = LDRWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
9152B	  dead $wzr = SUBSWri %150:gpr32common, 4, 0, implicit-def $nzcv
9168B	  Bcc 12, %bb.66, implicit killed $nzcv
9184B	  B %bb.65

9200B	bb.65.for.body248:
	; predecessors: %bb.64
	  successors: %bb.64(0x80000000); %bb.64(100.00%)

9232B	  %155:gpr64 = LDRSWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
9296B	  %161:gpr64 = LDRSWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
9360B	  %166:gpr64 = LDRSWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
9424B	  %170:gpr64common = LDRSWui %stack.10.i, 0 :: (dereferenceable load 4 from %ir.i)
9428B	  %158:gpr64 = MADDXrrr %155:gpr64, %254:gpr64, $xzr
9432B	  %164:gpr64 = MADDXrrr %161:gpr64, %260:gpr64, $xzr
9440B	  %167:gpr64 = ADDXrs %166:gpr64, %166:gpr64, 2
9448B	  %160:gpr64 = ADDXrr %57:gpr64, %158:gpr64
9488B	  %175:gpr64 = ADDXrr %276:gpr64, %158:gpr64
9568B	  %181:gpr64 = ADDXrr %300:gpr64, %158:gpr64
9572B	  %165:gpr64 = ADDXrr %160:gpr64, %164:gpr64
9576B	  %176:gpr64 = ADDXrr %175:gpr64, %164:gpr64
9584B	  %182:gpr64 = ADDXrr %181:gpr64, %164:gpr64
9588B	  %172:gpr64 = UBFMXri %170:gpr64common, 61, 60
9592B	  %168:gpr64 = UBFMXri %167:gpr64, 61, 60
9600B	  %169:gpr64common = ADDXrr %165:gpr64, %168:gpr64
9608B	  %177:gpr64common = ADDXrr %176:gpr64, %168:gpr64
9616B	  %173:fpr64 = LDRDroX %169:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx256)
9624B	  %178:fpr64 = LDRDroX %177:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx264)
9632B	  %183:gpr64common = ADDXrr %182:gpr64, %168:gpr64
9640B	  %184:fpr64 = LDRDroX %183:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx273)
9648B	  %154:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
9656B	  %179:fpr64 = FMULDrr %173:fpr64, %178:fpr64
9688B	  %187:gpr32common = nsw ADDWri %170.sub_32:gpr64common, 1, 0
9696B	  %185:fpr64 = FMULDrr %179:fpr64, %184:fpr64
9704B	  %186:fpr64 = FADDDrr %154:fpr64, %185:fpr64
9712B	  STRDui %186:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
9720B	  STRWui %187:gpr32common, %stack.10.i, 0 :: (store 4 into %ir.i)
9728B	  B %bb.64

9736B	bb.66.for.inc279:
	; predecessors: %bb.64
	  successors: %bb.62(0x80000000); %bb.62(100.00%)

9744B	  %152:gpr32common = LDRWui %stack.11.j, 0 :: (dereferenceable load 4 from %ir.j)
9760B	  %153:gpr32common = nsw ADDWri %152:gpr32common, 1, 0
9776B	  STRWui %153:gpr32common, %stack.11.j, 0 :: (store 4 into %ir.j)
9792B	  B %bb.62

9808B	bb.67.for.inc282:
	; predecessors: %bb.62
	  successors: %bb.60(0x80000000); %bb.60(100.00%)

9824B	  %147:gpr32common = LDRWui %stack.12.k, 0 :: (dereferenceable load 4 from %ir.k)
9840B	  %148:gpr32common = nsw ADDWri %147:gpr32common, 1, 0
9856B	  STRWui %148:gpr32common, %stack.12.k, 0 :: (store 4 into %ir.k)
9872B	  B %bb.60

9888B	bb.68.for.inc285:
	; predecessors: %bb.60
	  successors: %bb.58(0x80000000); %bb.58(100.00%)

9904B	  %142:gpr32common = LDRWui %stack.7.ie, 0 :: (dereferenceable load 4 from %ir.ie)
9920B	  %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0
9936B	  STRWui %143:gpr32common, %stack.7.ie, 0 :: (store 4 into %ir.ie)
9952B	  B %bb.58

9968B	bb.69.for.end287:
	; predecessors: %bb.58
	  successors: %bb.70(0x80000000); %bb.70(100.00%)

10000B	  STRWui $wzr, %stack.8.im, 0 :: (store 4 into %ir.im)

10016B	bb.70.for.cond288:
	; predecessors: %bb.69, %bb.71
	  successors: %bb.71(0x7c000000), %bb.72(0x04000000); %bb.71(96.88%), %bb.72(3.12%)

10032B	  %97:gpr32 = LDRWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
10048B	  %99:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
10064B	  dead $wzr = SUBSWrr %97:gpr32, %99:gpr32, implicit-def $nzcv
10080B	  Bcc 10, %bb.72, implicit killed $nzcv
10096B	  B %bb.71

10112B	bb.71.for.body290:
	; predecessors: %bb.70
	  successors: %bb.70(0x80000000); %bb.70(100.00%)

10128B	  %125:gpr64common = LDRSWui %stack.8.im, 0 :: (dereferenceable load 4 from %ir.im)
10160B	  %128:gpr64 = UBFMXri %125:gpr64common, 61, 60
10176B	  %129:fpr64 = LDRDroX %231:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx292)
10192B	  %131:fpr64 = LDRDroX %130:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx294)
10256B	  %135:fpr64 = LDRDroX %62:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx299)
10260B	  %132:fpr64 = FMULDrr %129:fpr64, %131:fpr64
10264B	  %133:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
10320B	  %138:gpr32common = nsw ADDWri %125.sub_32:gpr64common, 1, 0
10324B	  STRDroX %132:fpr64, %231:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx297)
10328B	  %136:fpr64 = FMULDrr %135:fpr64, %132:fpr64
10336B	  %137:fpr64 = FADDDrr %133:fpr64, %136:fpr64
10344B	  STRDui %137:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
10352B	  STRWui %138:gpr32common, %stack.8.im, 0 :: (store 4 into %ir.im)
10360B	  B %bb.70

10368B	bb.72.for.end306:
	; predecessors: %bb.70
	  successors: %bb.20(0x80000000); %bb.20(100.00%)

10384B	  %101:fpr64 = LDRDui %stack.2.rho1, 0 :: (dereferenceable load 8 from %ir.rho1)
10400B	  %102:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
10448B	  %105:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
10452B	  %103:fpr64 = FDIVDrr %101:fpr64, %102:fpr64
10456B	  STRDui %103:fpr64, %stack.5.cona, 0 :: (store 8 into %ir.cona)
10464B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10480B	  $x0 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
10496B	  $x1 = MOVaddr target-flags(aarch64-page) @pdiff, target-flags(aarch64-pageoff, aarch64-nc) @pdiff
10512B	  $d0 = COPY %103:fpr64
10528B	  $w2 = COPY %105:gpr32
10544B	  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
10560B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10576B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10592B	  PCN_STACKMAP 15, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %103:fpr64, %105:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
10608B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10624B	  %108:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
10640B	  %110:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
10656B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10672B	  $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
10688B	  $x1 = MOVaddr target-flags(aarch64-page) @pmorx, target-flags(aarch64-pageoff, aarch64-nc) @pmorx
10704B	  $d0 = COPY %108:fpr64
10720B	  $w2 = COPY %110:gpr32
10736B	  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
10752B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10768B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10784B	  PCN_STACKMAP 16, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %108:fpr64, %110:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
10800B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
10816B	  %113:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
10848B	  %115:gpr32 = LDRWui %55:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
10856B	  %114:fpr64 = FNEGDr %113:fpr64
10864B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
10880B	  $x0 = MOVaddr target-flags(aarch64-page) @trhs, target-flags(aarch64-pageoff, aarch64-nc) @trhs
10896B	  $x1 = MOVaddr target-flags(aarch64-page) @pdiffp, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp
10912B	  $d0 = COPY %114:fpr64
10928B	  $w2 = COPY %115:gpr32
10944B	  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
10960B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
10976B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
10992B	  PCN_STACKMAP 17, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %114:fpr64, %115:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
11008B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
11024B	  %118:fpr64 = LDRDui %stack.5.cona, 0 :: (dereferenceable load 8 from %ir.cona)
11056B	  %120:gpr32 = LDRWui %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
11064B	  %119:fpr64 = FNEGDr %118:fpr64
11072B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11088B	  $x0 = MOVaddr target-flags(aarch64-page) @rmor, target-flags(aarch64-pageoff, aarch64-nc) @rmor
11104B	  $x1 = MOVaddr target-flags(aarch64-page) @ppmor, target-flags(aarch64-pageoff, aarch64-nc) @ppmor
11120B	  $d0 = COPY %119:fpr64
11136B	  $w2 = COPY %120:gpr32
11152B	  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $w2, implicit-def $sp
11168B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
11184B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11200B	  PCN_STACKMAP 18, 0, 0, %stack.4.beta, 0, 0, %stack.5.cona, 0, 0, %stack.10.i, 0, 0, %stack.7.ie, 0, 0, %stack.8.im, 0, 0, %stack.9.iside, 0, 0, %stack.6.iter, 0, 0, %stack.11.j, 0, 0, %stack.12.k, 0, 0, %stack.2.rho1, 0, 0, %stack.3.rho2, 0, 0, %stack.1.rho_aux, 0, %119:fpr64, %120:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
11216B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
11232B	  %123:gpr32common = LDRWui %stack.6.iter, 0 :: (dereferenceable load 4 from %ir.iter)
11248B	  %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0
11264B	  STRWui %124:gpr32common, %stack.6.iter, 0 :: (store 4 into %ir.iter)
11280B	  B %bb.20

11296B	bb.73.for.end311:
	; predecessors: %bb.20
	  successors: %bb.74(0x50000000), %bb.75(0x30000000); %bb.74(62.50%), %bb.75(37.50%)

11312B	  %28:gpr64temp = ADRP target-flags(aarch64-page) @timeron
11328B	  %29:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
11344B	  CBZW %29:gpr32, %bb.75
11360B	  B %bb.74

11376B	bb.74.if.then313:
	; predecessors: %bb.73
	  successors: %bb.75(0x80000000); %bb.75(100.00%)

11392B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11424B	  $w0 = MOVi32imm 6
11440B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
11456B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
11472B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11488B	  PCN_STACKMAP 19, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr
11504B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

11520B	bb.75.if.end314:
	; predecessors: %bb.73, %bb.74
	  successors: %bb.76(0x50000000), %bb.77(0x30000000); %bb.76(62.50%), %bb.77(37.50%)

11536B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11584B	  $x0 = MOVaddr target-flags(aarch64-page) @umor, target-flags(aarch64-pageoff, aarch64-nc) @umor
11600B	  $x1 = MOVaddr target-flags(aarch64-page) @t, target-flags(aarch64-pageoff, aarch64-nc) @t
11616B	  BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
11632B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
11648B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11664B	  PCN_STACKMAP 20, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr
11680B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
11696B	  %33:gpr64temp = ADRP target-flags(aarch64-page) @timeron
11712B	  %34:gpr32 = LDRWui %33:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
11728B	  CBZW %34:gpr32, %bb.77
11744B	  B %bb.76

11760B	bb.76.if.then316:
	; predecessors: %bb.75
	  successors: %bb.77(0x80000000); %bb.77(100.00%)

11776B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
11808B	  $w0 = MOVi32imm 6
11824B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
11840B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
11856B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11872B	  PCN_STACKMAP 21, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr
11888B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

11904B	bb.77.if.end317:
	; predecessors: %bb.75, %bb.76
	  successors: %bb.78(0x50000000), %bb.79(0x30000000); %bb.78(62.50%), %bb.79(37.50%)

11920B	  %36:gpr64temp = ADRP target-flags(aarch64-page) @timeron
11936B	  %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
11952B	  CBZW %37:gpr32, %bb.79
11968B	  B %bb.78

11984B	bb.78.if.then319:
	; predecessors: %bb.77
	  successors: %bb.79(0x80000000); %bb.79(100.00%)

12000B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
12032B	  $w0 = MOVi32imm 5
12048B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
12064B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
12080B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
12096B	  PCN_STACKMAP 22, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr
12112B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

12128B	bb.79.if.end320:
	; predecessors: %bb.77, %bb.78

12144B	  RET_ReallyLR

# End machine code for function diffusion.

Before post-MI-sched:
# Machine code for function diffusion: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=8, align=8, at location [SP-80]
  fi#5: size=8, align=8, at location [SP-88]
  fi#6: size=4, align=4, at location [SP-92]
  fi#7: size=4, align=4, at location [SP-96]
  fi#8: size=4, align=4, at location [SP-100]
  fi#9: size=4, align=4, at location [SP-104]
  fi#10: size=4, align=4, at location [SP-108]
  fi#11: size=4, align=4, at location [SP-112]
  fi#12: size=4, align=4, at location [SP-116]
  fi#13: size=8, align=8, at location [SP-128]
  fi#14: size=8, align=8, at location [SP-136]
  fi#15: size=4, align=4, at location [SP-140]
  fi#16: dead
  fi#17: dead
  fi#18: dead
  fi#19: dead
  fi#20: dead
  fi#21: dead
  fi#22: dead
  fi#23: dead
  fi#24: dead
  fi#25: dead
  fi#26: dead
  fi#27: dead
  fi#28: dead
  fi#29: dead
  fi#30: size=8, align=8, at location [SP-40]
  fi#31: size=8, align=8, at location [SP-8]
  fi#32: size=8, align=8, at location [SP-16]
  fi#33: size=8, align=8, at location [SP-24]
  fi#34: size=8, align=8, at location [SP-32]
Function Live Ins: $w0

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w0, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 144, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 14 :: (store 8 into %stack.34), (store 8 into %stack.33)
  frame-setup STPXi killed $fp, killed $lr, $sp, 16 :: (store 8 into %stack.32), (store 8 into %stack.31)
  $fp = frame-setup ADDXri $sp, 128, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  STURWi killed renamable $w0, $fp, -28 :: (store 4 into %ir.ifmortar.addr)
  CBZW killed renamable $w8, %bb.2

bb.1.if.then:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  $w0 = MOVZWi 5, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 0, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -28, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.0.ifmortar.addr, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)

bb.2.if.end:
; predecessors: %bb.0, %bb.1
  successors: %bb.3(0x50000000), %bb.4(0x30000000); %bb.3(62.50%), %bb.4(37.50%)

  renamable $w8 = LDURWi $fp, -28 :: (dereferenceable load 4 from %ir.ifmortar.addr)
  CBZW killed renamable $w8, %bb.4

bb.3.if.then2:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  BL @setuppc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 1, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  BL @setpcmo, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit-def $sp
  PCN_STACKMAP 2, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)

bb.4.if.end3:
; predecessors: %bb.2, %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w19 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  $x0 = ADRP target-flags(aarch64-page) @t
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  $d0 = FMOVD0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  PCN_STACKMAP 3, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w19 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $x0 = ADRP target-flags(aarch64-page) @umor
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  $d0 = FMOVD0
  $w1 = ORRWrs $wzr, $w19, 0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  PCN_STACKMAP 4, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  STURXi $xzr, $fp, -48 :: (store 8 into %ir.rho1)
  STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  renamable $x8 = ADRP target-flags(aarch64-page) @nelt
  $w16 = MOVZWi 1000, 0, implicit-def $x16
  $x17 = ADRP target-flags(aarch64-page) @dpcelm
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
  $w18 = MOVZWi 200, 0, implicit-def $x18
  $x0 = ADRP target-flags(aarch64-page) @trhs
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  $x1 = ADRP target-flags(aarch64-page) @pdiff
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  $x2 = ADRP target-flags(aarch64-page) @tmult
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0

bb.5.for.cond:
; predecessors: %bb.4, %bb.15
  successors: %bb.6(0x7c000000), %bb.16(0x04000000); %bb.6(96.88%), %bb.16(3.12%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $w4 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w3, killed renamable $w4, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.16, implicit $nzcv

bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  STRWui $wzr, $sp, 7 :: (store 4 into %ir.k)

bb.7.for.cond4:
; predecessors: %bb.6, %bb.14
  successors: %bb.8(0x7c000000), %bb.15(0x04000000); %bb.8(96.88%), %bb.15(3.12%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w3, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.15, implicit $nzcv

bb.8.for.body6:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  STRWui $wzr, $sp, 8 :: (store 4 into %ir.j)

bb.9.for.cond7:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w3, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.14, implicit $nzcv

bb.10.for.body9:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  STRWui $wzr, $sp, 9 :: (store 4 into %ir.i)

bb.11.for.cond10:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  renamable $w3 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w3, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.13, implicit $nzcv

bb.12.for.body12:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  renamable $x3 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x4 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x5, renamable $x7 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x6, renamable $x19 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x3 = MADDXrrr killed renamable $x3, renamable $x16, $xzr
  renamable $x5 = MADDXrrr killed renamable $x5, renamable $x18, $xzr
  renamable $x7 = ADDXrs killed renamable $x7, renamable $x7, 2
  $x20 = ADDXrs renamable $x17, renamable $x3, 0
  renamable $x7 = UBFMXri killed renamable $x7, 61, 60
  $lr = ADDXrs renamable $x0, renamable $x3, 0
  $x3 = ADDXrs renamable $x1, killed renamable $x3, 0
  $x20 = ADDXrs killed renamable $x20, renamable $x5, 0
  $lr = ADDXrs killed renamable $lr, renamable $x5, 0
  $x3 = ADDXrs killed renamable $x3, killed renamable $x5, 0
  $x5 = ADDXrs killed renamable $x20, renamable $x7, 0
  renamable $x20 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  $lr = ADDXrs killed renamable $lr, renamable $x7, 0
  $x3 = ADDXrs killed renamable $x3, killed renamable $x7, 0
  renamable $x7 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  renamable $x20 = UBFMXri killed renamable $x20, 61, 60
  renamable $d0 = LDRDroX killed renamable $x5, renamable $x20, 0, 0 :: (load 8 from %ir.arrayidx18)
  renamable $d1 = LDRDroX killed renamable $lr, renamable $x20, 0, 0 :: (load 8 from %ir.arrayidx26)
  renamable $x4 = MADDXrrr killed renamable $x4, renamable $x16, $xzr
  renamable $x5 = MADDXrrr killed renamable $x6, renamable $x18, $xzr
  renamable $x6 = ADDXrs killed renamable $x19, renamable $x19, 2
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  STRDroX killed renamable $d0, killed renamable $x3, killed renamable $x20, 0, 0 :: (store 8 into %ir.arrayidx34)
  $x3 = ADDXrs renamable $x0, renamable $x4, 0
  $x19 = ADDXrs renamable $x1, renamable $x4, 0
  $x4 = ADDXrs renamable $x2, killed renamable $x4, 0
  $x3 = ADDXrs killed renamable $x3, renamable $x5, 0
  $x19 = ADDXrs killed renamable $x19, renamable $x5, 0
  $x4 = ADDXrs killed renamable $x4, killed renamable $x5, 0
  renamable $x5 = UBFMXri renamable $x7, 61, 60
  renamable $x6 = UBFMXri killed renamable $x6, 61, 60
  $x3 = ADDXrs killed renamable $x3, renamable $x6, 0
  $x19 = ADDXrs killed renamable $x19, renamable $x6, 0
  renamable $d0 = LDRDroX killed renamable $x3, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx42)
  renamable $d1 = LDRDroX killed renamable $x19, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx50)
  $x3 = ADDXrs killed renamable $x4, killed renamable $x6, 0
  renamable $d2 = LDRDroX killed renamable $x3, killed renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx59)
  renamable $d3 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $w3 = nsw ADDWri renamable $w7, 1, 0, implicit killed $x7
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2
  renamable $d0 = FADDDrr killed renamable $d3, killed renamable $d0
  STURDi killed renamable $d0, $fp, -48 :: (store 8 into %ir.rho1)
  STRWui killed renamable $w3, $sp, 9 :: (store 4 into %ir.i)
  B %bb.11

bb.13.for.inc61:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  renamable $w3 = nsw ADDWri killed renamable $w3, 1, 0
  STRWui killed renamable $w3, $sp, 8 :: (store 4 into %ir.j)
  B %bb.9

bb.14.for.inc64:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  renamable $w3 = nsw ADDWri killed renamable $w3, 1, 0
  STRWui killed renamable $w3, $sp, 7 :: (store 4 into %ir.k)
  B %bb.7

bb.15.for.inc67:
; predecessors: %bb.7
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x0, $x1, $x2, $x8, $x16, $x17, $x18
  renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $w3 = nsw ADDWri killed renamable $w3, 1, 0
  STRWui killed renamable $w3, $sp, 12 :: (store 4 into %ir.ie)
  B %bb.5

bb.16.for.end69:
; predecessors: %bb.5
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  $x16 = ADRP target-flags(aarch64-page) @dpcmor
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  $x17 = ADRP target-flags(aarch64-page) @rmor
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  $x18 = ADRP target-flags(aarch64-page) @pmorx
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0

bb.17.for.cond70:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)
  liveins: $x8, $x16, $x17, $x18
  renamable $w0 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $wzr = SUBSWrs killed renamable $w0, killed renamable $w1, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.19, implicit $nzcv

bb.18.for.body72:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $x0 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  renamable $x1 = UBFMXri renamable $x0, 61, 60
  renamable $d0 = LDRDroX renamable $x16, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx74)
  renamable $d1 = LDRDroX renamable $x17, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx76)
  renamable $d2 = LDRDroX renamable $x17, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx81)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
  renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit killed $x0
  STRDroX renamable $d0, renamable $x18, killed renamable $x1, 0, 0 :: (store 8 into %ir.arrayidx79)
  renamable $d0 = FMULDrr killed renamable $d2, killed renamable $d0
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0
  STURDi killed renamable $d0, $fp, -48 :: (store 8 into %ir.rho1)
  STRWui killed renamable $w0, $sp, 11 :: (store 4 into %ir.im)
  B %bb.17

bb.19.for.end88:
; predecessors: %bb.17
  successors: %bb.20(0x80000000); %bb.20(100.00%)

  $w8 = MOVZWi 1, 0
  $w4 = MOVZWi 1000, 0, implicit-def $x4
  $w20 = MOVZWi 200, 0, implicit-def $x20
  $x19 = ADRP target-flags(aarch64-page) @pdiffp
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0

bb.20.for.cond89:
; predecessors: %bb.19, %bb.72
  successors: %bb.21(0x7c000000), %bb.73(0x04000000); %bb.21(96.88%), %bb.73(3.12%)
  liveins: $x4, $x19, $x20, $w8
  STRWui renamable $w8, $sp, 13 :: (store 4 into %ir.iter)
  $w8 = ORRWrs $wzr, killed renamable $w8, 0
  renamable $x16 = ADRP target-flags(aarch64-page) @nmxh
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 12, %bb.73, implicit $nzcv

bb.21.for.body91:
; predecessors: %bb.20
  successors: %bb.22(0x40000000), %bb.38(0x40000000); %bb.22(50.00%), %bb.38(50.00%)
  liveins: $x4, $x19, $x20
  renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv
  Bcc 11, %bb.38, implicit $nzcv

bb.22.if.then93:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x4, $x19, $x20
  STURXi $xzr, $fp, -40 :: (store 8 into %ir.rho_aux)
  STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  $x5 = ADRP target-flags(aarch64-page) @dpcelm
  renamable $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
  $x6 = ADRP target-flags(aarch64-page) @trhs
  renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  $x7 = ADRP target-flags(aarch64-page) @tmult
  renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0

bb.23.for.cond94:
; predecessors: %bb.22, %bb.33
  successors: %bb.24(0x7c000000), %bb.34(0x04000000); %bb.24(96.88%), %bb.34(3.12%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.34, implicit $nzcv

bb.24.for.body96:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  STRWui $wzr, $sp, 7 :: (store 4 into %ir.k)

bb.25.for.cond97:
; predecessors: %bb.24, %bb.32
  successors: %bb.26(0x7c000000), %bb.33(0x04000000); %bb.26(96.88%), %bb.33(3.12%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit $nzcv

bb.26.for.body99:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  STRWui $wzr, $sp, 8 :: (store 4 into %ir.j)

bb.27.for.cond100:
; predecessors: %bb.26, %bb.31
  successors: %bb.28(0x7c000000), %bb.32(0x04000000); %bb.28(96.88%), %bb.32(3.12%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.32, implicit $nzcv

bb.28.for.body102:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  STRWui $wzr, $sp, 9 :: (store 4 into %ir.i)

bb.29.for.cond103:
; predecessors: %bb.28, %bb.30
  successors: %bb.30(0x7c000000), %bb.31(0x04000000); %bb.30(96.88%), %bb.31(3.12%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.31, implicit $nzcv

bb.30.for.body105:
; predecessors: %bb.29
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x17, renamable $x0 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x18, renamable $x1 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x4, $xzr
  renamable $x17 = MADDXrrr killed renamable $x17, renamable $x20, $xzr
  renamable $x0 = ADDXrs killed renamable $x0, renamable $x0, 2
  $x2 = ADDXrs renamable $x5, renamable $x8, 0
  renamable $x0 = UBFMXri killed renamable $x0, 61, 60
  $x3 = ADDXrs renamable $x6, renamable $x8, 0
  $x8 = ADDXrs renamable $x19, killed renamable $x8, 0
  $x2 = ADDXrs killed renamable $x2, renamable $x17, 0
  $x3 = ADDXrs killed renamable $x3, renamable $x17, 0
  $x8 = ADDXrs killed renamable $x8, killed renamable $x17, 0
  $x17 = ADDXrs killed renamable $x2, renamable $x0, 0
  renamable $x2 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  $x3 = ADDXrs killed renamable $x3, renamable $x0, 0
  $x8 = ADDXrs killed renamable $x8, killed renamable $x0, 0
  renamable $x0 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  renamable $x2 = UBFMXri killed renamable $x2, 61, 60
  renamable $d0 = LDRDroX killed renamable $x17, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx113)
  renamable $d1 = LDRDroX killed renamable $x3, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx121)
  renamable $x16 = MADDXrrr killed renamable $x16, renamable $x4, $xzr
  renamable $x17 = MADDXrrr killed renamable $x18, renamable $x20, $xzr
  renamable $x18 = ADDXrs killed renamable $x1, renamable $x1, 2
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  STRDroX killed renamable $d0, killed renamable $x8, killed renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx130)
  $x8 = ADDXrs renamable $x6, renamable $x16, 0
  $x1 = ADDXrs renamable $x19, renamable $x16, 0
  $x16 = ADDXrs renamable $x7, killed renamable $x16, 0
  $x8 = ADDXrs killed renamable $x8, renamable $x17, 0
  $x1 = ADDXrs killed renamable $x1, renamable $x17, 0
  $x16 = ADDXrs killed renamable $x16, killed renamable $x17, 0
  renamable $x17 = UBFMXri renamable $x0, 61, 60
  renamable $x18 = UBFMXri killed renamable $x18, 61, 60
  $x8 = ADDXrs killed renamable $x8, renamable $x18, 0
  $x1 = ADDXrs killed renamable $x1, renamable $x18, 0
  renamable $d0 = LDRDroX killed renamable $x8, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx138)
  renamable $d1 = LDRDroX killed renamable $x1, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx146)
  $x8 = ADDXrs killed renamable $x16, killed renamable $x18, 0
  renamable $d2 = LDRDroX killed renamable $x8, killed renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx155)
  renamable $d3 = LDURDi $fp, -40 :: (dereferenceable load 8 from %ir.rho_aux)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $w8 = nsw ADDWri renamable $w0, 1, 0, implicit killed $x0
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2
  renamable $d0 = FADDDrr killed renamable $d3, killed renamable $d0
  STURDi killed renamable $d0, $fp, -40 :: (store 8 into %ir.rho_aux)
  STRWui killed renamable $w8, $sp, 9 :: (store 4 into %ir.i)
  B %bb.29

bb.31.for.inc161:
; predecessors: %bb.29
  successors: %bb.27(0x80000000); %bb.27(100.00%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 8 :: (store 4 into %ir.j)
  B %bb.27

bb.32.for.inc164:
; predecessors: %bb.27
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 7 :: (store 4 into %ir.k)
  B %bb.25

bb.33.for.inc167:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x4, $x5, $x6, $x7, $x19, $x20
  renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  B %bb.23

bb.34.for.end169:
; predecessors: %bb.23
  successors: %bb.35(0x80000000); %bb.35(100.00%)
  liveins: $x19, $x20
  STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
  $x17 = ADRP target-flags(aarch64-page) @dpcmor
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  $x18 = ADRP target-flags(aarch64-page) @rmor
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0

bb.35.for.cond170:
; predecessors: %bb.34, %bb.36
  successors: %bb.36(0x7c000000), %bb.37(0x04000000); %bb.36(96.88%), %bb.37(3.12%)
  liveins: $x17, $x18, $x19, $x20
  renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  renamable $x16 = ADRP target-flags(aarch64-page) @nmor
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.37, implicit $nzcv

bb.36.for.body172:
; predecessors: %bb.35
  successors: %bb.35(0x80000000); %bb.35(100.00%)
  liveins: $x17, $x18, $x19, $x20
  renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  renamable $x16 = UBFMXri renamable $x8, 61, 60
  renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx174)
  renamable $d1 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx176)
  renamable $d2 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx181)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDURDi $fp, -40 :: (dereferenceable load 8 from %ir.rho_aux)
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8
  $x0 = ADRP target-flags(aarch64-page) @ppmor
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  STRDroX renamable $d0, killed renamable $x0, killed renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx179)
  renamable $d0 = FMULDrr killed renamable $d2, killed renamable $d0
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0
  STURDi killed renamable $d0, $fp, -40 :: (store 8 into %ir.rho_aux)
  STRWui killed renamable $w8, $sp, 11 :: (store 4 into %ir.im)
  B %bb.35

bb.37.for.end188:
; predecessors: %bb.35
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $x19, $x20
  renamable $d0, renamable $d1 = LDPDi $fp, -6 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  STPDi renamable $d0, renamable $d1, $fp, -7 :: (store 8 into %ir.rho2), (store 8 into %ir.rho1)
  renamable $d0 = FDIVDrr killed renamable $d1, killed renamable $d0
  STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.beta)
  $x0 = ADRP target-flags(aarch64-page) @pdiff
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  $x1 = ADRP target-flags(aarch64-page) @pdiffp
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  PCN_STACKMAP 5, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 8, $fp, -112, 1, 4, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 4 from %stack.14)
  renamable $d0 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.beta)
  STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  $x0 = ADRP target-flags(aarch64-page) @pmorx
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  $x1 = ADRP target-flags(aarch64-page) @ppmor
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  PCN_STACKMAP 6, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 8, $fp, -112, 1, 4, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 4 from %stack.14)

bb.38.if.end189:
; predecessors: %bb.21, %bb.37
  successors: %bb.39(0x50000000), %bb.40(0x30000000); %bb.39(62.50%), %bb.40(37.50%)
  liveins: $x19, $x20
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.40

bb.39.if.then191:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 6, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 7, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)

bb.40.if.end192:
; predecessors: %bb.38, %bb.39
  successors: %bb.41(0x50000000), %bb.42(0x30000000); %bb.41(62.50%), %bb.42(37.50%)
  liveins: $x19, $x20
  $x0 = ADRP target-flags(aarch64-page) @pmorx
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  $x1 = ADRP target-flags(aarch64-page) @pdiff
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  PCN_STACKMAP 8, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.42

bb.41.if.then194:
; predecessors: %bb.40
  successors: %bb.42(0x80000000); %bb.42(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 6, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 9, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)

bb.42.if.end195:
; predecessors: %bb.40, %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $x19, $x20
  STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  $w18 = MOVZWi 1000, 0, implicit-def $x18
  $x1 = ADRP target-flags(aarch64-page) @pdiff
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0

bb.43.for.cond196:
; predecessors: %bb.42, %bb.44
  successors: %bb.44(0x7c000000), %bb.45(0x04000000); %bb.44(96.88%), %bb.45(3.12%)
  liveins: $x1, $x18, $x19, $x20
  renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.45, implicit $nzcv

bb.44.for.body198:
; predecessors: %bb.43
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $x1, $x18, $x19, $x20
  renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  $x16 = ADRP target-flags(aarch64-page) @size_e
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  renamable $w2 = LDRWroX killed renamable $x16, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx205)
  STRWui renamable $w2, $sp, 1 :: (store 4 into %stack.15)
  renamable $x8 = MADDXrrr killed renamable $x8, killed renamable $x18, $xzr
  $x0 = ADDXrs renamable $x19, renamable $x8, 0
  $x1 = ADDXrs killed renamable $x1, killed renamable $x8, 0
  STPXi renamable $x1, renamable $x0, $sp, 1 :: (store 8 into %stack.13), (store 8 into %stack.14)
  BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  $x1 = ADRP target-flags(aarch64-page) @pdiff
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  $w18 = MOVZWi 1000, 0, implicit-def $x18
  PCN_STACKMAP 10, 0, 1, 8, $fp, -112, 1, 8, $fp, -120, 1, 8, $fp, -112, 1, 8, $fp, -120, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 4, $fp, -124, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 8 from %stack.14), (load 4 from %stack.15)
  renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  B %bb.43

bb.45.for.end208:
; predecessors: %bb.43
  successors: %bb.46(0x50000000), %bb.47(0x30000000); %bb.46(62.50%), %bb.47(37.50%)
  liveins: $x19, $x20
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.47

bb.46.if.then210:
; predecessors: %bb.45
  successors: %bb.47(0x80000000); %bb.47(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 7, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 11, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)

bb.47.if.end211:
; predecessors: %bb.45, %bb.46
  successors: %bb.48(0x50000000), %bb.49(0x30000000); %bb.48(62.50%), %bb.49(37.50%)
  liveins: $x19, $x20
  $x0 = ADRP target-flags(aarch64-page) @ppmor
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  $x1 = ADRP target-flags(aarch64-page) @pdiffp
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  PCN_STACKMAP 12, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.49

bb.48.if.then213:
; predecessors: %bb.47
  successors: %bb.49(0x80000000); %bb.49(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 7, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 13, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux)

bb.49.if.end214:
; predecessors: %bb.47, %bb.48
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x19, $x20
  STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  $w2 = MOVZWi 1000, 0, implicit-def $x2
  $x3 = ADRP target-flags(aarch64-page) @tmult
  renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  $x4 = ADRP target-flags(aarch64-page) @pdiff
  renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  $w18 = MOVZWi 24, 0, implicit-def $x18
  $x0 = ADRP target-flags(aarch64-page) @cbc
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0

bb.50.for.cond215:
; predecessors: %bb.49, %bb.56
  successors: %bb.51(0x7c000000), %bb.57(0x04000000); %bb.51(96.88%), %bb.57(3.12%)
  liveins: $x0, $x2, $x3, $x4, $x18, $x19, $x20
  renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.57, implicit $nzcv

bb.51.for.body217:
; predecessors: %bb.50
  successors: %bb.52(0x80000000); %bb.52(100.00%)
  liveins: $x0, $x2, $x3, $x4, $x18, $x19, $x20
  STRWui $wzr, $sp, 10 :: (store 4 into %ir.iside)

bb.52.for.cond218:
; predecessors: %bb.51, %bb.55
  successors: %bb.53(0x7c000000), %bb.56(0x04000000); %bb.53(96.88%), %bb.56(3.12%)
  liveins: $x0, $x2, $x3, $x4, $x18, $x19, $x20
  renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  dead $wzr = SUBSWri killed renamable $w8, 5, 0, implicit-def $nzcv
  Bcc 12, %bb.56, implicit $nzcv

bb.53.for.body220:
; predecessors: %bb.52
  successors: %bb.54(0x30000000), %bb.55(0x50000000); %bb.54(37.50%), %bb.55(62.50%)
  liveins: $x0, $x2, $x3, $x4, $x18, $x19, $x20
  renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16 = LDRSWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x18, renamable $x0
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1 :: (load 4 from %ir.arrayidx224)
  CBNZW killed renamable $w8, %bb.55

bb.54.if.then226:
; predecessors: %bb.53
  successors: %bb.55(0x80000000); %bb.55(100.00%)
  liveins: $x2, $x19, $x20
  renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $w1 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  STRWui renamable $w1, $sp, 2 :: (store 4 into %stack.14)
  renamable $x0 = MADDXrrr killed renamable $x8, killed renamable $x2, renamable $x19
  STRXui renamable $x0, $sp, 2 :: (store 8 into %stack.13)
  $d0 = FMOVD0
  BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  $x0 = ADRP target-flags(aarch64-page) @cbc
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  $w18 = MOVZWi 24, 0, implicit-def $x18
  $x4 = ADRP target-flags(aarch64-page) @pdiff
  renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  $x3 = ADRP target-flags(aarch64-page) @tmult
  renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  $w2 = MOVZWi 1000, 0, implicit-def $x2
  PCN_STACKMAP 14, 0, 1, 8, $fp, -112, 1, 8, $fp, -112, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 4, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 4 from %stack.14)

bb.55.for.inc231:
; predecessors: %bb.53, %bb.54
  successors: %bb.52(0x80000000); %bb.52(100.00%)
  liveins: $x0, $x2, $x3, $x4, $x18, $x19, $x20
  renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 10 :: (store 4 into %ir.iside)
  B %bb.52

bb.56.for.inc234:
; predecessors: %bb.52
  successors: %bb.50(0x80000000); %bb.50(100.00%)
  liveins: $x0, $x2, $x3, $x4, $x18, $x19, $x20
  renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  B %bb.50

bb.57.for.end236:
; predecessors: %bb.50
  successors: %bb.58(0x80000000); %bb.58(100.00%)
  liveins: $x2, $x3, $x4, $x19, $x20
  STRXui $xzr, $sp, 7 :: (store 8 into %ir.cona)
  STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)

bb.58.for.cond237:
; predecessors: %bb.57, %bb.68
  successors: %bb.59(0x7c000000), %bb.69(0x04000000); %bb.59(96.88%), %bb.69(3.12%)
  liveins: $x2, $x3, $x4, $x19, $x20
  renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.69, implicit $nzcv

bb.59.for.body239:
; predecessors: %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)
  liveins: $x2, $x3, $x4, $x19, $x20
  STRWui $wzr, $sp, 7 :: (store 4 into %ir.k)

bb.60.for.cond240:
; predecessors: %bb.59, %bb.67
  successors: %bb.61(0x7c000000), %bb.68(0x04000000); %bb.61(96.88%), %bb.68(3.12%)
  liveins: $x2, $x3, $x4, $x19, $x20
  renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.68, implicit $nzcv

bb.61.for.body242:
; predecessors: %bb.60
  successors: %bb.62(0x80000000); %bb.62(100.00%)
  liveins: $x2, $x3, $x4, $x19, $x20
  STRWui $wzr, $sp, 8 :: (store 4 into %ir.j)

bb.62.for.cond243:
; predecessors: %bb.61, %bb.66
  successors: %bb.63(0x7c000000), %bb.67(0x04000000); %bb.63(96.88%), %bb.67(3.12%)
  liveins: $x2, $x3, $x4, $x19, $x20
  renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.67, implicit $nzcv

bb.63.for.body245:
; predecessors: %bb.62
  successors: %bb.64(0x80000000); %bb.64(100.00%)
  liveins: $x2, $x3, $x4, $x19, $x20
  STRWui $wzr, $sp, 9 :: (store 4 into %ir.i)

bb.64.for.cond246:
; predecessors: %bb.63, %bb.65
  successors: %bb.65(0x7c000000), %bb.66(0x04000000); %bb.65(96.88%), %bb.66(3.12%)
  liveins: $x2, $x3, $x4, $x19, $x20
  renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w8, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.66, implicit $nzcv

bb.65.for.body248:
; predecessors: %bb.64
  successors: %bb.64(0x80000000); %bb.64(100.00%)
  liveins: $x2, $x3, $x4, $x19, $x20
  renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $x16, renamable $x17 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x18 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  renamable $x8 = MADDXrrr killed renamable $x8, renamable $x2, $xzr
  renamable $x16 = MADDXrrr killed renamable $x16, renamable $x20, $xzr
  renamable $x17 = ADDXrs killed renamable $x17, renamable $x17, 2
  $x0 = ADDXrs renamable $x4, renamable $x8, 0
  $x1 = ADDXrs renamable $x19, renamable $x8, 0
  $x8 = ADDXrs renamable $x3, killed renamable $x8, 0
  $x0 = ADDXrs killed renamable $x0, renamable $x16, 0
  $x1 = ADDXrs killed renamable $x1, renamable $x16, 0
  $x8 = ADDXrs killed renamable $x8, killed renamable $x16, 0
  renamable $x16 = UBFMXri renamable $x18, 61, 60
  renamable $x17 = UBFMXri killed renamable $x17, 61, 60
  $x0 = ADDXrs killed renamable $x0, renamable $x17, 0
  $x1 = ADDXrs killed renamable $x1, renamable $x17, 0
  renamable $d0 = LDRDroX killed renamable $x0, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx256)
  renamable $d1 = LDRDroX killed renamable $x1, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx264)
  $x8 = ADDXrs killed renamable $x8, killed renamable $x17, 0
  renamable $d2 = LDRDroX killed renamable $x8, killed renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx273)
  renamable $d3 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $w8 = nsw ADDWri renamable $w18, 1, 0, implicit killed $x18
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d2
  renamable $d0 = FADDDrr killed renamable $d3, killed renamable $d0
  STRDui killed renamable $d0, $sp, 7 :: (store 8 into %ir.cona)
  STRWui killed renamable $w8, $sp, 9 :: (store 4 into %ir.i)
  B %bb.64

bb.66.for.inc279:
; predecessors: %bb.64
  successors: %bb.62(0x80000000); %bb.62(100.00%)
  liveins: $x2, $x3, $x4, $x19, $x20
  renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 8 :: (store 4 into %ir.j)
  B %bb.62

bb.67.for.inc282:
; predecessors: %bb.62
  successors: %bb.60(0x80000000); %bb.60(100.00%)
  liveins: $x2, $x3, $x4, $x19, $x20
  renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 7 :: (store 4 into %ir.k)
  B %bb.60

bb.68.for.inc285:
; predecessors: %bb.60
  successors: %bb.58(0x80000000); %bb.58(100.00%)
  liveins: $x2, $x3, $x4, $x19, $x20
  renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  STRWui killed renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  B %bb.58

bb.69.for.end287:
; predecessors: %bb.58
  successors: %bb.70(0x80000000); %bb.70(100.00%)
  liveins: $x19, $x20
  STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
  $x18 = ADRP target-flags(aarch64-page) @pmorx
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  $x0 = ADRP target-flags(aarch64-page) @tmmor
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0

bb.70.for.cond288:
; predecessors: %bb.69, %bb.71
  successors: %bb.71(0x7c000000), %bb.72(0x04000000); %bb.71(96.88%), %bb.72(3.12%)
  liveins: $x0, $x18, $x19, $x20
  renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  renamable $x16 = ADRP target-flags(aarch64-page) @nmor
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Bcc 10, %bb.72, implicit $nzcv

bb.71.for.body290:
; predecessors: %bb.70
  successors: %bb.70(0x80000000); %bb.70(100.00%)
  liveins: $x0, $x18, $x19, $x20
  renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  renamable $x16 = UBFMXri renamable $x8, 61, 60
  $x17 = ADRP target-flags(aarch64-page) @ppmor
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx292)
  renamable $d1 = LDRDroX renamable $x0, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx294)
  renamable $d2 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx299)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d1 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8
  STRDroX renamable $d0, killed renamable $x17, killed renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx297)
  renamable $d0 = FMULDrr killed renamable $d2, killed renamable $d0
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0
  STRDui killed renamable $d0, $sp, 7 :: (store 8 into %ir.cona)
  STRWui killed renamable $w8, $sp, 11 :: (store 4 into %ir.im)
  B %bb.70

bb.72.for.end306:
; predecessors: %bb.70
  successors: %bb.20(0x80000000); %bb.20(100.00%)
  liveins: $x19, $x20
  renamable $d0 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
  renamable $d1 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1
  STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)
  $x0 = ADRP target-flags(aarch64-page) @t
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  $x1 = ADRP target-flags(aarch64-page) @pdiff
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  PCN_STACKMAP 15, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 8, $fp, -112, 1, 4, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 4 from %stack.14)
  renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  $x0 = ADRP target-flags(aarch64-page) @umor
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  $x1 = ADRP target-flags(aarch64-page) @pmorx
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  PCN_STACKMAP 16, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 8, $fp, -112, 1, 4, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 4 from %stack.14)
  renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  renamable $d0 = FNEGDr killed renamable $d0
  STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  $x0 = ADRP target-flags(aarch64-page) @trhs
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  $x1 = ADRP target-flags(aarch64-page) @pdiffp
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  PCN_STACKMAP 17, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 8, $fp, -112, 1, 4, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 4 from %stack.14)
  renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  renamable $d0 = FNEGDr killed renamable $d0
  STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  $x0 = ADRP target-flags(aarch64-page) @rmor
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  $x1 = ADRP target-flags(aarch64-page) @ppmor
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  $w4 = MOVZWi 1000, 0, implicit-def $x4
  PCN_STACKMAP 18, 0, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 8, $fp, -112, 1, 4, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 4 from %stack.14)
  renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0
  B %bb.20

bb.73.for.end311:
; predecessors: %bb.20
  successors: %bb.74(0x50000000), %bb.75(0x30000000); %bb.74(62.50%), %bb.75(37.50%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.75

bb.74.if.then313:
; predecessors: %bb.73
  successors: %bb.75(0x80000000); %bb.75(100.00%)

  $w0 = MOVZWi 6, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 19, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr

bb.75.if.end314:
; predecessors: %bb.73, %bb.74
  successors: %bb.76(0x50000000), %bb.77(0x30000000); %bb.76(62.50%), %bb.77(37.50%)

  $x0 = ADRP target-flags(aarch64-page) @umor
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  $x1 = ADRP target-flags(aarch64-page) @t
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  PCN_STACKMAP 20, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.77

bb.76.if.then316:
; predecessors: %bb.75
  successors: %bb.77(0x80000000); %bb.77(100.00%)

  $w0 = MOVZWi 6, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 21, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr

bb.77.if.end317:
; predecessors: %bb.75, %bb.76
  successors: %bb.78(0x50000000), %bb.79(0x30000000); %bb.78(62.50%), %bb.79(37.50%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  CBZW killed renamable $w8, %bb.79

bb.78.if.then319:
; predecessors: %bb.77
  successors: %bb.79(0x80000000); %bb.79(100.00%)

  $w0 = MOVZWi 5, 0
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp
  PCN_STACKMAP 22, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr

bb.79.if.end320:
; predecessors: %bb.77, %bb.78

  $fp, $lr = frame-destroy LDPXi $sp, 16 :: (load 8 from %stack.32), (load 8 from %stack.31)
  $x20, $x19 = frame-destroy LDPXi $sp, 14 :: (load 8 from %stack.34), (load 8 from %stack.33)
  $sp = frame-destroy ADDXri $sp, 144, 0
  RET undef $lr

# End machine code for function diffusion.

********** MI Scheduling **********
diffusion:%bb.0 entry
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.2
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(2):   STURWi renamable $w0, $fp, -28 :: (store 4 into %ir.ifmortar.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   CBZW killed renamable $w8, %bb.2
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w0, $fp, -28 :: (store 4 into %ir.ifmortar.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
SU(2):   STURWi renamable $w0, $fp, -28 :: (store 4 into %ir.ifmortar.addr)

********** MI Scheduling **********
diffusion:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 14 :: (store 8 into %stack.34), (store 8 into %stack.33)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 14 :: (store 8 into %stack.34), (store 8 into %stack.33)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 16 :: (store 8 into %stack.32), (store 8 into %stack.31)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 128, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 14 :: (store 8 into %stack.34), (store 8 into %stack.33)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 16 :: (store 8 into %stack.32), (store 8 into %stack.31)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 128, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 14 :: (store 8 into %stack.34), (store 8 into %stack.33)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 16 :: (store 8 into %stack.32), (store 8 into %stack.31)
SU(2):   $fp = frame-setup ADDXri $sp, 128, 0

Fixup kills for %bb.0
Fixup kills for %bb.1
Fixup kills for %bb.2
Fixup kills for %bb.3
********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: STURXi $xzr, $fp, -48 :: (store 8 into %ir.rho1)
    To: End RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   STURXi $xzr, $fp, -48 :: (store 8 into %ir.rho1)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w16 = MOVZWi 1000, 0, implicit-def $x16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x17 = ADRP target-flags(aarch64-page) @dpcelm
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $w18 = MOVZWi 200, 0, implicit-def $x18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x0 = ADRP target-flags(aarch64-page) @trhs
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x1 = ADRP target-flags(aarch64-page) @pdiff
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
SU(10):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x2 = ADRP target-flags(aarch64-page) @tmult
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x2
SU(12):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 7 9 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x17 = ADRP target-flags(aarch64-page) @dpcelm
  Ready @0c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 7 9 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @trhs
  Ready @1c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 5 9 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x1 = ADRP target-flags(aarch64-page) @pdiff
  Ready @2c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 5 8 10 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
  Cand SU(11) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x2 = ADRP target-flags(aarch64-page) @tmult
  Ready @3c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 10 6 5 8 12 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @nelt
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 3 10 6 5 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $w16 = MOVZWi 1000, 0, implicit-def $x16
  Ready @5c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 8 10 6 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
  Ready @6c
  TopQ.A TopLatency SU(5) 1c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 8 10 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $w18 = MOVZWi 200, 0, implicit-def $x18
  Ready @7c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 8 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  Ready @8c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(12) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  Ready @10c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 11c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURXi $xzr, $fp, -48 :: (store 8 into %ir.rho1)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(4):   $x17 = ADRP target-flags(aarch64-page) @dpcelm
SU(7):   $x0 = ADRP target-flags(aarch64-page) @trhs
SU(9):   $x1 = ADRP target-flags(aarch64-page) @pdiff
SU(11):   $x2 = ADRP target-flags(aarch64-page) @tmult
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @nelt
SU(3):   $w16 = MOVZWi 1000, 0, implicit-def $x16
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
SU(6):   $w18 = MOVZWi 200, 0, implicit-def $x18
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
SU(10):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
SU(12):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
SU(0):   STURXi $xzr, $fp, -48 :: (store 8 into %ir.rho1)
SU(1):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: renamable $x8 = ADRP target-flags(aarch64-page) @nmor
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=4 Reg=$w19
SU(2):   $x0 = ADRP target-flags(aarch64-page) @umor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @umor
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $d0 = FMOVD0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $w1 = ORRWrs $wzr, $w19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @umor
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
SU(4):   $d0 = FMOVD0
SU(5):   $w1 = ORRWrs $wzr, $w19, 0

********** MI Scheduling **********
diffusion:%bb.4 if.end3
  From: renamable $x8 = ADRP target-flags(aarch64-page) @ntot
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=4 Reg=$w19
SU(2):   $x0 = ADRP target-flags(aarch64-page) @t
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w1 = ORRWrs $wzr, $w19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @t
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $d0 = FMOVD0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $w1 = ORRWrs $wzr, $w19, 0
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(1):   renamable $w19 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(2):   $x0 = ADRP target-flags(aarch64-page) @t
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
SU(4):   $d0 = FMOVD0
SU(5):   $w1 = ORRWrs $wzr, $w19, 0

Fixup kills for %bb.4
********** MI Scheduling **********
diffusion:%bb.5 for.cond
  From: renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.16, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w3
SU(1):   renamable $w4 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w4
SU(2):   $wzr = SUBSWrs renamable $w3, renamable $w4, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w4
    SU(0): Data Latency=4 Reg=$w3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.16, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w4 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w3, renamable $w4, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w4 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(2):   $wzr = SUBSWrs renamable $w3, renamable $w4, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.5
Fixup kills for %bb.6
********** MI Scheduling **********
diffusion:%bb.7 for.cond4
  From: renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.15, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w3
SU(1):   dead $wzr = SUBSWri renamable $w3, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.15, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w3, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w3, 4, 0, implicit-def $nzcv

Fixup kills for %bb.7
Fixup kills for %bb.8
********** MI Scheduling **********
diffusion:%bb.9 for.cond7
  From: renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.14, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w3
SU(1):   dead $wzr = SUBSWri renamable $w3, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.14, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w3, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w3, 4, 0, implicit-def $nzcv

Fixup kills for %bb.9
Fixup kills for %bb.10
********** MI Scheduling **********
diffusion:%bb.11 for.cond10
  From: renamable $w3 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.13, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w3 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w3
SU(1):   dead $wzr = SUBSWri renamable $w3, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.13, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w3 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w3, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w3 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w3, 4, 0, implicit-def $nzcv

Fixup kills for %bb.11
********** MI Scheduling **********
diffusion:%bb.12 for.body12
  From: renamable $x3 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.11
 RegionInstrs: 48
ScheduleDAGMI::schedule starting
SU(0):   renamable $x3 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x3
SU(1):   renamable $x4 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=4 Reg=$x4
SU(2):   renamable $x5, renamable $x7 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x5
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x7
SU(3):   renamable $x6, renamable $x19 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(24): Out  Latency=1
    SU(23): Data Latency=4 Reg=$x6
    SU(28): Out  Latency=1
    SU(24): Data Latency=4 Reg=$x19
SU(4):   renamable $x3 = MADDXrrr renamable $x3, renamable $x16, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 23
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x3
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x3
    SU(9): Data Latency=1 Reg=$x3
    SU(7): Data Latency=1 Reg=$x3
SU(5):   renamable $x5 = MADDXrrr renamable $x5, renamable $x18, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x5
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x5
    SU(12): Data Latency=1 Reg=$x5
    SU(11): Data Latency=1 Reg=$x5
SU(6):   renamable $x7 = ADDXrs renamable $x7, renamable $x7, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x7
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x7
SU(7):   $x20 = ADDXrs renamable $x17, renamable $x3, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 22
  Predecessors:
    SU(4): Data Latency=1 Reg=$x3
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x20
    SU(10): Anti Latency=0
SU(8):   renamable $x7 = UBFMXri renamable $x7, 61, 60
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x7
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x7
    SU(16): Data Latency=1 Reg=$x7
    SU(14): Data Latency=1 Reg=$x7
SU(9):   $lr = ADDXrs renamable $x0, renamable $x3, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(4): Data Latency=1 Reg=$x3
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$lr
    SU(10): Anti Latency=0
SU(10):   $x3 = ADDXrs renamable $x1, renamable $x3, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Anti Latency=0
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x3
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x3
SU(11):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 21
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x20
    SU(5): Data Latency=1 Reg=$x5
  Successors:
    SU(15): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x20
    SU(14): Anti Latency=0
SU(12):   $lr = ADDXrs renamable $lr, renamable $x5, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$lr
    SU(5): Data Latency=1 Reg=$x5
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$lr
    SU(14): Anti Latency=0
SU(13):   $x3 = ADDXrs renamable $x3, renamable $x5, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x3
    SU(5): Data Latency=1 Reg=$x5
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x3
    SU(14): Anti Latency=0
SU(14):   $x5 = ADDXrs renamable $x20, renamable $x7, 0
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 20
  Predecessors:
    SU(13): Anti Latency=0
    SU(12): Anti Latency=0
    SU(11): Data Latency=1 Reg=$x20
    SU(11): Anti Latency=0
    SU(8): Data Latency=1 Reg=$x7
    SU(5): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x5
    SU(15): Anti Latency=0
    SU(18): Anti Latency=0
SU(15):   renamable $x20 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 20
  Predecessors:
    SU(14): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=4 Reg=$x20
    SU(47): Ord  Latency=0 Memory
SU(16):   $lr = ADDXrs renamable $lr, renamable $x7, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$lr
    SU(8): Data Latency=1 Reg=$x7
  Successors:
    SU(21): Data Latency=1 Reg=$lr
    SU(18): Anti Latency=0
SU(17):   $x3 = ADDXrs renamable $x3, renamable $x7, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x3
    SU(8): Data Latency=1 Reg=$x7
  Successors:
    SU(27): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x3
    SU(18): Anti Latency=0
SU(18):   renamable $x7 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(17): Anti Latency=0
    SU(16): Anti Latency=0
    SU(14): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(43): Data Latency=4 Reg=$w7
    SU(43): Data Latency=0 Reg=$x7
    SU(33): Data Latency=4 Reg=$x7
    SU(47): Ord  Latency=0 Memory
SU(19):   renamable $x20 = UBFMXri renamable $x20, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 16
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$x20
  Successors:
    SU(26): Data Latency=1 Reg=$x20
    SU(21): Data Latency=1 Reg=$x20
    SU(20): Data Latency=1 Reg=$x20
SU(20):   renamable $d0 = LDRDroX renamable $x5, renamable $x20, 0, 0 :: (load 8 from %ir.arrayidx18)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(19): Data Latency=1 Reg=$x20
    SU(14): Data Latency=1 Reg=$x5
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d0
    SU(23): Anti Latency=0
SU(21):   renamable $d1 = LDRDroX renamable $lr, renamable $x20, 0, 0 :: (load 8 from %ir.arrayidx26)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(19): Data Latency=1 Reg=$x20
    SU(16): Data Latency=1 Reg=$lr
  Successors:
    SU(38): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d1
SU(22):   renamable $x4 = MADDXrrr renamable $x4, renamable $x16, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x4
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x4
    SU(28): Data Latency=1 Reg=$x4
    SU(27): Data Latency=1 Reg=$x4
SU(23):   renamable $x5 = MADDXrrr renamable $x6, renamable $x18, $xzr
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(20): Anti Latency=0
    SU(14): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x6
  Successors:
    SU(33): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x5
    SU(31): Data Latency=1 Reg=$x5
    SU(30): Data Latency=1 Reg=$x5
    SU(24): Anti Latency=0
SU(24):   renamable $x6 = ADDXrs renamable $x19, renamable $x19, 2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(23): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x19
  Successors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x6
    SU(28): Anti Latency=0
SU(25):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 11
  Predecessors:
    SU(21): Data Latency=4 Reg=$d1
    SU(20): Out  Latency=1
    SU(20): Data Latency=4 Reg=$d0
  Successors:
    SU(37): Out  Latency=1
    SU(26): Data Latency=1 Reg=$d0
    SU(38): Anti Latency=0
SU(26):   STRDroX renamable $d0, renamable $x3, renamable $x20, 0, 0 :: (store 8 into %ir.arrayidx34)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(25): Data Latency=1 Reg=$d0
    SU(19): Data Latency=1 Reg=$x20
    SU(17): Data Latency=1 Reg=$x3
  Successors:
    SU(37): Anti Latency=0
    SU(27): Anti Latency=0
    SU(38): Ord  Latency=1 Memory
SU(27):   $x3 = ADDXrs renamable $x0, renamable $x4, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(26): Anti Latency=0
    SU(22): Data Latency=1 Reg=$x4
    SU(17): Out  Latency=1
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x3
    SU(29): Anti Latency=0
SU(28):   $x19 = ADDXrs renamable $x1, renamable $x4, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(24): Anti Latency=0
    SU(22): Data Latency=1 Reg=$x4
    SU(3): Out  Latency=1
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x19
    SU(29): Anti Latency=0
SU(29):   $x4 = ADDXrs renamable $x2, renamable $x4, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 9
  Predecessors:
    SU(28): Anti Latency=0
    SU(27): Anti Latency=0
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x4
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x4
SU(30):   $x3 = ADDXrs renamable $x3, renamable $x5, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x3
    SU(23): Data Latency=1 Reg=$x5
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x3
    SU(33): Anti Latency=0
SU(31):   $x19 = ADDXrs renamable $x19, renamable $x5, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x19
    SU(23): Data Latency=1 Reg=$x5
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x19
    SU(33): Anti Latency=0
SU(32):   $x4 = ADDXrs renamable $x4, renamable $x5, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 8
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x4
    SU(23): Data Latency=1 Reg=$x5
  Successors:
    SU(39): Data Latency=1 Reg=$x4
    SU(33): Anti Latency=0
SU(33):   renamable $x5 = UBFMXri renamable $x7, 61, 60
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 8
  Predecessors:
    SU(32): Anti Latency=0
    SU(31): Anti Latency=0
    SU(30): Anti Latency=0
    SU(23): Out  Latency=1
    SU(18): Data Latency=4 Reg=$x7
  Successors:
    SU(40): Data Latency=1 Reg=$x5
    SU(38): Data Latency=1 Reg=$x5
    SU(37): Data Latency=1 Reg=$x5
SU(34):   renamable $x6 = UBFMXri renamable $x6, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x6
  Successors:
    SU(39): Data Latency=1 Reg=$x6
    SU(36): Data Latency=1 Reg=$x6
    SU(35): Data Latency=1 Reg=$x6
SU(35):   $x3 = ADDXrs renamable $x3, renamable $x6, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 8
  Predecessors:
    SU(30): Data Latency=1 Reg=$x3
    SU(30): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x6
  Successors:
    SU(39): Out  Latency=1
    SU(37): Data Latency=1 Reg=$x3
SU(36):   $x19 = ADDXrs renamable $x19, renamable $x6, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(34): Data Latency=1 Reg=$x6
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x19
  Successors:
    SU(38): Data Latency=1 Reg=$x19
SU(37):   renamable $d0 = LDRDroX renamable $x3, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx42)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 7
  Predecessors:
    SU(35): Data Latency=1 Reg=$x3
    SU(33): Data Latency=1 Reg=$x5
    SU(26): Anti Latency=0
    SU(25): Out  Latency=1
  Successors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=4 Reg=$d0
    SU(39): Anti Latency=0
SU(38):   renamable $d1 = LDRDroX renamable $x19, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx50)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 7
  Predecessors:
    SU(33): Data Latency=1 Reg=$x5
    SU(36): Data Latency=1 Reg=$x19
    SU(26): Ord  Latency=1 Memory
    SU(25): Anti Latency=0
    SU(21): Out  Latency=1
  Successors:
    SU(42): Data Latency=4 Reg=$d1
SU(39):   $x3 = ADDXrs renamable $x4, renamable $x6, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 7
  Predecessors:
    SU(37): Anti Latency=0
    SU(35): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x6
    SU(32): Data Latency=1 Reg=$x4
  Successors:
    SU(43): Out  Latency=1
    SU(40): Data Latency=1 Reg=$x3
SU(40):   renamable $d2 = LDRDroX renamable $x3, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx59)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 6
  Predecessors:
    SU(39): Data Latency=1 Reg=$x3
    SU(33): Data Latency=1 Reg=$x5
  Successors:
    SU(44): Data Latency=4 Reg=$d2
    SU(43): Anti Latency=0
SU(41):   renamable $d3 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(45): Data Latency=4 Reg=$d3
    SU(46): Ord  Latency=0 Memory
SU(42):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 3
  Predecessors:
    SU(37): Data Latency=4 Reg=$d0
    SU(37): Out  Latency=1
    SU(38): Data Latency=4 Reg=$d1
  Successors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d0
SU(43):   renamable $w3 = nsw ADDWri renamable $w7, 1, 0, implicit $x7
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 1
  Predecessors:
    SU(40): Anti Latency=0
    SU(39): Out  Latency=1
    SU(18): Data Latency=4 Reg=$w7
    SU(18): Data Latency=0 Reg=$x7
  Successors:
    SU(47): Data Latency=1 Reg=$w3
SU(44):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 2
  Predecessors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=1 Reg=$d0
    SU(40): Data Latency=4 Reg=$d2
  Successors:
    SU(45): Out  Latency=1
    SU(45): Data Latency=1 Reg=$d0
SU(45):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 1
  Predecessors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d0
    SU(41): Data Latency=4 Reg=$d3
  Successors:
    SU(46): Data Latency=1 Reg=$d0
SU(46):   STURDi renamable $d0, $fp, -48 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(45): Data Latency=1 Reg=$d0
    SU(41): Ord  Latency=0 Memory
SU(47):   STRWui renamable $w3, $sp, 9 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(43): Data Latency=1 Reg=$w3
    SU(18): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
ExitSU:   B %bb.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 27
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 41 
  TopQ.A RemainingLatency 0 + 0c > CritPath 27
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x3 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 27c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 41 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
  Cand SU(2) TOP-PATH                  26 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x5, renamable $x7 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 6 
Queue TopQ.A: 41 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x4 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 6 22 
Queue TopQ.A: 41 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(3) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x6, renamable $x19 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 22 5 6 
Queue TopQ.A: 41 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(4) TOP-PATH                  23 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x3 = MADDXrrr renamable $x3, renamable $x16, $xzr
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 22 
Queue TopQ.A: 41 9 7 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x5 = MADDXrrr renamable $x5, renamable $x18, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 7 6 22 
  TopQ.A RemainingLatency 0 + 6c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x7 = ADDXrs renamable $x7, renamable $x7, 2
  Ready @6c
  TopQ.A BotLatency SU(6) 22c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 7 22 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x20 = ADDXrs renamable $x17, renamable $x3, 0
  Ready @7c
  TopQ.A TopLatency SU(7) 5c
  TopQ.A BotLatency SU(7) 22c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 8 22 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x7 = UBFMXri renamable $x7, 61, 60
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 11 22 
  TopQ.A RemainingLatency 0 + 9c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $lr = ADDXrs renamable $x0, renamable $x3, 0
  Ready @9c
  TopQ.A BotLatency SU(9) 21c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 11 12 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(11) TOP-PATH                  21 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x3 = ADDXrs renamable $x1, renamable $x3, 0
  Ready @10c
  TopQ.A BotLatency SU(10) 21c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 11 12 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(11) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x20 = ADDXrs renamable $x20, renamable $x5, 0
  Ready @11c
  TopQ.A TopLatency SU(11) 6c
  TopQ.A BotLatency SU(11) 21c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 13 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(13) TOP-PATH                  20 cycles 
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) $lr = ADDXrs renamable $lr, renamable $x5, 0
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 13 16 
  TopQ.A RemainingLatency 0 + 13c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(13) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x3 = ADDXrs renamable $x3, renamable $x5, 0
  Ready @13c
  TopQ.A BotLatency SU(13) 20c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 16 17 14 
  TopQ.A RemainingLatency 0 + 14c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
  Cand SU(14) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x5 = ADDXrs renamable $x20, renamable $x7, 0
  Ready @14c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 20c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 16 17 15 
  TopQ.A RemainingLatency 0 + 15c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
  Cand SU(15) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x20 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  Ready @15c
  TopQ.A BotLatency SU(15) 20c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 16 17 
  TopQ.A RemainingLatency 0 + 16c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $lr = ADDXrs renamable $lr, renamable $x7, 0
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 17 
  TopQ.A RemainingLatency 0 + 17c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(17) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x3 = ADDXrs renamable $x3, renamable $x7, 0
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(18) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x7 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 19 
  TopQ.A RemainingLatency 0 + 19c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(19) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $x20 = UBFMXri renamable $x20, 61, 60
  Ready @19c
  TopQ.A TopLatency SU(19) 11c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 21 20 
  TopQ.A RemainingLatency 0 + 20c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(21) TOP-PATH                  15 cycles 
  Cand SU(20) ORDER                              
Pick Top ORDER     
Scheduling SU(20) renamable $d0 = LDRDroX renamable $x5, renamable $x20, 0, 0 :: (load 8 from %ir.arrayidx18)
  Ready @20c
  TopQ.A TopLatency SU(20) 12c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 21 23 
  TopQ.A RemainingLatency 0 + 21c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(21) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d1 = LDRDroX renamable $lr, renamable $x20, 0, 0 :: (load 8 from %ir.arrayidx26)
  Ready @21c
  TopQ.A BotLatency SU(21) 15c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 22 23 
  TopQ.A RemainingLatency 0 + 22c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x4 = MADDXrrr renamable $x4, renamable $x16, $xzr
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 23 
  TopQ.A RemainingLatency 0 + 23c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(23) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x5 = MADDXrrr renamable $x6, renamable $x18, $xzr
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 24 
  TopQ.A RemainingLatency 0 + 24c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(24) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) renamable $x6 = ADDXrs renamable $x19, renamable $x19, 2
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 25 
  TopQ.A RemainingLatency 0 + 25c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(25) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @25c
  TopQ.A TopLatency SU(25) 16c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 26 
  TopQ.A RemainingLatency 0 + 26c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) STRDroX renamable $d0, renamable $x3, renamable $x20, 0, 0 :: (store 8 into %ir.arrayidx34)
  Ready @26c
  TopQ.A TopLatency SU(26) 17c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 27 
  TopQ.A RemainingLatency 0 + 27c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(27) ORDER                              
Pick Top ORDER     
Scheduling SU(27) $x3 = ADDXrs renamable $x0, renamable $x4, 0
  Ready @27c
  TopQ.A BotLatency SU(27) 10c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 30 
  TopQ.A RemainingLatency 0 + 28c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) $x19 = ADDXrs renamable $x1, renamable $x4, 0
  Ready @28c
  TopQ.A BotLatency SU(28) 10c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 30 31 29 
  TopQ.A RemainingLatency 0 + 29c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(30) ORDER                              
  Cand SU(29) ORDER                              
Pick Top ORDER     
Scheduling SU(29) $x4 = ADDXrs renamable $x2, renamable $x4, 0
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 30 31 32 
  TopQ.A RemainingLatency 0 + 30c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) $x3 = ADDXrs renamable $x3, renamable $x5, 0
  Ready @30c
  TopQ.A TopLatency SU(30) 18c
  TopQ.A BotLatency SU(30) 9c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 32 31 
  TopQ.A RemainingLatency 0 + 31c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) $x19 = ADDXrs renamable $x19, renamable $x5, 0
  Ready @31c
  TopQ.A BotLatency SU(31) 9c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 32 
  TopQ.A RemainingLatency 0 + 32c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(34) renamable $x6 = UBFMXri renamable $x6, 61, 60
  Ready @32c
  TopQ.A BotLatency SU(34) 9c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 32 36 35 
  TopQ.A RemainingLatency 0 + 33c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(32) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) $x4 = ADDXrs renamable $x4, renamable $x5, 0
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 35 36 33 
  TopQ.A RemainingLatency 0 + 34c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(35) TOP-PATH                  8 cycles 
  Cand SU(33) ORDER                              
Pick Top ORDER     
Scheduling SU(33) renamable $x5 = UBFMXri renamable $x7, 61, 60
  Ready @34c
  TopQ.A BotLatency SU(33) 8c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 35 36 
  TopQ.A RemainingLatency 0 + 35c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(35) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) $x3 = ADDXrs renamable $x3, renamable $x6, 0
  Ready @35c
  TopQ.A TopLatency SU(35) 19c
  TopQ.A BotLatency SU(35) 8c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 36 37 
  TopQ.A RemainingLatency 0 + 36c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(36) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) $x19 = ADDXrs renamable $x19, renamable $x6, 0
  Ready @36c
  TopQ.A BotLatency SU(36) 8c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 37 38 
  TopQ.A RemainingLatency 0 + 37c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(37) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) renamable $d0 = LDRDroX renamable $x3, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx42)
  Ready @37c
  TopQ.A TopLatency SU(37) 20c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 38 39 
  TopQ.A RemainingLatency 0 + 38c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(38) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) renamable $d1 = LDRDroX renamable $x19, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx50)
  Ready @38c
  TopQ.A BotLatency SU(38) 7c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 39 
  TopQ.A RemainingLatency 0 + 39c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(39) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(39) $x3 = ADDXrs renamable $x4, renamable $x6, 0
  Ready @39c
  TopQ.A BotLatency SU(39) 7c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 40 
  TopQ.A RemainingLatency 0 + 40c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(40) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(40) renamable $d2 = LDRDroX renamable $x3, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx59)
  Ready @40c
  TopQ.A TopLatency SU(40) 21c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 43 
  TopQ.A RemainingLatency 0 + 41c > CritPath 27
  Cand SU(41) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(41) renamable $d3 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 42 
  TopQ.A RemainingLatency 0 + 42c > CritPath 27
  Cand SU(43) ORDER                              
  Cand SU(42) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @42c
  TopQ.A TopLatency SU(42) 24c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 44 
Queue TopQ.A: 43 
Pick Top ONLY1     
Scheduling SU(43) renamable $w3 = nsw ADDWri renamable $w7, 1, 0, implicit $x7
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 44 
  TopQ.A RemainingLatency 0 + 44c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(44) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(44) renamable $d0 = FMULDrr renamable $d0, renamable $d2
  Ready @44c
  TopQ.A TopLatency SU(44) 25c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 45 
  TopQ.A RemainingLatency 0 + 45c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(45) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(45) renamable $d0 = FADDDrr renamable $d3, renamable $d0
  Ready @45c
  TopQ.A TopLatency SU(45) 26c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 
  TopQ.A RemainingLatency 0 + 46c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
Pick Top ORDER     
Scheduling SU(46) STURDi renamable $d0, $fp, -48 :: (store 8 into %ir.rho1)
  Ready @46c
  TopQ.A TopLatency SU(46) 27c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 
Pick Top ONLY1     
Scheduling SU(47) STRWui renamable $w3, $sp, 9 :: (store 4 into %ir.i)
  Ready @47c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x3 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $x5, renamable $x7 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(1):   renamable $x4 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(3):   renamable $x6, renamable $x19 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(4):   renamable $x3 = MADDXrrr renamable $x3, renamable $x16, $xzr
SU(5):   renamable $x5 = MADDXrrr renamable $x5, renamable $x18, $xzr
SU(6):   renamable $x7 = ADDXrs renamable $x7, renamable $x7, 2
SU(7):   $x20 = ADDXrs renamable $x17, renamable $x3, 0
SU(8):   renamable $x7 = UBFMXri renamable $x7, 61, 60
SU(9):   $lr = ADDXrs renamable $x0, renamable $x3, 0
SU(10):   $x3 = ADDXrs renamable $x1, renamable $x3, 0
SU(11):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
SU(12):   $lr = ADDXrs renamable $lr, renamable $x5, 0
SU(13):   $x3 = ADDXrs renamable $x3, renamable $x5, 0
SU(14):   $x5 = ADDXrs renamable $x20, renamable $x7, 0
SU(15):   renamable $x20 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
SU(16):   $lr = ADDXrs renamable $lr, renamable $x7, 0
SU(17):   $x3 = ADDXrs renamable $x3, renamable $x7, 0
SU(18):   renamable $x7 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
SU(19):   renamable $x20 = UBFMXri renamable $x20, 61, 60
SU(20):   renamable $d0 = LDRDroX renamable $x5, renamable $x20, 0, 0 :: (load 8 from %ir.arrayidx18)
SU(21):   renamable $d1 = LDRDroX renamable $lr, renamable $x20, 0, 0 :: (load 8 from %ir.arrayidx26)
SU(22):   renamable $x4 = MADDXrrr renamable $x4, renamable $x16, $xzr
SU(23):   renamable $x5 = MADDXrrr renamable $x6, renamable $x18, $xzr
SU(24):   renamable $x6 = ADDXrs renamable $x19, renamable $x19, 2
SU(25):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(26):   STRDroX renamable $d0, renamable $x3, renamable $x20, 0, 0 :: (store 8 into %ir.arrayidx34)
SU(27):   $x3 = ADDXrs renamable $x0, renamable $x4, 0
SU(28):   $x19 = ADDXrs renamable $x1, renamable $x4, 0
SU(29):   $x4 = ADDXrs renamable $x2, renamable $x4, 0
SU(30):   $x3 = ADDXrs renamable $x3, renamable $x5, 0
SU(31):   $x19 = ADDXrs renamable $x19, renamable $x5, 0
SU(34):   renamable $x6 = UBFMXri renamable $x6, 61, 60
SU(32):   $x4 = ADDXrs renamable $x4, renamable $x5, 0
SU(33):   renamable $x5 = UBFMXri renamable $x7, 61, 60
SU(35):   $x3 = ADDXrs renamable $x3, renamable $x6, 0
SU(36):   $x19 = ADDXrs renamable $x19, renamable $x6, 0
SU(37):   renamable $d0 = LDRDroX renamable $x3, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx42)
SU(38):   renamable $d1 = LDRDroX renamable $x19, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx50)
SU(39):   $x3 = ADDXrs renamable $x4, renamable $x6, 0
SU(40):   renamable $d2 = LDRDroX renamable $x3, renamable $x5, 0, 0 :: (load 8 from %ir.arrayidx59)
SU(41):   renamable $d3 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
SU(42):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(43):   renamable $w3 = nsw ADDWri renamable $w7, 1, 0, implicit $x7
SU(44):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
SU(45):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
SU(46):   STURDi renamable $d0, $fp, -48 :: (store 8 into %ir.rho1)
SU(47):   STRWui renamable $w3, $sp, 9 :: (store 4 into %ir.i)

Fixup kills for %bb.12
********** MI Scheduling **********
diffusion:%bb.13 for.inc61
  From: renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w3
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w3 = nsw ADDWri renamable $w3, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w3
  Successors:
    SU(2): Data Latency=1 Reg=$w3
SU(2):   STRWui renamable $w3, $sp, 8 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w3
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w3 = nsw ADDWri renamable $w3, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w3, $sp, 8 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w3 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w3 = nsw ADDWri renamable $w3, 1, 0
SU(2):   STRWui renamable $w3, $sp, 8 :: (store 4 into %ir.j)

Fixup kills for %bb.13
********** MI Scheduling **********
diffusion:%bb.14 for.inc64
  From: renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.7
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w3
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w3 = nsw ADDWri renamable $w3, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w3
  Successors:
    SU(2): Data Latency=1 Reg=$w3
SU(2):   STRWui renamable $w3, $sp, 7 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w3
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w3 = nsw ADDWri renamable $w3, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w3, $sp, 7 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $w3 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w3 = nsw ADDWri renamable $w3, 1, 0
SU(2):   STRWui renamable $w3, $sp, 7 :: (store 4 into %ir.k)

Fixup kills for %bb.14
********** MI Scheduling **********
diffusion:%bb.15 for.inc67
  From: renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w3
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w3 = nsw ADDWri renamable $w3, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w3
  Successors:
    SU(2): Data Latency=1 Reg=$w3
SU(2):   STRWui renamable $w3, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w3
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w3 = nsw ADDWri renamable $w3, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w3, $sp, 12 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w3 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w3 = nsw ADDWri renamable $w3, 1, 0
SU(2):   STRWui renamable $w3, $sp, 12 :: (store 4 into %ir.ie)

Fixup kills for %bb.15
********** MI Scheduling **********
diffusion:%bb.16 for.end69
  From: STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x16 = ADRP target-flags(aarch64-page) @dpcmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x17 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x18 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x18
SU(7):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x16 = ADRP target-flags(aarch64-page) @dpcmor
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(6) TOP-PATH                  2 cycles 
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x17 = ADRP target-flags(aarch64-page) @rmor
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x18 = ADRP target-flags(aarch64-page) @pmorx
  Ready @2c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 3 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  Ready @4c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(2):   $x16 = ADRP target-flags(aarch64-page) @dpcmor
SU(4):   $x17 = ADRP target-flags(aarch64-page) @rmor
SU(6):   $x18 = ADRP target-flags(aarch64-page) @pmorx
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(3):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
SU(5):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(7):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
SU(0):   STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)

Fixup kills for %bb.16
********** MI Scheduling **********
diffusion:%bb.17 for.cond70
  From: renamable $w0 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.19, implicit $nzcv
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w0
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w1
SU(2):   $wzr = SUBSWrs renamable $w0, renamable $w1, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w1
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.19, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w0 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w0, renamable $w1, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w0 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
SU(1):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(2):   $wzr = SUBSWrs renamable $w0, renamable $w1, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.17
********** MI Scheduling **********
diffusion:%bb.18 for.body72
  From: renamable $x0 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.17
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w0
    SU(7): Data Latency=0 Reg=$x0
    SU(1): Data Latency=4 Reg=$x0
    SU(12): Ord  Latency=0 Memory
SU(1):   renamable $x1 = UBFMXri renamable $x0, 61, 60
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(8): Data Latency=1 Reg=$x1
    SU(4): Data Latency=1 Reg=$x1
    SU(3): Data Latency=1 Reg=$x1
    SU(2): Data Latency=1 Reg=$x1
    SU(7): Anti Latency=0
SU(2):   renamable $d0 = LDRDroX renamable $x16, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx74)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDroX renamable $x17, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx76)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
SU(4):   renamable $d2 = LDRDroX renamable $x17, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx81)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    SU(9): Data Latency=4 Reg=$d2
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(8): Data Latency=1 Reg=$d0
    SU(6): Anti Latency=0
SU(6):   renamable $d1 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(10): Data Latency=4 Reg=$d1
    SU(11): Ord  Latency=0 Memory
SU(7):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
    SU(0): Data Latency=0 Reg=$x0
  Successors:
    SU(12): Data Latency=1 Reg=$w0
SU(8):   STRDroX renamable $d0, renamable $x18, renamable $x1, 0, 0 :: (store 8 into %ir.arrayidx79)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(1): Data Latency=1 Reg=$x1
  Successors:
    SU(9): Anti Latency=0
SU(9):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(8): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d0
SU(10):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d1
  Successors:
    SU(11): Data Latency=1 Reg=$d0
SU(11):   STURDi renamable $d0, $fp, -48 :: (store 8 into %ir.rho1)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
SU(12):   STRWui renamable $w0, $sp, 11 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w0
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x0 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x1 = UBFMXri renamable $x0, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 2 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 14
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  9 cycles 
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x16, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx74)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 14
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x17, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx76)
  Ready @6c
  TopQ.A BotLatency SU(3) 9c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 14
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d2 = LDRDroX renamable $x17, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx81)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWui renamable $w0, $sp, 11 :: (store 4 into %ir.im)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @10c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 11c > CritPath 14
  Cand SU(8) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
  Ready @11c
  TopQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRDroX renamable $d0, renamable $x18, renamable $x1, 0, 0 :: (store 8 into %ir.arrayidx79)
  Ready @12c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d0 = FMULDrr renamable $d2, renamable $d0
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d0 = FADDDrr renamable $d1, renamable $d0
  Ready @15c
  TopQ.A TopLatency SU(10) 13c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 12
  Executed: 16c
  Critical: 12c, 12 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STURDi renamable $d0, $fp, -48 :: (store 8 into %ir.rho1)
  Ready @16c
  TopQ.A TopLatency SU(11) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 13
  Executed: 17c
  Critical: 13c, 13 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   renamable $x0 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
SU(1):   renamable $x1 = UBFMXri renamable $x0, 61, 60
SU(2):   renamable $d0 = LDRDroX renamable $x16, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx74)
SU(3):   renamable $d1 = LDRDroX renamable $x17, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx76)
SU(4):   renamable $d2 = LDRDroX renamable $x17, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx81)
SU(7):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0
SU(12):   STRWui renamable $w0, $sp, 11 :: (store 4 into %ir.im)
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(6):   renamable $d1 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
SU(8):   STRDroX renamable $d0, renamable $x18, renamable $x1, 0, 0 :: (store 8 into %ir.arrayidx79)
SU(9):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
SU(10):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
SU(11):   STURDi renamable $d0, $fp, -48 :: (store 8 into %ir.rho1)

Fixup kills for %bb.18
********** MI Scheduling **********
diffusion:%bb.19 for.end88
  From: $w8 = MOVZWi 1, 0
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w4 = MOVZWi 1000, 0, implicit-def $x4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w20 = MOVZWi 200, 0, implicit-def $x20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x19 = ADRP target-flags(aarch64-page) @pdiffp
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x19
SU(4):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x19 = ADRP target-flags(aarch64-page) @pdiffp
  Ready @0c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $w4 = MOVZWi 1000, 0, implicit-def $x4
  Ready @2c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w20 = MOVZWi 200, 0, implicit-def $x20
  Ready @3c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  Ready @4c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(3):   $x19 = ADRP target-flags(aarch64-page) @pdiffp
SU(0):   $w8 = MOVZWi 1, 0
SU(1):   $w4 = MOVZWi 1000, 0, implicit-def $x4
SU(2):   $w20 = MOVZWi 200, 0, implicit-def $x20
SU(4):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0

Fixup kills for %bb.19
********** MI Scheduling **********
diffusion:%bb.20 for.cond89
  From: STRWui renamable $w8, $sp, 13 :: (store 4 into %ir.iter)
    To: Bcc 12, %bb.73, implicit $nzcv
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 13 :: (store 4 into %ir.iter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @nmxh
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(4): Data Latency=4 Reg=$w16
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w16
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.73, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x16 = ADRP target-flags(aarch64-page) @nmxh
  Ready @0c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
  Ready @1c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w8, $sp, 13 :: (store 4 into %ir.iter)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @nmxh
SU(3):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmxh :: (dereferenceable load 4 from @nmxh)
SU(0):   STRWui renamable $w8, $sp, 13 :: (store 4 into %ir.iter)
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.20
********** MI Scheduling **********
diffusion:%bb.21 for.body91
  From: renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
    To: Bcc 11, %bb.38, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 11, %bb.38, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv

Fixup kills for %bb.21
********** MI Scheduling **********
diffusion:%bb.22 if.then93
  From: STURXi $xzr, $fp, -40 :: (store 8 into %ir.rho_aux)
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   STURXi $xzr, $fp, -40 :: (store 8 into %ir.rho_aux)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $x5 = ADRP target-flags(aarch64-page) @dpcelm
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x5
SU(3):   renamable $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x5
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x6 = ADRP target-flags(aarch64-page) @trhs
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x6
SU(5):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x7 = ADRP target-flags(aarch64-page) @tmult
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x7
SU(7):   renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x7
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x5 = ADRP target-flags(aarch64-page) @dpcelm
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 4 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x6 = ADRP target-flags(aarch64-page) @trhs
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x7 = ADRP target-flags(aarch64-page) @tmult
  Ready @2c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 3 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 7 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  Ready @4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  Ready @5c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURXi $xzr, $fp, -40 :: (store 8 into %ir.rho_aux)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(2):   $x5 = ADRP target-flags(aarch64-page) @dpcelm
SU(4):   $x6 = ADRP target-flags(aarch64-page) @trhs
SU(6):   $x7 = ADRP target-flags(aarch64-page) @tmult
SU(3):   renamable $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @dpcelm, 0
SU(5):   renamable $x6 = ADDXri $x6, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
SU(7):   renamable $x7 = ADDXri $x7, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
SU(0):   STURXi $xzr, $fp, -40 :: (store 8 into %ir.rho_aux)
SU(1):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)

Fixup kills for %bb.22
********** MI Scheduling **********
diffusion:%bb.23 for.cond94
  From: renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.34, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.34, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.23
Fixup kills for %bb.24
********** MI Scheduling **********
diffusion:%bb.25 for.cond97
  From: renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.33, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.33, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.25
Fixup kills for %bb.26
********** MI Scheduling **********
diffusion:%bb.27 for.cond100
  From: renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.32, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.32, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.27
Fixup kills for %bb.28
********** MI Scheduling **********
diffusion:%bb.29 for.cond103
  From: renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.31, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.31, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.29
********** MI Scheduling **********
diffusion:%bb.30 for.body105
  From: renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.29
 RegionInstrs: 48
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=4 Reg=$x16
SU(2):   renamable $x17, renamable $x0 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x17
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x0
SU(3):   renamable $x18, renamable $x1 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(24): Out  Latency=1
    SU(23): Data Latency=4 Reg=$x18
    SU(28): Out  Latency=1
    SU(24): Data Latency=4 Reg=$x1
SU(4):   renamable $x8 = MADDXrrr renamable $x8, renamable $x4, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 23
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
    SU(9): Data Latency=1 Reg=$x8
    SU(7): Data Latency=1 Reg=$x8
SU(5):   renamable $x17 = MADDXrrr renamable $x17, renamable $x20, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x17
  Successors:
    SU(14): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x17
    SU(12): Data Latency=1 Reg=$x17
    SU(11): Data Latency=1 Reg=$x17
SU(6):   renamable $x0 = ADDXrs renamable $x0, renamable $x0, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(7):   $x2 = ADDXrs renamable $x5, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 22
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x2
    SU(10): Anti Latency=0
SU(8):   renamable $x0 = UBFMXri renamable $x0, 61, 60
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x0
    SU(16): Data Latency=1 Reg=$x0
    SU(14): Data Latency=1 Reg=$x0
SU(9):   $x3 = ADDXrs renamable $x6, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x3
    SU(10): Anti Latency=0
SU(10):   $x8 = ADDXrs renamable $x19, renamable $x8, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Anti Latency=0
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
SU(11):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 21
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x2
    SU(5): Data Latency=1 Reg=$x17
  Successors:
    SU(15): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x2
    SU(14): Anti Latency=0
SU(12):   $x3 = ADDXrs renamable $x3, renamable $x17, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x3
    SU(5): Data Latency=1 Reg=$x17
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x3
    SU(14): Anti Latency=0
SU(13):   $x8 = ADDXrs renamable $x8, renamable $x17, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 20
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
    SU(5): Data Latency=1 Reg=$x17
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x8
    SU(14): Anti Latency=0
SU(14):   $x17 = ADDXrs renamable $x2, renamable $x0, 0
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 20
  Predecessors:
    SU(13): Anti Latency=0
    SU(12): Anti Latency=0
    SU(11): Data Latency=1 Reg=$x2
    SU(11): Anti Latency=0
    SU(8): Data Latency=1 Reg=$x0
    SU(5): Out  Latency=1
  Successors:
    SU(23): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x17
    SU(15): Anti Latency=0
    SU(18): Anti Latency=0
SU(15):   renamable $x2 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 20
  Predecessors:
    SU(14): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=4 Reg=$x2
    SU(47): Ord  Latency=0 Memory
SU(16):   $x3 = ADDXrs renamable $x3, renamable $x0, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x3
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    SU(21): Data Latency=1 Reg=$x3
    SU(18): Anti Latency=0
SU(17):   $x8 = ADDXrs renamable $x8, renamable $x0, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    SU(27): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x8
    SU(18): Anti Latency=0
SU(18):   renamable $x0 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(17): Anti Latency=0
    SU(16): Anti Latency=0
    SU(14): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(43): Data Latency=4 Reg=$w0
    SU(43): Data Latency=0 Reg=$x0
    SU(33): Data Latency=4 Reg=$x0
    SU(47): Ord  Latency=0 Memory
SU(19):   renamable $x2 = UBFMXri renamable $x2, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 16
  Predecessors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$x2
  Successors:
    SU(26): Data Latency=1 Reg=$x2
    SU(21): Data Latency=1 Reg=$x2
    SU(20): Data Latency=1 Reg=$x2
SU(20):   renamable $d0 = LDRDroX renamable $x17, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx113)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(19): Data Latency=1 Reg=$x2
    SU(14): Data Latency=1 Reg=$x17
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d0
    SU(23): Anti Latency=0
SU(21):   renamable $d1 = LDRDroX renamable $x3, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx121)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(19): Data Latency=1 Reg=$x2
    SU(16): Data Latency=1 Reg=$x3
  Successors:
    SU(38): Out  Latency=1
    SU(25): Data Latency=4 Reg=$d1
SU(22):   renamable $x16 = MADDXrrr renamable $x16, renamable $x4, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x16
    SU(28): Data Latency=1 Reg=$x16
    SU(27): Data Latency=1 Reg=$x16
SU(23):   renamable $x17 = MADDXrrr renamable $x18, renamable $x20, $xzr
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(20): Anti Latency=0
    SU(14): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x18
  Successors:
    SU(33): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x17
    SU(31): Data Latency=1 Reg=$x17
    SU(30): Data Latency=1 Reg=$x17
    SU(24): Anti Latency=0
SU(24):   renamable $x18 = ADDXrs renamable $x1, renamable $x1, 2
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(23): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x1
  Successors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x18
    SU(28): Anti Latency=0
SU(25):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 11
  Predecessors:
    SU(21): Data Latency=4 Reg=$d1
    SU(20): Out  Latency=1
    SU(20): Data Latency=4 Reg=$d0
  Successors:
    SU(37): Out  Latency=1
    SU(26): Data Latency=1 Reg=$d0
    SU(38): Anti Latency=0
SU(26):   STRDroX renamable $d0, renamable $x8, renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx130)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(25): Data Latency=1 Reg=$d0
    SU(19): Data Latency=1 Reg=$x2
    SU(17): Data Latency=1 Reg=$x8
  Successors:
    SU(37): Anti Latency=0
    SU(27): Anti Latency=0
    SU(38): Ord  Latency=1 Memory
SU(27):   $x8 = ADDXrs renamable $x6, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(26): Anti Latency=0
    SU(22): Data Latency=1 Reg=$x16
    SU(17): Out  Latency=1
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x8
    SU(29): Anti Latency=0
SU(28):   $x1 = ADDXrs renamable $x19, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(24): Anti Latency=0
    SU(22): Data Latency=1 Reg=$x16
    SU(3): Out  Latency=1
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x1
    SU(29): Anti Latency=0
SU(29):   $x16 = ADDXrs renamable $x7, renamable $x16, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 9
  Predecessors:
    SU(28): Anti Latency=0
    SU(27): Anti Latency=0
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x16
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x16
SU(30):   $x8 = ADDXrs renamable $x8, renamable $x17, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(27): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x8
    SU(23): Data Latency=1 Reg=$x17
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x8
    SU(33): Anti Latency=0
SU(31):   $x1 = ADDXrs renamable $x1, renamable $x17, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x1
    SU(23): Data Latency=1 Reg=$x17
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x1
    SU(33): Anti Latency=0
SU(32):   $x16 = ADDXrs renamable $x16, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 8
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x16
    SU(23): Data Latency=1 Reg=$x17
  Successors:
    SU(39): Data Latency=1 Reg=$x16
    SU(33): Anti Latency=0
SU(33):   renamable $x17 = UBFMXri renamable $x0, 61, 60
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 8
  Predecessors:
    SU(32): Anti Latency=0
    SU(31): Anti Latency=0
    SU(30): Anti Latency=0
    SU(23): Out  Latency=1
    SU(18): Data Latency=4 Reg=$x0
  Successors:
    SU(40): Data Latency=1 Reg=$x17
    SU(38): Data Latency=1 Reg=$x17
    SU(37): Data Latency=1 Reg=$x17
SU(34):   renamable $x18 = UBFMXri renamable $x18, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x18
  Successors:
    SU(39): Data Latency=1 Reg=$x18
    SU(36): Data Latency=1 Reg=$x18
    SU(35): Data Latency=1 Reg=$x18
SU(35):   $x8 = ADDXrs renamable $x8, renamable $x18, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 8
  Predecessors:
    SU(30): Data Latency=1 Reg=$x8
    SU(30): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x18
  Successors:
    SU(39): Out  Latency=1
    SU(37): Data Latency=1 Reg=$x8
SU(36):   $x1 = ADDXrs renamable $x1, renamable $x18, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 8
  Predecessors:
    SU(34): Data Latency=1 Reg=$x18
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x1
  Successors:
    SU(38): Data Latency=1 Reg=$x1
SU(37):   renamable $d0 = LDRDroX renamable $x8, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx138)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 7
  Predecessors:
    SU(35): Data Latency=1 Reg=$x8
    SU(33): Data Latency=1 Reg=$x17
    SU(26): Anti Latency=0
    SU(25): Out  Latency=1
  Successors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=4 Reg=$d0
    SU(39): Anti Latency=0
SU(38):   renamable $d1 = LDRDroX renamable $x1, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx146)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 7
  Predecessors:
    SU(33): Data Latency=1 Reg=$x17
    SU(36): Data Latency=1 Reg=$x1
    SU(26): Ord  Latency=1 Memory
    SU(25): Anti Latency=0
    SU(21): Out  Latency=1
  Successors:
    SU(42): Data Latency=4 Reg=$d1
SU(39):   $x8 = ADDXrs renamable $x16, renamable $x18, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 7
  Predecessors:
    SU(37): Anti Latency=0
    SU(35): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x18
    SU(32): Data Latency=1 Reg=$x16
  Successors:
    SU(43): Out  Latency=1
    SU(40): Data Latency=1 Reg=$x8
SU(40):   renamable $d2 = LDRDroX renamable $x8, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx155)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 6
  Predecessors:
    SU(39): Data Latency=1 Reg=$x8
    SU(33): Data Latency=1 Reg=$x17
  Successors:
    SU(44): Data Latency=4 Reg=$d2
    SU(43): Anti Latency=0
SU(41):   renamable $d3 = LDURDi $fp, -40 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(45): Data Latency=4 Reg=$d3
    SU(46): Ord  Latency=0 Memory
SU(42):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 3
  Predecessors:
    SU(37): Data Latency=4 Reg=$d0
    SU(37): Out  Latency=1
    SU(38): Data Latency=4 Reg=$d1
  Successors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d0
SU(43):   renamable $w8 = nsw ADDWri renamable $w0, 1, 0, implicit $x0
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 1
  Predecessors:
    SU(40): Anti Latency=0
    SU(39): Out  Latency=1
    SU(18): Data Latency=4 Reg=$w0
    SU(18): Data Latency=0 Reg=$x0
  Successors:
    SU(47): Data Latency=1 Reg=$w8
SU(44):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 2
  Predecessors:
    SU(42): Out  Latency=1
    SU(42): Data Latency=1 Reg=$d0
    SU(40): Data Latency=4 Reg=$d2
  Successors:
    SU(45): Out  Latency=1
    SU(45): Data Latency=1 Reg=$d0
SU(45):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 1
  Predecessors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d0
    SU(41): Data Latency=4 Reg=$d3
  Successors:
    SU(46): Data Latency=1 Reg=$d0
SU(46):   STURDi renamable $d0, $fp, -40 :: (store 8 into %ir.rho_aux)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(45): Data Latency=1 Reg=$d0
    SU(41): Ord  Latency=0 Memory
SU(47):   STRWui renamable $w8, $sp, 9 :: (store 4 into %ir.i)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(43): Data Latency=1 Reg=$w8
    SU(18): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 27
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 41 
  TopQ.A RemainingLatency 0 + 0c > CritPath 27
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 27c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 41 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
  Cand SU(2) TOP-PATH                  26 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x17, renamable $x0 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 6 
Queue TopQ.A: 41 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 6 22 
Queue TopQ.A: 41 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(3) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x18, renamable $x1 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 22 5 6 
Queue TopQ.A: 41 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(4) TOP-PATH                  23 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x8 = MADDXrrr renamable $x8, renamable $x4, $xzr
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 22 
Queue TopQ.A: 41 9 7 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x17 = MADDXrrr renamable $x17, renamable $x20, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 7 6 22 
  TopQ.A RemainingLatency 0 + 6c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x0 = ADDXrs renamable $x0, renamable $x0, 2
  Ready @6c
  TopQ.A BotLatency SU(6) 22c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 7 22 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(7) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x2 = ADDXrs renamable $x5, renamable $x8, 0
  Ready @7c
  TopQ.A TopLatency SU(7) 5c
  TopQ.A BotLatency SU(7) 22c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 8 22 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x0 = UBFMXri renamable $x0, 61, 60
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 9 11 22 
  TopQ.A RemainingLatency 0 + 9c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(9) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x3 = ADDXrs renamable $x6, renamable $x8, 0
  Ready @9c
  TopQ.A BotLatency SU(9) 21c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 11 12 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(11) TOP-PATH                  21 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x8 = ADDXrs renamable $x19, renamable $x8, 0
  Ready @10c
  TopQ.A BotLatency SU(10) 21c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 11 12 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(11) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x2 = ADDXrs renamable $x2, renamable $x17, 0
  Ready @11c
  TopQ.A TopLatency SU(11) 6c
  TopQ.A BotLatency SU(11) 21c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 13 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(13) TOP-PATH                  20 cycles 
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) $x3 = ADDXrs renamable $x3, renamable $x17, 0
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 13 16 
  TopQ.A RemainingLatency 0 + 13c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(13) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x8 = ADDXrs renamable $x8, renamable $x17, 0
  Ready @13c
  TopQ.A BotLatency SU(13) 20c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 16 17 14 
  TopQ.A RemainingLatency 0 + 14c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
  Cand SU(14) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x17 = ADDXrs renamable $x2, renamable $x0, 0
  Ready @14c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 20c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 16 17 15 
  TopQ.A RemainingLatency 0 + 15c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
  Cand SU(15) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x2 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  Ready @15c
  TopQ.A BotLatency SU(15) 20c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 16 17 
  TopQ.A RemainingLatency 0 + 16c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(16) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $x3 = ADDXrs renamable $x3, renamable $x0, 0
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 17 
  TopQ.A RemainingLatency 0 + 17c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(17) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x8 = ADDXrs renamable $x8, renamable $x0, 0
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 41 22 18 
  TopQ.A RemainingLatency 0 + 18c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(18) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $x0 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 19 
  TopQ.A RemainingLatency 0 + 19c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(19) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $x2 = UBFMXri renamable $x2, 61, 60
  Ready @19c
  TopQ.A TopLatency SU(19) 11c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 21 20 
  TopQ.A RemainingLatency 0 + 20c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(21) TOP-PATH                  15 cycles 
  Cand SU(20) ORDER                              
Pick Top ORDER     
Scheduling SU(20) renamable $d0 = LDRDroX renamable $x17, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx113)
  Ready @20c
  TopQ.A TopLatency SU(20) 12c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 22 21 23 
  TopQ.A RemainingLatency 0 + 21c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
  Cand SU(21) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d1 = LDRDroX renamable $x3, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx121)
  Ready @21c
  TopQ.A BotLatency SU(21) 15c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 22 23 
  TopQ.A RemainingLatency 0 + 22c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(22) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x16 = MADDXrrr renamable $x16, renamable $x4, $xzr
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 23 
  TopQ.A RemainingLatency 0 + 23c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(23) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x17 = MADDXrrr renamable $x18, renamable $x20, $xzr
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 25 
Queue TopQ.A: 41 24 
  TopQ.A RemainingLatency 0 + 24c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(24) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) renamable $x18 = ADDXrs renamable $x1, renamable $x1, 2
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 25 
  TopQ.A RemainingLatency 0 + 25c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(25) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @25c
  TopQ.A TopLatency SU(25) 16c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 26 
  TopQ.A RemainingLatency 0 + 26c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) STRDroX renamable $d0, renamable $x8, renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx130)
  Ready @26c
  TopQ.A TopLatency SU(26) 17c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 27 
  TopQ.A RemainingLatency 0 + 27c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
  Cand SU(27) ORDER                              
Pick Top ORDER     
Scheduling SU(27) $x8 = ADDXrs renamable $x6, renamable $x16, 0
  Ready @27c
  TopQ.A BotLatency SU(27) 10c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 28 30 
  TopQ.A RemainingLatency 0 + 28c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(28) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) $x1 = ADDXrs renamable $x19, renamable $x16, 0
  Ready @28c
  TopQ.A BotLatency SU(28) 10c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 30 31 29 
  TopQ.A RemainingLatency 0 + 29c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(30) ORDER                              
  Cand SU(29) ORDER                              
Pick Top ORDER     
Scheduling SU(29) $x16 = ADDXrs renamable $x7, renamable $x16, 0
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 30 31 32 
  TopQ.A RemainingLatency 0 + 30c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(30) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(30) $x8 = ADDXrs renamable $x8, renamable $x17, 0
  Ready @30c
  TopQ.A TopLatency SU(30) 18c
  TopQ.A BotLatency SU(30) 9c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 32 31 
  TopQ.A RemainingLatency 0 + 31c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) $x1 = ADDXrs renamable $x1, renamable $x17, 0
  Ready @31c
  TopQ.A BotLatency SU(31) 9c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 34 32 
  TopQ.A RemainingLatency 0 + 32c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(34) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(34) renamable $x18 = UBFMXri renamable $x18, 61, 60
  Ready @32c
  TopQ.A BotLatency SU(34) 9c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 32 36 35 
  TopQ.A RemainingLatency 0 + 33c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(32) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) $x16 = ADDXrs renamable $x16, renamable $x17, 0
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 35 36 33 
  TopQ.A RemainingLatency 0 + 34c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(35) TOP-PATH                  8 cycles 
  Cand SU(33) ORDER                              
Pick Top ORDER     
Scheduling SU(33) renamable $x17 = UBFMXri renamable $x0, 61, 60
  Ready @34c
  TopQ.A BotLatency SU(33) 8c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 35 36 
  TopQ.A RemainingLatency 0 + 35c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(35) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) $x8 = ADDXrs renamable $x8, renamable $x18, 0
  Ready @35c
  TopQ.A TopLatency SU(35) 19c
  TopQ.A BotLatency SU(35) 8c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 36 37 
  TopQ.A RemainingLatency 0 + 36c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(36) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(36) $x1 = ADDXrs renamable $x1, renamable $x18, 0
  Ready @36c
  TopQ.A BotLatency SU(36) 8c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 37 38 
  TopQ.A RemainingLatency 0 + 37c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(37) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) renamable $d0 = LDRDroX renamable $x8, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx138)
  Ready @37c
  TopQ.A TopLatency SU(37) 20c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 41 38 39 
  TopQ.A RemainingLatency 0 + 38c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(38) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(38) renamable $d1 = LDRDroX renamable $x1, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx146)
  Ready @38c
  TopQ.A BotLatency SU(38) 7c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 39 
  TopQ.A RemainingLatency 0 + 39c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(39) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(39) $x8 = ADDXrs renamable $x16, renamable $x18, 0
  Ready @39c
  TopQ.A BotLatency SU(39) 7c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 40 
  TopQ.A RemainingLatency 0 + 40c > CritPath 27
  Cand SU(41) ORDER                              
  Cand SU(40) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(40) renamable $d2 = LDRDroX renamable $x8, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx155)
  Ready @40c
  TopQ.A TopLatency SU(40) 21c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 42 
Queue TopQ.A: 41 43 
  TopQ.A RemainingLatency 0 + 41c > CritPath 27
  Cand SU(41) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(41) renamable $d3 = LDURDi $fp, -40 :: (dereferenceable load 8 from %ir.rho_aux)
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 42 
  TopQ.A RemainingLatency 0 + 42c > CritPath 27
  Cand SU(43) ORDER                              
  Cand SU(42) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @42c
  TopQ.A TopLatency SU(42) 24c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 44 
Queue TopQ.A: 43 
Pick Top ONLY1     
Scheduling SU(43) renamable $w8 = nsw ADDWri renamable $w0, 1, 0, implicit $x0
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 44 
  TopQ.A RemainingLatency 0 + 44c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(44) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(44) renamable $d0 = FMULDrr renamable $d0, renamable $d2
  Ready @44c
  TopQ.A TopLatency SU(44) 25c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 45 
  TopQ.A RemainingLatency 0 + 45c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(45) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(45) renamable $d0 = FADDDrr renamable $d3, renamable $d0
  Ready @45c
  TopQ.A TopLatency SU(45) 26c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 46 
  TopQ.A RemainingLatency 0 + 46c > CritPath 27
  Cand SU(47) ORDER                              
  Cand SU(46) ORDER                              
Pick Top ORDER     
Scheduling SU(46) STURDi renamable $d0, $fp, -40 :: (store 8 into %ir.rho_aux)
  Ready @46c
  TopQ.A TopLatency SU(46) 27c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 
Pick Top ONLY1     
Scheduling SU(47) STRWui renamable $w8, $sp, 9 :: (store 4 into %ir.i)
  Ready @47c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $x17, renamable $x0 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(1):   renamable $x16 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(3):   renamable $x18, renamable $x1 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(4):   renamable $x8 = MADDXrrr renamable $x8, renamable $x4, $xzr
SU(5):   renamable $x17 = MADDXrrr renamable $x17, renamable $x20, $xzr
SU(6):   renamable $x0 = ADDXrs renamable $x0, renamable $x0, 2
SU(7):   $x2 = ADDXrs renamable $x5, renamable $x8, 0
SU(8):   renamable $x0 = UBFMXri renamable $x0, 61, 60
SU(9):   $x3 = ADDXrs renamable $x6, renamable $x8, 0
SU(10):   $x8 = ADDXrs renamable $x19, renamable $x8, 0
SU(11):   $x2 = ADDXrs renamable $x2, renamable $x17, 0
SU(12):   $x3 = ADDXrs renamable $x3, renamable $x17, 0
SU(13):   $x8 = ADDXrs renamable $x8, renamable $x17, 0
SU(14):   $x17 = ADDXrs renamable $x2, renamable $x0, 0
SU(15):   renamable $x2 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
SU(16):   $x3 = ADDXrs renamable $x3, renamable $x0, 0
SU(17):   $x8 = ADDXrs renamable $x8, renamable $x0, 0
SU(18):   renamable $x0 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
SU(19):   renamable $x2 = UBFMXri renamable $x2, 61, 60
SU(20):   renamable $d0 = LDRDroX renamable $x17, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx113)
SU(21):   renamable $d1 = LDRDroX renamable $x3, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx121)
SU(22):   renamable $x16 = MADDXrrr renamable $x16, renamable $x4, $xzr
SU(23):   renamable $x17 = MADDXrrr renamable $x18, renamable $x20, $xzr
SU(24):   renamable $x18 = ADDXrs renamable $x1, renamable $x1, 2
SU(25):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(26):   STRDroX renamable $d0, renamable $x8, renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx130)
SU(27):   $x8 = ADDXrs renamable $x6, renamable $x16, 0
SU(28):   $x1 = ADDXrs renamable $x19, renamable $x16, 0
SU(29):   $x16 = ADDXrs renamable $x7, renamable $x16, 0
SU(30):   $x8 = ADDXrs renamable $x8, renamable $x17, 0
SU(31):   $x1 = ADDXrs renamable $x1, renamable $x17, 0
SU(34):   renamable $x18 = UBFMXri renamable $x18, 61, 60
SU(32):   $x16 = ADDXrs renamable $x16, renamable $x17, 0
SU(33):   renamable $x17 = UBFMXri renamable $x0, 61, 60
SU(35):   $x8 = ADDXrs renamable $x8, renamable $x18, 0
SU(36):   $x1 = ADDXrs renamable $x1, renamable $x18, 0
SU(37):   renamable $d0 = LDRDroX renamable $x8, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx138)
SU(38):   renamable $d1 = LDRDroX renamable $x1, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx146)
SU(39):   $x8 = ADDXrs renamable $x16, renamable $x18, 0
SU(40):   renamable $d2 = LDRDroX renamable $x8, renamable $x17, 0, 0 :: (load 8 from %ir.arrayidx155)
SU(41):   renamable $d3 = LDURDi $fp, -40 :: (dereferenceable load 8 from %ir.rho_aux)
SU(42):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(43):   renamable $w8 = nsw ADDWri renamable $w0, 1, 0, implicit $x0
SU(44):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
SU(45):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
SU(46):   STURDi renamable $d0, $fp, -40 :: (store 8 into %ir.rho_aux)
SU(47):   STRWui renamable $w8, $sp, 9 :: (store 4 into %ir.i)

Fixup kills for %bb.30
********** MI Scheduling **********
diffusion:%bb.31 for.inc161
  From: renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.27
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 8 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 8 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 8 :: (store 4 into %ir.j)

Fixup kills for %bb.31
********** MI Scheduling **********
diffusion:%bb.32 for.inc164
  From: renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.k)

Fixup kills for %bb.32
********** MI Scheduling **********
diffusion:%bb.33 for.inc167
  From: renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.23
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)

Fixup kills for %bb.33
********** MI Scheduling **********
diffusion:%bb.34 for.end169
  From: STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x17 = ADRP target-flags(aarch64-page) @dpcmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x17
SU(2):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x18 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
SU(4):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x17 = ADRP target-flags(aarch64-page) @dpcmor
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x18 = ADRP target-flags(aarch64-page) @rmor
  Ready @1c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @3c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(1):   $x17 = ADRP target-flags(aarch64-page) @dpcmor
SU(3):   $x18 = ADRP target-flags(aarch64-page) @rmor
SU(2):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @dpcmor, 0
SU(4):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(0):   STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)

Fixup kills for %bb.34
********** MI Scheduling **********
diffusion:%bb.35 for.cond170
  From: renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.37, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.37, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nmor
SU(0):   renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.35
********** MI Scheduling **********
diffusion:%bb.36 for.body172
  From: renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.35
 RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(7): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(14): Ord  Latency=0 Memory
SU(1):   renamable $x16 = UBFMXri renamable $x8, 61, 60
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(10): Data Latency=1 Reg=$x16
    SU(4): Data Latency=1 Reg=$x16
    SU(3): Data Latency=1 Reg=$x16
    SU(2): Data Latency=1 Reg=$x16
    SU(7): Anti Latency=0
SU(2):   renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx174)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx176)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
SU(4):   renamable $d2 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx181)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(11): Data Latency=4 Reg=$d2
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d0
    SU(10): Data Latency=1 Reg=$d0
    SU(6): Anti Latency=0
SU(6):   renamable $d1 = LDURDi $fp, -40 :: (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(12): Data Latency=4 Reg=$d1
    SU(13): Ord  Latency=0 Memory
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(14): Data Latency=1 Reg=$w8
SU(8):   $x0 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
SU(9):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    SU(10): Data Latency=1 Reg=$x0
SU(10):   STRDroX renamable $d0, renamable $x0, renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx179)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
    SU(5): Data Latency=1 Reg=$d0
    SU(9): Data Latency=1 Reg=$x0
  Successors:
    SU(11): Anti Latency=0
SU(11):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(10): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$d0
SU(12):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d1
  Successors:
    SU(13): Data Latency=1 Reg=$d0
SU(13):   STURDi renamable $d0, $fp, -40 :: (store 8 into %ir.rho_aux)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
SU(14):   STRWui renamable $w8, $sp, 11 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.35
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $x0 = ADRP target-flags(aarch64-page) @ppmor
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @2c
  TopQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 2 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 14
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  9 cycles 
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx174)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 14
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx176)
  Ready @6c
  TopQ.A BotLatency SU(3) 9c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 14
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d2 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx181)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STRWui renamable $w8, $sp, 11 :: (store 4 into %ir.im)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @10c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 6 
  TopQ.A RemainingLatency 0 + 11c > CritPath 14
  Cand SU(10) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = LDURDi $fp, -40 :: (dereferenceable load 8 from %ir.rho_aux)
  Ready @11c
  TopQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRDroX renamable $d0, renamable $x0, renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx179)
  Ready @12c
  TopQ.A TopLatency SU(10) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $d0 = FMULDrr renamable $d2, renamable $d0
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) renamable $d0 = FADDDrr renamable $d1, renamable $d0
  Ready @15c
  TopQ.A TopLatency SU(12) 13c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STURDi renamable $d0, $fp, -40 :: (store 8 into %ir.rho_aux)
  Ready @16c
  TopQ.A TopLatency SU(13) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 15
  Executed: 17c
  Critical: 15c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
SU(8):   $x0 = ADRP target-flags(aarch64-page) @ppmor
SU(9):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
SU(1):   renamable $x16 = UBFMXri renamable $x8, 61, 60
SU(2):   renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx174)
SU(3):   renamable $d1 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx176)
SU(4):   renamable $d2 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx181)
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
SU(14):   STRWui renamable $w8, $sp, 11 :: (store 4 into %ir.im)
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(6):   renamable $d1 = LDURDi $fp, -40 :: (dereferenceable load 8 from %ir.rho_aux)
SU(10):   STRDroX renamable $d0, renamable $x0, renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx179)
SU(11):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
SU(12):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
SU(13):   STURDi renamable $d0, $fp, -40 :: (store 8 into %ir.rho_aux)

Fixup kills for %bb.36
********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: renamable $d0 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.beta)
    To: BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.beta)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Data Latency=4 Reg=$w2
SU(4):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w2
SU(5):   $x0 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x1 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
SU(8):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 5 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.beta)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 7 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 4 
Queue TopQ.A: 5 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @pmorx
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 4 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x1 = ADRP target-flags(aarch64-page) @ppmor
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 8 1 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 8 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(1) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @6c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  Ready @7c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  Ready @8c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(0):   renamable $d0 = LDRDui $sp, 8 :: (dereferenceable load 8 from %ir.beta)
SU(3):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(5):   $x0 = ADRP target-flags(aarch64-page) @pmorx
SU(7):   $x1 = ADRP target-flags(aarch64-page) @ppmor
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
SU(8):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
SU(1):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
SU(4):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)

********** MI Scheduling **********
diffusion:%bb.37 for.end188
  From: renamable $d0, renamable $d1 = LDPDi $fp, -6 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
    To: BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0, renamable $d1 = LDPDi $fp, -6 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(4): Data Latency=4 Reg=$d0
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Data Latency=4 Reg=$d1
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w2
SU(3):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w2
SU(4):   STPDi renamable $d0, renamable $d1, $fp, -7 :: (store 8 into %ir.rho2), (store 8 into %ir.rho1)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Anti Latency=0
SU(5):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
SU(7):   STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.beta)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
SU(8):   $x0 = ADRP target-flags(aarch64-page) @pdiff
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ADRP target-flags(aarch64-page) @pdiffp
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x1
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds1m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0, renamable $d1 = LDPDi $fp, -6 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 1 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 8 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 3 
Queue TopQ.A: 10 8 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x0 = ADRP target-flags(aarch64-page) @pdiff
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 10 9 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ADRP target-flags(aarch64-page) @pdiffp
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 9 11 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STPDi renamable $d0, renamable $d1, $fp, -7 :: (store 8 into %ir.rho2), (store 8 into %ir.rho1)
  Ready @5c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 5 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  Ready @6c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 3 7 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  Ready @7c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 6 3 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  Ready @8c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 3 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  Ready @9c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.beta)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $d0, renamable $d1 = LDPDi $fp, -6 :: (dereferenceable load 8 from %ir.rho1), (dereferenceable load 8 from %ir.rho_aux)
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(8):   $x0 = ADRP target-flags(aarch64-page) @pdiff
SU(10):   $x1 = ADRP target-flags(aarch64-page) @pdiffp
SU(4):   STPDi renamable $d0, renamable $d1, $fp, -7 :: (store 8 into %ir.rho2), (store 8 into %ir.rho1)
SU(5):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
SU(3):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
SU(6):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
SU(7):   STRDui renamable $d0, $sp, 8 :: (store 8 into %ir.beta)

Fixup kills for %bb.37
********** MI Scheduling **********
diffusion:%bb.38 if.end189
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.40
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.40
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.38
Fixup kills for %bb.39
********** MI Scheduling **********
diffusion:%bb.40 if.end192
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.42
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.42
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
diffusion:%bb.40 if.end192
  From: $x0 = ADRP target-flags(aarch64-page) @pmorx
    To: BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @pdiff
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @pmorx
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @pdiff
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @pmorx
SU(2):   $x1 = ADRP target-flags(aarch64-page) @pdiff
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0

Fixup kills for %bb.40
Fixup kills for %bb.41
********** MI Scheduling **********
diffusion:%bb.42 if.end195
  From: STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w18 = MOVZWi 1000, 0, implicit-def $x18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @pdiff
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @pdiff
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w18 = MOVZWi 1000, 0, implicit-def $x18
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(2):   $x1 = ADRP target-flags(aarch64-page) @pdiff
SU(1):   $w18 = MOVZWi 1000, 0, implicit-def $x18
SU(3):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
SU(0):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)

Fixup kills for %bb.42
********** MI Scheduling **********
diffusion:%bb.43 for.cond196
  From: renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.45, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.45, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.43
********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.43
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.43
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)

********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: $x1 = ADRP target-flags(aarch64-page) @pdiff
    To: PCN_STACKMAP 10, 0, 1, 8, $fp, -112, 1, 8, $fp, -120, 1, 8, $fp, -112, 1, 8, $fp, -120, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 4, $fp, -124, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 8 from %stack.14), (load 4 from %stack.15)
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x1 = ADRP target-flags(aarch64-page) @pdiff
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x1
SU(1):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x1
SU(2):   $w18 = MOVZWi 1000, 0, implicit-def $x18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   PCN_STACKMAP 10, 0, 1, 8, $fp, -112, 1, 8, $fp, -120, 1, 8, $fp, -112, 1, 8, $fp, -120, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 4, $fp, -124, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 8 from %stack.14), (load 4 from %stack.15)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x1 = ADRP target-flags(aarch64-page) @pdiff
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w18 = MOVZWi 1000, 0, implicit-def $x18
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $x1 = ADRP target-flags(aarch64-page) @pdiff
SU(1):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
SU(2):   $w18 = MOVZWi 1000, 0, implicit-def $x18

********** MI Scheduling **********
diffusion:%bb.44 for.body198
  From: renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x8
    SU(3): Data Latency=4 Reg=$x8
SU(1):   $x16 = ADRP target-flags(aarch64-page) @size_e
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=1 Reg=$x16
SU(3):   renamable $w2 = LDRWroX renamable $x16, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx205)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$x16
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Data Latency=4 Reg=$w2
    SU(5): Anti Latency=0
SU(4):   STRWui renamable $w2, $sp, 1 :: (store 4 into %stack.15)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w2
SU(5):   renamable $x8 = MADDXrrr renamable $x8, renamable $x18, $xzr
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$x8
    SU(6): Data Latency=1 Reg=$x8
SU(6):   $x0 = ADDXrs renamable $x19, renamable $x8, 0
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(8): Data Latency=1 Reg=$x0
SU(7):   $x1 = ADDXrs renamable $x1, renamable $x8, 0
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(8): Data Latency=1 Reg=$x1
SU(8):   STPXi renamable $x1, renamable $x0, $sp, 1 :: (store 8 into %stack.13), (store 8 into %stack.14)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$x1
    SU(6): Data Latency=1 Reg=$x0
ExitSU:   BL @laplacian, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $w2, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x16 = ADRP target-flags(aarch64-page) @size_e
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w2 = LDRWroX renamable $x16, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx205)
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x8 = MADDXrrr renamable $x8, renamable $x18, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x0 = ADDXrs renamable $x19, renamable $x8, 0
  Ready @6c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $x1 = ADDXrs renamable $x1, renamable $x8, 0
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 4 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(8) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRWui renamable $w2, $sp, 1 :: (store 4 into %stack.15)
  Ready @8c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STPXi renamable $x1, renamable $x0, $sp, 1 :: (store 8 into %stack.13), (store 8 into %stack.14)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   $x16 = ADRP target-flags(aarch64-page) @size_e
SU(2):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @size_e, 0
SU(3):   renamable $w2 = LDRWroX renamable $x16, renamable $x8, 0, 1 :: (load 4 from %ir.arrayidx205)
SU(5):   renamable $x8 = MADDXrrr renamable $x8, renamable $x18, $xzr
SU(6):   $x0 = ADDXrs renamable $x19, renamable $x8, 0
SU(7):   $x1 = ADDXrs renamable $x1, renamable $x8, 0
SU(4):   STRWui renamable $w2, $sp, 1 :: (store 4 into %stack.15)
SU(8):   STPXi renamable $x1, renamable $x0, $sp, 1 :: (store 8 into %stack.13), (store 8 into %stack.14)

Fixup kills for %bb.44
********** MI Scheduling **********
diffusion:%bb.45 for.end208
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.47
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.47
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.45
Fixup kills for %bb.46
********** MI Scheduling **********
diffusion:%bb.47 if.end211
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.49
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.49
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
diffusion:%bb.47 if.end211
  From: $x0 = ADRP target-flags(aarch64-page) @ppmor
    To: BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @pdiffp
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transfb, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @ppmor
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @pdiffp
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @ppmor
SU(2):   $x1 = ADRP target-flags(aarch64-page) @pdiffp
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0

Fixup kills for %bb.47
Fixup kills for %bb.48
********** MI Scheduling **********
diffusion:%bb.49 if.end214
  From: STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
    To: End RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w2 = MOVZWi 1000, 0, implicit-def $x2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x3 = ADRP target-flags(aarch64-page) @tmult
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x3
SU(3):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x4 = ADRP target-flags(aarch64-page) @pdiff
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x4
SU(5):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $w18 = MOVZWi 24, 0, implicit-def $x18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x0 = ADRP target-flags(aarch64-page) @cbc
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x3 = ADRP target-flags(aarch64-page) @tmult
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 4 6 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(7) TOP-PATH                  2 cycles 
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x4 = ADRP target-flags(aarch64-page) @pdiff
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 7 3 6 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @cbc
  Ready @2c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 3 6 8 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w2 = MOVZWi 1000, 0, implicit-def $x2
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 8 5 3 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  Ready @4c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 8 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 8 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $w18 = MOVZWi 24, 0, implicit-def $x18
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  Ready @7c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.49 ***
SU(2):   $x3 = ADRP target-flags(aarch64-page) @tmult
SU(4):   $x4 = ADRP target-flags(aarch64-page) @pdiff
SU(7):   $x0 = ADRP target-flags(aarch64-page) @cbc
SU(1):   $w2 = MOVZWi 1000, 0, implicit-def $x2
SU(3):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
SU(5):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
SU(6):   $w18 = MOVZWi 24, 0, implicit-def $x18
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
SU(0):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)

Fixup kills for %bb.49
********** MI Scheduling **********
diffusion:%bb.50 for.cond215
  From: renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.57, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.57, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.50
Fixup kills for %bb.51
********** MI Scheduling **********
diffusion:%bb.52 for.cond218
  From: renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
    To: Bcc 12, %bb.56, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.56, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
SU(1):   dead $wzr = SUBSWri renamable $w8, 5, 0, implicit-def $nzcv

Fixup kills for %bb.52
********** MI Scheduling **********
diffusion:%bb.53 for.body220
  From: renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: CBNZW killed renamable $w8, %bb.55
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=$x16
SU(2):   renamable $x8 = MADDXrrr renamable $x8, renamable $x18, renamable $x0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1 :: (load 4 from %ir.arrayidx224)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBNZW killed renamable $w8, %bb.55
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = MADDXrrr renamable $x8, renamable $x18, renamable $x0
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1 :: (load 4 from %ir.arrayidx224)
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $x16 = LDRSWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
SU(2):   renamable $x8 = MADDXrrr renamable $x8, renamable $x18, renamable $x0
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1 :: (load 4 from %ir.arrayidx224)

Fixup kills for %bb.53
********** MI Scheduling **********
diffusion:%bb.54 if.then226
  From: $x0 = ADRP target-flags(aarch64-page) @cbc
    To: PCN_STACKMAP 14, 0, 1, 8, $fp, -112, 1, 8, $fp, -112, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 4, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 4 from %stack.14)
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cbc
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
SU(2):   $w18 = MOVZWi 24, 0, implicit-def $x18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $x4 = ADRP target-flags(aarch64-page) @pdiff
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x4
SU(4):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x4
SU(5):   $x3 = ADRP target-flags(aarch64-page) @tmult
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x3
SU(6):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x3
SU(7):   $w2 = MOVZWi 1000, 0, implicit-def $x2
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   PCN_STACKMAP 14, 0, 1, 8, $fp, -112, 1, 8, $fp, -112, 0, $fp, -64, 0, $fp, -72, 0, $fp, -92, 0, $fp, -80, 0, $fp, -84, 0, $fp, -88, 0, $fp, -76, 0, $fp, -96, 0, $fp, -100, 0, $fp, -48, 0, $fp, -56, 0, $fp, -40, 1, 4, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.beta), (load 8 from %stack.5.cona), (load 8 from %stack.10.i, align 4), (load 8 from %stack.7.ie, align 4), (load 8 from %stack.8.im, align 4), (load 8 from %stack.9.iside, align 4), (load 8 from %stack.6.iter, align 4), (load 8 from %stack.11.j, align 4), (load 8 from %stack.12.k, align 4), (load 8 from %stack.2.rho1), (load 8 from %stack.3.rho2), (load 8 from %stack.1.rho_aux), (load 8 from %stack.13), (load 4 from %stack.14)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @cbc
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(7) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x4 = ADRP target-flags(aarch64-page) @pdiff
  Ready @1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 1 5 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(7) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x3 = ADRP target-flags(aarch64-page) @tmult
  Ready @2c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 1 4 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(7) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
  Ready @3c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 2 6 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 1
  Cand SU(7) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w18 = MOVZWi 24, 0, implicit-def $x18
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 4 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 1
  Cand SU(7) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 1
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w2 = MOVZWi 1000, 0, implicit-def $x2
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cbc
SU(3):   $x4 = ADRP target-flags(aarch64-page) @pdiff
SU(5):   $x3 = ADRP target-flags(aarch64-page) @tmult
SU(1):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cbc, 0
SU(2):   $w18 = MOVZWi 24, 0, implicit-def $x18
SU(4):   renamable $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
SU(6):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @tmult, 0
SU(7):   $w2 = MOVZWi 1000, 0, implicit-def $x2

********** MI Scheduling **********
diffusion:%bb.54 if.then226
  From: renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $w1 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$w1
SU(2):   STRWui renamable $w1, $sp, 2 :: (store 4 into %stack.14)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$w1
SU(3):   renamable $x0 = MADDXrrr renamable $x8, renamable $x2, renamable $x19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(4): Data Latency=1 Reg=$x0
SU(4):   STRXui renamable $x0, $sp, 2 :: (store 8 into %stack.13)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$x0
SU(5):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @facev, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 2 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $d0 = FMOVD0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x0 = MADDXrrr renamable $x8, renamable $x2, renamable $x19
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STRWui renamable $w1, $sp, 2 :: (store 4 into %stack.14)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRXui renamable $x0, $sp, 2 :: (store 8 into %stack.13)
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w1 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
SU(5):   $d0 = FMOVD0
SU(3):   renamable $x0 = MADDXrrr renamable $x8, renamable $x2, renamable $x19
SU(2):   STRWui renamable $w1, $sp, 2 :: (store 4 into %stack.14)
SU(4):   STRXui renamable $x0, $sp, 2 :: (store 8 into %stack.13)

Fixup kills for %bb.54
********** MI Scheduling **********
diffusion:%bb.55 for.inc231
  From: renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
    To: B %bb.52
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 10 :: (store 4 into %ir.iside)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.52
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 10 :: (store 4 into %ir.iside)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   renamable $w8 = LDRWui $sp, 10 :: (dereferenceable load 4 from %ir.iside)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 10 :: (store 4 into %ir.iside)

Fixup kills for %bb.55
********** MI Scheduling **********
diffusion:%bb.56 for.inc234
  From: renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.50
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.56 ***
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)

Fixup kills for %bb.56
********** MI Scheduling **********
diffusion:%bb.57 for.end236
  From: STRXui $xzr, $sp, 7 :: (store 8 into %ir.cona)
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRXui $xzr, $sp, 7 :: (store 8 into %ir.cona)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRXui $xzr, $sp, 7 :: (store 8 into %ir.cona)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   STRXui $xzr, $sp, 7 :: (store 8 into %ir.cona)
SU(1):   STRWui $wzr, $sp, 12 :: (store 4 into %ir.ie)

Fixup kills for %bb.57
********** MI Scheduling **********
diffusion:%bb.58 for.cond237
  From: renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: Bcc 10, %bb.69, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.69, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nelt
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.58 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nelt
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nelt :: (dereferenceable load 4 from @nelt)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.58
Fixup kills for %bb.59
********** MI Scheduling **********
diffusion:%bb.60 for.cond240
  From: renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.68, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.68, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.60
Fixup kills for %bb.61
********** MI Scheduling **********
diffusion:%bb.62 for.cond243
  From: renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.67, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.67, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.62
Fixup kills for %bb.63
********** MI Scheduling **********
diffusion:%bb.64 for.cond246
  From: renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.66, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.66, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   renamable $w8 = LDRWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w8, 4, 0, implicit-def $nzcv

Fixup kills for %bb.64
********** MI Scheduling **********
diffusion:%bb.65 for.body248
  From: renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.64
 RegionInstrs: 27
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x16, renamable $x17 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x16
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x17
SU(2):   renamable $x18 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(22): Data Latency=4 Reg=$w18
    SU(22): Data Latency=0 Reg=$x18
    SU(12): Data Latency=4 Reg=$x18
    SU(26): Ord  Latency=0 Memory
SU(3):   renamable $x8 = MADDXrrr renamable $x8, renamable $x2, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
    SU(7): Data Latency=1 Reg=$x8
    SU(6): Data Latency=1 Reg=$x8
SU(4):   renamable $x16 = MADDXrrr renamable $x16, renamable $x20, $xzr
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    SU(12): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x16
    SU(10): Data Latency=1 Reg=$x16
    SU(9): Data Latency=1 Reg=$x16
SU(5):   renamable $x17 = ADDXrs renamable $x17, renamable $x17, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x17
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x17
SU(6):   $x0 = ADDXrs renamable $x4, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
    SU(8): Anti Latency=0
SU(7):   $x1 = ADDXrs renamable $x19, renamable $x8, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
    SU(8): Anti Latency=0
SU(8):   $x8 = ADDXrs renamable $x3, renamable $x8, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
SU(9):   $x0 = ADDXrs renamable $x0, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x0
    SU(12): Anti Latency=0
SU(10):   $x1 = ADDXrs renamable $x1, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 9
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x1
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x1
    SU(12): Anti Latency=0
SU(11):   $x8 = ADDXrs renamable $x8, renamable $x16, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x8
    SU(12): Anti Latency=0
SU(12):   renamable $x16 = UBFMXri renamable $x18, 61, 60
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 8
  Predecessors:
    SU(11): Anti Latency=0
    SU(10): Anti Latency=0
    SU(9): Anti Latency=0
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x18
  Successors:
    SU(19): Data Latency=1 Reg=$x16
    SU(17): Data Latency=1 Reg=$x16
    SU(16): Data Latency=1 Reg=$x16
SU(13):   renamable $x17 = UBFMXri renamable $x17, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
  Successors:
    SU(18): Data Latency=1 Reg=$x17
    SU(15): Data Latency=1 Reg=$x17
    SU(14): Data Latency=1 Reg=$x17
SU(14):   $x0 = ADDXrs renamable $x0, renamable $x17, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(9): Data Latency=1 Reg=$x0
    SU(9): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x17
  Successors:
    SU(16): Data Latency=1 Reg=$x0
SU(15):   $x1 = ADDXrs renamable $x1, renamable $x17, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 8
  Predecessors:
    SU(10): Data Latency=1 Reg=$x1
    SU(10): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x17
  Successors:
    SU(17): Data Latency=1 Reg=$x1
SU(16):   renamable $d0 = LDRDroX renamable $x0, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx256)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(14): Data Latency=1 Reg=$x0
    SU(12): Data Latency=1 Reg=$x16
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=4 Reg=$d0
SU(17):   renamable $d1 = LDRDroX renamable $x1, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx264)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 7
  Predecessors:
    SU(15): Data Latency=1 Reg=$x1
    SU(12): Data Latency=1 Reg=$x16
  Successors:
    SU(21): Data Latency=4 Reg=$d1
SU(18):   $x8 = ADDXrs renamable $x8, renamable $x17, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=$x8
    SU(11): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x17
  Successors:
    SU(22): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x8
SU(19):   renamable $d2 = LDRDroX renamable $x8, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx273)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(18): Data Latency=1 Reg=$x8
    SU(12): Data Latency=1 Reg=$x16
  Successors:
    SU(23): Data Latency=4 Reg=$d2
    SU(22): Anti Latency=0
SU(20):   renamable $d3 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(24): Data Latency=4 Reg=$d3
    SU(25): Ord  Latency=0 Memory
SU(21):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 3
  Predecessors:
    SU(17): Data Latency=4 Reg=$d1
    SU(16): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d0
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d0
SU(22):   renamable $w8 = nsw ADDWri renamable $w18, 1, 0, implicit $x18
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(19): Anti Latency=0
    SU(18): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w18
    SU(2): Data Latency=0 Reg=$x18
  Successors:
    SU(26): Data Latency=1 Reg=$w8
SU(23):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 2
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$d0
    SU(19): Data Latency=4 Reg=$d2
  Successors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$d0
SU(24):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$d0
    SU(20): Data Latency=4 Reg=$d3
  Successors:
    SU(25): Data Latency=1 Reg=$d0
SU(25):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(24): Data Latency=1 Reg=$d0
    SU(20): Ord  Latency=0 Memory
SU(26):   STRWui renamable $w8, $sp, 9 :: (store 4 into %ir.i)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=$w8
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.64
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 20 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 20 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(20) ORDER                              
  Cand SU(1) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16, renamable $x17 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 4 5 
Queue TopQ.A: 20 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 15
  Cand SU(20) ORDER                              
  Cand SU(2) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x18 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 4 5 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) renamable $d3 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = MADDXrrr renamable $x8, renamable $x2, $xzr
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 5 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x16 = MADDXrrr renamable $x16, renamable $x20, $xzr
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x17 = ADDXrs renamable $x17, renamable $x17, 2
  Ready @6c
  TopQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 6 13 
  TopQ.A RemainingLatency 0 + 7c > CritPath 15
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADDXrs renamable $x4, renamable $x8, 0
  Ready @7c
  TopQ.A TopLatency SU(6) 5c
  TopQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 13 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 15
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x1 = ADDXrs renamable $x19, renamable $x8, 0
  Ready @8c
  TopQ.A BotLatency SU(7) 10c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 13 10 8 
  TopQ.A RemainingLatency 0 + 9c > CritPath 15
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x8 = ADDXrs renamable $x3, renamable $x8, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 13 10 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 15
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ADDXrs renamable $x0, renamable $x16, 0
  Ready @10c
  TopQ.A TopLatency SU(9) 6c
  TopQ.A BotLatency SU(9) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 10 
  TopQ.A RemainingLatency 0 + 11c > CritPath 15
  Cand SU(11) ORDER                              
  Cand SU(13) TOP-PATH                  9 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x1 = ADDXrs renamable $x1, renamable $x16, 0
  Ready @11c
  TopQ.A BotLatency SU(10) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 15
  Cand SU(11) ORDER                              
  Cand SU(13) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x17 = UBFMXri renamable $x17, 61, 60
  Ready @12c
  TopQ.A BotLatency SU(13) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 15 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 15
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $x8 = ADDXrs renamable $x8, renamable $x16, 0
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 18 12 
  TopQ.A RemainingLatency 0 + 14c > CritPath 15
  Cand SU(14) ORDER                              
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x16 = UBFMXri renamable $x18, 61, 60
  Ready @14c
  TopQ.A BotLatency SU(12) 8c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 18 
  TopQ.A RemainingLatency 0 + 15c > CritPath 15
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) $x0 = ADDXrs renamable $x0, renamable $x17, 0
  Ready @15c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 8c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 15 16 
  TopQ.A RemainingLatency 0 + 16c > CritPath 15
  Cand SU(18) ORDER                              
  Cand SU(15) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) $x1 = ADDXrs renamable $x1, renamable $x17, 0
  Ready @16c
  TopQ.A BotLatency SU(15) 8c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 16 17 
  TopQ.A RemainingLatency 0 + 17c > CritPath 15
  Cand SU(18) ORDER                              
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) renamable $d0 = LDRDroX renamable $x0, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx256)
  Ready @17c
  TopQ.A TopLatency SU(16) 8c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 17 
  TopQ.A RemainingLatency 0 + 18c > CritPath 15
  Cand SU(18) ORDER                              
  Cand SU(17) ORDER                              
Pick Top ORDER     
Scheduling SU(17) renamable $d1 = LDRDroX renamable $x1, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx264)
  Ready @18c
  TopQ.A BotLatency SU(17) 7c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 21 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) $x8 = ADDXrs renamable $x8, renamable $x17, 0
  Ready @19c
  TopQ.A BotLatency SU(18) 7c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 21 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) renamable $d2 = LDRDroX renamable $x8, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx273)
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 21 
Queue TopQ.A: 22 
Pick Top ONLY1     
Scheduling SU(22) renamable $w8 = nsw ADDWri renamable $w18, 1, 0, implicit $x18
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 26 21 
  TopQ.A RemainingLatency 0 + 22c > CritPath 15
  Cand SU(26) ORDER                              
  Cand SU(21) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @22c
  TopQ.A TopLatency SU(21) 12c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 23 
Queue TopQ.A: 26 
Pick Top ONLY1     
Scheduling SU(26) STRWui renamable $w8, $sp, 9 :: (store 4 into %ir.i)
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 23 
Pick Top ONLY1     
Scheduling SU(23) renamable $d0 = FMULDrr renamable $d0, renamable $d2
  Ready @24c
  TopQ.A TopLatency SU(23) 13c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 24 
Pick Top ONLY1     
Scheduling SU(24) renamable $d0 = FADDDrr renamable $d3, renamable $d0
  Ready @25c
  TopQ.A TopLatency SU(24) 14c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 25 
Pick Top ONLY1     
Scheduling SU(25) STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)
  Ready @26c
  TopQ.A TopLatency SU(25) 15c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   renamable $x8 = LDRSWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $x16, renamable $x17 = LDPSWi $sp, 7 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(2):   renamable $x18 = LDRSWui $sp, 9 :: (dereferenceable load 4 from %ir.i)
SU(20):   renamable $d3 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
SU(3):   renamable $x8 = MADDXrrr renamable $x8, renamable $x2, $xzr
SU(4):   renamable $x16 = MADDXrrr renamable $x16, renamable $x20, $xzr
SU(5):   renamable $x17 = ADDXrs renamable $x17, renamable $x17, 2
SU(6):   $x0 = ADDXrs renamable $x4, renamable $x8, 0
SU(7):   $x1 = ADDXrs renamable $x19, renamable $x8, 0
SU(8):   $x8 = ADDXrs renamable $x3, renamable $x8, 0
SU(9):   $x0 = ADDXrs renamable $x0, renamable $x16, 0
SU(10):   $x1 = ADDXrs renamable $x1, renamable $x16, 0
SU(13):   renamable $x17 = UBFMXri renamable $x17, 61, 60
SU(11):   $x8 = ADDXrs renamable $x8, renamable $x16, 0
SU(12):   renamable $x16 = UBFMXri renamable $x18, 61, 60
SU(14):   $x0 = ADDXrs renamable $x0, renamable $x17, 0
SU(15):   $x1 = ADDXrs renamable $x1, renamable $x17, 0
SU(16):   renamable $d0 = LDRDroX renamable $x0, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx256)
SU(17):   renamable $d1 = LDRDroX renamable $x1, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx264)
SU(18):   $x8 = ADDXrs renamable $x8, renamable $x17, 0
SU(19):   renamable $d2 = LDRDroX renamable $x8, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx273)
SU(22):   renamable $w8 = nsw ADDWri renamable $w18, 1, 0, implicit $x18
SU(21):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(26):   STRWui renamable $w8, $sp, 9 :: (store 4 into %ir.i)
SU(23):   renamable $d0 = FMULDrr renamable $d0, renamable $d2
SU(24):   renamable $d0 = FADDDrr renamable $d3, renamable $d0
SU(25):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)

Fixup kills for %bb.65
********** MI Scheduling **********
diffusion:%bb.66 for.inc279
  From: renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.62
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 8 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.62
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 8 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   renamable $w8 = LDRWui $sp, 8 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 8 :: (store 4 into %ir.j)

Fixup kills for %bb.66
********** MI Scheduling **********
diffusion:%bb.67 for.inc282
  From: renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.60
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.60
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.67 ***
SU(0):   renamable $w8 = LDRWui $sp, 7 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 7 :: (store 4 into %ir.k)

Fixup kills for %bb.67
********** MI Scheduling **********
diffusion:%bb.68 for.inc285
  From: renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
    To: B %bb.58
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.58
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.68 ***
SU(0):   renamable $w8 = LDRWui $sp, 12 :: (dereferenceable load 4 from %ir.ie)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
SU(2):   STRWui renamable $w8, $sp, 12 :: (store 4 into %ir.ie)

Fixup kills for %bb.68
********** MI Scheduling **********
diffusion:%bb.69 for.end287
  From: STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x18 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x18
SU(2):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x0 = ADRP target-flags(aarch64-page) @tmmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x18 = ADRP target-flags(aarch64-page) @pmorx
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @tmmor
  Ready @1c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
  Ready @3c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.69 ***
SU(1):   $x18 = ADRP target-flags(aarch64-page) @pmorx
SU(3):   $x0 = ADRP target-flags(aarch64-page) @tmmor
SU(2):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
SU(4):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tmmor, 0
SU(0):   STRWui $wzr, $sp, 11 :: (store 4 into %ir.im)

Fixup kills for %bb.69
********** MI Scheduling **********
diffusion:%bb.70 for.cond288
  From: renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
    To: Bcc 10, %bb.72, implicit $nzcv
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.72, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.70 ***
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @nmor
SU(0):   renamable $w8 = LDRWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv

Fixup kills for %bb.70
********** MI Scheduling **********
diffusion:%bb.71 for.body290
  From: renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
    To: B %bb.70
 RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w8
    SU(9): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(14): Ord  Latency=0 Memory
SU(1):   renamable $x16 = UBFMXri renamable $x8, 61, 60
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(10): Data Latency=1 Reg=$x16
    SU(6): Data Latency=1 Reg=$x16
    SU(5): Data Latency=1 Reg=$x16
    SU(4): Data Latency=1 Reg=$x16
    SU(9): Anti Latency=0
SU(2):   $x17 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 10
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x17
  Successors:
    SU(10): Data Latency=1 Reg=$x17
    SU(4): Data Latency=1 Reg=$x17
SU(4):   renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx292)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(10): Ord  Latency=0 Memory
SU(5):   renamable $d1 = LDRDroX renamable $x0, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx294)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
SU(6):   renamable $d2 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx299)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(11): Data Latency=4 Reg=$d2
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d0
    SU(10): Data Latency=1 Reg=$d0
    SU(8): Anti Latency=0
SU(8):   renamable $d1 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(7): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(12): Data Latency=4 Reg=$d1
    SU(13): Ord  Latency=0 Memory
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(14): Data Latency=1 Reg=$w8
SU(10):   STRDroX renamable $d0, renamable $x17, renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx297)
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=$x17
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(11): Anti Latency=0
SU(11):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(10): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$d0
SU(12):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d0
    SU(8): Data Latency=4 Reg=$d1
  Successors:
    SU(13): Data Latency=1 Reg=$d0
SU(13):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=$d0
    SU(8): Ord  Latency=0 Memory
SU(14):   STRWui renamable $w8, $sp, 11 :: (store 4 into %ir.im)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.70
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x17 = ADRP target-flags(aarch64-page) @ppmor
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = UBFMXri renamable $x8, 61, 60
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 14
  Cand SU(6) ORDER                              
  Cand SU(5) TOP-PATH                  9 cycles 
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx292)
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 14
  Cand SU(6) ORDER                              
  Cand SU(5) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x0, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx294)
  Ready @6c
  TopQ.A BotLatency SU(5) 9c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 9 
  TopQ.A RemainingLatency 0 + 7c > CritPath 14
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d2 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx299)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) STRWui renamable $w8, $sp, 11 :: (store 4 into %ir.im)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 14
  Cand SU(10) ORDER                              
  Cand SU(8) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  Ready @11c
  TopQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRDroX renamable $d0, renamable $x17, renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx297)
  Ready @12c
  TopQ.A TopLatency SU(10) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $d0 = FMULDrr renamable $d2, renamable $d0
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) renamable $d0 = FADDDrr renamable $d1, renamable $d0
  Ready @15c
  TopQ.A TopLatency SU(12) 13c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 14
  Executed: 16c
  Critical: 14c, 14 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)
  Ready @16c
  TopQ.A TopLatency SU(13) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 15
  Executed: 17c
  Critical: 15c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.71 ***
SU(0):   renamable $x8 = LDRSWui $sp, 11 :: (dereferenceable load 4 from %ir.im)
SU(2):   $x17 = ADRP target-flags(aarch64-page) @ppmor
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
SU(1):   renamable $x16 = UBFMXri renamable $x8, 61, 60
SU(4):   renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx292)
SU(5):   renamable $d1 = LDRDroX renamable $x0, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx294)
SU(6):   renamable $d2 = LDRDroX renamable $x18, renamable $x16, 0, 0 :: (load 8 from %ir.arrayidx299)
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8
SU(14):   STRWui renamable $w8, $sp, 11 :: (store 4 into %ir.im)
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(8):   renamable $d1 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
SU(10):   STRDroX renamable $d0, renamable $x17, renamable $x16, 0, 0 :: (store 8 into %ir.arrayidx297)
SU(11):   renamable $d0 = FMULDrr renamable $d2, renamable $d0
SU(12):   renamable $d0 = FADDDrr renamable $d1, renamable $d0
SU(13):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)

Fixup kills for %bb.71
********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
    To: B %bb.20
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   renamable $w8 = LDRWui $sp, 13 :: (dereferenceable load 4 from %ir.iter)
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
    To: BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w2
SU(3):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w2
SU(4):   renamable $d0 = FNEGDr renamable $d0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d0
SU(5):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
SU(6):   $x0 = ADRP target-flags(aarch64-page) @rmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x1 = ADRP target-flags(aarch64-page) @ppmor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
SU(9):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 1 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 3 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @rmor
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 7 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADRP target-flags(aarch64-page) @ppmor
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 7 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d0 = FNEGDr renamable $d0
  Ready @5c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 5 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 3 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
  Ready @7c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  Ready @8c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(6):   $x0 = ADRP target-flags(aarch64-page) @rmor
SU(8):   $x1 = ADRP target-flags(aarch64-page) @ppmor
SU(4):   renamable $d0 = FNEGDr renamable $d0
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @rmor, 0
SU(9):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @ppmor, 0
SU(3):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
SU(5):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
    To: BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w2
SU(3):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$w2
SU(4):   renamable $d0 = FNEGDr renamable $d0
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(5): Data Latency=1 Reg=$d0
SU(5):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$d0
SU(6):   $x0 = ADRP target-flags(aarch64-page) @trhs
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x1 = ADRP target-flags(aarch64-page) @pdiffp
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
SU(9):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 1 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 8 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 3 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x0 = ADRP target-flags(aarch64-page) @trhs
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 7 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADRP target-flags(aarch64-page) @pdiffp
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 7 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $d0 = FNEGDr renamable $d0
  Ready @5c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 5 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
  Ready @6c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 3 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
  Ready @7c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  Ready @8c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(2):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(6):   $x0 = ADRP target-flags(aarch64-page) @trhs
SU(8):   $x1 = ADRP target-flags(aarch64-page) @pdiffp
SU(4):   renamable $d0 = FNEGDr renamable $d0
SU(7):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @trhs, 0
SU(9):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiffp, 0
SU(3):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
SU(5):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
    To: BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Data Latency=4 Reg=$w2
SU(4):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w2
SU(5):   $x0 = ADRP target-flags(aarch64-page) @umor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x0
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x1 = ADRP target-flags(aarch64-page) @pmorx
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
SU(8):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 5 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @nmor
  Ready @0c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 7 5 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 7 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 4 
Queue TopQ.A: 5 7 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x0 = ADRP target-flags(aarch64-page) @umor
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 4 
Queue TopQ.A: 7 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x1 = ADRP target-flags(aarch64-page) @pmorx
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 6 8 1 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 8 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(1) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
  Ready @6c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  Ready @7c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  Ready @8c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @nmor
SU(0):   renamable $d0 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
SU(3):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nmor :: (dereferenceable load 4 from @nmor)
SU(5):   $x0 = ADRP target-flags(aarch64-page) @umor
SU(7):   $x1 = ADRP target-flags(aarch64-page) @pmorx
SU(6):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
SU(8):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pmorx, 0
SU(1):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
SU(4):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)

********** MI Scheduling **********
diffusion:%bb.72 for.end306
  From: renamable $d0 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
    To: BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(1):   renamable $d1 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$d1
    SU(7): Ord  Latency=0 Memory
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(4): Data Latency=4 Reg=$w2
SU(4):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w2
SU(5):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
SU(7):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(1): Ord  Latency=0 Memory
SU(8):   $x0 = ADRP target-flags(aarch64-page) @t
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ADRP target-flags(aarch64-page) @pdiff
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x1
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @adds2m1, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $w2, implicit-def $sp
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 8 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 1 2 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 10 8 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @ntot
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 10 8 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 4 
Queue TopQ.A: 10 8 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x0 = ADRP target-flags(aarch64-page) @t
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 10 9 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ADRP target-flags(aarch64-page) @pdiff
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 5 9 11 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $d0 = FDIVDrr renamable $d0, renamable $d1
  Ready @6c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 9 7 6 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  Ready @7c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 4 7 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
  Ready @8c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
  Ready @9c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.72 ***
SU(0):   renamable $d0 = LDURDi $fp, -48 :: (dereferenceable load 8 from %ir.rho1)
SU(1):   renamable $d1 = LDRDui $sp, 7 :: (dereferenceable load 8 from %ir.cona)
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @ntot
SU(3):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @ntot :: (dereferenceable load 4 from @ntot)
SU(8):   $x0 = ADRP target-flags(aarch64-page) @t
SU(10):   $x1 = ADRP target-flags(aarch64-page) @pdiff
SU(5):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @pdiff, 0
SU(4):   STRWui renamable $w2, $sp, 2 :: (store 4 into %stack.14)
SU(6):   STRDui renamable $d0, $sp, 2 :: (store 8 into %stack.13)
SU(7):   STRDui renamable $d0, $sp, 7 :: (store 8 into %ir.cona)

Fixup kills for %bb.72
********** MI Scheduling **********
diffusion:%bb.73 for.end311
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.75
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.75
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.73 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.73
Fixup kills for %bb.74
********** MI Scheduling **********
diffusion:%bb.75 if.end314
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.77
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.77
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

********** MI Scheduling **********
diffusion:%bb.75 if.end314
  From: $x0 = ADRP target-flags(aarch64-page) @umor
    To: BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @umor
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @t
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @transf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @umor
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @t
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.75 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @umor
SU(2):   $x1 = ADRP target-flags(aarch64-page) @t
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @umor, 0
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @t, 0

Fixup kills for %bb.75
Fixup kills for %bb.76
********** MI Scheduling **********
diffusion:%bb.77 if.end317
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron
    To: CBZW killed renamable $w8, %bb.79
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.79
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.77 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron :: (dereferenceable load 4 from @timeron)

Fixup kills for %bb.77
Fixup kills for %bb.78
********** MI Scheduling **********
diffusion:%bb.79 if.end320
  From: $fp, $lr = frame-destroy LDPXi $sp, 16 :: (load 8 from %stack.32), (load 8 from %stack.31)
    To: $sp = frame-destroy ADDXri $sp, 144, 0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 16 :: (load 8 from %stack.32), (load 8 from %stack.31)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 14 :: (load 8 from %stack.34), (load 8 from %stack.33)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 144, 0
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 16 :: (load 8 from %stack.32), (load 8 from %stack.31)
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 14 :: (load 8 from %stack.34), (load 8 from %stack.33)
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.79 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 16 :: (load 8 from %stack.32), (load 8 from %stack.31)
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 14 :: (load 8 from %stack.34), (load 8 from %stack.33)

Fixup kills for %bb.79
Before MISched:
# Machine code for function laplacian: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=1000, align=16, at location [SP]
  fi#9: size=1000, align=16, at location [SP]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 5.000000e-03, align=8
Function Live Ins: $x0 in %0, $x1 in %1, $w2 in %2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x0, $x1, $w2
  %2:gpr32 = COPY $w2
  %1:gpr64 = COPY $x1
  %0:gpr64 = COPY $x0
  STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
  STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
  STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
  %3:gpr64temp = ADRP target-flags(aarch64-page) @dtime
  %4:fpr64 = LDRDui %3:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  %5:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %6:fpr64 = LDRDui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %7:fpr64 = FDIVDrr %6:fpr64, %4:fpr64
  STRDui %7:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %8:gpr64common = ADDXri %stack.8.tm1, 0, 0
  $x0 = ADDXri %stack.8.tm1, 0, 0
  $w1 = MOVi32imm 125
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 0, 0, 0, %stack.8.tm1, 0, 0, %stack.4.i, 0, 0, %stack.7.iz, 0, 0, %stack.5.j, 0, 0, %stack.6.k, 0, 0, %stack.0.r.addr, 0, 0, %stack.3.rdtime, 0, 0, %stack.2.sizei.addr, 0, 0, %stack.8.tm1, 0, 0, %stack.9.tm2, 0, 0, %stack.1.u.addr, 0, 0, %stack.8.tm1, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.4.i, align 4), (load 8 from %stack.7.iz, align 4), (load 8 from %stack.5.j, align 4), (load 8 from %stack.6.k, align 4), (load 8 from %stack.0.r.addr), (load 8 from %stack.3.rdtime), (load 8 from %stack.2.sizei.addr, align 4), (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.1.u.addr), (load 8 from %stack.8.tm1, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  undef %206.sub_32:gpr64 = MOVi32imm 200
  undef %219.sub_32:gpr64 = MOVi32imm 40
  %221:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

bb.1.for.cond:
; predecessors: %bb.0, %bb.11
  successors: %bb.2(0x7c000000), %bb.12(0x04000000); %bb.2(96.88%), %bb.12(3.12%)

  %12:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri %12:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.12, implicit killed $nzcv
  B %bb.2

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)

bb.3.for.cond1:
; predecessors: %bb.2, %bb.10
  successors: %bb.4(0x7c000000), %bb.11(0x04000000); %bb.4(96.88%), %bb.11(3.12%)

  %190:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.11, implicit killed $nzcv
  B %bb.4

bb.4.for.body3:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

bb.5.for.cond4:
; predecessors: %bb.4, %bb.9
  successors: %bb.6(0x7c000000), %bb.10(0x04000000); %bb.6(96.88%), %bb.10(3.12%)

  %195:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %195:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.10, implicit killed $nzcv
  B %bb.6

bb.6.for.body6:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

bb.7.for.cond7:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

  %200:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %200:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.9, implicit killed $nzcv
  B %bb.8

bb.8.for.body9:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %204:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %207:gpr64 = MADDXrrr %204:gpr64, %206:gpr64, $xzr
  %209:gpr64 = ADDXrr %8:gpr64common, %207:gpr64
  %210:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %211:gpr64 = ADDXrs %210:gpr64, %210:gpr64, 2
  %212:gpr64 = UBFMXri %211:gpr64, 61, 60
  %213:gpr64common = ADDXrr %209:gpr64, %212:gpr64
  %214:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %215:gpr64 = UBFMXri %214:gpr64, 61, 60
  %216:fpr64 = LDRDroX %213:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
  %217:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %222:gpr64common = MADDXrrr %217:gpr64, %219:gpr64, %221:gpr64
  %223:fpr64 = LDRDroX %222:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
  %224:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  %225:gpr64 = ADDXrr %224:gpr64, %207:gpr64
  %226:gpr64common = ADDXrr %225:gpr64, %212:gpr64
  %227:fpr64 = LDRDroX %226:gpr64common, %217:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
  %228:fpr64 = FMULDrr %223:fpr64, %227:fpr64
  %229:fpr64 = FADDDrr %216:fpr64, %228:fpr64
  STRDroX %229:fpr64, %213:gpr64common, %215:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
  %230:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %231:gpr32common = nsw ADDWri %230:gpr32common, 1, 0
  STRWui %231:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  B %bb.7

bb.9.for.inc30:
; predecessors: %bb.7
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %202:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %203:gpr32common = nsw ADDWri %202:gpr32common, 1, 0
  STRWui %203:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  B %bb.5

bb.10.for.inc33:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %197:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %198:gpr32common = nsw ADDWri %197:gpr32common, 1, 0
  STRWui %198:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  B %bb.3

bb.11.for.inc36:
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %192:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %193:gpr32common = nsw ADDWri %192:gpr32common, 1, 0
  STRWui %193:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  B %bb.1

bb.12.for.end38:
; predecessors: %bb.1
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  %14:gpr64common = ADDXri %stack.9.tm2, 0, 0
  $x0 = ADDXri %stack.9.tm2, 0, 0
  $w1 = MOVi32imm 125
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 1, 0, 0, %stack.9.tm2, 0, 0, %stack.4.i, 0, 0, %stack.7.iz, 0, 0, %stack.5.j, 0, 0, %stack.6.k, 0, 0, %stack.0.r.addr, 0, 0, %stack.3.rdtime, 0, 0, %stack.2.sizei.addr, 0, 0, %stack.8.tm1, 0, 0, %stack.9.tm2, 0, 0, %stack.1.u.addr, 0, 0, %stack.9.tm2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.4.i, align 4), (load 8 from %stack.7.iz, align 4), (load 8 from %stack.5.j, align 4), (load 8 from %stack.6.k, align 4), (load 8 from %stack.0.r.addr), (load 8 from %stack.3.rdtime), (load 8 from %stack.2.sizei.addr, align 4), (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.1.u.addr), (load 8 from %stack.9.tm2, align 16)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  undef %163.sub_32:gpr64 = MOVi32imm 200
  undef %178.sub_32:gpr64 = MOVi32imm 40
  %182:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

bb.13.for.cond40:
; predecessors: %bb.12, %bb.23
  successors: %bb.14(0x7c000000), %bb.24(0x04000000); %bb.14(96.88%), %bb.24(3.12%)

  %18:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri %18:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.24, implicit killed $nzcv
  B %bb.14

bb.14.for.body42:
; predecessors: %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)

bb.15.for.cond43:
; predecessors: %bb.14, %bb.22
  successors: %bb.16(0x7c000000), %bb.23(0x04000000); %bb.16(96.88%), %bb.23(3.12%)

  %147:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %147:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.23, implicit killed $nzcv
  B %bb.16

bb.16.for.body45:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

bb.17.for.cond46:
; predecessors: %bb.16, %bb.21
  successors: %bb.18(0x7c000000), %bb.22(0x04000000); %bb.18(96.88%), %bb.22(3.12%)

  %152:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %152:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.22, implicit killed $nzcv
  B %bb.18

bb.18.for.body48:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

bb.19.for.cond49:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

  %157:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %157:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.21, implicit killed $nzcv
  B %bb.20

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %161:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %164:gpr64 = MADDXrrr %161:gpr64, %163:gpr64, $xzr
  %166:gpr64 = ADDXrr %14:gpr64common, %164:gpr64
  %167:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
  %169:gpr64 = UBFMXri %168:gpr64, 61, 60
  %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
  %171:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %172:gpr64 = UBFMXri %171:gpr64, 61, 60
  %173:fpr64 = LDRDroX %170:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
  %174:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  %175:gpr64 = ADDXrr %174:gpr64, %164:gpr64
  %176:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %180:gpr64common = MADDXrrr %176:gpr64, %178:gpr64, %175:gpr64
  %181:fpr64 = LDRDroX %180:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
  %183:gpr64common = ADDXrr %182:gpr64, %169:gpr64
  %184:fpr64 = LDRDroX %183:gpr64common, %176:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
  %185:fpr64 = FMULDrr %181:fpr64, %184:fpr64
  %186:fpr64 = FADDDrr %173:fpr64, %185:fpr64
  STRDroX %186:fpr64, %170:gpr64common, %172:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
  %187:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %188:gpr32common = nsw ADDWri %187:gpr32common, 1, 0
  STRWui %188:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  B %bb.19

bb.21.for.inc79:
; predecessors: %bb.19
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %159:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
  STRWui %160:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  B %bb.17

bb.22.for.inc82:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %154:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0
  STRWui %155:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  B %bb.15

bb.23.for.inc85:
; predecessors: %bb.15
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %149:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %150:gpr32common = nsw ADDWri %149:gpr32common, 1, 0
  STRWui %150:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  B %bb.13

bb.24.for.end87:
; predecessors: %bb.13
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %20:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  $x0 = COPY %20:gpr64
  $w1 = MOVi32imm 125
  $d0 = FMOVD0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 2, 0, 0, %stack.4.i, 0, 0, %stack.7.iz, 0, 0, %stack.5.j, 0, 0, %stack.6.k, 0, 0, %stack.0.r.addr, 0, 0, %stack.3.rdtime, 0, 0, %stack.2.sizei.addr, 0, 0, %stack.8.tm1, 0, 0, %stack.9.tm2, 0, 0, %stack.1.u.addr, 0, %20:gpr64, %20:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.i, align 4), (load 8 from %stack.7.iz, align 4), (load 8 from %stack.5.j, align 4), (load 8 from %stack.6.k, align 4), (load 8 from %stack.0.r.addr), (load 8 from %stack.3.rdtime), (load 8 from %stack.2.sizei.addr, align 4), (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.1.u.addr)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  undef %120.sub_32:gpr64 = MOVi32imm 200
  undef %137.sub_32:gpr64 = MOVi32imm 40
  %139:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

bb.25.for.cond88:
; predecessors: %bb.24, %bb.35
  successors: %bb.26(0x7c000000), %bb.36(0x04000000); %bb.26(96.88%), %bb.36(3.12%)

  %24:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %24:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.36, implicit killed $nzcv
  B %bb.26

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)

bb.27.for.cond91:
; predecessors: %bb.26, %bb.34
  successors: %bb.28(0x7c000000), %bb.35(0x04000000); %bb.28(96.88%), %bb.35(3.12%)

  %103:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri %103:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.35, implicit killed $nzcv
  B %bb.28

bb.28.for.body93:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

bb.29.for.cond94:
; predecessors: %bb.28, %bb.33
  successors: %bb.30(0x7c000000), %bb.34(0x04000000); %bb.30(96.88%), %bb.34(3.12%)

  %108:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %108:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.34, implicit killed $nzcv
  B %bb.30

bb.30.for.body96:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

bb.31.for.cond97:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

  %113:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %113:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit killed $nzcv
  B %bb.32

bb.32.for.body99:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)

  %117:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  %118:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %122:gpr64 = MADDXrrr %118:gpr64, %120:gpr64, %117:gpr64
  %123:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %124:gpr64 = ADDXrs %123:gpr64, %123:gpr64, 2
  %125:gpr64 = UBFMXri %124:gpr64, 61, 60
  %126:gpr64common = ADDXrr %122:gpr64, %125:gpr64
  %127:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %128:gpr64 = UBFMXri %127:gpr64, 61, 60
  %129:fpr64 = LDRDroX %126:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
  %130:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  %131:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %133:gpr64 = MADDXrrr %131:gpr64, %120:gpr64, %130:gpr64
  %134:gpr64common = ADDXrr %133:gpr64, %125:gpr64
  %135:fpr64 = LDRDroX %134:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
  %140:gpr64common = MADDXrrr %118:gpr64, %137:gpr64, %139:gpr64
  %141:fpr64 = LDRDroX %140:gpr64common, %131:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
  %142:fpr64 = FMULDrr %135:fpr64, %141:fpr64
  %143:fpr64 = FADDDrr %129:fpr64, %142:fpr64
  STRDroX %143:fpr64, %126:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
  %144:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0
  STRWui %145:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  B %bb.31

bb.33.for.inc127:
; predecessors: %bb.31
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %115:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %116:gpr32common = nsw ADDWri %115:gpr32common, 1, 0
  STRWui %116:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  B %bb.29

bb.34.for.inc130:
; predecessors: %bb.29
  successors: %bb.27(0x80000000); %bb.27(100.00%)

  %110:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0
  STRWui %111:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  B %bb.27

bb.35.for.inc133:
; predecessors: %bb.27
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %105:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %106:gpr32common = nsw ADDWri %105:gpr32common, 1, 0
  STRWui %106:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  B %bb.25

bb.36.for.end135:
; predecessors: %bb.25
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  undef %41.sub_32:gpr64 = MOVi32imm 200
  %43:gpr64common = ADDXri %stack.8.tm1, 0, 0
  undef %54.sub_32:gpr64 = MOVi32imm 1000
  %56:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
  %62:gpr64common = ADDXri %stack.9.tm2, 0, 0
  %66:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
  %77:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
  %84:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %85:fpr64 = LDRDui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  %87:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s

bb.37.for.cond136:
; predecessors: %bb.36, %bb.44
  successors: %bb.38(0x7c000000), %bb.45(0x04000000); %bb.38(96.88%), %bb.45(3.12%)

  %27:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri %27:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.45, implicit killed $nzcv
  B %bb.38

bb.38.for.body138:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

bb.39.for.cond139:
; predecessors: %bb.38, %bb.43
  successors: %bb.40(0x7c000000), %bb.44(0x04000000); %bb.40(96.88%), %bb.44(3.12%)

  %30:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri %30:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit killed $nzcv
  B %bb.40

bb.40.for.body141:
; predecessors: %bb.39
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

bb.41.for.cond142:
; predecessors: %bb.40, %bb.42
  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)

  %35:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri %35:gpr32common, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.43, implicit killed $nzcv
  B %bb.42

bb.42.for.body144:
; predecessors: %bb.41
  successors: %bb.41(0x80000000); %bb.41(100.00%)

  %39:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %42:gpr64 = MADDXrrr %39:gpr64, %41:gpr64, $xzr
  %44:gpr64 = ADDXrr %43:gpr64common, %42:gpr64
  %45:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %46:gpr64 = ADDXrs %45:gpr64, %45:gpr64, 2
  %47:gpr64 = UBFMXri %46:gpr64, 61, 60
  %48:gpr64common = ADDXrr %44:gpr64, %47:gpr64
  %49:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %50:gpr64 = UBFMXri %49:gpr64, 61, 60
  %51:fpr64 = LDRDroX %48:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
  %52:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
  %55:gpr64 = MADDXrrr %52:gpr64, %54:gpr64, $xzr
  %57:gpr64 = ADDXrr %56:gpr64, %55:gpr64
  %58:gpr64 = ADDXrr %57:gpr64, %42:gpr64
  %59:gpr64common = ADDXrr %58:gpr64, %47:gpr64
  %60:fpr64 = LDRDroX %59:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
  %61:fpr64 = FMULDrr %51:fpr64, %60:fpr64
  %63:gpr64 = ADDXrr %62:gpr64common, %42:gpr64
  %64:gpr64common = ADDXrr %63:gpr64, %47:gpr64
  %65:fpr64 = LDRDroX %64:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
  %67:gpr64 = ADDXrr %66:gpr64, %55:gpr64
  %68:gpr64 = ADDXrr %67:gpr64, %42:gpr64
  %69:gpr64common = ADDXrr %68:gpr64, %47:gpr64
  %70:fpr64 = LDRDroX %69:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
  %71:fpr64 = FMULDrr %65:fpr64, %70:fpr64
  %72:fpr64 = FADDDrr %61:fpr64, %71:fpr64
  %73:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  %74:gpr64 = ADDXrr %73:gpr64, %42:gpr64
  %75:gpr64common = ADDXrr %74:gpr64, %47:gpr64
  %76:fpr64 = LDRDroX %75:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
  %78:gpr64 = ADDXrr %77:gpr64, %55:gpr64
  %79:gpr64 = ADDXrr %78:gpr64, %42:gpr64
  %80:gpr64common = ADDXrr %79:gpr64, %47:gpr64
  %81:fpr64 = LDRDroX %80:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
  %82:fpr64 = FMULDrr %76:fpr64, %81:fpr64
  %83:fpr64 = FADDDrr %72:fpr64, %82:fpr64
  %86:fpr64 = FMULDrr %83:fpr64, %85:fpr64
  %88:gpr64 = ADDXrr %87:gpr64, %55:gpr64
  %89:gpr64 = ADDXrr %88:gpr64, %42:gpr64
  %90:gpr64common = ADDXrr %89:gpr64, %47:gpr64
  %91:fpr64 = LDRDroX %90:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  %92:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
  %93:fpr64 = FMULDrr %91:fpr64, %92:fpr64
  %94:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  %95:gpr64 = ADDXrr %94:gpr64, %42:gpr64
  %96:gpr64common = ADDXrr %95:gpr64, %47:gpr64
  %97:fpr64 = LDRDroX %96:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
  %98:fpr64 = FMULDrr %93:fpr64, %97:fpr64
  %99:fpr64 = FADDDrr %86:fpr64, %98:fpr64
  STRDroX %99:fpr64, %75:gpr64common, %50:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
  %100:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0
  STRWui %101:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  B %bb.41

bb.43.for.inc219:
; predecessors: %bb.41
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %37:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0
  STRWui %38:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  B %bb.39

bb.44.for.inc222:
; predecessors: %bb.39
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  %32:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0
  STRWui %33:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  B %bb.37

bb.45.for.end224:
; predecessors: %bb.37

  RET_ReallyLR

# End machine code for function laplacian.

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %206.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   undef %219.sub_32:gpr64 = MOVi32imm 40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %221:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %221:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) undef %219.sub_32:gpr64 = MOVi32imm 40
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %206.sub_32:gpr64 = MOVi32imm 200
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
SU(1):   undef %206.sub_32:gpr64 = MOVi32imm 200
SU(2):   undef %219.sub_32:gpr64 = MOVi32imm 40
SU(3):   %221:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: %8:gpr64common = ADDXri %stack.8.tm1, 0, 0
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %8:gpr64common = ADDXri %stack.8.tm1, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $x0 = ADDXri %stack.8.tm1, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $w1 = MOVi32imm 125
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %8:gpr64common = ADDXri %stack.8.tm1, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = MOVi32imm 125
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $d0 = FMOVD0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = ADDXri %stack.8.tm1, 0, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(1):   $x0 = ADDXri %stack.8.tm1, 0, 0
SU(3):   $d0 = FMOVD0
SU(2):   $w1 = MOVi32imm 125
SU(0):   %8:gpr64common = ADDXri %stack.8.tm1, 0, 0

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: %2:gpr32 = COPY $w2
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: W0 W1 W2 
Live Out: 
Live Thru: 
Top Pressure:
GPR32=3
Bottom Pressure:

Excess PSets: 
SU(0):   %2:gpr32 = COPY $w2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %0:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%2
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %3:gpr64temp = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Data Latency=1 Reg=%3
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(7):   %4:fpr64 = LDRDui %3:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=%3
  Successors:
    SU(10): Data Latency=4 Reg=%4
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %5:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(9): Data Latency=1 Reg=%5
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(9):   %6:fpr64 = LDRDui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(8): Data Latency=1 Reg=%5
  Successors:
    SU(10): Data Latency=4 Reg=%6
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %7:fpr64 = FDIVDrr %6:fpr64, %4:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=%6
    SU(7): Data Latency=4 Reg=%4
  Successors:
    SU(11): Data Latency=1 Reg=%7
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   STRDui %7:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%7
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 8 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %2:gpr32 = COPY $w2
Top Pressure:
GPR32=3
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 8 1 2 6 5 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %1:gpr64 = COPY $x1
Top Pressure:
GPR32=3
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 8 5 2 6 4 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(5) REG-MAX                            
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %0:gpr64 = COPY $x0
Top Pressure:
GPR32=3
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 8 5 4 6 3 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(5) REG-MAX                            
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) STRDui %7:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %7
  UpdateRegP: SU(11) STRDui %7:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 10 
Queue TopQ.P: 
Queue TopQ.A: 8 5 4 6 3 
BotQ.A RemLatency SU(10) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %7:fpr64 = FDIVDrr %6:fpr64, %4:fpr64
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %6
  UpdateRegP: SU(10) %7:fpr64 = FDIVDrr %6:fpr64, %4:fpr64
              to 
  LiveReg: %4
  UpdateRegP: SU(10) %7:fpr64 = FDIVDrr %6:fpr64, %4:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 7 
Queue BotQ.A: 3 5 4 
Queue TopQ.P: 
Queue TopQ.A: 8 5 4 6 3 
BotQ.A RemLatency SU(9) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %2
  UpdateRegP: SU(5) STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
              to 
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 7 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 8 3 4 6 
BotQ.A RemLatency SU(9) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %1
  UpdateRegP: SU(4) STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 7 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %0
  UpdateRegP: SU(3) STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
              to 
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 
Queue TopQ.P: 
Queue TopQ.A: 8 6 
BotQ.A RemLatency SU(9) 1c
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(8) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %6:fpr64 = LDRDui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %5
  UpdateRegP: SU(9) %6:fpr64 = LDRDui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 8 
Queue TopQ.P: 
Queue TopQ.A: 8 6 
BotQ.A RemLatency SU(7) 1c
  BotQ.A RemainingLatency 1 + 6c > CritPath 6
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(8) REG-MAX                            
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(8) %5:gpr64temp = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @6c
  BotQ.A BotLatency SU(8) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %4:fpr64 = LDRDui %3:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
Bottom Pressure:
GPR64temp=1
GPR32=4
  LiveReg: %3
  UpdateRegP: SU(7) %4:fpr64 = LDRDui %3:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %3:gpr64temp = ADRP target-flags(aarch64-page) @dtime
Bottom Pressure:
GPR32=3
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %2:gpr32 = COPY $w2
SU(1):   %1:gpr64 = COPY $x1
SU(2):   %0:gpr64 = COPY $x0
SU(6):   %3:gpr64temp = ADRP target-flags(aarch64-page) @dtime
SU(7):   %4:fpr64 = LDRDui %3:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(8):   %5:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(9):   %6:fpr64 = LDRDui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(3):   STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
SU(4):   STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
SU(5):   STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
SU(10):   %7:fpr64 = FDIVDrr %6:fpr64, %4:fpr64
SU(11):   STRDui %7:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)

********** MI Scheduling **********
laplacian:%bb.1 for.cond
  From: %12:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.12, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %12:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%12
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %12:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.12, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %12:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %12:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri %12:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.3 for.cond1
  From: %190:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.11, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %190:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%190
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.11, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %190:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %190:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.5 for.cond4
  From: %195:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.10, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %195:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%195
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %195:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%195
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.10, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %195:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %195:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %195:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %195:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.7 for.cond7
  From: %200:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.9, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %200:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%200
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %200:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%200
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.9, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %200:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %200:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %200:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %200:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.8 for.body9
  From: %204:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.7
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=10
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %219 %221 %8 %206 
Live Out: %219 %221 %8 %206 
Live Thru: GPR32=4
  LiveReg: %219
  UpdateRegP: SU(11) %222:gpr64common = MADDXrrr %217:gpr64, %219:gpr64, %221:gpr64
              to GPR32 1
  LiveReg: %221
  UpdateRegP: SU(11) %222:gpr64common = MADDXrrr %217:gpr64, %219:gpr64, %221:gpr64
              to 
  LiveReg: %8
  UpdateRegP: SU(2) %209:gpr64 = ADDXrr %8:gpr64common, %207:gpr64
              to 
  LiveReg: %206
  UpdateRegP: SU(1) %207:gpr64 = MADDXrrr %204:gpr64, %206:gpr64, $xzr
              to 
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
Cluster ld/st SU(7) - SU(20)
  Copy Succ SU(8)
  Copy Succ SU(22)
SU(0):   %204:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%204
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %207:gpr64 = MADDXrrr %204:gpr64, %206:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%204
  Successors:
    SU(14): Data Latency=1 Reg=%207
    SU(2): Data Latency=1 Reg=%207
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %209:gpr64 = ADDXrr %8:gpr64common, %207:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%207
  Successors:
    SU(6): Data Latency=1 Reg=%209
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %210:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Data Latency=4 Reg=%210
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %211:gpr64 = ADDXrs %210:gpr64, %210:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(3): Data Latency=4 Reg=%210
  Successors:
    SU(5): Data Latency=1 Reg=%211
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %212:gpr64 = UBFMXri %211:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(4): Data Latency=1 Reg=%211
  Successors:
    SU(15): Data Latency=1 Reg=%212
    SU(6): Data Latency=1 Reg=%212
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %213:gpr64common = ADDXrr %209:gpr64, %212:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%212
    SU(2): Data Latency=1 Reg=%209
  Successors:
    SU(19): Data Latency=1 Reg=%213
    SU(9): Data Latency=1 Reg=%213
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %214:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(8): Data Latency=4 Reg=%214
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %215:gpr64 = UBFMXri %214:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(7): Data Latency=4 Reg=%214
    SU(20): Ord  Latency=0 Artificial
  Successors:
    SU(19): Data Latency=1 Reg=%215
    SU(12): Data Latency=1 Reg=%215
    SU(9): Data Latency=1 Reg=%215
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %216:fpr64 = LDRDroX %213:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=%213
    SU(8): Data Latency=1 Reg=%215
  Successors:
    SU(18): Data Latency=4 Reg=%216
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %217:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(16): Data Latency=4 Reg=%217
    SU(11): Data Latency=4 Reg=%217
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %222:gpr64common = MADDXrrr %217:gpr64, %219:gpr64, %221:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(10): Data Latency=4 Reg=%217
  Successors:
    SU(12): Data Latency=1 Reg=%222
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %223:fpr64 = LDRDroX %222:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(11): Data Latency=1 Reg=%222
    SU(8): Data Latency=1 Reg=%215
  Successors:
    SU(17): Data Latency=4 Reg=%223
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(13):   %224:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(14): Data Latency=4 Reg=%224
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %225:gpr64 = ADDXrr %224:gpr64, %207:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%207
    SU(13): Data Latency=4 Reg=%224
  Successors:
    SU(15): Data Latency=1 Reg=%225
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %226:gpr64common = ADDXrr %225:gpr64, %212:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(14): Data Latency=1 Reg=%225
    SU(5): Data Latency=1 Reg=%212
  Successors:
    SU(16): Data Latency=1 Reg=%226
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %227:fpr64 = LDRDroX %226:gpr64common, %217:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(15): Data Latency=1 Reg=%226
    SU(10): Data Latency=4 Reg=%217
  Successors:
    SU(17): Data Latency=4 Reg=%227
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(17):   %228:fpr64 = FMULDrr %223:fpr64, %227:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(16): Data Latency=4 Reg=%227
    SU(12): Data Latency=4 Reg=%223
  Successors:
    SU(18): Data Latency=1 Reg=%228
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   %229:fpr64 = FADDDrr %216:fpr64, %228:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(17): Data Latency=1 Reg=%228
    SU(9): Data Latency=4 Reg=%216
  Successors:
    SU(19): Data Latency=1 Reg=%229
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(19):   STRDroX %229:fpr64, %213:gpr64common, %215:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%229
    SU(16): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%215
    SU(6): Data Latency=1 Reg=%213
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(20):   %230:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(7): Ord  Latency=0 Cluster
  Successors:
    SU(21): Data Latency=4 Reg=%230
    SU(22): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %231:gpr32common = nsw ADDWri %230:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(20): Data Latency=4 Reg=%230
  Successors:
    SU(22): Data Latency=1 Reg=%231
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   STRWui %231:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%231
    SU(20): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
Picking from Bot:
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) STRWui %231:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=5
  LiveReg: %231
  UpdateRegP: SU(22) STRWui %231:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(19) 13c
  BotQ.A RemainingLatency 13 + 1c > CritPath 13
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) STRDroX %229:fpr64, %213:gpr64common, %215:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %229
  UpdateRegP: SU(19) STRDroX %229:fpr64, %213:gpr64common, %215:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
              to GPR32 2
  LiveReg: %213
  UpdateRegP: SU(9) %216:fpr64 = LDRDroX %213:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %229:fpr64, %213:gpr64common, %215:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
              to GPR32 1
  LiveReg: %215
  UpdateRegP: SU(9) %216:fpr64 = LDRDroX %213:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(12) %223:fpr64 = LDRDroX %222:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %229:fpr64, %213:gpr64common, %215:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
              to 
  Ready @1c
  BotQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(18) 12c
  BotQ.A RemainingLatency 12 + 2c > CritPath 13
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(18) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %229:fpr64 = FADDDrr %216:fpr64, %228:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %216
  UpdateRegP: SU(18) %229:fpr64 = FADDDrr %216:fpr64, %228:fpr64
              to 
  LiveReg: %228
  UpdateRegP: SU(18) %229:fpr64 = FADDDrr %216:fpr64, %228:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 21 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(17) 11c
BotQ.A RemLatency SU(9) 7c
  BotQ.A RemainingLatency 11 + 3c > CritPath 13
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(17) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) %228:fpr64 = FMULDrr %223:fpr64, %227:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %223
  UpdateRegP: SU(17) %228:fpr64 = FMULDrr %223:fpr64, %227:fpr64
              to 
  LiveReg: %227
  UpdateRegP: SU(17) %228:fpr64 = FMULDrr %223:fpr64, %227:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 16 12 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %231:gpr32common = nsw ADDWri %230:gpr32common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %230
  UpdateRegP: SU(21) %231:gpr32common = nsw ADDWri %230:gpr32common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 12 16 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %216:fpr64 = LDRDroX %213:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 16 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(16) 7c
  BotQ.A RemainingLatency 7 + 7c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(16) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(16) %227:fpr64 = LDRDroX %226:gpr64common, %217:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %226
  UpdateRegP: SU(16) %227:fpr64 = LDRDroX %226:gpr64common, %217:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %217
  UpdateRegP: SU(11) %222:gpr64common = MADDXrrr %217:gpr64, %219:gpr64, %221:gpr64
              to GPR32 -1
  UpdateRegP: SU(16) %227:fpr64 = LDRDroX %226:gpr64common, %217:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(16) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(6) 6c
  BotQ.A RemainingLatency 6 + 8c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) %226:gpr64common = ADDXrr %225:gpr64, %212:gpr64
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %225
  UpdateRegP: SU(15) %226:gpr64common = ADDXrr %225:gpr64, %212:gpr64
              to 
  LiveReg: %212
  UpdateRegP: SU(6) %213:gpr64common = ADDXrr %209:gpr64, %212:gpr64
              to 
  UpdateRegP: SU(15) %226:gpr64common = ADDXrr %225:gpr64, %212:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(15) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(6) 6c
  BotQ.A RemainingLatency 6 + 9c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %213:gpr64common = ADDXrr %209:gpr64, %212:gpr64
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %209
  UpdateRegP: SU(6) %213:gpr64common = ADDXrr %209:gpr64, %212:gpr64
              to GPR32 -1
  Ready @9c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 12 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(14) 5c
  BotQ.A RemainingLatency 5 + 10c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(5) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %212:gpr64 = UBFMXri %211:gpr64, 61, 60
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %211
  UpdateRegP: SU(5) %212:gpr64 = UBFMXri %211:gpr64, 61, 60
              to GPR32 -1
  Ready @10c
  BotQ.A BotLatency SU(5) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 12 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(14) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(2) %209:gpr64 = ADDXrr %8:gpr64common, %207:gpr64
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %207
  UpdateRegP: SU(2) %209:gpr64 = ADDXrr %8:gpr64common, %207:gpr64
              to GPR32 -1
  UpdateRegP: SU(14) %225:gpr64 = ADDXrr %224:gpr64, %207:gpr64
              to 
  Ready @11c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 12 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(14) 5c
  BotQ.A RemainingLatency 5 + 12c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(14) %225:gpr64 = ADDXrr %224:gpr64, %207:gpr64
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %224
  UpdateRegP: SU(14) %225:gpr64 = ADDXrr %224:gpr64, %207:gpr64
              to GPR32 -1
  Ready @12c
  BotQ.A TopLatency SU(14) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 4 12 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
BotQ.A RemLatency SU(12) 5c
  BotQ.A RemainingLatency 5 + 13c > CritPath 13
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %211:gpr64 = ADDXrs %210:gpr64, %210:gpr64, 2
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %210
  UpdateRegP: SU(4) %211:gpr64 = ADDXrs %210:gpr64, %210:gpr64, 2
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(4) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 3 
Queue BotQ.A: 1 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
  BotQ.A RemainingLatency 0 + 14c > CritPath 13
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(1) %207:gpr64 = MADDXrrr %204:gpr64, %206:gpr64, $xzr
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %204
  UpdateRegP: SU(1) %207:gpr64 = MADDXrrr %204:gpr64, %206:gpr64, $xzr
              to GPR32 -1
  Ready @14c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 14
  Executed: 15c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 3 0 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %223:fpr64 = LDRDroX %222:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
Bottom Pressure:
GPR32=11
  LiveReg: %222
  UpdateRegP: SU(12) %223:fpr64 = LDRDroX %222:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @15c
  BotQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 15
  Executed: 16c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 11 8 13 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
  BotQ.A RemainingLatency 0 + 16c > CritPath 13
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %222:gpr64common = MADDXrrr %217:gpr64, %219:gpr64, %221:gpr64
Bottom Pressure:
GPR32=10
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 16
  Executed: 17c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 10 
Queue BotQ.A: 13 8 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
  BotQ.A RemainingLatency 0 + 17c > CritPath 13
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(8) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %215:gpr64 = UBFMXri %214:gpr64, 61, 60
Bottom Pressure:
GPR32=10
  LiveReg: %214
  UpdateRegP: SU(8) %215:gpr64 = UBFMXri %214:gpr64, 61, 60
              to GPR32 -1
  Ready @17c
  BotQ.A TopLatency SU(8) 4c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 17
  Executed: 18c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 10 
Queue BotQ.A: 13 3 20 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 20 
  BotQ.A RemainingLatency 0 + 18c > CritPath 13
Picking from Bot:
  Cand SU(13) ORDER                              
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %230:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=9
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 18
  Executed: 19c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 10 
Queue BotQ.A: 13 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 13 
  BotQ.A RemainingLatency 0 + 19c > CritPath 13
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) %224:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GPR32=8
  Ready @19c
  BotQ.A BotLatency SU(13) 12c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 19
  Executed: 20c
  Critical: 19c, 19 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 0 3 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 
  BotQ.A RemainingLatency 0 + 20c > CritPath 13
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %217:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=7
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 20
  Executed: 21c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 
  BotQ.A RemainingLatency 0 + 21c > CritPath 13
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(7) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) %214:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=6
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 21
  Executed: 22c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 22c > CritPath 13
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %210:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=5
  Ready @22c
  BotQ.A BotLatency SU(3) 13c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 22
  Executed: 23c
  Critical: 22c, 22 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %204:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
Bottom Pressure:
GPR32=4
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 23
  Executed: 24c
  Critical: 23c, 23 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %204:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(3):   %210:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(7):   %214:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(10):   %217:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(13):   %224:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
SU(20):   %230:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(8):   %215:gpr64 = UBFMXri %214:gpr64, 61, 60
SU(11):   %222:gpr64common = MADDXrrr %217:gpr64, %219:gpr64, %221:gpr64
SU(12):   %223:fpr64 = LDRDroX %222:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
SU(1):   %207:gpr64 = MADDXrrr %204:gpr64, %206:gpr64, $xzr
SU(4):   %211:gpr64 = ADDXrs %210:gpr64, %210:gpr64, 2
SU(14):   %225:gpr64 = ADDXrr %224:gpr64, %207:gpr64
SU(2):   %209:gpr64 = ADDXrr %8:gpr64common, %207:gpr64
SU(5):   %212:gpr64 = UBFMXri %211:gpr64, 61, 60
SU(6):   %213:gpr64common = ADDXrr %209:gpr64, %212:gpr64
SU(15):   %226:gpr64common = ADDXrr %225:gpr64, %212:gpr64
SU(16):   %227:fpr64 = LDRDroX %226:gpr64common, %217:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
SU(9):   %216:fpr64 = LDRDroX %213:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
SU(21):   %231:gpr32common = nsw ADDWri %230:gpr32common, 1, 0
SU(17):   %228:fpr64 = FMULDrr %223:fpr64, %227:fpr64
SU(18):   %229:fpr64 = FADDDrr %216:fpr64, %228:fpr64
SU(19):   STRDroX %229:fpr64, %213:gpr64common, %215:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
SU(22):   STRWui %231:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
laplacian:%bb.9 for.inc30
  From: %202:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %202:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%202
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %203:gpr32common = nsw ADDWri %202:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%202
  Successors:
    SU(2): Data Latency=1 Reg=%203
  Single Issue       : false;
SU(2):   STRWui %203:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%203
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %203:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %203:gpr32common = nsw ADDWri %202:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %202:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %202:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %203:gpr32common = nsw ADDWri %202:gpr32common, 1, 0
SU(2):   STRWui %203:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
laplacian:%bb.10 for.inc33
  From: %197:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.3
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %197:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%197
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %198:gpr32common = nsw ADDWri %197:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%197
  Successors:
    SU(2): Data Latency=1 Reg=%198
  Single Issue       : false;
SU(2):   STRWui %198:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%198
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.3
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %198:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %198:gpr32common = nsw ADDWri %197:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %197:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %197:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %198:gpr32common = nsw ADDWri %197:gpr32common, 1, 0
SU(2):   STRWui %198:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
laplacian:%bb.11 for.inc36
  From: %192:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.1
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %192:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%192
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %193:gpr32common = nsw ADDWri %192:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%192
  Successors:
    SU(2): Data Latency=1 Reg=%193
  Single Issue       : false;
SU(2):   STRWui %193:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%193
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %193:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %193:gpr32common = nsw ADDWri %192:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %192:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %192:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   %193:gpr32common = nsw ADDWri %192:gpr32common, 1, 0
SU(2):   STRWui %193:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.12 for.end38
  From: STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %163.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   undef %178.sub_32:gpr64 = MOVi32imm 40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %182:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %182:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) undef %178.sub_32:gpr64 = MOVi32imm 40
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %163.sub_32:gpr64 = MOVi32imm 200
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
SU(1):   undef %163.sub_32:gpr64 = MOVi32imm 200
SU(2):   undef %178.sub_32:gpr64 = MOVi32imm 40
SU(3):   %182:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

********** MI Scheduling **********
laplacian:%bb.12 for.end38
  From: %14:gpr64common = ADDXri %stack.9.tm2, 0, 0
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %14:gpr64common = ADDXri %stack.9.tm2, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $x0 = ADDXri %stack.9.tm2, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $w1 = MOVi32imm 125
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:gpr64common = ADDXri %stack.9.tm2, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w1 = MOVi32imm 125
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $d0 = FMOVD0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x0 = ADDXri %stack.9.tm2, 0, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(1):   $x0 = ADDXri %stack.9.tm2, 0, 0
SU(3):   $d0 = FMOVD0
SU(2):   $w1 = MOVi32imm 125
SU(0):   %14:gpr64common = ADDXri %stack.9.tm2, 0, 0

********** MI Scheduling **********
laplacian:%bb.13 for.cond40
  From: %18:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.24, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %18:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %18:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.24, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %18:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %18:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %18:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri %18:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.15 for.cond43
  From: %147:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.23, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %147:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%147
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %147:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%147
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.23, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %147:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %147:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %147:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %147:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.17 for.cond46
  From: %152:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.22, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %152:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%152
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %152:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%152
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.22, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %152:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %152:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %152:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %152:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.19 for.cond49
  From: %157:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.21, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %157:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%157
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %157:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%157
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.21, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %157:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %157:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %157:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %157:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.20 for.body51
  From: %161:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.19
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=9
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %182 %178 %14 %163 
Live Out: %182 %178 %14 %163 
Live Thru: GPR32=4
  LiveReg: %182
  UpdateRegP: SU(15) %183:gpr64common = ADDXrr %182:gpr64, %169:gpr64
              to 
  LiveReg: %178
  UpdateRegP: SU(13) %180:gpr64common = MADDXrrr %176:gpr64, %178:gpr64, %175:gpr64
              to GPR32 1
  LiveReg: %14
  UpdateRegP: SU(2) %166:gpr64 = ADDXrr %14:gpr64common, %164:gpr64
              to 
  LiveReg: %163
  UpdateRegP: SU(1) %164:gpr64 = MADDXrrr %161:gpr64, %163:gpr64, $xzr
              to 
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
Cluster ld/st SU(7) - SU(20)
  Copy Succ SU(8)
  Copy Succ SU(22)
SU(0):   %161:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(1): Data Latency=4 Reg=%161
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %164:gpr64 = MADDXrrr %161:gpr64, %163:gpr64, $xzr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Data Latency=4 Reg=%161
  Successors:
    SU(11): Data Latency=1 Reg=%164
    SU(2): Data Latency=1 Reg=%164
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %166:gpr64 = ADDXrr %14:gpr64common, %164:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(1): Data Latency=1 Reg=%164
  Successors:
    SU(6): Data Latency=1 Reg=%166
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %167:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Data Latency=4 Reg=%167
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(3): Data Latency=4 Reg=%167
  Successors:
    SU(5): Data Latency=1 Reg=%168
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %169:gpr64 = UBFMXri %168:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(4): Data Latency=1 Reg=%168
  Successors:
    SU(15): Data Latency=1 Reg=%169
    SU(6): Data Latency=1 Reg=%169
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%169
    SU(2): Data Latency=1 Reg=%166
  Successors:
    SU(19): Data Latency=1 Reg=%170
    SU(9): Data Latency=1 Reg=%170
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %171:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(8): Data Latency=4 Reg=%171
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %172:gpr64 = UBFMXri %171:gpr64, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(7): Data Latency=4 Reg=%171
    SU(20): Ord  Latency=0 Artificial
  Successors:
    SU(19): Data Latency=1 Reg=%172
    SU(14): Data Latency=1 Reg=%172
    SU(9): Data Latency=1 Reg=%172
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %173:fpr64 = LDRDroX %170:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1 Reg=%170
    SU(8): Data Latency=1 Reg=%172
  Successors:
    SU(18): Data Latency=4 Reg=%173
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %174:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(11): Data Latency=4 Reg=%174
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %175:gpr64 = ADDXrr %174:gpr64, %164:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(1): Data Latency=1 Reg=%164
    SU(10): Data Latency=4 Reg=%174
  Successors:
    SU(13): Data Latency=1 Reg=%175
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %176:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(16): Data Latency=4 Reg=%176
    SU(13): Data Latency=4 Reg=%176
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   %180:gpr64common = MADDXrrr %176:gpr64, %178:gpr64, %175:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=%175
    SU(12): Data Latency=4 Reg=%176
  Successors:
    SU(14): Data Latency=1 Reg=%180
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %181:fpr64 = LDRDroX %180:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(13): Data Latency=1 Reg=%180
    SU(8): Data Latency=1 Reg=%172
  Successors:
    SU(17): Data Latency=4 Reg=%181
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(15):   %183:gpr64common = ADDXrr %182:gpr64, %169:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(5): Data Latency=1 Reg=%169
  Successors:
    SU(16): Data Latency=1 Reg=%183
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %184:fpr64 = LDRDroX %183:gpr64common, %176:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(15): Data Latency=1 Reg=%183
    SU(12): Data Latency=4 Reg=%176
  Successors:
    SU(17): Data Latency=4 Reg=%184
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(17):   %185:fpr64 = FMULDrr %181:fpr64, %184:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(16): Data Latency=4 Reg=%184
    SU(14): Data Latency=4 Reg=%181
  Successors:
    SU(18): Data Latency=1 Reg=%185
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   %186:fpr64 = FADDDrr %173:fpr64, %185:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(17): Data Latency=1 Reg=%185
    SU(9): Data Latency=4 Reg=%173
  Successors:
    SU(19): Data Latency=1 Reg=%186
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(19):   STRDroX %186:fpr64, %170:gpr64common, %172:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=%186
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%172
    SU(6): Data Latency=1 Reg=%170
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(20):   %187:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Predecessors:
    SU(7): Ord  Latency=0 Cluster
  Successors:
    SU(21): Data Latency=4 Reg=%187
    SU(22): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %188:gpr32common = nsw ADDWri %187:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(20): Data Latency=4 Reg=%187
  Successors:
    SU(22): Data Latency=1 Reg=%188
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   STRWui %188:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%188
    SU(20): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 13
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
Picking from Bot:
  Cand SU(22) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(22) STRWui %188:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=5
  LiveReg: %188
  UpdateRegP: SU(22) STRWui %188:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(19) 13c
  BotQ.A RemainingLatency 13 + 1c > CritPath 13
Picking from Bot:
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) STRDroX %186:fpr64, %170:gpr64common, %172:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %186
  UpdateRegP: SU(19) STRDroX %186:fpr64, %170:gpr64common, %172:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
              to GPR32 2
  LiveReg: %170
  UpdateRegP: SU(9) %173:fpr64 = LDRDroX %170:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %186:fpr64, %170:gpr64common, %172:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
              to GPR32 1
  LiveReg: %172
  UpdateRegP: SU(9) %173:fpr64 = LDRDroX %170:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(14) %181:fpr64 = LDRDroX %180:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %186:fpr64, %170:gpr64common, %172:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
              to 
  Ready @1c
  BotQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(18) 12c
  BotQ.A RemainingLatency 12 + 2c > CritPath 13
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(18) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %186:fpr64 = FADDDrr %173:fpr64, %185:fpr64
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %173
  UpdateRegP: SU(18) %186:fpr64 = FADDDrr %173:fpr64, %185:fpr64
              to 
  LiveReg: %185
  UpdateRegP: SU(18) %186:fpr64 = FADDDrr %173:fpr64, %185:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 21 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(17) 11c
BotQ.A RemLatency SU(9) 7c
  BotQ.A RemainingLatency 11 + 3c > CritPath 13
Picking from Bot:
  Cand SU(21) ORDER                              
  Cand SU(17) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) %185:fpr64 = FMULDrr %181:fpr64, %184:fpr64
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %181
  UpdateRegP: SU(17) %185:fpr64 = FMULDrr %181:fpr64, %184:fpr64
              to 
  LiveReg: %184
  UpdateRegP: SU(17) %185:fpr64 = FMULDrr %181:fpr64, %184:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 16 14 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %188:gpr32common = nsw ADDWri %187:gpr32common, 1, 0
Bottom Pressure:
FPR8=3
GPR32=7
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %187
  UpdateRegP: SU(21) %188:gpr32common = nsw ADDWri %187:gpr32common, 1, 0
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 14 16 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %173:fpr64 = LDRDroX %170:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 16 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 7c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(14) BOT-PATH                  7 cycles 
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %184:fpr64 = LDRDroX %183:gpr64common, %176:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %183
  UpdateRegP: SU(16) %184:fpr64 = LDRDroX %183:gpr64common, %176:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %176
  UpdateRegP: SU(13) %180:gpr64common = MADDXrrr %176:gpr64, %178:gpr64, %175:gpr64
              to 
  UpdateRegP: SU(16) %184:fpr64 = LDRDroX %183:gpr64common, %176:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(16) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 8c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(14) BOT-PATH                  7 cycles 
  Cand SU(15) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %183:gpr64common = ADDXrr %182:gpr64, %169:gpr64
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %169
  UpdateRegP: SU(6) %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
              to 
  UpdateRegP: SU(15) %183:gpr64common = ADDXrr %182:gpr64, %169:gpr64
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(15) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 9c > CritPath 13
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %166
  UpdateRegP: SU(6) %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
              to GPR32 -1
  Ready @9c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 10c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(5) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %169:gpr64 = UBFMXri %168:gpr64, 61, 60
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %168
  UpdateRegP: SU(5) %169:gpr64 = UBFMXri %168:gpr64, 61, 60
              to GPR32 -1
  Ready @10c
  BotQ.A BotLatency SU(5) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 11c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(2) %166:gpr64 = ADDXrr %14:gpr64common, %164:gpr64
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %164
  UpdateRegP: SU(2) %166:gpr64 = ADDXrr %14:gpr64common, %164:gpr64
              to GPR32 -1
  UpdateRegP: SU(11) %175:gpr64 = ADDXrr %174:gpr64, %164:gpr64
              to 
  Ready @11c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 12c > CritPath 13
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %167
  UpdateRegP: SU(4) %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(4) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) %181:fpr64 = LDRDroX %180:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
Bottom Pressure:
GPR32=10
  LiveReg: %180
  UpdateRegP: SU(14) %181:fpr64 = LDRDroX %180:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @13c
  BotQ.A TopLatency SU(14) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 13 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 14c > CritPath 13
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %180:gpr64common = MADDXrrr %176:gpr64, %178:gpr64, %175:gpr64
Bottom Pressure:
GPR32=10
  LiveReg: %175
  UpdateRegP: SU(13) %180:gpr64common = MADDXrrr %176:gpr64, %178:gpr64, %175:gpr64
              to GPR32 -1
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 14
  Executed: 15c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 12 
Queue BotQ.A: 8 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 15c > CritPath 13
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(11) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %175:gpr64 = ADDXrr %174:gpr64, %164:gpr64
Bottom Pressure:
GPR32=10
  LiveReg: %174
  UpdateRegP: SU(11) %175:gpr64 = ADDXrr %174:gpr64, %164:gpr64
              to GPR32 -1
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 15
  Executed: 16c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 12 
Queue BotQ.A: 8 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 16c > CritPath 13
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %172:gpr64 = UBFMXri %171:gpr64, 61, 60
Bottom Pressure:
GPR32=10
  LiveReg: %171
  UpdateRegP: SU(8) %172:gpr64 = UBFMXri %171:gpr64, 61, 60
              to GPR32 -1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 16
  Executed: 17c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 12 7 
Queue BotQ.A: 3 1 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 17c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %164:gpr64 = MADDXrrr %161:gpr64, %163:gpr64, $xzr
Bottom Pressure:
GPR32=10
  LiveReg: %161
  UpdateRegP: SU(1) %164:gpr64 = MADDXrrr %161:gpr64, %163:gpr64, $xzr
              to GPR32 -1
  Ready @17c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 17
  Executed: 18c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 0 7 
Queue BotQ.A: 3 20 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 20 
  BotQ.A RemainingLatency 0 + 18c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(20) %187:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=9
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 18
  Executed: 19c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 0 
Queue BotQ.A: 3 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 12 
  BotQ.A RemainingLatency 0 + 19c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %176:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=8
  Ready @19c
  BotQ.A BotLatency SU(12) 11c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 19
  Executed: 20c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 
  BotQ.A RemainingLatency 0 + 20c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(7) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) %171:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=7
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 20
  Executed: 21c
  Critical: 20c, 20 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 10 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 10 
  BotQ.A RemainingLatency 0 + 21c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %174:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GPR32=6
  Ready @21c
  BotQ.A BotLatency SU(10) 12c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 21
  Executed: 22c
  Critical: 21c, 21 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 22c > CritPath 13
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %167:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=5
  Ready @22c
  BotQ.A BotLatency SU(3) 13c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 22
  Executed: 23c
  Critical: 22c, 22 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %161:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
Bottom Pressure:
GPR32=4
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 23
  Executed: 24c
  Critical: 23c, 23 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %161:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(3):   %167:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(10):   %174:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
SU(7):   %171:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(12):   %176:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(20):   %187:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   %164:gpr64 = MADDXrrr %161:gpr64, %163:gpr64, $xzr
SU(8):   %172:gpr64 = UBFMXri %171:gpr64, 61, 60
SU(11):   %175:gpr64 = ADDXrr %174:gpr64, %164:gpr64
SU(13):   %180:gpr64common = MADDXrrr %176:gpr64, %178:gpr64, %175:gpr64
SU(14):   %181:fpr64 = LDRDroX %180:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
SU(4):   %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
SU(2):   %166:gpr64 = ADDXrr %14:gpr64common, %164:gpr64
SU(5):   %169:gpr64 = UBFMXri %168:gpr64, 61, 60
SU(6):   %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
SU(15):   %183:gpr64common = ADDXrr %182:gpr64, %169:gpr64
SU(16):   %184:fpr64 = LDRDroX %183:gpr64common, %176:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
SU(9):   %173:fpr64 = LDRDroX %170:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
SU(21):   %188:gpr32common = nsw ADDWri %187:gpr32common, 1, 0
SU(17):   %185:fpr64 = FMULDrr %181:fpr64, %184:fpr64
SU(18):   %186:fpr64 = FADDDrr %173:fpr64, %185:fpr64
SU(19):   STRDroX %186:fpr64, %170:gpr64common, %172:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
SU(22):   STRWui %188:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
laplacian:%bb.21 for.inc79
  From: %159:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %159:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%159
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%159
  Successors:
    SU(2): Data Latency=1 Reg=%160
  Single Issue       : false;
SU(2):   STRWui %160:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%160
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %160:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %159:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %159:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
SU(2):   STRWui %160:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
laplacian:%bb.22 for.inc82
  From: %154:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.15
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %154:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%154
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%154
  Successors:
    SU(2): Data Latency=1 Reg=%155
  Single Issue       : false;
SU(2):   STRWui %155:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%155
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %155:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %154:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   %154:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0
SU(2):   STRWui %155:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
laplacian:%bb.23 for.inc85
  From: %149:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %149:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%149
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %150:gpr32common = nsw ADDWri %149:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%149
  Successors:
    SU(2): Data Latency=1 Reg=%150
  Single Issue       : false;
SU(2):   STRWui %150:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%150
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %150:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %150:gpr32common = nsw ADDWri %149:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %149:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %149:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   %150:gpr32common = nsw ADDWri %149:gpr32common, 1, 0
SU(2):   STRWui %150:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.24 for.end87
  From: STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %120.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   undef %137.sub_32:gpr64 = MOVi32imm 40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %139:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %139:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) undef %137.sub_32:gpr64 = MOVi32imm 40
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %120.sub_32:gpr64 = MOVi32imm 200
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
SU(1):   undef %120.sub_32:gpr64 = MOVi32imm 200
SU(2):   undef %137.sub_32:gpr64 = MOVi32imm 40
SU(3):   %139:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

********** MI Scheduling **********
laplacian:%bb.24 for.end87
  From: $x0 = COPY %20:gpr64
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = COPY %20:gpr64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = MOVi32imm 125
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = COPY %20:gpr64
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(1) PHYS-REG                           
Picking from Top:
  Cand SU(2) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = MOVi32imm 125
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = FMOVD0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(2):   $d0 = FMOVD0
SU(1):   $w1 = MOVi32imm 125
SU(0):   $x0 = COPY %20:gpr64

********** MI Scheduling **********
laplacian:%bb.25 for.cond88
  From: %24:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.36, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %24:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.36, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %24:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %24:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %24:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.27 for.cond91
  From: %103:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.35, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %103:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%103
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %103:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%103
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.35, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %103:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %103:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %103:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri %103:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.29 for.cond94
  From: %108:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.34, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %108:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%108
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %108:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%108
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.34, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %108:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %108:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   %108:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %108:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.31 for.cond97
  From: %113:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.33, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %113:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%113
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %113:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%113
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.33, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %113:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %113:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %113:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %113:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.32 for.body99
  From: %117:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
    To: B %bb.31
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=9
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %137 %139 %120 
Live Out: %137 %139 %120 
Live Thru: GPR32=3
  LiveReg: %137
  UpdateRegP: SU(15) %140:gpr64common = MADDXrrr %118:gpr64, %137:gpr64, %139:gpr64
              to GPR32 1
  LiveReg: %139
  UpdateRegP: SU(15) %140:gpr64common = MADDXrrr %118:gpr64, %137:gpr64, %139:gpr64
              to 
  LiveReg: %120
  UpdateRegP: SU(2) %122:gpr64 = MADDXrrr %118:gpr64, %120:gpr64, %117:gpr64
              to GPR32 1
  UpdateRegP: SU(12) %133:gpr64 = MADDXrrr %131:gpr64, %120:gpr64, %130:gpr64
              to GPR32 1
Top Pressure:
GPR32=3
Bottom Pressure:
GPR32=3
Excess PSets: 
SU(0):   %117:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%117
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %118:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(15): Data Latency=4 Reg=%118
    SU(2): Data Latency=4 Reg=%118
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %122:gpr64 = MADDXrrr %118:gpr64, %120:gpr64, %117:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%118
    SU(0): Data Latency=4 Reg=%117
  Successors:
    SU(6): Data Latency=1 Reg=%122
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %123:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(4): Data Latency=4 Reg=%123
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %124:gpr64 = ADDXrs %123:gpr64, %123:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(3): Data Latency=4 Reg=%123
  Successors:
    SU(5): Data Latency=1 Reg=%124
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %125:gpr64 = UBFMXri %124:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(4): Data Latency=1 Reg=%124
  Successors:
    SU(13): Data Latency=1 Reg=%125
    SU(6): Data Latency=1 Reg=%125
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %126:gpr64common = ADDXrr %122:gpr64, %125:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%125
    SU(2): Data Latency=1 Reg=%122
  Successors:
    SU(19): Data Latency=1 Reg=%126
    SU(9): Data Latency=1 Reg=%126
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %127:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(8): Data Latency=4 Reg=%127
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %128:gpr64 = UBFMXri %127:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(7): Data Latency=4 Reg=%127
  Successors:
    SU(19): Data Latency=1 Reg=%128
    SU(14): Data Latency=1 Reg=%128
    SU(9): Data Latency=1 Reg=%128
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %129:fpr64 = LDRDroX %126:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 11
  Predecessors:
    SU(6): Data Latency=1 Reg=%126
    SU(8): Data Latency=1 Reg=%128
  Successors:
    SU(18): Data Latency=4 Reg=%129
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %130:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(12): Data Latency=4 Reg=%130
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %131:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(16): Data Latency=4 Reg=%131
    SU(12): Data Latency=4 Reg=%131
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %133:gpr64 = MADDXrrr %131:gpr64, %120:gpr64, %130:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(11): Data Latency=4 Reg=%131
    SU(10): Data Latency=4 Reg=%130
  Successors:
    SU(13): Data Latency=1 Reg=%133
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   %134:gpr64common = ADDXrr %133:gpr64, %125:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(5): Data Latency=1 Reg=%125
    SU(12): Data Latency=1 Reg=%133
  Successors:
    SU(14): Data Latency=1 Reg=%134
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %135:fpr64 = LDRDroX %134:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(13): Data Latency=1 Reg=%134
    SU(8): Data Latency=1 Reg=%128
  Successors:
    SU(17): Data Latency=4 Reg=%135
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(15):   %140:gpr64common = MADDXrrr %118:gpr64, %137:gpr64, %139:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%118
  Successors:
    SU(16): Data Latency=1 Reg=%140
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %141:fpr64 = LDRDroX %140:gpr64common, %131:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(15): Data Latency=1 Reg=%140
    SU(11): Data Latency=4 Reg=%131
  Successors:
    SU(17): Data Latency=4 Reg=%141
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(17):   %142:fpr64 = FMULDrr %135:fpr64, %141:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 8
  Predecessors:
    SU(14): Data Latency=4 Reg=%135
    SU(16): Data Latency=4 Reg=%141
  Successors:
    SU(18): Data Latency=1 Reg=%142
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   %143:fpr64 = FADDDrr %129:fpr64, %142:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 7
  Predecessors:
    SU(17): Data Latency=1 Reg=%142
    SU(9): Data Latency=4 Reg=%129
  Successors:
    SU(19): Data Latency=1 Reg=%143
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(19):   STRDroX %143:fpr64, %126:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 6
  Predecessors:
    SU(18): Data Latency=1 Reg=%143
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%128
    SU(7): Ord  Latency=0 Memory
    SU(6): Data Latency=1 Reg=%126
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(20):   %144:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(19): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%144
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 1
  Predecessors:
    SU(20): Data Latency=4 Reg=%144
  Successors:
    SU(22): Data Latency=1 Reg=%145
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   STRWui %145:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%145
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 19
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) STRWui %145:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
GPR32=4
  LiveReg: %145
  UpdateRegP: SU(22) STRWui %145:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0
Bottom Pressure:
GPR32=4
  LiveReg: %144
  UpdateRegP: SU(21) %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) %144:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=3
  Ready @5c
  BotQ.A BotLatency SU(20) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Pick Bot ONLY1     
Scheduling SU(19) STRDroX %143:fpr64, %126:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %143
  UpdateRegP: SU(19) STRDroX %143:fpr64, %126:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
              to GPR32 2
  LiveReg: %126
  UpdateRegP: SU(9) %129:fpr64 = LDRDroX %126:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %143:fpr64, %126:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
              to GPR32 1
  LiveReg: %128
  UpdateRegP: SU(9) %129:fpr64 = LDRDroX %126:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(14) %135:fpr64 = LDRDroX %134:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %143:fpr64, %126:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
              to 
  Ready @6c
  BotQ.A BotLatency SU(19) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Pick Bot ONLY1     
Scheduling SU(18) %143:fpr64 = FADDDrr %129:fpr64, %142:fpr64
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %129
  UpdateRegP: SU(18) %143:fpr64 = FADDDrr %129:fpr64, %142:fpr64
              to 
  LiveReg: %142
  UpdateRegP: SU(18) %143:fpr64 = FADDDrr %129:fpr64, %142:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(18) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 17 
Pick Bot ONLY1     
Scheduling SU(17) %142:fpr64 = FMULDrr %135:fpr64, %141:fpr64
Bottom Pressure:
FPR8=3
GPR32=5
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %135
  UpdateRegP: SU(17) %142:fpr64 = FMULDrr %135:fpr64, %141:fpr64
              to 
  LiveReg: %141
  UpdateRegP: SU(17) %142:fpr64 = FMULDrr %135:fpr64, %141:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  BotQ.A BotLatency SU(17) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 16 14 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %129:fpr64 = LDRDroX %126:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @11c
  BotQ.A BotLatency SU(9) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 16 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(14) 7c
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %141:fpr64 = LDRDroX %140:gpr64common, %131:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %140
  UpdateRegP: SU(16) %141:fpr64 = LDRDroX %140:gpr64common, %131:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %131
  UpdateRegP: SU(12) %133:gpr64 = MADDXrrr %131:gpr64, %120:gpr64, %130:gpr64
              to 
  UpdateRegP: SU(16) %141:fpr64 = LDRDroX %140:gpr64common, %131:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @12c
  BotQ.A BotLatency SU(16) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 14 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(14) 7c
  BotQ.A RemainingLatency 7 + 13c > CritPath 19
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(14) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %135:fpr64 = LDRDroX %134:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
Bottom Pressure:
GPR32=8
  LiveReg: %134
  UpdateRegP: SU(14) %135:fpr64 = LDRDroX %134:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @13c
  BotQ.A TopLatency SU(14) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 15 13 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(6) 6c
  BotQ.A RemainingLatency 6 + 14c > CritPath 19
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %134:gpr64common = ADDXrr %133:gpr64, %125:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %133
  UpdateRegP: SU(13) %134:gpr64common = ADDXrr %133:gpr64, %125:gpr64
              to 
  LiveReg: %125
  UpdateRegP: SU(6) %126:gpr64common = ADDXrr %122:gpr64, %125:gpr64
              to 
  UpdateRegP: SU(13) %134:gpr64common = ADDXrr %133:gpr64, %125:gpr64
              to GPR32 -1
  Ready @14c
  BotQ.A BotLatency SU(13) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 15 8 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(6) 6c
  BotQ.A RemainingLatency 6 + 15c > CritPath 19
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %126:gpr64common = ADDXrr %122:gpr64, %125:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %122
  UpdateRegP: SU(6) %126:gpr64common = ADDXrr %122:gpr64, %125:gpr64
              to GPR32 -1
  Ready @15c
  BotQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 16c > CritPath 19
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(5) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %125:gpr64 = UBFMXri %124:gpr64, 61, 60
Bottom Pressure:
GPR32=9
  LiveReg: %124
  UpdateRegP: SU(5) %125:gpr64 = UBFMXri %124:gpr64, 61, 60
              to GPR32 -1
  Ready @16c
  BotQ.A BotLatency SU(5) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 15 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(12) 4c
  BotQ.A RemainingLatency 4 + 17c > CritPath 19
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(15) %140:gpr64common = MADDXrrr %118:gpr64, %137:gpr64, %139:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %118
  UpdateRegP: SU(2) %122:gpr64 = MADDXrrr %118:gpr64, %120:gpr64, %117:gpr64
              to 
  UpdateRegP: SU(15) %140:gpr64common = MADDXrrr %118:gpr64, %137:gpr64, %139:gpr64
              to GPR32 -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 13
  Executed: 18c
  Critical: 13c, 13 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 4 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(12) 4c
  BotQ.A RemainingLatency 4 + 18c > CritPath 19
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %133:gpr64 = MADDXrrr %131:gpr64, %120:gpr64, %130:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %130
  UpdateRegP: SU(12) %133:gpr64 = MADDXrrr %131:gpr64, %120:gpr64, %130:gpr64
              to GPR32 -1
  Ready @18c
  BotQ.A TopLatency SU(12) 4c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 14
  Executed: 19c
  Critical: 14c, 14 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 
Queue BotQ.A: 2 4 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 19c > CritPath 19
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %128:gpr64 = UBFMXri %127:gpr64, 61, 60
Bottom Pressure:
GPR32=9
  LiveReg: %127
  UpdateRegP: SU(8) %128:gpr64 = UBFMXri %127:gpr64, 61, 60
              to GPR32 -1
  Ready @19c
  BotQ.A TopLatency SU(8) 4c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 15
  Executed: 20c
  Critical: 15c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 7 
Queue BotQ.A: 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
  BotQ.A RemainingLatency 0 + 20c > CritPath 19
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %124:gpr64 = ADDXrs %123:gpr64, %123:gpr64, 2
Bottom Pressure:
GPR32=9
  LiveReg: %123
  UpdateRegP: SU(4) %124:gpr64 = ADDXrs %123:gpr64, %123:gpr64, 2
              to GPR32 -1
  Ready @20c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 15c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 16
  Executed: 21c
  Critical: 16c, 16 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 10 7 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %122:gpr64 = MADDXrrr %118:gpr64, %120:gpr64, %117:gpr64
Bottom Pressure:
GPR32=9
  LiveReg: %117
  UpdateRegP: SU(2) %122:gpr64 = MADDXrrr %118:gpr64, %120:gpr64, %117:gpr64
              to GPR32 -1
  Ready @21c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 17
  Executed: 22c
  Critical: 17c, 17 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 7 3 
Queue BotQ.A: 11 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 11 
  BotQ.A RemainingLatency 0 + 22c > CritPath 19
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %131:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
GPR32=8
  Ready @22c
  BotQ.A BotLatency SU(11) 18c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 18
  Executed: 23c
  Critical: 18c, 18 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 3 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
  BotQ.A RemainingLatency 0 + 23c > CritPath 19
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %130:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
GPR32=7
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 19
  Executed: 24c
  Critical: 19c, 19 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 1 
Queue BotQ.A: 7 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 
  BotQ.A RemainingLatency 0 + 24c > CritPath 19
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %127:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
GPR32=6
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 20
  Executed: 25c
  Critical: 20c, 20 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 25c > CritPath 19
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %123:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
GPR32=5
  Ready @25c
  BotQ.A BotLatency SU(3) 19c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 21
  Executed: 26c
  Critical: 21c, 21 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 26c > CritPath 19
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %118:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
Bottom Pressure:
GPR32=4
  Ready @26c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 22
  Executed: 27c
  Critical: 22c, 22 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %117:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
Bottom Pressure:
GPR32=3
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 23
  Executed: 28c
  Critical: 23c, 23 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %117:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
SU(1):   %118:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(3):   %123:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(7):   %127:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(10):   %130:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
SU(11):   %131:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(2):   %122:gpr64 = MADDXrrr %118:gpr64, %120:gpr64, %117:gpr64
SU(4):   %124:gpr64 = ADDXrs %123:gpr64, %123:gpr64, 2
SU(8):   %128:gpr64 = UBFMXri %127:gpr64, 61, 60
SU(12):   %133:gpr64 = MADDXrrr %131:gpr64, %120:gpr64, %130:gpr64
SU(15):   %140:gpr64common = MADDXrrr %118:gpr64, %137:gpr64, %139:gpr64
SU(5):   %125:gpr64 = UBFMXri %124:gpr64, 61, 60
SU(6):   %126:gpr64common = ADDXrr %122:gpr64, %125:gpr64
SU(13):   %134:gpr64common = ADDXrr %133:gpr64, %125:gpr64
SU(14):   %135:fpr64 = LDRDroX %134:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
SU(16):   %141:fpr64 = LDRDroX %140:gpr64common, %131:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
SU(9):   %129:fpr64 = LDRDroX %126:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
SU(17):   %142:fpr64 = FMULDrr %135:fpr64, %141:fpr64
SU(18):   %143:fpr64 = FADDDrr %129:fpr64, %142:fpr64
SU(19):   STRDroX %143:fpr64, %126:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
SU(20):   %144:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(21):   %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0
SU(22):   STRWui %145:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
laplacian:%bb.33 for.inc127
  From: %115:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.29
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %115:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%115
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %116:gpr32common = nsw ADDWri %115:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%115
  Successors:
    SU(2): Data Latency=1 Reg=%116
  Single Issue       : false;
SU(2):   STRWui %116:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%116
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %116:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %116:gpr32common = nsw ADDWri %115:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %115:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %115:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %116:gpr32common = nsw ADDWri %115:gpr32common, 1, 0
SU(2):   STRWui %116:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
laplacian:%bb.34 for.inc130
  From: %110:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.27
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %110:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%110
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%110
  Successors:
    SU(2): Data Latency=1 Reg=%111
  Single Issue       : false;
SU(2):   STRWui %111:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%111
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %111:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %110:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %110:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
SU(1):   %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0
SU(2):   STRWui %111:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.35 for.inc133
  From: %105:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %105:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%105
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %106:gpr32common = nsw ADDWri %105:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%105
  Successors:
    SU(2): Data Latency=1 Reg=%106
  Single Issue       : false;
SU(2):   STRWui %106:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%106
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %106:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %106:gpr32common = nsw ADDWri %105:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %105:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %105:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %106:gpr32common = nsw ADDWri %105:gpr32common, 1, 0
SU(2):   STRWui %106:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)

********** MI Scheduling **********
laplacian:%bb.36 for.end135
  From: STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
    To: End RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: %87 %85 %77 %66 %62 %56 %54 %43 %41 
Live Thru: 
  LiveReg: %87
  LiveReg: %85
  LiveReg: %77
  LiveReg: %66
  LiveReg: %62
  LiveReg: %56
  LiveReg: %54
  LiveReg: %43
  LiveReg: %41
Top Pressure:

Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
SU(0):   STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   undef %41.sub_32:gpr64 = MOVi32imm 200
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %43:gpr64common = ADDXri %stack.8.tm1, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   undef %54.sub_32:gpr64 = MOVi32imm 1000
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %56:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %62:gpr64common = ADDXri %stack.9.tm2, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %66:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %77:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %84:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(9): Data Latency=1 Reg=%84
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(9):   %85:fpr64 = LDRDui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(8): Data Latency=1 Reg=%84
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %87:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 10 7 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 10 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %87:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 0 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
BotQ.A RemLatency SU(9) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %77:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
Bottom Pressure:
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 0 1 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 
BotQ.A RemLatency SU(9) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %66:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 8 
BotQ.A RemLatency SU(9) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %85:fpr64 = LDRDui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
GPR32=6
  LiveReg: %84
  UpdateRegP: SU(9) %85:fpr64 = LDRDui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A TopLatency SU(9) 1c
  BotQ.A BotLatency SU(9) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 8 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %84:gpr64temp = ADRP target-flags(aarch64-page) %const.1
Bottom Pressure:
GPR32=5
  Ready @4c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %62:gpr64common = ADDXri %stack.9.tm2, 0, 0
Bottom Pressure:
GPR32=4
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %56:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
Bottom Pressure:
GPR32=3
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 7c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) undef %54.sub_32:gpr64 = MOVi32imm 1000
Bottom Pressure:
GPR32=2
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 8c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %43:gpr64common = ADDXri %stack.8.tm1, 0, 0
Bottom Pressure:
GPR32=1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) undef %41.sub_32:gpr64 = MOVi32imm 200
Bottom Pressure:

  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
Bottom Pressure:

  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
SU(1):   undef %41.sub_32:gpr64 = MOVi32imm 200
SU(2):   %43:gpr64common = ADDXri %stack.8.tm1, 0, 0
SU(3):   undef %54.sub_32:gpr64 = MOVi32imm 1000
SU(4):   %56:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
SU(5):   %62:gpr64common = ADDXri %stack.9.tm2, 0, 0
SU(8):   %84:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(9):   %85:fpr64 = LDRDui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(6):   %66:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
SU(7):   %77:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
SU(10):   %87:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s

********** MI Scheduling **********
laplacian:%bb.37 for.cond136
  From: %27:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.45, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %27:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%27
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %27:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%27
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.45, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %27:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %27:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %27:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri %27:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.39 for.cond139
  From: %30:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.44, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %30:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%30
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %30:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%30
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.44, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %30:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %30:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %30:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri %30:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.41 for.cond142
  From: %35:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.43, implicit killed $nzcv
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %35:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%35
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %35:gpr32common, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%35
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.43, implicit killed $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %35:gpr32common, 4, 0, implicit-def $nzcv
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %35:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %35:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri %35:gpr32common, 4, 0, implicit-def $nzcv

********** MI Scheduling **********
laplacian:%bb.42 for.body144
  From: %39:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.41
 RegionInstrs: 53
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=14
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %87 %85 %77 %66 %62 %56 %54 %43 %41 
Live Out: %87 %85 %77 %66 %62 %56 %54 %43 %41 
Live Thru: FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %87
  UpdateRegP: SU(37) %88:gpr64 = ADDXrr %87:gpr64, %55:gpr64
              to 
  LiveReg: %85
  UpdateRegP: SU(36) %86:fpr64 = FMULDrr %83:fpr64, %85:fpr64
              to 
  LiveReg: %77
  UpdateRegP: SU(30) %78:gpr64 = ADDXrr %77:gpr64, %55:gpr64
              to 
  LiveReg: %66
  UpdateRegP: SU(20) %67:gpr64 = ADDXrr %66:gpr64, %55:gpr64
              to 
  LiveReg: %62
  UpdateRegP: SU(17) %63:gpr64 = ADDXrr %62:gpr64common, %42:gpr64
              to 
  LiveReg: %56
  UpdateRegP: SU(12) %57:gpr64 = ADDXrr %56:gpr64, %55:gpr64
              to 
  LiveReg: %54
  UpdateRegP: SU(11) %55:gpr64 = MADDXrrr %52:gpr64, %54:gpr64, $xzr
              to 
  LiveReg: %43
  UpdateRegP: SU(2) %44:gpr64 = ADDXrr %43:gpr64common, %42:gpr64
              to 
  LiveReg: %41
  UpdateRegP: SU(1) %42:gpr64 = MADDXrrr %39:gpr64, %41:gpr64, $xzr
              to 
Top Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
SU(0):   %39:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(1): Data Latency=4 Reg=%39
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %42:gpr64 = MADDXrrr %39:gpr64, %41:gpr64, $xzr
  # preds left       : 1
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(0): Data Latency=4 Reg=%39
  Successors:
    SU(44): Data Latency=1 Reg=%42
    SU(38): Data Latency=1 Reg=%42
    SU(31): Data Latency=1 Reg=%42
    SU(27): Data Latency=1 Reg=%42
    SU(21): Data Latency=1 Reg=%42
    SU(17): Data Latency=1 Reg=%42
    SU(13): Data Latency=1 Reg=%42
    SU(2): Data Latency=1 Reg=%42
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %44:gpr64 = ADDXrr %43:gpr64common, %42:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(1): Data Latency=1 Reg=%42
  Successors:
    SU(6): Data Latency=1 Reg=%44
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %45:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(4): Data Latency=4 Reg=%45
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %46:gpr64 = ADDXrs %45:gpr64, %45:gpr64, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(3): Data Latency=4 Reg=%45
  Successors:
    SU(5): Data Latency=1 Reg=%46
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %47:gpr64 = UBFMXri %46:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(4): Data Latency=1 Reg=%46
  Successors:
    SU(45): Data Latency=1 Reg=%47
    SU(39): Data Latency=1 Reg=%47
    SU(32): Data Latency=1 Reg=%47
    SU(28): Data Latency=1 Reg=%47
    SU(22): Data Latency=1 Reg=%47
    SU(18): Data Latency=1 Reg=%47
    SU(14): Data Latency=1 Reg=%47
    SU(6): Data Latency=1 Reg=%47
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %48:gpr64common = ADDXrr %44:gpr64, %47:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 16
  Predecessors:
    SU(5): Data Latency=1 Reg=%47
    SU(2): Data Latency=1 Reg=%44
  Successors:
    SU(9): Data Latency=1 Reg=%48
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %49:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(8): Data Latency=4 Reg=%49
    SU(52): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %50:gpr64 = UBFMXri %49:gpr64, 61, 60
  # preds left       : 1
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 16
  Predecessors:
    SU(7): Data Latency=4 Reg=%49
  Successors:
    SU(49): Data Latency=1 Reg=%50
    SU(46): Data Latency=1 Reg=%50
    SU(40): Data Latency=1 Reg=%50
    SU(33): Data Latency=1 Reg=%50
    SU(29): Data Latency=1 Reg=%50
    SU(23): Data Latency=1 Reg=%50
    SU(19): Data Latency=1 Reg=%50
    SU(15): Data Latency=1 Reg=%50
    SU(9): Data Latency=1 Reg=%50
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %51:fpr64 = LDRDroX %48:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 15
  Predecessors:
    SU(6): Data Latency=1 Reg=%48
    SU(8): Data Latency=1 Reg=%50
  Successors:
    SU(16): Data Latency=4 Reg=%51
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %52:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(11): Data Latency=4 Reg=%52
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %55:gpr64 = MADDXrrr %52:gpr64, %54:gpr64, $xzr
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 19
  Predecessors:
    SU(10): Data Latency=4 Reg=%52
  Successors:
    SU(37): Data Latency=1 Reg=%55
    SU(30): Data Latency=1 Reg=%55
    SU(20): Data Latency=1 Reg=%55
    SU(12): Data Latency=1 Reg=%55
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %57:gpr64 = ADDXrr %56:gpr64, %55:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 18
  Predecessors:
    SU(11): Data Latency=1 Reg=%55
  Successors:
    SU(13): Data Latency=1 Reg=%57
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %58:gpr64 = ADDXrr %57:gpr64, %42:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 17
  Predecessors:
    SU(12): Data Latency=1 Reg=%57
    SU(1): Data Latency=1 Reg=%42
  Successors:
    SU(14): Data Latency=1 Reg=%58
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %59:gpr64common = ADDXrr %58:gpr64, %47:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(13): Data Latency=1 Reg=%58
    SU(5): Data Latency=1 Reg=%47
  Successors:
    SU(15): Data Latency=1 Reg=%59
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(15):   %60:fpr64 = LDRDroX %59:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 15
  Predecessors:
    SU(14): Data Latency=1 Reg=%59
    SU(8): Data Latency=1 Reg=%50
  Successors:
    SU(16): Data Latency=4 Reg=%60
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(16):   %61:fpr64 = FMULDrr %51:fpr64, %60:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 11
  Predecessors:
    SU(15): Data Latency=4 Reg=%60
    SU(9): Data Latency=4 Reg=%51
  Successors:
    SU(25): Data Latency=1 Reg=%61
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(17):   %63:gpr64 = ADDXrr %62:gpr64common, %42:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(1): Data Latency=1 Reg=%42
  Successors:
    SU(18): Data Latency=1 Reg=%63
  Pressure Diff      : 
  Single Issue       : false;
SU(18):   %64:gpr64common = ADDXrr %63:gpr64, %47:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 16
  Predecessors:
    SU(17): Data Latency=1 Reg=%63
    SU(5): Data Latency=1 Reg=%47
  Successors:
    SU(19): Data Latency=1 Reg=%64
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   %65:fpr64 = LDRDroX %64:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 15
  Predecessors:
    SU(18): Data Latency=1 Reg=%64
    SU(8): Data Latency=1 Reg=%50
  Successors:
    SU(24): Data Latency=4 Reg=%65
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(20):   %67:gpr64 = ADDXrr %66:gpr64, %55:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 18
  Predecessors:
    SU(11): Data Latency=1 Reg=%55
  Successors:
    SU(21): Data Latency=1 Reg=%67
  Pressure Diff      : 
  Single Issue       : false;
SU(21):   %68:gpr64 = ADDXrr %67:gpr64, %42:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 17
  Predecessors:
    SU(20): Data Latency=1 Reg=%67
    SU(1): Data Latency=1 Reg=%42
  Successors:
    SU(22): Data Latency=1 Reg=%68
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(22):   %69:gpr64common = ADDXrr %68:gpr64, %47:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 16
  Predecessors:
    SU(21): Data Latency=1 Reg=%68
    SU(5): Data Latency=1 Reg=%47
  Successors:
    SU(23): Data Latency=1 Reg=%69
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(23):   %70:fpr64 = LDRDroX %69:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 15
  Predecessors:
    SU(22): Data Latency=1 Reg=%69
    SU(8): Data Latency=1 Reg=%50
  Successors:
    SU(24): Data Latency=4 Reg=%70
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(24):   %71:fpr64 = FMULDrr %65:fpr64, %70:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 11
  Predecessors:
    SU(23): Data Latency=4 Reg=%70
    SU(19): Data Latency=4 Reg=%65
  Successors:
    SU(25): Data Latency=1 Reg=%71
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(25):   %72:fpr64 = FADDDrr %61:fpr64, %71:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 10
  Predecessors:
    SU(24): Data Latency=1 Reg=%71
    SU(16): Data Latency=1 Reg=%61
  Successors:
    SU(35): Data Latency=1 Reg=%72
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(26):   %73:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(27): Data Latency=4 Reg=%73
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   %74:gpr64 = ADDXrr %73:gpr64, %42:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(1): Data Latency=1 Reg=%42
    SU(26): Data Latency=4 Reg=%73
  Successors:
    SU(28): Data Latency=1 Reg=%74
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(28):   %75:gpr64common = ADDXrr %74:gpr64, %47:gpr64
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(27): Data Latency=1 Reg=%74
    SU(5): Data Latency=1 Reg=%47
  Successors:
    SU(49): Data Latency=1 Reg=%75
    SU(29): Data Latency=1 Reg=%75
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(29):   %76:fpr64 = LDRDroX %75:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(28): Data Latency=1 Reg=%75
    SU(8): Data Latency=1 Reg=%50
  Successors:
    SU(34): Data Latency=4 Reg=%76
    SU(52): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(30):   %78:gpr64 = ADDXrr %77:gpr64, %55:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(11): Data Latency=1 Reg=%55
  Successors:
    SU(31): Data Latency=1 Reg=%78
  Pressure Diff      : 
  Single Issue       : false;
SU(31):   %79:gpr64 = ADDXrr %78:gpr64, %42:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 16
  Predecessors:
    SU(30): Data Latency=1 Reg=%78
    SU(1): Data Latency=1 Reg=%42
  Successors:
    SU(32): Data Latency=1 Reg=%79
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(32):   %80:gpr64common = ADDXrr %79:gpr64, %47:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 15
  Predecessors:
    SU(31): Data Latency=1 Reg=%79
    SU(5): Data Latency=1 Reg=%47
  Successors:
    SU(33): Data Latency=1 Reg=%80
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(33):   %81:fpr64 = LDRDroX %80:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 14
  Predecessors:
    SU(32): Data Latency=1 Reg=%80
    SU(8): Data Latency=1 Reg=%50
  Successors:
    SU(34): Data Latency=4 Reg=%81
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(34):   %82:fpr64 = FMULDrr %76:fpr64, %81:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 10
  Predecessors:
    SU(33): Data Latency=4 Reg=%81
    SU(29): Data Latency=4 Reg=%76
  Successors:
    SU(35): Data Latency=1 Reg=%82
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(35):   %83:fpr64 = FADDDrr %72:fpr64, %82:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 9
  Predecessors:
    SU(25): Data Latency=1 Reg=%72
    SU(34): Data Latency=1 Reg=%82
  Successors:
    SU(36): Data Latency=1 Reg=%83
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(36):   %86:fpr64 = FMULDrr %83:fpr64, %85:fpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 8
  Predecessors:
    SU(35): Data Latency=1 Reg=%83
  Successors:
    SU(48): Data Latency=1 Reg=%86
  Pressure Diff      : 
  Single Issue       : false;
SU(37):   %88:gpr64 = ADDXrr %87:gpr64, %55:gpr64
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(11): Data Latency=1 Reg=%55
  Successors:
    SU(38): Data Latency=1 Reg=%88
  Pressure Diff      : 
  Single Issue       : false;
SU(38):   %89:gpr64 = ADDXrr %88:gpr64, %42:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(37): Data Latency=1 Reg=%88
    SU(1): Data Latency=1 Reg=%42
  Successors:
    SU(39): Data Latency=1 Reg=%89
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(39):   %90:gpr64common = ADDXrr %89:gpr64, %47:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 14
  Predecessors:
    SU(38): Data Latency=1 Reg=%89
    SU(5): Data Latency=1 Reg=%47
  Successors:
    SU(40): Data Latency=1 Reg=%90
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(40):   %91:fpr64 = LDRDroX %90:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 13
  Predecessors:
    SU(39): Data Latency=1 Reg=%90
    SU(8): Data Latency=1 Reg=%50
  Successors:
    SU(42): Data Latency=4 Reg=%91
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(41):   %92:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(42): Data Latency=4 Reg=%92
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(42):   %93:fpr64 = FMULDrr %91:fpr64, %92:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 9
  Predecessors:
    SU(40): Data Latency=4 Reg=%91
    SU(41): Data Latency=4 Reg=%92
  Successors:
    SU(47): Data Latency=1 Reg=%93
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(43):   %94:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(44): Data Latency=4 Reg=%94
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(44):   %95:gpr64 = ADDXrr %94:gpr64, %42:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(1): Data Latency=1 Reg=%42
    SU(43): Data Latency=4 Reg=%94
  Successors:
    SU(45): Data Latency=1 Reg=%95
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(45):   %96:gpr64common = ADDXrr %95:gpr64, %47:gpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(44): Data Latency=1 Reg=%95
    SU(5): Data Latency=1 Reg=%47
  Successors:
    SU(46): Data Latency=1 Reg=%96
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(46):   %97:fpr64 = LDRDroX %96:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(45): Data Latency=1 Reg=%96
    SU(8): Data Latency=1 Reg=%50
  Successors:
    SU(47): Data Latency=4 Reg=%97
    SU(52): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(47):   %98:fpr64 = FMULDrr %93:fpr64, %97:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 8
  Predecessors:
    SU(42): Data Latency=1 Reg=%93
    SU(46): Data Latency=4 Reg=%97
  Successors:
    SU(48): Data Latency=1 Reg=%98
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(48):   %99:fpr64 = FADDDrr %86:fpr64, %98:fpr64
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 7
  Predecessors:
    SU(36): Data Latency=1 Reg=%86
    SU(47): Data Latency=1 Reg=%98
  Successors:
    SU(49): Data Latency=1 Reg=%99
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(49):   STRDroX %99:fpr64, %75:gpr64common, %50:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
  # preds left       : 18
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 6
  Predecessors:
    SU(48): Data Latency=1 Reg=%99
    SU(46): Ord  Latency=0 Memory
    SU(43): Ord  Latency=0 Memory
    SU(41): Ord  Latency=0 Memory
    SU(40): Ord  Latency=0 Memory
    SU(33): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(28): Data Latency=1 Reg=%75
    SU(26): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%50
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(52): Ord  Latency=0 Memory
    SU(50): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(50):   %100:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 5
  Predecessors:
    SU(49): Ord  Latency=1 Memory
  Successors:
    SU(51): Data Latency=4 Reg=%100
    SU(52): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(51):   %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 1
  Predecessors:
    SU(50): Data Latency=4 Reg=%100
  Successors:
    SU(52): Data Latency=1 Reg=%101
  Pressure Diff      : 
  Single Issue       : false;
SU(52):   STRWui %101:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 0
  Predecessors:
    SU(51): Data Latency=1 Reg=%101
    SU(50): Ord  Latency=0 Memory
    SU(49): Ord  Latency=0 Memory
    SU(46): Ord  Latency=0 Memory
    SU(29): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.41
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 23
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 52 
Pick Bot ONLY1     
Scheduling SU(52) STRWui %101:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %101
  UpdateRegP: SU(52) STRWui %101:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
              to 
  Ready @0c
  BotQ.A TopLatency SU(52) 23c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 51 
Pick Bot ONLY1     
Scheduling SU(51) %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %100
  UpdateRegP: SU(51) %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(51) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 50 
Pick Bot ONLY1     
Scheduling SU(50) %100:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @5c
  BotQ.A BotLatency SU(50) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 49 
Pick Bot ONLY1     
Scheduling SU(49) STRDroX %99:fpr64, %75:gpr64common, %50:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %99
  UpdateRegP: SU(49) STRDroX %99:fpr64, %75:gpr64common, %50:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
              to GPR32 2
  LiveReg: %75
  UpdateRegP: SU(29) %76:fpr64 = LDRDroX %75:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(49) STRDroX %99:fpr64, %75:gpr64common, %50:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
              to GPR32 1
  LiveReg: %50
  UpdateRegP: SU(9) %51:fpr64 = LDRDroX %48:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(15) %60:fpr64 = LDRDroX %59:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) %65:fpr64 = LDRDroX %64:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(23) %70:fpr64 = LDRDroX %69:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(29) %76:fpr64 = LDRDroX %75:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(33) %81:fpr64 = LDRDroX %80:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(40) %91:fpr64 = LDRDroX %90:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(46) %97:fpr64 = LDRDroX %96:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(49) STRDroX %99:fpr64, %75:gpr64common, %50:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
              to 
  Ready @6c
  BotQ.A BotLatency SU(49) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 48 
Pick Bot ONLY1     
Scheduling SU(48) %99:fpr64 = FADDDrr %86:fpr64, %98:fpr64
Bottom Pressure:
FPR8=3
GPR32=10
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %86
  UpdateRegP: SU(48) %99:fpr64 = FADDDrr %86:fpr64, %98:fpr64
              to 
  LiveReg: %98
  UpdateRegP: SU(48) %99:fpr64 = FADDDrr %86:fpr64, %98:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(48) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 36 47 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(36) 15c
Picking from Bot:
  Cand SU(36) ORDER                              
  Cand SU(47) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(47) %98:fpr64 = FMULDrr %93:fpr64, %97:fpr64
Bottom Pressure:
FPR8=4
GPR32=10
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %93
  UpdateRegP: SU(47) %98:fpr64 = FMULDrr %93:fpr64, %97:fpr64
              to 
  LiveReg: %97
  UpdateRegP: SU(47) %98:fpr64 = FMULDrr %93:fpr64, %97:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  BotQ.A BotLatency SU(47) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 46 
Queue BotQ.A: 36 42 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(36) 15c
BotQ.A RemLatency SU(46) 7c
  BotQ.A RemainingLatency 15 + 9c > CritPath 23
Picking from Bot:
  Cand SU(36) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(36) %86:fpr64 = FMULDrr %83:fpr64, %85:fpr64
Bottom Pressure:
FPR8=4
GPR32=10
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %83
  UpdateRegP: SU(36) %86:fpr64 = FMULDrr %83:fpr64, %85:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @9c
  BotQ.A TopLatency SU(36) 15c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 46 
Queue BotQ.A: 42 35 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(35) 14c
BotQ.A RemLatency SU(46) 7c
  BotQ.A RemainingLatency 14 + 10c > CritPath 23
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(35) BOT-PATH                  14 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(35) %83:fpr64 = FADDDrr %72:fpr64, %82:fpr64
Bottom Pressure:
FPR8=5
GPR32=10
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %72
  UpdateRegP: SU(35) %83:fpr64 = FADDDrr %72:fpr64, %82:fpr64
              to 
  LiveReg: %82
  UpdateRegP: SU(35) %83:fpr64 = FADDDrr %72:fpr64, %82:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @10c
  BotQ.A BotLatency SU(35) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 46 
Queue BotQ.A: 42 25 34 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(25) 13c
BotQ.A RemLatency SU(46) 7c
  BotQ.A RemainingLatency 13 + 11c > CritPath 23
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(25) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(25) %72:fpr64 = FADDDrr %61:fpr64, %71:fpr64
Bottom Pressure:
FPR8=6
GPR32=10
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %61
  UpdateRegP: SU(25) %72:fpr64 = FADDDrr %61:fpr64, %71:fpr64
              to 
  LiveReg: %71
  UpdateRegP: SU(25) %72:fpr64 = FADDDrr %61:fpr64, %71:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A BotLatency SU(25) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 34 24 16 46 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(42) 12c
  BotQ.A RemainingLatency 12 + 12c > CritPath 23
Picking from Bot:
  Cand SU(42) ORDER                              
  Cand SU(46) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(46) %97:fpr64 = LDRDroX %96:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
Bottom Pressure:
FPR8=5
GPR32=11
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %96
  UpdateRegP: SU(46) %97:fpr64 = LDRDroX %96:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @12c
  BotQ.A BotLatency SU(46) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 42 34 24 16 45 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(42) 12c
  BotQ.A RemainingLatency 12 + 13c > CritPath 23
Picking from Bot:
  Cand SU(42) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(42) %93:fpr64 = FMULDrr %91:fpr64, %92:fpr64
Bottom Pressure:
FPR8=6
GPR32=11
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %91
  UpdateRegP: SU(42) %93:fpr64 = FMULDrr %91:fpr64, %92:fpr64
              to 
  LiveReg: %92
  UpdateRegP: SU(42) %93:fpr64 = FMULDrr %91:fpr64, %92:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @13c
  BotQ.A TopLatency SU(42) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 40 41 
Queue BotQ.A: 45 34 24 16 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(34) 12c
BotQ.A RemLatency SU(40) 8c
  BotQ.A RemainingLatency 12 + 14c > CritPath 23
Picking from Bot:
  Cand SU(45) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(45) %96:gpr64common = ADDXrr %95:gpr64, %47:gpr64
Bottom Pressure:
FPR8=6
GPR32=12
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %95
  UpdateRegP: SU(45) %96:gpr64common = ADDXrr %95:gpr64, %47:gpr64
              to 
  LiveReg: %47
  UpdateRegP: SU(6) %48:gpr64common = ADDXrr %44:gpr64, %47:gpr64
              to 
  UpdateRegP: SU(14) %59:gpr64common = ADDXrr %58:gpr64, %47:gpr64
              to 
  UpdateRegP: SU(18) %64:gpr64common = ADDXrr %63:gpr64, %47:gpr64
              to 
  UpdateRegP: SU(22) %69:gpr64common = ADDXrr %68:gpr64, %47:gpr64
              to 
  UpdateRegP: SU(28) %75:gpr64common = ADDXrr %74:gpr64, %47:gpr64
              to 
  UpdateRegP: SU(32) %80:gpr64common = ADDXrr %79:gpr64, %47:gpr64
              to 
  UpdateRegP: SU(39) %90:gpr64common = ADDXrr %89:gpr64, %47:gpr64
              to 
  UpdateRegP: SU(45) %96:gpr64common = ADDXrr %95:gpr64, %47:gpr64
              to GPR32 -1
  Ready @14c
  BotQ.A BotLatency SU(45) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 12
  Executed: 15c
  Critical: 12c, 12 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 40 41 
Queue BotQ.A: 16 34 24 44 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(40) 8c
  BotQ.A RemainingLatency 12 + 15c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(44) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(44) %95:gpr64 = ADDXrr %94:gpr64, %42:gpr64
Bottom Pressure:
FPR8=6
GPR32=13
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  GPR32: 13 <= 15(+ 8 livethru)
  LiveReg: %94
  UpdateRegP: SU(44) %95:gpr64 = ADDXrr %94:gpr64, %42:gpr64
              to 
  LiveReg: %42
  UpdateRegP: SU(2) %44:gpr64 = ADDXrr %43:gpr64common, %42:gpr64
              to GPR32 -1
  UpdateRegP: SU(13) %58:gpr64 = ADDXrr %57:gpr64, %42:gpr64
              to 
  UpdateRegP: SU(17) %63:gpr64 = ADDXrr %62:gpr64common, %42:gpr64
              to GPR32 -1
  UpdateRegP: SU(21) %68:gpr64 = ADDXrr %67:gpr64, %42:gpr64
              to 
  UpdateRegP: SU(27) %74:gpr64 = ADDXrr %73:gpr64, %42:gpr64
              to 
  UpdateRegP: SU(31) %79:gpr64 = ADDXrr %78:gpr64, %42:gpr64
              to 
  UpdateRegP: SU(38) %89:gpr64 = ADDXrr %88:gpr64, %42:gpr64
              to 
  UpdateRegP: SU(44) %95:gpr64 = ADDXrr %94:gpr64, %42:gpr64
              to GPR32 -1
  Ready @15c
  BotQ.A BotLatency SU(44) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 13
  Executed: 16c
  Critical: 13c, 13 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 40 41 43 
Queue BotQ.A: 16 34 24 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(40) 8c
  BotQ.A RemainingLatency 12 + 16c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(34) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(34) %82:fpr64 = FMULDrr %76:fpr64, %81:fpr64
Bottom Pressure:
FPR8=7
GPR32=13
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %76
  UpdateRegP: SU(34) %82:fpr64 = FMULDrr %76:fpr64, %81:fpr64
              to 
  LiveReg: %81
  UpdateRegP: SU(34) %82:fpr64 = FMULDrr %76:fpr64, %81:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @16c
  BotQ.A TopLatency SU(34) 12c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 14
  Executed: 17c
  Critical: 14c, 14 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 33 43 
Queue BotQ.A: 16 24 40 41 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(33) 8c
  BotQ.A RemainingLatency 12 + 17c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(40) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(40) %91:fpr64 = LDRDroX %90:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  GPR32: 14 <= 15(+ 8 livethru)
  LiveReg: %90
  UpdateRegP: SU(40) %91:fpr64 = LDRDroX %90:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 15
  Executed: 18c
  Critical: 15c, 15 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 33 43 
Queue BotQ.A: 16 24 41 39 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(33) 8c
  BotQ.A RemainingLatency 12 + 18c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(24) %71:fpr64 = FMULDrr %65:fpr64, %70:fpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %65
  UpdateRegP: SU(24) %71:fpr64 = FMULDrr %65:fpr64, %70:fpr64
              to 
  LiveReg: %70
  UpdateRegP: SU(24) %71:fpr64 = FMULDrr %65:fpr64, %70:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @18c
  BotQ.A TopLatency SU(24) 12c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 16
  Executed: 19c
  Critical: 16c, 16 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 29 33 19 23 
Queue BotQ.A: 16 39 41 43 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(33) 8c
  BotQ.A RemainingLatency 12 + 19c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(39) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(39) %90:gpr64common = ADDXrr %89:gpr64, %47:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %89
  UpdateRegP: SU(39) %90:gpr64common = ADDXrr %89:gpr64, %47:gpr64
              to GPR32 -1
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 17
  Executed: 20c
  Critical: 17c, 17 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 19 
Queue BotQ.A: 16 43 41 38 29 33 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(23) 8c
  BotQ.A RemainingLatency 12 + 20c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
  Cand SU(43) REG-MAX                            
  Cand SU(38) BOT-PATH                  6 cycles 
  Cand SU(29) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(29) %76:fpr64 = LDRDroX %75:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 18
  Executed: 21c
  Critical: 18c, 18 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 23 19 
Queue BotQ.A: 16 43 41 38 33 28 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(16) 12c
BotQ.A RemLatency SU(23) 8c
  BotQ.A RemainingLatency 12 + 21c > CritPath 23
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(16) %61:fpr64 = FMULDrr %51:fpr64, %60:fpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %51
  UpdateRegP: SU(16) %61:fpr64 = FMULDrr %51:fpr64, %60:fpr64
              to 
  LiveReg: %60
  UpdateRegP: SU(16) %61:fpr64 = FMULDrr %51:fpr64, %60:fpr64
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @21c
  BotQ.A TopLatency SU(16) 12c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 19
  Executed: 22c
  Critical: 19c, 19 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 15 
Queue BotQ.A: 28 43 41 38 33 23 19 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(33) 8c
BotQ.A RemLatency SU(15) 8c
  BotQ.A RemainingLatency 11 + 22c > CritPath 23
Picking from Bot:
  Cand SU(28) ORDER                              
  Cand SU(38) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(38) %89:gpr64 = ADDXrr %88:gpr64, %42:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %88
  UpdateRegP: SU(38) %89:gpr64 = ADDXrr %88:gpr64, %42:gpr64
              to GPR32 -1
  Ready @22c
  BotQ.A BotLatency SU(38) 15c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 20
  Executed: 23c
  Critical: 20c, 20 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 15 
Queue BotQ.A: 28 43 41 19 33 23 37 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
BotQ.A RemLatency SU(33) 8c
BotQ.A RemLatency SU(15) 8c
  BotQ.A RemainingLatency 10 + 23c > CritPath 23
Picking from Bot:
  Cand SU(28) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(28) %75:gpr64common = ADDXrr %74:gpr64, %47:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %74
  UpdateRegP: SU(28) %75:gpr64common = ADDXrr %74:gpr64, %47:gpr64
              to GPR32 -1
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 21
  Executed: 24c
  Critical: 21c, 21 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 15 
Queue BotQ.A: 37 43 41 19 33 23 27 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
  BotQ.A RemainingLatency 0 + 24c > CritPath 23
Picking from Bot:
  Cand SU(37) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(37) %88:gpr64 = ADDXrr %87:gpr64, %55:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %55
  UpdateRegP: SU(12) %57:gpr64 = ADDXrr %56:gpr64, %55:gpr64
              to GPR32 -1
  UpdateRegP: SU(20) %67:gpr64 = ADDXrr %66:gpr64, %55:gpr64
              to GPR32 -1
  UpdateRegP: SU(30) %78:gpr64 = ADDXrr %77:gpr64, %55:gpr64
              to GPR32 -1
  UpdateRegP: SU(37) %88:gpr64 = ADDXrr %87:gpr64, %55:gpr64
              to GPR32 -1
  Ready @24c
  BotQ.A BotLatency SU(37) 16c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 22
  Executed: 25c
  Critical: 22c, 22 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 27 43 41 19 33 23 9 15 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
  BotQ.A RemainingLatency 0 + 25c > CritPath 23
Picking from Bot:
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(27) %74:gpr64 = ADDXrr %73:gpr64, %42:gpr64
Bottom Pressure:
FPR8=7
GPR32=14
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  LiveReg: %73
  UpdateRegP: SU(27) %74:gpr64 = ADDXrr %73:gpr64, %42:gpr64
              to GPR32 -1
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 23
  Executed: 26c
  Critical: 23c, 23 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 15 43 41 19 33 23 9 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 43 
  BotQ.A RemainingLatency 0 + 26c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(43) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(43) %94:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
Bottom Pressure:
FPR8=7
GPR32=13
FPR8+ZPR_3b=7
FPR8+ZPR4_with_zsub1_in_ZPR_3b=7
FPR8+ZPR4_with_zsub2_in_ZPR_3b=7
FPR8+ZPR4_with_zsub3_in_ZPR_3b=7
ZPR_4b=7
ZPR=7
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @26c
  BotQ.A BotLatency SU(43) 18c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 24
  Executed: 27c
  Critical: 24c, 24 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 15 9 41 19 33 23 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 27c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(33) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(33) %81:fpr64 = LDRDroX %80:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  GPR32: 14 <= 15(+ 8 livethru)
  LiveReg: %80
  UpdateRegP: SU(33) %81:fpr64 = LDRDroX %80:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @27c
  BotQ.A TopLatency SU(33) 8c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 25
  Executed: 28c
  Critical: 25c, 25 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 
Queue BotQ.A: 15 9 41 19 23 32 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 28c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(32) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(32) %80:gpr64common = ADDXrr %79:gpr64, %47:gpr64
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %79
  UpdateRegP: SU(32) %80:gpr64common = ADDXrr %79:gpr64, %47:gpr64
              to GPR32 -1
  Ready @28c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 26
  Executed: 29c
  Critical: 26c, 26 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 23 31 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 29c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(31) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(31) %79:gpr64 = ADDXrr %78:gpr64, %42:gpr64
Bottom Pressure:
FPR8=6
GPR32=14
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  LiveReg: %78
  UpdateRegP: SU(31) %79:gpr64 = ADDXrr %78:gpr64, %42:gpr64
              to GPR32 -1
  Ready @29c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 27
  Executed: 30c
  Critical: 27c, 27 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 23 26 30 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 30c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(30) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(30) %78:gpr64 = ADDXrr %77:gpr64, %55:gpr64
Bottom Pressure:
FPR8=6
GPR32=13
FPR8+ZPR_3b=6
FPR8+ZPR4_with_zsub1_in_ZPR_3b=6
FPR8+ZPR4_with_zsub2_in_ZPR_3b=6
FPR8+ZPR4_with_zsub3_in_ZPR_3b=6
ZPR_4b=6
ZPR=6
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 28
  Executed: 31c
  Critical: 28c, 28 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 23 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 31c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(23) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(23) %70:fpr64 = LDRDroX %69:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
Bottom Pressure:
FPR8=5
GPR32=14
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  GPR32: 14 <= 15(+ 8 livethru)
  LiveReg: %69
  UpdateRegP: SU(23) %70:fpr64 = LDRDroX %69:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @31c
  BotQ.A TopLatency SU(23) 8c
  *** Max MOps 1 at cycle 31
Cycle: 32 BotQ.A
BotQ.A @32c
  Retired: 29
  Executed: 32c
  Critical: 29c, 29 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 26 22 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 32c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(22) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(22) %69:gpr64common = ADDXrr %68:gpr64, %47:gpr64
Bottom Pressure:
FPR8=5
GPR32=14
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %68
  UpdateRegP: SU(22) %69:gpr64common = ADDXrr %68:gpr64, %47:gpr64
              to GPR32 -1
  Ready @32c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 30
  Executed: 33c
  Critical: 30c, 30 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 26 21 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 33c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(21) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(21) %68:gpr64 = ADDXrr %67:gpr64, %42:gpr64
Bottom Pressure:
FPR8=5
GPR32=14
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  LiveReg: %67
  UpdateRegP: SU(21) %68:gpr64 = ADDXrr %67:gpr64, %42:gpr64
              to GPR32 -1
  Ready @33c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 31
  Executed: 34c
  Critical: 31c, 31 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 26 20 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 34c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(41) REG-MAX                            
  Cand SU(20) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(20) %67:gpr64 = ADDXrr %66:gpr64, %55:gpr64
Bottom Pressure:
FPR8=5
GPR32=13
FPR8+ZPR_3b=5
FPR8+ZPR4_with_zsub1_in_ZPR_3b=5
FPR8+ZPR4_with_zsub2_in_ZPR_3b=5
FPR8+ZPR4_with_zsub3_in_ZPR_3b=5
ZPR_4b=5
ZPR=5
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 32
  Executed: 35c
  Critical: 32c, 32 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 9 41 19 26 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 35c > CritPath 23
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(15) %60:fpr64 = LDRDroX %59:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
Bottom Pressure:
FPR8=4
GPR32=14
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  GPR32: 14 <= 15(+ 8 livethru)
  LiveReg: %59
  UpdateRegP: SU(15) %60:fpr64 = LDRDroX %59:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @35c
  BotQ.A TopLatency SU(15) 8c
  *** Max MOps 1 at cycle 35
Cycle: 36 BotQ.A
BotQ.A @36c
  Retired: 33
  Executed: 36c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 36c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(14) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(14) %59:gpr64common = ADDXrr %58:gpr64, %47:gpr64
Bottom Pressure:
FPR8=4
GPR32=14
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %58
  UpdateRegP: SU(14) %59:gpr64common = ADDXrr %58:gpr64, %47:gpr64
              to GPR32 -1
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 BotQ.A
BotQ.A @37c
  Retired: 34
  Executed: 37c
  Critical: 34c, 34 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 19 13 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 37c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(13) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) %58:gpr64 = ADDXrr %57:gpr64, %42:gpr64
Bottom Pressure:
FPR8=4
GPR32=14
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %57
  UpdateRegP: SU(13) %58:gpr64 = ADDXrr %57:gpr64, %42:gpr64
              to GPR32 -1
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 BotQ.A
BotQ.A @38c
  Retired: 35
  Executed: 38c
  Critical: 35c, 35 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 38c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(12) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) %57:gpr64 = ADDXrr %56:gpr64, %55:gpr64
Bottom Pressure:
FPR8=4
GPR32=13
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 36
  Executed: 39c
  Critical: 36c, 36 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 19 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 39c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(9) BOT-PATH                  7 cycles 
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %65:fpr64 = LDRDroX %64:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
Bottom Pressure:
FPR8=3
GPR32=14
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  GPR32: 14 <= 15(+ 8 livethru)
  LiveReg: %64
  UpdateRegP: SU(19) %65:fpr64 = LDRDroX %64:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @39c
  BotQ.A TopLatency SU(19) 7c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 37
  Executed: 40c
  Critical: 37c, 37 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 11 18 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 40c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(18) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %64:gpr64common = ADDXrr %63:gpr64, %47:gpr64
Bottom Pressure:
FPR8=3
GPR32=14
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %63
  UpdateRegP: SU(18) %64:gpr64common = ADDXrr %63:gpr64, %47:gpr64
              to GPR32 -1
  Ready @40c
  *** Max MOps 1 at cycle 40
Cycle: 41 BotQ.A
BotQ.A @41c
  Retired: 38
  Executed: 41c
  Critical: 38c, 38 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 11 17 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 41c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(17) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(17) %63:gpr64 = ADDXrr %62:gpr64common, %42:gpr64
Bottom Pressure:
FPR8=3
GPR32=13
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @41c
  *** Max MOps 1 at cycle 41
Cycle: 42 BotQ.A
BotQ.A @42c
  Retired: 39
  Executed: 42c
  Critical: 39c, 39 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 9 41 11 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 42c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(9) BOT-PATH                  7 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %51:fpr64 = LDRDroX %48:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 8 livethru)
  LiveReg: %48
  UpdateRegP: SU(9) %51:fpr64 = LDRDroX %48:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @42c
  BotQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 42
Cycle: 43 BotQ.A
BotQ.A @43c
  Retired: 40
  Executed: 43c
  Critical: 40c, 40 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 11 41 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 43c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(6) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %48:gpr64common = ADDXrr %44:gpr64, %47:gpr64
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %44
  UpdateRegP: SU(6) %48:gpr64common = ADDXrr %44:gpr64, %47:gpr64
              to GPR32 -1
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 BotQ.A
BotQ.A @44c
  Retired: 41
  Executed: 44c
  Critical: 41c, 41 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 11 41 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 44c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(5) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %47:gpr64 = UBFMXri %46:gpr64, 61, 60
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %46
  UpdateRegP: SU(5) %47:gpr64 = UBFMXri %46:gpr64, 61, 60
              to GPR32 -1
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 BotQ.A
BotQ.A @45c
  Retired: 42
  Executed: 45c
  Critical: 42c, 42 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 11 41 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 45c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
  Cand SU(2) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %44:gpr64 = ADDXrr %43:gpr64common, %42:gpr64
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @45c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 45
Cycle: 46 BotQ.A
BotQ.A @46c
  Retired: 43
  Executed: 46c
  Critical: 43c, 43 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 26 11 41 8 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 46c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(11) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) %55:gpr64 = MADDXrrr %52:gpr64, %54:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %52
  UpdateRegP: SU(11) %55:gpr64 = MADDXrrr %52:gpr64, %54:gpr64, $xzr
              to GPR32 -1
  Ready @46c
  BotQ.A BotLatency SU(11) 19c
  *** Max MOps 1 at cycle 46
Cycle: 47 BotQ.A
BotQ.A @47c
  Retired: 44
  Executed: 47c
  Critical: 44c, 44 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 26 1 41 8 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 47c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %50:gpr64 = UBFMXri %49:gpr64, 61, 60
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %49
  UpdateRegP: SU(8) %50:gpr64 = UBFMXri %49:gpr64, 61, 60
              to GPR32 -1
  Ready @47c
  BotQ.A TopLatency SU(8) 4c
  *** Max MOps 1 at cycle 47
Cycle: 48 BotQ.A
BotQ.A @48c
  Retired: 45
  Executed: 48c
  Critical: 45c, 45 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 7 
Queue BotQ.A: 26 1 41 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 48c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %46:gpr64 = ADDXrs %45:gpr64, %45:gpr64, 2
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %45
  UpdateRegP: SU(4) %46:gpr64 = ADDXrs %45:gpr64, %45:gpr64, 2
              to GPR32 -1
  Ready @48c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 48
Cycle: 49 BotQ.A
BotQ.A @49c
  Retired: 46
  Executed: 49c
  Critical: 46c, 46 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 7 3 
Queue BotQ.A: 26 1 41 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 49c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %42:gpr64 = MADDXrrr %39:gpr64, %41:gpr64, $xzr
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %39
  UpdateRegP: SU(1) %42:gpr64 = MADDXrrr %39:gpr64, %41:gpr64, $xzr
              to GPR32 -1
  Ready @49c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 49
Cycle: 50 BotQ.A
BotQ.A @50c
  Retired: 47
  Executed: 50c
  Critical: 47c, 47 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 7 3 
Queue BotQ.A: 26 41 10 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 41 
  BotQ.A RemainingLatency 0 + 50c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
  Cand SU(41) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(41) %92:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
Bottom Pressure:
FPR8=1
GPR32=13
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @50c
  *** Max MOps 1 at cycle 50
Cycle: 51 BotQ.A
BotQ.A @51c
  Retired: 48
  Executed: 51c
  Critical: 48c, 48 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 26 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 26 
  BotQ.A RemainingLatency 0 + 51c > CritPath 23
Picking from Bot:
  Cand SU(26) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(26) %73:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
Bottom Pressure:
FPR8=1
GPR32=12
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @51c
  BotQ.A BotLatency SU(26) 20c
  *** Max MOps 1 at cycle 51
Cycle: 52 BotQ.A
BotQ.A @52c
  Retired: 49
  Executed: 52c
  Critical: 49c, 49 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 10 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 10 
  BotQ.A RemainingLatency 0 + 52c > CritPath 23
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %52:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
Bottom Pressure:
FPR8=1
GPR32=11
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @52c
  BotQ.A BotLatency SU(10) 23c
  *** Max MOps 1 at cycle 52
Cycle: 53 BotQ.A
BotQ.A @53c
  Retired: 50
  Executed: 53c
  Critical: 50c, 50 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 7 
  BotQ.A RemainingLatency 0 + 53c > CritPath 23
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %49:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
Bottom Pressure:
FPR8=1
GPR32=10
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @53c
  *** Max MOps 1 at cycle 53
Cycle: 54 BotQ.A
BotQ.A @54c
  Retired: 51
  Executed: 54c
  Critical: 51c, 51 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 54c > CritPath 23
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %45:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
Bottom Pressure:
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @54c
  *** Max MOps 1 at cycle 54
Cycle: 55 BotQ.A
BotQ.A @55c
  Retired: 52
  Executed: 55c
  Critical: 52c, 52 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %39:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
Bottom Pressure:
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR32: 14 <= 15(+ 8 livethru)
  Ready @55c
  *** Max MOps 1 at cycle 55
Cycle: 56 BotQ.A
BotQ.A @56c
  Retired: 53
  Executed: 56c
  Critical: 53c, 53 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %39:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(3):   %45:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(7):   %49:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(10):   %52:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
SU(26):   %73:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
SU(41):   %92:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
SU(1):   %42:gpr64 = MADDXrrr %39:gpr64, %41:gpr64, $xzr
SU(4):   %46:gpr64 = ADDXrs %45:gpr64, %45:gpr64, 2
SU(8):   %50:gpr64 = UBFMXri %49:gpr64, 61, 60
SU(11):   %55:gpr64 = MADDXrrr %52:gpr64, %54:gpr64, $xzr
SU(2):   %44:gpr64 = ADDXrr %43:gpr64common, %42:gpr64
SU(5):   %47:gpr64 = UBFMXri %46:gpr64, 61, 60
SU(6):   %48:gpr64common = ADDXrr %44:gpr64, %47:gpr64
SU(9):   %51:fpr64 = LDRDroX %48:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
SU(17):   %63:gpr64 = ADDXrr %62:gpr64common, %42:gpr64
SU(18):   %64:gpr64common = ADDXrr %63:gpr64, %47:gpr64
SU(19):   %65:fpr64 = LDRDroX %64:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
SU(12):   %57:gpr64 = ADDXrr %56:gpr64, %55:gpr64
SU(13):   %58:gpr64 = ADDXrr %57:gpr64, %42:gpr64
SU(14):   %59:gpr64common = ADDXrr %58:gpr64, %47:gpr64
SU(15):   %60:fpr64 = LDRDroX %59:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
SU(20):   %67:gpr64 = ADDXrr %66:gpr64, %55:gpr64
SU(21):   %68:gpr64 = ADDXrr %67:gpr64, %42:gpr64
SU(22):   %69:gpr64common = ADDXrr %68:gpr64, %47:gpr64
SU(23):   %70:fpr64 = LDRDroX %69:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
SU(30):   %78:gpr64 = ADDXrr %77:gpr64, %55:gpr64
SU(31):   %79:gpr64 = ADDXrr %78:gpr64, %42:gpr64
SU(32):   %80:gpr64common = ADDXrr %79:gpr64, %47:gpr64
SU(33):   %81:fpr64 = LDRDroX %80:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
SU(43):   %94:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
SU(27):   %74:gpr64 = ADDXrr %73:gpr64, %42:gpr64
SU(37):   %88:gpr64 = ADDXrr %87:gpr64, %55:gpr64
SU(28):   %75:gpr64common = ADDXrr %74:gpr64, %47:gpr64
SU(38):   %89:gpr64 = ADDXrr %88:gpr64, %42:gpr64
SU(16):   %61:fpr64 = FMULDrr %51:fpr64, %60:fpr64
SU(29):   %76:fpr64 = LDRDroX %75:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
SU(39):   %90:gpr64common = ADDXrr %89:gpr64, %47:gpr64
SU(24):   %71:fpr64 = FMULDrr %65:fpr64, %70:fpr64
SU(40):   %91:fpr64 = LDRDroX %90:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
SU(34):   %82:fpr64 = FMULDrr %76:fpr64, %81:fpr64
SU(44):   %95:gpr64 = ADDXrr %94:gpr64, %42:gpr64
SU(45):   %96:gpr64common = ADDXrr %95:gpr64, %47:gpr64
SU(42):   %93:fpr64 = FMULDrr %91:fpr64, %92:fpr64
SU(46):   %97:fpr64 = LDRDroX %96:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
SU(25):   %72:fpr64 = FADDDrr %61:fpr64, %71:fpr64
SU(35):   %83:fpr64 = FADDDrr %72:fpr64, %82:fpr64
SU(36):   %86:fpr64 = FMULDrr %83:fpr64, %85:fpr64
SU(47):   %98:fpr64 = FMULDrr %93:fpr64, %97:fpr64
SU(48):   %99:fpr64 = FADDDrr %86:fpr64, %98:fpr64
SU(49):   STRDroX %99:fpr64, %75:gpr64common, %50:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
SU(50):   %100:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
SU(51):   %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0
SU(52):   STRWui %101:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)

********** MI Scheduling **********
laplacian:%bb.43 for.inc219
  From: %37:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.39
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %37:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%37
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%37
  Successors:
    SU(2): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(2):   STRWui %38:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%38
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.39
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %38:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %37:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   %37:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
SU(1):   %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0
SU(2):   STRWui %38:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)

********** MI Scheduling **********
laplacian:%bb.44 for.inc222
  From: %32:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.37
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %32:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%32
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%32
  Successors:
    SU(2): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(2):   STRWui %33:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%33
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.37
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %33:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %32:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   %32:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
SU(1):   %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0
SU(2):   STRWui %33:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)

********** INTERVALS **********
W0 [0B,48r:0)[272r,320r:3)[1696r,1744r:2)[3160r,3168r:1)  0@0B-phi 1@3160r 2@1696r 3@272r
W1 [0B,32r:0)[308r,320r:3)[1732r,1744r:2)[3156r,3168r:1)  0@0B-phi 1@3156r 2@1732r 3@308r
W2 [0B,16r:0)  0@0B-phi
%0 [48r,168r:0)  0@48r weight:0.000000e+00
%1 [32r,176r:0)  0@32r weight:0.000000e+00
%2 [16r,184r:0)  0@16r weight:0.000000e+00
%3 [112r,128r:0)  0@112r weight:0.000000e+00
%4 [128r,192r:0)  0@128r weight:0.000000e+00
%5 [144r,160r:0)  0@144r weight:0.000000e+00
%6 [160r,192r:0)  0@160r weight:0.000000e+00
%7 [192r,200r:0)  0@192r weight:0.000000e+00
%8 [312r,1616B:0)  0@312r weight:0.000000e+00
%12 [528r,544r:0)  0@528r weight:0.000000e+00
%14 [1736r,3040B:0)  0@1736r weight:0.000000e+00
%18 [1952r,1968r:0)  0@1952r weight:0.000000e+00
%20 [3056r,3216r:0)  0@3056r weight:0.000000e+00
%24 [3376r,3392r:0)  0@3376r weight:0.000000e+00
%27 [4720r,4736r:0)  0@4720r weight:0.000000e+00
%30 [4848r,4864r:0)  0@4848r weight:0.000000e+00
%32 [6160r,6168r:0)  0@6160r weight:0.000000e+00
%33 [6168r,6176r:0)  0@6168r weight:0.000000e+00
%35 [4976r,4992r:0)  0@4976r weight:0.000000e+00
%37 [6120r,6128r:0)  0@6120r weight:0.000000e+00
%38 [6128r,6136r:0)  0@6128r weight:0.000000e+00
%39 [5056r,5720r:0)  0@5056r weight:0.000000e+00
%41 [4512r,6192B:0)  0@4512r weight:0.000000e+00
%42 [5720r,6000r:0)  0@5720r weight:0.000000e+00
%43 [4544r,6192B:0)  0@4544r weight:0.000000e+00
%44 [5752r,5768r:0)  0@5752r weight:0.000000e+00
%45 [5104r,5728r:0)  0@5104r weight:0.000000e+00
%46 [5728r,5760r:0)  0@5728r weight:0.000000e+00
%47 [5760r,6008r:0)  0@5760r weight:0.000000e+00
%48 [5768r,5776r:0)  0@5768r weight:0.000000e+00
%49 [5168r,5736r:0)  0@5168r weight:0.000000e+00
%50 [5736r,6072r:0)  0@5736r weight:0.000000e+00
%51 [5776r,5952r:0)  0@5776r weight:0.000000e+00
%52 [5216r,5744r:0)  0@5216r weight:0.000000e+00
%54 [4560r,6192B:0)  0@4560r weight:0.000000e+00
%55 [5744r,5928r:0)  0@5744r weight:0.000000e+00
%56 [4592r,6192B:0)  0@4592r weight:0.000000e+00
%57 [5808r,5816r:0)  0@5808r weight:0.000000e+00
%58 [5816r,5824r:0)  0@5816r weight:0.000000e+00
%59 [5824r,5832r:0)  0@5824r weight:0.000000e+00
%60 [5832r,5952r:0)  0@5832r weight:0.000000e+00
%61 [5952r,6032r:0)  0@5952r weight:0.000000e+00
%62 [4608r,6192B:0)  0@4608r weight:0.000000e+00
%63 [5784r,5792r:0)  0@5784r weight:0.000000e+00
%64 [5792r,5800r:0)  0@5792r weight:0.000000e+00
%65 [5800r,5976r:0)  0@5800r weight:0.000000e+00
%66 [4676r,6192B:0)  0@4676r weight:0.000000e+00
%67 [5840r,5848r:0)  0@5840r weight:0.000000e+00
%68 [5848r,5856r:0)  0@5848r weight:0.000000e+00
%69 [5856r,5864r:0)  0@5856r weight:0.000000e+00
%70 [5864r,5976r:0)  0@5864r weight:0.000000e+00
%71 [5976r,6032r:0)  0@5976r weight:0.000000e+00
%72 [6032r,6040r:0)  0@6032r weight:0.000000e+00
%73 [5472r,5920r:0)  0@5472r weight:0.000000e+00
%74 [5920r,5936r:0)  0@5920r weight:0.000000e+00
%75 [5936r,6072r:0)  0@5936r weight:0.000000e+00
%76 [5960r,5992r:0)  0@5960r weight:0.000000e+00
%77 [4680r,6192B:0)  0@4680r weight:0.000000e+00
%78 [5872r,5880r:0)  0@5872r weight:0.000000e+00
%79 [5880r,5888r:0)  0@5880r weight:0.000000e+00
%80 [5888r,5896r:0)  0@5888r weight:0.000000e+00
%81 [5896r,5992r:0)  0@5896r weight:0.000000e+00
%82 [5992r,6040r:0)  0@5992r weight:0.000000e+00
%83 [6040r,6048r:0)  0@6040r weight:0.000000e+00
%84 [4656r,4672r:0)  0@4656r weight:0.000000e+00
%85 [4672r,6192B:0)  0@4672r weight:0.000000e+00
%86 [6048r,6064r:0)  0@6048r weight:0.000000e+00
%87 [4688r,6192B:0)  0@4688r weight:0.000000e+00
%88 [5928r,5944r:0)  0@5928r weight:0.000000e+00
%89 [5944r,5968r:0)  0@5944r weight:0.000000e+00
%90 [5968r,5984r:0)  0@5968r weight:0.000000e+00
%91 [5984r,6016r:0)  0@5984r weight:0.000000e+00
%92 [5712r,6016r:0)  0@5712r weight:0.000000e+00
%93 [6016r,6056r:0)  0@6016r weight:0.000000e+00
%94 [5912r,6000r:0)  0@5912r weight:0.000000e+00
%95 [6000r,6008r:0)  0@6000r weight:0.000000e+00
%96 [6008r,6024r:0)  0@6008r weight:0.000000e+00
%97 [6024r,6056r:0)  0@6024r weight:0.000000e+00
%98 [6056r,6064r:0)  0@6056r weight:0.000000e+00
%99 [6064r,6072r:0)  0@6064r weight:0.000000e+00
%100 [6080r,6088r:0)  0@6080r weight:0.000000e+00
%101 [6088r,6096r:0)  0@6088r weight:0.000000e+00
%103 [3504r,3520r:0)  0@3504r weight:0.000000e+00
%105 [4400r,4416r:0)  0@4400r weight:0.000000e+00
%106 [4416r,4432r:0)  0@4416r weight:0.000000e+00
%108 [3632r,3648r:0)  0@3632r weight:0.000000e+00
%110 [4320r,4336r:0)  0@4320r weight:0.000000e+00
%111 [4336r,4352r:0)  0@4336r weight:0.000000e+00
%113 [3760r,3776r:0)  0@3760r weight:0.000000e+00
%115 [4240r,4256r:0)  0@4240r weight:0.000000e+00
%116 [4256r,4272r:0)  0@4256r weight:0.000000e+00
%117 [3840r,4024r:0)  0@3840r weight:0.000000e+00
%118 [3856r,4080r:0)  0@3856r weight:0.000000e+00
%120 [3280r,4464B:0)  0@3280r weight:0.000000e+00
%122 [4024r,4088r:0)  0@4024r weight:0.000000e+00
%123 [3888r,4032r:0)  0@3888r weight:0.000000e+00
%124 [4032r,4084r:0)  0@4032r weight:0.000000e+00
%125 [4084r,4096r:0)  0@4084r weight:0.000000e+00
%126 [4088r,4144r:0)  0@4088r weight:0.000000e+00
%127 [3952r,4040r:0)  0@3952r weight:0.000000e+00
%128 [4040r,4144r:0)  0@4040r weight:0.000000e+00
%129 [4120r,4136r:0)  0@4120r weight:0.000000e+00
%130 [4000r,4048r:0)  0@4000r weight:0.000000e+00
%131 [4016r,4112r:0)  0@4016r weight:0.000000e+00
%133 [4048r,4096r:0)  0@4048r weight:0.000000e+00
%134 [4096r,4104r:0)  0@4096r weight:0.000000e+00
%135 [4104r,4128r:0)  0@4104r weight:0.000000e+00
%137 [3312r,4464B:0)  0@3312r weight:0.000000e+00
%139 [3344r,4464B:0)  0@3344r weight:0.000000e+00
%140 [4080r,4112r:0)  0@4080r weight:0.000000e+00
%141 [4112r,4128r:0)  0@4112r weight:0.000000e+00
%142 [4128r,4136r:0)  0@4128r weight:0.000000e+00
%143 [4136r,4144r:0)  0@4136r weight:0.000000e+00
%144 [4160r,4176r:0)  0@4160r weight:0.000000e+00
%145 [4176r,4192r:0)  0@4176r weight:0.000000e+00
%147 [2080r,2096r:0)  0@2080r weight:0.000000e+00
%149 [2976r,2992r:0)  0@2976r weight:0.000000e+00
%150 [2992r,3008r:0)  0@2992r weight:0.000000e+00
%152 [2208r,2224r:0)  0@2208r weight:0.000000e+00
%154 [2928r,2936r:0)  0@2928r weight:0.000000e+00
%155 [2936r,2944r:0)  0@2936r weight:0.000000e+00
%157 [2336r,2352r:0)  0@2336r weight:0.000000e+00
%159 [2888r,2896r:0)  0@2888r weight:0.000000e+00
%160 [2896r,2904r:0)  0@2896r weight:0.000000e+00
%161 [2416r,2740r:0)  0@2416r weight:0.000000e+00
%163 [1856r,3040B:0)  0@1856r weight:0.000000e+00
%164 [2740r,2784r:0)  0@2740r weight:0.000000e+00
%166 [2784r,2800r:0)  0@2784r weight:0.000000e+00
%167 [2464r,2776r:0)  0@2464r weight:0.000000e+00
%168 [2776r,2792r:0)  0@2776r weight:0.000000e+00
%169 [2792r,2808r:0)  0@2792r weight:0.000000e+00
%170 [2800r,2856r:0)  0@2800r weight:0.000000e+00
%171 [2584r,2744r:0)  0@2584r weight:0.000000e+00
%172 [2744r,2856r:0)  0@2744r weight:0.000000e+00
%173 [2824r,2848r:0)  0@2824r weight:0.000000e+00
%174 [2576r,2752r:0)  0@2576r weight:0.000000e+00
%175 [2752r,2760r:0)  0@2752r weight:0.000000e+00
%176 [2608r,2816r:0)  0@2608r weight:0.000000e+00
%178 [1888r,3040B:0)  0@1888r weight:0.000000e+00
%180 [2760r,2768r:0)  0@2760r weight:0.000000e+00
%181 [2768r,2840r:0)  0@2768r weight:0.000000e+00
%182 [1920r,3040B:0)  0@1920r weight:0.000000e+00
%183 [2808r,2816r:0)  0@2808r weight:0.000000e+00
%184 [2816r,2840r:0)  0@2816r weight:0.000000e+00
%185 [2840r,2848r:0)  0@2840r weight:0.000000e+00
%186 [2848r,2856r:0)  0@2848r weight:0.000000e+00
%187 [2736r,2832r:0)  0@2736r weight:0.000000e+00
%188 [2832r,2864r:0)  0@2832r weight:0.000000e+00
%190 [656r,672r:0)  0@656r weight:0.000000e+00
%192 [1552r,1568r:0)  0@1552r weight:0.000000e+00
%193 [1568r,1584r:0)  0@1568r weight:0.000000e+00
%195 [784r,800r:0)  0@784r weight:0.000000e+00
%197 [1504r,1512r:0)  0@1504r weight:0.000000e+00
%198 [1512r,1520r:0)  0@1512r weight:0.000000e+00
%200 [912r,928r:0)  0@912r weight:0.000000e+00
%202 [1464r,1472r:0)  0@1464r weight:0.000000e+00
%203 [1472r,1480r:0)  0@1472r weight:0.000000e+00
%204 [992r,1336r:0)  0@992r weight:0.000000e+00
%206 [432r,1616B:0)  0@432r weight:0.000000e+00
%207 [1336r,1360r:0)  0@1336r weight:0.000000e+00
%209 [1360r,1376r:0)  0@1360r weight:0.000000e+00
%210 [1040r,1344r:0)  0@1040r weight:0.000000e+00
%211 [1344r,1368r:0)  0@1344r weight:0.000000e+00
%212 [1368r,1384r:0)  0@1368r weight:0.000000e+00
%213 [1376r,1432r:0)  0@1376r weight:0.000000e+00
%214 [1104r,1316r:0)  0@1104r weight:0.000000e+00
%215 [1316r,1432r:0)  0@1316r weight:0.000000e+00
%216 [1400r,1424r:0)  0@1400r weight:0.000000e+00
%217 [1152r,1392r:0)  0@1152r weight:0.000000e+00
%219 [464r,1616B:0)  0@464r weight:0.000000e+00
%221 [496r,1616B:0)  0@496r weight:0.000000e+00
%222 [1320r,1328r:0)  0@1320r weight:0.000000e+00
%223 [1328r,1416r:0)  0@1328r weight:0.000000e+00
%224 [1200r,1352r:0)  0@1200r weight:0.000000e+00
%225 [1352r,1384r:0)  0@1352r weight:0.000000e+00
%226 [1384r,1392r:0)  0@1384r weight:0.000000e+00
%227 [1392r,1416r:0)  0@1392r weight:0.000000e+00
%228 [1416r,1424r:0)  0@1416r weight:0.000000e+00
%229 [1424r,1432r:0)  0@1424r weight:0.000000e+00
%230 [1312r,1408r:0)  0@1312r weight:0.000000e+00
%231 [1408r,1440r:0)  0@1408r weight:0.000000e+00
RegMasks: 320r 1744r 3168r
********** MACHINEINSTRS **********
# Machine code for function laplacian: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=1000, align=16, at location [SP]
  fi#9: size=1000, align=16, at location [SP]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 5.000000e-03, align=8
Function Live Ins: $x0 in %0, $x1 in %1, $w2 in %2

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $x0, $x1, $w2
16B	  %2:gpr32 = COPY $w2
32B	  %1:gpr64 = COPY $x1
48B	  %0:gpr64 = COPY $x0
112B	  %3:gpr64temp = ADRP target-flags(aarch64-page) @dtime
128B	  %4:fpr64 = LDRDui %3:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
144B	  %5:gpr64temp = ADRP target-flags(aarch64-page) %const.0
160B	  %6:fpr64 = LDRDui %5:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
168B	  STRXui %0:gpr64, %stack.0.r.addr, 0 :: (store 8 into %ir.r.addr)
176B	  STRXui %1:gpr64, %stack.1.u.addr, 0 :: (store 8 into %ir.u.addr)
184B	  STRWui %2:gpr32, %stack.2.sizei.addr, 0 :: (store 4 into %ir.sizei.addr)
192B	  %7:fpr64 = FDIVDrr %6:fpr64, %4:fpr64
200B	  STRDui %7:fpr64, %stack.3.rdtime, 0 :: (store 8 into %ir.rdtime)
208B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
272B	  $x0 = ADDXri %stack.8.tm1, 0, 0
304B	  $d0 = FMOVD0
308B	  $w1 = MOVi32imm 125
312B	  %8:gpr64common = ADDXri %stack.8.tm1, 0, 0
320B	  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
336B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
352B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
368B	  PCN_STACKMAP 0, 0, 0, %stack.8.tm1, 0, 0, %stack.4.i, 0, 0, %stack.7.iz, 0, 0, %stack.5.j, 0, 0, %stack.6.k, 0, 0, %stack.0.r.addr, 0, 0, %stack.3.rdtime, 0, 0, %stack.2.sizei.addr, 0, 0, %stack.8.tm1, 0, 0, %stack.9.tm2, 0, 0, %stack.1.u.addr, 0, 0, %stack.8.tm1, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.4.i, align 4), (load 8 from %stack.7.iz, align 4), (load 8 from %stack.5.j, align 4), (load 8 from %stack.6.k, align 4), (load 8 from %stack.0.r.addr), (load 8 from %stack.3.rdtime), (load 8 from %stack.2.sizei.addr, align 4), (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.1.u.addr), (load 8 from %stack.8.tm1, align 16)
384B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
416B	  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
432B	  undef %206.sub_32:gpr64 = MOVi32imm 200
464B	  undef %219.sub_32:gpr64 = MOVi32imm 40
496B	  %221:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

512B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.11
	  successors: %bb.2(0x7c000000), %bb.12(0x04000000); %bb.2(96.88%), %bb.12(3.12%)

528B	  %12:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
544B	  dead $wzr = SUBSWri %12:gpr32common, 4, 0, implicit-def $nzcv
560B	  Bcc 12, %bb.12, implicit killed $nzcv
576B	  B %bb.2

592B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

624B	  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)

640B	bb.3.for.cond1:
	; predecessors: %bb.2, %bb.10
	  successors: %bb.4(0x7c000000), %bb.11(0x04000000); %bb.4(96.88%), %bb.11(3.12%)

656B	  %190:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
672B	  dead $wzr = SUBSWri %190:gpr32common, 4, 0, implicit-def $nzcv
688B	  Bcc 12, %bb.11, implicit killed $nzcv
704B	  B %bb.4

720B	bb.4.for.body3:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

752B	  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

768B	bb.5.for.cond4:
	; predecessors: %bb.4, %bb.9
	  successors: %bb.6(0x7c000000), %bb.10(0x04000000); %bb.6(96.88%), %bb.10(3.12%)

784B	  %195:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
800B	  dead $wzr = SUBSWri %195:gpr32common, 4, 0, implicit-def $nzcv
816B	  Bcc 12, %bb.10, implicit killed $nzcv
832B	  B %bb.6

848B	bb.6.for.body6:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

880B	  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

896B	bb.7.for.cond7:
	; predecessors: %bb.6, %bb.8
	  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)

912B	  %200:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
928B	  dead $wzr = SUBSWri %200:gpr32common, 4, 0, implicit-def $nzcv
944B	  Bcc 12, %bb.9, implicit killed $nzcv
960B	  B %bb.8

976B	bb.8.for.body9:
	; predecessors: %bb.7
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

992B	  %204:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
1040B	  %210:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
1104B	  %214:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
1152B	  %217:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
1200B	  %224:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
1312B	  %230:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
1316B	  %215:gpr64 = UBFMXri %214:gpr64, 61, 60
1320B	  %222:gpr64common = MADDXrrr %217:gpr64, %219:gpr64, %221:gpr64
1328B	  %223:fpr64 = LDRDroX %222:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx17)
1336B	  %207:gpr64 = MADDXrrr %204:gpr64, %206:gpr64, $xzr
1344B	  %211:gpr64 = ADDXrs %210:gpr64, %210:gpr64, 2
1352B	  %225:gpr64 = ADDXrr %224:gpr64, %207:gpr64
1360B	  %209:gpr64 = ADDXrr %8:gpr64common, %207:gpr64
1368B	  %212:gpr64 = UBFMXri %211:gpr64, 61, 60
1376B	  %213:gpr64common = ADDXrr %209:gpr64, %212:gpr64
1384B	  %226:gpr64common = ADDXrr %225:gpr64, %212:gpr64
1392B	  %227:fpr64 = LDRDroX %226:gpr64common, %217:gpr64, 0, 1 :: (load 8 from %ir.arrayidx23)
1400B	  %216:fpr64 = LDRDroX %213:gpr64common, %215:gpr64, 0, 0 :: (load 8 from %ir.arrayidx13)
1408B	  %231:gpr32common = nsw ADDWri %230:gpr32common, 1, 0
1416B	  %228:fpr64 = FMULDrr %223:fpr64, %227:fpr64
1424B	  %229:fpr64 = FADDDrr %216:fpr64, %228:fpr64
1432B	  STRDroX %229:fpr64, %213:gpr64common, %215:gpr64, 0, 0 :: (store 8 into %ir.arrayidx29)
1440B	  STRWui %231:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
1448B	  B %bb.7

1456B	bb.9.for.inc30:
	; predecessors: %bb.7
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1464B	  %202:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
1472B	  %203:gpr32common = nsw ADDWri %202:gpr32common, 1, 0
1480B	  STRWui %203:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
1488B	  B %bb.5

1496B	bb.10.for.inc33:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1504B	  %197:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
1512B	  %198:gpr32common = nsw ADDWri %197:gpr32common, 1, 0
1520B	  STRWui %198:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
1528B	  B %bb.3

1536B	bb.11.for.inc36:
	; predecessors: %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

1552B	  %192:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
1568B	  %193:gpr32common = nsw ADDWri %192:gpr32common, 1, 0
1584B	  STRWui %193:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
1600B	  B %bb.1

1616B	bb.12.for.end38:
	; predecessors: %bb.1
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

1632B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
1696B	  $x0 = ADDXri %stack.9.tm2, 0, 0
1728B	  $d0 = FMOVD0
1732B	  $w1 = MOVi32imm 125
1736B	  %14:gpr64common = ADDXri %stack.9.tm2, 0, 0
1744B	  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
1760B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
1776B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
1792B	  PCN_STACKMAP 1, 0, 0, %stack.9.tm2, 0, 0, %stack.4.i, 0, 0, %stack.7.iz, 0, 0, %stack.5.j, 0, 0, %stack.6.k, 0, 0, %stack.0.r.addr, 0, 0, %stack.3.rdtime, 0, 0, %stack.2.sizei.addr, 0, 0, %stack.8.tm1, 0, 0, %stack.9.tm2, 0, 0, %stack.1.u.addr, 0, 0, %stack.9.tm2, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.4.i, align 4), (load 8 from %stack.7.iz, align 4), (load 8 from %stack.5.j, align 4), (load 8 from %stack.6.k, align 4), (load 8 from %stack.0.r.addr), (load 8 from %stack.3.rdtime), (load 8 from %stack.2.sizei.addr, align 4), (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.1.u.addr), (load 8 from %stack.9.tm2, align 16)
1808B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
1840B	  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)
1856B	  undef %163.sub_32:gpr64 = MOVi32imm 200
1888B	  undef %178.sub_32:gpr64 = MOVi32imm 40
1920B	  %182:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

1936B	bb.13.for.cond40:
	; predecessors: %bb.12, %bb.23
	  successors: %bb.14(0x7c000000), %bb.24(0x04000000); %bb.14(96.88%), %bb.24(3.12%)

1952B	  %18:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
1968B	  dead $wzr = SUBSWri %18:gpr32common, 4, 0, implicit-def $nzcv
1984B	  Bcc 12, %bb.24, implicit killed $nzcv
2000B	  B %bb.14

2016B	bb.14.for.body42:
	; predecessors: %bb.13
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2048B	  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)

2064B	bb.15.for.cond43:
	; predecessors: %bb.14, %bb.22
	  successors: %bb.16(0x7c000000), %bb.23(0x04000000); %bb.16(96.88%), %bb.23(3.12%)

2080B	  %147:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
2096B	  dead $wzr = SUBSWri %147:gpr32common, 4, 0, implicit-def $nzcv
2112B	  Bcc 12, %bb.23, implicit killed $nzcv
2128B	  B %bb.16

2144B	bb.16.for.body45:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2176B	  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

2192B	bb.17.for.cond46:
	; predecessors: %bb.16, %bb.21
	  successors: %bb.18(0x7c000000), %bb.22(0x04000000); %bb.18(96.88%), %bb.22(3.12%)

2208B	  %152:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
2224B	  dead $wzr = SUBSWri %152:gpr32common, 4, 0, implicit-def $nzcv
2240B	  Bcc 12, %bb.22, implicit killed $nzcv
2256B	  B %bb.18

2272B	bb.18.for.body48:
	; predecessors: %bb.17
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2304B	  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

2320B	bb.19.for.cond49:
	; predecessors: %bb.18, %bb.20
	  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)

2336B	  %157:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
2352B	  dead $wzr = SUBSWri %157:gpr32common, 4, 0, implicit-def $nzcv
2368B	  Bcc 12, %bb.21, implicit killed $nzcv
2384B	  B %bb.20

2400B	bb.20.for.body51:
	; predecessors: %bb.19
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

2416B	  %161:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
2464B	  %167:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
2576B	  %174:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
2584B	  %171:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
2608B	  %176:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
2736B	  %187:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
2740B	  %164:gpr64 = MADDXrrr %161:gpr64, %163:gpr64, $xzr
2744B	  %172:gpr64 = UBFMXri %171:gpr64, 61, 60
2752B	  %175:gpr64 = ADDXrr %174:gpr64, %164:gpr64
2760B	  %180:gpr64common = MADDXrrr %176:gpr64, %178:gpr64, %175:gpr64
2768B	  %181:fpr64 = LDRDroX %180:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx63)
2776B	  %168:gpr64 = ADDXrs %167:gpr64, %167:gpr64, 2
2784B	  %166:gpr64 = ADDXrr %14:gpr64common, %164:gpr64
2792B	  %169:gpr64 = UBFMXri %168:gpr64, 61, 60
2800B	  %170:gpr64common = ADDXrr %166:gpr64, %169:gpr64
2808B	  %183:gpr64common = ADDXrr %182:gpr64, %169:gpr64
2816B	  %184:fpr64 = LDRDroX %183:gpr64common, %176:gpr64, 0, 1 :: (load 8 from %ir.arrayidx67)
2824B	  %173:fpr64 = LDRDroX %170:gpr64common, %172:gpr64, 0, 0 :: (load 8 from %ir.arrayidx57)
2832B	  %188:gpr32common = nsw ADDWri %187:gpr32common, 1, 0
2840B	  %185:fpr64 = FMULDrr %181:fpr64, %184:fpr64
2848B	  %186:fpr64 = FADDDrr %173:fpr64, %185:fpr64
2856B	  STRDroX %186:fpr64, %170:gpr64common, %172:gpr64, 0, 0 :: (store 8 into %ir.arrayidx75)
2864B	  STRWui %188:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
2872B	  B %bb.19

2880B	bb.21.for.inc79:
	; predecessors: %bb.19
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2888B	  %159:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
2896B	  %160:gpr32common = nsw ADDWri %159:gpr32common, 1, 0
2904B	  STRWui %160:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
2912B	  B %bb.17

2920B	bb.22.for.inc82:
	; predecessors: %bb.17
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2928B	  %154:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
2936B	  %155:gpr32common = nsw ADDWri %154:gpr32common, 1, 0
2944B	  STRWui %155:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
2952B	  B %bb.15

2960B	bb.23.for.inc85:
	; predecessors: %bb.15
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

2976B	  %149:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
2992B	  %150:gpr32common = nsw ADDWri %149:gpr32common, 1, 0
3008B	  STRWui %150:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
3024B	  B %bb.13

3040B	bb.24.for.end87:
	; predecessors: %bb.13
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

3056B	  %20:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
3072B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
3152B	  $d0 = FMOVD0
3156B	  $w1 = MOVi32imm 125
3160B	  $x0 = COPY %20:gpr64
3168B	  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit-def $sp
3184B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp
3200B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
3216B	  PCN_STACKMAP 2, 0, 0, %stack.4.i, 0, 0, %stack.7.iz, 0, 0, %stack.5.j, 0, 0, %stack.6.k, 0, 0, %stack.0.r.addr, 0, 0, %stack.3.rdtime, 0, 0, %stack.2.sizei.addr, 0, 0, %stack.8.tm1, 0, 0, %stack.9.tm2, 0, 0, %stack.1.u.addr, 0, %20:gpr64, %20:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.i, align 4), (load 8 from %stack.7.iz, align 4), (load 8 from %stack.5.j, align 4), (load 8 from %stack.6.k, align 4), (load 8 from %stack.0.r.addr), (load 8 from %stack.3.rdtime), (load 8 from %stack.2.sizei.addr, align 4), (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.1.u.addr)
3232B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
3264B	  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
3280B	  undef %120.sub_32:gpr64 = MOVi32imm 200
3312B	  undef %137.sub_32:gpr64 = MOVi32imm 40
3344B	  %139:gpr64 = MOVaddr target-flags(aarch64-page) @wdtdr, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr

3360B	bb.25.for.cond88:
	; predecessors: %bb.24, %bb.35
	  successors: %bb.26(0x7c000000), %bb.36(0x04000000); %bb.26(96.88%), %bb.36(3.12%)

3376B	  %24:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
3392B	  dead $wzr = SUBSWri %24:gpr32common, 4, 0, implicit-def $nzcv
3408B	  Bcc 12, %bb.36, implicit killed $nzcv
3424B	  B %bb.26

3440B	bb.26.for.body90:
	; predecessors: %bb.25
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

3472B	  STRWui $wzr, %stack.7.iz, 0 :: (store 4 into %ir.iz)

3488B	bb.27.for.cond91:
	; predecessors: %bb.26, %bb.34
	  successors: %bb.28(0x7c000000), %bb.35(0x04000000); %bb.28(96.88%), %bb.35(3.12%)

3504B	  %103:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
3520B	  dead $wzr = SUBSWri %103:gpr32common, 4, 0, implicit-def $nzcv
3536B	  Bcc 12, %bb.35, implicit killed $nzcv
3552B	  B %bb.28

3568B	bb.28.for.body93:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

3600B	  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

3616B	bb.29.for.cond94:
	; predecessors: %bb.28, %bb.33
	  successors: %bb.30(0x7c000000), %bb.34(0x04000000); %bb.30(96.88%), %bb.34(3.12%)

3632B	  %108:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
3648B	  dead $wzr = SUBSWri %108:gpr32common, 4, 0, implicit-def $nzcv
3664B	  Bcc 12, %bb.34, implicit killed $nzcv
3680B	  B %bb.30

3696B	bb.30.for.body96:
	; predecessors: %bb.29
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

3728B	  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

3744B	bb.31.for.cond97:
	; predecessors: %bb.30, %bb.32
	  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)

3760B	  %113:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
3776B	  dead $wzr = SUBSWri %113:gpr32common, 4, 0, implicit-def $nzcv
3792B	  Bcc 12, %bb.33, implicit killed $nzcv
3808B	  B %bb.32

3824B	bb.32.for.body99:
	; predecessors: %bb.31
	  successors: %bb.31(0x80000000); %bb.31(100.00%)

3840B	  %117:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
3856B	  %118:gpr64 = LDRSWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
3888B	  %123:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
3952B	  %127:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
4000B	  %130:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
4016B	  %131:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
4024B	  %122:gpr64 = MADDXrrr %118:gpr64, %120:gpr64, %117:gpr64
4032B	  %124:gpr64 = ADDXrs %123:gpr64, %123:gpr64, 2
4040B	  %128:gpr64 = UBFMXri %127:gpr64, 61, 60
4048B	  %133:gpr64 = MADDXrrr %131:gpr64, %120:gpr64, %130:gpr64
4080B	  %140:gpr64common = MADDXrrr %118:gpr64, %137:gpr64, %139:gpr64
4084B	  %125:gpr64 = UBFMXri %124:gpr64, 61, 60
4088B	  %126:gpr64common = ADDXrr %122:gpr64, %125:gpr64
4096B	  %134:gpr64common = ADDXrr %133:gpr64, %125:gpr64
4104B	  %135:fpr64 = LDRDroX %134:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx111)
4112B	  %141:fpr64 = LDRDroX %140:gpr64common, %131:gpr64, 0, 1 :: (load 8 from %ir.arrayidx115)
4120B	  %129:fpr64 = LDRDroX %126:gpr64common, %128:gpr64, 0, 0 :: (load 8 from %ir.arrayidx105)
4128B	  %142:fpr64 = FMULDrr %135:fpr64, %141:fpr64
4136B	  %143:fpr64 = FADDDrr %129:fpr64, %142:fpr64
4144B	  STRDroX %143:fpr64, %126:gpr64common, %128:gpr64, 0, 0 :: (store 8 into %ir.arrayidx123)
4160B	  %144:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
4176B	  %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0
4192B	  STRWui %145:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
4208B	  B %bb.31

4224B	bb.33.for.inc127:
	; predecessors: %bb.31
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

4240B	  %115:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
4256B	  %116:gpr32common = nsw ADDWri %115:gpr32common, 1, 0
4272B	  STRWui %116:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
4288B	  B %bb.29

4304B	bb.34.for.inc130:
	; predecessors: %bb.29
	  successors: %bb.27(0x80000000); %bb.27(100.00%)

4320B	  %110:gpr32common = LDRWui %stack.7.iz, 0 :: (dereferenceable load 4 from %ir.iz)
4336B	  %111:gpr32common = nsw ADDWri %110:gpr32common, 1, 0
4352B	  STRWui %111:gpr32common, %stack.7.iz, 0 :: (store 4 into %ir.iz)
4368B	  B %bb.27

4384B	bb.35.for.inc133:
	; predecessors: %bb.27
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

4400B	  %105:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
4416B	  %106:gpr32common = nsw ADDWri %105:gpr32common, 1, 0
4432B	  STRWui %106:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
4448B	  B %bb.25

4464B	bb.36.for.end135:
	; predecessors: %bb.25
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

4496B	  STRWui $wzr, %stack.6.k, 0 :: (store 4 into %ir.k)
4512B	  undef %41.sub_32:gpr64 = MOVi32imm 200
4544B	  %43:gpr64common = ADDXri %stack.8.tm1, 0, 0
4560B	  undef %54.sub_32:gpr64 = MOVi32imm 1000
4592B	  %56:gpr64 = MOVaddr target-flags(aarch64-page) @g4m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s
4608B	  %62:gpr64common = ADDXri %stack.9.tm2, 0, 0
4656B	  %84:gpr64temp = ADRP target-flags(aarch64-page) %const.1
4672B	  %85:fpr64 = LDRDui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
4676B	  %66:gpr64 = MOVaddr target-flags(aarch64-page) @g5m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s
4680B	  %77:gpr64 = MOVaddr target-flags(aarch64-page) @g6m1_s, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s
4688B	  %87:gpr64 = MOVaddr target-flags(aarch64-page) @bm1_s, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s

4704B	bb.37.for.cond136:
	; predecessors: %bb.36, %bb.44
	  successors: %bb.38(0x7c000000), %bb.45(0x04000000); %bb.38(96.88%), %bb.45(3.12%)

4720B	  %27:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
4736B	  dead $wzr = SUBSWri %27:gpr32common, 4, 0, implicit-def $nzcv
4752B	  Bcc 12, %bb.45, implicit killed $nzcv
4768B	  B %bb.38

4784B	bb.38.for.body138:
	; predecessors: %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

4816B	  STRWui $wzr, %stack.5.j, 0 :: (store 4 into %ir.j)

4832B	bb.39.for.cond139:
	; predecessors: %bb.38, %bb.43
	  successors: %bb.40(0x7c000000), %bb.44(0x04000000); %bb.40(96.88%), %bb.44(3.12%)

4848B	  %30:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
4864B	  dead $wzr = SUBSWri %30:gpr32common, 4, 0, implicit-def $nzcv
4880B	  Bcc 12, %bb.44, implicit killed $nzcv
4896B	  B %bb.40

4912B	bb.40.for.body141:
	; predecessors: %bb.39
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

4944B	  STRWui $wzr, %stack.4.i, 0 :: (store 4 into %ir.i)

4960B	bb.41.for.cond142:
	; predecessors: %bb.40, %bb.42
	  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)

4976B	  %35:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
4992B	  dead $wzr = SUBSWri %35:gpr32common, 4, 0, implicit-def $nzcv
5008B	  Bcc 12, %bb.43, implicit killed $nzcv
5024B	  B %bb.42

5040B	bb.42.for.body144:
	; predecessors: %bb.41
	  successors: %bb.41(0x80000000); %bb.41(100.00%)

5056B	  %39:gpr64 = LDRSWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
5104B	  %45:gpr64 = LDRSWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
5168B	  %49:gpr64 = LDRSWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
5216B	  %52:gpr64 = LDRSWui %stack.2.sizei.addr, 0 :: (dereferenceable load 4 from %ir.sizei.addr)
5472B	  %73:gpr64 = LDRXui %stack.0.r.addr, 0 :: (dereferenceable load 8 from %ir.r.addr)
5712B	  %92:fpr64 = LDRDui %stack.3.rdtime, 0 :: (dereferenceable load 8 from %ir.rdtime)
5720B	  %42:gpr64 = MADDXrrr %39:gpr64, %41:gpr64, $xzr
5728B	  %46:gpr64 = ADDXrs %45:gpr64, %45:gpr64, 2
5736B	  %50:gpr64 = UBFMXri %49:gpr64, 61, 60
5744B	  %55:gpr64 = MADDXrrr %52:gpr64, %54:gpr64, $xzr
5752B	  %44:gpr64 = ADDXrr %43:gpr64common, %42:gpr64
5760B	  %47:gpr64 = UBFMXri %46:gpr64, 61, 60
5768B	  %48:gpr64common = ADDXrr %44:gpr64, %47:gpr64
5776B	  %51:fpr64 = LDRDroX %48:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx150)
5784B	  %63:gpr64 = ADDXrr %62:gpr64common, %42:gpr64
5792B	  %64:gpr64common = ADDXrr %63:gpr64, %47:gpr64
5800B	  %65:fpr64 = LDRDroX %64:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx165)
5808B	  %57:gpr64 = ADDXrr %56:gpr64, %55:gpr64
5816B	  %58:gpr64 = ADDXrr %57:gpr64, %42:gpr64
5824B	  %59:gpr64common = ADDXrr %58:gpr64, %47:gpr64
5832B	  %60:fpr64 = LDRDroX %59:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx158)
5840B	  %67:gpr64 = ADDXrr %66:gpr64, %55:gpr64
5848B	  %68:gpr64 = ADDXrr %67:gpr64, %42:gpr64
5856B	  %69:gpr64common = ADDXrr %68:gpr64, %47:gpr64
5864B	  %70:fpr64 = LDRDroX %69:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx173)
5872B	  %78:gpr64 = ADDXrr %77:gpr64, %55:gpr64
5880B	  %79:gpr64 = ADDXrr %78:gpr64, %42:gpr64
5888B	  %80:gpr64common = ADDXrr %79:gpr64, %47:gpr64
5896B	  %81:fpr64 = LDRDroX %80:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx189)
5912B	  %94:gpr64 = LDRXui %stack.1.u.addr, 0 :: (dereferenceable load 8 from %ir.u.addr)
5920B	  %74:gpr64 = ADDXrr %73:gpr64, %42:gpr64
5928B	  %88:gpr64 = ADDXrr %87:gpr64, %55:gpr64
5936B	  %75:gpr64common = ADDXrr %74:gpr64, %47:gpr64
5944B	  %89:gpr64 = ADDXrr %88:gpr64, %42:gpr64
5952B	  %61:fpr64 = FMULDrr %51:fpr64, %60:fpr64
5960B	  %76:fpr64 = LDRDroX %75:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx181)
5968B	  %90:gpr64common = ADDXrr %89:gpr64, %47:gpr64
5976B	  %71:fpr64 = FMULDrr %65:fpr64, %70:fpr64
5984B	  %91:fpr64 = LDRDroX %90:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx200)
5992B	  %82:fpr64 = FMULDrr %76:fpr64, %81:fpr64
6000B	  %95:gpr64 = ADDXrr %94:gpr64, %42:gpr64
6008B	  %96:gpr64common = ADDXrr %95:gpr64, %47:gpr64
6016B	  %93:fpr64 = FMULDrr %91:fpr64, %92:fpr64
6024B	  %97:fpr64 = LDRDroX %96:gpr64common, %50:gpr64, 0, 0 :: (load 8 from %ir.arrayidx207)
6032B	  %72:fpr64 = FADDDrr %61:fpr64, %71:fpr64
6040B	  %83:fpr64 = FADDDrr %72:fpr64, %82:fpr64
6048B	  %86:fpr64 = FMULDrr %83:fpr64, %85:fpr64
6056B	  %98:fpr64 = FMULDrr %93:fpr64, %97:fpr64
6064B	  %99:fpr64 = FADDDrr %86:fpr64, %98:fpr64
6072B	  STRDroX %99:fpr64, %75:gpr64common, %50:gpr64, 0, 0 :: (store 8 into %ir.arrayidx215)
6080B	  %100:gpr32common = LDRWui %stack.4.i, 0 :: (dereferenceable load 4 from %ir.i)
6088B	  %101:gpr32common = nsw ADDWri %100:gpr32common, 1, 0
6096B	  STRWui %101:gpr32common, %stack.4.i, 0 :: (store 4 into %ir.i)
6104B	  B %bb.41

6112B	bb.43.for.inc219:
	; predecessors: %bb.41
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

6120B	  %37:gpr32common = LDRWui %stack.5.j, 0 :: (dereferenceable load 4 from %ir.j)
6128B	  %38:gpr32common = nsw ADDWri %37:gpr32common, 1, 0
6136B	  STRWui %38:gpr32common, %stack.5.j, 0 :: (store 4 into %ir.j)
6144B	  B %bb.39

6152B	bb.44.for.inc222:
	; predecessors: %bb.39
	  successors: %bb.37(0x80000000); %bb.37(100.00%)

6160B	  %32:gpr32common = LDRWui %stack.6.k, 0 :: (dereferenceable load 4 from %ir.k)
6168B	  %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0
6176B	  STRWui %33:gpr32common, %stack.6.k, 0 :: (store 4 into %ir.k)
6184B	  B %bb.37

6192B	bb.45.for.end224:
	; predecessors: %bb.37

6200B	  RET_ReallyLR

# End machine code for function laplacian.

Before post-MI-sched:
# Machine code for function laplacian: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-48]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=4, align=4, at location [SP-60]
  fi#3: size=8, align=8, at location [SP-72]
  fi#4: size=4, align=4, at location [SP-76]
  fi#5: size=4, align=4, at location [SP-80]
  fi#6: size=4, align=4, at location [SP-84]
  fi#7: size=4, align=4, at location [SP-88]
  fi#8: size=1000, align=16, at location [SP-1088]
  fi#9: size=1000, align=16, at location [SP-2096]
  fi#10: size=8, align=8, at location [SP-40]
  fi#11: size=8, align=8, at location [SP-8]
  fi#12: size=8, align=8, at location [SP-16]
  fi#13: size=8, align=8, at location [SP-24]
  fi#14: size=8, align=8, at location [SP-32]
Constant Pool:
  cp#0: 1.000000e+00, align=8
  cp#1: 5.000000e-03, align=8
Function Live Ins: $x0, $x1, $w2

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w2, $x0, $x1, $x19, $x20, $lr
  early-clobber $sp = frame-setup STPXpre killed $x20, killed $x19, $sp(tied-def 0), -4 :: (store 8 into %stack.14), (store 8 into %stack.13)
  frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store 8 into %stack.12), (store 8 into %stack.11)
  $fp = frame-setup ADDXri $sp, 16, 0
  $sp = frame-setup SUBXri $sp, 2064, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  STPXi renamable $x1, renamable $x0, $fp, -5 :: (store 8 into %ir.r.addr), (store 8 into %ir.u.addr)
  STURWi killed renamable $w2, $fp, -44 :: (store 4 into %ir.sizei.addr)
  renamable $d0 = FDIVDrr killed renamable $d1, killed renamable $d0
  STURDi killed renamable $d0, $fp, -56 :: (store 8 into %ir.rdtime)
  $x0 = ADDXri $sp, 1008, 0
  $d0 = FMOVD0
  $w1 = MOVZWi 125, 0
  $x19 = ADDXri $sp, 1008, 0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  PCN_STACKMAP 0, 0, 0, $fp, -1072, 0, $fp, -60, 0, $fp, -72, 0, $fp, -64, 0, $fp, -68, 0, $fp, -32, 0, $fp, -56, 0, $fp, -44, 0, $fp, -1072, 0, $fp, -2080, 0, $fp, -40, 0, $fp, -1072, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.4.i, align 4), (load 8 from %stack.7.iz, align 4), (load 8 from %stack.5.j, align 4), (load 8 from %stack.6.k, align 4), (load 8 from %stack.0.r.addr), (load 8 from %stack.3.rdtime), (load 8 from %stack.2.sizei.addr, align 4), (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.1.u.addr), (load 8 from %stack.8.tm1, align 16)
  STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  $w8 = MOVZWi 200, 0, implicit-def $x8
  $w16 = MOVZWi 40, 0, implicit-def $x16
  $x17 = ADRP target-flags(aarch64-page) @wdtdr
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.11
  successors: %bb.2(0x7c000000), %bb.12(0x04000000); %bb.2(96.88%), %bb.12(3.12%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.12, implicit $nzcv

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x16, $x17, $x19
  STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)

bb.3.for.cond1:
; predecessors: %bb.2, %bb.10
  successors: %bb.4(0x7c000000), %bb.11(0x04000000); %bb.4(96.88%), %bb.11(3.12%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.11, implicit $nzcv

bb.4.for.body3:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x8, $x16, $x17, $x19
  STURWi $wzr, $fp, -64 :: (store 4 into %ir.j)

bb.5.for.cond4:
; predecessors: %bb.4, %bb.9
  successors: %bb.6(0x7c000000), %bb.10(0x04000000); %bb.6(96.88%), %bb.10(3.12%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.10, implicit $nzcv

bb.6.for.body6:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x16, $x17, $x19
  STURWi $wzr, $fp, -60 :: (store 4 into %ir.i)

bb.7.for.cond7:
; predecessors: %bb.6, %bb.8
  successors: %bb.8(0x7c000000), %bb.9(0x04000000); %bb.8(96.88%), %bb.9(3.12%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.9, implicit $nzcv

bb.8.for.body9:
; predecessors: %bb.7
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x16, $x17, $x19
  renamable $x18, renamable $x2 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  renamable $x0, renamable $x1 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  renamable $x3 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $x1 = UBFMXri killed renamable $x1, 61, 60
  renamable $x5 = MADDXrrr renamable $x2, renamable $x16, renamable $x17
  renamable $d0 = LDRDroX killed renamable $x5, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx17)
  renamable $x18 = MADDXrrr killed renamable $x18, renamable $x8, $xzr
  renamable $x0 = ADDXrs killed renamable $x0, renamable $x0, 2
  $x3 = ADDXrs killed renamable $x3, renamable $x18, 0
  $x18 = ADDXrs renamable $x19, killed renamable $x18, 0
  renamable $x0 = UBFMXri killed renamable $x0, 61, 60
  $x18 = ADDXrs killed renamable $x18, renamable $x0, 0
  $x0 = ADDXrs killed renamable $x3, killed renamable $x0, 0
  renamable $d1 = LDRDroX killed renamable $x0, killed renamable $x2, 0, 1 :: (load 8 from %ir.arrayidx23)
  renamable $d2 = LDRDroX renamable $x18, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx13)
  renamable $w0 = nsw ADDWri killed renamable $w4, 1, 0
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  STRDroX killed renamable $d0, killed renamable $x18, killed renamable $x1, 0, 0 :: (store 8 into %ir.arrayidx29)
  STURWi killed renamable $w0, $fp, -60 :: (store 4 into %ir.i)
  B %bb.7

bb.9.for.inc30:
; predecessors: %bb.7
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -64 :: (store 4 into %ir.j)
  B %bb.5

bb.10.for.inc33:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -68 :: (store 4 into %ir.k)
  B %bb.3

bb.11.for.inc36:
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -72 :: (store 4 into %ir.iz)
  B %bb.1

bb.12.for.end38:
; predecessors: %bb.1
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  $x0 = ADDXri $sp, 0, 0
  $d0 = FMOVD0
  $w1 = MOVZWi 125, 0
  $x19 = ADDXri $sp, 0, 0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  PCN_STACKMAP 1, 0, 0, $fp, -2080, 0, $fp, -60, 0, $fp, -72, 0, $fp, -64, 0, $fp, -68, 0, $fp, -32, 0, $fp, -56, 0, $fp, -44, 0, $fp, -1072, 0, $fp, -2080, 0, $fp, -40, 0, $fp, -2080, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.4.i, align 4), (load 8 from %stack.7.iz, align 4), (load 8 from %stack.5.j, align 4), (load 8 from %stack.6.k, align 4), (load 8 from %stack.0.r.addr), (load 8 from %stack.3.rdtime), (load 8 from %stack.2.sizei.addr, align 4), (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.1.u.addr), (load 8 from %stack.9.tm2, align 16)
  STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  $w8 = MOVZWi 200, 0, implicit-def $x8
  $w16 = MOVZWi 40, 0, implicit-def $x16
  $x17 = ADRP target-flags(aarch64-page) @wdtdr
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0

bb.13.for.cond40:
; predecessors: %bb.12, %bb.23
  successors: %bb.14(0x7c000000), %bb.24(0x04000000); %bb.14(96.88%), %bb.24(3.12%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.24, implicit $nzcv

bb.14.for.body42:
; predecessors: %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $x8, $x16, $x17, $x19
  STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)

bb.15.for.cond43:
; predecessors: %bb.14, %bb.22
  successors: %bb.16(0x7c000000), %bb.23(0x04000000); %bb.16(96.88%), %bb.23(3.12%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.23, implicit $nzcv

bb.16.for.body45:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $x8, $x16, $x17, $x19
  STURWi $wzr, $fp, -64 :: (store 4 into %ir.j)

bb.17.for.cond46:
; predecessors: %bb.16, %bb.21
  successors: %bb.18(0x7c000000), %bb.22(0x04000000); %bb.18(96.88%), %bb.22(3.12%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.22, implicit $nzcv

bb.18.for.body48:
; predecessors: %bb.17
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x8, $x16, $x17, $x19
  STURWi $wzr, $fp, -60 :: (store 4 into %ir.i)

bb.19.for.cond49:
; predecessors: %bb.18, %bb.20
  successors: %bb.20(0x7c000000), %bb.21(0x04000000); %bb.20(96.88%), %bb.21(3.12%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.21, implicit $nzcv

bb.20.for.body51:
; predecessors: %bb.19
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x8, $x16, $x17, $x19
  renamable $x18, renamable $x3 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  renamable $x0, renamable $x2 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  renamable $x1 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $x18 = MADDXrrr killed renamable $x18, renamable $x8, $xzr
  renamable $x2 = UBFMXri killed renamable $x2, 61, 60
  $x1 = ADDXrs killed renamable $x1, renamable $x18, 0
  renamable $x1 = MADDXrrr renamable $x3, renamable $x16, killed renamable $x1
  renamable $d0 = LDRDroX killed renamable $x1, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx63)
  renamable $x0 = ADDXrs killed renamable $x0, renamable $x0, 2
  $x18 = ADDXrs renamable $x19, killed renamable $x18, 0
  renamable $x0 = UBFMXri killed renamable $x0, 61, 60
  $x18 = ADDXrs killed renamable $x18, renamable $x0, 0
  $x0 = ADDXrs renamable $x17, killed renamable $x0, 0
  renamable $d1 = LDRDroX killed renamable $x0, killed renamable $x3, 0, 1 :: (load 8 from %ir.arrayidx67)
  renamable $d2 = LDRDroX renamable $x18, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx57)
  renamable $w0 = nsw ADDWri killed renamable $w4, 1, 0
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  STRDroX killed renamable $d0, killed renamable $x18, killed renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx75)
  STURWi killed renamable $w0, $fp, -60 :: (store 4 into %ir.i)
  B %bb.19

bb.21.for.inc79:
; predecessors: %bb.19
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -64 :: (store 4 into %ir.j)
  B %bb.17

bb.22.for.inc82:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -68 :: (store 4 into %ir.k)
  B %bb.15

bb.23.for.inc85:
; predecessors: %bb.15
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $x8, $x16, $x17, $x19
  renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -72 :: (store 4 into %ir.iz)
  B %bb.13

bb.24.for.end87:
; predecessors: %bb.13
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  renamable $x19 = LDURXi $fp, -32 :: (dereferenceable load 8 from %ir.r.addr)
  $d0 = FMOVD0
  $w1 = MOVZWi 125, 0
  $x0 = ORRXrs $xzr, $x19, 0
  BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  PCN_STACKMAP 2, 0, 0, $fp, -60, 0, $fp, -72, 0, $fp, -64, 0, $fp, -68, 0, $fp, -32, 0, $fp, -56, 0, $fp, -44, 0, $fp, -1072, 0, $fp, -2080, 0, $fp, -40, killed renamable $x19, renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.4.i, align 4), (load 8 from %stack.7.iz, align 4), (load 8 from %stack.5.j, align 4), (load 8 from %stack.6.k, align 4), (load 8 from %stack.0.r.addr), (load 8 from %stack.3.rdtime), (load 8 from %stack.2.sizei.addr, align 4), (load 8 from %stack.8.tm1, align 16), (load 8 from %stack.9.tm2, align 16), (load 8 from %stack.1.u.addr)
  STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  $w8 = MOVZWi 200, 0, implicit-def $x8
  $w16 = MOVZWi 40, 0, implicit-def $x16
  $x17 = ADRP target-flags(aarch64-page) @wdtdr
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0

bb.25.for.cond88:
; predecessors: %bb.24, %bb.35
  successors: %bb.26(0x7c000000), %bb.36(0x04000000); %bb.26(96.88%), %bb.36(3.12%)
  liveins: $x8, $x16, $x17
  renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.36, implicit $nzcv

bb.26.for.body90:
; predecessors: %bb.25
  successors: %bb.27(0x80000000); %bb.27(100.00%)
  liveins: $x8, $x16, $x17
  STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)

bb.27.for.cond91:
; predecessors: %bb.26, %bb.34
  successors: %bb.28(0x7c000000), %bb.35(0x04000000); %bb.28(96.88%), %bb.35(3.12%)
  liveins: $x8, $x16, $x17
  renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.35, implicit $nzcv

bb.28.for.body93:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $x8, $x16, $x17
  STURWi $wzr, $fp, -64 :: (store 4 into %ir.j)

bb.29.for.cond94:
; predecessors: %bb.28, %bb.33
  successors: %bb.30(0x7c000000), %bb.34(0x04000000); %bb.30(96.88%), %bb.34(3.12%)
  liveins: $x8, $x16, $x17
  renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.34, implicit $nzcv

bb.30.for.body96:
; predecessors: %bb.29
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $x8, $x16, $x17
  STURWi $wzr, $fp, -60 :: (store 4 into %ir.i)

bb.31.for.cond97:
; predecessors: %bb.30, %bb.32
  successors: %bb.32(0x7c000000), %bb.33(0x04000000); %bb.32(96.88%), %bb.33(3.12%)
  liveins: $x8, $x16, $x17
  renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w18, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.33, implicit $nzcv

bb.32.for.body99:
; predecessors: %bb.31
  successors: %bb.31(0x80000000); %bb.31(100.00%)
  liveins: $x8, $x16, $x17
  renamable $x3, renamable $x18 = LDPXi $fp, -5 :: (dereferenceable load 8 from %ir.r.addr), (dereferenceable load 8 from %ir.u.addr)
  renamable $x0, renamable $x4 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  renamable $x1, renamable $x2 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  renamable $x18 = MADDXrrr renamable $x0, renamable $x8, killed renamable $x18
  renamable $x1 = ADDXrs killed renamable $x1, renamable $x1, 2
  renamable $x2 = UBFMXri killed renamable $x2, 61, 60
  renamable $x3 = MADDXrrr renamable $x4, renamable $x8, killed renamable $x3
  renamable $x0 = MADDXrrr killed renamable $x0, renamable $x16, renamable $x17
  renamable $x1 = UBFMXri killed renamable $x1, 61, 60
  $x18 = ADDXrs killed renamable $x18, renamable $x1, 0
  $x1 = ADDXrs killed renamable $x3, killed renamable $x1, 0
  renamable $d0 = LDRDroX killed renamable $x1, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx111)
  renamable $d1 = LDRDroX killed renamable $x0, killed renamable $x4, 0, 1 :: (load 8 from %ir.arrayidx115)
  renamable $d2 = LDRDroX renamable $x18, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx105)
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0
  STRDroX killed renamable $d0, killed renamable $x18, killed renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx123)
  renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -60 :: (store 4 into %ir.i)
  B %bb.31

bb.33.for.inc127:
; predecessors: %bb.31
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $x8, $x16, $x17
  renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -64 :: (store 4 into %ir.j)
  B %bb.29

bb.34.for.inc130:
; predecessors: %bb.29
  successors: %bb.27(0x80000000); %bb.27(100.00%)
  liveins: $x8, $x16, $x17
  renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -72 :: (store 4 into %ir.iz)
  B %bb.27

bb.35.for.inc133:
; predecessors: %bb.27
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x8, $x16, $x17
  renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  renamable $w18 = nsw ADDWri killed renamable $w18, 1, 0
  STURWi killed renamable $w18, $fp, -68 :: (store 4 into %ir.k)
  B %bb.25

bb.36.for.end135:
; predecessors: %bb.25
  successors: %bb.37(0x80000000); %bb.37(100.00%)

  STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  $w8 = MOVZWi 200, 0, implicit-def $x8
  $x16 = ADDXri $sp, 1008, 0
  $w17 = MOVZWi 1000, 0, implicit-def $x17
  $x18 = ADRP target-flags(aarch64-page) @g4m1_s
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s, 0
  $x0 = ADDXri $sp, 0, 0
  renamable $x6 = ADRP target-flags(aarch64-page) %const.1
  renamable $d0 = LDRDui killed renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  $x1 = ADRP target-flags(aarch64-page) @g5m1_s
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s, 0
  $x2 = ADRP target-flags(aarch64-page) @g6m1_s
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s, 0
  $x3 = ADRP target-flags(aarch64-page) @bm1_s
  renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s, 0

bb.37.for.cond136:
; predecessors: %bb.36, %bb.44
  successors: %bb.38(0x7c000000), %bb.45(0x04000000); %bb.38(96.88%), %bb.45(3.12%)
  liveins: $d0, $x0, $x1, $x2, $x3, $x8, $x16, $x17, $x18
  renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  dead $wzr = SUBSWri killed renamable $w4, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.45, implicit $nzcv

bb.38.for.body138:
; predecessors: %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $d0, $x0, $x1, $x2, $x3, $x8, $x16, $x17, $x18
  STURWi $wzr, $fp, -64 :: (store 4 into %ir.j)

bb.39.for.cond139:
; predecessors: %bb.38, %bb.43
  successors: %bb.40(0x7c000000), %bb.44(0x04000000); %bb.40(96.88%), %bb.44(3.12%)
  liveins: $d0, $x0, $x1, $x2, $x3, $x8, $x16, $x17, $x18
  renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  dead $wzr = SUBSWri killed renamable $w4, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.44, implicit $nzcv

bb.40.for.body141:
; predecessors: %bb.39
  successors: %bb.41(0x80000000); %bb.41(100.00%)
  liveins: $d0, $x0, $x1, $x2, $x3, $x8, $x16, $x17, $x18
  STURWi $wzr, $fp, -60 :: (store 4 into %ir.i)

bb.41.for.cond142:
; predecessors: %bb.40, %bb.42
  successors: %bb.42(0x7c000000), %bb.43(0x04000000); %bb.42(96.88%), %bb.43(3.12%)
  liveins: $d0, $x0, $x1, $x2, $x3, $x8, $x16, $x17, $x18
  renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  dead $wzr = SUBSWri killed renamable $w4, 4, 0, implicit-def $nzcv
  Bcc 12, %bb.43, implicit $nzcv

bb.42.for.body144:
; predecessors: %bb.41
  successors: %bb.41(0x80000000); %bb.41(100.00%)
  liveins: $d0, $x0, $x1, $x2, $x3, $x8, $x16, $x17, $x18
  renamable $x4, renamable $x5 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  renamable $x6 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $x7 = LDURSWi $fp, -44 :: (dereferenceable load 4 from %ir.sizei.addr)
  renamable $x19 = LDURXi $fp, -32 :: (dereferenceable load 8 from %ir.r.addr)
  renamable $d1 = LDURDi $fp, -56 :: (dereferenceable load 8 from %ir.rdtime)
  renamable $x4 = MADDXrrr killed renamable $x4, renamable $x8, $xzr
  renamable $x5 = ADDXrs killed renamable $x5, renamable $x5, 2
  renamable $x6 = UBFMXri killed renamable $x6, 61, 60
  renamable $x7 = MADDXrrr killed renamable $x7, renamable $x17, $xzr
  $x20 = ADDXrs renamable $x16, renamable $x4, 0
  renamable $x5 = UBFMXri killed renamable $x5, 61, 60
  $x20 = ADDXrs killed renamable $x20, renamable $x5, 0
  renamable $d2 = LDRDroX killed renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx150)
  $x20 = ADDXrs renamable $x0, renamable $x4, 0
  $x20 = ADDXrs killed renamable $x20, renamable $x5, 0
  renamable $d3 = LDRDroX killed renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx165)
  $x20 = ADDXrs renamable $x18, renamable $x7, 0
  $x20 = ADDXrs killed renamable $x20, renamable $x4, 0
  $x20 = ADDXrs killed renamable $x20, renamable $x5, 0
  renamable $d4 = LDRDroX killed renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx158)
  $x20 = ADDXrs renamable $x1, renamable $x7, 0
  $x20 = ADDXrs killed renamable $x20, renamable $x4, 0
  $x20 = ADDXrs killed renamable $x20, renamable $x5, 0
  renamable $d5 = LDRDroX killed renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx173)
  $x20 = ADDXrs renamable $x2, renamable $x7, 0
  $x20 = ADDXrs killed renamable $x20, renamable $x4, 0
  $x20 = ADDXrs killed renamable $x20, renamable $x5, 0
  renamable $d6 = LDRDroX killed renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx189)
  renamable $x20 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  $x19 = ADDXrs killed renamable $x19, renamable $x4, 0
  $x7 = ADDXrs renamable $x3, killed renamable $x7, 0
  $x19 = ADDXrs killed renamable $x19, renamable $x5, 0
  $x7 = ADDXrs killed renamable $x7, renamable $x4, 0
  renamable $d2 = FMULDrr killed renamable $d2, killed renamable $d4
  renamable $d4 = LDRDroX renamable $x19, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx181)
  $x7 = ADDXrs killed renamable $x7, renamable $x5, 0
  renamable $d3 = FMULDrr killed renamable $d3, killed renamable $d5
  renamable $d5 = LDRDroX killed renamable $x7, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx200)
  renamable $d4 = FMULDrr killed renamable $d4, killed renamable $d6
  $x4 = ADDXrs killed renamable $x20, killed renamable $x4, 0
  $x4 = ADDXrs killed renamable $x4, killed renamable $x5, 0
  renamable $d1 = FMULDrr killed renamable $d5, killed renamable $d1
  renamable $d5 = LDRDroX killed renamable $x4, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx207)
  renamable $d2 = FADDDrr killed renamable $d2, killed renamable $d3
  renamable $d2 = FADDDrr killed renamable $d2, killed renamable $d4
  renamable $d2 = FMULDrr killed renamable $d2, renamable $d0
  renamable $d1 = FMULDrr killed renamable $d1, killed renamable $d5
  renamable $d1 = FADDDrr killed renamable $d2, killed renamable $d1
  STRDroX killed renamable $d1, killed renamable $x19, killed renamable $x6, 0, 0 :: (store 8 into %ir.arrayidx215)
  renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  renamable $w4 = nsw ADDWri killed renamable $w4, 1, 0
  STURWi killed renamable $w4, $fp, -60 :: (store 4 into %ir.i)
  B %bb.41

bb.43.for.inc219:
; predecessors: %bb.41
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $d0, $x0, $x1, $x2, $x3, $x8, $x16, $x17, $x18
  renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  renamable $w4 = nsw ADDWri killed renamable $w4, 1, 0
  STURWi killed renamable $w4, $fp, -64 :: (store 4 into %ir.j)
  B %bb.39

bb.44.for.inc222:
; predecessors: %bb.39
  successors: %bb.37(0x80000000); %bb.37(100.00%)
  liveins: $d0, $x0, $x1, $x2, $x3, $x8, $x16, $x17, $x18
  renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  renamable $w4 = nsw ADDWri killed renamable $w4, 1, 0
  STURWi killed renamable $w4, $fp, -68 :: (store 4 into %ir.k)
  B %bb.37

bb.45.for.end224:
; predecessors: %bb.37

  $sp = frame-destroy ADDXri $sp, 2064, 0
  $fp, $lr = frame-destroy LDPXi $sp, 2 :: (load 8 from %stack.12), (load 8 from %stack.11)
  early-clobber $sp, $x20, $x19 = frame-destroy LDPXpost $sp(tied-def 0), 4 :: (load 8 from %stack.14), (load 8 from %stack.13)
  RET undef $lr

# End machine code for function laplacian.

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w16 = MOVZWi 40, 0, implicit-def $x16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x17 = ADRP target-flags(aarch64-page) @wdtdr
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
SU(4):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x17 = ADRP target-flags(aarch64-page) @wdtdr
  Ready @0c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 200, 0, implicit-def $x8
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w16 = MOVZWi 40, 0, implicit-def $x16
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
  Ready @3c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(3):   $x17 = ADRP target-flags(aarch64-page) @wdtdr
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
SU(2):   $w16 = MOVZWi 40, 0, implicit-def $x16
SU(4):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
SU(0):   STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: renamable $x8 = ADRP target-flags(aarch64-page) @dtime
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
    SU(2): Anti Latency=0
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 7
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=4 Reg=$d1
SU(4):   STPXi renamable $x1, renamable $x0, $fp, -5 :: (store 8 into %ir.r.addr), (store 8 into %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Anti Latency=0
    SU(8): Anti Latency=0
SU(5):   STURWi renamable $w2, $fp, -44 :: (store 4 into %ir.sizei.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
SU(7):   STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.rdtime)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
  Successors:
    SU(9): Anti Latency=0
SU(8):   $x0 = ADDXri $sp, 1008, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(4): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $d0 = FMOVD0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $w1 = MOVZWi 125, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(4): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x19 = ADDXri $sp, 1008, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @dtime
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 4 5 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 4 5 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @2c
  TopQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 4 5 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 11 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) STPXi renamable $x1, renamable $x0, $fp, -5 :: (store 8 into %ir.r.addr), (store 8 into %ir.u.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 11 5 10 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x0 = ADDXri $sp, 1008, 0
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 11 5 10 
  TopQ.A RemainingLatency 0 + 6c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $w1 = MOVZWi 125, 0
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 5 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(6) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d0 = FDIVDrr renamable $d1, renamable $d0
  Ready @7c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 5 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.rdtime)
  Ready @8c
  TopQ.A TopLatency SU(7) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 5 9 
  TopQ.A RemainingLatency 0 + 9c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $d0 = FMOVD0
  Ready @9c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 5 
  TopQ.A RemainingLatency 0 + 10c > CritPath 8
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STURWi renamable $w2, $fp, -44 :: (store 4 into %ir.sizei.addr)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $x19 = ADDXri $sp, 1008, 0
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @dtime
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @dtime :: (dereferenceable load 8 from @dtime)
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(3):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(4):   STPXi renamable $x1, renamable $x0, $fp, -5 :: (store 8 into %ir.r.addr), (store 8 into %ir.u.addr)
SU(8):   $x0 = ADDXri $sp, 1008, 0
SU(10):   $w1 = MOVZWi 125, 0
SU(6):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0
SU(7):   STURDi renamable $d0, $fp, -56 :: (store 8 into %ir.rdtime)
SU(9):   $d0 = FMOVD0
SU(5):   STURWi renamable $w2, $fp, -44 :: (store 4 into %ir.sizei.addr)
SU(11):   $x19 = ADDXri $sp, 1008, 0

********** MI Scheduling **********
laplacian:%bb.0 entry
  From: frame-setup STPXi killed $fp, killed $lr, $sp, 2 :: (store 8 into %stack.12), (store 8 into %stack.11)
    To: $sp = frame-setup SUBXri $sp, 2064, 0
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $fp, $lr, $sp, 2 :: (store 8 into %stack.12), (store 8 into %stack.11)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Anti Latency=0
SU(1):   $fp = frame-setup ADDXri $sp, 16, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Anti Latency=0
ExitSU:   $sp = frame-setup SUBXri $sp, 2064, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) frame-setup STPXi $fp, $lr, $sp, 2 :: (store 8 into %stack.12), (store 8 into %stack.11)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $fp = frame-setup ADDXri $sp, 16, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $fp, $lr, $sp, 2 :: (store 8 into %stack.12), (store 8 into %stack.11)
SU(1):   $fp = frame-setup ADDXri $sp, 16, 0

Fixup kills for %bb.0
********** MI Scheduling **********
laplacian:%bb.1 for.cond
  From: renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.12, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.12, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.1
Fixup kills for %bb.2
********** MI Scheduling **********
laplacian:%bb.3 for.cond1
  From: renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.11, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.11, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.3
Fixup kills for %bb.4
********** MI Scheduling **********
laplacian:%bb.5 for.cond4
  From: renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.10, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.10, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.5
Fixup kills for %bb.6
********** MI Scheduling **********
laplacian:%bb.7 for.cond7
  From: renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.9, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.9, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.7
********** MI Scheduling **********
laplacian:%bb.8 for.body9
  From: renamable $x18, renamable $x2 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
    To: B %bb.7
 RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $x18, renamable $x2 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x18
    SU(14): Data Latency=4 Reg=$x2
    SU(5): Data Latency=4 Reg=$x2
SU(1):   renamable $x0, renamable $x1 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x0
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x1
    SU(20): Ord  Latency=0 Memory
SU(2):   renamable $x3 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x3
SU(3):   renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(16): Data Latency=4 Reg=$w4
    SU(20): Ord  Latency=0 Memory
SU(4):   renamable $x1 = UBFMXri renamable $x1, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x1
  Successors:
    SU(19): Data Latency=1 Reg=$x1
    SU(15): Data Latency=1 Reg=$x1
    SU(6): Data Latency=1 Reg=$x1
SU(5):   renamable $x5 = MADDXrrr renamable $x2, renamable $x16, renamable $x17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x2
  Successors:
    SU(6): Data Latency=1 Reg=$x5
SU(6):   renamable $d0 = LDRDroX renamable $x5, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx17)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=$x5
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=4 Reg=$d0
SU(7):   renamable $x18 = MADDXrrr renamable $x18, renamable $x8, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x18
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x18
    SU(9): Data Latency=1 Reg=$x18
SU(8):   renamable $x0 = ADDXrs renamable $x0, renamable $x0, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x0
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
SU(9):   $x3 = ADDXrs renamable $x3, renamable $x18, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(7): Data Latency=1 Reg=$x18
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x3
  Successors:
    SU(13): Data Latency=1 Reg=$x3
    SU(10): Anti Latency=0
SU(10):   $x18 = ADDXrs renamable $x19, renamable $x18, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x18
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x18
SU(11):   renamable $x0 = UBFMXri renamable $x0, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x0
    SU(12): Data Latency=1 Reg=$x0
SU(12):   $x18 = ADDXrs renamable $x18, renamable $x0, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=$x0
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x18
  Successors:
    SU(19): Data Latency=1 Reg=$x18
    SU(15): Data Latency=1 Reg=$x18
    SU(13): Anti Latency=0
SU(13):   $x0 = ADDXrs renamable $x3, renamable $x0, 0
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
    SU(9): Data Latency=1 Reg=$x3
  Successors:
    SU(16): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x0
SU(14):   renamable $d1 = LDRDroX renamable $x0, renamable $x2, 0, 1 :: (load 8 from %ir.arrayidx23)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(13): Data Latency=1 Reg=$x0
    SU(0): Data Latency=4 Reg=$x2
  Successors:
    SU(17): Data Latency=4 Reg=$d1
    SU(16): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
SU(15):   renamable $d2 = LDRDroX renamable $x18, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx13)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(12): Data Latency=1 Reg=$x18
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    SU(18): Data Latency=4 Reg=$d2
    SU(19): Ord  Latency=0 Memory
SU(16):   renamable $w0 = nsw ADDWri renamable $w4, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(14): Anti Latency=0
    SU(13): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w4
  Successors:
    SU(20): Data Latency=1 Reg=$w0
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(14): Data Latency=4 Reg=$d1
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d0
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d0
    SU(15): Data Latency=4 Reg=$d2
  Successors:
    SU(19): Data Latency=1 Reg=$d0
SU(19):   STRDroX renamable $d0, renamable $x18, renamable $x1, 0, 0 :: (store 8 into %ir.arrayidx29)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=$x18
    SU(4): Data Latency=1 Reg=$x1
SU(20):   STURWi renamable $w0, $fp, -60 :: (store 4 into %ir.i)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$w0
    SU(14): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x18, renamable $x2 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 5 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x0, renamable $x1 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 5 8 4 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 13
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x3 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 5 8 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 8 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 13
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x18 = MADDXrrr renamable $x18, renamable $x8, $xzr
  Ready @4c
  TopQ.A TopLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 5 4 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x0 = ADDXrs renamable $x0, renamable $x0, 2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 11 9 
  TopQ.A RemainingLatency 0 + 6c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x3 = ADDXrs renamable $x3, renamable $x18, 0
  Ready @6c
  TopQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 11 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x18 = ADDXrs renamable $x19, renamable $x18, 0
  Ready @7c
  TopQ.A BotLatency SU(10) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x0 = UBFMXri renamable $x0, 61, 60
  Ready @8c
  TopQ.A BotLatency SU(11) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 12 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x1 = UBFMXri renamable $x1, 61, 60
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x5 = MADDXrrr renamable $x2, renamable $x16, renamable $x17
  Ready @10c
  TopQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 6 
  TopQ.A RemainingLatency 0 + 11c > CritPath 13
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x18 = ADDXrs renamable $x18, renamable $x0, 0
  Ready @11c
  TopQ.A TopLatency SU(12) 6c
  TopQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 15 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(6) ORDER                              
  Cand SU(13) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x0 = ADDXrs renamable $x3, renamable $x0, 0
  Ready @12c
  TopQ.A BotLatency SU(13) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 15 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d0 = LDRDroX renamable $x5, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx17)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 13
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d1 = LDRDroX renamable $x0, renamable $x2, 0, 1 :: (load 8 from %ir.arrayidx23)
  Ready @14c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 15 16 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d2 = LDRDroX renamable $x18, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx13)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $w0 = nsw ADDWri renamable $w4, 1, 0
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STURWi renamable $w0, $fp, -60 :: (store 4 into %ir.i)
  Ready @17c
  TopQ.A TopLatency SU(20) 8c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @18c
  TopQ.A TopLatency SU(17) 11c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @19c
  TopQ.A TopLatency SU(18) 12c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRDroX renamable $d0, renamable $x18, renamable $x1, 0, 0 :: (store 8 into %ir.arrayidx29)
  Ready @20c
  TopQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x18, renamable $x2 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
SU(1):   renamable $x0, renamable $x1 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
SU(2):   renamable $x3 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
SU(3):   renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(7):   renamable $x18 = MADDXrrr renamable $x18, renamable $x8, $xzr
SU(8):   renamable $x0 = ADDXrs renamable $x0, renamable $x0, 2
SU(9):   $x3 = ADDXrs renamable $x3, renamable $x18, 0
SU(10):   $x18 = ADDXrs renamable $x19, renamable $x18, 0
SU(11):   renamable $x0 = UBFMXri renamable $x0, 61, 60
SU(4):   renamable $x1 = UBFMXri renamable $x1, 61, 60
SU(5):   renamable $x5 = MADDXrrr renamable $x2, renamable $x16, renamable $x17
SU(12):   $x18 = ADDXrs renamable $x18, renamable $x0, 0
SU(13):   $x0 = ADDXrs renamable $x3, renamable $x0, 0
SU(6):   renamable $d0 = LDRDroX renamable $x5, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx17)
SU(14):   renamable $d1 = LDRDroX renamable $x0, renamable $x2, 0, 1 :: (load 8 from %ir.arrayidx23)
SU(15):   renamable $d2 = LDRDroX renamable $x18, renamable $x1, 0, 0 :: (load 8 from %ir.arrayidx13)
SU(16):   renamable $w0 = nsw ADDWri renamable $w4, 1, 0
SU(20):   STURWi renamable $w0, $fp, -60 :: (store 4 into %ir.i)
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(19):   STRDroX renamable $d0, renamable $x18, renamable $x1, 0, 0 :: (store 8 into %ir.arrayidx29)

Fixup kills for %bb.8
********** MI Scheduling **********
laplacian:%bb.9 for.inc30
  From: renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w18
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   STURWi renamable $w18, $fp, -64 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w18, $fp, -64 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(2):   STURWi renamable $w18, $fp, -64 :: (store 4 into %ir.j)

Fixup kills for %bb.9
********** MI Scheduling **********
laplacian:%bb.10 for.inc33
  From: renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.3
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w18
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   STURWi renamable $w18, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.3
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w18, $fp, -68 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(2):   STURWi renamable $w18, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.10
********** MI Scheduling **********
laplacian:%bb.11 for.inc36
  From: renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.1
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w18
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   STURWi renamable $w18, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w18, $fp, -72 :: (store 4 into %ir.iz)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(2):   STURWi renamable $w18, $fp, -72 :: (store 4 into %ir.iz)

Fixup kills for %bb.11
********** MI Scheduling **********
laplacian:%bb.12 for.end38
  From: STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w16 = MOVZWi 40, 0, implicit-def $x16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x17 = ADRP target-flags(aarch64-page) @wdtdr
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
SU(4):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x17 = ADRP target-flags(aarch64-page) @wdtdr
  Ready @0c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 200, 0, implicit-def $x8
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w16 = MOVZWi 40, 0, implicit-def $x16
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
  Ready @3c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(3):   $x17 = ADRP target-flags(aarch64-page) @wdtdr
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
SU(2):   $w16 = MOVZWi 40, 0, implicit-def $x16
SU(4):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
SU(0):   STURWi $wzr, $fp, -72 :: (store 4 into %ir.iz)

********** MI Scheduling **********
laplacian:%bb.12 for.end38
  From: $x0 = ADDXri $sp, 0, 0
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADDXri $sp, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 125, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x19 = ADDXri $sp, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADDXri $sp, 0, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $d0 = FMOVD0
  Ready @1c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w1 = MOVZWi 125, 0
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x19 = ADDXri $sp, 0, 0
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   $x0 = ADDXri $sp, 0, 0
SU(1):   $d0 = FMOVD0
SU(2):   $w1 = MOVZWi 125, 0
SU(3):   $x19 = ADDXri $sp, 0, 0

Fixup kills for %bb.12
********** MI Scheduling **********
laplacian:%bb.13 for.cond40
  From: renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.24, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.24, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.13
Fixup kills for %bb.14
********** MI Scheduling **********
laplacian:%bb.15 for.cond43
  From: renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.23, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.23, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.15
Fixup kills for %bb.16
********** MI Scheduling **********
laplacian:%bb.17 for.cond46
  From: renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.22, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.22, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.17
Fixup kills for %bb.18
********** MI Scheduling **********
laplacian:%bb.19 for.cond49
  From: renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.21, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.21, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.19
********** MI Scheduling **********
laplacian:%bb.20 for.body51
  From: renamable $x18, renamable $x3 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
    To: B %bb.19
 RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $x18, renamable $x3 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x18
    SU(14): Data Latency=4 Reg=$x3
    SU(7): Data Latency=4 Reg=$x3
SU(1):   renamable $x0, renamable $x2 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x0
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x2
    SU(20): Ord  Latency=0 Memory
SU(2):   renamable $x1 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x1
SU(3):   renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(16): Data Latency=4 Reg=$w4
    SU(20): Ord  Latency=0 Memory
SU(4):   renamable $x18 = MADDXrrr renamable $x18, renamable $x8, $xzr
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x18
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x18
    SU(6): Data Latency=1 Reg=$x18
SU(5):   renamable $x2 = UBFMXri renamable $x2, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x2
  Successors:
    SU(19): Data Latency=1 Reg=$x2
    SU(15): Data Latency=1 Reg=$x2
    SU(8): Data Latency=1 Reg=$x2
SU(6):   $x1 = ADDXrs renamable $x1, renamable $x18, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(4): Data Latency=1 Reg=$x18
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x1
    SU(10): Anti Latency=0
SU(7):   renamable $x1 = MADDXrrr renamable $x3, renamable $x16, renamable $x1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x1
    SU(0): Data Latency=4 Reg=$x3
  Successors:
    SU(8): Data Latency=1 Reg=$x1
SU(8):   renamable $d0 = LDRDroX renamable $x1, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx63)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(7): Data Latency=1 Reg=$x1
    SU(5): Data Latency=1 Reg=$x2
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=4 Reg=$d0
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
SU(9):   renamable $x0 = ADDXrs renamable $x0, renamable $x0, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x0
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
SU(10):   $x18 = ADDXrs renamable $x19, renamable $x18, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(6): Anti Latency=0
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x18
SU(11):   renamable $x0 = UBFMXri renamable $x0, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x0
    SU(12): Data Latency=1 Reg=$x0
SU(12):   $x18 = ADDXrs renamable $x18, renamable $x0, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=$x0
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x18
  Successors:
    SU(19): Data Latency=1 Reg=$x18
    SU(15): Data Latency=1 Reg=$x18
    SU(13): Anti Latency=0
SU(13):   $x0 = ADDXrs renamable $x17, renamable $x0, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x0
  Successors:
    SU(16): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x0
SU(14):   renamable $d1 = LDRDroX renamable $x0, renamable $x3, 0, 1 :: (load 8 from %ir.arrayidx67)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(13): Data Latency=1 Reg=$x0
    SU(0): Data Latency=4 Reg=$x3
  Successors:
    SU(17): Data Latency=4 Reg=$d1
    SU(16): Anti Latency=0
SU(15):   renamable $d2 = LDRDroX renamable $x18, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx57)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 5
  Predecessors:
    SU(12): Data Latency=1 Reg=$x18
    SU(5): Data Latency=1 Reg=$x2
  Successors:
    SU(18): Data Latency=4 Reg=$d2
    SU(19): Ord  Latency=0 Memory
SU(16):   renamable $w0 = nsw ADDWri renamable $w4, 1, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(14): Anti Latency=0
    SU(13): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w4
  Successors:
    SU(20): Data Latency=1 Reg=$w0
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 2
  Predecessors:
    SU(14): Data Latency=4 Reg=$d1
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d0
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$d0
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d0
    SU(15): Data Latency=4 Reg=$d2
  Successors:
    SU(19): Data Latency=1 Reg=$d0
SU(19):   STRDroX renamable $d0, renamable $x18, renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx75)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=$x18
    SU(8): Ord  Latency=0 Memory
    SU(5): Data Latency=1 Reg=$x2
SU(20):   STURWi renamable $w0, $fp, -60 :: (store 4 into %ir.i)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=$w0
    SU(8): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x18, renamable $x3 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x0, renamable $x2 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  Ready @1c
  TopQ.A BotLatency SU(1) 13c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 9 5 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 13
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x1 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 9 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 9 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x18 = MADDXrrr renamable $x18, renamable $x8, $xzr
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 9 
  TopQ.A RemainingLatency 0 + 5c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(9) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x0 = ADDXrs renamable $x0, renamable $x0, 2
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x1 = ADDXrs renamable $x1, renamable $x18, 0
  Ready @6c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 7 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) $x18 = ADDXrs renamable $x19, renamable $x18, 0
  Ready @7c
  TopQ.A BotLatency SU(10) 8c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 11 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(5) ORDER                              
  Cand SU(11) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x0 = UBFMXri renamable $x0, 61, 60
  Ready @8c
  TopQ.A BotLatency SU(11) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 12 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x2 = UBFMXri renamable $x2, 61, 60
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 7 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(12) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x1 = MADDXrrr renamable $x3, renamable $x16, renamable $x1
  Ready @10c
  TopQ.A TopLatency SU(7) 6c
  TopQ.A BotLatency SU(7) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 13
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x18 = ADDXrs renamable $x18, renamable $x0, 0
  Ready @11c
  TopQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 15 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(8) ORDER                              
  Cand SU(13) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x0 = ADDXrs renamable $x17, renamable $x0, 0
  Ready @12c
  TopQ.A BotLatency SU(13) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d0 = LDRDroX renamable $x1, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx63)
  Ready @13c
  TopQ.A TopLatency SU(8) 7c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 14 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 13
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d1 = LDRDroX renamable $x0, renamable $x3, 0, 1 :: (load 8 from %ir.arrayidx67)
  Ready @14c
  TopQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 15 16 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d2 = LDRDroX renamable $x18, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx57)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $w0 = nsw ADDWri renamable $w4, 1, 0
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 17 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STURWi renamable $w0, $fp, -60 :: (store 4 into %ir.i)
  Ready @17c
  TopQ.A TopLatency SU(20) 8c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @18c
  TopQ.A TopLatency SU(17) 11c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @19c
  TopQ.A TopLatency SU(18) 12c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRDroX renamable $d0, renamable $x18, renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx75)
  Ready @20c
  TopQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $x18, renamable $x3 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
SU(1):   renamable $x0, renamable $x2 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
SU(2):   renamable $x1 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
SU(3):   renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(4):   renamable $x18 = MADDXrrr renamable $x18, renamable $x8, $xzr
SU(9):   renamable $x0 = ADDXrs renamable $x0, renamable $x0, 2
SU(6):   $x1 = ADDXrs renamable $x1, renamable $x18, 0
SU(10):   $x18 = ADDXrs renamable $x19, renamable $x18, 0
SU(11):   renamable $x0 = UBFMXri renamable $x0, 61, 60
SU(5):   renamable $x2 = UBFMXri renamable $x2, 61, 60
SU(7):   renamable $x1 = MADDXrrr renamable $x3, renamable $x16, renamable $x1
SU(12):   $x18 = ADDXrs renamable $x18, renamable $x0, 0
SU(13):   $x0 = ADDXrs renamable $x17, renamable $x0, 0
SU(8):   renamable $d0 = LDRDroX renamable $x1, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx63)
SU(14):   renamable $d1 = LDRDroX renamable $x0, renamable $x3, 0, 1 :: (load 8 from %ir.arrayidx67)
SU(15):   renamable $d2 = LDRDroX renamable $x18, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx57)
SU(16):   renamable $w0 = nsw ADDWri renamable $w4, 1, 0
SU(20):   STURWi renamable $w0, $fp, -60 :: (store 4 into %ir.i)
SU(17):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(18):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(19):   STRDroX renamable $d0, renamable $x18, renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx75)

Fixup kills for %bb.20
********** MI Scheduling **********
laplacian:%bb.21 for.inc79
  From: renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.17
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w18
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   STURWi renamable $w18, $fp, -64 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w18, $fp, -64 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(2):   STURWi renamable $w18, $fp, -64 :: (store 4 into %ir.j)

Fixup kills for %bb.21
********** MI Scheduling **********
laplacian:%bb.22 for.inc82
  From: renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.15
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w18
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   STURWi renamable $w18, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w18, $fp, -68 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(2):   STURWi renamable $w18, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.22
********** MI Scheduling **********
laplacian:%bb.23 for.inc85
  From: renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.13
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w18
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   STURWi renamable $w18, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w18, $fp, -72 :: (store 4 into %ir.iz)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(2):   STURWi renamable $w18, $fp, -72 :: (store 4 into %ir.iz)

Fixup kills for %bb.23
********** MI Scheduling **********
laplacian:%bb.24 for.end87
  From: STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w16 = MOVZWi 40, 0, implicit-def $x16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x17 = ADRP target-flags(aarch64-page) @wdtdr
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
SU(4):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x17 = ADRP target-flags(aarch64-page) @wdtdr
  Ready @0c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 200, 0, implicit-def $x8
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $w16 = MOVZWi 40, 0, implicit-def $x16
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
  Ready @3c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(3):   $x17 = ADRP target-flags(aarch64-page) @wdtdr
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
SU(2):   $w16 = MOVZWi 40, 0, implicit-def $x16
SU(4):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @wdtdr, 0
SU(0):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)

********** MI Scheduling **********
laplacian:%bb.24 for.end87
  From: renamable $x19 = LDURXi $fp, -32 :: (dereferenceable load 8 from %ir.r.addr)
    To: BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x19 = LDURXi $fp, -32 :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$x19
SU(1):   $d0 = FMOVD0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 125, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x0 = ORRXrs $xzr, $x19, 0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @r_init, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit-def $sp
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x19 = LDURXi $fp, -32 :: (dereferenceable load 8 from %ir.r.addr)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $d0 = FMOVD0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w1 = MOVZWi 125, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ORRXrs $xzr, $x19, 0
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $x19 = LDURXi $fp, -32 :: (dereferenceable load 8 from %ir.r.addr)
SU(1):   $d0 = FMOVD0
SU(2):   $w1 = MOVZWi 125, 0
SU(3):   $x0 = ORRXrs $xzr, $x19, 0

Fixup kills for %bb.24
********** MI Scheduling **********
laplacian:%bb.25 for.cond88
  From: renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.36, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.36, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.25
Fixup kills for %bb.26
********** MI Scheduling **********
laplacian:%bb.27 for.cond91
  From: renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: Bcc 12, %bb.35, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.35, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.27
Fixup kills for %bb.28
********** MI Scheduling **********
laplacian:%bb.29 for.cond94
  From: renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.34, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.34, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.29
Fixup kills for %bb.30
********** MI Scheduling **********
laplacian:%bb.31 for.cond97
  From: renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.33, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w18
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.33, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w18, 4, 0, implicit-def $nzcv

Fixup kills for %bb.31
********** MI Scheduling **********
laplacian:%bb.32 for.body99
  From: renamable $x3, renamable $x18 = LDPXi $fp, -5 :: (dereferenceable load 8 from %ir.r.addr), (dereferenceable load 8 from %ir.u.addr)
    To: B %bb.31
 RegionInstrs: 20
ScheduleDAGMI::schedule starting
SU(0):   renamable $x3, renamable $x18 = LDPXi $fp, -5 :: (dereferenceable load 8 from %ir.r.addr), (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x3
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x18
    SU(16): Ord  Latency=0 Memory
SU(1):   renamable $x0, renamable $x4 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 18
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x0
    SU(3): Data Latency=4 Reg=$x0
    SU(12): Data Latency=4 Reg=$x4
    SU(6): Data Latency=4 Reg=$x4
    SU(16): Ord  Latency=0 Memory
SU(2):   renamable $x1, renamable $x2 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x1
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x2
    SU(19): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
SU(3):   renamable $x18 = MADDXrrr renamable $x0, renamable $x8, renamable $x18
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(1): Data Latency=4 Reg=$x0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x18
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x18
    SU(7): Anti Latency=0
SU(4):   renamable $x1 = ADDXrs renamable $x1, renamable $x1, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
SU(5):   renamable $x2 = UBFMXri renamable $x2, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x2
  Successors:
    SU(16): Data Latency=1 Reg=$x2
    SU(13): Data Latency=1 Reg=$x2
    SU(11): Data Latency=1 Reg=$x2
SU(6):   renamable $x3 = MADDXrrr renamable $x4, renamable $x8, renamable $x3
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 14
  Predecessors:
    SU(1): Data Latency=4 Reg=$x4
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x3
  Successors:
    SU(10): Data Latency=1 Reg=$x3
SU(7):   renamable $x0 = MADDXrrr renamable $x0, renamable $x16, renamable $x17
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x0
  Successors:
    SU(12): Data Latency=1 Reg=$x0
SU(8):   renamable $x1 = UBFMXri renamable $x1, 61, 60
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
    SU(9): Data Latency=1 Reg=$x1
SU(9):   $x18 = ADDXrs renamable $x18, renamable $x1, 0
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(8): Data Latency=1 Reg=$x1
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x18
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x18
    SU(13): Data Latency=1 Reg=$x18
    SU(10): Anti Latency=0
SU(10):   $x1 = ADDXrs renamable $x3, renamable $x1, 0
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x1
    SU(6): Data Latency=1 Reg=$x3
  Successors:
    SU(11): Data Latency=1 Reg=$x1
SU(11):   renamable $d0 = LDRDroX renamable $x1, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx111)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 12
  Predecessors:
    SU(10): Data Latency=1 Reg=$x1
    SU(5): Data Latency=1 Reg=$x2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$d0
    SU(19): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
SU(12):   renamable $d1 = LDRDroX renamable $x0, renamable $x4, 0, 1 :: (load 8 from %ir.arrayidx115)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(7): Data Latency=1 Reg=$x0
    SU(1): Data Latency=4 Reg=$x4
  Successors:
    SU(14): Data Latency=4 Reg=$d1
    SU(16): Ord  Latency=0 Memory
SU(13):   renamable $d2 = LDRDroX renamable $x18, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx105)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 11
  Predecessors:
    SU(9): Data Latency=1 Reg=$x18
    SU(5): Data Latency=1 Reg=$x2
  Successors:
    SU(15): Data Latency=4 Reg=$d2
    SU(17): Anti Latency=0
    SU(19): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
SU(14):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 8
  Predecessors:
    SU(11): Data Latency=4 Reg=$d0
    SU(11): Out  Latency=1
    SU(12): Data Latency=4 Reg=$d1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$d0
SU(15):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 7
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$d0
    SU(13): Data Latency=4 Reg=$d2
  Successors:
    SU(16): Data Latency=1 Reg=$d0
SU(16):   STRDroX renamable $d0, renamable $x18, renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx123)
  # preds left       : 9
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 6
  Predecessors:
    SU(15): Data Latency=1 Reg=$d0
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Data Latency=1 Reg=$x18
    SU(5): Data Latency=1 Reg=$x2
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(17): Anti Latency=0
    SU(19): Ord  Latency=0 Memory
    SU(17): Ord  Latency=1 Memory
SU(17):   renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(16): Anti Latency=0
    SU(16): Ord  Latency=1 Memory
    SU(13): Anti Latency=0
    SU(9): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=4 Reg=$w18
    SU(19): Ord  Latency=0 Memory
SU(18):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=4 Reg=$w18
  Successors:
    SU(19): Data Latency=1 Reg=$w18
SU(19):   STURWi renamable $w18, $fp, -60 :: (store 4 into %ir.i)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$w18
    SU(17): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.31
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 19
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 19
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  19 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x1, renamable $x2 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(2) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 19
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x3, renamable $x18 = LDPXi $fp, -5 :: (dereferenceable load 8 from %ir.r.addr), (dereferenceable load 8 from %ir.u.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x0, renamable $x4 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
  Ready @2c
  TopQ.A BotLatency SU(1) 18c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 6 3 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 19
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x1 = ADDXrs renamable $x1, renamable $x1, 2
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 3 
Queue TopQ.A: 5 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 19
  Cand SU(5) ORDER                              
  Cand SU(8) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x1 = UBFMXri renamable $x1, 61, 60
  Ready @5c
  TopQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 19
  Cand SU(5) ORDER                              
  Cand SU(6) TOP-PATH                  14 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x18 = MADDXrrr renamable $x0, renamable $x8, renamable $x18
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 9 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 19
  Cand SU(5) ORDER                              
  Cand SU(6) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x3 = MADDXrrr renamable $x4, renamable $x8, renamable $x3
  Ready @7c
  TopQ.A BotLatency SU(6) 14c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 7 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 19
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x2 = UBFMXri renamable $x2, 61, 60
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 19
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x0 = MADDXrrr renamable $x0, renamable $x16, renamable $x17
  Ready @9c
  TopQ.A BotLatency SU(7) 13c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 19
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x18 = ADDXrs renamable $x18, renamable $x1, 0
  Ready @10c
  TopQ.A TopLatency SU(9) 6c
  TopQ.A BotLatency SU(9) 13c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 13 10 
  TopQ.A RemainingLatency 0 + 11c > CritPath 19
  Cand SU(12) ORDER                              
  Cand SU(10) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ADDXrs renamable $x3, renamable $x1, 0
  Ready @11c
  TopQ.A BotLatency SU(10) 13c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 13 11 
  TopQ.A RemainingLatency 0 + 12c > CritPath 19
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) renamable $d0 = LDRDroX renamable $x1, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx111)
  Ready @12c
  TopQ.A TopLatency SU(11) 7c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 19
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $d1 = LDRDroX renamable $x0, renamable $x4, 0, 1 :: (load 8 from %ir.arrayidx115)
  Ready @13c
  TopQ.A BotLatency SU(12) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 13
  Executed: 14c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) renamable $d2 = LDRDroX renamable $x18, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx105)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 14
  Executed: 15c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 17 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $d0 = FMULDrr renamable $d0, renamable $d1
  Ready @17c
  TopQ.A TopLatency SU(14) 11c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 15
  Executed: 18c
  Critical: 15c, 15 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) renamable $d0 = FADDDrr renamable $d2, renamable $d0
  Ready @18c
  TopQ.A TopLatency SU(15) 12c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 16
  Executed: 19c
  Critical: 16c, 16 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) STRDroX renamable $d0, renamable $x18, renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx123)
  Ready @19c
  TopQ.A TopLatency SU(16) 13c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 17
  Executed: 20c
  Critical: 17c, 17 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @20c
  TopQ.A TopLatency SU(17) 14c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 18
  Executed: 21c
  Critical: 18c, 18 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 24 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @24c
  TopQ.A TopLatency SU(18) 18c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 19
  Executed: 25c
  Critical: 19c, 19 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STURWi renamable $w18, $fp, -60 :: (store 4 into %ir.i)
  Ready @25c
  TopQ.A TopLatency SU(19) 19c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 20
  Executed: 26c
  Critical: 20c, 20 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(2):   renamable $x1, renamable $x2 = LDPSWi $fp, -16 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i)
SU(0):   renamable $x3, renamable $x18 = LDPXi $fp, -5 :: (dereferenceable load 8 from %ir.r.addr), (dereferenceable load 8 from %ir.u.addr)
SU(1):   renamable $x0, renamable $x4 = LDPSWi $fp, -18 :: (dereferenceable load 4 from %ir.iz), (dereferenceable load 4 from %ir.k)
SU(4):   renamable $x1 = ADDXrs renamable $x1, renamable $x1, 2
SU(8):   renamable $x1 = UBFMXri renamable $x1, 61, 60
SU(3):   renamable $x18 = MADDXrrr renamable $x0, renamable $x8, renamable $x18
SU(6):   renamable $x3 = MADDXrrr renamable $x4, renamable $x8, renamable $x3
SU(5):   renamable $x2 = UBFMXri renamable $x2, 61, 60
SU(7):   renamable $x0 = MADDXrrr renamable $x0, renamable $x16, renamable $x17
SU(9):   $x18 = ADDXrs renamable $x18, renamable $x1, 0
SU(10):   $x1 = ADDXrs renamable $x3, renamable $x1, 0
SU(11):   renamable $d0 = LDRDroX renamable $x1, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx111)
SU(12):   renamable $d1 = LDRDroX renamable $x0, renamable $x4, 0, 1 :: (load 8 from %ir.arrayidx115)
SU(13):   renamable $d2 = LDRDroX renamable $x18, renamable $x2, 0, 0 :: (load 8 from %ir.arrayidx105)
SU(14):   renamable $d0 = FMULDrr renamable $d0, renamable $d1
SU(15):   renamable $d0 = FADDDrr renamable $d2, renamable $d0
SU(16):   STRDroX renamable $d0, renamable $x18, renamable $x2, 0, 0 :: (store 8 into %ir.arrayidx123)
SU(17):   renamable $w18 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(18):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(19):   STURWi renamable $w18, $fp, -60 :: (store 4 into %ir.i)

Fixup kills for %bb.32
********** MI Scheduling **********
laplacian:%bb.33 for.inc127
  From: renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.29
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w18
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   STURWi renamable $w18, $fp, -64 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.29
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w18, $fp, -64 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $w18 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(2):   STURWi renamable $w18, $fp, -64 :: (store 4 into %ir.j)

Fixup kills for %bb.33
********** MI Scheduling **********
laplacian:%bb.34 for.inc130
  From: renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
    To: B %bb.27
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w18
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   STURWi renamable $w18, $fp, -72 :: (store 4 into %ir.iz)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.27
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w18, $fp, -72 :: (store 4 into %ir.iz)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $w18 = LDURWi $fp, -72 :: (dereferenceable load 4 from %ir.iz)
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(2):   STURWi renamable $w18, $fp, -72 :: (store 4 into %ir.iz)

Fixup kills for %bb.34
********** MI Scheduling **********
laplacian:%bb.35 for.inc133
  From: renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.25
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w18
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w18
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   STURWi renamable $w18, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = nsw ADDWri renamable $w18, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w18, $fp, -68 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $w18 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w18 = nsw ADDWri renamable $w18, 1, 0
SU(2):   STURWi renamable $w18, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.35
********** MI Scheduling **********
laplacian:%bb.36 for.end135
  From: STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
    To: End RegionInstrs: 15
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x16 = ADDXri $sp, 1008, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w17 = MOVZWi 1000, 0, implicit-def $x17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x18 = ADRP target-flags(aarch64-page) @g4m1_s
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x18
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x0 = ADDXri $sp, 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   renamable $x6 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=1 Reg=$x6
SU(8):   renamable $d0 = LDRDui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=$x6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(9):   $x1 = ADRP target-flags(aarch64-page) @g5m1_s
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
SU(10):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(11):   $x2 = ADRP target-flags(aarch64-page) @g6m1_s
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x2
SU(12):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(13):   $x3 = ADRP target-flags(aarch64-page) @bm1_s
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x3
SU(14):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 7 9 11 13 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x6 = ADRP target-flags(aarch64-page) %const.1
  Ready @0c
  TopQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 13 9 11 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
  Cand SU(8) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d0 = LDRDui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 13 9 11 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x18 = ADRP target-flags(aarch64-page) @g4m1_s
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 13 9 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(11) TOP-PATH                  2 cycles 
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x1 = ADRP target-flags(aarch64-page) @g5m1_s
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 11 6 13 5 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(11) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x2 = ADRP target-flags(aarch64-page) @g6m1_s
  Ready @4c
  TopQ.A BotLatency SU(11) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 10 6 13 5 12 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(13) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x3 = ADRP target-flags(aarch64-page) @bm1_s
  Ready @5c
  TopQ.A BotLatency SU(13) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 10 6 12 5 14 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 200, 0, implicit-def $x8
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 2 3 10 6 12 5 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x16 = ADDXri $sp, 1008, 0
  Ready @7c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 5 3 10 6 12 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $w17 = MOVZWi 1000, 0, implicit-def $x17
  Ready @8c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 5 12 10 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s, 0
  Ready @9c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 6 12 10 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) $x0 = ADDXri $sp, 0, 0
  Ready @10c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 10 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s, 0
  Ready @11c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 12 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
  Cand SU(12) ORDER                              
Pick Top ORDER     
Scheduling SU(12) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s, 0
  Ready @12c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s, 0
  Ready @13c
  TopQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(7):   renamable $x6 = ADRP target-flags(aarch64-page) %const.1
SU(8):   renamable $d0 = LDRDui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   $x18 = ADRP target-flags(aarch64-page) @g4m1_s
SU(9):   $x1 = ADRP target-flags(aarch64-page) @g5m1_s
SU(11):   $x2 = ADRP target-flags(aarch64-page) @g6m1_s
SU(13):   $x3 = ADRP target-flags(aarch64-page) @bm1_s
SU(1):   $w8 = MOVZWi 200, 0, implicit-def $x8
SU(2):   $x16 = ADDXri $sp, 1008, 0
SU(3):   $w17 = MOVZWi 1000, 0, implicit-def $x17
SU(5):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @g4m1_s, 0
SU(6):   $x0 = ADDXri $sp, 0, 0
SU(10):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @g5m1_s, 0
SU(12):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @g6m1_s, 0
SU(14):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @bm1_s, 0
SU(0):   STURWi $wzr, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.36
********** MI Scheduling **********
laplacian:%bb.37 for.cond136
  From: renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: Bcc 12, %bb.45, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w4
SU(1):   dead $wzr = SUBSWri renamable $w4, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.45, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w4, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   dead $wzr = SUBSWri renamable $w4, 4, 0, implicit-def $nzcv

Fixup kills for %bb.37
Fixup kills for %bb.38
********** MI Scheduling **********
laplacian:%bb.39 for.cond139
  From: renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: Bcc 12, %bb.44, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w4
SU(1):   dead $wzr = SUBSWri renamable $w4, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.44, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w4, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   dead $wzr = SUBSWri renamable $w4, 4, 0, implicit-def $nzcv

Fixup kills for %bb.39
Fixup kills for %bb.40
********** MI Scheduling **********
laplacian:%bb.41 for.cond142
  From: renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
    To: Bcc 12, %bb.43, implicit $nzcv
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w4
SU(1):   dead $wzr = SUBSWri renamable $w4, 4, 0, implicit-def $nzcv
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.43, implicit $nzcv
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w4, 4, 0, implicit-def $nzcv
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(1):   dead $wzr = SUBSWri renamable $w4, 4, 0, implicit-def $nzcv

Fixup kills for %bb.41
********** MI Scheduling **********
laplacian:%bb.42 for.body144
  From: renamable $x4, renamable $x5 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
    To: B %bb.41
 RegionInstrs: 52
ScheduleDAGMI::schedule starting
SU(0):   renamable $x4, renamable $x5 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 36
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x4
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x5
    SU(48): Ord  Latency=0 Memory
SU(1):   renamable $x6 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 34
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x6
    SU(51): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
SU(2):   renamable $x7 = LDURSWi $fp, -44 :: (dereferenceable load 4 from %ir.sizei.addr)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 32
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x7
    SU(48): Ord  Latency=0 Memory
SU(3):   renamable $x19 = LDURXi $fp, -32 :: (dereferenceable load 8 from %ir.r.addr)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 20
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=4 Reg=$x19
    SU(48): Ord  Latency=0 Memory
SU(4):   renamable $d1 = LDURDi $fp, -56 :: (dereferenceable load 8 from %ir.rdtime)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(41): Out  Latency=1
    SU(41): Data Latency=4 Reg=$d1
    SU(48): Ord  Latency=0 Memory
SU(5):   renamable $x4 = MADDXrrr renamable $x4, renamable $x8, $xzr
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 32
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x4
  Successors:
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$x4
    SU(32): Data Latency=1 Reg=$x4
    SU(29): Data Latency=1 Reg=$x4
    SU(25): Data Latency=1 Reg=$x4
    SU(21): Data Latency=1 Reg=$x4
    SU(17): Data Latency=1 Reg=$x4
    SU(13): Data Latency=1 Reg=$x4
    SU(9): Data Latency=1 Reg=$x4
SU(6):   renamable $x5 = ADDXrs renamable $x5, renamable $x5, 2
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 32
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x5
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x5
SU(7):   renamable $x6 = UBFMXri renamable $x6, 61, 60
  # preds left       : 2
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 30
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x6
  Successors:
    SU(48): Data Latency=1 Reg=$x6
    SU(42): Data Latency=1 Reg=$x6
    SU(37): Data Latency=1 Reg=$x6
    SU(34): Data Latency=1 Reg=$x6
    SU(27): Data Latency=1 Reg=$x6
    SU(23): Data Latency=1 Reg=$x6
    SU(19): Data Latency=1 Reg=$x6
    SU(15): Data Latency=1 Reg=$x6
    SU(12): Data Latency=1 Reg=$x6
SU(8):   renamable $x7 = MADDXrrr renamable $x7, renamable $x17, $xzr
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 28
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x7
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x7
    SU(24): Data Latency=1 Reg=$x7
    SU(20): Data Latency=1 Reg=$x7
    SU(16): Data Latency=1 Reg=$x7
SU(9):   $x20 = ADDXrs renamable $x16, renamable $x4, 0
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 31
  Predecessors:
    SU(5): Data Latency=1 Reg=$x4
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x20
    SU(39): Anti Latency=0
SU(10):   renamable $x5 = UBFMXri renamable $x5, 61, 60
  # preds left       : 2
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 31
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x5
  Successors:
    SU(40): Data Latency=1 Reg=$x5
    SU(35): Data Latency=1 Reg=$x5
    SU(31): Data Latency=1 Reg=$x5
    SU(26): Data Latency=1 Reg=$x5
    SU(22): Data Latency=1 Reg=$x5
    SU(18): Data Latency=1 Reg=$x5
    SU(14): Data Latency=1 Reg=$x5
    SU(11): Data Latency=1 Reg=$x5
SU(11):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 30
  Predecessors:
    SU(10): Data Latency=1 Reg=$x5
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x20
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x20
SU(12):   renamable $d2 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx150)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 7
  Height             : 29
  Predecessors:
    SU(11): Data Latency=1 Reg=$x20
    SU(7): Data Latency=1 Reg=$x6
  Successors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=4 Reg=$d2
    SU(13): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(13):   $x20 = ADDXrs renamable $x0, renamable $x4, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 29
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x4
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x20
    SU(39): Anti Latency=0
SU(14):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 28
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x20
    SU(10): Data Latency=1 Reg=$x5
  Successors:
    SU(16): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x20
SU(15):   renamable $d3 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx165)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 27
  Predecessors:
    SU(14): Data Latency=1 Reg=$x20
    SU(7): Data Latency=1 Reg=$x6
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=4 Reg=$d3
    SU(16): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(16):   $x20 = ADDXrs renamable $x18, renamable $x7, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 27
  Predecessors:
    SU(15): Anti Latency=0
    SU(14): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x7
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x20
    SU(30): Anti Latency=0
SU(17):   $x20 = ADDXrs renamable $x20, renamable $x4, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 26
  Predecessors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x20
    SU(5): Data Latency=1 Reg=$x4
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x20
    SU(39): Anti Latency=0
SU(18):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 25
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x20
    SU(10): Data Latency=1 Reg=$x5
  Successors:
    SU(20): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x20
SU(19):   renamable $d4 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx158)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 24
  Predecessors:
    SU(18): Data Latency=1 Reg=$x20
    SU(7): Data Latency=1 Reg=$x6
  Successors:
    SU(34): Out  Latency=1
    SU(33): Data Latency=4 Reg=$d4
    SU(20): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(20):   $x20 = ADDXrs renamable $x1, renamable $x7, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 24
  Predecessors:
    SU(19): Anti Latency=0
    SU(18): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x7
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x20
    SU(30): Anti Latency=0
SU(21):   $x20 = ADDXrs renamable $x20, renamable $x4, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 23
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x20
    SU(5): Data Latency=1 Reg=$x4
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x20
    SU(39): Anti Latency=0
SU(22):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 22
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x20
    SU(10): Data Latency=1 Reg=$x5
  Successors:
    SU(24): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x20
SU(23):   renamable $d5 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx173)
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 21
  Predecessors:
    SU(22): Data Latency=1 Reg=$x20
    SU(7): Data Latency=1 Reg=$x6
  Successors:
    SU(37): Out  Latency=1
    SU(36): Data Latency=4 Reg=$d5
    SU(24): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(24):   $x20 = ADDXrs renamable $x2, renamable $x7, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 21
  Predecessors:
    SU(23): Anti Latency=0
    SU(22): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x7
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x20
    SU(30): Anti Latency=0
SU(25):   $x20 = ADDXrs renamable $x20, renamable $x4, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 20
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x20
    SU(5): Data Latency=1 Reg=$x4
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x20
    SU(39): Anti Latency=0
SU(26):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 19
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x20
    SU(10): Data Latency=1 Reg=$x5
  Successors:
    SU(28): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x20
SU(27):   renamable $d6 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx189)
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 18
  Predecessors:
    SU(26): Data Latency=1 Reg=$x20
    SU(7): Data Latency=1 Reg=$x6
  Successors:
    SU(38): Data Latency=4 Reg=$d6
    SU(28): Anti Latency=0
    SU(48): Ord  Latency=0 Memory
SU(28):   renamable $x20 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 18
  Predecessors:
    SU(27): Anti Latency=0
    SU(26): Out  Latency=1
  Successors:
    SU(39): Data Latency=4 Reg=$x20
    SU(48): Ord  Latency=0 Memory
SU(29):   $x19 = ADDXrs renamable $x19, renamable $x4, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 16
  Predecessors:
    SU(5): Data Latency=1 Reg=$x4
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x19
  Successors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x19
    SU(39): Anti Latency=0
SU(30):   $x7 = ADDXrs renamable $x3, renamable $x7, 0
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 19
  Predecessors:
    SU(24): Anti Latency=0
    SU(20): Anti Latency=0
    SU(16): Anti Latency=0
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x7
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x7
SU(31):   $x19 = ADDXrs renamable $x19, renamable $x5, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 15
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x19
    SU(10): Data Latency=1 Reg=$x5
  Successors:
    SU(48): Data Latency=1 Reg=$x19
    SU(34): Data Latency=1 Reg=$x19
SU(32):   $x7 = ADDXrs renamable $x7, renamable $x4, 0
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 18
  Predecessors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x7
    SU(5): Data Latency=1 Reg=$x4
  Successors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x7
    SU(39): Anti Latency=0
SU(33):   renamable $d2 = FMULDrr renamable $d2, renamable $d4
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 14
  Predecessors:
    SU(19): Data Latency=4 Reg=$d4
    SU(12): Out  Latency=1
    SU(12): Data Latency=4 Reg=$d2
  Successors:
    SU(43): Out  Latency=1
    SU(43): Data Latency=1 Reg=$d2
    SU(34): Anti Latency=0
SU(34):   renamable $d4 = LDRDroX renamable $x19, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx181)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 14
  Predecessors:
    SU(33): Anti Latency=0
    SU(31): Data Latency=1 Reg=$x19
    SU(19): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x6
  Successors:
    SU(38): Out  Latency=1
    SU(38): Data Latency=4 Reg=$d4
    SU(51): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
SU(35):   $x7 = ADDXrs renamable $x7, renamable $x5, 0
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 17
  Predecessors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x7
    SU(10): Data Latency=1 Reg=$x5
  Successors:
    SU(37): Data Latency=1 Reg=$x7
SU(36):   renamable $d3 = FMULDrr renamable $d3, renamable $d5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 16
  Predecessors:
    SU(23): Data Latency=4 Reg=$d5
    SU(15): Out  Latency=1
    SU(15): Data Latency=4 Reg=$d3
  Successors:
    SU(43): Data Latency=1 Reg=$d3
    SU(37): Anti Latency=0
SU(37):   renamable $d5 = LDRDroX renamable $x7, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx200)
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 19
  Height             : 16
  Predecessors:
    SU(36): Anti Latency=0
    SU(35): Data Latency=1 Reg=$x7
    SU(23): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x6
  Successors:
    SU(42): Out  Latency=1
    SU(41): Data Latency=4 Reg=$d5
    SU(48): Ord  Latency=0 Memory
SU(38):   renamable $d4 = FMULDrr renamable $d4, renamable $d6
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 10
  Predecessors:
    SU(27): Data Latency=4 Reg=$d6
    SU(34): Data Latency=4 Reg=$d4
    SU(34): Out  Latency=1
  Successors:
    SU(44): Data Latency=1 Reg=$d4
SU(39):   $x4 = ADDXrs renamable $x20, renamable $x4, 0
  # preds left       : 10
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 14
  Predecessors:
    SU(28): Data Latency=4 Reg=$x20
    SU(29): Anti Latency=0
    SU(32): Anti Latency=0
    SU(25): Anti Latency=0
    SU(21): Anti Latency=0
    SU(17): Anti Latency=0
    SU(13): Anti Latency=0
    SU(9): Anti Latency=0
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x4
  Successors:
    SU(40): Out  Latency=1
    SU(40): Data Latency=1 Reg=$x4
SU(40):   $x4 = ADDXrs renamable $x4, renamable $x5, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 13
  Predecessors:
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$x4
    SU(10): Data Latency=1 Reg=$x5
  Successors:
    SU(49): Out  Latency=1
    SU(42): Data Latency=1 Reg=$x4
SU(41):   renamable $d1 = FMULDrr renamable $d5, renamable $d1
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 12
  Predecessors:
    SU(37): Data Latency=4 Reg=$d5
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    SU(46): Out  Latency=1
    SU(46): Data Latency=1 Reg=$d1
    SU(42): Anti Latency=0
SU(42):   renamable $d5 = LDRDroX renamable $x4, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx207)
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 12
  Predecessors:
    SU(41): Anti Latency=0
    SU(40): Data Latency=1 Reg=$x4
    SU(37): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x6
  Successors:
    SU(46): Data Latency=4 Reg=$d5
    SU(49): Anti Latency=0
    SU(51): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
SU(43):   renamable $d2 = FADDDrr renamable $d2, renamable $d3
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 10
  Predecessors:
    SU(36): Data Latency=1 Reg=$d3
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$d2
  Successors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d2
SU(44):   renamable $d2 = FADDDrr renamable $d2, renamable $d4
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 9
  Predecessors:
    SU(38): Data Latency=1 Reg=$d4
    SU(43): Data Latency=1 Reg=$d2
    SU(43): Out  Latency=1
  Successors:
    SU(45): Out  Latency=1
    SU(45): Data Latency=1 Reg=$d2
SU(45):   renamable $d2 = FMULDrr renamable $d2, renamable $d0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 8
  Predecessors:
    SU(44): Out  Latency=1
    SU(44): Data Latency=1 Reg=$d2
  Successors:
    SU(47): Data Latency=1 Reg=$d2
SU(46):   renamable $d1 = FMULDrr renamable $d1, renamable $d5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 8
  Predecessors:
    SU(42): Data Latency=4 Reg=$d5
    SU(41): Out  Latency=1
    SU(41): Data Latency=1 Reg=$d1
  Successors:
    SU(47): Out  Latency=1
    SU(47): Data Latency=1 Reg=$d1
SU(47):   renamable $d1 = FADDDrr renamable $d2, renamable $d1
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 7
  Predecessors:
    SU(46): Out  Latency=1
    SU(46): Data Latency=1 Reg=$d1
    SU(45): Data Latency=1 Reg=$d2
  Successors:
    SU(48): Data Latency=1 Reg=$d1
SU(48):   STRDroX renamable $d1, renamable $x19, renamable $x6, 0, 0 :: (store 8 into %ir.arrayidx215)
  # preds left       : 17
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 30
  Height             : 6
  Predecessors:
    SU(47): Data Latency=1 Reg=$d1
    SU(42): Ord  Latency=0 Memory
    SU(37): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(31): Data Latency=1 Reg=$x19
    SU(28): Ord  Latency=0 Memory
    SU(27): Ord  Latency=0 Memory
    SU(23): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(7): Data Latency=1 Reg=$x6
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(51): Ord  Latency=0 Memory
    SU(49): Ord  Latency=1 Memory
SU(49):   renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 31
  Height             : 5
  Predecessors:
    SU(48): Ord  Latency=1 Memory
    SU(42): Anti Latency=0
    SU(40): Out  Latency=1
  Successors:
    SU(50): Out  Latency=1
    SU(50): Data Latency=4 Reg=$w4
    SU(51): Ord  Latency=0 Memory
SU(50):   renamable $w4 = nsw ADDWri renamable $w4, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 1
  Predecessors:
    SU(49): Out  Latency=1
    SU(49): Data Latency=4 Reg=$w4
  Successors:
    SU(51): Data Latency=1 Reg=$w4
SU(51):   STURWi renamable $w4, $fp, -60 :: (store 4 into %ir.i)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 36
  Height             : 0
  Predecessors:
    SU(50): Data Latency=1 Reg=$w4
    SU(49): Ord  Latency=0 Memory
    SU(48): Ord  Latency=0 Memory
    SU(42): Ord  Latency=0 Memory
    SU(34): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.41
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 36
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 36
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x4, renamable $x5 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 36c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 
Queue TopQ.A: 4 1 2 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  34 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x6 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 7 
Queue TopQ.A: 4 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  20 cycles 
  Cand SU(2) TOP-PATH                  32 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x7 = LDURSWi $fp, -44 :: (dereferenceable load 4 from %ir.sizei.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 6 7 8 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x19 = LDURXi $fp, -32 :: (dereferenceable load 8 from %ir.r.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 7 
Queue TopQ.A: 4 5 6 
  TopQ.A RemainingLatency 0 + 4c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(5) TOP-PATH                  32 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x4 = MADDXrrr renamable $x4, renamable $x8, $xzr
  Ready @4c
  TopQ.A TopLatency SU(5) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 29 
Queue TopQ.A: 4 6 9 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(6) TOP-PATH                  32 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x5 = ADDXrs renamable $x5, renamable $x5, 2
  Ready @5c
  TopQ.A BotLatency SU(6) 32c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 29 
Queue TopQ.A: 4 7 9 10 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(7) TOP-PATH                  30 cycles 
  Cand SU(9) TOP-PATH                  31 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x20 = ADDXrs renamable $x16, renamable $x4, 0
  Ready @6c
  TopQ.A TopLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 7 8 10 29 
  TopQ.A RemainingLatency 0 + 7c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(7) TOP-PATH                  30 cycles 
  Cand SU(10) TOP-PATH                  31 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x5 = UBFMXri renamable $x5, 61, 60
  Ready @7c
  TopQ.A BotLatency SU(10) 31c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 7 8 29 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(7) TOP-PATH                  30 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x6 = UBFMXri renamable $x6, 61, 60
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 11 8 29 
  TopQ.A RemainingLatency 0 + 9c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(11) TOP-PATH                  30 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $x20 = ADDXrs renamable $x20, renamable $x5, 0
  Ready @9c
  TopQ.A TopLatency SU(11) 6c
  TopQ.A BotLatency SU(11) 30c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 8 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  28 cycles 
  Cand SU(12) TOP-PATH                  29 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $d2 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx150)
  Ready @10c
  TopQ.A TopLatency SU(12) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 8 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  28 cycles 
  Cand SU(13) TOP-PATH                  29 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x20 = ADDXrs renamable $x0, renamable $x4, 0
  Ready @11c
  TopQ.A BotLatency SU(13) 29c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 8 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(8) TOP-PATH                  28 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x7 = MADDXrrr renamable $x7, renamable $x17, $xzr
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(14) TOP-PATH                  28 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x20 = ADDXrs renamable $x20, renamable $x5, 0
  Ready @13c
  TopQ.A TopLatency SU(14) 8c
  TopQ.A BotLatency SU(14) 28c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(15) TOP-PATH                  27 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $d3 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx165)
  Ready @14c
  TopQ.A TopLatency SU(15) 9c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 16 
  TopQ.A RemainingLatency 0 + 15c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(16) TOP-PATH                  27 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $x20 = ADDXrs renamable $x18, renamable $x7, 0
  Ready @15c
  TopQ.A BotLatency SU(16) 27c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 17 
  TopQ.A RemainingLatency 0 + 16c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(17) TOP-PATH                  26 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x20 = ADDXrs renamable $x20, renamable $x4, 0
  Ready @16c
  TopQ.A TopLatency SU(17) 10c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 18 
  TopQ.A RemainingLatency 0 + 17c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(18) TOP-PATH                  25 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) $x20 = ADDXrs renamable $x20, renamable $x5, 0
  Ready @17c
  TopQ.A TopLatency SU(18) 11c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 19 
  TopQ.A RemainingLatency 0 + 18c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(19) TOP-PATH                  24 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $d4 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx158)
  Ready @18c
  TopQ.A TopLatency SU(19) 12c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 33 
Queue TopQ.A: 4 29 20 
  TopQ.A RemainingLatency 0 + 19c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(20) TOP-PATH                  24 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) $x20 = ADDXrs renamable $x1, renamable $x7, 0
  Ready @19c
  TopQ.A BotLatency SU(20) 24c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 33 
Queue TopQ.A: 4 29 21 
  TopQ.A RemainingLatency 0 + 20c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(21) TOP-PATH                  23 cycles 
Pick Top TOP-PATH  
Scheduling SU(21) $x20 = ADDXrs renamable $x20, renamable $x4, 0
  Ready @20c
  TopQ.A TopLatency SU(21) 13c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 33 
Queue TopQ.A: 4 29 22 
  TopQ.A RemainingLatency 0 + 21c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(22) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(22) $x20 = ADDXrs renamable $x20, renamable $x5, 0
  Ready @21c
  TopQ.A TopLatency SU(22) 14c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 23 33 
  TopQ.A RemainingLatency 0 + 22c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(23) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(23) renamable $d5 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx173)
  Ready @22c
  TopQ.A TopLatency SU(23) 15c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 36 
Queue TopQ.A: 4 29 33 24 
  TopQ.A RemainingLatency 0 + 23c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(24) TOP-PATH                  21 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) $x20 = ADDXrs renamable $x2, renamable $x7, 0
  Ready @23c
  TopQ.A BotLatency SU(24) 21c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 36 
Queue TopQ.A: 4 29 33 25 30 
  TopQ.A RemainingLatency 0 + 24c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(25) TOP-PATH                  20 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) $x20 = ADDXrs renamable $x20, renamable $x4, 0
  Ready @24c
  TopQ.A TopLatency SU(25) 16c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 36 
Queue TopQ.A: 4 29 33 30 26 
  TopQ.A RemainingLatency 0 + 25c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(30) TOP-PATH                  19 cycles 
  Cand SU(26) ORDER                              
Pick Top ORDER     
Scheduling SU(26) $x20 = ADDXrs renamable $x20, renamable $x5, 0
  Ready @25c
  TopQ.A TopLatency SU(26) 17c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 30 27 36 
  TopQ.A RemainingLatency 0 + 26c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(30) TOP-PATH                  19 cycles 
Pick Top TOP-PATH  
Scheduling SU(30) $x7 = ADDXrs renamable $x3, renamable $x7, 0
  Ready @26c
  TopQ.A BotLatency SU(30) 19c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 27 32 
  TopQ.A RemainingLatency 0 + 27c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(27) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) renamable $d6 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx189)
  Ready @27c
  TopQ.A TopLatency SU(27) 18c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 32 28 
  TopQ.A RemainingLatency 0 + 28c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(32) TOP-PATH                  18 cycles 
  Cand SU(28) ORDER                              
Pick Top ORDER     
Scheduling SU(28) renamable $x20 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
  Ready @28c
  TopQ.A BotLatency SU(28) 18c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 32 
  TopQ.A RemainingLatency 0 + 29c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(32) TOP-PATH                  18 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) $x7 = ADDXrs renamable $x7, renamable $x4, 0
  Ready @29c
  TopQ.A BotLatency SU(32) 18c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 35 
  TopQ.A RemainingLatency 0 + 30c > CritPath 36
  Cand SU(4) ORDER                              
  Cand SU(35) TOP-PATH                  17 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) $x7 = ADDXrs renamable $x7, renamable $x5, 0
  Ready @30c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 29 33 36 
  TopQ.A RemainingLatency 0 + 31c > CritPath 36
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDURDi $fp, -56 :: (dereferenceable load 8 from %ir.rdtime)
  Ready @31c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 36 29 33 
  TopQ.A RemainingLatency 0 + 32c > CritPath 36
  Cand SU(36) ORDER                              
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) $x19 = ADDXrs renamable $x19, renamable $x4, 0
  Ready @32c
  TopQ.A BotLatency SU(29) 16c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 36 33 31 39 
  TopQ.A RemainingLatency 0 + 33c > CritPath 36
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) renamable $d3 = FMULDrr renamable $d3, renamable $d5
  Ready @33c
  TopQ.A TopLatency SU(36) 19c
  TopQ.A BotLatency SU(36) 16c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 33 31 37 
  TopQ.A RemainingLatency 0 + 34c > CritPath 36
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(31) TOP-PATH                  15 cycles 
  Cand SU(37) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(37) renamable $d5 = LDRDroX renamable $x7, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx200)
  Ready @34c
  TopQ.A BotLatency SU(37) 16c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 41 
Queue TopQ.A: 39 33 31 
  TopQ.A RemainingLatency 0 + 35c > CritPath 36
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
  Cand SU(31) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(31) $x19 = ADDXrs renamable $x19, renamable $x5, 0
  Ready @35c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 41 
Queue TopQ.A: 39 33 
  TopQ.A RemainingLatency 0 + 36c > CritPath 36
  Cand SU(39) ORDER                              
  Cand SU(33) ORDER                              
Pick Top ORDER     
Scheduling SU(33) renamable $d2 = FMULDrr renamable $d2, renamable $d4
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 41 
Queue TopQ.A: 39 43 34 
  TopQ.A RemainingLatency 0 + 37c > CritPath 36
  Cand SU(39) ORDER                              
  Cand SU(34) ORDER                              
Pick Top ORDER     
Scheduling SU(34) renamable $d4 = LDRDroX renamable $x19, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx181)
  Ready @37c
  TopQ.A BotLatency SU(34) 14c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 39 43 41 
  TopQ.A RemainingLatency 0 + 38c > CritPath 36
  Cand SU(39) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(39) $x4 = ADDXrs renamable $x20, renamable $x4, 0
  Ready @38c
  TopQ.A TopLatency SU(39) 22c
  TopQ.A BotLatency SU(39) 14c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 41 43 40 
  TopQ.A RemainingLatency 0 + 39c > CritPath 36
  Cand SU(41) ORDER                              
  Cand SU(40) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(40) $x4 = ADDXrs renamable $x4, renamable $x5, 0
  Ready @39c
  TopQ.A TopLatency SU(40) 23c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 38 
Queue TopQ.A: 41 43 
  TopQ.A RemainingLatency 0 + 40c > CritPath 36
  Cand SU(41) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(41) renamable $d1 = FMULDrr renamable $d5, renamable $d1
  Ready @40c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 43 42 38 
  TopQ.A RemainingLatency 0 + 41c > CritPath 36
  Cand SU(43) ORDER                              
  Cand SU(42) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(42) renamable $d5 = LDRDroX renamable $x4, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx207)
  Ready @41c
  TopQ.A TopLatency SU(42) 24c
  TopQ.A BotLatency SU(42) 12c
  *** Max MOps 1 at cycle 41
Cycle: 42 TopQ.A
TopQ.A @42c
  Retired: 42
  Executed: 42c
  Critical: 42c, 42 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 46 
Queue TopQ.A: 43 38 
  TopQ.A RemainingLatency 0 + 42c > CritPath 36
  Cand SU(43) ORDER                              
  Cand SU(38) ORDER                              
Pick Top ORDER     
Scheduling SU(38) renamable $d4 = FMULDrr renamable $d4, renamable $d6
  Ready @42c
  *** Max MOps 1 at cycle 42
Cycle: 43 TopQ.A
TopQ.A @43c
  Retired: 43
  Executed: 43c
  Critical: 43c, 43 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 46 
Queue TopQ.A: 43 
Pick Top ONLY1     
Scheduling SU(43) renamable $d2 = FADDDrr renamable $d2, renamable $d3
  Ready @43c
  *** Max MOps 1 at cycle 43
Cycle: 44 TopQ.A
TopQ.A @44c
  Retired: 44
  Executed: 44c
  Critical: 44c, 44 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 46 
Queue TopQ.A: 44 
Pick Top ONLY1     
Scheduling SU(44) renamable $d2 = FADDDrr renamable $d2, renamable $d4
  Ready @44c
  *** Max MOps 1 at cycle 44
Cycle: 45 TopQ.A
TopQ.A @45c
  Retired: 45
  Executed: 45c
  Critical: 45c, 45 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 45 46 
  TopQ.A RemainingLatency 0 + 45c > CritPath 36
  Cand SU(45) ORDER                              
Pick Top ORDER     
Scheduling SU(45) renamable $d2 = FMULDrr renamable $d2, renamable $d0
  Ready @45c
  *** Max MOps 1 at cycle 45
Cycle: 46 TopQ.A
TopQ.A @46c
  Retired: 46
  Executed: 46c
  Critical: 46c, 46 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 46 
Pick Top ONLY1     
Scheduling SU(46) renamable $d1 = FMULDrr renamable $d1, renamable $d5
  Ready @46c
  TopQ.A TopLatency SU(46) 28c
  TopQ.A BotLatency SU(46) 8c
  *** Max MOps 1 at cycle 46
Cycle: 47 TopQ.A
TopQ.A @47c
  Retired: 47
  Executed: 47c
  Critical: 47c, 47 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 47 
Pick Top ONLY1     
Scheduling SU(47) renamable $d1 = FADDDrr renamable $d2, renamable $d1
  Ready @47c
  TopQ.A TopLatency SU(47) 29c
  *** Max MOps 1 at cycle 47
Cycle: 48 TopQ.A
TopQ.A @48c
  Retired: 48
  Executed: 48c
  Critical: 48c, 48 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 48 
Pick Top ONLY1     
Scheduling SU(48) STRDroX renamable $d1, renamable $x19, renamable $x6, 0, 0 :: (store 8 into %ir.arrayidx215)
  Ready @48c
  TopQ.A TopLatency SU(48) 30c
  *** Max MOps 1 at cycle 48
Cycle: 49 TopQ.A
TopQ.A @49c
  Retired: 49
  Executed: 49c
  Critical: 49c, 49 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 49 
Pick Top ONLY1     
Scheduling SU(49) renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
  Ready @49c
  TopQ.A TopLatency SU(49) 31c
  *** Max MOps 1 at cycle 49
Cycle: 50 TopQ.A
TopQ.A @50c
  Retired: 50
  Executed: 50c
  Critical: 50c, 50 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 53 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 50 
Pick Top ONLY1     
Scheduling SU(50) renamable $w4 = nsw ADDWri renamable $w4, 1, 0
  Ready @53c
  TopQ.A TopLatency SU(50) 35c
  *** Max MOps 1 at cycle 53
Cycle: 54 TopQ.A
TopQ.A @54c
  Retired: 51
  Executed: 54c
  Critical: 51c, 51 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 51 
Pick Top ONLY1     
Scheduling SU(51) STURWi renamable $w4, $fp, -60 :: (store 4 into %ir.i)
  Ready @54c
  TopQ.A TopLatency SU(51) 36c
  *** Max MOps 1 at cycle 54
Cycle: 55 TopQ.A
TopQ.A @55c
  Retired: 52
  Executed: 55c
  Critical: 52c, 52 MOps
  ExpectedLatency: 36c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $x4, renamable $x5 = LDPSWi $fp, -17 :: (dereferenceable load 4 from %ir.k), (dereferenceable load 4 from %ir.j)
SU(1):   renamable $x6 = LDURSWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(2):   renamable $x7 = LDURSWi $fp, -44 :: (dereferenceable load 4 from %ir.sizei.addr)
SU(3):   renamable $x19 = LDURXi $fp, -32 :: (dereferenceable load 8 from %ir.r.addr)
SU(5):   renamable $x4 = MADDXrrr renamable $x4, renamable $x8, $xzr
SU(6):   renamable $x5 = ADDXrs renamable $x5, renamable $x5, 2
SU(9):   $x20 = ADDXrs renamable $x16, renamable $x4, 0
SU(10):   renamable $x5 = UBFMXri renamable $x5, 61, 60
SU(7):   renamable $x6 = UBFMXri renamable $x6, 61, 60
SU(11):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
SU(12):   renamable $d2 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx150)
SU(13):   $x20 = ADDXrs renamable $x0, renamable $x4, 0
SU(8):   renamable $x7 = MADDXrrr renamable $x7, renamable $x17, $xzr
SU(14):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
SU(15):   renamable $d3 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx165)
SU(16):   $x20 = ADDXrs renamable $x18, renamable $x7, 0
SU(17):   $x20 = ADDXrs renamable $x20, renamable $x4, 0
SU(18):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
SU(19):   renamable $d4 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx158)
SU(20):   $x20 = ADDXrs renamable $x1, renamable $x7, 0
SU(21):   $x20 = ADDXrs renamable $x20, renamable $x4, 0
SU(22):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
SU(23):   renamable $d5 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx173)
SU(24):   $x20 = ADDXrs renamable $x2, renamable $x7, 0
SU(25):   $x20 = ADDXrs renamable $x20, renamable $x4, 0
SU(26):   $x20 = ADDXrs renamable $x20, renamable $x5, 0
SU(30):   $x7 = ADDXrs renamable $x3, renamable $x7, 0
SU(27):   renamable $d6 = LDRDroX renamable $x20, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx189)
SU(28):   renamable $x20 = LDURXi $fp, -40 :: (dereferenceable load 8 from %ir.u.addr)
SU(32):   $x7 = ADDXrs renamable $x7, renamable $x4, 0
SU(35):   $x7 = ADDXrs renamable $x7, renamable $x5, 0
SU(4):   renamable $d1 = LDURDi $fp, -56 :: (dereferenceable load 8 from %ir.rdtime)
SU(29):   $x19 = ADDXrs renamable $x19, renamable $x4, 0
SU(36):   renamable $d3 = FMULDrr renamable $d3, renamable $d5
SU(37):   renamable $d5 = LDRDroX renamable $x7, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx200)
SU(31):   $x19 = ADDXrs renamable $x19, renamable $x5, 0
SU(33):   renamable $d2 = FMULDrr renamable $d2, renamable $d4
SU(34):   renamable $d4 = LDRDroX renamable $x19, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx181)
SU(39):   $x4 = ADDXrs renamable $x20, renamable $x4, 0
SU(40):   $x4 = ADDXrs renamable $x4, renamable $x5, 0
SU(41):   renamable $d1 = FMULDrr renamable $d5, renamable $d1
SU(42):   renamable $d5 = LDRDroX renamable $x4, renamable $x6, 0, 0 :: (load 8 from %ir.arrayidx207)
SU(38):   renamable $d4 = FMULDrr renamable $d4, renamable $d6
SU(43):   renamable $d2 = FADDDrr renamable $d2, renamable $d3
SU(44):   renamable $d2 = FADDDrr renamable $d2, renamable $d4
SU(45):   renamable $d2 = FMULDrr renamable $d2, renamable $d0
SU(46):   renamable $d1 = FMULDrr renamable $d1, renamable $d5
SU(47):   renamable $d1 = FADDDrr renamable $d2, renamable $d1
SU(48):   STRDroX renamable $d1, renamable $x19, renamable $x6, 0, 0 :: (store 8 into %ir.arrayidx215)
SU(49):   renamable $w4 = LDURWi $fp, -60 :: (dereferenceable load 4 from %ir.i)
SU(50):   renamable $w4 = nsw ADDWri renamable $w4, 1, 0
SU(51):   STURWi renamable $w4, $fp, -60 :: (store 4 into %ir.i)

Fixup kills for %bb.42
********** MI Scheduling **********
laplacian:%bb.43 for.inc219
  From: renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
    To: B %bb.39
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w4
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w4 = nsw ADDWri renamable $w4, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w4
  Successors:
    SU(2): Data Latency=1 Reg=$w4
SU(2):   STURWi renamable $w4, $fp, -64 :: (store 4 into %ir.j)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w4
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.39
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w4 = nsw ADDWri renamable $w4, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w4, $fp, -64 :: (store 4 into %ir.j)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   renamable $w4 = LDURWi $fp, -64 :: (dereferenceable load 4 from %ir.j)
SU(1):   renamable $w4 = nsw ADDWri renamable $w4, 1, 0
SU(2):   STURWi renamable $w4, $fp, -64 :: (store 4 into %ir.j)

Fixup kills for %bb.43
********** MI Scheduling **********
laplacian:%bb.44 for.inc222
  From: renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
    To: B %bb.37
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w4
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w4 = nsw ADDWri renamable $w4, 1, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w4
  Successors:
    SU(2): Data Latency=1 Reg=$w4
SU(2):   STURWi renamable $w4, $fp, -68 :: (store 4 into %ir.k)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w4
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.37
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w4 = nsw ADDWri renamable $w4, 1, 0
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w4, $fp, -68 :: (store 4 into %ir.k)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $w4 = LDURWi $fp, -68 :: (dereferenceable load 4 from %ir.k)
SU(1):   renamable $w4 = nsw ADDWri renamable $w4, 1, 0
SU(2):   STURWi renamable $w4, $fp, -68 :: (store 4 into %ir.k)

Fixup kills for %bb.44
Fixup kills for %bb.45
