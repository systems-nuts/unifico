Before MISched:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=1, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=24, align=16, at location [SP]
  fi#20: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: 0x422979CA8D600000, align=8
  cp#2: 1.000000e+06, align=8
  cp#3: 1.000000e+02, align=8
  cp#4: 1.000000e+00, align=8
  cp#5: 6.000000e+01, align=8
Function Live Ins: $w0 in %9, $x1 in %10

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $x1
  %10:gpr64 = COPY $x1
  %9:gpr32 = COPY $w0
  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  STRWui %9:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  STRXui %10:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %12:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  dead $wzr = SUBSWri %12:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !138; cg.c:117:5
  B %bb.2, debug-location !138; cg.c:117:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %387:gpr32 = LDRWui %stack.3.i, 0, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; cg.c:118:9
  $w0 = COPY %387:gpr32, debug-location !141; cg.c:118:9
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !141; cg.c:118:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !141; cg.c:118:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !142; cg.c:119:5
  PCN_STACKMAP 0, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.20.fp, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %387:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !142 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:119:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !142; cg.c:119:5
  %388:gpr32common = LDRWui %stack.3.i, 0, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0, debug-location !143; cg.c:117:30
  STRWui %389:gpr32common, %stack.3.i, 0, debug-location !143 :: (store 4 into %ir.i); cg.c:117:30
  B %bb.1, debug-location !144; cg.c:117:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !153; cg.c:122:15
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, debug-location !153; cg.c:122:15
  $x1 = MOVaddr target-flags(aarch64-page) @cg__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_1_r_, debug-location !153; cg.c:122:15
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !153; cg.c:122:15
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !153; cg.c:122:15
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !155; cg.c:122:13
  PCN_STACKMAP 1, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.20.fp, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !155 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:122:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !155; cg.c:122:13
  %16:gpr64 = COPY killed $x8, debug-location !153; cg.c:122:15
  STRXui %16:gpr64, %stack.20.fp, 0, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
  CBZX %16:gpr64, %bb.5, debug-location !157; cg.c:122:9
  B %bb.4, debug-location !157; cg.c:122:9

bb.4.if.then:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %19:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
  %20:gpr32 = MOVi32imm 1
  STRWui %20:gpr32, %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
  %21:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_2_init_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_2_init_, debug-location !161; cg.c:124:25
  STRXui %21:gpr64, %stack.19.t_names, 0, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
  %22:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_3_benchmk_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_3_benchmk_, debug-location !163; cg.c:125:26
  STRXui %22:gpr64, %stack.19.t_names, 1, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  %23:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_4_conjgd_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_4_conjgd_, debug-location !165; cg.c:126:30
  STRXui %23:gpr64, %stack.19.t_names, 2, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  %24:gpr64 = LDRXui %stack.20.fp, 0, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; cg.c:127:9
  $x0 = COPY %24:gpr64, debug-location !167; cg.c:127:9
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !167; cg.c:127:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !167; cg.c:127:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !168; cg.c:128:5
  PCN_STACKMAP 2, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %24:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !168 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:128:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; cg.c:128:5
  B %bb.6, debug-location !168; cg.c:128:5

bb.5.if.else:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %17:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
  STRWui $wzr, %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !169 :: (store 4 into @timeron); cg.c:130:17

bb.6.if.end:
; predecessors: %bb.5, %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %0:gpr32common = MOVi32imm 75000
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !172; cg.c:133:5
  $w0 = COPY $wzr, debug-location !172; cg.c:133:5
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !172; cg.c:133:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !172; cg.c:133:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !173; cg.c:135:14
  PCN_STACKMAP 3, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !173 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:135:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !173; cg.c:135:14
  %28:gpr64temp = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
  STRWui $wzr, %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
  %29:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !174; cg.c:136:13
  %30:gpr64temp = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
  STRWui %29:gpr32common, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
  %31:gpr64temp = ADRP target-flags(aarch64-page) @firstcol, debug-location !175; cg.c:137:14
  STRWui $wzr, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
  %32:gpr64temp = ADRP target-flags(aarch64-page) @lastcol, debug-location !176; cg.c:138:13
  STRWui %29:gpr32common, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
  %33:gpr32 = MOVi32imm 66
  STRBBui %33:gpr32, %stack.14.Class, 0, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  %34:gpr64 = MOVi64imm 4627086287187887514
  STRXui %34:gpr64, %stack.16.zeta_verify_value, 0, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; cg.c:172:5
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_5____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_5____NAS_Par, debug-location !184; cg.c:172:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !184; cg.c:172:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !184; cg.c:172:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !185; cg.c:173:5
  PCN_STACKMAP 4, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !185 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:173:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !185; cg.c:173:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !185; cg.c:173:5
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_6__Size___11, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
  $w1 = MOVi32imm 75000, debug-location !185; cg.c:173:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !185; cg.c:173:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !185; cg.c:173:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !186; cg.c:174:5
  PCN_STACKMAP 5, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !186 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:174:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !186; cg.c:174:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !186; cg.c:174:5
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_7__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
  $w1 = MOVi32imm 75, debug-location !186; cg.c:174:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !186; cg.c:174:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !186; cg.c:174:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !187; cg.c:175:5
  PCN_STACKMAP 6, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !187 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:175:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !187; cg.c:175:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !187; cg.c:175:5
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_8___, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_8___, debug-location !187; cg.c:175:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !187; cg.c:175:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !187; cg.c:175:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !188; cg.c:177:9
  PCN_STACKMAP 7, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !188 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:177:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !188; cg.c:177:9
  %44:gpr64temp = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
  STRWui %0:gpr32common, %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
  %45:gpr64temp = ADRP target-flags(aarch64-page) @nzz, debug-location !189; cg.c:178:9
  %46:gpr32 = MOVi32imm 14700000
  STRWui %46:gpr32, %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
  %47:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !190; cg.c:183:10
  %48:gpr64 = MOVi64imm 4734050326586327040
  STRXui %48:gpr64, %47:gpr64common, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
  %49:gpr64temp = ADRP target-flags(aarch64-page) @amult, debug-location !191; cg.c:184:11
  %50:gpr64 = MOVi64imm 4742906807993761792
  STRXui %50:gpr64, %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !193; cg.c:185:12
  %51:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %52:fpr64 = LDRDui %51:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !193; cg.c:185:12
  $d0 = COPY %52:fpr64, debug-location !193; cg.c:185:12
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !193; cg.c:185:12
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !193; cg.c:185:12
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !194; cg.c:185:10
  PCN_STACKMAP 8, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %52:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !194 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:185:10
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !194; cg.c:185:10
  %53:fpr64 = COPY killed $d0, debug-location !193; cg.c:185:12
  STRDui %53:fpr64, %stack.7.zeta, 0, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
  %54:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
  %55:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  %56:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  %57:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  %58:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  %59:gpr32 = LDRWui %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  ADJCALLSTACKDOWN 56, 0, implicit-def dead $sp, implicit $sp, debug-location !201; cg.c:190:5
  %60:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !201; cg.c:190:5
  STRXui %60:gpr64, $sp, 6, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
  %62:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !201; cg.c:190:5
  STRXui %62:gpr64, $sp, 5, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
  %63:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !201; cg.c:190:5
  STRXui %63:gpr64, $sp, 4, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
  %64:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !201; cg.c:190:5
  STRXui %64:gpr64, $sp, 3, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
  STRWui %59:gpr32, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
  STRWui %58:gpr32, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
  STRWui %57:gpr32, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
  %66:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
  %67:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
  $w0 = COPY %54:gpr32, debug-location !201; cg.c:190:5
  $w1 = COPY %55:gpr32, debug-location !201; cg.c:190:5
  $x2 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !201; cg.c:190:5
  $x3 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
  $x4 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
  $w5 = COPY %56:gpr32, debug-location !201; cg.c:190:5
  BL @makea, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $w5, implicit-def $sp, debug-location !201; cg.c:190:5
  ADJCALLSTACKUP 56, 0, implicit-def $sp, implicit $sp, debug-location !201; cg.c:190:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !202; cg.c:202:12
  PCN_STACKMAP 9, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %54:gpr32, %55:gpr32, %56:gpr32, %57:gpr32, %58:gpr32, %59:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !202 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:202:12
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !202; cg.c:202:12
  STRWui $wzr, %stack.4.j, 0, debug-location !202 :: (store 4 into %ir.j); cg.c:202:12

bb.7.for.cond10:
; predecessors: %bb.6, %bb.11
  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)

  %68:gpr32 = LDRWui %stack.4.j, 0, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  %70:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  %72:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !208 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  %73:gpr32common = nsw SUBWrr %70:gpr32, %72:gpr32, debug-location !209; cg.c:202:29
  %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !210; cg.c:202:40
  dead $wzr = SUBSWrr %68:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !212; cg.c:202:5
  Bcc 10, %bb.12, implicit killed $nzcv, debug-location !212; cg.c:202:5
  B %bb.8, debug-location !212; cg.c:202:5

bb.8.for.body12:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  %369:gpr32 = LDRWroX %67:gpr64common, %367:gpr64, 0, 1, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  STRWui %369:gpr32, %stack.5.k, 0, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16

bb.9.for.cond14:
; predecessors: %bb.8, %bb.10
  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

  %370:gpr32 = LDRWui %stack.5.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  %371:gpr64 = LDRSWui %stack.4.j, 0, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  %373:gpr64common = ADDXrs %67:gpr64common, %371:gpr64, 2, debug-location !223; cg.c:203:33
  %374:gpr32 = LDRWui %373:gpr64common, 1, debug-location !223 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  dead $wzr = SUBSWrr %370:gpr32, %374:gpr32, implicit-def $nzcv, debug-location !225; cg.c:203:9
  Bcc 10, %bb.11, implicit killed $nzcv, debug-location !225; cg.c:203:9
  B %bb.10, debug-location !225; cg.c:203:9

bb.10.for.body19:
; predecessors: %bb.9
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %378:gpr64common = LDRSWui %stack.5.k, 0, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  %380:gpr64 = UBFMXri %378:gpr64common, 62, 61, debug-location !228; cg.c:204:25
  %382:gpr32 = LDRWroX %66:gpr64common, %380:gpr64, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  %384:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  %385:gpr32 = nsw SUBWrr %382:gpr32, %384:gpr32, debug-location !230; cg.c:204:35
  STRWroX %385:gpr32, %66:gpr64common, %380:gpr64, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  %386:gpr32common = nsw ADDWri %378.sub_32:gpr64common, 1, 0, debug-location !234; cg.c:203:49
  STRWui %386:gpr32common, %stack.5.k, 0, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49
  B %bb.9, debug-location !235; cg.c:203:9

bb.11.for.inc28:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %376:gpr32common = LDRWui %stack.4.j, 0, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  %377:gpr32common = nsw ADDWri %376:gpr32common, 1, 0, debug-location !238; cg.c:202:46
  STRWui %377:gpr32common, %stack.4.j, 0, debug-location !238 :: (store 4 into %ir.j); cg.c:202:46
  B %bb.7, debug-location !239; cg.c:202:5

bb.12.for.end30:
; predecessors: %bb.7
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  STRWui $wzr, %stack.3.i, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
  %364:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  %365:gpr64 = MOVi64imm 4607182418800017408

bb.13.for.cond31:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

  %77:gpr32 = LDRWui %stack.3.i, 0, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  %78:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !247; cg.c:211:19
  dead $wzr = SUBSWrr %77:gpr32, %78:gpr32common, implicit-def $nzcv, debug-location !248; cg.c:211:5
  Bcc 10, %bb.15, implicit killed $nzcv, debug-location !248; cg.c:211:5
  B %bb.14, debug-location !248; cg.c:211:5

bb.14.for.body33:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %362:gpr64common = LDRSWui %stack.3.i, 0, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  STRXroX %365:gpr64, %364:gpr64common, %362:gpr64common, 0, 1, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  %366:gpr32common = nsw ADDWri %362.sub_32:gpr64common, 1, 0, debug-location !253; cg.c:211:30
  STRWui %366:gpr32common, %stack.3.i, 0, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
  B %bb.13, debug-location !254; cg.c:211:5

bb.15.for.end38:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  STRWui $wzr, %stack.4.j, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
  %82:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  %84:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  %355:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  %358:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  %359:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  %360:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p

bb.16.for.cond39:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

  %81:gpr32 = LDRWui %stack.4.j, 0, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  %85:gpr32 = LDRWui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !263 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  %86:gpr32common = nsw SUBWrr %83:gpr32, %85:gpr32, debug-location !264; cg.c:214:29
  %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !265; cg.c:214:40
  dead $wzr = SUBSWrr %81:gpr32, %87:gpr32common, implicit-def $nzcv, debug-location !267; cg.c:214:5
  Bcc 10, %bb.18, implicit killed $nzcv, debug-location !267; cg.c:214:5
  B %bb.17, debug-location !267; cg.c:214:5

bb.17.for.body43:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  %353:gpr64common = LDRSWui %stack.4.j, 0, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  %356:gpr64 = UBFMXri %353:gpr64common, 61, 60, debug-location !279; cg.c:218:9
  STRXroX $xzr, %355:gpr64common, %356:gpr64, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  STRXroX $xzr, %358:gpr64common, %356:gpr64, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  STRXroX $xzr, %359:gpr64common, %356:gpr64, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  STRXroX $xzr, %360:gpr64common, %356:gpr64, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  %361:gpr32common = nsw ADDWri %353.sub_32:gpr64common, 1, 0, debug-location !281; cg.c:214:46
  STRWui %361:gpr32common, %stack.4.j, 0, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
  B %bb.16, debug-location !282; cg.c:214:5

bb.18.for.end54:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  STRXui $xzr, %stack.7.zeta, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
  %90:gpr32 = MOVi32imm 1
  STRWui %90:gpr32, %stack.6.it, 0, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
  %296:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  %297:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  %298:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  %301:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  %302:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  %308:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  %310:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  %316:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  %317:fpr64 = LDRDui %316:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)

bb.19.for.cond55:
; predecessors: %bb.18, %bb.28
  successors: %bb.20(0x7c000000), %bb.29(0x04000000); %bb.20(96.88%), %bb.29(3.12%)

  %91:gpr32common = LDRWui %stack.6.it, 0, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  dead $wzr = SUBSWri %91:gpr32common, 1, 0, implicit-def $nzcv, debug-location !292; cg.c:228:5
  Bcc 12, %bb.29, implicit killed $nzcv, debug-location !292; cg.c:228:5
  B %bb.20, debug-location !292; cg.c:228:5

bb.20.for.body57:
; predecessors: %bb.19
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  ADJCALLSTACKDOWN 24, 0, implicit-def dead $sp, implicit $sp, debug-location !293; cg.c:232:9
  STRXui %296:gpr64common, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
  STRXui %297:gpr64, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
  STRXui %298:gpr64, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
  $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !293; cg.c:232:9
  $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !293; cg.c:232:9
  $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !293; cg.c:232:9
  $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !293; cg.c:232:9
  $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !293; cg.c:232:9
  $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !293; cg.c:232:9
  BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit-def $sp, debug-location !293; cg.c:232:9
  ADJCALLSTACKUP 24, 0, implicit-def $sp, implicit $sp, debug-location !293; cg.c:232:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !295; cg.c:240:20
  PCN_STACKMAP 10, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !295 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:240:20
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !295; cg.c:240:20
  STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  STRWui $wzr, %stack.4.j, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16

bb.21.for.cond58:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

  %307:gpr32 = LDRWui %stack.4.j, 0, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  %309:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  %311:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !303 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  %312:gpr32common = nsw SUBWrr %309:gpr32, %311:gpr32, debug-location !304; cg.c:242:33
  %313:gpr32common = nsw ADDWri %312:gpr32common, 1, 0, debug-location !305; cg.c:242:44
  dead $wzr = SUBSWrr %307:gpr32, %313:gpr32common, implicit-def $nzcv, debug-location !307; cg.c:242:9
  Bcc 10, %bb.23, implicit killed $nzcv, debug-location !307; cg.c:242:9
  B %bb.22, debug-location !307; cg.c:242:9

bb.22.for.body62:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %339:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
  %340:gpr64common = LDRSWui %stack.4.j, 0, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  %343:gpr64 = UBFMXri %340:gpr64common, 61, 60, debug-location !319; cg.c:244:39
  %344:fpr64 = LDRDroX %301:gpr64common, %343:gpr64, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  %346:fpr64 = LDRDroX %302:gpr64common, %343:gpr64, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  %347:fpr64 = FMULDrr %344:fpr64, %346:fpr64, debug-location !314; cg.c:243:44
  %348:fpr64 = FADDDrr %339:fpr64, %347:fpr64, debug-location !315; cg.c:243:37
  STRDui %348:fpr64, %stack.9.norm_temp1, 0, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  %349:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
  %350:fpr64 = FMULDrr %346:fpr64, %346:fpr64, debug-location !322; cg.c:244:44
  %351:fpr64 = FADDDrr %349:fpr64, %350:fpr64, debug-location !323; cg.c:244:37
  STRDui %351:fpr64, %stack.10.norm_temp2, 0, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  %352:gpr32common = nsw ADDWri %340.sub_32:gpr64common, 1, 0, debug-location !325; cg.c:242:50
  STRWui %352:gpr32common, %stack.4.j, 0, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
  B %bb.21, debug-location !326; cg.c:242:9

bb.23.for.end76:
; predecessors: %bb.21
  successors: %bb.25(0x50000000), %bb.24(0x30000000); %bb.25(62.50%), %bb.24(37.50%)

  %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  %390:fpr64 = FSQRTDr %1:fpr64, debug-location !330; cg.c:247:28
  FCMPDrr %390:fpr64, %390:fpr64, implicit-def $nzcv, debug-location !331; cg.c:247:26
  Bcc 7, %bb.25, implicit killed $nzcv, debug-location !331; cg.c:247:26
  B %bb.24, debug-location !331; cg.c:247:26

bb.24.call.sqrt:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !331; cg.c:247:26
  $d0 = COPY %1:fpr64, debug-location !331; cg.c:247:26
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !331; cg.c:247:26
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !331; cg.c:247:26
  %390:fpr64 = COPY killed $d0, debug-location !331; cg.c:247:26

bb.25.for.end76.split:
; predecessors: %bb.23, %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !331; cg.c:247:26
  PCN_STACKMAP 11, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %1:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !331 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:247:26
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !331; cg.c:247:26
  %318:fpr64 = FDIVDrr %317:fpr64, %390:fpr64, debug-location !331; cg.c:247:26
  STRDui %318:fpr64, %stack.10.norm_temp2, 0, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  STRWui $wzr, %stack.4.j, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16

bb.26.for.cond78:
; predecessors: %bb.25, %bb.27
  successors: %bb.27(0x7c000000), %bb.28(0x04000000); %bb.27(96.88%), %bb.28(3.12%)

  %320:gpr32 = LDRWui %stack.4.j, 0, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  %322:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  %324:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !339 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  %325:gpr32common = nsw SUBWrr %322:gpr32, %324:gpr32, debug-location !340; cg.c:252:33
  %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !341; cg.c:252:44
  dead $wzr = SUBSWrr %320:gpr32, %326:gpr32common, implicit-def $nzcv, debug-location !343; cg.c:252:9
  Bcc 10, %bb.28, implicit killed $nzcv, debug-location !343; cg.c:252:9
  B %bb.27, debug-location !343; cg.c:252:9

bb.27.for.body82:
; predecessors: %bb.26
  successors: %bb.26(0x80000000); %bb.26(100.00%)

  %330:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  %331:gpr64common = LDRSWui %stack.4.j, 0, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  %333:gpr64 = UBFMXri %331:gpr64common, 61, 60, debug-location !347; cg.c:253:33
  %335:fpr64 = LDRDroX %302:gpr64common, %333:gpr64, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  %336:fpr64 = FMULDrr %330:fpr64, %335:fpr64, debug-location !348; cg.c:253:31
  STRDroX %336:fpr64, %301:gpr64common, %333:gpr64, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  %338:gpr32common = nsw ADDWri %331.sub_32:gpr64common, 1, 0, debug-location !352; cg.c:252:50
  STRWui %338:gpr32common, %stack.4.j, 0, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
  B %bb.26, debug-location !353; cg.c:252:9

bb.28.for.inc91:
; predecessors: %bb.26
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  %328:gpr32common = LDRWui %stack.6.it, 0, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  %329:gpr32common = nsw ADDWri %328:gpr32common, 1, 0, debug-location !356; cg.c:228:29
  STRWui %329:gpr32common, %stack.6.it, 0, debug-location !356 :: (store 4 into %ir.it); cg.c:228:29
  B %bb.19, debug-location !357; cg.c:228:5

bb.29.for.end93:
; predecessors: %bb.19
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  STRWui $wzr, %stack.3.i, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
  %292:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  %293:gpr64 = MOVi64imm 4607182418800017408

bb.30.for.cond94:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

  %94:gpr32 = LDRWui %stack.3.i, 0, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  %95:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !365; cg.c:260:19
  dead $wzr = SUBSWrr %94:gpr32, %95:gpr32common, implicit-def $nzcv, debug-location !366; cg.c:260:5
  Bcc 10, %bb.32, implicit killed $nzcv, debug-location !366; cg.c:260:5
  B %bb.31, debug-location !366; cg.c:260:5

bb.31.for.body96:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  %290:gpr64common = LDRSWui %stack.3.i, 0, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  STRXroX %293:gpr64, %292:gpr64common, %290:gpr64common, 0, 1, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  %294:gpr32common = nsw ADDWri %290.sub_32:gpr64common, 1, 0, debug-location !371; cg.c:260:30
  STRWui %294:gpr32common, %stack.3.i, 0, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
  B %bb.30, debug-location !372; cg.c:260:5

bb.32.for.end101:
; predecessors: %bb.30
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  STRXui $xzr, %stack.7.zeta, 0, debug-location !375 :: (store 8 into %ir.zeta); cg.c:264:10
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !376; cg.c:266:5
  $w0 = COPY $wzr, debug-location !376; cg.c:266:5
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !376; cg.c:266:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !376; cg.c:266:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !377; cg.c:268:55
  PCN_STACKMAP 12, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !377 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:55
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !377; cg.c:268:55
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !377; cg.c:268:55
  $w0 = COPY $wzr, debug-location !377; cg.c:268:55
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !377; cg.c:268:55
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !377; cg.c:268:55
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !378; cg.c:268:5
  PCN_STACKMAP 13, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !378 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !378; cg.c:268:5
  %99:fpr64 = COPY killed $d0, debug-location !377; cg.c:268:55
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !378; cg.c:268:5
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_9__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
  $d0 = COPY %99:fpr64, debug-location !378; cg.c:268:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !378; cg.c:268:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !378; cg.c:268:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !379; cg.c:270:5
  PCN_STACKMAP 14, 0, 0, %stack.14.Class, 0, %99:fpr64, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !379 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:270:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !379; cg.c:270:5
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !379; cg.c:270:5
  %102:gpr32 = MOVi32imm 1
  $w0 = MOVi32imm 1, debug-location !379; cg.c:270:5
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !379; cg.c:270:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !379; cg.c:270:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !380; cg.c:277:5
  PCN_STACKMAP 15, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !380 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:277:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !380; cg.c:277:5
  STRWui %102:gpr32, %stack.6.it, 0, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
  %212:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  %216:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  %217:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  %218:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  %221:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  %222:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  %231:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  %233:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  %239:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  %240:fpr64 = LDRDui %239:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  %244:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  %245:fpr64 = LDRDui %244:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)

bb.33.for.cond108:
; predecessors: %bb.32, %bb.48
  successors: %bb.34(0x7c000000), %bb.49(0x04000000); %bb.34(96.88%), %bb.49(3.12%)

  %103:gpr32common = LDRWui %stack.6.it, 0, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  dead $wzr = SUBSWri %103:gpr32common, 75, 0, implicit-def $nzcv, debug-location !387; cg.c:279:5
  Bcc 12, %bb.49, implicit killed $nzcv, debug-location !387; cg.c:279:5
  B %bb.34, debug-location !387; cg.c:279:5

bb.34.for.body110:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

  %213:gpr32 = LDRWui %212:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !388 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  CBZW %213:gpr32, %bb.36, debug-location !391; cg.c:284:13
  B %bb.35, debug-location !391; cg.c:284:13

bb.35.if.then111:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !392; cg.c:285:13
  $w0 = MOVi32imm 2, debug-location !392; cg.c:285:13
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !392; cg.c:285:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !392; cg.c:285:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !392; cg.c:285:13
  PCN_STACKMAP 16, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !392 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:285:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !392; cg.c:285:13

bb.36.if.end112:
; predecessors: %bb.34, %bb.35
  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)

  ADJCALLSTACKDOWN 24, 0, implicit-def dead $sp, implicit $sp, debug-location !393; cg.c:286:9
  STRXui %216:gpr64common, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
  STRXui %217:gpr64, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
  STRXui %218:gpr64, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
  $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !393; cg.c:286:9
  $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !393; cg.c:286:9
  $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !393; cg.c:286:9
  $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !393; cg.c:286:9
  $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !393; cg.c:286:9
  $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !393; cg.c:286:9
  BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit-def $sp, debug-location !393; cg.c:286:9
  ADJCALLSTACKUP 24, 0, implicit-def $sp, implicit $sp, debug-location !393; cg.c:286:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !394; cg.c:287:13
  PCN_STACKMAP 17, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !394 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:287:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !394; cg.c:287:13
  %226:gpr32 = LDRWui %212:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !394 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  CBZW %226:gpr32, %bb.38, debug-location !396; cg.c:287:13
  B %bb.37, debug-location !396; cg.c:287:13

bb.37.if.then114:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !397; cg.c:288:13
  $w0 = MOVi32imm 2, debug-location !397; cg.c:288:13
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !397; cg.c:288:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !397; cg.c:288:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !397; cg.c:288:13
  PCN_STACKMAP 18, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !397 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:288:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !397; cg.c:288:13

bb.38.if.end115:
; predecessors: %bb.36, %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  STRWui $wzr, %stack.4.j, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16

bb.39.for.cond116:
; predecessors: %bb.38, %bb.40
  successors: %bb.40(0x7c000000), %bb.41(0x04000000); %bb.40(96.88%), %bb.41(3.12%)

  %230:gpr32 = LDRWui %stack.4.j, 0, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  %232:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  %234:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !406 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  %235:gpr32common = nsw SUBWrr %232:gpr32, %234:gpr32, debug-location !407; cg.c:299:33
  %236:gpr32common = nsw ADDWri %235:gpr32common, 1, 0, debug-location !408; cg.c:299:44
  dead $wzr = SUBSWrr %230:gpr32, %236:gpr32common, implicit-def $nzcv, debug-location !410; cg.c:299:9
  Bcc 10, %bb.41, implicit killed $nzcv, debug-location !410; cg.c:299:9
  B %bb.40, debug-location !410; cg.c:299:9

bb.40.for.body120:
; predecessors: %bb.39
  successors: %bb.39(0x80000000); %bb.39(100.00%)

  %276:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
  %277:gpr64common = LDRSWui %stack.4.j, 0, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  %280:gpr64 = UBFMXri %277:gpr64common, 61, 60, debug-location !422; cg.c:301:39
  %281:fpr64 = LDRDroX %221:gpr64common, %280:gpr64, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  %283:fpr64 = LDRDroX %222:gpr64common, %280:gpr64, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  %284:fpr64 = FMULDrr %281:fpr64, %283:fpr64, debug-location !417; cg.c:300:44
  %285:fpr64 = FADDDrr %276:fpr64, %284:fpr64, debug-location !418; cg.c:300:37
  STRDui %285:fpr64, %stack.9.norm_temp1, 0, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  %286:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !420 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
  %287:fpr64 = FMULDrr %283:fpr64, %283:fpr64, debug-location !425; cg.c:301:44
  %288:fpr64 = FADDDrr %286:fpr64, %287:fpr64, debug-location !426; cg.c:301:37
  STRDui %288:fpr64, %stack.10.norm_temp2, 0, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  %289:gpr32common = nsw ADDWri %277.sub_32:gpr64common, 1, 0, debug-location !428; cg.c:299:50
  STRWui %289:gpr32common, %stack.4.j, 0, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
  B %bb.39, debug-location !429; cg.c:299:9

bb.41.for.end135:
; predecessors: %bb.39
  successors: %bb.43(0x50000000), %bb.42(0x30000000); %bb.43(62.50%), %bb.42(37.50%)

  %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  %391:fpr64 = FSQRTDr %5:fpr64, debug-location !433; cg.c:304:28
  FCMPDrr %391:fpr64, %391:fpr64, implicit-def $nzcv, debug-location !434; cg.c:304:26
  Bcc 7, %bb.43, implicit killed $nzcv, debug-location !434; cg.c:304:26
  B %bb.42, debug-location !434; cg.c:304:26

bb.42.call.sqrt4:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !434; cg.c:304:26
  $d0 = COPY %5:fpr64, debug-location !434; cg.c:304:26
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !434; cg.c:304:26
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !434; cg.c:304:26
  %391:fpr64 = COPY killed $d0, debug-location !434; cg.c:304:26

bb.43.for.end135.split:
; predecessors: %bb.41, %bb.42
  successors: %bb.44(0x40000000), %bb.45(0x40000000); %bb.44(50.00%), %bb.45(50.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !434; cg.c:304:26
  PCN_STACKMAP 19, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %5:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !434 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:304:26
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !434; cg.c:304:26
  %241:fpr64 = FDIVDrr %240:fpr64, %391:fpr64, debug-location !434; cg.c:304:26
  STRDui %241:fpr64, %stack.10.norm_temp2, 0, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  %242:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  %243:fpr64 = FDIVDrr %240:fpr64, %242:fpr64, debug-location !437; cg.c:306:28
  %246:fpr64 = FADDDrr %243:fpr64, %245:fpr64, debug-location !438; cg.c:306:22
  STRDui %246:fpr64, %stack.7.zeta, 0, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
  %247:gpr32common = LDRWui %stack.6.it, 0, debug-location !440 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  dead $wzr = SUBSWri %247:gpr32common, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
  Bcc 1, %bb.45, implicit killed $nzcv, debug-location !443; cg.c:307:13
  B %bb.44, debug-location !443; cg.c:307:13

bb.44.if.then141:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !444; cg.c:308:13
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_10_____iterat, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_10_____iterat, debug-location !444; cg.c:308:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !444; cg.c:308:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !444; cg.c:308:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !444; cg.c:308:13
  PCN_STACKMAP 20, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !444 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:308:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !444; cg.c:308:13

bb.45.if.end143:
; predecessors: %bb.43, %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  %251:gpr32 = LDRWui %stack.6.it, 0, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  %252:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  %253:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !448; cg.c:309:9
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_11______5d___, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, debug-location !448; cg.c:309:9
  $w1 = COPY %251:gpr32, debug-location !448; cg.c:309:9
  $d0 = COPY %252:fpr64, debug-location !448; cg.c:309:9
  $d1 = COPY %253:fpr64, debug-location !448; cg.c:309:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !448; cg.c:309:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !448; cg.c:309:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !449; cg.c:314:16
  PCN_STACKMAP 21, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %251:gpr32, %252:fpr64, %253:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !449 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:314:16
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !449; cg.c:314:16
  STRWui $wzr, %stack.4.j, 0, debug-location !449 :: (store 4 into %ir.j); cg.c:314:16

bb.46.for.cond145:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

  %257:gpr32 = LDRWui %stack.4.j, 0, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  %259:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  %261:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !455 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  %262:gpr32common = nsw SUBWrr %259:gpr32, %261:gpr32, debug-location !456; cg.c:314:33
  %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !457; cg.c:314:44
  dead $wzr = SUBSWrr %257:gpr32, %263:gpr32common, implicit-def $nzcv, debug-location !459; cg.c:314:9
  Bcc 10, %bb.48, implicit killed $nzcv, debug-location !459; cg.c:314:9
  B %bb.47, debug-location !459; cg.c:314:9

bb.47.for.body149:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)

  %267:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  %268:gpr64common = LDRSWui %stack.4.j, 0, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  %270:gpr64 = UBFMXri %268:gpr64common, 61, 60, debug-location !463; cg.c:315:33
  %272:fpr64 = LDRDroX %222:gpr64common, %270:gpr64, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  %273:fpr64 = FMULDrr %267:fpr64, %272:fpr64, debug-location !464; cg.c:315:31
  STRDroX %273:fpr64, %221:gpr64common, %270:gpr64, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  %275:gpr32common = nsw ADDWri %268.sub_32:gpr64common, 1, 0, debug-location !468; cg.c:314:50
  STRWui %275:gpr32common, %stack.4.j, 0, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
  B %bb.46, debug-location !469; cg.c:314:9

bb.48.for.inc158:
; predecessors: %bb.46
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  %265:gpr32common = LDRWui %stack.6.it, 0, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0, debug-location !472; cg.c:279:33
  STRWui %266:gpr32common, %stack.6.it, 0, debug-location !472 :: (store 4 into %ir.it); cg.c:279:33
  B %bb.33, debug-location !473; cg.c:279:5

bb.49.do.end164:
; predecessors: %bb.33
  successors: %bb.50(0x40000000), %bb.53(0x40000000); %bb.50(50.00%), %bb.53(50.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !476; cg.c:321:5
  $w0 = MOVi32imm 1, debug-location !476; cg.c:321:5
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !476; cg.c:321:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !476; cg.c:321:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !477; cg.c:327:9
  PCN_STACKMAP 22, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !477 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:327:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:327:9
  $w0 = MOVi32imm 1, debug-location !477; cg.c:327:9
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !477; cg.c:327:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !477; cg.c:327:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !478; cg.c:327:7
  PCN_STACKMAP 23, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !478 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:7
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !478; cg.c:327:7
  %106:fpr64 = COPY killed $d0, debug-location !477; cg.c:327:9
  STRDui %106:fpr64, %stack.11.t, 0, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !479; cg.c:329:5
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_12__Benchmark, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_12__Benchmark, debug-location !479; cg.c:329:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !479; cg.c:329:5
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !479; cg.c:329:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !480; cg.c:331:13
  PCN_STACKMAP 24, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !480 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:331:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !480; cg.c:331:13
  %109:gpr64 = MOVi64imm 4457293557087583675
  STRXui %109:gpr64, %stack.17.epsilon, 0, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
  %110:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  dead $wzr = SUBSWri %110:gpr32common, 85, 0, implicit-def $nzcv, debug-location !484; cg.c:332:9
  Bcc 0, %bb.53, implicit killed $nzcv, debug-location !484; cg.c:332:9
  B %bb.50, debug-location !484; cg.c:332:9

bb.50.if.then169:
; predecessors: %bb.49
  successors: %bb.51(0x40000000), %bb.52(0x40000000); %bb.51(50.00%), %bb.52(50.00%)

  %117:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  %118:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  %119:fpr64 = FABD64 %117:fpr64, %118:fpr64, debug-location !489; cg.c:333:15
  %120:fpr64 = FDIVDrr %119:fpr64, %118:fpr64, debug-location !491; cg.c:333:46
  STRDui %120:fpr64, %stack.18.err, 0, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
  %121:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  FCMPDrr %120:fpr64, %121:fpr64, implicit-def $nzcv, debug-location !497; cg.c:334:13
  Bcc 8, %bb.52, implicit killed $nzcv, debug-location !497; cg.c:334:13
  B %bb.51, debug-location !497; cg.c:334:13

bb.51.if.then174:
; predecessors: %bb.50
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  %131:gpr32 = MOVi32imm 1
  STRWui %131:gpr32, %stack.15.verified, 0, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !500; cg.c:336:13
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_13__VERIFICAT, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_13__VERIFICAT, debug-location !500; cg.c:336:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !500; cg.c:336:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !500; cg.c:336:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !501; cg.c:337:45
  PCN_STACKMAP 25, 0, 0, %stack.14.Class, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !501 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta); cg.c:337:45
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !501; cg.c:337:45
  %134:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !501 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !502; cg.c:337:13
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_14__Zeta_is__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
  $d0 = COPY %134:fpr64, debug-location !502; cg.c:337:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !502; cg.c:337:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !502; cg.c:337:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !503; cg.c:338:45
  PCN_STACKMAP 26, 0, 0, %stack.14.Class, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %134:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !503 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:338:45
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !503; cg.c:338:45
  %137:fpr64 = LDRDui %stack.18.err, 0, debug-location !503 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !504; cg.c:338:13
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_15__Error_is_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
  $d0 = COPY %137:fpr64, debug-location !504; cg.c:338:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !504; cg.c:338:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !504; cg.c:338:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !505; cg.c:339:9
  PCN_STACKMAP 27, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %137:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !505 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:339:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !505; cg.c:339:9
  B %bb.54, debug-location !505; cg.c:339:9

bb.52.if.else178:
; predecessors: %bb.50
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  STRWui $wzr, %stack.15.verified, 0, debug-location !506 :: (store 4 into %ir.verified); cg.c:341:22
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !508; cg.c:342:13
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_16__VERIFICAT, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_16__VERIFICAT, debug-location !508; cg.c:342:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !508; cg.c:342:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !508; cg.c:342:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !509; cg.c:343:54
  PCN_STACKMAP 28, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !509 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:343:54
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !509; cg.c:343:54
  %125:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !509 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !510; cg.c:343:13
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_17__Zeta_____, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
  $d0 = COPY %125:fpr64, debug-location !510; cg.c:343:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !510; cg.c:343:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !510; cg.c:343:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !511; cg.c:344:54
  PCN_STACKMAP 29, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.16.zeta_verify_value, 0, %125:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !511 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.16.zeta_verify_value); cg.c:344:54
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !511; cg.c:344:54
  %128:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !511 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !512; cg.c:344:13
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_18__The_corre, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
  $d0 = COPY %128:fpr64, debug-location !512; cg.c:344:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !512; cg.c:344:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !512; cg.c:344:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 30, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %128:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  B %bb.54

bb.53.if.else183:
; predecessors: %bb.49
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  STRWui $wzr, %stack.15.verified, 0, debug-location !513 :: (store 4 into %ir.verified); cg.c:348:18
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !515; cg.c:349:9
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_19__Problem_s, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_19__Problem_s, debug-location !515; cg.c:349:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !515; cg.c:349:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !515; cg.c:349:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !516; cg.c:350:9
  PCN_STACKMAP 31, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !516 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:350:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !516; cg.c:350:9
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !516; cg.c:350:9
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_20__NO_VERIFI, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_20__NO_VERIFI, debug-location !516; cg.c:350:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !516; cg.c:350:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !516; cg.c:350:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
  PCN_STACKMAP 32, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4)
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

bb.54.if.end186:
; predecessors: %bb.53, %bb.52, %bb.51
  successors: %bb.55(0x50000000), %bb.56(0x30000000); %bb.55(62.50%), %bb.56(37.50%)

  %140:fpr64 = LDRDui %stack.11.t, 0, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  FCMPDri %140:fpr64, implicit-def $nzcv, debug-location !520; cg.c:353:9
  Bcc 0, %bb.56, implicit killed $nzcv, debug-location !520; cg.c:353:9
  B %bb.55, debug-location !520; cg.c:353:9

bb.55.if.then189:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  %143:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  %145:fpr64 = FDIVDrr %144:fpr64, %142:fpr64, debug-location !523; cg.c:356:73
  %146:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  %147:fpr64 = LDRDui %146:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  %148:fpr64 = FDIVDrr %145:fpr64, %147:fpr64, debug-location !524; cg.c:357:20
  STRDui %148:fpr64, %stack.12.mflops, 0, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
  B %bb.57, debug-location !526; cg.c:358:5

bb.56.if.else192:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  STRXui $xzr, %stack.12.mflops, 0, debug-location !527 :: (store 8 into %ir.mflops); cg.c:360:16

bb.57.if.end193:
; predecessors: %bb.56, %bb.55
  successors: %bb.58(0x50000000), %bb.67(0x30000000); %bb.58(62.50%), %bb.67(37.50%)

  %149:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  %150:fpr64 = LDRDui %stack.11.t, 0, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  %151:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  %152:gpr32 = LDRWui %stack.15.verified, 0, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp, debug-location !533; cg.c:363:5
  %153:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_31_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
  STRXui %153:gpr64, $sp, 10, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
  %155:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_30__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_30__O3__mcmod, debug-location !533; cg.c:363:5
  STRXui %155:gpr64, $sp, 9, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
  %156:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_29__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_29__g__Wall__, debug-location !533; cg.c:363:5
  STRXui %156:gpr64, $sp, 8, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
  %157:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_28__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_28__I___commo, debug-location !533; cg.c:363:5
  STRXui %157:gpr64, $sp, 7, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
  %158:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_27__lm_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_27__lm_, debug-location !533; cg.c:363:5
  STRXui %158:gpr64, $sp, 6, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
  %159:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_26___CC__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_26___CC__, debug-location !533; cg.c:363:5
  STRXui %159:gpr64, $sp, 5, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
  %160:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_25_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_25_gcc_, debug-location !533; cg.c:363:5
  STRXui %160:gpr64, $sp, 4, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
  %161:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_24_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_24_03_Nov_201, debug-location !533; cg.c:363:5
  STRXui %161:gpr64, $sp, 3, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
  %162:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_23_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_23_3_3_1_, debug-location !533; cg.c:363:5
  STRXui %162:gpr64, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
  STRWui %152:gpr32, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
  %163:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_22___________, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_22___________, debug-location !533; cg.c:363:5
  STRXui %163:gpr64, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_21_CG_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_21_CG_, debug-location !533; cg.c:363:5
  $w1 = COPY %149:gpr32, debug-location !533; cg.c:363:5
  $w2 = MOVi32imm 75000, debug-location !533; cg.c:363:5
  $w3 = COPY $wzr, debug-location !533; cg.c:363:5
  $w4 = COPY $wzr, debug-location !533; cg.c:363:5
  $w5 = MOVi32imm 75, debug-location !533; cg.c:363:5
  $d0 = COPY %150:fpr64, debug-location !533; cg.c:363:5
  $d1 = COPY %151:fpr64, debug-location !533; cg.c:363:5
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !533; cg.c:363:5
  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp, debug-location !533; cg.c:363:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !534; cg.c:370:9
  PCN_STACKMAP 33, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %149:gpr32, %150:fpr64, %151:fpr64, %152:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !534 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:370:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !534; cg.c:370:9
  %167:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
  %168:gpr32 = LDRWui %167:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  CBZW %168:gpr32, %bb.67, debug-location !536; cg.c:370:9
  B %bb.58, debug-location !536; cg.c:370:9

bb.58.if.then195:
; predecessors: %bb.57
  successors: %bb.59(0x50000000), %bb.60(0x30000000); %bb.59(62.50%), %bb.60(37.50%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !537; cg.c:371:16
  $w0 = MOVi32imm 1, debug-location !537; cg.c:371:16
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !537; cg.c:371:16
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !537; cg.c:371:16
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !539; cg.c:371:14
  PCN_STACKMAP 34, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !539 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:371:14
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !539; cg.c:371:14
  %170:fpr64 = COPY killed $d0, debug-location !537; cg.c:371:16
  STRDui %170:fpr64, %stack.13.tmax, 0, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
  FCMPDri %170:fpr64, implicit-def $nzcv, debug-location !543; cg.c:372:13
  Bcc 1, %bb.60, implicit killed $nzcv, debug-location !543; cg.c:372:13
  B %bb.59, debug-location !543; cg.c:372:13

bb.59.if.then199:
; predecessors: %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  %171:gpr64 = MOVi64imm 4607182418800017408
  STRXui %171:gpr64, %stack.13.tmax, 0, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18

bb.60.if.end200:
; predecessors: %bb.58, %bb.59
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !546; cg.c:374:9
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_32___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_32___SECTION_, debug-location !546; cg.c:374:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !546; cg.c:374:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !546; cg.c:374:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !547; cg.c:375:16
  PCN_STACKMAP 35, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !547 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:375:16
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !547; cg.c:375:16
  STRWui $wzr, %stack.3.i, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
  %205:gpr64sp = ADDXri %stack.19.t_names, 0, 0
  %185:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  %186:fpr64 = LDRDui %185:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)

bb.61.for.cond202:
; predecessors: %bb.60, %bb.66
  successors: %bb.62(0x7c000000), %bb.67(0x04000000); %bb.62(96.88%), %bb.67(3.12%)

  %175:gpr32common = LDRWui %stack.3.i, 0, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  dead $wzr = SUBSWri %175:gpr32common, 2, 0, implicit-def $nzcv, debug-location !553; cg.c:375:9
  Bcc 12, %bb.67, implicit killed $nzcv, debug-location !553; cg.c:375:9
  B %bb.62, debug-location !553; cg.c:375:9

bb.62.for.body205:
; predecessors: %bb.61
  successors: %bb.63(0x30000000), %bb.64(0x50000000); %bb.63(37.50%), %bb.64(62.50%)

  %178:gpr32 = LDRWui %stack.3.i, 0, debug-location !554 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !556; cg.c:376:17
  $w0 = COPY %178:gpr32, debug-location !556; cg.c:376:17
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !556; cg.c:376:17
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !556; cg.c:376:17
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !557; cg.c:376:15
  PCN_STACKMAP 36, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %178:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !557 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:376:15
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !557; cg.c:376:15
  %179:fpr64 = COPY killed $d0, debug-location !556; cg.c:376:17
  STRDui %179:fpr64, %stack.11.t, 0, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
  %180:gpr32 = LDRWui %stack.3.i, 0, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  CBNZW %180:gpr32, %bb.64, debug-location !561; cg.c:377:17
  B %bb.63, debug-location !561; cg.c:377:17

bb.63.if.then209:
; predecessors: %bb.62
  successors: %bb.66(0x80000000); %bb.66(100.00%)

  %204:gpr64 = LDRSWui %stack.3.i, 0, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  %206:gpr64 = LDRXroX %205:gpr64sp, %204:gpr64, 0, 1, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  %207:fpr64 = LDRDui %stack.11.t, 0, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !566; cg.c:378:17
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_33____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
  $x1 = COPY %206:gpr64, debug-location !566; cg.c:378:17
  $d0 = COPY %207:fpr64, debug-location !566; cg.c:378:17
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit-def $sp, implicit-def dead $w8, debug-location !566; cg.c:378:17
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !566; cg.c:378:17
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !567; cg.c:379:13
  PCN_STACKMAP 37, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %206:gpr64, %207:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !567 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:379:13
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !567; cg.c:379:13
  B %bb.66, debug-location !567; cg.c:379:13

bb.64.if.else213:
; predecessors: %bb.62
  successors: %bb.65(0x40000000), %bb.66(0x40000000); %bb.65(50.00%), %bb.66(50.00%)

  %181:gpr64 = LDRSWui %stack.3.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  %183:gpr64 = LDRXroX %205:gpr64sp, %181:gpr64, 0, 1, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  %184:fpr64 = LDRDui %stack.11.t, 0, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  %187:fpr64 = FMULDrr %184:fpr64, %186:fpr64, debug-location !573; cg.c:382:26
  %188:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  %189:fpr64 = FDIVDrr %187:fpr64, %188:fpr64, debug-location !575; cg.c:382:34
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !576; cg.c:381:17
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_34____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
  $x1 = COPY %183:gpr64, debug-location !576; cg.c:381:17
  $d0 = COPY %184:fpr64, debug-location !576; cg.c:381:17
  $d1 = COPY %189:fpr64, debug-location !576; cg.c:381:17
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !576; cg.c:381:17
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !576; cg.c:381:17
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !577; cg.c:383:21
  PCN_STACKMAP 38, 0, %189:fpr64, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %183:gpr64, %184:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !577 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:383:21
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !577; cg.c:383:21
  %192:gpr32common = LDRWui %stack.3.i, 0, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  dead $wzr = SUBSWri %192:gpr32common, 2, 0, implicit-def $nzcv, debug-location !580; cg.c:383:21
  Bcc 1, %bb.66, implicit killed $nzcv, debug-location !580; cg.c:383:21
  B %bb.65, debug-location !580; cg.c:383:21

bb.65.if.then221:
; predecessors: %bb.64
  successors: %bb.66(0x80000000); %bb.66(100.00%)

  %194:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  %195:fpr64 = LDRDui %stack.11.t, 0, debug-location !583 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !584; cg.c:384:30
  STRDui %196:fpr64, %stack.11.t, 0, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
  %199:fpr64 = FMULDrr %196:fpr64, %186:fpr64, debug-location !588; cg.c:386:30
  %200:fpr64 = FDIVDrr %199:fpr64, %194:fpr64, debug-location !590; cg.c:386:38
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !591; cg.c:385:21
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_35__________8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, debug-location !591; cg.c:385:21
  $x1 = MOVaddr target-flags(aarch64-page) @cg__str_36_rest_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_36_rest_, debug-location !591; cg.c:385:21
  $d0 = COPY %196:fpr64, debug-location !591; cg.c:385:21
  $d1 = COPY %200:fpr64, debug-location !591; cg.c:385:21
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !591; cg.c:385:21
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !591; cg.c:385:21
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !592; cg.c:387:17
  PCN_STACKMAP 39, 0, %200:fpr64, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %196:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !592 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:387:17
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !592; cg.c:387:17

bb.66.for.inc228:
; predecessors: %bb.64, %bb.65, %bb.63
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %210:gpr32common = LDRWui %stack.3.i, 0, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0, debug-location !593; cg.c:375:34
  STRWui %211:gpr32common, %stack.3.i, 0, debug-location !593 :: (store 4 into %ir.i); cg.c:375:34
  B %bb.61, debug-location !594; cg.c:375:9

bb.67.do.end235:
; predecessors: %bb.57, %bb.61

  $w8 = COPY $wzr, debug-location !597; cg.c:394:5
  RET_ReallyLR implicit killed $w8, debug-location !597; cg.c:394:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: %10:gpr64 = COPY $x1
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %10:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%10
  Single Issue       : false;
SU(1):   %9:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(3): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   STRWui %9:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%9
  Single Issue       : false;
SU(4):   STRXui %10:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%10
  Single Issue       : false;
SU(5):   STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %10:gpr64 = COPY $x1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %9:gpr32 = COPY $w0
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 
Queue TopQ.P: 
Queue TopQ.A: 3 4 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXui %10:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRWui %9:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %10:gpr64 = COPY $x1
SU(1):   %9:gpr32 = COPY $w0
SU(2):   STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
SU(3):   STRWui %9:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
SU(4):   STRXui %10:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
SU(5):   STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

********** MI Scheduling **********
main:%bb.1 for.cond
  From: %12:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
    To: Bcc 12, %bb.3, implicit killed $nzcv, debug-location !138; cg.c:117:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %12:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%12
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %12:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.3, implicit killed $nzcv, debug-location !138; cg.c:117:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %12:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %12:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
SU(1):   dead $wzr = SUBSWri %12:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5

********** MI Scheduling **********
main:%bb.2 for.body
  From: %388:gpr32common = LDRWui %stack.3.i, 0, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
    To: B %bb.1, debug-location !144; cg.c:117:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %388:gpr32common = LDRWui %stack.3.i, 0, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%388
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0, debug-location !143; cg.c:117:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%388
  Successors:
    SU(2): Data Latency=1 Reg=%389
  Single Issue       : false;
SU(2):   STRWui %389:gpr32common, %stack.3.i, 0, debug-location !143 :: (store 4 into %ir.i); cg.c:117:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%389
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !144; cg.c:117:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %389:gpr32common, %stack.3.i, 0, debug-location !143 :: (store 4 into %ir.i); cg.c:117:30
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0, debug-location !143; cg.c:117:30
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %388:gpr32common = LDRWui %stack.3.i, 0, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %388:gpr32common = LDRWui %stack.3.i, 0, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
SU(1):   %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0, debug-location !143; cg.c:117:30
SU(2):   STRWui %389:gpr32common, %stack.3.i, 0, debug-location !143 :: (store 4 into %ir.i); cg.c:117:30

********** MI Scheduling **********
main:%bb.3 for.end
  From: %16:gpr64 = COPY killed $x8, debug-location !153; cg.c:122:15
    To: CBZX %16:gpr64, %bb.5, debug-location !157; cg.c:122:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %16:gpr64 = COPY killed $x8, debug-location !153; cg.c:122:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Data Latency=0 Reg=%16
    SU(1): Data Latency=0 Reg=%16
  Single Issue       : false;
SU(1):   STRXui %16:gpr64, %stack.20.fp, 0, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%16
  Single Issue       : false;
ExitSU:   CBZX %16:gpr64, %bb.5, debug-location !157; cg.c:122:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%16
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %16:gpr64, %stack.20.fp, 0, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %16:gpr64 = COPY killed $x8, debug-location !153; cg.c:122:15
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %16:gpr64 = COPY killed $x8, debug-location !153; cg.c:122:15
SU(1):   STRXui %16:gpr64, %stack.20.fp, 0, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13

********** MI Scheduling **********
main:%bb.3 for.end
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, debug-location !153; cg.c:122:15
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !153; cg.c:122:15
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, debug-location !153; cg.c:122:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @cg__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_1_r_, debug-location !153; cg.c:122:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !153; cg.c:122:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @cg__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_1_r_, debug-location !153; cg.c:122:15
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, debug-location !153; cg.c:122:15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, debug-location !153; cg.c:122:15
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @cg__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_1_r_, debug-location !153; cg.c:122:15

********** MI Scheduling **********
main:%bb.4 if.then
  From: %19:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; cg.c:127:9
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=2
Live In: 
Live Out: %24 
Live Thru: 
  LiveReg: %24
Top Pressure:

Bottom Pressure:
GPR32=1
Excess PSets: 
Cluster ld/st SU(8) - SU(6)
SU(0):   %19:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%19
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   %20:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%20
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRWui %20:gpr32, %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%20
    SU(0): Data Latency=1 Reg=%19
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
SU(3):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_2_init_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_2_init_, debug-location !161; cg.c:124:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%21
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRXui %21:gpr64, %stack.19.t_names, 0, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%21
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %22:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_3_benchmk_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_3_benchmk_, debug-location !163; cg.c:125:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%22
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   STRXui %22:gpr64, %stack.19.t_names, 1, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%22
    SU(8): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_4_conjgd_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_4_conjgd_, debug-location !165; cg.c:126:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%23
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   STRXui %23:gpr64, %stack.19.t_names, 2, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%23
  Successors:
    SU(6): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %24:gpr64 = LDRXui %stack.20.fp, 0, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; cg.c:127:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 8 6 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(6) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(6) STRXui %22:gpr64, %stack.19.t_names, 1, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
Bottom Pressure:
GPR32=2
  LiveReg: %22
  UpdateRegP: SU(6) STRXui %22:gpr64, %stack.19.t_names, 1, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
              to 
  Ready @0c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 8 2 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 
BotQ.A RemLatency SU(8) 1c
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(8) STRXui %23:gpr64, %stack.19.t_names, 2, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
Bottom Pressure:
GPR32=3
  LiveReg: %23
  UpdateRegP: SU(8) STRXui %23:gpr64, %stack.19.t_names, 2, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
              to 
  Ready @1c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 9 
Queue BotQ.A: 5 2 4 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 7 9 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %23:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_4_conjgd_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_4_conjgd_, debug-location !165; cg.c:126:30
Bottom Pressure:
GPR32=2
  Ready @2c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 4 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 9 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 3c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRXui %21:gpr64, %stack.19.t_names, 0, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
Bottom Pressure:
GPR32=3
  LiveReg: %21
  UpdateRegP: SU(4) STRXui %21:gpr64, %stack.19.t_names, 0, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
              to 
  Ready @3c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 9 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %24:gpr64 = LDRXui %stack.20.fp, 0, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
Bottom Pressure:
GPR32=2
  Ready @4c
  BotQ.A BotLatency SU(9) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(5) %22:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_3_benchmk_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_3_benchmk_, debug-location !163; cg.c:125:26
Bottom Pressure:
GPR32=1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %20:gpr32, %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %20
  UpdateRegP: SU(2) STRWui %20:gpr32, %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
              to GPR64temp 1    GPR32 1
  LiveReg: %19
  UpdateRegP: SU(2) STRWui %20:gpr32, %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
              to 
  Ready @6c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %21:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_2_init_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_2_init_, debug-location !161; cg.c:124:25
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %20:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %19:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
Bottom Pressure:

  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %19:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
SU(1):   %20:gpr32 = MOVi32imm 1
SU(3):   %21:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_2_init_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_2_init_, debug-location !161; cg.c:124:25
SU(2):   STRWui %20:gpr32, %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
SU(5):   %22:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_3_benchmk_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_3_benchmk_, debug-location !163; cg.c:125:26
SU(9):   %24:gpr64 = LDRXui %stack.20.fp, 0, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
SU(4):   STRXui %21:gpr64, %stack.19.t_names, 0, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
SU(7):   %23:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_4_conjgd_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_4_conjgd_, debug-location !165; cg.c:126:30
SU(8):   STRXui %23:gpr64, %stack.19.t_names, 2, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
SU(6):   STRXui %22:gpr64, %stack.19.t_names, 1, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26

********** MI Scheduling **********
main:%bb.5 if.else
  From: %17:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %17:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%17
  Single Issue       : false;
SU(1):   STRWui $wzr, %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !169 :: (store 4 into @timeron); cg.c:130:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%17
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui $wzr, %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !169 :: (store 4 into @timeron); cg.c:130:17
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %17:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %17:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
SU(1):   STRWui $wzr, %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !169 :: (store 4 into @timeron); cg.c:130:17

********** MI Scheduling **********
main:%bb.6 if.end
  From: %60:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !201; cg.c:190:5
    To: BL @makea, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $w5, implicit-def $sp, debug-location !201; cg.c:190:5
 RegionInstrs: 19
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=14
Live In: %56 %55 %54 %57 %58 %59 
Live Out: %56 %55 %54 %67 %66 %57 %58 %59 
Live Thru: GPR32=6
  LiveReg: %56
  UpdateRegP: SU(18) $w5 = COPY %56:gpr32, debug-location !201; cg.c:190:5
              to GPR32 -1
  LiveReg: %55
  UpdateRegP: SU(14) $w1 = COPY %55:gpr32, debug-location !201; cg.c:190:5
              to GPR32 -1
  LiveReg: %54
  UpdateRegP: SU(13) $w0 = COPY %54:gpr32, debug-location !201; cg.c:190:5
              to GPR32 -1
  LiveReg: %67
  LiveReg: %66
  LiveReg: %57
  UpdateRegP: SU(10) STRWui %57:gpr32, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
              to 
  LiveReg: %58
  UpdateRegP: SU(9) STRWui %58:gpr32, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
              to 
  LiveReg: %59
  UpdateRegP: SU(8) STRWui %59:gpr32, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
              to 
Top Pressure:
GPR32=6
Bottom Pressure:
GPR32=14
Excess PSets: 
Cluster ld/st SU(7) - SU(5)
Cluster ld/st SU(3) - SU(1)
SU(0):   %60:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%60
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %60:gpr64, $sp, 6, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%60
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %62:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%62
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %62:gpr64, $sp, 5, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%62
  Successors:
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %63:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%63
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %63:gpr64, $sp, 4, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%63
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %64:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%64
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %64:gpr64, $sp, 3, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%64
  Successors:
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   STRWui %59:gpr32, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   STRWui %58:gpr32, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   STRWui %57:gpr32, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %66:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %67:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   $w0 = COPY %54:gpr32, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   $w1 = COPY %55:gpr32, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   $x2 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   $x3 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   $x4 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   $w5 = COPY %56:gpr32, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   BL @makea, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $w5, implicit-def $sp, debug-location !201; cg.c:190:5
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(18): Ord  Latency=0 Artificial
    SU(17): Ord  Latency=1 Artificial
    SU(16): Ord  Latency=1 Artificial
    SU(15): Ord  Latency=1 Artificial
    SU(14): Ord  Latency=0 Artificial
    SU(13): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 15 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 18 14 13 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 14 15 16 17 18 
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(18) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(18) $w5 = COPY %56:gpr32, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=13
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 15 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 13 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 14 15 16 17 
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(13) PHYS-REG                           
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(14) $w1 = COPY %55:gpr32, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=12
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 15 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 13 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 13 17 15 16 
Picking from Bot:
  Cand SU(12) ORDER                              
  Cand SU(13) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(13) $w0 = COPY %54:gpr32, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=11
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 15 
Queue BotQ.A: 12 11 10 9 8 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 12 16 17 15 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(12) %67:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=10
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 10 9 8 7 5 3 17 15 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 15 16 17 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(5) STRXui %63:gpr64, $sp, 4, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
Bottom Pressure:
GPR32=11
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %63
  UpdateRegP: SU(5) STRXui %63:gpr64, $sp, 4, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 10 9 8 7 16 3 17 15 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 15 16 17 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(7) STRXui %64:gpr64, $sp, 3, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
Bottom Pressure:
GPR32=12
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %64
  UpdateRegP: SU(7) STRXui %64:gpr64, $sp, 3, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
              to 
  Ready @2c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 11 10 9 8 4 16 3 17 15 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 15 16 17 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(1) STRXui %60:gpr64, $sp, 6, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
Bottom Pressure:
GPR32=13
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %60
  UpdateRegP: SU(1) STRXui %60:gpr64, $sp, 6, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
              to 
  Ready @3c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 4 16 3 17 15 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 15 16 17 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(3) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(3) STRXui %62:gpr64, $sp, 5, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
Bottom Pressure:
GPR32=14
  GPR32: 14 <= 15(+ 6 livethru)
  LiveReg: %62
  UpdateRegP: SU(3) STRXui %62:gpr64, $sp, 5, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
              to 
  Ready @4c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 4 16 0 17 15 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 15 16 17 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(17) $x4 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=13
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @5c
  BotQ.A BotLatency SU(17) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 4 16 0 2 15 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 15 16 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) $x3 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=12
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 4 15 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 15 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) $x2 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=11
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 4 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 11 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %66:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=10
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 10 9 8 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 10 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRWui %57:gpr32, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
Bottom Pressure:
GPR32=10
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 2 9 8 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 9 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRWui %58:gpr32, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
Bottom Pressure:
GPR32=10
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 2 4 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRWui %59:gpr32, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
Bottom Pressure:
GPR32=10
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %64:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=9
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %63:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=8
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %62:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=7
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %60:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !201; cg.c:190:5
Bottom Pressure:
GPR32=6
  GPR32: 14 <= 15(+ 6 livethru)
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %60:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !201; cg.c:190:5
SU(2):   %62:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !201; cg.c:190:5
SU(4):   %63:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !201; cg.c:190:5
SU(6):   %64:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !201; cg.c:190:5
SU(8):   STRWui %59:gpr32, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
SU(9):   STRWui %58:gpr32, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
SU(10):   STRWui %57:gpr32, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
SU(11):   %66:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
SU(15):   $x2 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !201; cg.c:190:5
SU(16):   $x3 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
SU(17):   $x4 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
SU(3):   STRXui %62:gpr64, $sp, 5, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
SU(1):   STRXui %60:gpr64, $sp, 6, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
SU(7):   STRXui %64:gpr64, $sp, 3, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
SU(5):   STRXui %63:gpr64, $sp, 4, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
SU(12):   %67:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
SU(13):   $w0 = COPY %54:gpr32, debug-location !201; cg.c:190:5
SU(14):   $w1 = COPY %55:gpr32, debug-location !201; cg.c:190:5
SU(18):   $w5 = COPY %56:gpr32, debug-location !201; cg.c:190:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: %53:fpr64 = COPY killed $d0, debug-location !193; cg.c:185:12
    To: ADJCALLSTACKDOWN 56, 0, implicit-def dead $sp, implicit $sp, debug-location !201; cg.c:190:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=6
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: %32 %31 %30 %28 %45 %44 B0 
Live Out: %59 %58 %31 %57 %30 %56 %28 %55 %54 
Live Thru: GPR64temp=3
GPR32=3
  LiveReg: %59
  LiveReg: %58
  LiveReg: %31
  UpdateRegP: SU(6) %58:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
              to GPR32 -1
  LiveReg: %57
  LiveReg: %30
  UpdateRegP: SU(5) %57:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
              to GPR32 -1
  LiveReg: %56
  LiveReg: %28
  UpdateRegP: SU(4) %56:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
              to GPR32 -1
  LiveReg: %55
  LiveReg: %54
Top Pressure:
GPR64temp=6
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
GPR64temp=3
GPR32=9
Excess PSets: 
SU(0):   %53:fpr64 = COPY killed $d0, debug-location !193; cg.c:185:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%53
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(1):   STRDui %53:fpr64, %stack.7.zeta, 0, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%53
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(2):   %54:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
SU(3):   %55:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
SU(4):   %56:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %57:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %58:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %59:gpr32 = LDRWui %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 56, 0, implicit-def dead $sp, implicit $sp, debug-location !201; cg.c:190:5
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 5 4 3 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %53:fpr64, %stack.7.zeta, 0, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
Bottom Pressure:
GPR64temp=3
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %53
  UpdateRegP: SU(1) STRDui %53:fpr64, %stack.7.zeta, 0, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 6 5 4 3 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %53:fpr64 = COPY killed $d0, debug-location !193; cg.c:185:12
Bottom Pressure:
GPR64temp=3
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 2 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 7 2 3 4 5 6 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(7) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %59:gpr32 = LDRWui %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
Bottom Pressure:
GPR64temp=4
FPR8=1
GPR32=9
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR64temp: 4 <= 6(+ 3 livethru)
  LiveReg: %32
  UpdateRegP: SU(7) %59:gpr32 = LDRWui %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
              to GPR32 -1
  Ready @3c
  BotQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 2 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 6 2 3 4 5 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %58:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
Bottom Pressure:
GPR64temp=4
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 5 2 3 4 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %57:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
Bottom Pressure:
GPR64temp=4
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 2 3 
Queue TopQ.P: 
Queue TopQ.A: 4 2 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %56:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
Bottom Pressure:
GPR64temp=4
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 2 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %55:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
Bottom Pressure:
GPR64temp=5
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR64temp: 5 <= 6(+ 3 livethru)
  LiveReg: %45
  UpdateRegP: SU(3) %55:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
              to GPR32 -1
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %54:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
Bottom Pressure:
GPR64temp=6
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR64temp: 6 <= 6(+ 3 livethru)
  LiveReg: %44
  UpdateRegP: SU(2) %54:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
              to GPR32 -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(2):   %54:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
SU(3):   %55:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
SU(4):   %56:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
SU(5):   %57:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
SU(6):   %58:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
SU(7):   %59:gpr32 = LDRWui %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
SU(0):   %53:fpr64 = COPY $d0, debug-location !193; cg.c:185:12
SU(1):   STRDui %53:fpr64, %stack.7.zeta, 0, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10

********** MI Scheduling **********
main:%bb.6 if.end
  From: %51:gpr64temp = ADRP target-flags(aarch64-page) %const.0
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !193; cg.c:185:12
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %51:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(1):   %52:fpr64 = LDRDui %51:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%51
  Successors:
    SU(3): Data Latency=4 Reg=%52
  Single Issue       : false;
SU(2):   $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !193; cg.c:185:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $d0 = COPY %52:fpr64, debug-location !193; cg.c:185:12
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%52
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !193; cg.c:185:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) $d0 = COPY %52:fpr64, debug-location !193; cg.c:185:12
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !193; cg.c:185:12
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %52:fpr64 = LDRDui %51:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %51:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %51:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(1):   %52:fpr64 = LDRDui %51:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(2):   $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !193; cg.c:185:12
SU(3):   $d0 = COPY %52:fpr64, debug-location !193; cg.c:185:12

********** MI Scheduling **********
main:%bb.6 if.end
  From: %44:gpr64temp = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !193; cg.c:185:12
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=3
GPR32=5
Live In: %0 
Live Out: %45 %0 %44 
Live Thru: GPR32=1
  LiveReg: %45
  UpdateRegP: SU(4) STRWui %46:gpr32, %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
              to GPR32 1
  LiveReg: %0
  UpdateRegP: SU(1) STRWui %0:gpr32common, %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
              to GPR64temp 1    GPR32 1
  LiveReg: %44
  UpdateRegP: SU(1) STRWui %0:gpr32common, %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
              to 
Top Pressure:
GPR32=1
Bottom Pressure:
GPR64temp=2
GPR32=3
Excess PSets: 
SU(0):   %44:gpr64temp = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%44
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   STRWui %0:gpr32common, %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%44
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %45:gpr64temp = ADRP target-flags(aarch64-page) @nzz, debug-location !189; cg.c:178:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%45
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(3):   %46:gpr32 = MOVi32imm 14700000
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%46
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRWui %46:gpr32, %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%46
    SU(2): Data Latency=1 Reg=%45
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %47:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !190; cg.c:183:10
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%47
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %48:gpr64 = MOVi64imm 4734050326586327040
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%48
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %48:gpr64, %47:gpr64common, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%48
    SU(5): Data Latency=1 Reg=%47
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(8):   %49:gpr64temp = ADRP target-flags(aarch64-page) @amult, debug-location !191; cg.c:184:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%49
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(9):   %50:gpr64 = MOVi64imm 4742906807993761792
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%50
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   STRXui %50:gpr64, %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%50
    SU(8): Data Latency=1 Reg=%49
  Pressure Diff      : GPR64temp 1    GPR32 2
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !193; cg.c:185:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 7 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 9 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) STRXui %50:gpr64, %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
Bottom Pressure:
GPR64temp=3
GPR32=5
  LiveReg: %50
  UpdateRegP: SU(10) STRXui %50:gpr64, %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
              to GPR64temp 1    GPR32 1
  LiveReg: %49
  UpdateRegP: SU(10) STRXui %50:gpr64, %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 7 4 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 9 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(1) STRWui %0:gpr32common, %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
Bottom Pressure:
GPR64temp=3
GPR32=5
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 4 9 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 9 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %50:gpr64 = MOVi64imm 4742906807993761792
Bottom Pressure:
GPR64temp=3
GPR32=4
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWui %46:gpr32, %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
Bottom Pressure:
GPR64temp=3
GPR32=5
  LiveReg: %46
  UpdateRegP: SU(4) STRWui %46:gpr32, %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
              to 
  Ready @3c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 7 0 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 8 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(8) %49:gpr64temp = ADRP target-flags(aarch64-page) @amult, debug-location !191; cg.c:184:11
Bottom Pressure:
GPR64temp=2
GPR32=4
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 6 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %46:gpr32 = MOVi32imm 14700000
Bottom Pressure:
GPR64temp=2
GPR32=3
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 7 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 5 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(7) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRXui %48:gpr64, %47:gpr64common, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
Bottom Pressure:
GPR64temp=2
GPR32=5
  LiveReg: %48
  UpdateRegP: SU(7) STRXui %48:gpr64, %47:gpr64common, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
              to GPR32 1
  LiveReg: %47
  UpdateRegP: SU(7) STRXui %48:gpr64, %47:gpr64common, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
              to 
  Ready @6c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 5 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %48:gpr64 = MOVi64imm 4734050326586327040
Bottom Pressure:
GPR64temp=2
GPR32=4
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 5 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %47:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !190; cg.c:183:10
Bottom Pressure:
GPR64temp=2
GPR32=3
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %45:gpr64temp = ADRP target-flags(aarch64-page) @nzz, debug-location !189; cg.c:178:9
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %44:gpr64temp = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
Bottom Pressure:
GPR32=1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %44:gpr64temp = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
SU(2):   %45:gpr64temp = ADRP target-flags(aarch64-page) @nzz, debug-location !189; cg.c:178:9
SU(5):   %47:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !190; cg.c:183:10
SU(6):   %48:gpr64 = MOVi64imm 4734050326586327040
SU(7):   STRXui %48:gpr64, %47:gpr64common, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
SU(3):   %46:gpr32 = MOVi32imm 14700000
SU(8):   %49:gpr64temp = ADRP target-flags(aarch64-page) @amult, debug-location !191; cg.c:184:11
SU(4):   STRWui %46:gpr32, %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
SU(9):   %50:gpr64 = MOVi64imm 4742906807993761792
SU(1):   STRWui %0:gpr32common, %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
SU(10):   STRXui %50:gpr64, %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11

********** MI Scheduling **********
main:%bb.6 if.end
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_7__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !186; cg.c:174:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_7__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = MOVi32imm 75, debug-location !186; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !186; cg.c:174:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = MOVi32imm 75, debug-location !186; cg.c:174:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_7__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_7__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
SU(1):   $w1 = MOVi32imm 75, debug-location !186; cg.c:174:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_6__Size___11, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !185; cg.c:173:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_6__Size___11, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = MOVi32imm 75000, debug-location !185; cg.c:173:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !185; cg.c:173:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = MOVi32imm 75000, debug-location !185; cg.c:173:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_6__Size___11, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_6__Size___11, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
SU(1):   $w1 = MOVi32imm 75000, debug-location !185; cg.c:173:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: %28:gpr64temp = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; cg.c:172:5
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=4
GPR32=6
Live In: %0 
Live Out: %32 %31 %30 %0 %28 
Live Thru: GPR32=1
  LiveReg: %32
  UpdateRegP: SU(8) STRWui %29:gpr32common, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
              to GPR32 1
  LiveReg: %31
  UpdateRegP: SU(6) STRWui $wzr, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
              to 
  LiveReg: %30
  UpdateRegP: SU(4) STRWui %29:gpr32common, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
              to GPR32 1
  LiveReg: %0
  UpdateRegP: SU(2) %29:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !174; cg.c:136:13
              to GPR32 -1
  LiveReg: %28
  UpdateRegP: SU(1) STRWui $wzr, %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
              to 
Top Pressure:
GPR32=1
Bottom Pressure:
GPR64temp=4
GPR32=5
Excess PSets: 
SU(0):   %28:gpr64temp = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%28
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(1):   STRWui $wzr, %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%28
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %29:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !174; cg.c:136:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%29
    SU(4): Data Latency=1 Reg=%29
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %30:gpr64temp = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%30
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(4):   STRWui %29:gpr32common, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%30
    SU(2): Data Latency=1 Reg=%29
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   %31:gpr64temp = ADRP target-flags(aarch64-page) @firstcol, debug-location !175; cg.c:137:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=1 Reg=%31
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(6):   STRWui $wzr, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%31
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %32:gpr64temp = ADRP target-flags(aarch64-page) @lastcol, debug-location !176; cg.c:138:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=1 Reg=%32
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(8):   STRWui %29:gpr32common, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%32
    SU(2): Data Latency=1 Reg=%29
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %33:gpr32 = MOVi32imm 66
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=1 Reg=%33
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   STRBBui %33:gpr32, %stack.14.Class, 0, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%33
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %34:gpr64 = MOVi64imm 4627086287187887514
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(12): Data Latency=1 Reg=%34
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   STRXui %34:gpr64, %stack.16.zeta_verify_value, 0, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%34
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; cg.c:172:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 8 6 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRXui %34:gpr64, %stack.16.zeta_verify_value, 0, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
Bottom Pressure:
GPR64temp=4
GPR32=6
  LiveReg: %34
  UpdateRegP: SU(12) STRXui %34:gpr64, %stack.16.zeta_verify_value, 0, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
              to 
  Ready @0c
  BotQ.A TopLatency SU(12) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 10 8 6 4 11 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) STRWui $wzr, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
Bottom Pressure:
GPR64temp=4
GPR32=6
  Ready @1c
  BotQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 10 8 11 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(1) STRWui $wzr, %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
Bottom Pressure:
GPR64temp=4
GPR32=6
  Ready @2c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 8 11 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 11 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(11) %34:gpr64 = MOVi64imm 4627086287187887514
Bottom Pressure:
GPR64temp=4
GPR32=5
  Ready @3c
  BotQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 10 8 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(10) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRBBui %33:gpr32, %stack.14.Class, 0, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
Bottom Pressure:
GPR64temp=4
GPR32=6
  LiveReg: %33
  UpdateRegP: SU(10) STRBBui %33:gpr32, %stack.14.Class, 0, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
              to 
  Ready @4c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 8 0 9 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 9 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %33:gpr32 = MOVi32imm 66
Bottom Pressure:
GPR64temp=4
GPR32=5
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 8 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) STRWui %29:gpr32common, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
Bottom Pressure:
GPR64temp=4
GPR32=6
  LiveReg: %29
  UpdateRegP: SU(4) STRWui %29:gpr32common, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
              to 
  UpdateRegP: SU(8) STRWui %29:gpr32common, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
              to 
  Ready @6c
  BotQ.A TopLatency SU(8) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 0 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRWui %29:gpr32common, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
Bottom Pressure:
GPR64temp=4
GPR32=6
  Ready @7c
  BotQ.A TopLatency SU(4) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 7 0 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 7 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %32:gpr64temp = ADRP target-flags(aarch64-page) @lastcol, debug-location !176; cg.c:138:13
Bottom Pressure:
GPR64temp=3
GPR32=5
  GPR64temp: 4 <= 6(+ 0 livethru)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %31:gpr64temp = ADRP target-flags(aarch64-page) @firstcol, debug-location !175; cg.c:137:14
Bottom Pressure:
GPR64temp=2
GPR32=4
  GPR64temp: 4 <= 6(+ 0 livethru)
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %30:gpr64temp = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
Bottom Pressure:
GPR64temp=1
GPR32=3
  GPR64temp: 4 <= 6(+ 0 livethru)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %29:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !174; cg.c:136:13
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %28:gpr64temp = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
Bottom Pressure:
GPR32=1
  GPR64temp: 4 <= 6(+ 0 livethru)
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %28:gpr64temp = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
SU(2):   %29:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !174; cg.c:136:13
SU(3):   %30:gpr64temp = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
SU(5):   %31:gpr64temp = ADRP target-flags(aarch64-page) @firstcol, debug-location !175; cg.c:137:14
SU(7):   %32:gpr64temp = ADRP target-flags(aarch64-page) @lastcol, debug-location !176; cg.c:138:13
SU(4):   STRWui %29:gpr32common, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
SU(8):   STRWui %29:gpr32common, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
SU(9):   %33:gpr32 = MOVi32imm 66
SU(10):   STRBBui %33:gpr32, %stack.14.Class, 0, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
SU(11):   %34:gpr64 = MOVi64imm 4627086287187887514
SU(1):   STRWui $wzr, %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
SU(6):   STRWui $wzr, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
SU(12):   STRXui %34:gpr64, %stack.16.zeta_verify_value, 0, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27

********** MI Scheduling **********
main:%bb.7 for.cond10
  From: %68:gpr32 = LDRWui %stack.4.j, 0, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
    To: Bcc 10, %bb.12, implicit killed $nzcv, debug-location !212; cg.c:202:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %68:gpr32 = LDRWui %stack.4.j, 0, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%68
  Single Issue       : false;
SU(1):   %70:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%70
  Single Issue       : false;
SU(2):   %72:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !208 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%72
  Single Issue       : false;
SU(3):   %73:gpr32common = nsw SUBWrr %70:gpr32, %72:gpr32, debug-location !209; cg.c:202:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%72
    SU(1): Data Latency=4 Reg=%70
  Successors:
    SU(4): Data Latency=1 Reg=%73
  Single Issue       : false;
SU(4):   %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !210; cg.c:202:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%73
  Successors:
    SU(5): Data Latency=1 Reg=%74
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %68:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !212; cg.c:202:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%74
    SU(0): Data Latency=4 Reg=%68
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.12, implicit killed $nzcv, debug-location !212; cg.c:202:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %68:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !212; cg.c:202:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !210; cg.c:202:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %73:gpr32common = nsw SUBWrr %70:gpr32, %72:gpr32, debug-location !209; cg.c:202:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %68:gpr32 = LDRWui %stack.4.j, 0, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %72:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !208 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %70:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(1):   %70:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
SU(2):   %72:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !208 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
SU(0):   %68:gpr32 = LDRWui %stack.4.j, 0, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
SU(3):   %73:gpr32common = nsw SUBWrr %70:gpr32, %72:gpr32, debug-location !209; cg.c:202:29
SU(4):   %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !210; cg.c:202:40
SU(5):   dead $wzr = SUBSWrr %68:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !212; cg.c:202:5

********** MI Scheduling **********
main:%bb.8 for.body12
  From: %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=%367
  Single Issue       : false;
SU(1):   %369:gpr32 = LDRWroX %67:gpr64common, %367:gpr64, 0, 1, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=%367
  Successors:
    SU(2): Data Latency=4 Reg=%369
  Single Issue       : false;
SU(2):   STRWui %369:gpr32, %stack.5.k, 0, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%369
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %369:gpr32, %stack.5.k, 0, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16
  Ready @0c
  BotQ.A TopLatency SU(2) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %369:gpr32 = LDRWroX %67:gpr64common, %367:gpr64, 0, 1, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  Ready @8c
  BotQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
SU(1):   %369:gpr32 = LDRWroX %67:gpr64common, %367:gpr64, 0, 1, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
SU(2):   STRWui %369:gpr32, %stack.5.k, 0, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16

********** MI Scheduling **********
main:%bb.9 for.cond14
  From: %370:gpr32 = LDRWui %stack.5.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
    To: Bcc 10, %bb.11, implicit killed $nzcv, debug-location !225; cg.c:203:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %370:gpr32 = LDRWui %stack.5.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%370
  Single Issue       : false;
SU(1):   %371:gpr64 = LDRSWui %stack.4.j, 0, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%371
  Single Issue       : false;
SU(2):   %373:gpr64common = ADDXrs %67:gpr64common, %371:gpr64, 2, debug-location !223; cg.c:203:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%371
  Successors:
    SU(3): Data Latency=1 Reg=%373
  Single Issue       : false;
SU(3):   %374:gpr32 = LDRWui %373:gpr64common, 1, debug-location !223 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%373
  Successors:
    SU(4): Data Latency=4 Reg=%374
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %370:gpr32, %374:gpr32, implicit-def $nzcv, debug-location !225; cg.c:203:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%374
    SU(0): Data Latency=4 Reg=%370
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.11, implicit killed $nzcv, debug-location !225; cg.c:203:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %370:gpr32, %374:gpr32, implicit-def $nzcv, debug-location !225; cg.c:203:9
  Ready @1c
  BotQ.A TopLatency SU(4) 9c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %374:gpr32 = LDRWui %373:gpr64common, 1, debug-location !223 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %373:gpr64common = ADDXrs %67:gpr64common, %371:gpr64, 2, debug-location !223; cg.c:203:33
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %370:gpr32 = LDRWui %stack.5.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %371:gpr64 = LDRSWui %stack.4.j, 0, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(1):   %371:gpr64 = LDRSWui %stack.4.j, 0, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
SU(0):   %370:gpr32 = LDRWui %stack.5.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
SU(2):   %373:gpr64common = ADDXrs %67:gpr64common, %371:gpr64, 2, debug-location !223; cg.c:203:33
SU(3):   %374:gpr32 = LDRWui %373:gpr64common, 1, debug-location !223 :: (load 4 from %ir.arrayidx17); cg.c:203:33
SU(4):   dead $wzr = SUBSWrr %370:gpr32, %374:gpr32, implicit-def $nzcv, debug-location !225; cg.c:203:9

********** MI Scheduling **********
main:%bb.10 for.body19
  From: %378:gpr64common = LDRSWui %stack.5.k, 0, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
    To: B %bb.9, debug-location !235; cg.c:203:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=6
Live In: %66 %31 
Live Out: %66 %31 
Live Thru: GPR64temp=1
GPR32=2
  LiveReg: %66
  UpdateRegP: SU(2) %382:gpr32 = LDRWroX %66:gpr64common, %380:gpr64, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
              to 
  UpdateRegP: SU(5) STRWroX %385:gpr32, %66:gpr64common, %380:gpr64, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
              to GPR32 2
  LiveReg: %31
  UpdateRegP: SU(3) %384:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
              to GPR32 -1
Top Pressure:
GPR64temp=1
GPR32=2
Bottom Pressure:
GPR64temp=1
GPR32=2
Excess PSets: 
SU(0):   %378:gpr64common = LDRSWui %stack.5.k, 0, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%378
    SU(1): Data Latency=4 Reg=%378
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %380:gpr64 = UBFMXri %378:gpr64common, 62, 61, debug-location !228; cg.c:204:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=%378
  Successors:
    SU(5): Data Latency=1 Reg=%380
    SU(2): Data Latency=1 Reg=%380
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %382:gpr32 = LDRWroX %66:gpr64common, %380:gpr64, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(1): Data Latency=1 Reg=%380
  Successors:
    SU(4): Data Latency=4 Reg=%382
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %384:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%384
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %385:gpr32 = nsw SUBWrr %382:gpr32, %384:gpr32, debug-location !230; cg.c:204:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%382
    SU(3): Data Latency=4 Reg=%384
  Successors:
    SU(5): Data Latency=1 Reg=%385
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   STRWroX %385:gpr32, %66:gpr64common, %380:gpr64, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%385
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=%380
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(6):   %386:gpr32common = nsw ADDWri %378.sub_32:gpr64common, 1, 0, debug-location !234; cg.c:203:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%378
  Successors:
    SU(7): Data Latency=1 Reg=%386
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWui %386:gpr32common, %stack.5.k, 0, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%386
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.9, debug-location !235; cg.c:203:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %386:gpr32common, %stack.5.k, 0, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %386
  UpdateRegP: SU(7) STRWui %386:gpr32common, %stack.5.k, 0, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWroX %385:gpr32, %66:gpr64common, %380:gpr64, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
Bottom Pressure:
GPR64temp=1
GPR32=5
  LiveReg: %385
  UpdateRegP: SU(5) STRWroX %385:gpr32, %66:gpr64common, %380:gpr64, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
              to GPR32 1
  LiveReg: %380
  UpdateRegP: SU(2) %382:gpr32 = LDRWroX %66:gpr64common, %380:gpr64, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
              to GPR32 -1
  UpdateRegP: SU(5) STRWroX %385:gpr32, %66:gpr64common, %380:gpr64, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %385:gpr32 = nsw SUBWrr %382:gpr32, %384:gpr32, debug-location !230; cg.c:204:35
Bottom Pressure:
GPR64temp=1
GPR32=6
  LiveReg: %382
  UpdateRegP: SU(4) %385:gpr32 = nsw SUBWrr %382:gpr32, %384:gpr32, debug-location !230; cg.c:204:35
              to 
  LiveReg: %384
  UpdateRegP: SU(4) %385:gpr32 = nsw SUBWrr %382:gpr32, %384:gpr32, debug-location !230; cg.c:204:35
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 3 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %386:gpr32common = nsw ADDWri %378.sub_32:gpr64common, 1, 0, debug-location !234; cg.c:203:49
Bottom Pressure:
GPR64temp=1
GPR32=6
  LiveReg: %378
  UpdateRegP: SU(1) %380:gpr64 = UBFMXri %378:gpr64common, 62, 61, debug-location !228; cg.c:204:25
              to GPR32 -1
  UpdateRegP: SU(6) %386:gpr32common = nsw ADDWri %378.sub_32:gpr64common, 1, 0, debug-location !234; cg.c:203:49
              to GPR32 -1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 6c > CritPath 10
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %382:gpr32 = LDRWroX %66:gpr64common, %380:gpr64, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
Bottom Pressure:
GPR64temp=1
GPR32=5
  Ready @6c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %380:gpr64 = UBFMXri %378:gpr64common, 62, 61, debug-location !228; cg.c:204:25
Bottom Pressure:
GPR64temp=1
GPR32=4
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %384:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %378:gpr64common = LDRSWui %stack.5.k, 0, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @11c
  BotQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %378:gpr64common = LDRSWui %stack.5.k, 0, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
SU(3):   %384:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
SU(1):   %380:gpr64 = UBFMXri %378:gpr64common, 62, 61, debug-location !228; cg.c:204:25
SU(2):   %382:gpr32 = LDRWroX %66:gpr64common, %380:gpr64, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
SU(6):   %386:gpr32common = nsw ADDWri %378.sub_32:gpr64common, 1, 0, debug-location !234; cg.c:203:49
SU(4):   %385:gpr32 = nsw SUBWrr %382:gpr32, %384:gpr32, debug-location !230; cg.c:204:35
SU(5):   STRWroX %385:gpr32, %66:gpr64common, %380:gpr64, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
SU(7):   STRWui %386:gpr32common, %stack.5.k, 0, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49

********** MI Scheduling **********
main:%bb.11 for.inc28
  From: %376:gpr32common = LDRWui %stack.4.j, 0, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
    To: B %bb.7, debug-location !239; cg.c:202:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %376:gpr32common = LDRWui %stack.4.j, 0, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%376
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %377:gpr32common = nsw ADDWri %376:gpr32common, 1, 0, debug-location !238; cg.c:202:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%376
  Successors:
    SU(2): Data Latency=1 Reg=%377
  Single Issue       : false;
SU(2):   STRWui %377:gpr32common, %stack.4.j, 0, debug-location !238 :: (store 4 into %ir.j); cg.c:202:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%377
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.7, debug-location !239; cg.c:202:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %377:gpr32common, %stack.4.j, 0, debug-location !238 :: (store 4 into %ir.j); cg.c:202:46
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %377:gpr32common = nsw ADDWri %376:gpr32common, 1, 0, debug-location !238; cg.c:202:46
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %376:gpr32common = LDRWui %stack.4.j, 0, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %376:gpr32common = LDRWui %stack.4.j, 0, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
SU(1):   %377:gpr32common = nsw ADDWri %376:gpr32common, 1, 0, debug-location !238; cg.c:202:46
SU(2):   STRWui %377:gpr32common, %stack.4.j, 0, debug-location !238 :: (store 4 into %ir.j); cg.c:202:46

********** MI Scheduling **********
main:%bb.12 for.end30
  From: STRWui $wzr, %stack.3.i, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %364:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %365:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %365:gpr64 = MOVi64imm 4607182418800017408
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %364:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.3.i, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
SU(1):   %364:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
SU(2):   %365:gpr64 = MOVi64imm 4607182418800017408

********** MI Scheduling **********
main:%bb.13 for.cond31
  From: %77:gpr32 = LDRWui %stack.3.i, 0, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
    To: Bcc 10, %bb.15, implicit killed $nzcv, debug-location !248; cg.c:211:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %77:gpr32 = LDRWui %stack.3.i, 0, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%77
  Single Issue       : false;
SU(1):   %78:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !247; cg.c:211:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%78
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %77:gpr32, %78:gpr32common, implicit-def $nzcv, debug-location !248; cg.c:211:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%78
    SU(0): Data Latency=4 Reg=%77
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.15, implicit killed $nzcv, debug-location !248; cg.c:211:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %77:gpr32, %78:gpr32common, implicit-def $nzcv, debug-location !248; cg.c:211:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %78:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !247; cg.c:211:19
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %77:gpr32 = LDRWui %stack.3.i, 0, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %77:gpr32 = LDRWui %stack.3.i, 0, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
SU(1):   %78:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !247; cg.c:211:19
SU(2):   dead $wzr = SUBSWrr %77:gpr32, %78:gpr32common, implicit-def $nzcv, debug-location !248; cg.c:211:5

********** MI Scheduling **********
main:%bb.14 for.body33
  From: %362:gpr64common = LDRSWui %stack.3.i, 0, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
    To: B %bb.13, debug-location !254; cg.c:211:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %362:gpr64common = LDRSWui %stack.3.i, 0, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%362
    SU(1): Data Latency=4 Reg=%362
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRXroX %365:gpr64, %364:gpr64common, %362:gpr64common, 0, 1, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%362
  Single Issue       : false;
SU(2):   %366:gpr32common = nsw ADDWri %362.sub_32:gpr64common, 1, 0, debug-location !253; cg.c:211:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%362
  Successors:
    SU(3): Data Latency=1 Reg=%366
  Single Issue       : false;
SU(3):   STRWui %366:gpr32common, %stack.3.i, 0, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%366
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.13, debug-location !254; cg.c:211:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %362:gpr64common = LDRSWui %stack.3.i, 0, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %366:gpr32common, %stack.3.i, 0, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %366:gpr32common = nsw ADDWri %362.sub_32:gpr64common, 1, 0, debug-location !253; cg.c:211:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXroX %365:gpr64, %364:gpr64common, %362:gpr64common, 0, 1, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   %362:gpr64common = LDRSWui %stack.3.i, 0, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
SU(1):   STRXroX %365:gpr64, %364:gpr64common, %362:gpr64common, 0, 1, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
SU(2):   %366:gpr32common = nsw ADDWri %362.sub_32:gpr64common, 1, 0, debug-location !253; cg.c:211:30
SU(3):   STRWui %366:gpr32common, %stack.3.i, 0, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30

********** MI Scheduling **********
main:%bb.15 for.end38
  From: STRWui $wzr, %stack.4.j, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.4.j, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %82:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %84:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %355:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %358:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %359:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(6):   %360:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %360:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %359:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %358:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %355:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %84:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %82:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.4.j, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   STRWui $wzr, %stack.4.j, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
SU(1):   %82:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
SU(2):   %84:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
SU(3):   %355:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
SU(4):   %358:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
SU(5):   %359:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
SU(6):   %360:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p

********** MI Scheduling **********
main:%bb.16 for.cond39
  From: %81:gpr32 = LDRWui %stack.4.j, 0, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
    To: Bcc 10, %bb.18, implicit killed $nzcv, debug-location !267; cg.c:214:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %81:gpr32 = LDRWui %stack.4.j, 0, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%81
  Single Issue       : false;
SU(1):   %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%83
  Single Issue       : false;
SU(2):   %85:gpr32 = LDRWui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !263 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%85
  Single Issue       : false;
SU(3):   %86:gpr32common = nsw SUBWrr %83:gpr32, %85:gpr32, debug-location !264; cg.c:214:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%85
    SU(1): Data Latency=4 Reg=%83
  Successors:
    SU(4): Data Latency=1 Reg=%86
  Single Issue       : false;
SU(4):   %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !265; cg.c:214:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%86
  Successors:
    SU(5): Data Latency=1 Reg=%87
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %81:gpr32, %87:gpr32common, implicit-def $nzcv, debug-location !267; cg.c:214:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%87
    SU(0): Data Latency=4 Reg=%81
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.18, implicit killed $nzcv, debug-location !267; cg.c:214:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %81:gpr32, %87:gpr32common, implicit-def $nzcv, debug-location !267; cg.c:214:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !265; cg.c:214:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %86:gpr32common = nsw SUBWrr %83:gpr32, %85:gpr32, debug-location !264; cg.c:214:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %81:gpr32 = LDRWui %stack.4.j, 0, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %85:gpr32 = LDRWui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !263 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(1):   %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
SU(2):   %85:gpr32 = LDRWui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !263 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
SU(0):   %81:gpr32 = LDRWui %stack.4.j, 0, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
SU(3):   %86:gpr32common = nsw SUBWrr %83:gpr32, %85:gpr32, debug-location !264; cg.c:214:29
SU(4):   %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !265; cg.c:214:40
SU(5):   dead $wzr = SUBSWrr %81:gpr32, %87:gpr32common, implicit-def $nzcv, debug-location !267; cg.c:214:5

********** MI Scheduling **********
main:%bb.17 for.body43
  From: %353:gpr64common = LDRSWui %stack.4.j, 0, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
    To: B %bb.16, debug-location !282; cg.c:214:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=6
Live In: %360 %359 %358 %355 
Live Out: %360 %359 %358 %355 
Live Thru: GPR32=4
  LiveReg: %360
  UpdateRegP: SU(5) STRXroX $xzr, %360:gpr64common, %356:gpr64, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
              to GPR32 1
  LiveReg: %359
  UpdateRegP: SU(4) STRXroX $xzr, %359:gpr64common, %356:gpr64, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
              to GPR32 1
  LiveReg: %358
  UpdateRegP: SU(3) STRXroX $xzr, %358:gpr64common, %356:gpr64, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
              to GPR32 1
  LiveReg: %355
  UpdateRegP: SU(2) STRXroX $xzr, %355:gpr64common, %356:gpr64, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
              to GPR32 1
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
SU(0):   %353:gpr64common = LDRSWui %stack.4.j, 0, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%353
    SU(1): Data Latency=4 Reg=%353
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %356:gpr64 = UBFMXri %353:gpr64common, 61, 60, debug-location !279; cg.c:218:9
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%353
  Successors:
    SU(5): Data Latency=1 Reg=%356
    SU(4): Data Latency=1 Reg=%356
    SU(3): Data Latency=1 Reg=%356
    SU(2): Data Latency=1 Reg=%356
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   STRXroX $xzr, %355:gpr64common, %356:gpr64, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%356
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   STRXroX $xzr, %358:gpr64common, %356:gpr64, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%356
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   STRXroX $xzr, %359:gpr64common, %356:gpr64, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%356
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   STRXroX $xzr, %360:gpr64common, %356:gpr64, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%356
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %361:gpr32common = nsw ADDWri %353.sub_32:gpr64common, 1, 0, debug-location !281; cg.c:214:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%353
  Successors:
    SU(7): Data Latency=1 Reg=%361
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWui %361:gpr32common, %stack.4.j, 0, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%361
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.16, debug-location !282; cg.c:214:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %353:gpr64common = LDRSWui %stack.4.j, 0, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
Top Pressure:
GPR32=5
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 4 3 2 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 1 
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(6) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %361:gpr32common, %stack.4.j, 0, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
Bottom Pressure:
GPR32=5
  LiveReg: %361
  UpdateRegP: SU(7) STRWui %361:gpr32common, %stack.4.j, 0, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 4 3 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRXroX $xzr, %360:gpr64common, %356:gpr64, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
Bottom Pressure:
GPR32=6
  LiveReg: %356
  UpdateRegP: SU(2) STRXroX $xzr, %355:gpr64common, %356:gpr64, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
              to 
  UpdateRegP: SU(3) STRXroX $xzr, %358:gpr64common, %356:gpr64, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
              to 
  UpdateRegP: SU(4) STRXroX $xzr, %359:gpr64common, %356:gpr64, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
              to 
  UpdateRegP: SU(5) STRXroX $xzr, %360:gpr64common, %356:gpr64, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 4 3 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) STRXroX $xzr, %359:gpr64common, %356:gpr64, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
Bottom Pressure:
GPR32=6
  Ready @2c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 3 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 3c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXroX $xzr, %358:gpr64common, %356:gpr64, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
Bottom Pressure:
GPR32=6
  Ready @3c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 6 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(2) 5c
  BotQ.A RemainingLatency 5 + 4c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRXroX $xzr, %355:gpr64common, %356:gpr64, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
Bottom Pressure:
GPR32=6
  Ready @4c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 1 
Queue TopQ.P: 
Queue TopQ.A: 6 1 
BotQ.A RemLatency SU(6) 4c
  BotQ.A RemainingLatency 4 + 5c > CritPath 5
TopQ.A RemLatency SU(6) 1c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %361:gpr32common = nsw ADDWri %353.sub_32:gpr64common, 1, 0, debug-location !281; cg.c:214:46
Bottom Pressure:
GPR32=6
  LiveReg: %353
  UpdateRegP: SU(1) %356:gpr64 = UBFMXri %353:gpr64common, 61, 60, debug-location !279; cg.c:218:9
              to GPR32 -1
  UpdateRegP: SU(6) %361:gpr32common = nsw ADDWri %353.sub_32:gpr64common, 1, 0, debug-location !281; cg.c:214:46
              to GPR32 -1
  Ready @5c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %356:gpr64 = UBFMXri %353:gpr64common, 61, 60, debug-location !279; cg.c:218:9
Bottom Pressure:
GPR32=5
  Ready @6c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %353:gpr64common = LDRSWui %stack.4.j, 0, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
SU(1):   %356:gpr64 = UBFMXri %353:gpr64common, 61, 60, debug-location !279; cg.c:218:9
SU(6):   %361:gpr32common = nsw ADDWri %353.sub_32:gpr64common, 1, 0, debug-location !281; cg.c:214:46
SU(2):   STRXroX $xzr, %355:gpr64common, %356:gpr64, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
SU(3):   STRXroX $xzr, %358:gpr64common, %356:gpr64, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
SU(4):   STRXroX $xzr, %359:gpr64common, %356:gpr64, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
SU(5):   STRXroX $xzr, %360:gpr64common, %356:gpr64, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
SU(7):   STRWui %361:gpr32common, %stack.4.j, 0, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46

********** MI Scheduling **********
main:%bb.18 for.end54
  From: STRXui $xzr, %stack.7.zeta, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
    To: End RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=3
FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: %317 %310 %308 %302 %301 %298 %297 %296 
Live Thru: 
  LiveReg: %317
  LiveReg: %310
  LiveReg: %308
  LiveReg: %302
  LiveReg: %301
  LiveReg: %298
  LiveReg: %297
  LiveReg: %296
Top Pressure:

Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
SU(0):   STRXui $xzr, %stack.7.zeta, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %90:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%90
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRWui %90:gpr32, %stack.6.it, 0, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%90
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %296:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %297:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %298:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %301:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %302:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %308:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(9):   %310:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(10):   %316:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(11): Data Latency=1 Reg=%316
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(11):   %317:fpr64 = LDRDui %316:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(10): Data Latency=1 Reg=%316
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 9 8 7 6 5 4 3 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 7 8 9 10 
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %310:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 0 8 7 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 7 8 10 
BotQ.A RemLatency SU(2) 1c
BotQ.A RemLatency SU(11) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %308:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 0 2 7 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 7 10 
BotQ.A RemLatency SU(2) 1c
BotQ.A RemLatency SU(11) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %302:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 6 5 4 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 10 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %317:fpr64 = LDRDui %316:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
GPR32=5
  LiveReg: %316
  UpdateRegP: SU(11) %317:fpr64 = LDRDui %316:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A TopLatency SU(11) 1c
  BotQ.A BotLatency SU(11) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 3 6 5 4 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 10 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) STRWui %90:gpr32, %stack.6.it, 0, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
Bottom Pressure:
GPR64temp=1
GPR32=6
  LiveReg: %90
  UpdateRegP: SU(2) STRWui %90:gpr32, %stack.6.it, 0, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
              to 
  Ready @4c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 10 3 6 5 4 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 10 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %316:gpr64temp = ADRP target-flags(aarch64-page) %const.4
Bottom Pressure:
GPR32=5
  Ready @5c
  BotQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 6 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 6 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %301:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
Bottom Pressure:
GPR32=4
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 5 
  BotQ.A RemainingLatency 0 + 7c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %298:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
Bottom Pressure:
GPR32=3
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  BotQ.A RemainingLatency 0 + 8c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %297:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
Bottom Pressure:
GPR32=2
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  BotQ.A RemainingLatency 0 + 9c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %296:gpr64common = ADDXri %stack.8.rnorm, 0, 0
Bottom Pressure:
GPR32=1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %90:gpr32 = MOVi32imm 1
Bottom Pressure:

  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.7.zeta, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
Bottom Pressure:

  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   STRXui $xzr, %stack.7.zeta, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
SU(1):   %90:gpr32 = MOVi32imm 1
SU(3):   %296:gpr64common = ADDXri %stack.8.rnorm, 0, 0
SU(4):   %297:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
SU(5):   %298:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
SU(6):   %301:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
SU(10):   %316:gpr64temp = ADRP target-flags(aarch64-page) %const.4
SU(2):   STRWui %90:gpr32, %stack.6.it, 0, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
SU(11):   %317:fpr64 = LDRDui %316:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(7):   %302:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
SU(8):   %308:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
SU(9):   %310:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

********** MI Scheduling **********
main:%bb.19 for.cond55
  From: %91:gpr32common = LDRWui %stack.6.it, 0, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
    To: Bcc 12, %bb.29, implicit killed $nzcv, debug-location !292; cg.c:228:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %91:gpr32common = LDRWui %stack.6.it, 0, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%91
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %91:gpr32common, 1, 0, implicit-def $nzcv, debug-location !292; cg.c:228:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%91
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.29, implicit killed $nzcv, debug-location !292; cg.c:228:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %91:gpr32common, 1, 0, implicit-def $nzcv, debug-location !292; cg.c:228:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %91:gpr32common = LDRWui %stack.6.it, 0, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %91:gpr32common = LDRWui %stack.6.it, 0, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
SU(1):   dead $wzr = SUBSWri %91:gpr32common, 1, 0, implicit-def $nzcv, debug-location !292; cg.c:228:5

********** MI Scheduling **********
main:%bb.20 for.body57
  From: STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.4.j, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
SU(1):   STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16

********** MI Scheduling **********
main:%bb.20 for.body57
  From: STRXui %296:gpr64common, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
    To: BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit-def $sp, debug-location !293; cg.c:232:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=9
Live In: %298 %297 %296 
Live Out: %298 %297 %296 
Live Thru: GPR32=3
  LiveReg: %298
  UpdateRegP: SU(2) STRXui %298:gpr64, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
              to 
  LiveReg: %297
  UpdateRegP: SU(1) STRXui %297:gpr64, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
              to 
  LiveReg: %296
  UpdateRegP: SU(0) STRXui %296:gpr64common, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
              to 
Top Pressure:
GPR32=3
Bottom Pressure:
GPR32=9
Excess PSets: 
Cluster ld/st SU(2) - SU(1)
SU(0):   STRXui %296:gpr64common, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   STRXui %297:gpr64, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   STRXui %298:gpr64, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
  # preds left       : 0
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit-def $sp, debug-location !293; cg.c:232:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 7 6 5 4 3 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(1) STRXui %297:gpr64, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
Bottom Pressure:
GPR32=9
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 8 3 4 5 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 8 2 3 4 5 6 7 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(2) STRXui %298:gpr64, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
Bottom Pressure:
GPR32=9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 8 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 8 7 3 4 5 6 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !293; cg.c:232:9
Bottom Pressure:
GPR32=8
  Ready @2c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 6 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 6 7 3 4 5 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !293; cg.c:232:9
Bottom Pressure:
GPR32=7
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 6 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 3 4 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !293; cg.c:232:9
Bottom Pressure:
GPR32=6
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 3 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !293; cg.c:232:9
Bottom Pressure:
GPR32=5
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !293; cg.c:232:9
Bottom Pressure:
GPR32=4
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !293; cg.c:232:9
Bottom Pressure:
GPR32=3
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %296:gpr64common, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
Bottom Pressure:
GPR32=3
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   STRXui %296:gpr64common, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
SU(3):   $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !293; cg.c:232:9
SU(4):   $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !293; cg.c:232:9
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !293; cg.c:232:9
SU(6):   $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !293; cg.c:232:9
SU(7):   $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !293; cg.c:232:9
SU(8):   $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !293; cg.c:232:9
SU(2):   STRXui %298:gpr64, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
SU(1):   STRXui %297:gpr64, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9

********** MI Scheduling **********
main:%bb.21 for.cond58
  From: %307:gpr32 = LDRWui %stack.4.j, 0, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
    To: Bcc 10, %bb.23, implicit killed $nzcv, debug-location !307; cg.c:242:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %307:gpr32 = LDRWui %stack.4.j, 0, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%307
  Single Issue       : false;
SU(1):   %309:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%309
  Single Issue       : false;
SU(2):   %311:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !303 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%311
  Single Issue       : false;
SU(3):   %312:gpr32common = nsw SUBWrr %309:gpr32, %311:gpr32, debug-location !304; cg.c:242:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%311
    SU(1): Data Latency=4 Reg=%309
  Successors:
    SU(4): Data Latency=1 Reg=%312
  Single Issue       : false;
SU(4):   %313:gpr32common = nsw ADDWri %312:gpr32common, 1, 0, debug-location !305; cg.c:242:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%312
  Successors:
    SU(5): Data Latency=1 Reg=%313
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %307:gpr32, %313:gpr32common, implicit-def $nzcv, debug-location !307; cg.c:242:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%313
    SU(0): Data Latency=4 Reg=%307
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.23, implicit killed $nzcv, debug-location !307; cg.c:242:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %307:gpr32, %313:gpr32common, implicit-def $nzcv, debug-location !307; cg.c:242:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %313:gpr32common = nsw ADDWri %312:gpr32common, 1, 0, debug-location !305; cg.c:242:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %312:gpr32common = nsw SUBWrr %309:gpr32, %311:gpr32, debug-location !304; cg.c:242:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %307:gpr32 = LDRWui %stack.4.j, 0, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %311:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !303 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %309:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(1):   %309:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
SU(2):   %311:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !303 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
SU(0):   %307:gpr32 = LDRWui %stack.4.j, 0, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
SU(3):   %312:gpr32common = nsw SUBWrr %309:gpr32, %311:gpr32, debug-location !304; cg.c:242:33
SU(4):   %313:gpr32common = nsw ADDWri %312:gpr32common, 1, 0, debug-location !305; cg.c:242:44
SU(5):   dead $wzr = SUBSWrr %307:gpr32, %313:gpr32common, implicit-def $nzcv, debug-location !307; cg.c:242:9

********** MI Scheduling **********
main:%bb.22 for.body62
  From: %339:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
    To: B %bb.21, debug-location !326; cg.c:242:9
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %302 %301 
Live Out: %302 %301 
Live Thru: GPR32=2
  LiveReg: %302
  UpdateRegP: SU(4) %346:fpr64 = LDRDroX %302:gpr64common, %343:gpr64, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %301
  UpdateRegP: SU(3) %344:fpr64 = LDRDroX %301:gpr64common, %343:gpr64, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
SU(0):   %339:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%339
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %340:gpr64common = LDRSWui %stack.4.j, 0, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(12): Data Latency=4 Reg=%340
    SU(2): Data Latency=4 Reg=%340
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %343:gpr64 = UBFMXri %340:gpr64common, 61, 60, debug-location !319; cg.c:244:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%340
  Successors:
    SU(4): Data Latency=1 Reg=%343
    SU(3): Data Latency=1 Reg=%343
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %344:fpr64 = LDRDroX %301:gpr64common, %343:gpr64, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%343
  Successors:
    SU(5): Data Latency=4 Reg=%344
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %346:fpr64 = LDRDroX %302:gpr64common, %343:gpr64, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%343
  Successors:
    SU(9): Data Latency=4 Reg=%346
    SU(5): Data Latency=4 Reg=%346
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %347:fpr64 = FMULDrr %344:fpr64, %346:fpr64, debug-location !314; cg.c:243:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%346
    SU(3): Data Latency=4 Reg=%344
  Successors:
    SU(6): Data Latency=1 Reg=%347
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %348:fpr64 = FADDDrr %339:fpr64, %347:fpr64, debug-location !315; cg.c:243:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%347
    SU(0): Data Latency=4 Reg=%339
  Successors:
    SU(7): Data Latency=1 Reg=%348
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   STRDui %348:fpr64, %stack.9.norm_temp1, 0, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%348
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(8):   %349:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%349
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(9):   %350:fpr64 = FMULDrr %346:fpr64, %346:fpr64, debug-location !322; cg.c:244:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%346
  Successors:
    SU(10): Data Latency=1 Reg=%350
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %351:fpr64 = FADDDrr %349:fpr64, %350:fpr64, debug-location !323; cg.c:244:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1 Reg=%350
    SU(8): Data Latency=4 Reg=%349
  Successors:
    SU(11): Data Latency=1 Reg=%351
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   STRDui %351:fpr64, %stack.10.norm_temp2, 0, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%351
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(12):   %352:gpr32common = nsw ADDWri %340.sub_32:gpr64common, 1, 0, debug-location !325; cg.c:242:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%340
  Successors:
    SU(13): Data Latency=1 Reg=%352
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   STRWui %352:gpr32common, %stack.4.j, 0, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%352
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.21, debug-location !326; cg.c:242:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) STRWui %352:gpr32common, %stack.4.j, 0, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
Bottom Pressure:
GPR32=3
  LiveReg: %352
  UpdateRegP: SU(13) STRWui %352:gpr32common, %stack.4.j, 0, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 11 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(7) 11c
  BotQ.A RemainingLatency 11 + 1c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) STRDui %351:fpr64, %stack.10.norm_temp2, 0, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %351
  UpdateRegP: SU(11) STRDui %351:fpr64, %stack.10.norm_temp2, 0, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
              to 
  Ready @1c
  BotQ.A TopLatency SU(11) 11c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(7) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRDui %348:fpr64, %stack.9.norm_temp1, 0, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %348
  UpdateRegP: SU(7) STRDui %348:fpr64, %stack.9.norm_temp1, 0, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
              to 
  Ready @2c
  BotQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 12 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(10) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %351:fpr64 = FADDDrr %349:fpr64, %350:fpr64, debug-location !323; cg.c:244:37
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %349
  UpdateRegP: SU(10) %351:fpr64 = FADDDrr %349:fpr64, %350:fpr64, debug-location !323; cg.c:244:37
              to 
  LiveReg: %350
  UpdateRegP: SU(10) %351:fpr64 = FADDDrr %349:fpr64, %350:fpr64, debug-location !323; cg.c:244:37
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 12 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 10 + 4c > CritPath 11
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(12) REG-MAX                            
  Cand SU(9) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %350:fpr64 = FMULDrr %346:fpr64, %346:fpr64, debug-location !322; cg.c:244:44
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %346
  UpdateRegP: SU(5) %347:fpr64 = FMULDrr %344:fpr64, %346:fpr64, debug-location !314; cg.c:243:44
              to 
  UpdateRegP: SU(9) %350:fpr64 = FMULDrr %346:fpr64, %346:fpr64, debug-location !322; cg.c:244:44
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 10 + 5c > CritPath 11
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(12) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %352:gpr32common = nsw ADDWri %340.sub_32:gpr64common, 1, 0, debug-location !325; cg.c:242:50
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %340
  UpdateRegP: SU(2) %343:gpr64 = UBFMXri %340:gpr64common, 61, 60, debug-location !319; cg.c:244:39
              to GPR32 -1
  UpdateRegP: SU(12) %352:gpr32common = nsw ADDWri %340.sub_32:gpr64common, 1, 0, debug-location !325; cg.c:242:50
              to GPR32 -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %348:fpr64 = FADDDrr %339:fpr64, %347:fpr64, debug-location !315; cg.c:243:37
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %339
  UpdateRegP: SU(6) %348:fpr64 = FADDDrr %339:fpr64, %347:fpr64, debug-location !315; cg.c:243:37
              to 
  LiveReg: %347
  UpdateRegP: SU(6) %348:fpr64 = FADDDrr %339:fpr64, %347:fpr64, debug-location !315; cg.c:243:37
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 7c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %347:fpr64 = FMULDrr %344:fpr64, %346:fpr64, debug-location !314; cg.c:243:44
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %344
  UpdateRegP: SU(5) %347:fpr64 = FMULDrr %344:fpr64, %346:fpr64, debug-location !314; cg.c:243:44
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 4 3 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %349:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @8c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 3 4 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %339:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %340:gpr64common = LDRSWui %stack.4.j, 0, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
Top Pressure:
GPR32=3
  Ready @0c
  TopQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) %343:gpr64 = UBFMXri %340:gpr64common, 61, 60, debug-location !319; cg.c:244:39
Top Pressure:
GPR32=4
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 4 3 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 11
TopQ.A RemLatency SU(4) 6c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %346:fpr64 = LDRDroX %302:gpr64common, %343:gpr64, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %343
  UpdateRegP: SU(3) %344:fpr64 = LDRDroX %301:gpr64common, %343:gpr64, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(4) %346:fpr64 = LDRDroX %302:gpr64common, %343:gpr64, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %344:fpr64 = LDRDroX %301:gpr64common, %343:gpr64, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
Bottom Pressure:
GPR32=4
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(1):   %340:gpr64common = LDRSWui %stack.4.j, 0, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
SU(2):   %343:gpr64 = UBFMXri %340:gpr64common, 61, 60, debug-location !319; cg.c:244:39
SU(3):   %344:fpr64 = LDRDroX %301:gpr64common, %343:gpr64, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
SU(4):   %346:fpr64 = LDRDroX %302:gpr64common, %343:gpr64, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
SU(0):   %339:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
SU(8):   %349:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
SU(5):   %347:fpr64 = FMULDrr %344:fpr64, %346:fpr64, debug-location !314; cg.c:243:44
SU(6):   %348:fpr64 = FADDDrr %339:fpr64, %347:fpr64, debug-location !315; cg.c:243:37
SU(12):   %352:gpr32common = nsw ADDWri %340.sub_32:gpr64common, 1, 0, debug-location !325; cg.c:242:50
SU(9):   %350:fpr64 = FMULDrr %346:fpr64, %346:fpr64, debug-location !322; cg.c:244:44
SU(10):   %351:fpr64 = FADDDrr %349:fpr64, %350:fpr64, debug-location !323; cg.c:244:37
SU(7):   STRDui %348:fpr64, %stack.9.norm_temp1, 0, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
SU(11):   STRDui %351:fpr64, %stack.10.norm_temp2, 0, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
SU(13):   STRWui %352:gpr32common, %stack.4.j, 0, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50

********** MI Scheduling **********
main:%bb.23 for.end76
  From: %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
    To: Bcc 7, %bb.25, implicit killed $nzcv, debug-location !331; cg.c:247:26
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=4 Reg=%1
  Single Issue       : false;
SU(1):   %390:fpr64 = FSQRTDr %1:fpr64, debug-location !330; cg.c:247:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=%1
  Successors:
    SU(2): Data Latency=1 Reg=%390
  Single Issue       : false;
SU(2):   FCMPDrr %390:fpr64, %390:fpr64, implicit-def $nzcv, debug-location !331; cg.c:247:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%390
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.25, implicit killed $nzcv, debug-location !331; cg.c:247:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDrr %390:fpr64, %390:fpr64, implicit-def $nzcv, debug-location !331; cg.c:247:26
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %390:fpr64 = FSQRTDr %1:fpr64, debug-location !330; cg.c:247:28
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
SU(1):   %390:fpr64 = FSQRTDr %1:fpr64, debug-location !330; cg.c:247:28
SU(2):   FCMPDrr %390:fpr64, %390:fpr64, implicit-def $nzcv, debug-location !331; cg.c:247:26

********** MI Scheduling **********
main:%bb.25 for.end76.split
  From: %318:fpr64 = FDIVDrr %317:fpr64, %390:fpr64, debug-location !331; cg.c:247:26
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %318:fpr64 = FDIVDrr %317:fpr64, %390:fpr64, debug-location !331; cg.c:247:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%318
  Single Issue       : false;
SU(1):   STRDui %318:fpr64, %stack.10.norm_temp2, 0, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%318
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.4.j, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %318:fpr64, %stack.10.norm_temp2, 0, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %318:fpr64 = FDIVDrr %317:fpr64, %390:fpr64, debug-location !331; cg.c:247:26
  Ready @2c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   %318:fpr64 = FDIVDrr %317:fpr64, %390:fpr64, debug-location !331; cg.c:247:26
SU(1):   STRDui %318:fpr64, %stack.10.norm_temp2, 0, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16

********** MI Scheduling **********
main:%bb.26 for.cond78
  From: %320:gpr32 = LDRWui %stack.4.j, 0, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
    To: Bcc 10, %bb.28, implicit killed $nzcv, debug-location !343; cg.c:252:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %320:gpr32 = LDRWui %stack.4.j, 0, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%320
  Single Issue       : false;
SU(1):   %322:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%322
  Single Issue       : false;
SU(2):   %324:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !339 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%324
  Single Issue       : false;
SU(3):   %325:gpr32common = nsw SUBWrr %322:gpr32, %324:gpr32, debug-location !340; cg.c:252:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%324
    SU(1): Data Latency=4 Reg=%322
  Successors:
    SU(4): Data Latency=1 Reg=%325
  Single Issue       : false;
SU(4):   %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !341; cg.c:252:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%325
  Successors:
    SU(5): Data Latency=1 Reg=%326
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %320:gpr32, %326:gpr32common, implicit-def $nzcv, debug-location !343; cg.c:252:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%326
    SU(0): Data Latency=4 Reg=%320
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.28, implicit killed $nzcv, debug-location !343; cg.c:252:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %320:gpr32, %326:gpr32common, implicit-def $nzcv, debug-location !343; cg.c:252:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !341; cg.c:252:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %325:gpr32common = nsw SUBWrr %322:gpr32, %324:gpr32, debug-location !340; cg.c:252:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %320:gpr32 = LDRWui %stack.4.j, 0, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %324:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !339 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %322:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(1):   %322:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
SU(2):   %324:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !339 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
SU(0):   %320:gpr32 = LDRWui %stack.4.j, 0, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
SU(3):   %325:gpr32common = nsw SUBWrr %322:gpr32, %324:gpr32, debug-location !340; cg.c:252:33
SU(4):   %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !341; cg.c:252:44
SU(5):   dead $wzr = SUBSWrr %320:gpr32, %326:gpr32common, implicit-def $nzcv, debug-location !343; cg.c:252:9

********** MI Scheduling **********
main:%bb.27 for.body82
  From: %330:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
    To: B %bb.26, debug-location !353; cg.c:252:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %301 %302 
Live Out: %301 %302 
Live Thru: GPR32=2
  LiveReg: %301
  UpdateRegP: SU(5) STRDroX %336:fpr64, %301:gpr64common, %333:gpr64, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
              to FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %302
  UpdateRegP: SU(3) %335:fpr64 = LDRDroX %302:gpr64common, %333:gpr64, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
SU(0):   %330:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%330
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %331:gpr64common = LDRSWui %stack.4.j, 0, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%331
    SU(2): Data Latency=4 Reg=%331
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %333:gpr64 = UBFMXri %331:gpr64common, 61, 60, debug-location !347; cg.c:253:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%331
  Successors:
    SU(5): Data Latency=1 Reg=%333
    SU(3): Data Latency=1 Reg=%333
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %335:fpr64 = LDRDroX %302:gpr64common, %333:gpr64, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%333
  Successors:
    SU(4): Data Latency=4 Reg=%335
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %336:fpr64 = FMULDrr %330:fpr64, %335:fpr64, debug-location !348; cg.c:253:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%335
    SU(0): Data Latency=4 Reg=%330
  Successors:
    SU(5): Data Latency=1 Reg=%336
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDroX %336:fpr64, %301:gpr64common, %333:gpr64, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%336
    SU(2): Data Latency=1 Reg=%333
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %338:gpr32common = nsw ADDWri %331.sub_32:gpr64common, 1, 0, debug-location !352; cg.c:252:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%331
  Successors:
    SU(7): Data Latency=1 Reg=%338
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWui %338:gpr32common, %stack.4.j, 0, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%338
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.26, debug-location !353; cg.c:252:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %338:gpr32common, %stack.4.j, 0, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
Bottom Pressure:
GPR32=3
  LiveReg: %338
  UpdateRegP: SU(7) STRWui %338:gpr32common, %stack.4.j, 0, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %336:fpr64, %301:gpr64common, %333:gpr64, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %336
  UpdateRegP: SU(5) STRDroX %336:fpr64, %301:gpr64common, %333:gpr64, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
              to GPR32 1
  LiveReg: %333
  UpdateRegP: SU(3) %335:fpr64 = LDRDroX %302:gpr64common, %333:gpr64, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDroX %336:fpr64, %301:gpr64common, %333:gpr64, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %336:fpr64 = FMULDrr %330:fpr64, %335:fpr64, debug-location !348; cg.c:253:31
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %330
  UpdateRegP: SU(4) %336:fpr64 = FMULDrr %330:fpr64, %335:fpr64, debug-location !348; cg.c:253:31
              to 
  LiveReg: %335
  UpdateRegP: SU(4) %336:fpr64 = FMULDrr %330:fpr64, %335:fpr64, debug-location !348; cg.c:253:31
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %338:gpr32common = nsw ADDWri %331.sub_32:gpr64common, 1, 0, debug-location !352; cg.c:252:50
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %331
  UpdateRegP: SU(2) %333:gpr64 = UBFMXri %331:gpr64common, 61, 60, debug-location !347; cg.c:253:33
              to GPR32 -1
  UpdateRegP: SU(6) %338:gpr32common = nsw ADDWri %331.sub_32:gpr64common, 1, 0, debug-location !352; cg.c:252:50
              to GPR32 -1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 6c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %335:fpr64 = LDRDroX %302:gpr64common, %333:gpr64, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @6c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %333:gpr64 = UBFMXri %331:gpr64common, 61, 60, debug-location !347; cg.c:253:33
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @7c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %330:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
Bottom Pressure:
GPR32=3
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %331:gpr64common = LDRSWui %stack.4.j, 0, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
Bottom Pressure:
GPR32=2
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(1):   %331:gpr64common = LDRSWui %stack.4.j, 0, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
SU(0):   %330:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
SU(2):   %333:gpr64 = UBFMXri %331:gpr64common, 61, 60, debug-location !347; cg.c:253:33
SU(3):   %335:fpr64 = LDRDroX %302:gpr64common, %333:gpr64, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
SU(6):   %338:gpr32common = nsw ADDWri %331.sub_32:gpr64common, 1, 0, debug-location !352; cg.c:252:50
SU(4):   %336:fpr64 = FMULDrr %330:fpr64, %335:fpr64, debug-location !348; cg.c:253:31
SU(5):   STRDroX %336:fpr64, %301:gpr64common, %333:gpr64, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
SU(7):   STRWui %338:gpr32common, %stack.4.j, 0, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50

********** MI Scheduling **********
main:%bb.28 for.inc91
  From: %328:gpr32common = LDRWui %stack.6.it, 0, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
    To: B %bb.19, debug-location !357; cg.c:228:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %328:gpr32common = LDRWui %stack.6.it, 0, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%328
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %329:gpr32common = nsw ADDWri %328:gpr32common, 1, 0, debug-location !356; cg.c:228:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%328
  Successors:
    SU(2): Data Latency=1 Reg=%329
  Single Issue       : false;
SU(2):   STRWui %329:gpr32common, %stack.6.it, 0, debug-location !356 :: (store 4 into %ir.it); cg.c:228:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%329
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.19, debug-location !357; cg.c:228:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %329:gpr32common, %stack.6.it, 0, debug-location !356 :: (store 4 into %ir.it); cg.c:228:29
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %329:gpr32common = nsw ADDWri %328:gpr32common, 1, 0, debug-location !356; cg.c:228:29
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %328:gpr32common = LDRWui %stack.6.it, 0, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %328:gpr32common = LDRWui %stack.6.it, 0, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
SU(1):   %329:gpr32common = nsw ADDWri %328:gpr32common, 1, 0, debug-location !356; cg.c:228:29
SU(2):   STRWui %329:gpr32common, %stack.6.it, 0, debug-location !356 :: (store 4 into %ir.it); cg.c:228:29

********** MI Scheduling **********
main:%bb.29 for.end93
  From: STRWui $wzr, %stack.3.i, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %292:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %293:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %293:gpr64 = MOVi64imm 4607182418800017408
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %292:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.3.i, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
SU(1):   %292:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
SU(2):   %293:gpr64 = MOVi64imm 4607182418800017408

********** MI Scheduling **********
main:%bb.30 for.cond94
  From: %94:gpr32 = LDRWui %stack.3.i, 0, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
    To: Bcc 10, %bb.32, implicit killed $nzcv, debug-location !366; cg.c:260:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %94:gpr32 = LDRWui %stack.3.i, 0, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%94
  Single Issue       : false;
SU(1):   %95:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !365; cg.c:260:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=%95
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %94:gpr32, %95:gpr32common, implicit-def $nzcv, debug-location !366; cg.c:260:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%95
    SU(0): Data Latency=4 Reg=%94
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.32, implicit killed $nzcv, debug-location !366; cg.c:260:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %94:gpr32, %95:gpr32common, implicit-def $nzcv, debug-location !366; cg.c:260:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %95:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !365; cg.c:260:19
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %94:gpr32 = LDRWui %stack.3.i, 0, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   %94:gpr32 = LDRWui %stack.3.i, 0, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
SU(1):   %95:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !365; cg.c:260:19
SU(2):   dead $wzr = SUBSWrr %94:gpr32, %95:gpr32common, implicit-def $nzcv, debug-location !366; cg.c:260:5

********** MI Scheduling **********
main:%bb.31 for.body96
  From: %290:gpr64common = LDRSWui %stack.3.i, 0, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
    To: B %bb.30, debug-location !372; cg.c:260:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %290:gpr64common = LDRSWui %stack.3.i, 0, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%290
    SU(1): Data Latency=4 Reg=%290
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRXroX %293:gpr64, %292:gpr64common, %290:gpr64common, 0, 1, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%290
  Single Issue       : false;
SU(2):   %294:gpr32common = nsw ADDWri %290.sub_32:gpr64common, 1, 0, debug-location !371; cg.c:260:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%290
  Successors:
    SU(3): Data Latency=1 Reg=%294
  Single Issue       : false;
SU(3):   STRWui %294:gpr32common, %stack.3.i, 0, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%294
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.30, debug-location !372; cg.c:260:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) %290:gpr64common = LDRSWui %stack.3.i, 0, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 1 
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) STRWui %294:gpr32common, %stack.3.i, 0, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
  Ready @0c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
BotQ.A RemLatency SU(1) 4c
TopQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %294:gpr32common = nsw ADDWri %290.sub_32:gpr64common, 1, 0, debug-location !371; cg.c:260:30
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXroX %293:gpr64, %292:gpr64common, %290:gpr64common, 0, 1, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  Ready @2c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %290:gpr64common = LDRSWui %stack.3.i, 0, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
SU(1):   STRXroX %293:gpr64, %292:gpr64common, %290:gpr64common, 0, 1, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
SU(2):   %294:gpr32common = nsw ADDWri %290.sub_32:gpr64common, 1, 0, debug-location !371; cg.c:260:30
SU(3):   STRWui %294:gpr32common, %stack.3.i, 0, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30

********** MI Scheduling **********
main:%bb.32 for.end101
  From: STRWui %102:gpr32, %stack.6.it, 0, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=4
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %102 
Live Out: %245 %240 %233 %231 %222 %221 %218 %217 %216 %212 
Live Thru: 
  LiveReg: %245
  LiveReg: %240
  LiveReg: %233
  LiveReg: %231
  LiveReg: %222
  LiveReg: %221
  LiveReg: %218
  LiveReg: %217
  LiveReg: %216
  LiveReg: %212
Top Pressure:
GPR32=1
Bottom Pressure:
GPR64temp=3
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Excess PSets: 
SU(0):   STRWui %102:gpr32, %stack.6.it, 0, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(1):   %212:gpr64temp = ADRP target-flags(aarch64-page) @timeron
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(2):   %216:gpr64common = ADDXri %stack.8.rnorm, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %217:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %218:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %221:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %222:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %231:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(8):   %233:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(9):   %239:gpr64temp = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(10): Data Latency=1 Reg=%239
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(10):   %240:fpr64 = LDRDui %239:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(9): Data Latency=1 Reg=%239
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(11):   %244:gpr64temp = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(12): Data Latency=1 Reg=%244
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(12):   %245:fpr64 = LDRDui %244:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(11): Data Latency=1 Reg=%244
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 10 
Queue BotQ.A: 8 7 6 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 11 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %233:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
Bottom Pressure:
GPR64temp=2
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 10 
Queue BotQ.A: 0 7 6 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 11 9 
BotQ.A RemLatency SU(12) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %231:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 10 
Queue BotQ.A: 0 1 6 5 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 9 11 
BotQ.A RemLatency SU(12) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %222:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 11 9 
BotQ.A RemLatency SU(12) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %245:fpr64 = LDRDui %244:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=2
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %244
  UpdateRegP: SU(12) %245:fpr64 = LDRDui %244:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A TopLatency SU(12) 1c
  BotQ.A BotLatency SU(12) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 11 9 
BotQ.A RemLatency SU(10) 1c
  BotQ.A RemainingLatency 1 + 4c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(10) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %240:fpr64 = LDRDui %239:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=3
GPR32=7
  LiveReg: %239
  UpdateRegP: SU(10) %240:fpr64 = LDRDui %239:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A TopLatency SU(10) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 11 9 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %244:gpr64temp = ADRP target-flags(aarch64-page) %const.5
Bottom Pressure:
GPR64temp=2
GPR32=6
  Ready @5c
  BotQ.A BotLatency SU(11) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 9 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %239:gpr64temp = ADRP target-flags(aarch64-page) %const.4
Bottom Pressure:
GPR64temp=1
GPR32=5
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 7c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %221:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
Bottom Pressure:
GPR64temp=1
GPR32=4
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 8c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %218:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
Bottom Pressure:
GPR64temp=1
GPR32=3
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 9c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %217:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
Bottom Pressure:
GPR64temp=1
GPR32=2
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 10c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %216:gpr64common = ADDXri %stack.8.rnorm, 0, 0
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 11c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %212:gpr64temp = ADRP target-flags(aarch64-page) @timeron
Bottom Pressure:

  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %102:gpr32, %stack.6.it, 0, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
Bottom Pressure:
GPR32=1
  LiveReg: %102
  UpdateRegP: SU(0) STRWui %102:gpr32, %stack.6.it, 0, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
              to 
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   STRWui %102:gpr32, %stack.6.it, 0, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
SU(1):   %212:gpr64temp = ADRP target-flags(aarch64-page) @timeron
SU(2):   %216:gpr64common = ADDXri %stack.8.rnorm, 0, 0
SU(3):   %217:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
SU(4):   %218:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
SU(5):   %221:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
SU(9):   %239:gpr64temp = ADRP target-flags(aarch64-page) %const.4
SU(11):   %244:gpr64temp = ADRP target-flags(aarch64-page) %const.5
SU(10):   %240:fpr64 = LDRDui %239:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(12):   %245:fpr64 = LDRDui %244:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(6):   %222:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
SU(7):   %231:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
SU(8):   %233:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

********** MI Scheduling **********
main:%bb.32 for.end101
  From: %102:gpr32 = MOVi32imm 1
    To: BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !379; cg.c:270:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   $w0 = MOVi32imm 1, debug-location !379; cg.c:270:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !379; cg.c:270:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %102:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w0 = MOVi32imm 1, debug-location !379; cg.c:270:5
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(1):   $w0 = MOVi32imm 1, debug-location !379; cg.c:270:5
SU(0):   %102:gpr32 = MOVi32imm 1

********** MI Scheduling **********
main:%bb.32 for.end101
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_9__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !378; cg.c:268:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_9__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %99:fpr64, debug-location !378; cg.c:268:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !378; cg.c:268:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %99:fpr64, debug-location !378; cg.c:268:5
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_9__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_9__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
SU(1):   $d0 = COPY %99:fpr64, debug-location !378; cg.c:268:5

********** MI Scheduling **********
main:%bb.33 for.cond108
  From: %103:gpr32common = LDRWui %stack.6.it, 0, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
    To: Bcc 12, %bb.49, implicit killed $nzcv, debug-location !387; cg.c:279:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %103:gpr32common = LDRWui %stack.6.it, 0, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%103
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %103:gpr32common, 75, 0, implicit-def $nzcv, debug-location !387; cg.c:279:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%103
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.49, implicit killed $nzcv, debug-location !387; cg.c:279:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %103:gpr32common, 75, 0, implicit-def $nzcv, debug-location !387; cg.c:279:5
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %103:gpr32common = LDRWui %stack.6.it, 0, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %103:gpr32common = LDRWui %stack.6.it, 0, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
SU(1):   dead $wzr = SUBSWri %103:gpr32common, 75, 0, implicit-def $nzcv, debug-location !387; cg.c:279:5

********** MI Scheduling **********
main:%bb.36 if.end112
  From: STRXui %216:gpr64common, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
    To: BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit-def $sp, debug-location !393; cg.c:286:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=9
Live In: %218 %217 %216 
Live Out: %218 %217 %216 
Live Thru: GPR32=3
  LiveReg: %218
  UpdateRegP: SU(2) STRXui %218:gpr64, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
              to 
  LiveReg: %217
  UpdateRegP: SU(1) STRXui %217:gpr64, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
              to 
  LiveReg: %216
  UpdateRegP: SU(0) STRXui %216:gpr64common, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
              to 
Top Pressure:
GPR32=3
Bottom Pressure:
GPR32=9
Excess PSets: 
Cluster ld/st SU(2) - SU(1)
SU(0):   STRXui %216:gpr64common, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   STRXui %217:gpr64, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   STRXui %218:gpr64, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
  # preds left       : 0
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit killed $x3, implicit killed $x4, implicit killed $x5, implicit-def $sp, debug-location !393; cg.c:286:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 7 6 5 4 3 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(1) WEAK                               
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot WEAK      
Scheduling SU(1) STRXui %217:gpr64, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
Bottom Pressure:
GPR32=9
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 8 3 4 5 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 8 2 3 4 5 6 7 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(2) STRXui %218:gpr64, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
Bottom Pressure:
GPR32=9
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 8 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 8 7 3 4 5 6 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !393; cg.c:286:9
Bottom Pressure:
GPR32=8
  Ready @2c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 6 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 6 7 3 4 5 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !393; cg.c:286:9
Bottom Pressure:
GPR32=7
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 6 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 6 5 3 4 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !393; cg.c:286:9
Bottom Pressure:
GPR32=6
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 3 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !393; cg.c:286:9
Bottom Pressure:
GPR32=5
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !393; cg.c:286:9
Bottom Pressure:
GPR32=4
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !393; cg.c:286:9
Bottom Pressure:
GPR32=3
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %216:gpr64common, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
Bottom Pressure:
GPR32=3
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   STRXui %216:gpr64common, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
SU(3):   $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !393; cg.c:286:9
SU(4):   $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !393; cg.c:286:9
SU(5):   $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !393; cg.c:286:9
SU(6):   $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !393; cg.c:286:9
SU(7):   $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !393; cg.c:286:9
SU(8):   $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !393; cg.c:286:9
SU(2):   STRXui %218:gpr64, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
SU(1):   STRXui %217:gpr64, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9

********** MI Scheduling **********
main:%bb.38 if.end115
  From: STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.4.j, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
SU(1):   STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
SU(2):   STRWui $wzr, %stack.4.j, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16

********** MI Scheduling **********
main:%bb.39 for.cond116
  From: %230:gpr32 = LDRWui %stack.4.j, 0, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
    To: Bcc 10, %bb.41, implicit killed $nzcv, debug-location !410; cg.c:299:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %230:gpr32 = LDRWui %stack.4.j, 0, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%230
  Single Issue       : false;
SU(1):   %232:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%232
  Single Issue       : false;
SU(2):   %234:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !406 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%234
  Single Issue       : false;
SU(3):   %235:gpr32common = nsw SUBWrr %232:gpr32, %234:gpr32, debug-location !407; cg.c:299:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%234
    SU(1): Data Latency=4 Reg=%232
  Successors:
    SU(4): Data Latency=1 Reg=%235
  Single Issue       : false;
SU(4):   %236:gpr32common = nsw ADDWri %235:gpr32common, 1, 0, debug-location !408; cg.c:299:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%235
  Successors:
    SU(5): Data Latency=1 Reg=%236
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %230:gpr32, %236:gpr32common, implicit-def $nzcv, debug-location !410; cg.c:299:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%236
    SU(0): Data Latency=4 Reg=%230
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.41, implicit killed $nzcv, debug-location !410; cg.c:299:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %230:gpr32, %236:gpr32common, implicit-def $nzcv, debug-location !410; cg.c:299:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %236:gpr32common = nsw ADDWri %235:gpr32common, 1, 0, debug-location !408; cg.c:299:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %235:gpr32common = nsw SUBWrr %232:gpr32, %234:gpr32, debug-location !407; cg.c:299:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %230:gpr32 = LDRWui %stack.4.j, 0, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %234:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !406 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %232:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(1):   %232:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
SU(2):   %234:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !406 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
SU(0):   %230:gpr32 = LDRWui %stack.4.j, 0, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
SU(3):   %235:gpr32common = nsw SUBWrr %232:gpr32, %234:gpr32, debug-location !407; cg.c:299:33
SU(4):   %236:gpr32common = nsw ADDWri %235:gpr32common, 1, 0, debug-location !408; cg.c:299:44
SU(5):   dead $wzr = SUBSWrr %230:gpr32, %236:gpr32common, implicit-def $nzcv, debug-location !410; cg.c:299:9

********** MI Scheduling **********
main:%bb.40 for.body120
  From: %276:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
    To: B %bb.39, debug-location !429; cg.c:299:9
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=4
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %222 %221 
Live Out: %222 %221 
Live Thru: GPR32=2
  LiveReg: %222
  UpdateRegP: SU(4) %283:fpr64 = LDRDroX %222:gpr64common, %280:gpr64, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %221
  UpdateRegP: SU(3) %281:fpr64 = LDRDroX %221:gpr64common, %280:gpr64, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
SU(0):   %276:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%276
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %277:gpr64common = LDRSWui %stack.4.j, 0, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(12): Data Latency=4 Reg=%277
    SU(2): Data Latency=4 Reg=%277
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %280:gpr64 = UBFMXri %277:gpr64common, 61, 60, debug-location !422; cg.c:301:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%277
  Successors:
    SU(4): Data Latency=1 Reg=%280
    SU(3): Data Latency=1 Reg=%280
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %281:fpr64 = LDRDroX %221:gpr64common, %280:gpr64, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%280
  Successors:
    SU(5): Data Latency=4 Reg=%281
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %283:fpr64 = LDRDroX %222:gpr64common, %280:gpr64, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%280
  Successors:
    SU(9): Data Latency=4 Reg=%283
    SU(5): Data Latency=4 Reg=%283
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %284:fpr64 = FMULDrr %281:fpr64, %283:fpr64, debug-location !417; cg.c:300:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%283
    SU(3): Data Latency=4 Reg=%281
  Successors:
    SU(6): Data Latency=1 Reg=%284
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %285:fpr64 = FADDDrr %276:fpr64, %284:fpr64, debug-location !418; cg.c:300:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%284
    SU(0): Data Latency=4 Reg=%276
  Successors:
    SU(7): Data Latency=1 Reg=%285
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   STRDui %285:fpr64, %stack.9.norm_temp1, 0, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%285
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(8):   %286:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !420 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%286
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(9):   %287:fpr64 = FMULDrr %283:fpr64, %283:fpr64, debug-location !425; cg.c:301:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=%283
  Successors:
    SU(10): Data Latency=1 Reg=%287
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %288:fpr64 = FADDDrr %286:fpr64, %287:fpr64, debug-location !426; cg.c:301:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1 Reg=%287
    SU(8): Data Latency=4 Reg=%286
  Successors:
    SU(11): Data Latency=1 Reg=%288
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   STRDui %288:fpr64, %stack.10.norm_temp2, 0, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%288
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(12):   %289:gpr32common = nsw ADDWri %277.sub_32:gpr64common, 1, 0, debug-location !428; cg.c:299:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%277
  Successors:
    SU(13): Data Latency=1 Reg=%289
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   STRWui %289:gpr32common, %stack.4.j, 0, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%289
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.39, debug-location !429; cg.c:299:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) STRWui %289:gpr32common, %stack.4.j, 0, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
Bottom Pressure:
GPR32=3
  LiveReg: %289
  UpdateRegP: SU(13) STRWui %289:gpr32common, %stack.4.j, 0, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 11 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(7) 11c
  BotQ.A RemainingLatency 11 + 1c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) STRDui %288:fpr64, %stack.10.norm_temp2, 0, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %288
  UpdateRegP: SU(11) STRDui %288:fpr64, %stack.10.norm_temp2, 0, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
              to 
  Ready @1c
  BotQ.A TopLatency SU(11) 11c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(7) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 11
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRDui %285:fpr64, %stack.9.norm_temp1, 0, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %285
  UpdateRegP: SU(7) STRDui %285:fpr64, %stack.9.norm_temp1, 0, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
              to 
  Ready @2c
  BotQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 12 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(10) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %288:fpr64 = FADDDrr %286:fpr64, %287:fpr64, debug-location !426; cg.c:301:37
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %286
  UpdateRegP: SU(10) %288:fpr64 = FADDDrr %286:fpr64, %287:fpr64, debug-location !426; cg.c:301:37
              to 
  LiveReg: %287
  UpdateRegP: SU(10) %288:fpr64 = FADDDrr %286:fpr64, %287:fpr64, debug-location !426; cg.c:301:37
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 12 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 10 + 4c > CritPath 11
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(12) REG-MAX                            
  Cand SU(9) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %287:fpr64 = FMULDrr %283:fpr64, %283:fpr64, debug-location !425; cg.c:301:44
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %283
  UpdateRegP: SU(5) %284:fpr64 = FMULDrr %281:fpr64, %283:fpr64, debug-location !417; cg.c:300:44
              to 
  UpdateRegP: SU(9) %287:fpr64 = FMULDrr %283:fpr64, %283:fpr64, debug-location !425; cg.c:301:44
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 10 + 5c > CritPath 11
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(12) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %289:gpr32common = nsw ADDWri %277.sub_32:gpr64common, 1, 0, debug-location !428; cg.c:299:50
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %277
  UpdateRegP: SU(2) %280:gpr64 = UBFMXri %277:gpr64common, 61, 60, debug-location !422; cg.c:301:39
              to GPR32 -1
  UpdateRegP: SU(12) %289:gpr32common = nsw ADDWri %277.sub_32:gpr64common, 1, 0, debug-location !428; cg.c:299:50
              to GPR32 -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %285:fpr64 = FADDDrr %276:fpr64, %284:fpr64, debug-location !418; cg.c:300:37
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %276
  UpdateRegP: SU(6) %285:fpr64 = FADDDrr %276:fpr64, %284:fpr64, debug-location !418; cg.c:300:37
              to 
  LiveReg: %284
  UpdateRegP: SU(6) %285:fpr64 = FADDDrr %276:fpr64, %284:fpr64, debug-location !418; cg.c:300:37
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 5 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 7c > CritPath 11
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %284:fpr64 = FMULDrr %281:fpr64, %283:fpr64, debug-location !417; cg.c:300:44
Bottom Pressure:
FPR8=4
GPR32=3
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %281
  UpdateRegP: SU(5) %284:fpr64 = FMULDrr %281:fpr64, %283:fpr64, debug-location !417; cg.c:300:44
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 4 3 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %286:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !420 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
Bottom Pressure:
FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @8c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 3 4 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %276:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) %277:gpr64common = LDRSWui %stack.4.j, 0, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
Top Pressure:
GPR32=3
  Ready @0c
  TopQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) %280:gpr64 = UBFMXri %277:gpr64common, 61, 60, debug-location !422; cg.c:301:39
Top Pressure:
GPR32=4
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 4 3 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 11
TopQ.A RemLatency SU(4) 6c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %283:fpr64 = LDRDroX %222:gpr64common, %280:gpr64, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %280
  UpdateRegP: SU(3) %281:fpr64 = LDRDroX %221:gpr64common, %280:gpr64, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(4) %283:fpr64 = LDRDroX %222:gpr64common, %280:gpr64, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %281:fpr64 = LDRDroX %221:gpr64common, %280:gpr64, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
Bottom Pressure:
GPR32=4
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(1):   %277:gpr64common = LDRSWui %stack.4.j, 0, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
SU(2):   %280:gpr64 = UBFMXri %277:gpr64common, 61, 60, debug-location !422; cg.c:301:39
SU(3):   %281:fpr64 = LDRDroX %221:gpr64common, %280:gpr64, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
SU(4):   %283:fpr64 = LDRDroX %222:gpr64common, %280:gpr64, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
SU(0):   %276:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
SU(8):   %286:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !420 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
SU(5):   %284:fpr64 = FMULDrr %281:fpr64, %283:fpr64, debug-location !417; cg.c:300:44
SU(6):   %285:fpr64 = FADDDrr %276:fpr64, %284:fpr64, debug-location !418; cg.c:300:37
SU(12):   %289:gpr32common = nsw ADDWri %277.sub_32:gpr64common, 1, 0, debug-location !428; cg.c:299:50
SU(9):   %287:fpr64 = FMULDrr %283:fpr64, %283:fpr64, debug-location !425; cg.c:301:44
SU(10):   %288:fpr64 = FADDDrr %286:fpr64, %287:fpr64, debug-location !426; cg.c:301:37
SU(7):   STRDui %285:fpr64, %stack.9.norm_temp1, 0, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
SU(11):   STRDui %288:fpr64, %stack.10.norm_temp2, 0, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
SU(13):   STRWui %289:gpr32common, %stack.4.j, 0, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50

********** MI Scheduling **********
main:%bb.41 for.end135
  From: %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
    To: Bcc 7, %bb.43, implicit killed $nzcv, debug-location !434; cg.c:304:26
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=4 Reg=%5
  Single Issue       : false;
SU(1):   %391:fpr64 = FSQRTDr %5:fpr64, debug-location !433; cg.c:304:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=%5
  Successors:
    SU(2): Data Latency=1 Reg=%391
  Single Issue       : false;
SU(2):   FCMPDrr %391:fpr64, %391:fpr64, implicit-def $nzcv, debug-location !434; cg.c:304:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%391
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.43, implicit killed $nzcv, debug-location !434; cg.c:304:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDrr %391:fpr64, %391:fpr64, implicit-def $nzcv, debug-location !434; cg.c:304:26
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %391:fpr64 = FSQRTDr %5:fpr64, debug-location !433; cg.c:304:28
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
SU(1):   %391:fpr64 = FSQRTDr %5:fpr64, debug-location !433; cg.c:304:28
SU(2):   FCMPDrr %391:fpr64, %391:fpr64, implicit-def $nzcv, debug-location !434; cg.c:304:26

********** MI Scheduling **********
main:%bb.43 for.end135.split
  From: %241:fpr64 = FDIVDrr %240:fpr64, %391:fpr64, debug-location !434; cg.c:304:26
    To: Bcc 1, %bb.45, implicit killed $nzcv, debug-location !443; cg.c:307:13
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: %245 %240 %391 
Live Out: %245 %240 
Live Thru: FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %245
  UpdateRegP: SU(4) %246:fpr64 = FADDDrr %243:fpr64, %245:fpr64, debug-location !438; cg.c:306:22
              to 
  LiveReg: %240
  UpdateRegP: SU(0) %241:fpr64 = FDIVDrr %240:fpr64, %391:fpr64, debug-location !434; cg.c:304:26
              to 
  UpdateRegP: SU(3) %243:fpr64 = FDIVDrr %240:fpr64, %242:fpr64, debug-location !437; cg.c:306:28
              to 
Top Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Excess PSets: 
SU(0):   %241:fpr64 = FDIVDrr %240:fpr64, %391:fpr64, debug-location !434; cg.c:304:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%241
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   STRDui %241:fpr64, %stack.10.norm_temp2, 0, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%241
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(2):   %242:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%242
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %243:fpr64 = FDIVDrr %240:fpr64, %242:fpr64, debug-location !437; cg.c:306:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%242
  Successors:
    SU(4): Data Latency=1 Reg=%243
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %246:fpr64 = FADDDrr %243:fpr64, %245:fpr64, debug-location !438; cg.c:306:22
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%243
  Successors:
    SU(5): Data Latency=1 Reg=%246
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRDui %246:fpr64, %stack.7.zeta, 0, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%246
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %247:gpr32common = LDRWui %stack.6.it, 0, debug-location !440 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=4 Reg=%247
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   dead $wzr = SUBSWri %247:gpr32common, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%247
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.45, implicit killed $nzcv, debug-location !443; cg.c:307:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) STRDui %246:fpr64, %stack.7.zeta, 0, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %246
  UpdateRegP: SU(5) STRDui %246:fpr64, %stack.7.zeta, 0, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
              to 
  Ready @0c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 7 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) dead $wzr = SUBSWri %247:gpr32common, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %247
  UpdateRegP: SU(7) dead $wzr = SUBSWri %247:gpr32common, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
              to 
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(4) %246:fpr64 = FADDDrr %243:fpr64, %245:fpr64, debug-location !438; cg.c:306:22
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %243
  UpdateRegP: SU(4) %246:fpr64 = FADDDrr %243:fpr64, %245:fpr64, debug-location !438; cg.c:306:22
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
BotQ.A RemLatency SU(3) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(3) %243:fpr64 = FDIVDrr %240:fpr64, %242:fpr64, debug-location !437; cg.c:306:28
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %242
  UpdateRegP: SU(3) %243:fpr64 = FDIVDrr %240:fpr64, %242:fpr64, debug-location !437; cg.c:306:28
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %241:fpr64, %stack.10.norm_temp2, 0, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
Bottom Pressure:
FPR8=4
GPR32=1
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %241
  UpdateRegP: SU(1) STRDui %241:fpr64, %stack.10.norm_temp2, 0, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
              to 
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 6 
  BotQ.A RemainingLatency 2 + 5c > CritPath 6
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %247:gpr32common = LDRWui %stack.6.it, 0, debug-location !440 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
Bottom Pressure:
FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %241:fpr64 = FDIVDrr %240:fpr64, %391:fpr64, debug-location !434; cg.c:304:26
Bottom Pressure:
FPR8=4
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
  LiveReg: %391
  UpdateRegP: SU(0) %241:fpr64 = FDIVDrr %240:fpr64, %391:fpr64, debug-location !434; cg.c:304:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %242:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @7c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.43 ***
SU(2):   %242:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
SU(0):   %241:fpr64 = FDIVDrr %240:fpr64, %391:fpr64, debug-location !434; cg.c:304:26
SU(6):   %247:gpr32common = LDRWui %stack.6.it, 0, debug-location !440 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
SU(1):   STRDui %241:fpr64, %stack.10.norm_temp2, 0, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
SU(3):   %243:fpr64 = FDIVDrr %240:fpr64, %242:fpr64, debug-location !437; cg.c:306:28
SU(4):   %246:fpr64 = FADDDrr %243:fpr64, %245:fpr64, debug-location !438; cg.c:306:22
SU(7):   dead $wzr = SUBSWri %247:gpr32common, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
SU(5):   STRDui %246:fpr64, %stack.7.zeta, 0, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14

********** MI Scheduling **********
main:%bb.45 if.end143
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_11______5d___, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, debug-location !448; cg.c:309:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !448; cg.c:309:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_11______5d___, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %251:gpr32, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %252:fpr64, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %253:fpr64, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !448; cg.c:309:9
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %253:fpr64, debug-location !448; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %252:fpr64, debug-location !448; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %251:gpr32, debug-location !448; cg.c:309:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_11______5d___, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, debug-location !448; cg.c:309:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_11______5d___, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, debug-location !448; cg.c:309:9
SU(1):   $w1 = COPY %251:gpr32, debug-location !448; cg.c:309:9
SU(2):   $d0 = COPY %252:fpr64, debug-location !448; cg.c:309:9
SU(3):   $d1 = COPY %253:fpr64, debug-location !448; cg.c:309:9

********** MI Scheduling **********
main:%bb.45 if.end143
  From: %251:gpr32 = LDRWui %stack.6.it, 0, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !448; cg.c:309:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %251:gpr32 = LDRWui %stack.6.it, 0, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %252:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %253:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !448; cg.c:309:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %253:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %252:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %251:gpr32 = LDRWui %stack.6.it, 0, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   %251:gpr32 = LDRWui %stack.6.it, 0, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
SU(1):   %252:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
SU(2):   %253:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61

********** MI Scheduling **********
main:%bb.46 for.cond145
  From: %257:gpr32 = LDRWui %stack.4.j, 0, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
    To: Bcc 10, %bb.48, implicit killed $nzcv, debug-location !459; cg.c:314:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %257:gpr32 = LDRWui %stack.4.j, 0, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%257
  Single Issue       : false;
SU(1):   %259:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%259
  Single Issue       : false;
SU(2):   %261:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !455 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%261
  Single Issue       : false;
SU(3):   %262:gpr32common = nsw SUBWrr %259:gpr32, %261:gpr32, debug-location !456; cg.c:314:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%261
    SU(1): Data Latency=4 Reg=%259
  Successors:
    SU(4): Data Latency=1 Reg=%262
  Single Issue       : false;
SU(4):   %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !457; cg.c:314:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%262
  Successors:
    SU(5): Data Latency=1 Reg=%263
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %257:gpr32, %263:gpr32common, implicit-def $nzcv, debug-location !459; cg.c:314:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%263
    SU(0): Data Latency=4 Reg=%257
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.48, implicit killed $nzcv, debug-location !459; cg.c:314:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %257:gpr32, %263:gpr32common, implicit-def $nzcv, debug-location !459; cg.c:314:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !457; cg.c:314:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %262:gpr32common = nsw SUBWrr %259:gpr32, %261:gpr32, debug-location !456; cg.c:314:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %257:gpr32 = LDRWui %stack.4.j, 0, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %261:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !455 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %259:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.46 ***
SU(1):   %259:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
SU(2):   %261:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !455 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
SU(0):   %257:gpr32 = LDRWui %stack.4.j, 0, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
SU(3):   %262:gpr32common = nsw SUBWrr %259:gpr32, %261:gpr32, debug-location !456; cg.c:314:33
SU(4):   %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !457; cg.c:314:44
SU(5):   dead $wzr = SUBSWrr %257:gpr32, %263:gpr32common, implicit-def $nzcv, debug-location !459; cg.c:314:9

********** MI Scheduling **********
main:%bb.47 for.body149
  From: %267:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
    To: B %bb.46, debug-location !469; cg.c:314:9
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %221 %222 
Live Out: %221 %222 
Live Thru: GPR32=2
  LiveReg: %221
  UpdateRegP: SU(5) STRDroX %273:fpr64, %221:gpr64common, %270:gpr64, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
              to FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  LiveReg: %222
  UpdateRegP: SU(3) %272:fpr64 = LDRDroX %222:gpr64common, %270:gpr64, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
SU(0):   %267:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%267
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %268:gpr64common = LDRSWui %stack.4.j, 0, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%268
    SU(2): Data Latency=4 Reg=%268
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %270:gpr64 = UBFMXri %268:gpr64common, 61, 60, debug-location !463; cg.c:315:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%268
  Successors:
    SU(5): Data Latency=1 Reg=%270
    SU(3): Data Latency=1 Reg=%270
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %272:fpr64 = LDRDroX %222:gpr64common, %270:gpr64, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%270
  Successors:
    SU(4): Data Latency=4 Reg=%272
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %273:fpr64 = FMULDrr %267:fpr64, %272:fpr64, debug-location !464; cg.c:315:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%272
    SU(0): Data Latency=4 Reg=%267
  Successors:
    SU(5): Data Latency=1 Reg=%273
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   STRDroX %273:fpr64, %221:gpr64common, %270:gpr64, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%273
    SU(2): Data Latency=1 Reg=%270
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %275:gpr32common = nsw ADDWri %268.sub_32:gpr64common, 1, 0, debug-location !468; cg.c:314:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%268
  Successors:
    SU(7): Data Latency=1 Reg=%275
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   STRWui %275:gpr32common, %stack.4.j, 0, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%275
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.46, debug-location !469; cg.c:314:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) STRWui %275:gpr32common, %stack.4.j, 0, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
Bottom Pressure:
GPR32=3
  LiveReg: %275
  UpdateRegP: SU(7) STRWui %275:gpr32common, %stack.4.j, 0, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(5) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRDroX %273:fpr64, %221:gpr64common, %270:gpr64, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %273
  UpdateRegP: SU(5) STRDroX %273:fpr64, %221:gpr64common, %270:gpr64, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
              to GPR32 1
  LiveReg: %270
  UpdateRegP: SU(3) %272:fpr64 = LDRDroX %222:gpr64common, %270:gpr64, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) STRDroX %273:fpr64, %221:gpr64common, %270:gpr64, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
              to 
  Ready @1c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(4) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %273:fpr64 = FMULDrr %267:fpr64, %272:fpr64, debug-location !464; cg.c:315:31
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %267
  UpdateRegP: SU(4) %273:fpr64 = FMULDrr %267:fpr64, %272:fpr64, debug-location !464; cg.c:315:31
              to 
  LiveReg: %272
  UpdateRegP: SU(4) %273:fpr64 = FMULDrr %267:fpr64, %272:fpr64, debug-location !464; cg.c:315:31
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %275:gpr32common = nsw ADDWri %268.sub_32:gpr64common, 1, 0, debug-location !468; cg.c:314:50
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %268
  UpdateRegP: SU(2) %270:gpr64 = UBFMXri %268:gpr64common, 61, 60, debug-location !463; cg.c:315:33
              to GPR32 -1
  UpdateRegP: SU(6) %275:gpr32common = nsw ADDWri %268.sub_32:gpr64common, 1, 0, debug-location !468; cg.c:314:50
              to GPR32 -1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 6c > CritPath 10
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %272:fpr64 = LDRDroX %222:gpr64common, %270:gpr64, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @6c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 7c > CritPath 10
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %270:gpr64 = UBFMXri %268:gpr64common, 61, 60, debug-location !463; cg.c:315:33
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @7c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %267:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
Bottom Pressure:
GPR32=3
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %268:gpr64common = LDRSWui %stack.4.j, 0, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
Bottom Pressure:
GPR32=2
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(1):   %268:gpr64common = LDRSWui %stack.4.j, 0, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
SU(0):   %267:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
SU(2):   %270:gpr64 = UBFMXri %268:gpr64common, 61, 60, debug-location !463; cg.c:315:33
SU(3):   %272:fpr64 = LDRDroX %222:gpr64common, %270:gpr64, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
SU(6):   %275:gpr32common = nsw ADDWri %268.sub_32:gpr64common, 1, 0, debug-location !468; cg.c:314:50
SU(4):   %273:fpr64 = FMULDrr %267:fpr64, %272:fpr64, debug-location !464; cg.c:315:31
SU(5):   STRDroX %273:fpr64, %221:gpr64common, %270:gpr64, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
SU(7):   STRWui %275:gpr32common, %stack.4.j, 0, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50

********** MI Scheduling **********
main:%bb.48 for.inc158
  From: %265:gpr32common = LDRWui %stack.6.it, 0, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
    To: B %bb.33, debug-location !473; cg.c:279:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %265:gpr32common = LDRWui %stack.6.it, 0, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%265
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0, debug-location !472; cg.c:279:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%265
  Successors:
    SU(2): Data Latency=1 Reg=%266
  Single Issue       : false;
SU(2):   STRWui %266:gpr32common, %stack.6.it, 0, debug-location !472 :: (store 4 into %ir.it); cg.c:279:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%266
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.33, debug-location !473; cg.c:279:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %266:gpr32common, %stack.6.it, 0, debug-location !472 :: (store 4 into %ir.it); cg.c:279:33
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0, debug-location !472; cg.c:279:33
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %265:gpr32common = LDRWui %stack.6.it, 0, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %265:gpr32common = LDRWui %stack.6.it, 0, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
SU(1):   %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0, debug-location !472; cg.c:279:33
SU(2):   STRWui %266:gpr32common, %stack.6.it, 0, debug-location !472 :: (store 4 into %ir.it); cg.c:279:33

********** MI Scheduling **********
main:%bb.49 do.end164
  From: %109:gpr64 = MOVi64imm 4457293557087583675
    To: Bcc 0, %bb.53, implicit killed $nzcv, debug-location !484; cg.c:332:9
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %109:gpr64 = MOVi64imm 4457293557087583675
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%109
  Single Issue       : false;
SU(1):   STRXui %109:gpr64, %stack.17.epsilon, 0, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%109
  Single Issue       : false;
SU(2):   %110:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWri %110:gpr32common, 85, 0, implicit-def $nzcv, debug-location !484; cg.c:332:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%110
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.53, implicit killed $nzcv, debug-location !484; cg.c:332:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %109:gpr64, %stack.17.epsilon, 0, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) dead $wzr = SUBSWri %110:gpr32common, 85, 0, implicit-def $nzcv, debug-location !484; cg.c:332:9
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %109:gpr64 = MOVi64imm 4457293557087583675
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %110:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(2):   %110:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
SU(0):   %109:gpr64 = MOVi64imm 4457293557087583675
SU(3):   dead $wzr = SUBSWri %110:gpr32common, 85, 0, implicit-def $nzcv, debug-location !484; cg.c:332:9
SU(1):   STRXui %109:gpr64, %stack.17.epsilon, 0, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13

********** MI Scheduling **********
main:%bb.49 do.end164
  From: %106:fpr64 = COPY $d0, debug-location !477; cg.c:327:9
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !479; cg.c:329:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %106:fpr64 = COPY $d0, debug-location !477; cg.c:327:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%106
  Single Issue       : false;
SU(1):   STRDui %106:fpr64, %stack.11.t, 0, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%106
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !479; cg.c:329:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %106:fpr64, %stack.11.t, 0, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %106:fpr64 = COPY $d0, debug-location !477; cg.c:327:9
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %106:fpr64 = COPY $d0, debug-location !477; cg.c:327:9
SU(1):   STRDui %106:fpr64, %stack.11.t, 0, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7

********** MI Scheduling **********
main:%bb.50 if.then169
  From: %117:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
    To: Bcc 8, %bb.52, implicit killed $nzcv, debug-location !497; cg.c:334:13
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %117:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=4 Reg=%117
  Single Issue       : false;
SU(1):   %118:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%118
    SU(2): Data Latency=4 Reg=%118
  Single Issue       : false;
SU(2):   %119:fpr64 = FABD64 %117:fpr64, %118:fpr64, debug-location !489; cg.c:333:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=%118
    SU(0): Data Latency=4 Reg=%117
  Successors:
    SU(3): Data Latency=1 Reg=%119
  Single Issue       : false;
SU(3):   %120:fpr64 = FDIVDrr %119:fpr64, %118:fpr64, debug-location !491; cg.c:333:46
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%119
    SU(1): Data Latency=4 Reg=%118
  Successors:
    SU(6): Data Latency=1 Reg=%120
    SU(4): Data Latency=1 Reg=%120
  Single Issue       : false;
SU(4):   STRDui %120:fpr64, %stack.18.err, 0, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%120
  Single Issue       : false;
SU(5):   %121:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%121
  Single Issue       : false;
SU(6):   FCMPDrr %120:fpr64, %121:fpr64, implicit-def $nzcv, debug-location !497; cg.c:334:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%120
    SU(5): Data Latency=4 Reg=%121
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 8, %bb.52, implicit killed $nzcv, debug-location !497; cg.c:334:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDui %120:fpr64, %stack.18.err, 0, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
  Ready @0c
  BotQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) FCMPDrr %120:fpr64, %121:fpr64, implicit-def $nzcv, debug-location !497; cg.c:334:13
  Ready @1c
  BotQ.A TopLatency SU(6) 6c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %120:fpr64 = FDIVDrr %119:fpr64, %118:fpr64, debug-location !491; cg.c:333:46
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %119:fpr64 = FABD64 %117:fpr64, %118:fpr64, debug-location !489; cg.c:333:15
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %121:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %118:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
  Ready @7c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %117:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %117:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
SU(1):   %118:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
SU(5):   %121:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
SU(2):   %119:fpr64 = FABD64 %117:fpr64, %118:fpr64, debug-location !489; cg.c:333:15
SU(3):   %120:fpr64 = FDIVDrr %119:fpr64, %118:fpr64, debug-location !491; cg.c:333:46
SU(6):   FCMPDrr %120:fpr64, %121:fpr64, implicit-def $nzcv, debug-location !497; cg.c:334:13
SU(4):   STRDui %120:fpr64, %stack.18.err, 0, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13

********** MI Scheduling **********
main:%bb.51 if.then174
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_15__Error_is_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !504; cg.c:338:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_15__Error_is_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %137:fpr64, debug-location !504; cg.c:338:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !504; cg.c:338:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %137:fpr64, debug-location !504; cg.c:338:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_15__Error_is_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_15__Error_is_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
SU(1):   $d0 = COPY %137:fpr64, debug-location !504; cg.c:338:13

********** MI Scheduling **********
main:%bb.51 if.then174
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_14__Zeta_is__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !502; cg.c:337:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_14__Zeta_is__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %134:fpr64, debug-location !502; cg.c:337:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !502; cg.c:337:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %134:fpr64, debug-location !502; cg.c:337:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_14__Zeta_is__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_14__Zeta_is__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
SU(1):   $d0 = COPY %134:fpr64, debug-location !502; cg.c:337:13

********** MI Scheduling **********
main:%bb.51 if.then174
  From: %131:gpr32 = MOVi32imm 1
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !500; cg.c:336:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %131:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%131
  Single Issue       : false;
SU(1):   STRWui %131:gpr32, %stack.15.verified, 0, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%131
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !500; cg.c:336:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %131:gpr32, %stack.15.verified, 0, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %131:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   %131:gpr32 = MOVi32imm 1
SU(1):   STRWui %131:gpr32, %stack.15.verified, 0, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22

********** MI Scheduling **********
main:%bb.52 if.else178
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_18__The_corre, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !512; cg.c:344:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_18__The_corre, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %128:fpr64, debug-location !512; cg.c:344:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !512; cg.c:344:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %128:fpr64, debug-location !512; cg.c:344:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_18__The_corre, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_18__The_corre, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
SU(1):   $d0 = COPY %128:fpr64, debug-location !512; cg.c:344:13

********** MI Scheduling **********
main:%bb.52 if.else178
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_17__Zeta_____, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !510; cg.c:343:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_17__Zeta_____, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %125:fpr64, debug-location !510; cg.c:343:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !510; cg.c:343:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %125:fpr64, debug-location !510; cg.c:343:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_17__Zeta_____, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_17__Zeta_____, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
SU(1):   $d0 = COPY %125:fpr64, debug-location !510; cg.c:343:13

********** MI Scheduling **********
main:%bb.54 if.end186
  From: %140:fpr64 = LDRDui %stack.11.t, 0, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
    To: Bcc 0, %bb.56, implicit killed $nzcv, debug-location !520; cg.c:353:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %140:fpr64 = LDRDui %stack.11.t, 0, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%140
  Single Issue       : false;
SU(1):   FCMPDri %140:fpr64, implicit-def $nzcv, debug-location !520; cg.c:353:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%140
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 0, %bb.56, implicit killed $nzcv, debug-location !520; cg.c:353:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) FCMPDri %140:fpr64, implicit-def $nzcv, debug-location !520; cg.c:353:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %140:fpr64 = LDRDui %stack.11.t, 0, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   %140:fpr64 = LDRDui %stack.11.t, 0, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
SU(1):   FCMPDri %140:fpr64, implicit-def $nzcv, debug-location !520; cg.c:353:9

********** MI Scheduling **********
main:%bb.55 if.then189
  From: %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
    To: B %bb.57, debug-location !526; cg.c:358:5
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=%142
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %143:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Data Latency=1 Reg=%143
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(2):   %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%143
  Successors:
    SU(3): Data Latency=4 Reg=%144
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %145:fpr64 = FDIVDrr %144:fpr64, %142:fpr64, debug-location !523; cg.c:356:73
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%144
    SU(0): Data Latency=4 Reg=%142
  Successors:
    SU(6): Data Latency=1 Reg=%145
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(4):   %146:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=1 Reg=%146
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(5):   %147:fpr64 = LDRDui %146:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=%146
  Successors:
    SU(6): Data Latency=4 Reg=%147
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(6):   %148:fpr64 = FDIVDrr %145:fpr64, %147:fpr64, debug-location !524; cg.c:357:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%145
    SU(5): Data Latency=4 Reg=%147
  Successors:
    SU(7): Data Latency=1 Reg=%148
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   STRDui %148:fpr64, %stack.12.mflops, 0, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%148
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   B %bb.57, debug-location !526; cg.c:358:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRDui %148:fpr64, %stack.12.mflops, 0, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %148
  UpdateRegP: SU(7) STRDui %148:fpr64, %stack.12.mflops, 0, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
              to 
  Ready @0c
  BotQ.A TopLatency SU(7) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %148:fpr64 = FDIVDrr %145:fpr64, %147:fpr64, debug-location !524; cg.c:357:20
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %145
  UpdateRegP: SU(6) %148:fpr64 = FDIVDrr %145:fpr64, %147:fpr64, debug-location !524; cg.c:357:20
              to 
  LiveReg: %147
  UpdateRegP: SU(6) %148:fpr64 = FDIVDrr %145:fpr64, %147:fpr64, debug-location !524; cg.c:357:20
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %145:fpr64 = FDIVDrr %144:fpr64, %142:fpr64, debug-location !523; cg.c:356:73
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %144
  UpdateRegP: SU(3) %145:fpr64 = FDIVDrr %144:fpr64, %142:fpr64, debug-location !523; cg.c:356:73
              to 
  LiveReg: %142
  UpdateRegP: SU(3) %145:fpr64 = FDIVDrr %144:fpr64, %142:fpr64, debug-location !523; cg.c:356:73
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 0 2 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %147:fpr64 = LDRDui %146:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %146
  UpdateRegP: SU(5) %147:fpr64 = LDRDui %146:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(2) 1c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(4) %146:gpr64temp = ADRP target-flags(aarch64-page) %const.2
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 1c
  BotQ.A RemainingLatency 1 + 7c > CritPath 7
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %143
  UpdateRegP: SU(2) %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 8c > CritPath 7
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %143:gpr64temp = ADRP target-flags(aarch64-page) %const.1
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @8c
  BotQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
Bottom Pressure:

  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
SU(1):   %143:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(2):   %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(4):   %146:gpr64temp = ADRP target-flags(aarch64-page) %const.2
SU(5):   %147:fpr64 = LDRDui %146:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(3):   %145:fpr64 = FDIVDrr %144:fpr64, %142:fpr64, debug-location !523; cg.c:356:73
SU(6):   %148:fpr64 = FDIVDrr %145:fpr64, %147:fpr64, debug-location !524; cg.c:357:20
SU(7):   STRDui %148:fpr64, %stack.12.mflops, 0, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16

********** MI Scheduling **********
main:%bb.57 if.end193
  From: %167:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
    To: CBZW %168:gpr32, %bb.67, debug-location !536; cg.c:370:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %167:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=%167
  Single Issue       : false;
SU(1):   %168:gpr32 = LDRWui %167:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=%167
  Successors:
    ExitSU: Data Latency=4 Reg=%168
  Single Issue       : false;
ExitSU:   CBZW %168:gpr32, %bb.67, debug-location !536; cg.c:370:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%168
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %168:gpr32 = LDRWui %167:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  Ready @4c
  BotQ.A TopLatency SU(1) 1c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %167:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %167:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
SU(1):   %168:gpr32 = LDRWui %167:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9

********** MI Scheduling **********
main:%bb.57 if.end193
  From: %153:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_31_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !533; cg.c:363:5
 RegionInstrs: 29
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=4
GPR32=8
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Live In: %151 %150 %149 %152 
Live Out: %151 %150 %149 %152 
Live Thru: FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %151
  UpdateRegP: SU(28) $d1 = COPY %151:fpr64, debug-location !533; cg.c:363:5
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %150
  UpdateRegP: SU(27) $d0 = COPY %150:fpr64, debug-location !533; cg.c:363:5
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %149
  UpdateRegP: SU(22) $w1 = COPY %149:gpr32, debug-location !533; cg.c:363:5
              to GPR32 -1
  LiveReg: %152
  UpdateRegP: SU(18) STRWui %152:gpr32, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
              to 
Top Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:
FPR8=4
GPR32=8
FPR8+ZPR_3b=4
FPR8+ZPR4_with_zsub1_in_ZPR_3b=4
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=4
FPR8+ZPR4_with_zsub3_in_ZPR_3b=4
ZPR_4b=4
ZPR=4
Excess PSets: 
Cluster ld/st SU(17) - SU(15)
Cluster ld/st SU(13) - SU(11)
Cluster ld/st SU(9) - SU(7)
Cluster ld/st SU(5) - SU(3)
SU(0):   %153:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_31_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%153
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %153:gpr64, $sp, 10, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%153
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_30__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_30__O3__mcmod, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%155
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRXui %155:gpr64, $sp, 9, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%155
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %156:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_29__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_29__g__Wall__, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%156
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXui %156:gpr64, $sp, 8, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%156
  Successors:
    SU(3): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_28__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_28__I___commo, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=1 Reg=%157
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRXui %157:gpr64, $sp, 7, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%157
    SU(9): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_27__lm_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_27__lm_, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=1 Reg=%158
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRXui %158:gpr64, $sp, 6, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%158
  Successors:
    SU(7): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %159:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_26___CC__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_26___CC__, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=1 Reg=%159
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRXui %159:gpr64, $sp, 5, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%159
    SU(13): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_25_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_25_gcc_, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%160
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRXui %160:gpr64, $sp, 4, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%160
  Successors:
    SU(11): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_24_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_24_03_Nov_201, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=%161
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   STRXui %161:gpr64, $sp, 3, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%161
    SU(17): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(16):   %162:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_23_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_23_3_3_1_, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(17): Data Latency=1 Reg=%162
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRXui %162:gpr64, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%162
  Successors:
    SU(15): Ord  Latency=0 Cluster
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(18):   STRWui %152:gpr32, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(19):   %163:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_22___________, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_22___________, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(20): Data Latency=1 Reg=%163
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(20):   STRXui %163:gpr64, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%163
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_21_CG_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_21_CG_, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(22):   $w1 = COPY %149:gpr32, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(23):   $w2 = MOVi32imm 75000, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(24):   $w3 = COPY $wzr, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(25):   $w4 = COPY $wzr, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(26):   $w5 = MOVi32imm 75, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(27):   $d0 = COPY %150:fpr64, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(28):   $d1 = COPY %151:fpr64, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit killed $w3, implicit killed $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !533; cg.c:363:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(28): Ord  Latency=0 Artificial
    SU(27): Ord  Latency=0 Artificial
    SU(26): Ord  Latency=1 Artificial
    SU(25): Ord  Latency=0 Artificial
    SU(24): Ord  Latency=0 Artificial
    SU(23): Ord  Latency=1 Artificial
    SU(22): Ord  Latency=0 Artificial
    SU(21): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 28 27 25 24 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 28 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(28) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(24) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(28) $d1 = COPY %151:fpr64, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=3
GPR32=8
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 27 25 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 27 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(27) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(27) $d0 = COPY %150:fpr64, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 24 25 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 25 26 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(22) PHYS-REG                           
  Cand SU(24) ORDER                              
  Cand SU(25) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(25) $w4 = COPY $wzr, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 24 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 24 26 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
  Cand SU(24) ORDER                              
Picking from Top:
  Cand SU(24) NOCAND                             
Pick Bot ORDER     
Scheduling SU(24) $w3 = COPY $wzr, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 22 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 22 23 26 
Picking from Bot:
  Cand SU(20) ORDER                              
  Cand SU(22) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(22) $w1 = COPY %149:gpr32, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 26 23 21 
Queue BotQ.A: 20 18 17 15 13 11 9 7 5 3 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 26 23 
Picking from Bot:
  Cand SU(20) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(20) STRXui %163:gpr64, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %163
  UpdateRegP: SU(20) STRXui %163:gpr64, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 26 21 23 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 26 23 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(26) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(26) $w5 = MOVi32imm 75, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @1c
  BotQ.A BotLatency SU(26) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 23 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 23 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(23) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(23) $w2 = MOVi32imm 75000, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 15 13 11 9 7 5 3 19 21 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(15) STRXui %161:gpr64, $sp, 3, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %161
  UpdateRegP: SU(15) STRXui %161:gpr64, $sp, 3, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
              to 
  Ready @3c
  BotQ.A TopLatency SU(15) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 17 21 13 11 9 7 5 3 19 14 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(17) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(17) STRXui %162:gpr64, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %162
  UpdateRegP: SU(17) STRXui %162:gpr64, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
              to 
  Ready @4c
  BotQ.A TopLatency SU(17) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 11 9 7 5 3 19 16 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(11) STRXui %159:gpr64, $sp, 5, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %159
  UpdateRegP: SU(11) STRXui %159:gpr64, $sp, 5, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
              to 
  Ready @5c
  BotQ.A TopLatency SU(11) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 13 16 9 7 5 3 19 10 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(13) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(13) STRXui %160:gpr64, $sp, 4, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %160
  UpdateRegP: SU(13) STRXui %160:gpr64, $sp, 4, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
              to 
  Ready @6c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 21 10 16 9 7 5 3 19 12 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 21 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(21) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_21_CG_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_21_CG_, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 7 5 3 19 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(7) STRXui %157:gpr64, $sp, 7, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %157
  UpdateRegP: SU(7) STRXui %157:gpr64, $sp, 7, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
              to 
  Ready @8c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 9 19 5 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(9) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(9) STRXui %158:gpr64, $sp, 6, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %158
  UpdateRegP: SU(9) STRXui %158:gpr64, $sp, 6, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
              to 
  Ready @9c
  BotQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 19 5 3 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 19 
  BotQ.A RemainingLatency 0 + 10c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(19) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(19) %163:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_22___________, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_22___________, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 11c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %155:gpr64, $sp, 9, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %155
  UpdateRegP: SU(3) STRXui %155:gpr64, $sp, 9, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
              to 
  Ready @11c
  BotQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 12c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
  Cand SU(5) CLUSTER                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %156:gpr64, $sp, 8, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %156
  UpdateRegP: SU(5) STRXui %156:gpr64, $sp, 8, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
              to 
  Ready @12c
  BotQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 18 14 12 10 16 6 8 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 18 
  BotQ.A RemainingLatency 0 + 13c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(18) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(18) STRWui %152:gpr32, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 16 6 8 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 16 
  BotQ.A RemainingLatency 0 + 14c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) REG-MAX                            
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %162:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_23_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_23_3_3_1_, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 14 12 10 2 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 15c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %153:gpr64, $sp, 10, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=10
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %153
  UpdateRegP: SU(1) STRXui %153:gpr64, $sp, 10, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
              to 
  Ready @15c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 14 12 10 2 6 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 14 
  BotQ.A RemainingLatency 0 + 16c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %161:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_24_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_24_03_Nov_201, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=9
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 12 10 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  BotQ.A RemainingLatency 0 + 17c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %160:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_25_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_25_gcc_, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=8
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 10 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 
  BotQ.A RemainingLatency 0 + 18c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %159:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_26___CC__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_26___CC__, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=7
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 4 0 6 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 
  BotQ.A RemainingLatency 0 + 19c > CritPath 1
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %158:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_27__lm_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_27__lm_, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 6 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 
  BotQ.A RemainingLatency 0 + 20c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %157:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_28__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_28__I___commo, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  BotQ.A RemainingLatency 0 + 21c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %156:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_29__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_29__g__Wall__, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 22c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %155:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_30__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_30__O3__mcmod, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %153:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_31_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %153:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_31_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
SU(2):   %155:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_30__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_30__O3__mcmod, debug-location !533; cg.c:363:5
SU(4):   %156:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_29__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_29__g__Wall__, debug-location !533; cg.c:363:5
SU(6):   %157:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_28__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_28__I___commo, debug-location !533; cg.c:363:5
SU(8):   %158:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_27__lm_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_27__lm_, debug-location !533; cg.c:363:5
SU(10):   %159:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_26___CC__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_26___CC__, debug-location !533; cg.c:363:5
SU(12):   %160:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_25_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_25_gcc_, debug-location !533; cg.c:363:5
SU(14):   %161:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_24_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_24_03_Nov_201, debug-location !533; cg.c:363:5
SU(1):   STRXui %153:gpr64, $sp, 10, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
SU(16):   %162:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_23_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_23_3_3_1_, debug-location !533; cg.c:363:5
SU(18):   STRWui %152:gpr32, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
SU(5):   STRXui %156:gpr64, $sp, 8, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
SU(3):   STRXui %155:gpr64, $sp, 9, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
SU(19):   %163:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_22___________, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_22___________, debug-location !533; cg.c:363:5
SU(9):   STRXui %158:gpr64, $sp, 6, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
SU(7):   STRXui %157:gpr64, $sp, 7, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
SU(21):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_21_CG_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_21_CG_, debug-location !533; cg.c:363:5
SU(13):   STRXui %160:gpr64, $sp, 4, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
SU(11):   STRXui %159:gpr64, $sp, 5, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
SU(17):   STRXui %162:gpr64, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
SU(15):   STRXui %161:gpr64, $sp, 3, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
SU(23):   $w2 = MOVi32imm 75000, debug-location !533; cg.c:363:5
SU(26):   $w5 = MOVi32imm 75, debug-location !533; cg.c:363:5
SU(20):   STRXui %163:gpr64, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5
SU(22):   $w1 = COPY %149:gpr32, debug-location !533; cg.c:363:5
SU(24):   $w3 = COPY $wzr, debug-location !533; cg.c:363:5
SU(25):   $w4 = COPY $wzr, debug-location !533; cg.c:363:5
SU(27):   $d0 = COPY %150:fpr64, debug-location !533; cg.c:363:5
SU(28):   $d1 = COPY %151:fpr64, debug-location !533; cg.c:363:5

********** MI Scheduling **********
main:%bb.57 if.end193
  From: %149:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
    To: ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp, debug-location !533; cg.c:363:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %149:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %150:fpr64 = LDRDui %stack.11.t, 0, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %151:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(3):   %152:gpr32 = LDRWui %stack.15.verified, 0, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp, debug-location !533; cg.c:363:5
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %152:gpr32 = LDRWui %stack.15.verified, 0, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %151:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %150:fpr64 = LDRDui %stack.11.t, 0, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %149:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %149:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
SU(1):   %150:fpr64 = LDRDui %stack.11.t, 0, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
SU(2):   %151:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
SU(3):   %152:gpr32 = LDRWui %stack.15.verified, 0, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47

********** MI Scheduling **********
main:%bb.58 if.then195
  From: %170:fpr64 = COPY $d0, debug-location !537; cg.c:371:16
    To: Bcc 1, %bb.60, implicit killed $nzcv, debug-location !543; cg.c:372:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %170:fpr64 = COPY $d0, debug-location !537; cg.c:371:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=0 Reg=%170
    SU(1): Data Latency=0 Reg=%170
  Single Issue       : false;
SU(1):   STRDui %170:fpr64, %stack.13.tmax, 0, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%170
  Single Issue       : false;
SU(2):   FCMPDri %170:fpr64, implicit-def $nzcv, debug-location !543; cg.c:372:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%170
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.60, implicit killed $nzcv, debug-location !543; cg.c:372:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %170:fpr64, %stack.13.tmax, 0, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDri %170:fpr64, implicit-def $nzcv, debug-location !543; cg.c:372:13
  Ready @1c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %170:fpr64 = COPY $d0, debug-location !537; cg.c:371:16
  Ready @2c
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %170:fpr64 = COPY $d0, debug-location !537; cg.c:371:16
SU(2):   FCMPDri %170:fpr64, implicit-def $nzcv, debug-location !543; cg.c:372:13
SU(1):   STRDui %170:fpr64, %stack.13.tmax, 0, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14

********** MI Scheduling **********
main:%bb.59 if.then199
  From: %171:gpr64 = MOVi64imm 4607182418800017408
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %171:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%171
  Single Issue       : false;
SU(1):   STRXui %171:gpr64, %stack.13.tmax, 0, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%171
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRXui %171:gpr64, %stack.13.tmax, 0, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %171:gpr64 = MOVi64imm 4607182418800017408
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %171:gpr64 = MOVi64imm 4607182418800017408
SU(1):   STRXui %171:gpr64, %stack.13.tmax, 0, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18

********** MI Scheduling **********
main:%bb.60 if.end200
  From: STRWui $wzr, %stack.3.i, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %205:gpr64sp = ADDXri %stack.19.t_names, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %185:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1 Reg=%185
  Single Issue       : false;
SU(3):   %186:fpr64 = LDRDui %185:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(2): Data Latency=1 Reg=%185
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %205:gpr64sp = ADDXri %stack.19.t_names, 0, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.3.i, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %186:fpr64 = LDRDui %185:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @3c
  BotQ.A TopLatency SU(3) 1c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %185:gpr64temp = ADRP target-flags(aarch64-page) %const.3
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(2):   %185:gpr64temp = ADRP target-flags(aarch64-page) %const.3
SU(3):   %186:fpr64 = LDRDui %185:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(0):   STRWui $wzr, %stack.3.i, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
SU(1):   %205:gpr64sp = ADDXri %stack.19.t_names, 0, 0

********** MI Scheduling **********
main:%bb.61 for.cond202
  From: %175:gpr32common = LDRWui %stack.3.i, 0, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
    To: Bcc 12, %bb.67, implicit killed $nzcv, debug-location !553; cg.c:375:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %175:gpr32common = LDRWui %stack.3.i, 0, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%175
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %175:gpr32common, 2, 0, implicit-def $nzcv, debug-location !553; cg.c:375:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%175
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.67, implicit killed $nzcv, debug-location !553; cg.c:375:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %175:gpr32common, 2, 0, implicit-def $nzcv, debug-location !553; cg.c:375:9
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %175:gpr32common = LDRWui %stack.3.i, 0, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   %175:gpr32common = LDRWui %stack.3.i, 0, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
SU(1):   dead $wzr = SUBSWri %175:gpr32common, 2, 0, implicit-def $nzcv, debug-location !553; cg.c:375:9

********** MI Scheduling **********
main:%bb.62 for.body205
  From: %179:fpr64 = COPY $d0, debug-location !556; cg.c:376:17
    To: CBNZW %180:gpr32, %bb.64, debug-location !561; cg.c:377:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %179:fpr64 = COPY $d0, debug-location !556; cg.c:376:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%179
  Single Issue       : false;
SU(1):   STRDui %179:fpr64, %stack.11.t, 0, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%179
  Single Issue       : false;
SU(2):   %180:gpr32 = LDRWui %stack.3.i, 0, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Data Latency=4 Reg=%180
  Single Issue       : false;
ExitSU:   CBNZW %180:gpr32, %bb.64, debug-location !561; cg.c:377:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%180
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %179:fpr64, %stack.11.t, 0, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %179:fpr64 = COPY $d0, debug-location !556; cg.c:376:17
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %180:gpr32 = LDRWui %stack.3.i, 0, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(2):   %180:gpr32 = LDRWui %stack.3.i, 0, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
SU(0):   %179:fpr64 = COPY $d0, debug-location !556; cg.c:376:17
SU(1):   STRDui %179:fpr64, %stack.11.t, 0, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15

********** MI Scheduling **********
main:%bb.63 if.then209
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_33____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !566; cg.c:378:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_33____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %206:gpr64, debug-location !566; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %207:fpr64, debug-location !566; cg.c:378:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !566; cg.c:378:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %207:fpr64, debug-location !566; cg.c:378:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = COPY %206:gpr64, debug-location !566; cg.c:378:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_33____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_33____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
SU(1):   $x1 = COPY %206:gpr64, debug-location !566; cg.c:378:17
SU(2):   $d0 = COPY %207:fpr64, debug-location !566; cg.c:378:17

********** MI Scheduling **********
main:%bb.63 if.then209
  From: %204:gpr64 = LDRSWui %stack.3.i, 0, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !566; cg.c:378:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %204:gpr64 = LDRSWui %stack.3.i, 0, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%204
  Single Issue       : false;
SU(1):   %206:gpr64 = LDRXroX %205:gpr64sp, %204:gpr64, 0, 1, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%204
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %207:fpr64 = LDRDui %stack.11.t, 0, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !566; cg.c:378:17
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %207:fpr64 = LDRDui %stack.11.t, 0, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %206:gpr64 = LDRXroX %205:gpr64sp, %204:gpr64, 0, 1, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  Ready @4c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %204:gpr64 = LDRSWui %stack.3.i, 0, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  Ready @8c
  BotQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   %204:gpr64 = LDRSWui %stack.3.i, 0, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
SU(1):   %206:gpr64 = LDRXroX %205:gpr64sp, %204:gpr64, 0, 1, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
SU(2):   %207:fpr64 = LDRDui %stack.11.t, 0, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53

********** MI Scheduling **********
main:%bb.64 if.else213
  From: %192:gpr32common = LDRWui %stack.3.i, 0, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
    To: Bcc 1, %bb.66, implicit killed $nzcv, debug-location !580; cg.c:383:21
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %192:gpr32common = LDRWui %stack.3.i, 0, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%192
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %192:gpr32common, 2, 0, implicit-def $nzcv, debug-location !580; cg.c:383:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%192
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.66, implicit killed $nzcv, debug-location !580; cg.c:383:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %192:gpr32common, 2, 0, implicit-def $nzcv, debug-location !580; cg.c:383:21
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %192:gpr32common = LDRWui %stack.3.i, 0, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %192:gpr32common = LDRWui %stack.3.i, 0, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
SU(1):   dead $wzr = SUBSWri %192:gpr32common, 2, 0, implicit-def $nzcv, debug-location !580; cg.c:383:21

********** MI Scheduling **********
main:%bb.64 if.else213
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_34____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !576; cg.c:381:17
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_34____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = COPY %183:gpr64, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %184:fpr64, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %189:fpr64, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !576; cg.c:381:17
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %189:fpr64, debug-location !576; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(2) $d0 = COPY %184:fpr64, debug-location !576; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = COPY %183:gpr64, debug-location !576; cg.c:381:17
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_34____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_34____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
SU(1):   $x1 = COPY %183:gpr64, debug-location !576; cg.c:381:17
SU(2):   $d0 = COPY %184:fpr64, debug-location !576; cg.c:381:17
SU(3):   $d1 = COPY %189:fpr64, debug-location !576; cg.c:381:17

********** MI Scheduling **********
main:%bb.64 if.else213
  From: %181:gpr64 = LDRSWui %stack.3.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !576; cg.c:381:17
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %181:gpr64 = LDRSWui %stack.3.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(1): Data Latency=4 Reg=%181
  Single Issue       : false;
SU(1):   %183:gpr64 = LDRXroX %205:gpr64sp, %181:gpr64, 0, 1, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(0): Data Latency=4 Reg=%181
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %184:fpr64 = LDRDui %stack.11.t, 0, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%184
  Single Issue       : false;
SU(3):   %187:fpr64 = FMULDrr %184:fpr64, %186:fpr64, debug-location !573; cg.c:382:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%184
  Successors:
    SU(5): Data Latency=1 Reg=%187
  Single Issue       : false;
SU(4):   %188:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=4 Reg=%188
  Single Issue       : false;
SU(5):   %189:fpr64 = FDIVDrr %187:fpr64, %188:fpr64, debug-location !575; cg.c:382:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%187
    SU(4): Data Latency=4 Reg=%188
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !576; cg.c:381:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %189:fpr64 = FDIVDrr %187:fpr64, %188:fpr64, debug-location !575; cg.c:382:34
  Ready @0c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %187:fpr64 = FMULDrr %184:fpr64, %186:fpr64, debug-location !573; cg.c:382:26
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 2 4 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %183:gpr64 = LDRXroX %205:gpr64sp, %181:gpr64, 0, 1, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  Ready @3c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %188:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %184:fpr64 = LDRDui %stack.11.t, 0, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %181:gpr64 = LDRSWui %stack.3.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  Ready @7c
  BotQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   %181:gpr64 = LDRSWui %stack.3.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
SU(2):   %184:fpr64 = LDRDui %stack.11.t, 0, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
SU(4):   %188:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
SU(1):   %183:gpr64 = LDRXroX %205:gpr64sp, %181:gpr64, 0, 1, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
SU(3):   %187:fpr64 = FMULDrr %184:fpr64, %186:fpr64, debug-location !573; cg.c:382:26
SU(5):   %189:fpr64 = FDIVDrr %187:fpr64, %188:fpr64, debug-location !575; cg.c:382:34

********** MI Scheduling **********
main:%bb.65 if.then221
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_35__________8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, debug-location !591; cg.c:385:21
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !591; cg.c:385:21
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_35__________8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @cg__str_36_rest_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_36_rest_, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $d0 = COPY %196:fpr64, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $d1 = COPY %200:fpr64, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !591; cg.c:385:21
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(3) $d1 = COPY %200:fpr64, debug-location !591; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) $d0 = COPY %196:fpr64, debug-location !591; cg.c:385:21
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) $x1 = MOVaddr target-flags(aarch64-page) @cg__str_36_rest_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_36_rest_, debug-location !591; cg.c:385:21
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_35__________8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, debug-location !591; cg.c:385:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_35__________8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, debug-location !591; cg.c:385:21
SU(1):   $x1 = MOVaddr target-flags(aarch64-page) @cg__str_36_rest_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_36_rest_, debug-location !591; cg.c:385:21
SU(2):   $d0 = COPY %196:fpr64, debug-location !591; cg.c:385:21
SU(3):   $d1 = COPY %200:fpr64, debug-location !591; cg.c:385:21

********** MI Scheduling **********
main:%bb.65 if.then221
  From: %194:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !591; cg.c:385:21
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %194:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=4 Reg=%194
    SU(2): Data Latency=4 Reg=%194
  Single Issue       : false;
SU(1):   %195:fpr64 = LDRDui %stack.11.t, 0, debug-location !583 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%195
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !584; cg.c:384:30
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%195
    SU(0): Data Latency=4 Reg=%194
  Successors:
    SU(4): Data Latency=1 Reg=%196
    SU(3): Data Latency=1 Reg=%196
  Single Issue       : false;
SU(3):   STRDui %196:fpr64, %stack.11.t, 0, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%196
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %199:fpr64 = FMULDrr %196:fpr64, %186:fpr64, debug-location !588; cg.c:386:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%196
  Successors:
    SU(5): Data Latency=1 Reg=%199
  Single Issue       : false;
SU(5):   %200:fpr64 = FDIVDrr %199:fpr64, %194:fpr64, debug-location !590; cg.c:386:38
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%199
    SU(0): Data Latency=4 Reg=%194
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %200:fpr64 = FDIVDrr %199:fpr64, %194:fpr64, debug-location !590; cg.c:386:38
  Ready @0c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %199:fpr64 = FMULDrr %196:fpr64, %186:fpr64, debug-location !588; cg.c:386:30
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %196:fpr64, %stack.11.t, 0, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
  Ready @2c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !584; cg.c:384:30
  Ready @3c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %195:fpr64 = LDRDui %stack.11.t, 0, debug-location !583 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  Ready @7c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %194:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   %194:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
SU(1):   %195:fpr64 = LDRDui %stack.11.t, 0, debug-location !583 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
SU(2):   %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !584; cg.c:384:30
SU(3):   STRDui %196:fpr64, %stack.11.t, 0, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
SU(4):   %199:fpr64 = FMULDrr %196:fpr64, %186:fpr64, debug-location !588; cg.c:386:30
SU(5):   %200:fpr64 = FDIVDrr %199:fpr64, %194:fpr64, debug-location !590; cg.c:386:38

********** MI Scheduling **********
main:%bb.66 for.inc228
  From: %210:gpr32common = LDRWui %stack.3.i, 0, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
    To: B %bb.61, debug-location !594; cg.c:375:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %210:gpr32common = LDRWui %stack.3.i, 0, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%210
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0, debug-location !593; cg.c:375:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%210
  Successors:
    SU(2): Data Latency=1 Reg=%211
  Single Issue       : false;
SU(2):   STRWui %211:gpr32common, %stack.3.i, 0, debug-location !593 :: (store 4 into %ir.i); cg.c:375:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%211
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.61, debug-location !594; cg.c:375:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %211:gpr32common, %stack.3.i, 0, debug-location !593 :: (store 4 into %ir.i); cg.c:375:34
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0, debug-location !593; cg.c:375:34
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %210:gpr32common = LDRWui %stack.3.i, 0, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   %210:gpr32common = LDRWui %stack.3.i, 0, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
SU(1):   %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0, debug-location !593; cg.c:375:34
SU(2):   STRWui %211:gpr32common, %stack.3.i, 0, debug-location !593 :: (store 4 into %ir.i); cg.c:375:34

********** INTERVALS **********
WSP [240r,240d:4)[272r,272d:3)[288r,288d:2)[304r,304d:1)[336r,336d:0)[432r,432d:199)[512r,512d:198)[528r,528d:197)[544r,544d:196)[576r,576d:195)[848r,848d:194)[864r,864d:193)[880r,880d:192)[896r,896d:191)[928r,928d:190)[1072r,1072d:189)[1120r,1120d:188)[1136r,1136d:187)[1152r,1152d:186)[1184r,1184d:185)[1408r,1408d:184)[1456r,1456d:183)[1472r,1472d:182)[1488r,1488d:181)[1520r,1520d:180)[1536r,1536d:179)[1600r,1600d:178)[1616r,1616d:177)[1632r,1632d:176)[1664r,1664d:175)[1680r,1680d:174)[1760r,1760d:173)[1776r,1776d:172)[1792r,1792d:171)[1824r,1824d:170)[1840r,1840d:169)[1888r,1888d:168)[1904r,1904d:167)[1920r,1920d:166)[1952r,1952d:165)[2144r,2144d:164)[2224r,2224d:163)[2240r,2240d:162)[2256r,2256d:161)[2288r,2288d:160)[2432r,2432d:159)[2824r,2824d:158)[2832r,2832d:157)[2840r,2840d:156)[2856r,2856d:155)[4624r,4624d:14)[4800r,4800d:13)[4816r,4816d:12)[4832r,4832d:11)[4864r,4864d:10)[5504r,5504d:9)[5536r,5536d:8)[5552r,5552d:7)[5648r,5648d:6)[5680r,5680d:5)[6496r,6496d:154)[6544r,6544d:153)[6560r,6560d:152)[6576r,6576d:151)[6608r,6608d:150)[6624r,6624d:149)[6656r,6656d:148)[6672r,6672d:147)[6688r,6688d:146)[6720r,6720d:145)[6752r,6752d:144)[6816r,6816d:143)[6832r,6832d:142)[6848r,6848d:141)[6880r,6880d:140)[6896r,6896d:139)[6944r,6944d:138)[6960r,6960d:137)[6976r,6976d:136)[7008r,7008d:135)[7504r,7504d:44)[7536r,7536d:43)[7552r,7552d:42)[7568r,7568d:41)[7600r,7600d:40)[7632r,7632d:39)[7808r,7808d:38)[7824r,7824d:37)[7840r,7840d:36)[7872r,7872d:35)[7952r,7952d:34)[7984r,7984d:33)[8000r,8000d:32)[8016r,8016d:31)[8048r,8048d:30)[8704r,8704d:29)[8736r,8736d:28)[8752r,8752d:27)[8848r,8848d:26)[8880r,8880d:25)[9072r,9072d:24)[9104r,9104d:23)[9120r,9120d:22)[9136r,9136d:21)[9168r,9168d:20)[9248r,9248d:19)[9328r,9328d:18)[9344r,9344d:17)[9360r,9360d:16)[9392r,9392d:15)[9856r,9856d:134)[9904r,9904d:133)[9920r,9920d:132)[9936r,9936d:131)[9968r,9968d:130)[9984r,9984d:129)[10016r,10016d:128)[10032r,10032d:127)[10048r,10048d:126)[10080r,10080d:125)[10128r,10128d:124)[10176r,10176d:123)[10192r,10192d:122)[10208r,10208d:121)[10240r,10240d:120)[10560r,10560d:94)[10608r,10608d:93)[10624r,10624d:92)[10640r,10640d:91)[10672r,10672d:90)[10704r,10704d:89)[10768r,10768d:88)[10784r,10784d:87)[10800r,10800d:86)[10832r,10832d:85)[10864r,10864d:84)[10928r,10928d:83)[10944r,10944d:82)[10960r,10960d:81)[10992r,10992d:80)[11072r,11072d:109)[11120r,11120d:108)[11136r,11136d:107)[11152r,11152d:106)[11184r,11184d:105)[11216r,11216d:104)[11280r,11280d:103)[11296r,11296d:102)[11312r,11312d:101)[11344r,11344d:100)[11376r,11376d:99)[11440r,11440d:98)[11456r,11456d:97)[11472r,11472d:96)[11504r,11504d:95)[11584r,11584d:119)[11632r,11632d:118)[11648r,11648d:117)[11664r,11664d:116)[11696r,11696d:115)[11712r,11712d:114)[11760r,11760d:113)[11776r,11776d:112)[11792r,11792d:111)[11824r,11824d:110)[12208r,12208d:79)[12752r,12752d:78)[12768r,12768d:77)[12784r,12784d:76)[12816r,12816d:75)[12912r,12912d:74)[12960r,12960d:73)[12976r,12976d:72)[12992r,12992d:71)[13024r,13024d:70)[13184r,13184d:69)[13232r,13232d:68)[13248r,13248d:67)[13264r,13264d:66)[13296r,13296d:65)[13568r,13568d:64)[13600r,13600d:63)[13616r,13616d:62)[13632r,13632d:61)[13664r,13664d:60)[13824r,13824d:49)[13888r,13888d:48)[13904r,13904d:47)[13920r,13920d:46)[13952r,13952d:45)[14096r,14096d:59)[14176r,14176d:58)[14192r,14192d:57)[14208r,14208d:56)[14240r,14240d:55)[14432r,14432d:54)[14512r,14512d:53)[14528r,14528d:52)[14544r,14544d:51)[14576r,14576d:50)  0@336r 1@304r 2@288r 3@272r 4@240r 5@5680r 6@5648r 7@5552r 8@5536r 9@5504r 10@4864r 11@4832r 12@4816r 13@4800r 14@4624r 15@9392r 16@9360r 17@9344r 18@9328r 19@9248r 20@9168r 21@9136r 22@9120r 23@9104r 24@9072r 25@8880r 26@8848r 27@8752r 28@8736r 29@8704r 30@8048r 31@8016r 32@8000r 33@7984r 34@7952r 35@7872r 36@7840r 37@7824r 38@7808r 39@7632r 40@7600r 41@7568r 42@7552r 43@7536r 44@7504r 45@13952r 46@13920r 47@13904r 48@13888r 49@13824r 50@14576r 51@14544r 52@14528r 53@14512r 54@14432r 55@14240r 56@14208r 57@14192r 58@14176r 59@14096r 60@13664r 61@13632r 62@13616r 63@13600r 64@13568r 65@13296r 66@13264r 67@13248r 68@13232r 69@13184r 70@13024r 71@12992r 72@12976r 73@12960r 74@12912r 75@12816r 76@12784r 77@12768r 78@12752r 79@12208r 80@10992r 81@10960r 82@10944r 83@10928r 84@10864r 85@10832r 86@10800r 87@10784r 88@10768r 89@10704r 90@10672r 91@10640r 92@10624r 93@10608r 94@10560r 95@11504r 96@11472r 97@11456r 98@11440r 99@11376r 100@11344r 101@11312r 102@11296r 103@11280r 104@11216r 105@11184r 106@11152r 107@11136r 108@11120r 109@11072r 110@11824r 111@11792r 112@11776r 113@11760r 114@11712r 115@11696r 116@11664r 117@11648r 118@11632r 119@11584r 120@10240r 121@10208r 122@10192r 123@10176r 124@10128r 125@10080r 126@10048r 127@10032r 128@10016r 129@9984r 130@9968r 131@9936r 132@9920r 133@9904r 134@9856r 135@7008r 136@6976r 137@6960r 138@6944r 139@6896r 140@6880r 141@6848r 142@6832r 143@6816r 144@6752r 145@6720r 146@6688r 147@6672r 148@6656r 149@6624r 150@6608r 151@6576r 152@6560r 153@6544r 154@6496r 155@2856r 156@2840r 157@2832r 158@2824r 159@2432r 160@2288r 161@2256r 162@2240r 163@2224r 164@2144r 165@1952r 166@1920r 167@1904r 168@1888r 169@1840r 170@1824r 171@1792r 172@1776r 173@1760r 174@1680r 175@1664r 176@1632r 177@1616r 178@1600r 179@1536r 180@1520r 181@1488r 182@1472r 183@1456r 184@1408r 185@1184r 186@1152r 187@1136r 188@1120r 189@1072r 190@928r 191@896r 192@880r 193@864r 194@848r 195@576r 196@544r 197@528r 198@512r 199@432r
B0 [2208r,2224r:19)[2224r,2420r:18)[5520r,5536r:1)[5536r,5568r:0)[6656r,6736r:17)[6800r,6816r:16)[8720r,8736r:4)[8736r,8768r:3)[9296r,9328r:2)[10016r,10096r:15)[10752r,10768r:12)[10912r,10928r:11)[11264r,11280r:14)[11424r,11440r:13)[12736r,12752r:10)[12960r,13040r:9)[13600r,13716r:8)[13872r,13888r:5)[14144r,14176r:7)[14480r,14512r:6)  0@5536r 1@5520r 2@9296r 3@8736r 4@8720r 5@13872r 6@14480r 7@14144r 8@13600r 9@12960r 10@12736r 11@10912r 12@10752r 13@11424r 14@11264r 15@10016r 16@6800r 17@6656r 18@2224r 19@2208r
W0 [0B,32r:0)[256r,272r:1)[480r,512r:38)[856r,864r:37)[1104r,1120r:12)[1440r,1456r:36)[1568r,1600r:35)[1728r,1760r:34)[1872r,1888r:33)[2192r,2224r:32)[2800r,2824r:11)[4704r,4800r:13)[6528r,6544r:10)[6640r,6656r:9)[6784r,6816r:31)[6928r,6944r:8)[7520r,7536r:3)[7712r,7808r:16)[7968r,7984r:2)[9088r,9104r:15)[9264r,9328r:14)[9888r,9904r:7)[10000r,10016r:6)[10160r,10176r:30)[10592r,10608r:24)[10736r,10768r:23)[10896r,10928r:22)[11104r,11120r:27)[11248r,11280r:26)[11408r,11440r:25)[11616r,11632r:29)[11744r,11760r:28)[12624r,12752r:21)[12944r,12960r:5)[13216r,13232r:20)[13584r,13600r:4)[13840r,13888r:17)[14112r,14176r:19)[14448r,14512r:18)  0@0B-phi 1@256r 2@7968r 3@7520r 4@13584r 5@12944r 6@10000r 7@9888r 8@6928r 9@6640r 10@6528r 11@2800r 12@1104r 13@4704r 14@9264r 15@9088r 16@7712r 17@13840r 18@14448r 19@14112r 20@13216r 21@12624r 22@10896r 23@10736r 24@10592r 25@11408r 26@11248r 27@11104r 28@11744r 29@11616r 30@10160r 31@6784r 32@2192r 33@1872r 34@1728r 35@1568r 36@1440r 37@856r 38@480r
W1 [0B,16r:0)[496r,512r:11)[1584r,1600r:5)[1744r,1760r:4)[2808r,2824r:3)[4720r,4800r:6)[7728r,7808r:7)[9280r,9328r:1)[12712r,12752r:2)[13856r,13888r:8)[14128r,14176r:10)[14464r,14512r:9)  0@0B-phi 1@9280r 2@12712r 3@2808r 4@1744r 5@1584r 6@4720r 7@7728r 8@13856r 9@14464r 10@14128r 11@496r
W3 [2736r,2824r:1)[4752r,4800r:2)[7760r,7808r:3)[12720r,12752r:0)  0@12720r 1@2736r 2@4752r 3@7760r
W4 [2752r,2824r:1)[4768r,4800r:2)[7776r,7808r:3)[12728r,12752r:0)  0@12728r 1@2752r 2@4768r 3@7776r
%0 [1040r,6448B:0)  0@1040r weight:0.000000e+00
%1 [5392r,5664r:0)  0@5392r weight:0.000000e+00
%5 [8592r,8864r:0)  0@8592r weight:0.000000e+00
%9 [32r,80r:0)  0@32r weight:0.000000e+00
%10 [16r,96r:0)  0@16r weight:0.000000e+00
%12 [144r,160r:0)  0@144r weight:0.000000e+00
%16 [592r,624r:0)  0@592r weight:0.000000e+00
%17 [976r,1008r:0)  0@976r weight:0.000000e+00
%19 [672r,728r:0)  0@672r weight:0.000000e+00
%20 [688r,728r:0)  0@688r weight:0.000000e+00
%21 [720r,820r:0)  0@720r weight:0.000000e+00
%22 [752r,840r:0)  0@752r weight:0.000000e+00
%23 [824r,832r:0)  0@824r weight:0.000000e+00
%24 [816r,912r:0)  0@816r weight:0.000000e+00
%28 [1200r,3472B:0)  0@1200r weight:0.000000e+00
%29 [1232r,1328r:0)  0@1232r weight:0.000000e+00
%30 [1248r,3472B:0)  0@1248r weight:0.000000e+00
%31 [1280r,3472B:0)  0@1280r weight:0.000000e+00
%32 [1312r,2416r:0)  0@1312r weight:0.000000e+00
%33 [1344r,1360r:0)  0@1344r weight:0.000000e+00
%34 [1376r,1392r:0)  0@1376r weight:0.000000e+00
%44 [1968r,2336r:0)  0@1968r weight:0.000000e+00
%45 [2000r,2352r:0)  0@2000r weight:0.000000e+00
%46 [2088r,2104r:0)  0@2088r weight:0.000000e+00
%47 [2048r,2080r:0)  0@2048r weight:0.000000e+00
%48 [2064r,2080r:0)  0@2064r weight:0.000000e+00
%49 [2096r,2128r:0)  0@2096r weight:0.000000e+00
%50 [2112r,2128r:0)  0@2112r weight:0.000000e+00
%51 [2160r,2176r:0)  0@2160r weight:0.000000e+00
%52 [2176r,2272r:0)  0@2176r weight:0.000000e+00
%53 [2420r,2424r:0)  0@2420r weight:0.000000e+00
%54 [2336r,2848r:0)  0@2336r weight:0.000000e+00
%55 [2352r,2848r:0)  0@2352r weight:0.000000e+00
%56 [2368r,2848r:0)  0@2368r weight:0.000000e+00
%57 [2384r,2848r:0)  0@2384r weight:0.000000e+00
%58 [2400r,2848r:0)  0@2400r weight:0.000000e+00
%59 [2416r,2848r:0)  0@2416r weight:0.000000e+00
%60 [2448r,2768r:0)  0@2448r weight:0.000000e+00
%62 [2496r,2760r:0)  0@2496r weight:0.000000e+00
%63 [2528r,2784r:0)  0@2528r weight:0.000000e+00
%64 [2560r,2776r:0)  0@2560r weight:0.000000e+00
%66 [2656r,3472B:0)  0@2656r weight:0.000000e+00
%67 [2792r,3472B:0)  0@2792r weight:0.000000e+00
%68 [2936r,2976r:0)  0@2936r weight:0.000000e+00
%70 [2912r,2944r:0)  0@2912r weight:0.000000e+00
%72 [2928r,2944r:0)  0@2928r weight:0.000000e+00
%73 [2944r,2960r:0)  0@2944r weight:0.000000e+00
%74 [2960r,2976r:0)  0@2960r weight:0.000000e+00
%77 [3568r,3600r:0)  0@3568r weight:0.000000e+00
%78 [3584r,3600r:0)  0@3584r weight:0.000000e+00
%81 [3960r,4000r:0)  0@3960r weight:0.000000e+00
%82 [3808r,4240B:0)  0@3808r weight:0.000000e+00
%83 [3936r,3968r:0)  0@3936r weight:0.000000e+00
%84 [3824r,4240B:0)  0@3824r weight:0.000000e+00
%85 [3952r,3968r:0)  0@3952r weight:0.000000e+00
%86 [3968r,3984r:0)  0@3968r weight:0.000000e+00
%87 [3984r,4000r:0)  0@3984r weight:0.000000e+00
%90 [4288r,4504r:0)  0@4288r weight:0.000000e+00
%91 [4552r,4560r:0)  0@4552r weight:0.000000e+00
%94 [6256r,6288r:0)  0@6256r weight:0.000000e+00
%95 [6272r,6288r:0)  0@6272r weight:0.000000e+00
%99 [6736r,6864r:0)  0@6736r weight:0.000000e+00
%102 [6936r,7024r:0)  0@6936r weight:0.000000e+00
%103 [7360r,7376r:0)  0@7360r weight:0.000000e+00
%106 [10096r,10112r:0)  0@10096r weight:0.000000e+00
%109 [10296r,10312r:0)  0@10296r weight:0.000000e+00
%110 [10288r,10304r:0)  0@10288r weight:0.000000e+00
%117 [10368r,10452r:0)  0@10368r weight:0.000000e+00
%118 [10384r,10456r:0)  0@10384r weight:0.000000e+00
%119 [10452r,10456r:0)  0@10452r weight:0.000000e+00
%120 [10456r,10472r:0)  0@10456r weight:0.000000e+00
%121 [10448r,10464r:0)  0@10448r weight:0.000000e+00
%125 [11200r,11328r:0)  0@11200r weight:0.000000e+00
%128 [11360r,11488r:0)  0@11360r weight:0.000000e+00
%131 [10528r,10544r:0)  0@10528r weight:0.000000e+00
%134 [10688r,10816r:0)  0@10688r weight:0.000000e+00
%137 [10848r,10976r:0)  0@10848r weight:0.000000e+00
%140 [11856r,11872r:0)  0@11856r weight:0.000000e+00
%142 [11936r,12024r:0)  0@11936r weight:0.000000e+00
%143 [11952r,11968r:0)  0@11952r weight:0.000000e+00
%144 [11968r,12024r:0)  0@11968r weight:0.000000e+00
%145 [12024r,12032r:0)  0@12024r weight:0.000000e+00
%146 [12000r,12016r:0)  0@12000r weight:0.000000e+00
%147 [12016r,12032r:0)  0@12016r weight:0.000000e+00
%148 [12032r,12048r:0)  0@12032r weight:0.000000e+00
%149 [12144r,12800r:0)  0@12144r weight:0.000000e+00
%150 [12160r,12800r:0)  0@12160r weight:0.000000e+00
%151 [12176r,12800r:0)  0@12176r weight:0.000000e+00
%152 [12192r,12800r:0)  0@12192r weight:0.000000e+00
%153 [12224r,12472r:0)  0@12224r weight:0.000000e+00
%155 [12272r,12536r:0)  0@12272r weight:0.000000e+00
%156 [12304r,12532r:0)  0@12304r weight:0.000000e+00
%157 [12336r,12552r:0)  0@12336r weight:0.000000e+00
%158 [12368r,12548r:0)  0@12368r weight:0.000000e+00
%159 [12400r,12632r:0)  0@12400r weight:0.000000e+00
%160 [12432r,12628r:0)  0@12432r weight:0.000000e+00
%161 [12464r,12648r:0)  0@12464r weight:0.000000e+00
%162 [12496r,12640r:0)  0@12496r weight:0.000000e+00
%163 [12544r,12708r:0)  0@12544r weight:0.000000e+00
%167 [12832r,12848r:0)  0@12832r weight:0.000000e+00
%168 [12848r,12864r:0)  0@12848r weight:0.000000e+00
%170 [13040r,13080r:0)  0@13040r weight:0.000000e+00
%171 [13136r,13152r:0)  0@13136r weight:0.000000e+00
%175 [13472r,13488r:0)  0@13472r weight:0.000000e+00
%178 [13552r,13648r:0)  0@13552r weight:0.000000e+00
%179 [13716r,13720r:0)  0@13716r weight:0.000000e+00
%180 [13712r,13728r:0)  0@13712r weight:0.000000e+00
%181 [14000r,14068r:0)  0@14000r weight:0.000000e+00
%183 [14068r,14224r:0)  0@14068r weight:0.000000e+00
%184 [14032r,14224r:0)  0@14032r weight:0.000000e+00
%185 [13376r,13392r:0)  0@13376r weight:0.000000e+00
%186 [13392r,14672B:0)  0@13392r weight:0.000000e+00
%187 [14072r,14080r:0)  0@14072r weight:0.000000e+00
%188 [14064r,14080r:0)  0@14064r weight:0.000000e+00
%189 [14080r,14224r:0)  0@14080r weight:0.000000e+00
%192 [14256r,14272r:0)  0@14256r weight:0.000000e+00
%194 [14336r,14416r:0)  0@14336r weight:0.000000e+00
%195 [14352r,14368r:0)  0@14352r weight:0.000000e+00
%196 [14368r,14560r:0)  0@14368r weight:0.000000e+00
%199 [14400r,14416r:0)  0@14400r weight:0.000000e+00
%200 [14416r,14560r:0)  0@14416r weight:0.000000e+00
%204 [13776r,13792r:0)  0@13776r weight:0.000000e+00
%205 [13400r,14672B:0)  0@13400r weight:0.000000e+00
%206 [13792r,13936r:0)  0@13792r weight:0.000000e+00
%207 [13808r,13936r:0)  0@13808r weight:0.000000e+00
%210 [14608r,14624r:0)  0@14608r weight:0.000000e+00
%211 [14624r,14640r:0)  0@14624r weight:0.000000e+00
%212 [7040r,9840B:0)  0@7040r weight:0.000000e+00
%213 [7440r,7456r:0)  0@7440r weight:0.000000e+00
%216 [7072r,9840B:0)  0@7072r weight:0.000000e+00
%217 [7088r,9840B:0)  0@7088r weight:0.000000e+00
%218 [7104r,9840B:0)  0@7104r weight:0.000000e+00
%221 [7152r,9840B:0)  0@7152r weight:0.000000e+00
%222 [7304r,9840B:0)  0@7304r weight:0.000000e+00
%226 [7888r,7904r:0)  0@7888r weight:0.000000e+00
%230 [8216r,8256r:0)  0@8216r weight:0.000000e+00
%231 [7312r,9840B:0)  0@7312r weight:0.000000e+00
%232 [8192r,8224r:0)  0@8192r weight:0.000000e+00
%233 [7320r,9840B:0)  0@7320r weight:0.000000e+00
%234 [8208r,8224r:0)  0@8208r weight:0.000000e+00
%235 [8224r,8240r:0)  0@8224r weight:0.000000e+00
%236 [8240r,8256r:0)  0@8240r weight:0.000000e+00
%239 [7248r,7288r:0)  0@7248r weight:0.000000e+00
%240 [7288r,9840B:0)  0@7288r weight:0.000000e+00
%241 [8936r,9000r:0)  0@8936r weight:0.000000e+00
%242 [8928r,9008r:0)  0@8928r weight:0.000000e+00
%243 [9008r,9016r:0)  0@9008r weight:0.000000e+00
%244 [7280r,7296r:0)  0@7280r weight:0.000000e+00
%245 [7296r,9840B:0)  0@7296r weight:0.000000e+00
%246 [9016r,9032r:0)  0@9016r weight:0.000000e+00
%247 [8992r,9024r:0)  0@8992r weight:0.000000e+00
%251 [9200r,9376r:0)  0@9200r weight:0.000000e+00
%252 [9216r,9376r:0)  0@9216r weight:0.000000e+00
%253 [9232r,9376r:0)  0@9232r weight:0.000000e+00
%257 [9496r,9536r:0)  0@9496r weight:0.000000e+00
%259 [9472r,9504r:0)  0@9472r weight:0.000000e+00
%261 [9488r,9504r:0)  0@9488r weight:0.000000e+00
%262 [9504r,9520r:0)  0@9504r weight:0.000000e+00
%263 [9520r,9536r:0)  0@9520r weight:0.000000e+00
%265 [9776r,9792r:0)  0@9776r weight:0.000000e+00
%266 [9792r,9808r:0)  0@9792r weight:0.000000e+00
%267 [9624r,9716r:0)  0@9624r weight:0.000000e+00
%268 [9616r,9712r:0)  0@9616r weight:0.000000e+00
%270 [9648r,9720r:0)  0@9648r weight:0.000000e+00
%272 [9664r,9716r:0)  0@9664r weight:0.000000e+00
%273 [9716r,9720r:0)  0@9716r weight:0.000000e+00
%275 [9712r,9728r:0)  0@9712r weight:0.000000e+00
%276 [8408r,8472r:0)  0@8408r weight:0.000000e+00
%277 [8336r,8528r:0)  0@8336r weight:0.000000e+00
%280 [8368r,8400r:0)  0@8368r weight:0.000000e+00
%281 [8384r,8468r:0)  0@8384r weight:0.000000e+00
%283 [8400r,8532r:0)  0@8400r weight:0.000000e+00
%284 [8468r,8472r:0)  0@8468r weight:0.000000e+00
%285 [8472r,8544r:0)  0@8472r weight:0.000000e+00
%286 [8464r,8536r:0)  0@8464r weight:0.000000e+00
%287 [8532r,8536r:0)  0@8532r weight:0.000000e+00
%288 [8536r,8552r:0)  0@8536r weight:0.000000e+00
%289 [8528r,8560r:0)  0@8528r weight:0.000000e+00
%290 [6352r,6400r:0)  0@6352r weight:0.000000e+00
%292 [6208r,6448B:0)  0@6208r weight:0.000000e+00
%293 [6224r,6448B:0)  0@6224r weight:0.000000e+00
%294 [6400r,6416r:0)  0@6400r weight:0.000000e+00
%296 [4320r,6160B:0)  0@4320r weight:0.000000e+00
%297 [4336r,6160B:0)  0@4336r weight:0.000000e+00
%298 [4352r,6160B:0)  0@4352r weight:0.000000e+00
%301 [4400r,6160B:0)  0@4400r weight:0.000000e+00
%302 [4520r,6160B:0)  0@4520r weight:0.000000e+00
%307 [5016r,5056r:0)  0@5016r weight:0.000000e+00
%308 [4528r,6160B:0)  0@4528r weight:0.000000e+00
%309 [4992r,5024r:0)  0@4992r weight:0.000000e+00
%310 [4536r,6160B:0)  0@4536r weight:0.000000e+00
%311 [5008r,5024r:0)  0@5008r weight:0.000000e+00
%312 [5024r,5040r:0)  0@5024r weight:0.000000e+00
%313 [5040r,5056r:0)  0@5040r weight:0.000000e+00
%316 [4496r,4512r:0)  0@4496r weight:0.000000e+00
%317 [4512r,6160B:0)  0@4512r weight:0.000000e+00
%318 [5696r,5712r:0)  0@5696r weight:0.000000e+00
%320 [5816r,5856r:0)  0@5816r weight:0.000000e+00
%322 [5792r,5824r:0)  0@5792r weight:0.000000e+00
%324 [5808r,5824r:0)  0@5808r weight:0.000000e+00
%325 [5824r,5840r:0)  0@5824r weight:0.000000e+00
%326 [5840r,5856r:0)  0@5840r weight:0.000000e+00
%328 [6096r,6112r:0)  0@6096r weight:0.000000e+00
%329 [6112r,6128r:0)  0@6112r weight:0.000000e+00
%330 [5944r,6036r:0)  0@5944r weight:0.000000e+00
%331 [5936r,6032r:0)  0@5936r weight:0.000000e+00
%333 [5968r,6040r:0)  0@5968r weight:0.000000e+00
%335 [5984r,6036r:0)  0@5984r weight:0.000000e+00
%336 [6036r,6040r:0)  0@6036r weight:0.000000e+00
%338 [6032r,6048r:0)  0@6032r weight:0.000000e+00
%339 [5208r,5272r:0)  0@5208r weight:0.000000e+00
%340 [5136r,5328r:0)  0@5136r weight:0.000000e+00
%343 [5168r,5200r:0)  0@5168r weight:0.000000e+00
%344 [5184r,5268r:0)  0@5184r weight:0.000000e+00
%346 [5200r,5332r:0)  0@5200r weight:0.000000e+00
%347 [5268r,5272r:0)  0@5268r weight:0.000000e+00
%348 [5272r,5344r:0)  0@5272r weight:0.000000e+00
%349 [5264r,5336r:0)  0@5264r weight:0.000000e+00
%350 [5332r,5336r:0)  0@5332r weight:0.000000e+00
%351 [5336r,5352r:0)  0@5336r weight:0.000000e+00
%352 [5328r,5360r:0)  0@5328r weight:0.000000e+00
%353 [4064r,4192r:0)  0@4064r weight:0.000000e+00
%355 [3840r,4240B:0)  0@3840r weight:0.000000e+00
%356 [4096r,4216r:0)  0@4096r weight:0.000000e+00
%358 [3856r,4240B:0)  0@3856r weight:0.000000e+00
%359 [3872r,4240B:0)  0@3872r weight:0.000000e+00
%360 [3888r,4240B:0)  0@3888r weight:0.000000e+00
%361 [4192r,4224r:0)  0@4192r weight:0.000000e+00
%362 [3664r,3712r:0)  0@3664r weight:0.000000e+00
%364 [3520r,3760B:0)  0@3520r weight:0.000000e+00
%365 [3536r,3760B:0)  0@3536r weight:0.000000e+00
%366 [3712r,3728r:0)  0@3712r weight:0.000000e+00
%367 [3040r,3056r:0)  0@3040r weight:0.000000e+00
%369 [3056r,3072r:0)  0@3056r weight:0.000000e+00
%370 [3128r,3168r:0)  0@3128r weight:0.000000e+00
%371 [3120r,3136r:0)  0@3120r weight:0.000000e+00
%373 [3136r,3152r:0)  0@3136r weight:0.000000e+00
%374 [3152r,3168r:0)  0@3152r weight:0.000000e+00
%376 [3408r,3424r:0)  0@3408r weight:0.000000e+00
%377 [3424r,3440r:0)  0@3424r weight:0.000000e+00
%378 [3232r,3344r:0)  0@3232r weight:0.000000e+00
%380 [3300r,3352r:0)  0@3300r weight:0.000000e+00
%382 [3304r,3348r:0)  0@3304r weight:0.000000e+00
%384 [3296r,3348r:0)  0@3296r weight:0.000000e+00
%385 [3348r,3352r:0)  0@3348r weight:0.000000e+00
%386 [3344r,3360r:0)  0@3344r weight:0.000000e+00
%387 [224r,320r:0)  0@224r weight:0.000000e+00
%388 [352r,368r:0)  0@352r weight:0.000000e+00
%389 [368r,384r:0)  0@368r weight:0.000000e+00
%390 [5408r,5488B:0)[5568r,5616B:1)[5616B,5696r:2)  0@5408r 1@5568r 2@5616B-phi weight:0.000000e+00
%391 [8608r,8688B:0)[8768r,8816B:1)[8816B,8936r:2)  0@8608r 1@8768r 2@8816B-phi weight:0.000000e+00
RegMasks: 272r 512r 864r 1120r 1456r 1600r 1760r 1888r 2224r 2824r 4800r 5536r 6544r 6656r 6816r 6944r 7536r 7808r 7984r 8736r 9104r 9328r 9904r 10016r 10176r 10608r 10768r 10928r 11120r 11280r 11440r 11632r 11760r 12752r 12960r 13232r 13600r 13888r 14176r 14512r
********** MACHINEINSTRS **********
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=8, align=8, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=8, align=8, at location [SP]
  fi#11: size=8, align=8, at location [SP]
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=1, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
  fi#19: size=24, align=16, at location [SP]
  fi#20: size=8, align=8, at location [SP]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: 0x422979CA8D600000, align=8
  cp#2: 1.000000e+06, align=8
  cp#3: 1.000000e+02, align=8
  cp#4: 1.000000e+00, align=8
  cp#5: 6.000000e+01, align=8
Function Live Ins: $w0 in %9, $x1 in %10

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0, $x1
16B	  %10:gpr64 = COPY $x1
32B	  %9:gpr32 = COPY $w0
64B	  STRWui $wzr, %stack.0.retval, 0 :: (store 4 into %ir.retval)
80B	  STRWui %9:gpr32, %stack.1.argc.addr, 0 :: (store 4 into %ir.argc.addr)
96B	  STRXui %10:gpr64, %stack.2.argv.addr, 0 :: (store 8 into %ir.argv.addr)
112B	  STRWui $wzr, %stack.3.i, 0, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

128B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

144B	  %12:gpr32common = LDRWui %stack.3.i, 0, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
160B	  dead $wzr = SUBSWri %12:gpr32common, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
176B	  Bcc 12, %bb.3, implicit killed $nzcv, debug-location !138; cg.c:117:5
192B	  B %bb.2, debug-location !138; cg.c:117:5

208B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

224B	  %387:gpr32 = LDRWui %stack.3.i, 0, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
240B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !141; cg.c:118:9
256B	  $w0 = COPY %387:gpr32, debug-location !141; cg.c:118:9
272B	  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !141; cg.c:118:9
288B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !141; cg.c:118:9
304B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !142; cg.c:119:5
320B	  PCN_STACKMAP 0, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.20.fp, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %387:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !142 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:119:5
336B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !142; cg.c:119:5
352B	  %388:gpr32common = LDRWui %stack.3.i, 0, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
368B	  %389:gpr32common = nsw ADDWri %388:gpr32common, 1, 0, debug-location !143; cg.c:117:30
384B	  STRWui %389:gpr32common, %stack.3.i, 0, debug-location !143 :: (store 4 into %ir.i); cg.c:117:30
400B	  B %bb.1, debug-location !144; cg.c:117:5

416B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

432B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !153; cg.c:122:15
480B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_timer_flag, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, debug-location !153; cg.c:122:15
496B	  $x1 = MOVaddr target-flags(aarch64-page) @cg__str_1_r_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_1_r_, debug-location !153; cg.c:122:15
512B	  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !153; cg.c:122:15
528B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !153; cg.c:122:15
544B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !155; cg.c:122:13
560B	  PCN_STACKMAP 1, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.20.fp, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !155 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:122:13
576B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !155; cg.c:122:13
592B	  %16:gpr64 = COPY killed $x8, debug-location !153; cg.c:122:15
608B	  STRXui %16:gpr64, %stack.20.fp, 0, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
624B	  CBZX %16:gpr64, %bb.5, debug-location !157; cg.c:122:9
640B	  B %bb.4, debug-location !157; cg.c:122:9

656B	bb.4.if.then:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

672B	  %19:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
688B	  %20:gpr32 = MOVi32imm 1
720B	  %21:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_2_init_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_2_init_, debug-location !161; cg.c:124:25
728B	  STRWui %20:gpr32, %19:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
752B	  %22:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_3_benchmk_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_3_benchmk_, debug-location !163; cg.c:125:26
816B	  %24:gpr64 = LDRXui %stack.20.fp, 0, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
820B	  STRXui %21:gpr64, %stack.19.t_names, 0, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16); cg.c:124:25
824B	  %23:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_4_conjgd_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_4_conjgd_, debug-location !165; cg.c:126:30
832B	  STRXui %23:gpr64, %stack.19.t_names, 2, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
840B	  STRXui %22:gpr64, %stack.19.t_names, 1, debug-location !163 :: (store 8 into %ir.arrayidx2); cg.c:125:26
848B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !167; cg.c:127:9
856B	  $x0 = COPY %24:gpr64, debug-location !167; cg.c:127:9
864B	  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !167; cg.c:127:9
880B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !167; cg.c:127:9
896B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !168; cg.c:128:5
912B	  PCN_STACKMAP 2, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %24:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !168 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:128:5
928B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !168; cg.c:128:5
944B	  B %bb.6, debug-location !168; cg.c:128:5

960B	bb.5.if.else:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

976B	  %17:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
1008B	  STRWui $wzr, %17:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !169 :: (store 4 into @timeron); cg.c:130:17

1024B	bb.6.if.end:
	; predecessors: %bb.5, %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1040B	  %0:gpr32common = MOVi32imm 75000
1072B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !172; cg.c:133:5
1104B	  $w0 = COPY $wzr, debug-location !172; cg.c:133:5
1120B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !172; cg.c:133:5
1136B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !172; cg.c:133:5
1152B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !173; cg.c:135:14
1168B	  PCN_STACKMAP 3, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !173 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:135:14
1184B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !173; cg.c:135:14
1200B	  %28:gpr64temp = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
1232B	  %29:gpr32common = SUBWri %0:gpr32common, 1, 0, debug-location !174; cg.c:136:13
1248B	  %30:gpr64temp = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
1280B	  %31:gpr64temp = ADRP target-flags(aarch64-page) @firstcol, debug-location !175; cg.c:137:14
1312B	  %32:gpr64temp = ADRP target-flags(aarch64-page) @lastcol, debug-location !176; cg.c:138:13
1320B	  STRWui %29:gpr32common, %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
1328B	  STRWui %29:gpr32common, %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
1344B	  %33:gpr32 = MOVi32imm 66
1360B	  STRBBui %33:gpr32, %stack.14.Class, 0, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
1376B	  %34:gpr64 = MOVi64imm 4627086287187887514
1380B	  STRWui $wzr, %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
1384B	  STRWui $wzr, %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
1392B	  STRXui %34:gpr64, %stack.16.zeta_verify_value, 0, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
1408B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !184; cg.c:172:5
1440B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_5____NAS_Par, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_5____NAS_Par, debug-location !184; cg.c:172:5
1456B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !184; cg.c:172:5
1472B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !184; cg.c:172:5
1488B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !185; cg.c:173:5
1504B	  PCN_STACKMAP 4, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !185 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:173:5
1520B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !185; cg.c:173:5
1536B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !185; cg.c:173:5
1568B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_6__Size___11, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
1584B	  $w1 = MOVi32imm 75000, debug-location !185; cg.c:173:5
1600B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !185; cg.c:173:5
1616B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !185; cg.c:173:5
1632B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !186; cg.c:174:5
1648B	  PCN_STACKMAP 5, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !186 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:174:5
1664B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !186; cg.c:174:5
1680B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !186; cg.c:174:5
1728B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_7__Iteration, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
1744B	  $w1 = MOVi32imm 75, debug-location !186; cg.c:174:5
1760B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !186; cg.c:174:5
1776B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !186; cg.c:174:5
1792B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !187; cg.c:175:5
1808B	  PCN_STACKMAP 6, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !187 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:175:5
1824B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !187; cg.c:175:5
1840B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !187; cg.c:175:5
1872B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_8___, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_8___, debug-location !187; cg.c:175:5
1888B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !187; cg.c:175:5
1904B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !187; cg.c:175:5
1920B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !188; cg.c:177:9
1936B	  PCN_STACKMAP 7, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !188 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:177:9
1952B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !188; cg.c:177:9
1968B	  %44:gpr64temp = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
2000B	  %45:gpr64temp = ADRP target-flags(aarch64-page) @nzz, debug-location !189; cg.c:178:9
2048B	  %47:gpr64common = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !190; cg.c:183:10
2064B	  %48:gpr64 = MOVi64imm 4734050326586327040
2080B	  STRXui %48:gpr64, %47:gpr64common, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
2088B	  %46:gpr32 = MOVi32imm 14700000
2096B	  %49:gpr64temp = ADRP target-flags(aarch64-page) @amult, debug-location !191; cg.c:184:11
2104B	  STRWui %46:gpr32, %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
2112B	  %50:gpr64 = MOVi64imm 4742906807993761792
2120B	  STRWui %0:gpr32common, %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
2128B	  STRXui %50:gpr64, %49:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
2144B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !193; cg.c:185:12
2160B	  %51:gpr64temp = ADRP target-flags(aarch64-page) %const.0
2176B	  %52:fpr64 = LDRDui %51:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
2192B	  $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !193; cg.c:185:12
2208B	  $d0 = COPY %52:fpr64, debug-location !193; cg.c:185:12
2224B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !193; cg.c:185:12
2240B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !193; cg.c:185:12
2256B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !194; cg.c:185:10
2272B	  PCN_STACKMAP 8, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %52:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !194 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:185:10
2288B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !194; cg.c:185:10
2336B	  %54:gpr32 = LDRWui %44:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
2352B	  %55:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
2368B	  %56:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
2384B	  %57:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
2400B	  %58:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
2416B	  %59:gpr32 = LDRWui %32:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
2420B	  %53:fpr64 = COPY $d0, debug-location !193; cg.c:185:12
2424B	  STRDui %53:fpr64, %stack.7.zeta, 0, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
2432B	  ADJCALLSTACKDOWN 56, 0, implicit-def dead $sp, implicit $sp, debug-location !201; cg.c:190:5
2448B	  %60:gpr64 = MOVaddr target-flags(aarch64-page) @iv, target-flags(aarch64-pageoff, aarch64-nc) @iv, debug-location !201; cg.c:190:5
2496B	  %62:gpr64 = MOVaddr target-flags(aarch64-page) @aelt, target-flags(aarch64-pageoff, aarch64-nc) @aelt, debug-location !201; cg.c:190:5
2528B	  %63:gpr64 = MOVaddr target-flags(aarch64-page) @acol, target-flags(aarch64-pageoff, aarch64-nc) @acol, debug-location !201; cg.c:190:5
2560B	  %64:gpr64 = MOVaddr target-flags(aarch64-page) @arow, target-flags(aarch64-pageoff, aarch64-nc) @arow, debug-location !201; cg.c:190:5
2592B	  STRWui %59:gpr32, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
2608B	  STRWui %58:gpr32, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
2624B	  STRWui %57:gpr32, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
2656B	  %66:gpr64common = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
2720B	  $x2 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !201; cg.c:190:5
2736B	  $x3 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !201; cg.c:190:5
2752B	  $x4 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
2760B	  STRXui %62:gpr64, $sp, 5, debug-location !201 :: (store 8 into stack + 40); cg.c:190:5
2768B	  STRXui %60:gpr64, $sp, 6, debug-location !201 :: (store 8 into stack + 48); cg.c:190:5
2776B	  STRXui %64:gpr64, $sp, 3, debug-location !201 :: (store 8 into stack + 24); cg.c:190:5
2784B	  STRXui %63:gpr64, $sp, 4, debug-location !201 :: (store 8 into stack + 32); cg.c:190:5
2792B	  %67:gpr64common = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !201; cg.c:190:5
2800B	  $w0 = COPY %54:gpr32, debug-location !201; cg.c:190:5
2808B	  $w1 = COPY %55:gpr32, debug-location !201; cg.c:190:5
2816B	  $w5 = COPY %56:gpr32, debug-location !201; cg.c:190:5
2824B	  BL @makea, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit killed $x2, implicit $x3, implicit $x4, implicit killed $w5, implicit-def $sp, debug-location !201; cg.c:190:5
2832B	  ADJCALLSTACKUP 56, 0, implicit-def $sp, implicit $sp, debug-location !201; cg.c:190:5
2840B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !202; cg.c:202:12
2848B	  PCN_STACKMAP 9, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.5.k, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %54:gpr32, %55:gpr32, %56:gpr32, %57:gpr32, %58:gpr32, %59:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !202 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:202:12
2856B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !202; cg.c:202:12
2864B	  STRWui $wzr, %stack.4.j, 0, debug-location !202 :: (store 4 into %ir.j); cg.c:202:12

2880B	bb.7.for.cond10:
	; predecessors: %bb.6, %bb.11
	  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)

2912B	  %70:gpr32 = LDRWui %30:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
2928B	  %72:gpr32 = LDRWui %28:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !208 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
2936B	  %68:gpr32 = LDRWui %stack.4.j, 0, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
2944B	  %73:gpr32common = nsw SUBWrr %70:gpr32, %72:gpr32, debug-location !209; cg.c:202:29
2960B	  %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !210; cg.c:202:40
2976B	  dead $wzr = SUBSWrr %68:gpr32, %74:gpr32common, implicit-def $nzcv, debug-location !212; cg.c:202:5
2992B	  Bcc 10, %bb.12, implicit killed $nzcv, debug-location !212; cg.c:202:5
3008B	  B %bb.8, debug-location !212; cg.c:202:5

3024B	bb.8.for.body12:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

3040B	  %367:gpr64 = LDRSWui %stack.4.j, 0, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
3056B	  %369:gpr32 = LDRWroX %67:gpr64common, %367:gpr64, 0, 1, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
3072B	  STRWui %369:gpr32, %stack.5.k, 0, debug-location !217 :: (store 4 into %ir.k); cg.c:203:16

3088B	bb.9.for.cond14:
	; predecessors: %bb.8, %bb.10
	  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)

3120B	  %371:gpr64 = LDRSWui %stack.4.j, 0, debug-location !221 :: (dereferenceable load 4 from %ir.j); cg.c:203:40
3128B	  %370:gpr32 = LDRWui %stack.5.k, 0, debug-location !219 :: (dereferenceable load 4 from %ir.k); cg.c:203:29
3136B	  %373:gpr64common = ADDXrs %67:gpr64common, %371:gpr64, 2, debug-location !223; cg.c:203:33
3152B	  %374:gpr32 = LDRWui %373:gpr64common, 1, debug-location !223 :: (load 4 from %ir.arrayidx17); cg.c:203:33
3168B	  dead $wzr = SUBSWrr %370:gpr32, %374:gpr32, implicit-def $nzcv, debug-location !225; cg.c:203:9
3184B	  Bcc 10, %bb.11, implicit killed $nzcv, debug-location !225; cg.c:203:9
3200B	  B %bb.10, debug-location !225; cg.c:203:9

3216B	bb.10.for.body19:
	; predecessors: %bb.9
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

3232B	  %378:gpr64common = LDRSWui %stack.5.k, 0, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
3296B	  %384:gpr32 = LDRWui %31:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
3300B	  %380:gpr64 = UBFMXri %378:gpr64common, 62, 61, debug-location !228; cg.c:204:25
3304B	  %382:gpr32 = LDRWroX %66:gpr64common, %380:gpr64, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
3344B	  %386:gpr32common = nsw ADDWri %378.sub_32:gpr64common, 1, 0, debug-location !234; cg.c:203:49
3348B	  %385:gpr32 = nsw SUBWrr %382:gpr32, %384:gpr32, debug-location !230; cg.c:204:35
3352B	  STRWroX %385:gpr32, %66:gpr64common, %380:gpr64, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
3360B	  STRWui %386:gpr32common, %stack.5.k, 0, debug-location !234 :: (store 4 into %ir.k); cg.c:203:49
3376B	  B %bb.9, debug-location !235; cg.c:203:9

3392B	bb.11.for.inc28:
	; predecessors: %bb.9
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

3408B	  %376:gpr32common = LDRWui %stack.4.j, 0, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
3424B	  %377:gpr32common = nsw ADDWri %376:gpr32common, 1, 0, debug-location !238; cg.c:202:46
3440B	  STRWui %377:gpr32common, %stack.4.j, 0, debug-location !238 :: (store 4 into %ir.j); cg.c:202:46
3456B	  B %bb.7, debug-location !239; cg.c:202:5

3472B	bb.12.for.end30:
	; predecessors: %bb.7
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3504B	  STRWui $wzr, %stack.3.i, 0, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
3520B	  %364:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
3536B	  %365:gpr64 = MOVi64imm 4607182418800017408

3552B	bb.13.for.cond31:
	; predecessors: %bb.12, %bb.14
	  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)

3568B	  %77:gpr32 = LDRWui %stack.3.i, 0, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
3584B	  %78:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !247; cg.c:211:19
3600B	  dead $wzr = SUBSWrr %77:gpr32, %78:gpr32common, implicit-def $nzcv, debug-location !248; cg.c:211:5
3616B	  Bcc 10, %bb.15, implicit killed $nzcv, debug-location !248; cg.c:211:5
3632B	  B %bb.14, debug-location !248; cg.c:211:5

3648B	bb.14.for.body33:
	; predecessors: %bb.13
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3664B	  %362:gpr64common = LDRSWui %stack.3.i, 0, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
3696B	  STRXroX %365:gpr64, %364:gpr64common, %362:gpr64common, 0, 1, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
3712B	  %366:gpr32common = nsw ADDWri %362.sub_32:gpr64common, 1, 0, debug-location !253; cg.c:211:30
3728B	  STRWui %366:gpr32common, %stack.3.i, 0, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
3744B	  B %bb.13, debug-location !254; cg.c:211:5

3760B	bb.15.for.end38:
	; predecessors: %bb.13
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

3792B	  STRWui $wzr, %stack.4.j, 0, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
3808B	  %82:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
3824B	  %84:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
3840B	  %355:gpr64common = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
3856B	  %358:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
3872B	  %359:gpr64common = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
3888B	  %360:gpr64common = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p

3904B	bb.16.for.cond39:
	; predecessors: %bb.15, %bb.17
	  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)

3936B	  %83:gpr32 = LDRWui %82:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
3952B	  %85:gpr32 = LDRWui %84:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !263 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
3960B	  %81:gpr32 = LDRWui %stack.4.j, 0, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
3968B	  %86:gpr32common = nsw SUBWrr %83:gpr32, %85:gpr32, debug-location !264; cg.c:214:29
3984B	  %87:gpr32common = nsw ADDWri %86:gpr32common, 1, 0, debug-location !265; cg.c:214:40
4000B	  dead $wzr = SUBSWrr %81:gpr32, %87:gpr32common, implicit-def $nzcv, debug-location !267; cg.c:214:5
4016B	  Bcc 10, %bb.18, implicit killed $nzcv, debug-location !267; cg.c:214:5
4032B	  B %bb.17, debug-location !267; cg.c:214:5

4048B	bb.17.for.body43:
	; predecessors: %bb.16
	  successors: %bb.16(0x80000000); %bb.16(100.00%)

4064B	  %353:gpr64common = LDRSWui %stack.4.j, 0, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
4096B	  %356:gpr64 = UBFMXri %353:gpr64common, 61, 60, debug-location !279; cg.c:218:9
4192B	  %361:gpr32common = nsw ADDWri %353.sub_32:gpr64common, 1, 0, debug-location !281; cg.c:214:46
4196B	  STRXroX $xzr, %355:gpr64common, %356:gpr64, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
4200B	  STRXroX $xzr, %358:gpr64common, %356:gpr64, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
4208B	  STRXroX $xzr, %359:gpr64common, %356:gpr64, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
4216B	  STRXroX $xzr, %360:gpr64common, %356:gpr64, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
4224B	  STRWui %361:gpr32common, %stack.4.j, 0, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
4232B	  B %bb.16, debug-location !282; cg.c:214:5

4240B	bb.18.for.end54:
	; predecessors: %bb.16
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

4272B	  STRXui $xzr, %stack.7.zeta, 0, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
4288B	  %90:gpr32 = MOVi32imm 1
4320B	  %296:gpr64common = ADDXri %stack.8.rnorm, 0, 0
4336B	  %297:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
4352B	  %298:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
4400B	  %301:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
4496B	  %316:gpr64temp = ADRP target-flags(aarch64-page) %const.4
4504B	  STRWui %90:gpr32, %stack.6.it, 0, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
4512B	  %317:fpr64 = LDRDui %316:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
4520B	  %302:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
4528B	  %308:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
4536B	  %310:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

4544B	bb.19.for.cond55:
	; predecessors: %bb.18, %bb.28
	  successors: %bb.20(0x7c000000), %bb.29(0x04000000); %bb.20(96.88%), %bb.29(3.12%)

4552B	  %91:gpr32common = LDRWui %stack.6.it, 0, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
4560B	  dead $wzr = SUBSWri %91:gpr32common, 1, 0, implicit-def $nzcv, debug-location !292; cg.c:228:5
4576B	  Bcc 12, %bb.29, implicit killed $nzcv, debug-location !292; cg.c:228:5
4592B	  B %bb.20, debug-location !292; cg.c:228:5

4608B	bb.20.for.body57:
	; predecessors: %bb.19
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

4624B	  ADJCALLSTACKDOWN 24, 0, implicit-def dead $sp, implicit $sp, debug-location !293; cg.c:232:9
4656B	  STRXui %296:gpr64common, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
4704B	  $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !293; cg.c:232:9
4720B	  $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !293; cg.c:232:9
4736B	  $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !293; cg.c:232:9
4752B	  $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !293; cg.c:232:9
4768B	  $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !293; cg.c:232:9
4784B	  $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !293; cg.c:232:9
4788B	  STRXui %298:gpr64, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
4792B	  STRXui %297:gpr64, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
4800B	  BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit $x3, implicit $x4, implicit killed $x5, implicit-def $sp, debug-location !293; cg.c:232:9
4816B	  ADJCALLSTACKUP 24, 0, implicit-def $sp, implicit $sp, debug-location !293; cg.c:232:9
4832B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !295; cg.c:240:20
4848B	  PCN_STACKMAP 10, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !295 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:240:20
4864B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !295; cg.c:240:20
4896B	  STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !295 :: (store 8 into %ir.norm_temp1); cg.c:240:20
4912B	  STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !296 :: (store 8 into %ir.norm_temp2); cg.c:241:20
4944B	  STRWui $wzr, %stack.4.j, 0, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16

4960B	bb.21.for.cond58:
	; predecessors: %bb.20, %bb.22
	  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

4992B	  %309:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
5008B	  %311:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !303 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
5016B	  %307:gpr32 = LDRWui %stack.4.j, 0, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
5024B	  %312:gpr32common = nsw SUBWrr %309:gpr32, %311:gpr32, debug-location !304; cg.c:242:33
5040B	  %313:gpr32common = nsw ADDWri %312:gpr32common, 1, 0, debug-location !305; cg.c:242:44
5056B	  dead $wzr = SUBSWrr %307:gpr32, %313:gpr32common, implicit-def $nzcv, debug-location !307; cg.c:242:9
5072B	  Bcc 10, %bb.23, implicit killed $nzcv, debug-location !307; cg.c:242:9
5088B	  B %bb.22, debug-location !307; cg.c:242:9

5104B	bb.22.for.body62:
	; predecessors: %bb.21
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

5136B	  %340:gpr64common = LDRSWui %stack.4.j, 0, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
5168B	  %343:gpr64 = UBFMXri %340:gpr64common, 61, 60, debug-location !319; cg.c:244:39
5184B	  %344:fpr64 = LDRDroX %301:gpr64common, %343:gpr64, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
5200B	  %346:fpr64 = LDRDroX %302:gpr64common, %343:gpr64, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
5208B	  %339:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:243:26
5264B	  %349:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !317 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:244:26
5268B	  %347:fpr64 = FMULDrr %344:fpr64, %346:fpr64, debug-location !314; cg.c:243:44
5272B	  %348:fpr64 = FADDDrr %339:fpr64, %347:fpr64, debug-location !315; cg.c:243:37
5328B	  %352:gpr32common = nsw ADDWri %340.sub_32:gpr64common, 1, 0, debug-location !325; cg.c:242:50
5332B	  %350:fpr64 = FMULDrr %346:fpr64, %346:fpr64, debug-location !322; cg.c:244:44
5336B	  %351:fpr64 = FADDDrr %349:fpr64, %350:fpr64, debug-location !323; cg.c:244:37
5344B	  STRDui %348:fpr64, %stack.9.norm_temp1, 0, debug-location !316 :: (store 8 into %ir.norm_temp1); cg.c:243:24
5352B	  STRDui %351:fpr64, %stack.10.norm_temp2, 0, debug-location !324 :: (store 8 into %ir.norm_temp2); cg.c:244:24
5360B	  STRWui %352:gpr32common, %stack.4.j, 0, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
5368B	  B %bb.21, debug-location !326; cg.c:242:9

5376B	bb.23.for.end76:
	; predecessors: %bb.21
	  successors: %bb.25(0x50000000), %bb.24(0x30000000); %bb.25(62.50%), %bb.24(37.50%)

5392B	  %1:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
5408B	  %390:fpr64 = FSQRTDr %1:fpr64, debug-location !330; cg.c:247:28
5424B	  FCMPDrr %390:fpr64, %390:fpr64, implicit-def $nzcv, debug-location !331; cg.c:247:26
5456B	  Bcc 7, %bb.25, implicit killed $nzcv, debug-location !331; cg.c:247:26
5472B	  B %bb.24, debug-location !331; cg.c:247:26

5488B	bb.24.call.sqrt:
	; predecessors: %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

5504B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !331; cg.c:247:26
5520B	  $d0 = COPY %1:fpr64, debug-location !331; cg.c:247:26
5536B	  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !331; cg.c:247:26
5552B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !331; cg.c:247:26
5568B	  %390:fpr64 = COPY $d0, debug-location !331; cg.c:247:26

5616B	bb.25.for.end76.split:
	; predecessors: %bb.23, %bb.24
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

5648B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !331; cg.c:247:26
5664B	  PCN_STACKMAP 11, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %1:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !331 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:247:26
5680B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !331; cg.c:247:26
5696B	  %318:fpr64 = FDIVDrr %317:fpr64, %390:fpr64, debug-location !331; cg.c:247:26
5712B	  STRDui %318:fpr64, %stack.10.norm_temp2, 0, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
5744B	  STRWui $wzr, %stack.4.j, 0, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16

5760B	bb.26.for.cond78:
	; predecessors: %bb.25, %bb.27
	  successors: %bb.27(0x7c000000), %bb.28(0x04000000); %bb.27(96.88%), %bb.28(3.12%)

5792B	  %322:gpr32 = LDRWui %308:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
5808B	  %324:gpr32 = LDRWui %310:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !339 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
5816B	  %320:gpr32 = LDRWui %stack.4.j, 0, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
5824B	  %325:gpr32common = nsw SUBWrr %322:gpr32, %324:gpr32, debug-location !340; cg.c:252:33
5840B	  %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !341; cg.c:252:44
5856B	  dead $wzr = SUBSWrr %320:gpr32, %326:gpr32common, implicit-def $nzcv, debug-location !343; cg.c:252:9
5872B	  Bcc 10, %bb.28, implicit killed $nzcv, debug-location !343; cg.c:252:9
5888B	  B %bb.27, debug-location !343; cg.c:252:9

5904B	bb.27.for.body82:
	; predecessors: %bb.26
	  successors: %bb.26(0x80000000); %bb.26(100.00%)

5936B	  %331:gpr64common = LDRSWui %stack.4.j, 0, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
5944B	  %330:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
5968B	  %333:gpr64 = UBFMXri %331:gpr64common, 61, 60, debug-location !347; cg.c:253:33
5984B	  %335:fpr64 = LDRDroX %302:gpr64common, %333:gpr64, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
6032B	  %338:gpr32common = nsw ADDWri %331.sub_32:gpr64common, 1, 0, debug-location !352; cg.c:252:50
6036B	  %336:fpr64 = FMULDrr %330:fpr64, %335:fpr64, debug-location !348; cg.c:253:31
6040B	  STRDroX %336:fpr64, %301:gpr64common, %333:gpr64, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
6048B	  STRWui %338:gpr32common, %stack.4.j, 0, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
6064B	  B %bb.26, debug-location !353; cg.c:252:9

6080B	bb.28.for.inc91:
	; predecessors: %bb.26
	  successors: %bb.19(0x80000000); %bb.19(100.00%)

6096B	  %328:gpr32common = LDRWui %stack.6.it, 0, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
6112B	  %329:gpr32common = nsw ADDWri %328:gpr32common, 1, 0, debug-location !356; cg.c:228:29
6128B	  STRWui %329:gpr32common, %stack.6.it, 0, debug-location !356 :: (store 4 into %ir.it); cg.c:228:29
6144B	  B %bb.19, debug-location !357; cg.c:228:5

6160B	bb.29.for.end93:
	; predecessors: %bb.19
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

6192B	  STRWui $wzr, %stack.3.i, 0, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
6208B	  %292:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
6224B	  %293:gpr64 = MOVi64imm 4607182418800017408

6240B	bb.30.for.cond94:
	; predecessors: %bb.29, %bb.31
	  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

6256B	  %94:gpr32 = LDRWui %stack.3.i, 0, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
6272B	  %95:gpr32common = ADDWri %0:gpr32common, 1, 0, debug-location !365; cg.c:260:19
6288B	  dead $wzr = SUBSWrr %94:gpr32, %95:gpr32common, implicit-def $nzcv, debug-location !366; cg.c:260:5
6304B	  Bcc 10, %bb.32, implicit killed $nzcv, debug-location !366; cg.c:260:5
6320B	  B %bb.31, debug-location !366; cg.c:260:5

6336B	bb.31.for.body96:
	; predecessors: %bb.30
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

6352B	  %290:gpr64common = LDRSWui %stack.3.i, 0, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
6384B	  STRXroX %293:gpr64, %292:gpr64common, %290:gpr64common, 0, 1, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
6400B	  %294:gpr32common = nsw ADDWri %290.sub_32:gpr64common, 1, 0, debug-location !371; cg.c:260:30
6416B	  STRWui %294:gpr32common, %stack.3.i, 0, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
6432B	  B %bb.30, debug-location !372; cg.c:260:5

6448B	bb.32.for.end101:
	; predecessors: %bb.30
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

6480B	  STRXui $xzr, %stack.7.zeta, 0, debug-location !375 :: (store 8 into %ir.zeta); cg.c:264:10
6496B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !376; cg.c:266:5
6528B	  $w0 = COPY $wzr, debug-location !376; cg.c:266:5
6544B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !376; cg.c:266:5
6560B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !376; cg.c:266:5
6576B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !377; cg.c:268:55
6592B	  PCN_STACKMAP 12, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !377 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:55
6608B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !377; cg.c:268:55
6624B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !377; cg.c:268:55
6640B	  $w0 = COPY $wzr, debug-location !377; cg.c:268:55
6656B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !377; cg.c:268:55
6672B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !377; cg.c:268:55
6688B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !378; cg.c:268:5
6704B	  PCN_STACKMAP 13, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !378 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:5
6720B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !378; cg.c:268:5
6736B	  %99:fpr64 = COPY $d0, debug-location !377; cg.c:268:55
6752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !378; cg.c:268:5
6784B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_9__Initializ, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
6800B	  $d0 = COPY %99:fpr64, debug-location !378; cg.c:268:5
6816B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !378; cg.c:268:5
6832B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !378; cg.c:268:5
6848B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !379; cg.c:270:5
6864B	  PCN_STACKMAP 14, 0, 0, %stack.14.Class, 0, %99:fpr64, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !379 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:270:5
6880B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !379; cg.c:270:5
6896B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !379; cg.c:270:5
6928B	  $w0 = MOVi32imm 1, debug-location !379; cg.c:270:5
6936B	  %102:gpr32 = MOVi32imm 1
6944B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !379; cg.c:270:5
6960B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !379; cg.c:270:5
6976B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !380; cg.c:277:5
6992B	  PCN_STACKMAP 15, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !380 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:277:5
7008B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !380; cg.c:277:5
7024B	  STRWui %102:gpr32, %stack.6.it, 0, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
7040B	  %212:gpr64temp = ADRP target-flags(aarch64-page) @timeron
7072B	  %216:gpr64common = ADDXri %stack.8.rnorm, 0, 0
7088B	  %217:gpr64 = MOVaddr target-flags(aarch64-page) @r, target-flags(aarch64-pageoff, aarch64-nc) @r
7104B	  %218:gpr64 = MOVaddr target-flags(aarch64-page) @q, target-flags(aarch64-pageoff, aarch64-nc) @q
7152B	  %221:gpr64common = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x
7248B	  %239:gpr64temp = ADRP target-flags(aarch64-page) %const.4
7280B	  %244:gpr64temp = ADRP target-flags(aarch64-page) %const.5
7288B	  %240:fpr64 = LDRDui %239:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
7296B	  %245:fpr64 = LDRDui %244:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
7304B	  %222:gpr64common = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z
7312B	  %231:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
7320B	  %233:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

7344B	bb.33.for.cond108:
	; predecessors: %bb.32, %bb.48
	  successors: %bb.34(0x7c000000), %bb.49(0x04000000); %bb.34(96.88%), %bb.49(3.12%)

7360B	  %103:gpr32common = LDRWui %stack.6.it, 0, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
7376B	  dead $wzr = SUBSWri %103:gpr32common, 75, 0, implicit-def $nzcv, debug-location !387; cg.c:279:5
7392B	  Bcc 12, %bb.49, implicit killed $nzcv, debug-location !387; cg.c:279:5
7408B	  B %bb.34, debug-location !387; cg.c:279:5

7424B	bb.34.for.body110:
	; predecessors: %bb.33
	  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

7440B	  %213:gpr32 = LDRWui %212:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !388 :: (dereferenceable load 4 from @timeron); cg.c:284:13
7456B	  CBZW %213:gpr32, %bb.36, debug-location !391; cg.c:284:13
7472B	  B %bb.35, debug-location !391; cg.c:284:13

7488B	bb.35.if.then111:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

7504B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !392; cg.c:285:13
7520B	  $w0 = MOVi32imm 2, debug-location !392; cg.c:285:13
7536B	  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !392; cg.c:285:13
7552B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !392; cg.c:285:13
7568B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !392; cg.c:285:13
7584B	  PCN_STACKMAP 16, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !392 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:285:13
7600B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !392; cg.c:285:13

7616B	bb.36.if.end112:
	; predecessors: %bb.34, %bb.35
	  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)

7632B	  ADJCALLSTACKDOWN 24, 0, implicit-def dead $sp, implicit $sp, debug-location !393; cg.c:286:9
7664B	  STRXui %216:gpr64common, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
7712B	  $x0 = MOVaddr target-flags(aarch64-page) @colidx, target-flags(aarch64-pageoff, aarch64-nc) @colidx, debug-location !393; cg.c:286:9
7728B	  $x1 = MOVaddr target-flags(aarch64-page) @rowstr, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, debug-location !393; cg.c:286:9
7744B	  $x2 = MOVaddr target-flags(aarch64-page) @x, target-flags(aarch64-pageoff, aarch64-nc) @x, debug-location !393; cg.c:286:9
7760B	  $x3 = MOVaddr target-flags(aarch64-page) @z, target-flags(aarch64-pageoff, aarch64-nc) @z, debug-location !393; cg.c:286:9
7776B	  $x4 = MOVaddr target-flags(aarch64-page) @a, target-flags(aarch64-pageoff, aarch64-nc) @a, debug-location !393; cg.c:286:9
7792B	  $x5 = MOVaddr target-flags(aarch64-page) @p, target-flags(aarch64-pageoff, aarch64-nc) @p, debug-location !393; cg.c:286:9
7796B	  STRXui %218:gpr64, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
7800B	  STRXui %217:gpr64, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
7808B	  BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit killed $x2, implicit $x3, implicit $x4, implicit killed $x5, implicit-def $sp, debug-location !393; cg.c:286:9
7824B	  ADJCALLSTACKUP 24, 0, implicit-def $sp, implicit $sp, debug-location !393; cg.c:286:9
7840B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !394; cg.c:287:13
7856B	  PCN_STACKMAP 17, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !394 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:287:13
7872B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !394; cg.c:287:13
7888B	  %226:gpr32 = LDRWui %212:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !394 :: (dereferenceable load 4 from @timeron); cg.c:287:13
7904B	  CBZW %226:gpr32, %bb.38, debug-location !396; cg.c:287:13
7920B	  B %bb.37, debug-location !396; cg.c:287:13

7936B	bb.37.if.then114:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

7952B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !397; cg.c:288:13
7968B	  $w0 = MOVi32imm 2, debug-location !397; cg.c:288:13
7984B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !397; cg.c:288:13
8000B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !397; cg.c:288:13
8016B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !397; cg.c:288:13
8032B	  PCN_STACKMAP 18, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !397 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:288:13
8048B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !397; cg.c:288:13

8064B	bb.38.if.end115:
	; predecessors: %bb.36, %bb.37
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

8096B	  STRXui $xzr, %stack.9.norm_temp1, 0, debug-location !398 :: (store 8 into %ir.norm_temp1); cg.c:297:20
8112B	  STRXui $xzr, %stack.10.norm_temp2, 0, debug-location !399 :: (store 8 into %ir.norm_temp2); cg.c:298:20
8144B	  STRWui $wzr, %stack.4.j, 0, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16

8160B	bb.39.for.cond116:
	; predecessors: %bb.38, %bb.40
	  successors: %bb.40(0x7c000000), %bb.41(0x04000000); %bb.40(96.88%), %bb.41(3.12%)

8192B	  %232:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
8208B	  %234:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !406 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
8216B	  %230:gpr32 = LDRWui %stack.4.j, 0, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
8224B	  %235:gpr32common = nsw SUBWrr %232:gpr32, %234:gpr32, debug-location !407; cg.c:299:33
8240B	  %236:gpr32common = nsw ADDWri %235:gpr32common, 1, 0, debug-location !408; cg.c:299:44
8256B	  dead $wzr = SUBSWrr %230:gpr32, %236:gpr32common, implicit-def $nzcv, debug-location !410; cg.c:299:9
8272B	  Bcc 10, %bb.41, implicit killed $nzcv, debug-location !410; cg.c:299:9
8288B	  B %bb.40, debug-location !410; cg.c:299:9

8304B	bb.40.for.body120:
	; predecessors: %bb.39
	  successors: %bb.39(0x80000000); %bb.39(100.00%)

8336B	  %277:gpr64common = LDRSWui %stack.4.j, 0, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
8368B	  %280:gpr64 = UBFMXri %277:gpr64common, 61, 60, debug-location !422; cg.c:301:39
8384B	  %281:fpr64 = LDRDroX %221:gpr64common, %280:gpr64, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
8400B	  %283:fpr64 = LDRDroX %222:gpr64common, %280:gpr64, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
8408B	  %276:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:300:26
8464B	  %286:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !420 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:301:26
8468B	  %284:fpr64 = FMULDrr %281:fpr64, %283:fpr64, debug-location !417; cg.c:300:44
8472B	  %285:fpr64 = FADDDrr %276:fpr64, %284:fpr64, debug-location !418; cg.c:300:37
8528B	  %289:gpr32common = nsw ADDWri %277.sub_32:gpr64common, 1, 0, debug-location !428; cg.c:299:50
8532B	  %287:fpr64 = FMULDrr %283:fpr64, %283:fpr64, debug-location !425; cg.c:301:44
8536B	  %288:fpr64 = FADDDrr %286:fpr64, %287:fpr64, debug-location !426; cg.c:301:37
8544B	  STRDui %285:fpr64, %stack.9.norm_temp1, 0, debug-location !419 :: (store 8 into %ir.norm_temp1); cg.c:300:24
8552B	  STRDui %288:fpr64, %stack.10.norm_temp2, 0, debug-location !427 :: (store 8 into %ir.norm_temp2); cg.c:301:24
8560B	  STRWui %289:gpr32common, %stack.4.j, 0, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
8568B	  B %bb.39, debug-location !429; cg.c:299:9

8576B	bb.41.for.end135:
	; predecessors: %bb.39
	  successors: %bb.43(0x50000000), %bb.42(0x30000000); %bb.43(62.50%), %bb.42(37.50%)

8592B	  %5:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
8608B	  %391:fpr64 = FSQRTDr %5:fpr64, debug-location !433; cg.c:304:28
8624B	  FCMPDrr %391:fpr64, %391:fpr64, implicit-def $nzcv, debug-location !434; cg.c:304:26
8656B	  Bcc 7, %bb.43, implicit killed $nzcv, debug-location !434; cg.c:304:26
8672B	  B %bb.42, debug-location !434; cg.c:304:26

8688B	bb.42.call.sqrt4:
	; predecessors: %bb.41
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

8704B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !434; cg.c:304:26
8720B	  $d0 = COPY %5:fpr64, debug-location !434; cg.c:304:26
8736B	  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !434; cg.c:304:26
8752B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !434; cg.c:304:26
8768B	  %391:fpr64 = COPY $d0, debug-location !434; cg.c:304:26

8816B	bb.43.for.end135.split:
	; predecessors: %bb.41, %bb.42
	  successors: %bb.44(0x40000000), %bb.45(0x40000000); %bb.44(50.00%), %bb.45(50.00%)

8848B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !434; cg.c:304:26
8864B	  PCN_STACKMAP 19, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %5:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !434 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:304:26
8880B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !434; cg.c:304:26
8928B	  %242:fpr64 = LDRDui %stack.9.norm_temp1, 0, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
8936B	  %241:fpr64 = FDIVDrr %240:fpr64, %391:fpr64, debug-location !434; cg.c:304:26
8992B	  %247:gpr32common = LDRWui %stack.6.it, 0, debug-location !440 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
9000B	  STRDui %241:fpr64, %stack.10.norm_temp2, 0, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
9008B	  %243:fpr64 = FDIVDrr %240:fpr64, %242:fpr64, debug-location !437; cg.c:306:28
9016B	  %246:fpr64 = FADDDrr %243:fpr64, %245:fpr64, debug-location !438; cg.c:306:22
9024B	  dead $wzr = SUBSWri %247:gpr32common, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
9032B	  STRDui %246:fpr64, %stack.7.zeta, 0, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
9040B	  Bcc 1, %bb.45, implicit killed $nzcv, debug-location !443; cg.c:307:13
9048B	  B %bb.44, debug-location !443; cg.c:307:13

9056B	bb.44.if.then141:
	; predecessors: %bb.43
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

9072B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !444; cg.c:308:13
9088B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_10_____iterat, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_10_____iterat, debug-location !444; cg.c:308:13
9104B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !444; cg.c:308:13
9120B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !444; cg.c:308:13
9136B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !444; cg.c:308:13
9152B	  PCN_STACKMAP 20, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !444 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:308:13
9168B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !444; cg.c:308:13

9184B	bb.45.if.end143:
	; predecessors: %bb.43, %bb.44
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

9200B	  %251:gpr32 = LDRWui %stack.6.it, 0, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
9216B	  %252:fpr64 = LDRDui %stack.8.rnorm, 0, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm); cg.c:309:54
9232B	  %253:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !447 :: (dereferenceable load 8 from %ir.zeta); cg.c:309:61
9248B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !448; cg.c:309:9
9264B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_11______5d___, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, debug-location !448; cg.c:309:9
9280B	  $w1 = COPY %251:gpr32, debug-location !448; cg.c:309:9
9296B	  $d0 = COPY %252:fpr64, debug-location !448; cg.c:309:9
9312B	  $d1 = COPY %253:fpr64, debug-location !448; cg.c:309:9
9328B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !448; cg.c:309:9
9344B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !448; cg.c:309:9
9360B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !449; cg.c:314:16
9376B	  PCN_STACKMAP 21, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.6.it, 0, 0, %stack.4.j, 0, 0, %stack.12.mflops, 0, 0, %stack.9.norm_temp1, 0, 0, %stack.10.norm_temp2, 0, 0, %stack.8.rnorm, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, %251:gpr32, %252:fpr64, %253:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !449 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:314:16
9392B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !449; cg.c:314:16
9424B	  STRWui $wzr, %stack.4.j, 0, debug-location !449 :: (store 4 into %ir.j); cg.c:314:16

9440B	bb.46.for.cond145:
	; predecessors: %bb.45, %bb.47
	  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)

9472B	  %259:gpr32 = LDRWui %231:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
9488B	  %261:gpr32 = LDRWui %233:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !455 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
9496B	  %257:gpr32 = LDRWui %stack.4.j, 0, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
9504B	  %262:gpr32common = nsw SUBWrr %259:gpr32, %261:gpr32, debug-location !456; cg.c:314:33
9520B	  %263:gpr32common = nsw ADDWri %262:gpr32common, 1, 0, debug-location !457; cg.c:314:44
9536B	  dead $wzr = SUBSWrr %257:gpr32, %263:gpr32common, implicit-def $nzcv, debug-location !459; cg.c:314:9
9552B	  Bcc 10, %bb.48, implicit killed $nzcv, debug-location !459; cg.c:314:9
9568B	  B %bb.47, debug-location !459; cg.c:314:9

9584B	bb.47.for.body149:
	; predecessors: %bb.46
	  successors: %bb.46(0x80000000); %bb.46(100.00%)

9616B	  %268:gpr64common = LDRSWui %stack.4.j, 0, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
9624B	  %267:fpr64 = LDRDui %stack.10.norm_temp2, 0, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
9648B	  %270:gpr64 = UBFMXri %268:gpr64common, 61, 60, debug-location !463; cg.c:315:33
9664B	  %272:fpr64 = LDRDroX %222:gpr64common, %270:gpr64, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
9712B	  %275:gpr32common = nsw ADDWri %268.sub_32:gpr64common, 1, 0, debug-location !468; cg.c:314:50
9716B	  %273:fpr64 = FMULDrr %267:fpr64, %272:fpr64, debug-location !464; cg.c:315:31
9720B	  STRDroX %273:fpr64, %221:gpr64common, %270:gpr64, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
9728B	  STRWui %275:gpr32common, %stack.4.j, 0, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
9744B	  B %bb.46, debug-location !469; cg.c:314:9

9760B	bb.48.for.inc158:
	; predecessors: %bb.46
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

9776B	  %265:gpr32common = LDRWui %stack.6.it, 0, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
9792B	  %266:gpr32common = nsw ADDWri %265:gpr32common, 1, 0, debug-location !472; cg.c:279:33
9808B	  STRWui %266:gpr32common, %stack.6.it, 0, debug-location !472 :: (store 4 into %ir.it); cg.c:279:33
9824B	  B %bb.33, debug-location !473; cg.c:279:5

9840B	bb.49.do.end164:
	; predecessors: %bb.33
	  successors: %bb.50(0x40000000), %bb.53(0x40000000); %bb.50(50.00%), %bb.53(50.00%)

9856B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !476; cg.c:321:5
9888B	  $w0 = MOVi32imm 1, debug-location !476; cg.c:321:5
9904B	  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !476; cg.c:321:5
9920B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !476; cg.c:321:5
9936B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !477; cg.c:327:9
9952B	  PCN_STACKMAP 22, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !477 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:9
9968B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:327:9
9984B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !477; cg.c:327:9
10000B	  $w0 = MOVi32imm 1, debug-location !477; cg.c:327:9
10016B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !477; cg.c:327:9
10032B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !477; cg.c:327:9
10048B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !478; cg.c:327:7
10064B	  PCN_STACKMAP 23, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !478 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:7
10080B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !478; cg.c:327:7
10096B	  %106:fpr64 = COPY $d0, debug-location !477; cg.c:327:9
10112B	  STRDui %106:fpr64, %stack.11.t, 0, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
10128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !479; cg.c:329:5
10160B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_12__Benchmark, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_12__Benchmark, debug-location !479; cg.c:329:5
10176B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !479; cg.c:329:5
10192B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !479; cg.c:329:5
10208B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !480; cg.c:331:13
10224B	  PCN_STACKMAP 24, 0, 0, %stack.14.Class, 0, 0, %stack.17.epsilon, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !480 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:331:13
10240B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !480; cg.c:331:13
10288B	  %110:gpr32common = LDRSBWui %stack.14.Class, 0, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
10296B	  %109:gpr64 = MOVi64imm 4457293557087583675
10304B	  dead $wzr = SUBSWri %110:gpr32common, 85, 0, implicit-def $nzcv, debug-location !484; cg.c:332:9
10312B	  STRXui %109:gpr64, %stack.17.epsilon, 0, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
10320B	  Bcc 0, %bb.53, implicit killed $nzcv, debug-location !484; cg.c:332:9
10336B	  B %bb.50, debug-location !484; cg.c:332:9

10352B	bb.50.if.then169:
	; predecessors: %bb.49
	  successors: %bb.51(0x40000000), %bb.52(0x40000000); %bb.51(50.00%), %bb.52(50.00%)

10368B	  %117:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
10384B	  %118:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:333:27
10448B	  %121:fpr64 = LDRDui %stack.17.epsilon, 0, debug-location !495 :: (dereferenceable load 8 from %ir.epsilon); cg.c:334:20
10452B	  %119:fpr64 = FABD64 %117:fpr64, %118:fpr64, debug-location !489; cg.c:333:15
10456B	  %120:fpr64 = FDIVDrr %119:fpr64, %118:fpr64, debug-location !491; cg.c:333:46
10464B	  FCMPDrr %120:fpr64, %121:fpr64, implicit-def $nzcv, debug-location !497; cg.c:334:13
10472B	  STRDui %120:fpr64, %stack.18.err, 0, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
10480B	  Bcc 8, %bb.52, implicit killed $nzcv, debug-location !497; cg.c:334:13
10496B	  B %bb.51, debug-location !497; cg.c:334:13

10512B	bb.51.if.then174:
	; predecessors: %bb.50
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

10528B	  %131:gpr32 = MOVi32imm 1
10544B	  STRWui %131:gpr32, %stack.15.verified, 0, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
10560B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !500; cg.c:336:13
10592B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_13__VERIFICAT, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_13__VERIFICAT, debug-location !500; cg.c:336:13
10608B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !500; cg.c:336:13
10624B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !500; cg.c:336:13
10640B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !501; cg.c:337:45
10656B	  PCN_STACKMAP 25, 0, 0, %stack.14.Class, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !501 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta); cg.c:337:45
10672B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !501; cg.c:337:45
10688B	  %134:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !501 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
10704B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !502; cg.c:337:13
10736B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_14__Zeta_is__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
10752B	  $d0 = COPY %134:fpr64, debug-location !502; cg.c:337:13
10768B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !502; cg.c:337:13
10784B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !502; cg.c:337:13
10800B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !503; cg.c:338:45
10816B	  PCN_STACKMAP 26, 0, 0, %stack.14.Class, 0, 0, %stack.18.err, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %134:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !503 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:338:45
10832B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !503; cg.c:338:45
10848B	  %137:fpr64 = LDRDui %stack.18.err, 0, debug-location !503 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
10864B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !504; cg.c:338:13
10896B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_15__Error_is_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
10912B	  $d0 = COPY %137:fpr64, debug-location !504; cg.c:338:13
10928B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !504; cg.c:338:13
10944B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !504; cg.c:338:13
10960B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !505; cg.c:339:9
10976B	  PCN_STACKMAP 27, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %137:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !505 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:339:9
10992B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !505; cg.c:339:9
11008B	  B %bb.54, debug-location !505; cg.c:339:9

11024B	bb.52.if.else178:
	; predecessors: %bb.50
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

11056B	  STRWui $wzr, %stack.15.verified, 0, debug-location !506 :: (store 4 into %ir.verified); cg.c:341:22
11072B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !508; cg.c:342:13
11104B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_16__VERIFICAT, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_16__VERIFICAT, debug-location !508; cg.c:342:13
11120B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !508; cg.c:342:13
11136B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !508; cg.c:342:13
11152B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !509; cg.c:343:54
11168B	  PCN_STACKMAP 28, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.7.zeta, 0, 0, %stack.16.zeta_verify_value, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !509 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:343:54
11184B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !509; cg.c:343:54
11200B	  %125:fpr64 = LDRDui %stack.7.zeta, 0, debug-location !509 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
11216B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !510; cg.c:343:13
11248B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_17__Zeta_____, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
11264B	  $d0 = COPY %125:fpr64, debug-location !510; cg.c:343:13
11280B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !510; cg.c:343:13
11296B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !510; cg.c:343:13
11312B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !511; cg.c:344:54
11328B	  PCN_STACKMAP 29, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, 0, %stack.16.zeta_verify_value, 0, %125:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !511 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.16.zeta_verify_value); cg.c:344:54
11344B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !511; cg.c:344:54
11360B	  %128:fpr64 = LDRDui %stack.16.zeta_verify_value, 0, debug-location !511 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
11376B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !512; cg.c:344:13
11408B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_18__The_corre, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
11424B	  $d0 = COPY %128:fpr64, debug-location !512; cg.c:344:13
11440B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !512; cg.c:344:13
11456B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !512; cg.c:344:13
11472B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11488B	  PCN_STACKMAP 30, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, %128:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4)
11504B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
11520B	  B %bb.54

11536B	bb.53.if.else183:
	; predecessors: %bb.49
	  successors: %bb.54(0x80000000); %bb.54(100.00%)

11568B	  STRWui $wzr, %stack.15.verified, 0, debug-location !513 :: (store 4 into %ir.verified); cg.c:348:18
11584B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !515; cg.c:349:9
11616B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_19__Problem_s, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_19__Problem_s, debug-location !515; cg.c:349:9
11632B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !515; cg.c:349:9
11648B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !515; cg.c:349:9
11664B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !516; cg.c:350:9
11680B	  PCN_STACKMAP 31, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !516 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:350:9
11696B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !516; cg.c:350:9
11712B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !516; cg.c:350:9
11744B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_20__NO_VERIFI, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_20__NO_VERIFI, debug-location !516; cg.c:350:9
11760B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !516; cg.c:350:9
11776B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !516; cg.c:350:9
11792B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp
11808B	  PCN_STACKMAP 32, 0, 0, %stack.14.Class, 0, 0, %stack.3.i, 0, 0, %stack.12.mflops, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, 0, %stack.15.verified, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4)
11824B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

11840B	bb.54.if.end186:
	; predecessors: %bb.53, %bb.52, %bb.51
	  successors: %bb.55(0x50000000), %bb.56(0x30000000); %bb.55(62.50%), %bb.56(37.50%)

11856B	  %140:fpr64 = LDRDui %stack.11.t, 0, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
11872B	  FCMPDri %140:fpr64, implicit-def $nzcv, debug-location !520; cg.c:353:9
11888B	  Bcc 0, %bb.56, implicit killed $nzcv, debug-location !520; cg.c:353:9
11904B	  B %bb.55, debug-location !520; cg.c:353:9

11920B	bb.55.if.then189:
	; predecessors: %bb.54
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

11936B	  %142:fpr64 = LDRDui %stack.11.t, 0, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
11952B	  %143:gpr64temp = ADRP target-flags(aarch64-page) %const.1
11968B	  %144:fpr64 = LDRDui %143:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
12000B	  %146:gpr64temp = ADRP target-flags(aarch64-page) %const.2
12016B	  %147:fpr64 = LDRDui %146:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
12024B	  %145:fpr64 = FDIVDrr %144:fpr64, %142:fpr64, debug-location !523; cg.c:356:73
12032B	  %148:fpr64 = FDIVDrr %145:fpr64, %147:fpr64, debug-location !524; cg.c:357:20
12048B	  STRDui %148:fpr64, %stack.12.mflops, 0, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
12064B	  B %bb.57, debug-location !526; cg.c:358:5

12080B	bb.56.if.else192:
	; predecessors: %bb.54
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

12112B	  STRXui $xzr, %stack.12.mflops, 0, debug-location !527 :: (store 8 into %ir.mflops); cg.c:360:16

12128B	bb.57.if.end193:
	; predecessors: %bb.56, %bb.55
	  successors: %bb.58(0x50000000), %bb.67(0x30000000); %bb.58(62.50%), %bb.67(37.50%)

12144B	  %149:gpr32 = LDRSBWui %stack.14.Class, 0, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
12160B	  %150:fpr64 = LDRDui %stack.11.t, 0, debug-location !530 :: (dereferenceable load 8 from %ir.t); cg.c:363:49
12176B	  %151:fpr64 = LDRDui %stack.12.mflops, 0, debug-location !531 :: (dereferenceable load 8 from %ir.mflops); cg.c:363:52
12192B	  %152:gpr32 = LDRWui %stack.15.verified, 0, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
12208B	  ADJCALLSTACKDOWN 88, 0, implicit-def dead $sp, implicit $sp, debug-location !533; cg.c:363:5
12224B	  %153:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_31_randdp_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
12272B	  %155:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_30__O3__mcmod, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_30__O3__mcmod, debug-location !533; cg.c:363:5
12304B	  %156:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_29__g__Wall__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_29__g__Wall__, debug-location !533; cg.c:363:5
12336B	  %157:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_28__I___commo, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_28__I___commo, debug-location !533; cg.c:363:5
12368B	  %158:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_27__lm_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_27__lm_, debug-location !533; cg.c:363:5
12400B	  %159:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_26___CC__, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_26___CC__, debug-location !533; cg.c:363:5
12432B	  %160:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_25_gcc_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_25_gcc_, debug-location !533; cg.c:363:5
12464B	  %161:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_24_03_Nov_201, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_24_03_Nov_201, debug-location !533; cg.c:363:5
12472B	  STRXui %153:gpr64, $sp, 10, debug-location !533 :: (store 8 into stack + 80); cg.c:363:5
12496B	  %162:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_23_3_3_1_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_23_3_3_1_, debug-location !533; cg.c:363:5
12528B	  STRWui %152:gpr32, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
12532B	  STRXui %156:gpr64, $sp, 8, debug-location !533 :: (store 8 into stack + 64); cg.c:363:5
12536B	  STRXui %155:gpr64, $sp, 9, debug-location !533 :: (store 8 into stack + 72); cg.c:363:5
12544B	  %163:gpr64 = MOVaddr target-flags(aarch64-page) @cg__str_22___________, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_22___________, debug-location !533; cg.c:363:5
12548B	  STRXui %158:gpr64, $sp, 6, debug-location !533 :: (store 8 into stack + 48); cg.c:363:5
12552B	  STRXui %157:gpr64, $sp, 7, debug-location !533 :: (store 8 into stack + 56); cg.c:363:5
12624B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_21_CG_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_21_CG_, debug-location !533; cg.c:363:5
12628B	  STRXui %160:gpr64, $sp, 4, debug-location !533 :: (store 8 into stack + 32); cg.c:363:5
12632B	  STRXui %159:gpr64, $sp, 5, debug-location !533 :: (store 8 into stack + 40); cg.c:363:5
12640B	  STRXui %162:gpr64, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
12648B	  STRXui %161:gpr64, $sp, 3, debug-location !533 :: (store 8 into stack + 24); cg.c:363:5
12664B	  $w2 = MOVi32imm 75000, debug-location !533; cg.c:363:5
12704B	  $w5 = MOVi32imm 75, debug-location !533; cg.c:363:5
12708B	  STRXui %163:gpr64, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5
12712B	  $w1 = COPY %149:gpr32, debug-location !533; cg.c:363:5
12720B	  $w3 = COPY $wzr, debug-location !533; cg.c:363:5
12728B	  $w4 = COPY $wzr, debug-location !533; cg.c:363:5
12736B	  $d0 = COPY %150:fpr64, debug-location !533; cg.c:363:5
12744B	  $d1 = COPY %151:fpr64, debug-location !533; cg.c:363:5
12752B	  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit killed $w2, implicit $w3, implicit $w4, implicit killed $w5, implicit $d0, implicit killed $d1, implicit-def $sp, debug-location !533; cg.c:363:5
12768B	  ADJCALLSTACKUP 88, 0, implicit-def $sp, implicit $sp, debug-location !533; cg.c:363:5
12784B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !534; cg.c:370:9
12800B	  PCN_STACKMAP 33, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %149:gpr32, %150:fpr64, %151:fpr64, %152:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !534 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:370:9
12816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !534; cg.c:370:9
12832B	  %167:gpr64temp = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
12848B	  %168:gpr32 = LDRWui %167:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9
12864B	  CBZW %168:gpr32, %bb.67, debug-location !536; cg.c:370:9
12880B	  B %bb.58, debug-location !536; cg.c:370:9

12896B	bb.58.if.then195:
	; predecessors: %bb.57
	  successors: %bb.59(0x50000000), %bb.60(0x30000000); %bb.59(62.50%), %bb.60(37.50%)

12912B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !537; cg.c:371:16
12944B	  $w0 = MOVi32imm 1, debug-location !537; cg.c:371:16
12960B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !537; cg.c:371:16
12976B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !537; cg.c:371:16
12992B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !539; cg.c:371:14
13008B	  PCN_STACKMAP 34, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !539 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:371:14
13024B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !539; cg.c:371:14
13040B	  %170:fpr64 = COPY $d0, debug-location !537; cg.c:371:16
13072B	  FCMPDri %170:fpr64, implicit-def $nzcv, debug-location !543; cg.c:372:13
13080B	  STRDui %170:fpr64, %stack.13.tmax, 0, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
13088B	  Bcc 1, %bb.60, implicit killed $nzcv, debug-location !543; cg.c:372:13
13104B	  B %bb.59, debug-location !543; cg.c:372:13

13120B	bb.59.if.then199:
	; predecessors: %bb.58
	  successors: %bb.60(0x80000000); %bb.60(100.00%)

13136B	  %171:gpr64 = MOVi64imm 4607182418800017408
13152B	  STRXui %171:gpr64, %stack.13.tmax, 0, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18

13168B	bb.60.if.end200:
	; predecessors: %bb.58, %bb.59
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

13184B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !546; cg.c:374:9
13216B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_32___SECTION_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_32___SECTION_, debug-location !546; cg.c:374:9
13232B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !546; cg.c:374:9
13248B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !546; cg.c:374:9
13264B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !547; cg.c:375:16
13280B	  PCN_STACKMAP 35, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !547 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:375:16
13296B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !547; cg.c:375:16
13376B	  %185:gpr64temp = ADRP target-flags(aarch64-page) %const.3
13392B	  %186:fpr64 = LDRDui %185:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
13396B	  STRWui $wzr, %stack.3.i, 0, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
13400B	  %205:gpr64sp = ADDXri %stack.19.t_names, 0, 0

13456B	bb.61.for.cond202:
	; predecessors: %bb.60, %bb.66
	  successors: %bb.62(0x7c000000), %bb.67(0x04000000); %bb.62(96.88%), %bb.67(3.12%)

13472B	  %175:gpr32common = LDRWui %stack.3.i, 0, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
13488B	  dead $wzr = SUBSWri %175:gpr32common, 2, 0, implicit-def $nzcv, debug-location !553; cg.c:375:9
13504B	  Bcc 12, %bb.67, implicit killed $nzcv, debug-location !553; cg.c:375:9
13520B	  B %bb.62, debug-location !553; cg.c:375:9

13536B	bb.62.for.body205:
	; predecessors: %bb.61
	  successors: %bb.63(0x30000000), %bb.64(0x50000000); %bb.63(37.50%), %bb.64(62.50%)

13552B	  %178:gpr32 = LDRWui %stack.3.i, 0, debug-location !554 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
13568B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !556; cg.c:376:17
13584B	  $w0 = COPY %178:gpr32, debug-location !556; cg.c:376:17
13600B	  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !556; cg.c:376:17
13616B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !556; cg.c:376:17
13632B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !557; cg.c:376:15
13648B	  PCN_STACKMAP 36, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %178:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !557 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:376:15
13664B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !557; cg.c:376:15
13712B	  %180:gpr32 = LDRWui %stack.3.i, 0, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
13716B	  %179:fpr64 = COPY $d0, debug-location !556; cg.c:376:17
13720B	  STRDui %179:fpr64, %stack.11.t, 0, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
13728B	  CBNZW %180:gpr32, %bb.64, debug-location !561; cg.c:377:17
13744B	  B %bb.63, debug-location !561; cg.c:377:17

13760B	bb.63.if.then209:
	; predecessors: %bb.62
	  successors: %bb.66(0x80000000); %bb.66(100.00%)

13776B	  %204:gpr64 = LDRSWui %stack.3.i, 0, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
13792B	  %206:gpr64 = LDRXroX %205:gpr64sp, %204:gpr64, 0, 1, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
13808B	  %207:fpr64 = LDRDui %stack.11.t, 0, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
13824B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !566; cg.c:378:17
13840B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_33____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
13856B	  $x1 = COPY %206:gpr64, debug-location !566; cg.c:378:17
13872B	  $d0 = COPY %207:fpr64, debug-location !566; cg.c:378:17
13888B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !566; cg.c:378:17
13904B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !566; cg.c:378:17
13920B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !567; cg.c:379:13
13936B	  PCN_STACKMAP 37, 0, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %206:gpr64, %207:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !567 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:379:13
13952B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !567; cg.c:379:13
13968B	  B %bb.66, debug-location !567; cg.c:379:13

13984B	bb.64.if.else213:
	; predecessors: %bb.62
	  successors: %bb.65(0x40000000), %bb.66(0x40000000); %bb.65(50.00%), %bb.66(50.00%)

14000B	  %181:gpr64 = LDRSWui %stack.3.i, 0, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
14032B	  %184:fpr64 = LDRDui %stack.11.t, 0, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
14064B	  %188:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
14068B	  %183:gpr64 = LDRXroX %205:gpr64sp, %181:gpr64, 0, 1, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
14072B	  %187:fpr64 = FMULDrr %184:fpr64, %186:fpr64, debug-location !573; cg.c:382:26
14080B	  %189:fpr64 = FDIVDrr %187:fpr64, %188:fpr64, debug-location !575; cg.c:382:34
14096B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !576; cg.c:381:17
14112B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_34____8s__9_3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
14128B	  $x1 = COPY %183:gpr64, debug-location !576; cg.c:381:17
14144B	  $d0 = COPY %184:fpr64, debug-location !576; cg.c:381:17
14160B	  $d1 = COPY %189:fpr64, debug-location !576; cg.c:381:17
14176B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !576; cg.c:381:17
14192B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !576; cg.c:381:17
14208B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !577; cg.c:383:21
14224B	  PCN_STACKMAP 38, 0, %189:fpr64, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %183:gpr64, %184:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !577 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:383:21
14240B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !577; cg.c:383:21
14256B	  %192:gpr32common = LDRWui %stack.3.i, 0, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
14272B	  dead $wzr = SUBSWri %192:gpr32common, 2, 0, implicit-def $nzcv, debug-location !580; cg.c:383:21
14288B	  Bcc 1, %bb.66, implicit killed $nzcv, debug-location !580; cg.c:383:21
14304B	  B %bb.65, debug-location !580; cg.c:383:21

14320B	bb.65.if.then221:
	; predecessors: %bb.64
	  successors: %bb.66(0x80000000); %bb.66(100.00%)

14336B	  %194:fpr64 = LDRDui %stack.13.tmax, 0, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
14352B	  %195:fpr64 = LDRDui %stack.11.t, 0, debug-location !583 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
14368B	  %196:fpr64 = FSUBDrr %194:fpr64, %195:fpr64, debug-location !584; cg.c:384:30
14384B	  STRDui %196:fpr64, %stack.11.t, 0, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
14400B	  %199:fpr64 = FMULDrr %196:fpr64, %186:fpr64, debug-location !588; cg.c:386:30
14416B	  %200:fpr64 = FDIVDrr %199:fpr64, %194:fpr64, debug-location !590; cg.c:386:38
14432B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !591; cg.c:385:21
14448B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_35__________8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, debug-location !591; cg.c:385:21
14464B	  $x1 = MOVaddr target-flags(aarch64-page) @cg__str_36_rest_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_36_rest_, debug-location !591; cg.c:385:21
14480B	  $d0 = COPY %196:fpr64, debug-location !591; cg.c:385:21
14496B	  $d1 = COPY %200:fpr64, debug-location !591; cg.c:385:21
14512B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit killed $d1, implicit-def $sp, implicit-def dead $w8, debug-location !591; cg.c:385:21
14528B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !591; cg.c:385:21
14544B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !592; cg.c:387:17
14560B	  PCN_STACKMAP 39, 0, %200:fpr64, 0, %stack.3.i, 0, 0, %stack.11.t, 0, 0, %stack.19.t_names, 0, 0, %stack.13.tmax, 0, %196:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !592 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:387:17
14576B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !592; cg.c:387:17

14592B	bb.66.for.inc228:
	; predecessors: %bb.64, %bb.65, %bb.63
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

14608B	  %210:gpr32common = LDRWui %stack.3.i, 0, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
14624B	  %211:gpr32common = nsw ADDWri %210:gpr32common, 1, 0, debug-location !593; cg.c:375:34
14640B	  STRWui %211:gpr32common, %stack.3.i, 0, debug-location !593 :: (store 4 into %ir.i); cg.c:375:34
14656B	  B %bb.61, debug-location !594; cg.c:375:9

14672B	bb.67.do.end235:
	; predecessors: %bb.57, %bb.61

14704B	  $w8 = COPY $wzr, debug-location !597; cg.c:394:5
14720B	  RET_ReallyLR implicit killed $w8, debug-location !597; cg.c:394:5

# End machine code for function main.

Before post-MI-sched:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=4, align=4, at location [SP-48]
  fi#2: size=8, align=8, at location [SP-56]
  fi#3: size=4, align=4, at location [SP-60]
  fi#4: size=4, align=4, at location [SP-64]
  fi#5: size=4, align=4, at location [SP-68]
  fi#6: size=4, align=4, at location [SP-72]
  fi#7: size=8, align=8, at location [SP-80]
  fi#8: size=8, align=8, at location [SP-88]
  fi#9: size=8, align=8, at location [SP-96]
  fi#10: size=8, align=8, at location [SP-104]
  fi#11: size=8, align=8, at location [SP-112]
  fi#12: size=8, align=8, at location [SP-120]
  fi#13: size=8, align=8, at location [SP-128]
  fi#14: size=1, align=4, at location [SP-132]
  fi#15: size=4, align=4, at location [SP-136]
  fi#16: size=8, align=8, at location [SP-144]
  fi#17: size=8, align=8, at location [SP-152]
  fi#18: size=8, align=8, at location [SP-160]
  fi#19: size=24, align=16, at location [SP-192]
  fi#20: size=8, align=8, at location [SP-200]
  fi#21: size=8, align=8, at location [SP-208]
  fi#22: size=8, align=8, at location [SP-216]
  fi#23: size=8, align=8, at location [SP-224]
  fi#24: size=8, align=8, at location [SP-232]
  fi#25: size=8, align=8, at location [SP-240]
  fi#26: size=4, align=4, at location [SP-244]
  fi#27: dead
  fi#28: dead
  fi#29: dead
  fi#30: dead
  fi#31: dead
  fi#32: dead
  fi#33: dead
  fi#34: dead
  fi#35: dead
  fi#36: dead
  fi#37: dead
  fi#38: dead
  fi#39: dead
  fi#40: dead
  fi#41: dead
  fi#42: dead
  fi#43: dead
  fi#44: dead
  fi#45: dead
  fi#46: dead
  fi#47: dead
  fi#48: dead
  fi#49: size=8, align=8, at location [SP-40]
  fi#50: size=8, align=8, at location [SP-8]
  fi#51: size=8, align=8, at location [SP-16]
  fi#52: size=8, align=8, at location [SP-24]
  fi#53: size=8, align=8, at location [SP-32]
Constant Pool:
  cp#0: 0x41D2309CE5400000, align=8
  cp#1: 0x422979CA8D600000, align=8
  cp#2: 1.000000e+06, align=8
  cp#3: 1.000000e+02, align=8
  cp#4: 1.000000e+00, align=8
  cp#5: 6.000000e+01, align=8
Function Live Ins: $w0, $x1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $x1, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 336, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 38 :: (store 8 into %stack.53), (store 8 into %stack.52)
  frame-setup STPXi killed $fp, killed $lr, $sp, 40 :: (store 8 into %stack.51), (store 8 into %stack.50)
  $fp = frame-setup ADDXri $sp, 320, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  STURXi killed renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
  STURWi $wzr, $fp, -44, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $w8 = LDURWi $fp, -44, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  Bcc 12, %bb.3, implicit $nzcv, debug-location !138; cg.c:117:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $w19 = LDURWi $fp, -44, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
  $w0 = ORRWrs $wzr, $w19, 0, debug-location !141; cg.c:118:9
  BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !141; cg.c:118:9
  PCN_STACKMAP 0, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -184, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !142 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:119:5
  renamable $w8 = LDURWi $fp, -44, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !143; cg.c:117:30
  STURWi killed renamable $w8, $fp, -44, debug-location !143 :: (store 4 into %ir.i); cg.c:117:30
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x50000000), %bb.5(0x30000000); %bb.4(62.50%), %bb.5(37.50%)

  $x0 = ADRP target-flags(aarch64-page) @cg__str_timer_flag, debug-location !153; cg.c:122:15
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, 0, debug-location !153; cg.c:122:15
  $x1 = ADRP target-flags(aarch64-page) @cg__str_1_r_, debug-location !153; cg.c:122:15
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_1_r_, 0, debug-location !153; cg.c:122:15
  BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !153; cg.c:122:15
  PCN_STACKMAP 1, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -184, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !155 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.20.fp), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:122:13
  STRXui renamable $x8, $sp, 17, debug-location !155 :: (store 8 into %ir.fp); cg.c:122:13
  CBZX killed renamable $x8, %bb.5, debug-location !157; cg.c:122:9

bb.4.if.then:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
  $w16 = MOVZWi 1, 0
  $x17 = ADRP target-flags(aarch64-page) @cg__str_2_init_, debug-location !161; cg.c:124:25
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_2_init_, 0, debug-location !161; cg.c:124:25
  STRWui killed renamable $w16, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
  $x8 = ADRP target-flags(aarch64-page) @cg__str_3_benchmk_, debug-location !163; cg.c:125:26
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_3_benchmk_, 0, debug-location !163; cg.c:125:26
  renamable $x19 = LDRXui $sp, 17, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  STPXi renamable $x17, renamable $x8, $sp, 18, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx2); cg.c:124:25
  $x16 = ADRP target-flags(aarch64-page) @cg__str_4_conjgd_, debug-location !165; cg.c:126:30
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_4_conjgd_, 0, debug-location !165; cg.c:126:30
  STRXui killed renamable $x16, $sp, 20, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !167; cg.c:127:9
  BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !167; cg.c:127:9
  PCN_STACKMAP 2, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, killed renamable $x19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !168 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:128:5
  B %bb.6

bb.5.if.else:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
  STRWui $wzr, killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !169 :: (store 4 into @timeron); cg.c:130:17

bb.6.if.end:
; predecessors: %bb.5, %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $w19 = MOVZWi 9464, 0
  $w19 = MOVKWi $w19(tied-def 0), 1, 16
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !172; cg.c:133:5
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !172; cg.c:133:5
  PCN_STACKMAP 3, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !173 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:135:14
  renamable $x16 = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
  renamable $w8 = SUBWri renamable $w19, 1, 0, debug-location !174; cg.c:136:13
  renamable $x17 = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
  renamable $x18 = ADRP target-flags(aarch64-page) @firstcol, debug-location !175; cg.c:137:14
  renamable $x6 = ADRP target-flags(aarch64-page) @lastcol, debug-location !176; cg.c:138:13
  STRWui renamable $w8, killed renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
  STRWui killed renamable $w8, killed renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
  $w8 = MOVZWi 66, 0
  STURBBi killed renamable $w8, $fp, -116, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  $x8 = MOVZXi 17818, 0
  $x8 = MOVKXi $x8(tied-def 0), 31978, 16
  $x8 = MOVKXi $x8(tied-def 0), 46710, 32
  $x8 = MOVKXi $x8(tied-def 0), 16438, 48
  STRWui $wzr, killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
  STRWui $wzr, killed renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
  STURXi killed renamable $x8, $fp, -128, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  $x0 = ADRP target-flags(aarch64-page) @cg__str_5____NAS_Par, debug-location !184; cg.c:172:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_5____NAS_Par, 0, debug-location !184; cg.c:172:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !184; cg.c:172:5
  PCN_STACKMAP 4, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !185 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:173:5
  $x0 = ADRP target-flags(aarch64-page) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, 0, debug-location !185; cg.c:173:5
  $w1 = MOVZWi 9464, 0, debug-location !185; cg.c:173:5
  $w1 = MOVKWi $w1(tied-def 0), 1, 16, debug-location !185; cg.c:173:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !185; cg.c:173:5
  PCN_STACKMAP 5, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !186 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:174:5
  $x0 = ADRP target-flags(aarch64-page) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, 0, debug-location !186; cg.c:174:5
  $w1 = MOVZWi 75, 0, debug-location !186; cg.c:174:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !186; cg.c:174:5
  PCN_STACKMAP 6, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !187 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:175:5
  $x0 = ADRP target-flags(aarch64-page) @cg__str_8___, debug-location !187; cg.c:175:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_8___, 0, debug-location !187; cg.c:175:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !187; cg.c:175:5
  PCN_STACKMAP 7, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !188 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:177:9
  renamable $x17 = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
  renamable $x18 = ADRP target-flags(aarch64-page) @nzz, debug-location !189; cg.c:178:9
  $x8 = ADRP target-flags(aarch64-page) @tran, debug-location !190; cg.c:183:10
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !190; cg.c:183:10
  $x16 = MOVZXi 41216, 16
  $x16 = MOVKXi $x16(tied-def 0), 47536, 32
  $x16 = MOVKXi $x16(tied-def 0), 16818, 48
  STRXui killed renamable $x16, killed renamable $x8, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
  $w8 = MOVZWi 19936, 0
  $w8 = MOVKWi $w8(tied-def 0), 224, 16
  renamable $x16 = ADRP target-flags(aarch64-page) @amult, debug-location !191; cg.c:184:11
  STRWui killed renamable $w8, killed renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
  $x8 = MOVZXi 58688, 16
  $x8 = MOVKXi $x8(tied-def 0), 12444, 32
  $x8 = MOVKXi $x8(tied-def 0), 16850, 48
  STRWui killed renamable $w19, killed renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
  STRXui killed renamable $x8, killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !193; cg.c:185:12
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !193; cg.c:185:12
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !193; cg.c:185:12
  PCN_STACKMAP 8, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, 1, 8, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !194 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value), (load 8 from %stack.21); cg.c:185:10
  renamable $x8 = ADRP target-flags(aarch64-page) @naa, debug-location !195; cg.c:190:11
  renamable $w0 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
  STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.24)
  renamable $x8 = ADRP target-flags(aarch64-page) @nzz, debug-location !196; cg.c:190:16
  renamable $w1 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  renamable $x8 = ADRP target-flags(aarch64-page) @firstrow, debug-location !197; cg.c:190:40
  renamable $w5 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  STPWi renamable $w5, renamable $w1, $sp, 23 :: (store 4 into %stack.25), (store 4 into %stack.26)
  renamable $x8 = ADRP target-flags(aarch64-page) @lastrow, debug-location !198; cg.c:190:50
  renamable $w2 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  STRWui renamable $w2, $sp, 28 :: (store 4 into %stack.23)
  renamable $x8 = ADRP target-flags(aarch64-page) @firstcol, debug-location !199; cg.c:190:59
  renamable $w3 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  STRWui renamable $w3, $sp, 30 :: (store 4 into %stack.22)
  renamable $x8 = ADRP target-flags(aarch64-page) @lastcol, debug-location !200; cg.c:190:69
  renamable $w4 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  STRWui renamable $w4, $sp, 32 :: (store 4 into %stack.21)
  STURDi killed renamable $d0, $fp, -64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
  $x8 = ADRP target-flags(aarch64-page) @iv, debug-location !201; cg.c:190:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @iv, 0, debug-location !201; cg.c:190:5
  $x16 = ADRP target-flags(aarch64-page) @aelt, debug-location !201; cg.c:190:5
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @aelt, 0, debug-location !201; cg.c:190:5
  $x17 = ADRP target-flags(aarch64-page) @acol, debug-location !201; cg.c:190:5
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @acol, 0, debug-location !201; cg.c:190:5
  $x18 = ADRP target-flags(aarch64-page) @arow, debug-location !201; cg.c:190:5
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @arow, 0, debug-location !201; cg.c:190:5
  STRWui killed renamable $w4, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
  STRWui killed renamable $w3, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
  STRWui killed renamable $w2, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
  $x20 = ADRP target-flags(aarch64-page) @colidx, debug-location !201; cg.c:190:5
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !201; cg.c:190:5
  $x2 = ADRP target-flags(aarch64-page) @a, debug-location !201; cg.c:190:5
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !201; cg.c:190:5
  $x3 = ADRP target-flags(aarch64-page) @colidx, debug-location !201; cg.c:190:5
  $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !201; cg.c:190:5
  $x4 = ADRP target-flags(aarch64-page) @rowstr, debug-location !201; cg.c:190:5
  $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !201; cg.c:190:5
  STPXi renamable $x16, renamable $x8, $sp, 5, debug-location !201 :: (store 8 into stack + 40), (store 8 into stack + 48); cg.c:190:5
  STPXi renamable $x18, renamable $x17, $sp, 3, debug-location !201 :: (store 8 into stack + 24), (store 8 into stack + 32); cg.c:190:5
  $x19 = ADRP target-flags(aarch64-page) @rowstr, debug-location !201; cg.c:190:5
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !201; cg.c:190:5
  BL @makea, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $x2, implicit $x3, implicit $x4, implicit $w5, implicit-def $sp, debug-location !201; cg.c:190:5
  renamable $x7 = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
  renamable $x6 = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
  PCN_STACKMAP 9, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, 1, 4, $fp, -216, 1, 4, $fp, -224, 1, 4, $fp, -228, 1, 4, $fp, -208, 1, 4, $fp, -200, 1, 4, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !202 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value), (load 4 from %stack.21), (load 4 from %stack.22), (load 4 from %stack.23), (load 4 from %stack.24), (load 4 from %stack.25), (load 4 from %stack.26); cg.c:202:12
  STURWi $wzr, $fp, -48, debug-location !202 :: (store 4 into %ir.j); cg.c:202:12

bb.7.for.cond10:
; predecessors: %bb.6, %bb.11
  successors: %bb.8(0x7c000000), %bb.12(0x04000000); %bb.8(96.88%), %bb.12(3.12%)
  liveins: $x6, $x7, $x19, $x20
  renamable $w8 = LDRWui renamable $x7, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !208 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  renamable $w17 = LDURWi $fp, -48, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  $w8 = SUBWrs killed renamable $w8, killed renamable $w16, 0, debug-location !209; cg.c:202:29
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !210; cg.c:202:40
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !212; cg.c:202:5
  Bcc 10, %bb.12, implicit $nzcv, debug-location !212; cg.c:202:5

bb.8.for.body12:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x6, $x7, $x19, $x20
  renamable $x8 = LDURSWi $fp, -48, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  renamable $w8 = LDRWroX renamable $x19, killed renamable $x8, 0, 1, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18

bb.9.for.cond14:
; predecessors: %bb.8, %bb.10
  successors: %bb.10(0x7c000000), %bb.11(0x04000000); %bb.10(96.88%), %bb.11(3.12%)
  liveins: $x6, $x7, $x19, $x20, $w8
  STURWi killed renamable $w8, $fp, -52, debug-location !DILocation(line: 0, scope: !214) :: (store 4 into %ir.k); cg.c:0
  renamable $w16, $w8 = LDPWi $fp, -13, debug-location !221 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:203:40
  $w8 = KILL $w8, implicit-def $x8, debug-location !221; cg.c:203:40
  $x8 = SBFMXri $x8, 0, 31, debug-location !221; cg.c:203:40
  renamable $x8 = ADDXrs renamable $x19, killed renamable $x8, 2, debug-location !223; cg.c:203:33
  renamable $w8 = LDRWui killed renamable $x8, 1, debug-location !223 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  $wzr = SUBSWrs killed renamable $w16, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !225; cg.c:203:9
  Bcc 10, %bb.11, implicit $nzcv, debug-location !225; cg.c:203:9

bb.10.for.body19:
; predecessors: %bb.9
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x6, $x7, $x19, $x20
  renamable $x8 = LDURSWi $fp, -52, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  renamable $x16 = ADRP target-flags(aarch64-page) @firstcol, debug-location !229; cg.c:204:37
  renamable $w16 = LDRWui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  renamable $x17 = UBFMXri renamable $x8, 62, 61, debug-location !228; cg.c:204:25
  renamable $w18 = LDRWroX renamable $x20, renamable $x17, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !234; cg.c:203:49
  $w16 = SUBWrs killed renamable $w18, killed renamable $w16, 0, debug-location !230; cg.c:204:35
  STRWroX killed renamable $w16, renamable $x20, killed renamable $x17, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  B %bb.9

bb.11.for.inc28:
; predecessors: %bb.9
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x6, $x7, $x19, $x20
  renamable $w8 = LDURWi $fp, -48, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !238; cg.c:202:46
  STURWi killed renamable $w8, $fp, -48, debug-location !238 :: (store 4 into %ir.j); cg.c:202:46
  B %bb.7

bb.12.for.end30:
; predecessors: %bb.7
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  STURWi $wzr, $fp, -44, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
  $x8 = ADRP target-flags(aarch64-page) @x
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  $x16 = MOVZXi 16368, 48
  $w0 = MOVZWi 9464, 0
  $w0 = MOVKWi $w0(tied-def 0), 1, 16

bb.13.for.cond31:
; predecessors: %bb.12, %bb.14
  successors: %bb.14(0x7c000000), %bb.15(0x04000000); %bb.14(96.88%), %bb.15(3.12%)
  liveins: $w0, $x8, $x16
  renamable $w17 = LDURWi $fp, -44, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  renamable $w18 = ADDWri renamable $w0, 1, 0, debug-location !247; cg.c:211:19
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w18, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !248; cg.c:211:5
  Bcc 10, %bb.15, implicit $nzcv, debug-location !248; cg.c:211:5

bb.14.for.body33:
; predecessors: %bb.13
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $w0, $x8, $x16
  renamable $x17 = LDURSWi $fp, -44, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit killed $x17, debug-location !253; cg.c:211:30
  STURWi killed renamable $w17, $fp, -44, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
  B %bb.13

bb.15.for.end38:
; predecessors: %bb.13
  successors: %bb.16(0x80000000); %bb.16(100.00%)

  STURWi $wzr, $fp, -48, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
  renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
  $x17 = ADRP target-flags(aarch64-page) @q
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  $x18 = ADRP target-flags(aarch64-page) @z
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  $x0 = ADRP target-flags(aarch64-page) @r
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  $x1 = ADRP target-flags(aarch64-page) @p
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @p, 0

bb.16.for.cond39:
; predecessors: %bb.15, %bb.17
  successors: %bb.17(0x7c000000), %bb.18(0x04000000); %bb.17(96.88%), %bb.18(3.12%)
  liveins: $x0, $x1, $x8, $x16, $x17, $x18
  renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  renamable $w3 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !263 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  renamable $w4 = LDURWi $fp, -48, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  $w2 = SUBWrs killed renamable $w2, killed renamable $w3, 0, debug-location !264; cg.c:214:29
  renamable $w2 = nsw ADDWri killed renamable $w2, 1, 0, debug-location !265; cg.c:214:40
  $wzr = SUBSWrs killed renamable $w4, killed renamable $w2, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !267; cg.c:214:5
  Bcc 10, %bb.18, implicit $nzcv, debug-location !267; cg.c:214:5

bb.17.for.body43:
; predecessors: %bb.16
  successors: %bb.16(0x80000000); %bb.16(100.00%)
  liveins: $x0, $x1, $x8, $x16, $x17, $x18
  renamable $x2 = LDURSWi $fp, -48, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  renamable $x3 = UBFMXri renamable $x2, 61, 60, debug-location !279; cg.c:218:9
  renamable $w2 = nsw ADDWri renamable $w2, 1, 0, implicit killed $x2, debug-location !281; cg.c:214:46
  STRXroX $xzr, renamable $x17, renamable $x3, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  STRXroX $xzr, renamable $x18, renamable $x3, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  STRXroX $xzr, renamable $x0, renamable $x3, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  STRXroX $xzr, renamable $x1, killed renamable $x3, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  STURWi killed renamable $w2, $fp, -48, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
  B %bb.16

bb.18.for.end54:
; predecessors: %bb.16
  successors: %bb.19(0x80000000); %bb.19(100.00%)

  STURXi $xzr, $fp, -64, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
  $w8 = MOVZWi 1, 0
  $x20 = ADRP target-flags(aarch64-page) @x
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  renamable $x16 = ADRP target-flags(aarch64-page) %const.4
  STURWi killed renamable $w8, $fp, -56, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
  renamable $d0 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  STRDui killed renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  $x19 = ADRP target-flags(aarch64-page) @z
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @z, 0

bb.19.for.cond55:
; predecessors: %bb.18, %bb.28
  successors: %bb.20(0x7c000000), %bb.29(0x04000000); %bb.20(96.88%), %bb.29(3.12%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -56, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !292; cg.c:228:5
  Bcc 12, %bb.29, implicit $nzcv, debug-location !292; cg.c:228:5

bb.20.for.body57:
; predecessors: %bb.19
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $x19, $x20
  $x8 = SUBXri $fp, 72, 0, debug-location !293; cg.c:232:9
  STRXui killed renamable $x8, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
  $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !293; cg.c:232:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !293; cg.c:232:9
  $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !293; cg.c:232:9
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !293; cg.c:232:9
  $x2 = ADRP target-flags(aarch64-page) @x, debug-location !293; cg.c:232:9
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !293; cg.c:232:9
  $x3 = ADRP target-flags(aarch64-page) @z, debug-location !293; cg.c:232:9
  $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @z, 0, debug-location !293; cg.c:232:9
  $x4 = ADRP target-flags(aarch64-page) @a, debug-location !293; cg.c:232:9
  $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !293; cg.c:232:9
  $x5 = ADRP target-flags(aarch64-page) @p, debug-location !293; cg.c:232:9
  $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @p, 0, debug-location !293; cg.c:232:9
  $x8 = ADRP target-flags(aarch64-page) @q, debug-location !293; cg.c:232:9
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0, debug-location !293; cg.c:232:9
  STRXui killed renamable $x8, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
  $x8 = ADRP target-flags(aarch64-page) @r, debug-location !293; cg.c:232:9
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @r, 0, debug-location !293; cg.c:232:9
  STRXui killed renamable $x8, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
  BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit-def $sp, debug-location !293; cg.c:232:9
  renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  PCN_STACKMAP 10, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !295 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:240:20
  STPXi $xzr, $xzr, $fp, -11, debug-location !295 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:240:20
  STURWi $wzr, $fp, -48, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16

bb.21.for.cond58:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)
  liveins: $x6, $x18, $x19, $x20
  renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !303 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  renamable $w17 = LDURWi $fp, -48, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  $w8 = SUBWrs killed renamable $w8, killed renamable $w16, 0, debug-location !304; cg.c:242:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !305; cg.c:242:44
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !307; cg.c:242:9
  Bcc 10, %bb.23, implicit $nzcv, debug-location !307; cg.c:242:9

bb.22.for.body62:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $x6, $x18, $x19, $x20
  renamable $x8 = LDURSWi $fp, -48, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !319; cg.c:244:39
  renamable $d0 = LDRDroX renamable $x20, renamable $x16, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  renamable $d1 = LDRDroX renamable $x19, killed renamable $x16, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  renamable $d3, renamable $d2 = LDPDi $fp, -11, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1), (dereferenceable load 8 from %ir.norm_temp2); cg.c:243:26
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d1, debug-location !314; cg.c:243:44
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !315; cg.c:243:37
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !325; cg.c:242:50
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d1, debug-location !322; cg.c:244:44
  renamable $d1 = FADDDrr killed renamable $d3, killed renamable $d1, debug-location !323; cg.c:244:37
  STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !316 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:243:24
  STURWi killed renamable $w8, $fp, -48, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
  B %bb.21

bb.23.for.end76:
; predecessors: %bb.21
  successors: %bb.25(0x50000000), %bb.24(0x30000000); %bb.25(62.50%), %bb.24(37.50%)
  liveins: $x6, $x18, $x19, $x20
  renamable $d1 = LDURDi $fp, -88, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  renamable $d0 = FSQRTDr renamable $d1, debug-location !330; cg.c:247:28
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !331; cg.c:247:26
  Bcc 7, %bb.25, implicit $nzcv, debug-location !331; cg.c:247:26

bb.24.call.sqrt:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $d1, $x19, $x20
  $q0 = ORRv16i8 $q1, $q1, debug-location !331; cg.c:247:26
  STRDui killed renamable $d1, $sp, 15 :: (store 8 into %stack.22)
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !331; cg.c:247:26
  renamable $d1 = LDRDui $sp, 15 :: (load 8 from %stack.22)
  renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  renamable $x18 = ADRP target-flags(aarch64-page) @lastcol

bb.25.for.end76.split:
; predecessors: %bb.23, %bb.24
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $d0, $d1, $x6, $x18, $x19, $x20
  PCN_STACKMAP 11, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, killed renamable $d1, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !331 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:247:26
  renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.21)
  renamable $d0 = FDIVDrr killed renamable $d1, killed renamable $d0, debug-location !331; cg.c:247:26
  STURDi killed renamable $d0, $fp, -88, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  STURWi $wzr, $fp, -48, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16

bb.26.for.cond78:
; predecessors: %bb.25, %bb.27
  successors: %bb.27(0x7c000000), %bb.28(0x04000000); %bb.27(96.88%), %bb.28(3.12%)
  liveins: $x6, $x18, $x19, $x20
  renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !339 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  renamable $w17 = LDURWi $fp, -48, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  $w8 = SUBWrs killed renamable $w8, killed renamable $w16, 0, debug-location !340; cg.c:252:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !341; cg.c:252:44
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !343; cg.c:252:9
  Bcc 10, %bb.28, implicit $nzcv, debug-location !343; cg.c:252:9

bb.27.for.body82:
; predecessors: %bb.26
  successors: %bb.26(0x80000000); %bb.26(100.00%)
  liveins: $x6, $x18, $x19, $x20
  renamable $x8 = LDURSWi $fp, -48, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  renamable $d0 = LDURDi $fp, -88, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !347; cg.c:253:33
  renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !352; cg.c:252:50
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !348; cg.c:253:31
  STRDroX killed renamable $d0, renamable $x20, killed renamable $x16, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  STURWi killed renamable $w8, $fp, -48, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
  B %bb.26

bb.28.for.inc91:
; predecessors: %bb.26
  successors: %bb.19(0x80000000); %bb.19(100.00%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -56, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !356; cg.c:228:29
  STURWi killed renamable $w8, $fp, -56, debug-location !356 :: (store 4 into %ir.it); cg.c:228:29
  B %bb.19

bb.29.for.end93:
; predecessors: %bb.19
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  STURWi $wzr, $fp, -44, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
  $x8 = ADRP target-flags(aarch64-page) @x
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  $x16 = MOVZXi 16368, 48
  $w0 = MOVZWi 9464, 0
  $w0 = MOVKWi $w0(tied-def 0), 1, 16

bb.30.for.cond94:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)
  liveins: $w0, $x8, $x16
  renamable $w17 = LDURWi $fp, -44, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  renamable $w18 = ADDWri renamable $w0, 1, 0, debug-location !365; cg.c:260:19
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w18, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !366; cg.c:260:5
  Bcc 10, %bb.32, implicit $nzcv, debug-location !366; cg.c:260:5

bb.31.for.body96:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $w0, $x8, $x16
  renamable $x17 = LDURSWi $fp, -44, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit killed $x17, debug-location !371; cg.c:260:30
  STURWi killed renamable $w17, $fp, -44, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
  B %bb.30

bb.32.for.end101:
; predecessors: %bb.30
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  STURXi $xzr, $fp, -64, debug-location !375 :: (store 8 into %ir.zeta); cg.c:264:10
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !376; cg.c:266:5
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !376; cg.c:266:5
  PCN_STACKMAP 12, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !377 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:55
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !377; cg.c:268:55
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !377; cg.c:268:55
  PCN_STACKMAP 13, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !378 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:268:5
  STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, 0, debug-location !378; cg.c:268:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !378; cg.c:268:5
  PCN_STACKMAP 14, 0, 0, $fp, -116, 1, 8, $fp, -192, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !379 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value), (load 8 from %stack.21); cg.c:270:5
  $w0 = MOVZWi 1, 0, debug-location !379; cg.c:270:5
  $w19 = MOVZWi 1, 0
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !379; cg.c:270:5
  PCN_STACKMAP 15, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !380 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:277:5
  STURWi killed renamable $w19, $fp, -56, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
  $x20 = ADRP target-flags(aarch64-page) @x
  renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  STRDui killed renamable $d0, $sp, 13 :: (store 8 into %stack.24)
  renamable $d0 = LDRDui killed renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  STRDui killed renamable $d0, $sp, 12 :: (store 8 into %stack.25)
  $x19 = ADRP target-flags(aarch64-page) @z
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @z, 0

bb.33.for.cond108:
; predecessors: %bb.32, %bb.48
  successors: %bb.34(0x7c000000), %bb.49(0x04000000); %bb.34(96.88%), %bb.49(3.12%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -56, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  dead $wzr = SUBSWri killed renamable $w8, 75, 0, implicit-def $nzcv, debug-location !387; cg.c:279:5
  Bcc 12, %bb.49, implicit $nzcv, debug-location !387; cg.c:279:5

bb.34.for.body110:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)
  liveins: $x19, $x20
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !388; cg.c:284:13
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !388 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  CBZW killed renamable $w8, %bb.36, debug-location !391; cg.c:284:13

bb.35.if.then111:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 2, 0, debug-location !392; cg.c:285:13
  BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !392; cg.c:285:13
  PCN_STACKMAP 16, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !392 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:285:13

bb.36.if.end112:
; predecessors: %bb.34, %bb.35
  successors: %bb.37(0x50000000), %bb.38(0x30000000); %bb.37(62.50%), %bb.38(37.50%)
  liveins: $x19, $x20
  $x8 = SUBXri $fp, 72, 0, debug-location !393; cg.c:286:9
  STRXui killed renamable $x8, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
  $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !393; cg.c:286:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !393; cg.c:286:9
  $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !393; cg.c:286:9
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !393; cg.c:286:9
  $x2 = ADRP target-flags(aarch64-page) @x, debug-location !393; cg.c:286:9
  $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !393; cg.c:286:9
  $x3 = ADRP target-flags(aarch64-page) @z, debug-location !393; cg.c:286:9
  $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @z, 0, debug-location !393; cg.c:286:9
  $x4 = ADRP target-flags(aarch64-page) @a, debug-location !393; cg.c:286:9
  $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !393; cg.c:286:9
  $x5 = ADRP target-flags(aarch64-page) @p, debug-location !393; cg.c:286:9
  $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @p, 0, debug-location !393; cg.c:286:9
  $x8 = ADRP target-flags(aarch64-page) @q, debug-location !393; cg.c:286:9
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0, debug-location !393; cg.c:286:9
  STRXui killed renamable $x8, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
  $x8 = ADRP target-flags(aarch64-page) @r, debug-location !393; cg.c:286:9
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @r, 0, debug-location !393; cg.c:286:9
  STRXui killed renamable $x8, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
  BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit-def $sp, debug-location !393; cg.c:286:9
  PCN_STACKMAP 17, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !394 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:287:13
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !394; cg.c:287:13
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !394 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  CBZW killed renamable $w8, %bb.38, debug-location !396; cg.c:287:13

bb.37.if.then114:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $x19, $x20
  $w0 = MOVZWi 2, 0, debug-location !397; cg.c:288:13
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !397; cg.c:288:13
  PCN_STACKMAP 18, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !397 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:288:13

bb.38.if.end115:
; predecessors: %bb.36, %bb.37
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $x19, $x20
  STPXi $xzr, $xzr, $fp, -11, debug-location !398 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:297:20
  STURWi $wzr, $fp, -48, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16
  renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  renamable $x6 = ADRP target-flags(aarch64-page) @firstcol

bb.39.for.cond116:
; predecessors: %bb.38, %bb.40
  successors: %bb.40(0x7c000000), %bb.41(0x04000000); %bb.40(96.88%), %bb.41(3.12%)
  liveins: $x6, $x18, $x19, $x20
  renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !406 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  renamable $w17 = LDURWi $fp, -48, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  $w8 = SUBWrs killed renamable $w8, killed renamable $w16, 0, debug-location !407; cg.c:299:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !408; cg.c:299:44
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !410; cg.c:299:9
  Bcc 10, %bb.41, implicit $nzcv, debug-location !410; cg.c:299:9

bb.40.for.body120:
; predecessors: %bb.39
  successors: %bb.39(0x80000000); %bb.39(100.00%)
  liveins: $x6, $x18, $x19, $x20
  renamable $x8 = LDURSWi $fp, -48, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !422; cg.c:301:39
  renamable $d0 = LDRDroX renamable $x20, renamable $x16, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  renamable $d1 = LDRDroX renamable $x19, killed renamable $x16, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  renamable $d3, renamable $d2 = LDPDi $fp, -11, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1), (dereferenceable load 8 from %ir.norm_temp2); cg.c:300:26
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d1, debug-location !417; cg.c:300:44
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !418; cg.c:300:37
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !428; cg.c:299:50
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d1, debug-location !425; cg.c:301:44
  renamable $d1 = FADDDrr killed renamable $d3, killed renamable $d1, debug-location !426; cg.c:301:37
  STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !419 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:300:24
  STURWi killed renamable $w8, $fp, -48, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
  B %bb.39

bb.41.for.end135:
; predecessors: %bb.39
  successors: %bb.43(0x50000000), %bb.42(0x30000000); %bb.43(62.50%), %bb.42(37.50%)
  liveins: $x19, $x20
  renamable $d1 = LDURDi $fp, -88, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  renamable $d0 = FSQRTDr renamable $d1, debug-location !433; cg.c:304:28
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !434; cg.c:304:26
  Bcc 7, %bb.43, implicit $nzcv, debug-location !434; cg.c:304:26

bb.42.call.sqrt4:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $d1, $x19, $x20
  $q0 = ORRv16i8 $q1, $q1, debug-location !434; cg.c:304:26
  STRDui killed renamable $d1, $sp, 16 :: (store 8 into %stack.21)
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !434; cg.c:304:26
  renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.21)

bb.43.for.end135.split:
; predecessors: %bb.41, %bb.42
  successors: %bb.44(0x40000000), %bb.45(0x40000000); %bb.44(50.00%), %bb.45(50.00%)
  liveins: $d0, $d1, $x19, $x20
  PCN_STACKMAP 19, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, killed renamable $d1, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !434 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:304:26
  renamable $d1 = LDURDi $fp, -80, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.24)
  renamable $d0 = FDIVDrr renamable $d2, killed renamable $d0, debug-location !434; cg.c:304:26
  renamable $w8 = LDURWi $fp, -56, debug-location !440 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  STURDi killed renamable $d0, $fp, -88, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  renamable $d0 = FDIVDrr killed renamable $d2, killed renamable $d1, debug-location !437; cg.c:306:28
  renamable $d1 = LDRDui $sp, 12 :: (load 8 from %stack.25)
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !438; cg.c:306:22
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
  STURDi killed renamable $d0, $fp, -64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
  Bcc 1, %bb.45, implicit $nzcv, debug-location !443; cg.c:307:13

bb.44.if.then141:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)
  liveins: $x19, $x20
  $x0 = ADRP target-flags(aarch64-page) @cg__str_10_____iterat, debug-location !444; cg.c:308:13
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_10_____iterat, 0, debug-location !444; cg.c:308:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !444; cg.c:308:13
  PCN_STACKMAP 20, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !444 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:308:13

bb.45.if.end143:
; predecessors: %bb.43, %bb.44
  successors: %bb.46(0x80000000); %bb.46(100.00%)
  liveins: $x19, $x20
  renamable $w1 = LDURWi $fp, -56, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.21)
  renamable $d0, renamable $d1 = LDPDi $fp, -9, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm), (dereferenceable load 8 from %ir.zeta); cg.c:309:54
  STPDi renamable $d1, renamable $d0, $sp, 14 :: (store 8 into %stack.22), (store 8 into %stack.23)
  $x0 = ADRP target-flags(aarch64-page) @cg__str_11______5d___, debug-location !448; cg.c:309:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, 0, debug-location !448; cg.c:309:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !448; cg.c:309:9
  PCN_STACKMAP 21, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, 1, 4, $fp, -192, 1, 8, $fp, -200, 1, 8, $fp, -208, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !449 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value), (load 4 from %stack.21), (load 8 from %stack.22), (load 8 from %stack.23); cg.c:314:16
  STURWi $wzr, $fp, -48, debug-location !449 :: (store 4 into %ir.j); cg.c:314:16
  renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  renamable $x6 = ADRP target-flags(aarch64-page) @firstcol

bb.46.for.cond145:
; predecessors: %bb.45, %bb.47
  successors: %bb.47(0x7c000000), %bb.48(0x04000000); %bb.47(96.88%), %bb.48(3.12%)
  liveins: $x6, $x18, $x19, $x20
  renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !455 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  renamable $w17 = LDURWi $fp, -48, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  $w8 = SUBWrs killed renamable $w8, killed renamable $w16, 0, debug-location !456; cg.c:314:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !457; cg.c:314:44
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !459; cg.c:314:9
  Bcc 10, %bb.48, implicit $nzcv, debug-location !459; cg.c:314:9

bb.47.for.body149:
; predecessors: %bb.46
  successors: %bb.46(0x80000000); %bb.46(100.00%)
  liveins: $x6, $x18, $x19, $x20
  renamable $x8 = LDURSWi $fp, -48, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  renamable $d0 = LDURDi $fp, -88, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !463; cg.c:315:33
  renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit killed $x8, debug-location !468; cg.c:314:50
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !464; cg.c:315:31
  STRDroX killed renamable $d0, renamable $x20, killed renamable $x16, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  STURWi killed renamable $w8, $fp, -48, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
  B %bb.46

bb.48.for.inc158:
; predecessors: %bb.46
  successors: %bb.33(0x80000000); %bb.33(100.00%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -56, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !472; cg.c:279:33
  STURWi killed renamable $w8, $fp, -56, debug-location !472 :: (store 4 into %ir.it); cg.c:279:33
  B %bb.33

bb.49.do.end164:
; predecessors: %bb.33
  successors: %bb.50(0x40000000), %bb.53(0x40000000); %bb.50(50.00%), %bb.53(50.00%)

  $w0 = MOVZWi 1, 0, debug-location !476; cg.c:321:5
  BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !476; cg.c:321:5
  PCN_STACKMAP 22, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !477 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:9
  $w0 = MOVZWi 1, 0, debug-location !477; cg.c:327:9
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !477; cg.c:327:9
  PCN_STACKMAP 23, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !478 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:327:7
  STURDi killed renamable $d0, $fp, -96, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
  $x0 = ADRP target-flags(aarch64-page) @cg__str_12__Benchmark, debug-location !479; cg.c:329:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_12__Benchmark, 0, debug-location !479; cg.c:329:5
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !479; cg.c:329:5
  PCN_STACKMAP 24, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !480 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:331:13
  renamable $w8 = LDURSBWi $fp, -116, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  $x16 = MOVZXi 48571, 0
  $x16 = MOVKXi $x16(tied-def 0), 55767, 16
  $x16 = MOVKXi $x16(tied-def 0), 31967, 32
  $x16 = MOVKXi $x16(tied-def 0), 15835, 48
  dead $wzr = SUBSWri killed renamable $w8, 85, 0, implicit-def $nzcv, debug-location !484; cg.c:332:9
  STURXi killed renamable $x16, $fp, -136, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
  Bcc 0, %bb.53, implicit $nzcv, debug-location !484; cg.c:332:9

bb.50.if.then169:
; predecessors: %bb.49
  successors: %bb.51(0x40000000), %bb.52(0x40000000); %bb.51(50.00%), %bb.52(50.00%)

  renamable $d0 = LDURDi $fp, -64, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  renamable $d2, renamable $d1 = LDPDi $fp, -17, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value), (dereferenceable load 8 from %ir.epsilon); cg.c:333:27
  renamable $d0 = FABD64 killed renamable $d0, renamable $d1, debug-location !489; cg.c:333:15
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !491; cg.c:333:46
  FCMPDrr renamable $d0, killed renamable $d2, implicit-def $nzcv, debug-location !497; cg.c:334:13
  STURDi killed renamable $d0, $fp, -144, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
  Bcc 8, %bb.52, implicit $nzcv, debug-location !497; cg.c:334:13

bb.51.if.then174:
; predecessors: %bb.50
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -120, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
  $x0 = ADRP target-flags(aarch64-page) @cg__str_13__VERIFICAT, debug-location !500; cg.c:336:13
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_13__VERIFICAT, 0, debug-location !500; cg.c:336:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !500; cg.c:336:13
  PCN_STACKMAP 25, 0, 0, $fp, -116, 0, $fp, -144, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !501 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta); cg.c:337:45
  renamable $d0 = LDURDi $fp, -64, debug-location !501 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, 0, debug-location !502; cg.c:337:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !502; cg.c:337:13
  PCN_STACKMAP 26, 0, 0, $fp, -116, 0, $fp, -144, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 1, 8, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !503 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.21); cg.c:338:45
  renamable $d0 = LDURDi $fp, -144, debug-location !503 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, 0, debug-location !504; cg.c:338:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !504; cg.c:338:13
  PCN_STACKMAP 27, 0, 0, $fp, -116, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 1, 8, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !505 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.21); cg.c:339:9
  B %bb.54

bb.52.if.else178:
; predecessors: %bb.50
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  STURWi $wzr, $fp, -120, debug-location !506 :: (store 4 into %ir.verified); cg.c:341:22
  $x0 = ADRP target-flags(aarch64-page) @cg__str_16__VERIFICAT, debug-location !508; cg.c:342:13
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_16__VERIFICAT, 0, debug-location !508; cg.c:342:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !508; cg.c:342:13
  PCN_STACKMAP 28, 0, 0, $fp, -116, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !509 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:343:54
  renamable $d0 = LDURDi $fp, -64, debug-location !509 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, 0, debug-location !510; cg.c:343:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !510; cg.c:343:13
  PCN_STACKMAP 29, 0, 0, $fp, -116, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -128, 1, 8, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !511 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.16.zeta_verify_value), (load 8 from %stack.21); cg.c:344:54
  renamable $d0 = LDURDi $fp, -128, debug-location !511 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, 0, debug-location !512; cg.c:344:13
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !512; cg.c:344:13
  PCN_STACKMAP 30, 0, 0, $fp, -116, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 1, 8, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.21)
  B %bb.54

bb.53.if.else183:
; predecessors: %bb.49
  successors: %bb.54(0x80000000); %bb.54(100.00%)

  STURWi $wzr, $fp, -120, debug-location !513 :: (store 4 into %ir.verified); cg.c:348:18
  $x0 = ADRP target-flags(aarch64-page) @cg__str_19__Problem_s, debug-location !515; cg.c:349:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_19__Problem_s, 0, debug-location !515; cg.c:349:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !515; cg.c:349:9
  PCN_STACKMAP 31, 0, 0, $fp, -116, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !516 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4); cg.c:350:9
  $x0 = ADRP target-flags(aarch64-page) @cg__str_20__NO_VERIFI, debug-location !516; cg.c:350:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_20__NO_VERIFI, 0, debug-location !516; cg.c:350:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !516; cg.c:350:9
  PCN_STACKMAP 32, 0, 0, $fp, -116, 0, $fp, -44, 0, $fp, -104, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.3.i, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4)

bb.54.if.end186:
; predecessors: %bb.53, %bb.52, %bb.51
  successors: %bb.55(0x50000000), %bb.56(0x30000000); %bb.55(62.50%), %bb.56(37.50%)

  renamable $d0 = LDURDi $fp, -96, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  FCMPDri killed renamable $d0, implicit-def $nzcv, debug-location !520; cg.c:353:9
  Bcc 0, %bb.56, implicit $nzcv, debug-location !520; cg.c:353:9

bb.55.if.then189:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  renamable $d0 = LDURDi $fp, -96, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  renamable $d2 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  renamable $d0 = FDIVDrr killed renamable $d1, killed renamable $d0, debug-location !523; cg.c:356:73
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d2, debug-location !524; cg.c:357:20
  STURDi killed renamable $d0, $fp, -104, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
  B %bb.57

bb.56.if.else192:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  STURXi $xzr, $fp, -104, debug-location !527 :: (store 8 into %ir.mflops); cg.c:360:16

bb.57.if.end193:
; predecessors: %bb.56, %bb.55
  successors: %bb.58(0x50000000), %bb.67(0x30000000); %bb.58(62.50%), %bb.67(37.50%)

  renamable $w19 = LDURSBWi $fp, -116, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  renamable $d1, renamable $d0 = LDPDi $fp, -13, debug-location !530 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.mflops); cg.c:363:49
  STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
  renamable $w20 = LDURWi $fp, -120, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  $x8 = ADRP target-flags(aarch64-page) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, 0, debug-location !533; cg.c:363:5
  $x16 = ADRP target-flags(aarch64-page) @cg__str_30__O3__mcmod, debug-location !533; cg.c:363:5
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_30__O3__mcmod, 0, debug-location !533; cg.c:363:5
  $x17 = ADRP target-flags(aarch64-page) @cg__str_29__g__Wall__, debug-location !533; cg.c:363:5
  renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_29__g__Wall__, 0, debug-location !533; cg.c:363:5
  $x18 = ADRP target-flags(aarch64-page) @cg__str_28__I___commo, debug-location !533; cg.c:363:5
  renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_28__I___commo, 0, debug-location !533; cg.c:363:5
  $x0 = ADRP target-flags(aarch64-page) @cg__str_27__lm_, debug-location !533; cg.c:363:5
  renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_27__lm_, 0, debug-location !533; cg.c:363:5
  $x1 = ADRP target-flags(aarch64-page) @cg__str_26___CC__, debug-location !533; cg.c:363:5
  renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_26___CC__, 0, debug-location !533; cg.c:363:5
  $x2 = ADRP target-flags(aarch64-page) @cg__str_25_gcc_, debug-location !533; cg.c:363:5
  renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_25_gcc_, 0, debug-location !533; cg.c:363:5
  $x3 = ADRP target-flags(aarch64-page) @cg__str_24_03_Nov_201, debug-location !533; cg.c:363:5
  renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_24_03_Nov_201, 0, debug-location !533; cg.c:363:5
  STPXi renamable $x16, renamable $x8, $sp, 9, debug-location !533 :: (store 8 into stack + 80), (store 8 into stack + 72); cg.c:363:5
  $x8 = ADRP target-flags(aarch64-page) @cg__str_23_3_3_1_, debug-location !533; cg.c:363:5
  renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_23_3_3_1_, 0, debug-location !533; cg.c:363:5
  STRWui renamable $w20, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
  STPXi renamable $x18, renamable $x17, $sp, 7, debug-location !533 :: (store 8 into stack + 64), (store 8 into stack + 56); cg.c:363:5
  $x16 = ADRP target-flags(aarch64-page) @cg__str_22___________, debug-location !533; cg.c:363:5
  renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_22___________, 0, debug-location !533; cg.c:363:5
  STPXi renamable $x1, renamable $x0, $sp, 5, debug-location !533 :: (store 8 into stack + 48), (store 8 into stack + 40); cg.c:363:5
  $x0 = ADRP target-flags(aarch64-page) @cg__str_21_CG_, debug-location !533; cg.c:363:5
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_21_CG_, 0, debug-location !533; cg.c:363:5
  STPXi renamable $x3, renamable $x2, $sp, 3, debug-location !533 :: (store 8 into stack + 32), (store 8 into stack + 24); cg.c:363:5
  STRXui killed renamable $x8, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
  $w2 = MOVZWi 9464, 0, debug-location !533; cg.c:363:5
  $w2 = MOVKWi $w2(tied-def 0), 1, 16, debug-location !533; cg.c:363:5
  $w5 = MOVZWi 75, 0, debug-location !533; cg.c:363:5
  STRXui killed renamable $x16, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5
  $w1 = ORRWrs $wzr, $w19, 0, debug-location !533; cg.c:363:5
  $w3 = ORRWrs $wzr, $wzr, 0, debug-location !533; cg.c:363:5
  $w4 = ORRWrs $wzr, $wzr, 0, debug-location !533; cg.c:363:5
  BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !533; cg.c:363:5
  PCN_STACKMAP 33, 0, 0, $fp, -44, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, killed renamable $w19, 1, 8, $fp, -192, 1, 8, $fp, -200, killed renamable $w20, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !534 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.21), (load 8 from %stack.22); cg.c:370:9
  renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
  renamable $w8 = LDRWui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  CBZW killed renamable $w8, %bb.67, debug-location !536; cg.c:370:9

bb.58.if.then195:
; predecessors: %bb.57
  successors: %bb.59(0x50000000), %bb.60(0x30000000); %bb.59(62.50%), %bb.60(37.50%)

  $w0 = MOVZWi 1, 0, debug-location !537; cg.c:371:16
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !537; cg.c:371:16
  PCN_STACKMAP 34, 0, 0, $fp, -44, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !539 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:371:14
  FCMPDri renamable $d0, implicit-def $nzcv, debug-location !543; cg.c:372:13
  STURDi killed renamable $d0, $fp, -112, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
  Bcc 1, %bb.60, implicit $nzcv, debug-location !543; cg.c:372:13

bb.59.if.then199:
; predecessors: %bb.58
  successors: %bb.60(0x80000000); %bb.60(100.00%)

  $x8 = MOVZXi 16368, 48
  STURXi killed renamable $x8, $fp, -112, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18

bb.60.if.end200:
; predecessors: %bb.58, %bb.59
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @cg__str_32___SECTION_, debug-location !546; cg.c:374:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_32___SECTION_, 0, debug-location !546; cg.c:374:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !546; cg.c:374:9
  PCN_STACKMAP 35, 0, 0, $fp, -44, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !547 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:375:16
  renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  STRDui killed renamable $d0, $sp, 14 :: (store 8 into %stack.23)
  STURWi $wzr, $fp, -44, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
  $x20 = ADDXri $sp, 144, 0

bb.61.for.cond202:
; predecessors: %bb.60, %bb.66
  successors: %bb.62(0x7c000000), %bb.67(0x04000000); %bb.62(96.88%), %bb.67(3.12%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -44, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv, debug-location !553; cg.c:375:9
  Bcc 12, %bb.67, implicit $nzcv, debug-location !553; cg.c:375:9

bb.62.for.body205:
; predecessors: %bb.61
  successors: %bb.63(0x30000000), %bb.64(0x50000000); %bb.63(37.50%), %bb.64(62.50%)
  liveins: $x20
  renamable $w19 = LDURWi $fp, -44, debug-location !554 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
  $w0 = ORRWrs $wzr, $w19, 0, debug-location !556; cg.c:376:17
  BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !556; cg.c:376:17
  PCN_STACKMAP 36, 0, 0, $fp, -44, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !557 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax); cg.c:376:15
  renamable $w8 = LDURWi $fp, -44, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  STURDi killed renamable $d0, $fp, -96, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
  CBNZW killed renamable $w8, %bb.64, debug-location !561; cg.c:377:17

bb.63.if.then209:
; predecessors: %bb.62
  successors: %bb.66(0x80000000); %bb.66(100.00%)
  liveins: $x20
  renamable $x8 = LDURSWi $fp, -44, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  renamable $x19 = LDRXroX renamable $x20, killed renamable $x8, 0, 1, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  renamable $d0 = LDURDi $fp, -96, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  $x0 = ADRP target-flags(aarch64-page) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, 0, debug-location !566; cg.c:378:17
  $x1 = ORRXrs $xzr, $x19, 0, debug-location !566; cg.c:378:17
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !566; cg.c:378:17
  PCN_STACKMAP 37, 0, 0, $fp, -44, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, killed renamable $x19, 1, 8, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !567 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.21); cg.c:379:13
  B %bb.66

bb.64.if.else213:
; predecessors: %bb.62
  successors: %bb.65(0x40000000), %bb.66(0x40000000); %bb.65(50.00%), %bb.66(50.00%)
  liveins: $x20
  renamable $x8 = LDURSWi $fp, -44, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  renamable $d0 = LDURDi $fp, -96, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  renamable $d2 = LDURDi $fp, -112, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  renamable $x19 = LDRXroX renamable $x20, killed renamable $x8, 0, 1, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.23)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1, debug-location !573; cg.c:382:26
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2, debug-location !575; cg.c:382:34
  STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
  $x0 = ADRP target-flags(aarch64-page) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, 0, debug-location !576; cg.c:381:17
  $x1 = ORRXrs $xzr, $x19, 0, debug-location !576; cg.c:381:17
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !576; cg.c:381:17
  PCN_STACKMAP 38, 0, 1, 8, $fp, -200, 0, $fp, -44, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, killed renamable $x19, 1, 8, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !577 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.21), (load 8 from %stack.22); cg.c:383:21
  renamable $w8 = LDURWi $fp, -44, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  dead $wzr = SUBSWri killed renamable $w8, 2, 0, implicit-def $nzcv, debug-location !580; cg.c:383:21
  Bcc 1, %bb.66, implicit $nzcv, debug-location !580; cg.c:383:21

bb.65.if.then221:
; predecessors: %bb.64
  successors: %bb.66(0x80000000); %bb.66(100.00%)
  liveins: $x20
  renamable $d2 = LDURDi $fp, -112, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  renamable $d1 = LDURDi $fp, -96, debug-location !583 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  renamable $d0 = FSUBDrr renamable $d2, killed renamable $d1, debug-location !584; cg.c:384:30
  STURDi renamable $d0, $fp, -96, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
  renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.23)
  renamable $d1 = FMULDrr renamable $d0, killed renamable $d1, debug-location !588; cg.c:386:30
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2, debug-location !590; cg.c:386:38
  STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
  $x0 = ADRP target-flags(aarch64-page) @cg__str_35__________8, debug-location !591; cg.c:385:21
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, 0, debug-location !591; cg.c:385:21
  $x1 = ADRP target-flags(aarch64-page) @cg__str_36_rest_, debug-location !591; cg.c:385:21
  $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_36_rest_, 0, debug-location !591; cg.c:385:21
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !591; cg.c:385:21
  PCN_STACKMAP 39, 0, 1, 8, $fp, -200, 0, $fp, -44, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 1, 8, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !592 :: (load 8 from %stack.3.i, align 4), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.21), (load 8 from %stack.22); cg.c:387:17

bb.66.for.inc228:
; predecessors: %bb.64, %bb.65, %bb.63
  successors: %bb.61(0x80000000); %bb.61(100.00%)
  liveins: $x20
  renamable $w8 = LDURWi $fp, -44, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !593; cg.c:375:34
  STURWi killed renamable $w8, $fp, -44, debug-location !593 :: (store 4 into %ir.i); cg.c:375:34
  B %bb.61

bb.67.do.end235:
; predecessors: %bb.57, %bb.61

  $w8 = ORRWrs $wzr, $wzr, 0, debug-location !597; cg.c:394:5
  $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !597 :: (load 8 from %stack.51), (load 8 from %stack.50); cg.c:394:5
  $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !597 :: (load 8 from %stack.53), (load 8 from %stack.52); cg.c:394:5
  $sp = frame-destroy ADDXri $sp, 336, 0, debug-location !597; cg.c:394:5
  RET undef $lr, implicit $w8, debug-location !597; cg.c:394:5

# End machine code for function main.

********** MI Scheduling **********
main:%bb.0 entry
  From: STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STURWi $wzr, $fp, -44, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 0
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi $wzr, $fp, -44, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   STPWi renamable $w0, $wzr, $fp, -8 :: (store 4 into %ir.retval), (store 4 into %ir.argc.addr)
SU(1):   STURXi renamable $x1, $fp, -40 :: (store 8 into %ir.argv.addr)
SU(2):   STURWi $wzr, $fp, -44, debug-location !132 :: (store 4 into %ir.i); cg.c:117:12

********** MI Scheduling **********
main:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 38 :: (store 8 into %stack.53), (store 8 into %stack.52)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 38 :: (store 8 into %stack.53), (store 8 into %stack.52)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 40 :: (store 8 into %stack.51), (store 8 into %stack.50)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 320, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 38 :: (store 8 into %stack.53), (store 8 into %stack.52)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 40 :: (store 8 into %stack.51), (store 8 into %stack.50)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 320, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 38 :: (store 8 into %stack.53), (store 8 into %stack.52)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 40 :: (store 8 into %stack.51), (store 8 into %stack.50)
SU(2):   $fp = frame-setup ADDXri $sp, 320, 0

Fixup kills for %bb.0
********** MI Scheduling **********
main:%bb.1 for.cond
  From: renamable $w8 = LDURWi $fp, -44, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
    To: Bcc 12, %bb.3, implicit $nzcv, debug-location !138; cg.c:117:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.3, implicit $nzcv, debug-location !138; cg.c:117:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -44, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !135 :: (dereferenceable load 4 from %ir.i); cg.c:117:17
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !138; cg.c:117:5

Fixup kills for %bb.1
********** MI Scheduling **********
main:%bb.2 for.body
  From: renamable $w8 = LDURWi $fp, -44, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
    To: B %bb.1
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !143; cg.c:117:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -44, debug-location !143 :: (store 4 into %ir.i); cg.c:117:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -44, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !143; cg.c:117:30
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -44, debug-location !143 :: (store 4 into %ir.i); cg.c:117:30
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !143 :: (dereferenceable load 4 from %ir.i); cg.c:117:30
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !143; cg.c:117:30
SU(2):   STURWi renamable $w8, $fp, -44, debug-location !143 :: (store 4 into %ir.i); cg.c:117:30

********** MI Scheduling **********
main:%bb.2 for.body
  From: renamable $w19 = LDURWi $fp, -44, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
    To: BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !141; cg.c:118:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -44, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0, debug-location !141; cg.c:118:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_clear, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !141; cg.c:118:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -44, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0, debug-location !141; cg.c:118:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $w19 = LDURWi $fp, -44, debug-location !139 :: (dereferenceable load 4 from %ir.i); cg.c:118:21
SU(1):   $w0 = ORRWrs $wzr, $w19, 0, debug-location !141; cg.c:118:9

Fixup kills for %bb.2
********** MI Scheduling **********
main:%bb.3 for.end
  From: $x0 = ADRP target-flags(aarch64-page) @cg__str_timer_flag, debug-location !153; cg.c:122:15
    To: BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !153; cg.c:122:15
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_timer_flag, debug-location !153; cg.c:122:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, 0, debug-location !153; cg.c:122:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $x1 = ADRP target-flags(aarch64-page) @cg__str_1_r_, debug-location !153; cg.c:122:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x1
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_1_r_, 0, debug-location !153; cg.c:122:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fopen, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit-def $sp, implicit-def $x8, debug-location !153; cg.c:122:15
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @cg__str_timer_flag, debug-location !153; cg.c:122:15
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $x1 = ADRP target-flags(aarch64-page) @cg__str_1_r_, debug-location !153; cg.c:122:15
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, 0, debug-location !153; cg.c:122:15
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_1_r_, 0, debug-location !153; cg.c:122:15
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_timer_flag, debug-location !153; cg.c:122:15
SU(2):   $x1 = ADRP target-flags(aarch64-page) @cg__str_1_r_, debug-location !153; cg.c:122:15
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_timer_flag, 0, debug-location !153; cg.c:122:15
SU(3):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_1_r_, 0, debug-location !153; cg.c:122:15

Fixup kills for %bb.3
********** MI Scheduling **********
main:%bb.4 if.then
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
    To: BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !167; cg.c:127:9
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(1):   $w16 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(9): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w16
SU(2):   $x17 = ADRP target-flags(aarch64-page) @cg__str_2_init_, debug-location !161; cg.c:124:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_2_init_, 0, debug-location !161; cg.c:124:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x17
  Successors:
    SU(8): Data Latency=1 Reg=$x17
SU(4):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(9): Anti Latency=0
    SU(5): Anti Latency=0
SU(5):   $x8 = ADRP target-flags(aarch64-page) @cg__str_3_benchmk_, debug-location !163; cg.c:125:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
SU(6):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_3_benchmk_, 0, debug-location !163; cg.c:125:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Data Latency=1 Reg=$x8
SU(7):   renamable $x19 = LDRXui $sp, 17, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(12): Data Latency=4 Reg=$x19
SU(8):   STPXi renamable $x17, renamable $x8, $sp, 18, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx2); cg.c:124:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x17
SU(9):   $x16 = ADRP target-flags(aarch64-page) @cg__str_4_conjgd_, debug-location !165; cg.c:126:30
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x16
SU(10):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_4_conjgd_, 0, debug-location !165; cg.c:126:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x16
  Successors:
    SU(11): Data Latency=1 Reg=$x16
SU(11):   STRXui renamable $x16, $sp, 20, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$x16
SU(12):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !167; cg.c:127:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @fclose, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !167; cg.c:127:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x19 = LDRXui $sp, 17, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
  Ready @0c
  TopQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w16 = MOVZWi 1, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x17 = ADRP target-flags(aarch64-page) @cg__str_2_init_, debug-location !161; cg.c:124:25
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 12 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
  Ready @4c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 3 9 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(9) TOP-PATH                  2 cycles 
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x8 = ADRP target-flags(aarch64-page) @cg__str_3_benchmk_, debug-location !163; cg.c:125:26
  Ready @5c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 3 9 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(9) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x16 = ADRP target-flags(aarch64-page) @cg__str_4_conjgd_, debug-location !165; cg.c:126:30
  Ready @6c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 3 6 10 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_2_init_, 0, debug-location !161; cg.c:124:25
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 6 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_3_benchmk_, 0, debug-location !163; cg.c:125:26
  Ready @8c
  TopQ.A TopLatency SU(6) 2c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 10 8 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_4_conjgd_, 0, debug-location !165; cg.c:126:30
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 8 11 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x0 = ORRXrs $xzr, $x19, 0, debug-location !167; cg.c:127:9
  Ready @10c
  TopQ.A TopLatency SU(12) 4c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) STPXi renamable $x17, renamable $x8, $sp, 18, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx2); cg.c:124:25
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STRXui renamable $x16, $sp, 20, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(7):   renamable $x19 = LDRXui $sp, 17, debug-location !166 :: (dereferenceable load 8 from %ir.fp); cg.c:127:16
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !158; cg.c:123:17
SU(1):   $w16 = MOVZWi 1, 0
SU(2):   $x17 = ADRP target-flags(aarch64-page) @cg__str_2_init_, debug-location !161; cg.c:124:25
SU(4):   STRWui renamable $w16, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !158 :: (store 4 into @timeron); cg.c:123:17
SU(5):   $x8 = ADRP target-flags(aarch64-page) @cg__str_3_benchmk_, debug-location !163; cg.c:125:26
SU(9):   $x16 = ADRP target-flags(aarch64-page) @cg__str_4_conjgd_, debug-location !165; cg.c:126:30
SU(3):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_2_init_, 0, debug-location !161; cg.c:124:25
SU(6):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_3_benchmk_, 0, debug-location !163; cg.c:125:26
SU(10):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_4_conjgd_, 0, debug-location !165; cg.c:126:30
SU(12):   $x0 = ORRXrs $xzr, $x19, 0, debug-location !167; cg.c:127:9
SU(8):   STPXi renamable $x17, renamable $x8, $sp, 18, debug-location !161 :: (store 8 into %ir.arrayidx5, align 16), (store 8 into %ir.arrayidx2); cg.c:124:25
SU(11):   STRXui renamable $x16, $sp, 20, debug-location !165 :: (store 8 into %ir.arrayidx3, align 16); cg.c:126:30

Fixup kills for %bb.4
********** MI Scheduling **********
main:%bb.5 if.else
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !169 :: (store 4 into @timeron); cg.c:130:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !169 :: (store 4 into @timeron); cg.c:130:17
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !169; cg.c:130:17
SU(1):   STRWui $wzr, renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !169 :: (store 4 into @timeron); cg.c:130:17

Fixup kills for %bb.5
********** MI Scheduling **********
main:%bb.6 if.end
  From: renamable $x7 = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
    To: PCN_STACKMAP 9, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, 1, 4, $fp, -216, 1, 4, $fp, -224, 1, 4, $fp, -228, 1, 4, $fp, -208, 1, 4, $fp, -200, 1, 4, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !202 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value), (load 4 from %stack.21), (load 4 from %stack.22), (load 4 from %stack.23), (load 4 from %stack.24), (load 4 from %stack.25), (load 4 from %stack.26); cg.c:202:12
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x7 = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x6 = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   PCN_STACKMAP 9, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -52, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, 1, 4, $fp, -216, 1, 4, $fp, -224, 1, 4, $fp, -228, 1, 4, $fp, -208, 1, 4, $fp, -200, 1, 4, $fp, -192, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !202 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.5.k, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value), (load 4 from %stack.21), (load 4 from %stack.22), (load 4 from %stack.23), (load 4 from %stack.24), (load 4 from %stack.25), (load 4 from %stack.26); cg.c:202:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x7 = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x6 = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x7 = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
SU(1):   renamable $x6 = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14

********** MI Scheduling **********
main:%bb.6 if.end
  From: renamable $x8 = ADRP target-flags(aarch64-page) @naa, debug-location !195; cg.c:190:11
    To: BL @makea, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $x2, implicit $x3, implicit $x4, implicit $w5, implicit-def $sp, debug-location !201; cg.c:190:5
 RegionInstrs: 41
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @naa, debug-location !195; cg.c:190:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 11
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$w0
    SU(3): Anti Latency=0
SU(2):   STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.24)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$w0
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) @nzz, debug-location !196; cg.c:190:16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 11
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(7): Data Latency=4 Reg=$w1
    SU(5): Anti Latency=0
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) @firstrow, debug-location !197; cg.c:190:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 10
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
SU(6):   renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 3
  Height             : 9
  Predecessors:
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(7): Data Latency=4 Reg=$w5
    SU(8): Anti Latency=0
SU(7):   STPWi renamable $w5, renamable $w1, $sp, 23 :: (store 4 into %stack.25), (store 4 into %stack.26)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=$w5
    SU(4): Data Latency=4 Reg=$w1
SU(8):   renamable $x8 = ADRP target-flags(aarch64-page) @lastrow, debug-location !198; cg.c:190:50
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 9
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x8
SU(9):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(8): Data Latency=1 Reg=$x8
  Successors:
    SU(31): Out  Latency=1
    SU(28): Data Latency=4 Reg=$w2
    SU(10): Data Latency=4 Reg=$w2
    SU(11): Anti Latency=0
SU(10):   STRWui renamable $w2, $sp, 28 :: (store 4 into %stack.23)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(9): Data Latency=4 Reg=$w2
  Successors:
    SU(31): Anti Latency=0
SU(11):   renamable $x8 = ADRP target-flags(aarch64-page) @firstcol, debug-location !199; cg.c:190:59
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(14): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
SU(12):   renamable $w3 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(11): Data Latency=1 Reg=$x8
  Successors:
    SU(33): Out  Latency=1
    SU(27): Data Latency=4 Reg=$w3
    SU(13): Data Latency=4 Reg=$w3
    SU(14): Anti Latency=0
SU(13):   STRWui renamable $w3, $sp, 30 :: (store 4 into %stack.22)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(12): Data Latency=4 Reg=$w3
  Successors:
    SU(33): Anti Latency=0
SU(14):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol, debug-location !200; cg.c:190:69
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x8
SU(15):   renamable $w4 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(14): Data Latency=1 Reg=$x8
  Successors:
    SU(35): Out  Latency=1
    SU(26): Data Latency=4 Reg=$w4
    SU(16): Data Latency=4 Reg=$w4
    SU(18): Anti Latency=0
SU(16):   STRWui renamable $w4, $sp, 32 :: (store 4 into %stack.21)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(15): Data Latency=4 Reg=$w4
  Successors:
    SU(35): Anti Latency=0
SU(17):   STURDi renamable $d0, $fp, -64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(18):   $x8 = ADRP target-flags(aarch64-page) @iv, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(15): Anti Latency=0
    SU(14): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x8
SU(19):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @iv, 0, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 1
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x8
  Successors:
    SU(37): Data Latency=1 Reg=$x8
SU(20):   $x16 = ADRP target-flags(aarch64-page) @aelt, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x16
SU(21):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @aelt, 0, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x16
  Successors:
    SU(37): Data Latency=1 Reg=$x16
SU(22):   $x17 = ADRP target-flags(aarch64-page) @acol, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(23): Out  Latency=1
    SU(23): Data Latency=1 Reg=$x17
SU(23):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @acol, 0, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x17
  Successors:
    SU(38): Data Latency=1 Reg=$x17
SU(24):   $x18 = ADRP target-flags(aarch64-page) @arow, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x18
SU(25):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @arow, 0, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(24): Out  Latency=1
    SU(24): Data Latency=1 Reg=$x18
  Successors:
    SU(38): Data Latency=1 Reg=$x18
SU(26):   STRWui renamable $w4, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(15): Data Latency=4 Reg=$w4
  Successors:
    SU(35): Anti Latency=0
SU(27):   STRWui renamable $w3, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(12): Data Latency=4 Reg=$w3
  Successors:
    SU(33): Anti Latency=0
SU(28):   STRWui renamable $w2, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(9): Data Latency=4 Reg=$w2
  Successors:
    SU(31): Anti Latency=0
SU(29):   $x20 = ADRP target-flags(aarch64-page) @colidx, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(30): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x20
SU(30):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x20
SU(31):   $x2 = ADRP target-flags(aarch64-page) @a, debug-location !201; cg.c:190:5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(28): Anti Latency=0
    SU(10): Anti Latency=0
    SU(9): Out  Latency=1
  Successors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$x2
SU(32):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(31): Out  Latency=1
    SU(31): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(33):   $x3 = ADRP target-flags(aarch64-page) @colidx, debug-location !201; cg.c:190:5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(27): Anti Latency=0
    SU(13): Anti Latency=0
    SU(12): Out  Latency=1
  Successors:
    SU(34): Out  Latency=1
    SU(34): Data Latency=1 Reg=$x3
SU(34):   $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$x3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(35):   $x4 = ADRP target-flags(aarch64-page) @rowstr, debug-location !201; cg.c:190:5
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(26): Anti Latency=0
    SU(16): Anti Latency=0
    SU(15): Out  Latency=1
  Successors:
    SU(36): Out  Latency=1
    SU(36): Data Latency=1 Reg=$x4
SU(36):   $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(35): Out  Latency=1
    SU(35): Data Latency=1 Reg=$x4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(37):   STPXi renamable $x16, renamable $x8, $sp, 5, debug-location !201 :: (store 8 into stack + 40), (store 8 into stack + 48); cg.c:190:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$x8
    SU(21): Data Latency=1 Reg=$x16
SU(38):   STPXi renamable $x18, renamable $x17, $sp, 3, debug-location !201 :: (store 8 into stack + 24), (store 8 into stack + 32); cg.c:190:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(25): Data Latency=1 Reg=$x18
    SU(23): Data Latency=1 Reg=$x17
SU(39):   $x19 = ADRP target-flags(aarch64-page) @rowstr, debug-location !201; cg.c:190:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(40): Out  Latency=1
    SU(40): Data Latency=1 Reg=$x19
SU(40):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !201; cg.c:190:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(39): Out  Latency=1
    SU(39): Data Latency=1 Reg=$x19
ExitSU:   BL @makea, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $x2, implicit $x3, implicit $x4, implicit $w5, implicit-def $sp, debug-location !201; cg.c:190:5
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(36): Ord  Latency=1 Artificial
    SU(34): Ord  Latency=1 Artificial
    SU(32): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=4 Artificial
    SU(4): Ord  Latency=4 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 12
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 17 20 22 24 29 39 
  TopQ.A RemainingLatency 0 + 0c > CritPath 12
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @naa, debug-location !195; cg.c:190:11
  Ready @0c
  TopQ.A BotLatency SU(0) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 20 22 24 29 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(1) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 39 17 20 22 24 29 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(3) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADRP target-flags(aarch64-page) @nzz, debug-location !196; cg.c:190:16
  Ready @2c
  TopQ.A BotLatency SU(3) 11c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 39 17 20 22 24 29 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(4) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
  Ready @3c
  TopQ.A TopLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 39 17 20 22 24 29 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(5) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x8 = ADRP target-flags(aarch64-page) @firstrow, debug-location !197; cg.c:190:40
  Ready @4c
  TopQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 20 22 24 29 6 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(6) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
  Ready @5c
  TopQ.A TopLatency SU(6) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 39 17 20 22 24 29 2 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(8) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x8 = ADRP target-flags(aarch64-page) @lastrow, debug-location !198; cg.c:190:50
  Ready @6c
  TopQ.A BotLatency SU(8) 9c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 39 17 20 22 24 29 2 9 
  TopQ.A RemainingLatency 0 + 7c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(9) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
  Ready @7c
  TopQ.A TopLatency SU(9) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 28 10 
Queue TopQ.A: 39 17 20 22 24 29 2 11 
  TopQ.A RemainingLatency 0 + 8c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(11) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x8 = ADRP target-flags(aarch64-page) @firstcol, debug-location !199; cg.c:190:59
  Ready @8c
  TopQ.A BotLatency SU(11) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 28 
Queue TopQ.A: 39 17 20 22 24 29 2 12 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(12) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) renamable $w3 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
  Ready @9c
  TopQ.A TopLatency SU(12) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 28 27 13 
Queue TopQ.A: 39 17 20 22 24 29 2 7 14 
  TopQ.A RemainingLatency 0 + 10c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(14) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $x8 = ADRP target-flags(aarch64-page) @lastcol, debug-location !200; cg.c:190:69
  Ready @10c
  TopQ.A BotLatency SU(14) 7c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 27 
Queue TopQ.A: 39 17 20 22 24 29 2 7 15 10 28 
  TopQ.A RemainingLatency 0 + 11c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(15) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $w4 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
  Ready @11c
  TopQ.A TopLatency SU(15) 6c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 27 26 16 
Queue TopQ.A: 39 17 20 22 24 29 2 7 28 10 18 
  TopQ.A RemainingLatency 0 + 12c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) STRWui renamable $w2, $sp, 28 :: (store 4 into %stack.23)
  Ready @12c
  TopQ.A TopLatency SU(10) 8c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 26 
Queue TopQ.A: 39 17 20 22 24 29 2 7 28 18 13 27 
  TopQ.A RemainingLatency 0 + 13c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(18) ORDER                              
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) STRWui renamable $w3, $sp, 30 :: (store 4 into %stack.22)
  Ready @13c
  TopQ.A TopLatency SU(13) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 26 
Queue TopQ.A: 39 17 20 22 24 29 2 7 28 18 27 
  TopQ.A RemainingLatency 0 + 14c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(18) ORDER                              
Pick Top ORDER     
Scheduling SU(18) $x8 = ADRP target-flags(aarch64-page) @iv, debug-location !201; cg.c:190:5
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 20 22 24 29 2 7 28 27 19 16 26 
  TopQ.A RemainingLatency 0 + 15c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(16) ORDER                              
Pick Top ORDER     
Scheduling SU(16) STRWui renamable $w4, $sp, 32 :: (store 4 into %stack.21)
  Ready @15c
  TopQ.A TopLatency SU(16) 10c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 20 22 24 29 2 7 28 27 19 26 
  TopQ.A RemainingLatency 0 + 16c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) $x16 = ADRP target-flags(aarch64-page) @aelt, debug-location !201; cg.c:190:5
  Ready @16c
  TopQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 26 22 24 29 2 7 28 27 19 21 
  TopQ.A RemainingLatency 0 + 17c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(26) TOP-PATH                  2 cycles 
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) $x17 = ADRP target-flags(aarch64-page) @acol, debug-location !201; cg.c:190:5
  Ready @17c
  TopQ.A BotLatency SU(22) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 26 21 24 29 2 7 28 27 19 23 
  TopQ.A RemainingLatency 0 + 18c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(26) TOP-PATH                  2 cycles 
  Cand SU(24) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(24) $x18 = ADRP target-flags(aarch64-page) @arow, debug-location !201; cg.c:190:5
  Ready @18c
  TopQ.A BotLatency SU(24) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 26 21 23 29 2 7 28 27 19 25 
  TopQ.A RemainingLatency 0 + 19c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(26) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(26) STRWui renamable $w4, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
  Ready @19c
  TopQ.A BotLatency SU(26) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 25 21 23 29 2 7 28 27 19 35 
  TopQ.A RemainingLatency 0 + 20c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(28) TOP-PATH                  2 cycles 
  Cand SU(27) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(27) STRWui renamable $w3, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
  Ready @20c
  TopQ.A BotLatency SU(27) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 25 21 23 29 2 7 28 35 19 33 
  TopQ.A RemainingLatency 0 + 21c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(28) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(28) STRWui renamable $w2, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
  Ready @21c
  TopQ.A BotLatency SU(28) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 25 21 23 29 2 7 33 35 19 31 
  TopQ.A RemainingLatency 0 + 22c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(33) TOP-PATH                  2 cycles 
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) $x2 = ADRP target-flags(aarch64-page) @a, debug-location !201; cg.c:190:5
  Ready @22c
  TopQ.A BotLatency SU(31) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 25 21 23 29 2 7 33 35 19 32 
  TopQ.A RemainingLatency 0 + 23c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(33) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(33) $x3 = ADRP target-flags(aarch64-page) @colidx, debug-location !201; cg.c:190:5
  Ready @23c
  TopQ.A BotLatency SU(33) 2c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 25 21 23 29 2 7 32 35 19 34 
  TopQ.A RemainingLatency 0 + 24c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(35) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(35) $x4 = ADRP target-flags(aarch64-page) @rowstr, debug-location !201; cg.c:190:5
  Ready @24c
  TopQ.A BotLatency SU(35) 2c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 25 21 23 29 2 7 32 34 19 36 
  TopQ.A RemainingLatency 0 + 25c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(21) ORDER                              
  Cand SU(19) ORDER                              
Pick Top ORDER     
Scheduling SU(19) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @iv, 0, debug-location !201; cg.c:190:5
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 25 21 23 29 2 7 32 34 36 
  TopQ.A RemainingLatency 0 + 26c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @aelt, 0, debug-location !201; cg.c:190:5
  Ready @26c
  TopQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 25 36 23 29 2 7 32 34 37 
  TopQ.A RemainingLatency 0 + 27c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(25) ORDER                              
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @acol, 0, debug-location !201; cg.c:190:5
  Ready @27c
  TopQ.A BotLatency SU(23) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 25 36 37 29 2 7 32 34 
  TopQ.A RemainingLatency 0 + 28c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(25) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(25) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @arow, 0, debug-location !201; cg.c:190:5
  Ready @28c
  TopQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 34 36 37 29 2 7 32 38 
  TopQ.A RemainingLatency 0 + 29c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) $x20 = ADRP target-flags(aarch64-page) @colidx, debug-location !201; cg.c:190:5
  Ready @29c
  TopQ.A BotLatency SU(29) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 34 36 37 38 2 7 32 30 
  TopQ.A RemainingLatency 0 + 30c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(32) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(32) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !201; cg.c:190:5
  Ready @30c
  TopQ.A BotLatency SU(32) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 34 36 37 38 2 7 30 
  TopQ.A RemainingLatency 0 + 31c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !201; cg.c:190:5
  Ready @31c
  TopQ.A BotLatency SU(34) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 30 36 37 38 2 7 
  TopQ.A RemainingLatency 0 + 32c > CritPath 12
  Cand SU(39) ORDER                              
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !201; cg.c:190:5
  Ready @32c
  TopQ.A TopLatency SU(36) 11c
  TopQ.A BotLatency SU(36) 1c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 39 17 30 7 37 38 2 
  TopQ.A RemainingLatency 0 + 33c > CritPath 12
  Cand SU(39) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(39) $x19 = ADRP target-flags(aarch64-page) @rowstr, debug-location !201; cg.c:190:5
  Ready @33c
  TopQ.A BotLatency SU(39) 1c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 17 30 7 37 38 40 
  TopQ.A RemainingLatency 0 + 34c > CritPath 12
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.24)
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 17 30 7 37 38 
  TopQ.A RemainingLatency 0 + 35c > CritPath 12
  Cand SU(40) ORDER                              
  Cand SU(17) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) STPWi renamable $w5, renamable $w1, $sp, 23 :: (store 4 into %stack.25), (store 4 into %stack.26)
  Ready @35c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 17 30 38 37 
  TopQ.A RemainingLatency 0 + 36c > CritPath 12
  Cand SU(40) ORDER                              
  Cand SU(17) ORDER                              
Pick Top ORDER     
Scheduling SU(17) STURDi renamable $d0, $fp, -64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 37 30 38 
  TopQ.A RemainingLatency 0 + 37c > CritPath 12
  Cand SU(40) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(30) ORDER                              
Pick Top ORDER     
Scheduling SU(30) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !201; cg.c:190:5
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 37 38 
  TopQ.A RemainingLatency 0 + 38c > CritPath 12
  Cand SU(40) ORDER                              
  Cand SU(37) ORDER                              
Pick Top ORDER     
Scheduling SU(37) STPXi renamable $x16, renamable $x8, $sp, 5, debug-location !201 :: (store 8 into stack + 40), (store 8 into stack + 48); cg.c:190:5
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 38 
  TopQ.A RemainingLatency 0 + 39c > CritPath 12
  Cand SU(40) ORDER                              
  Cand SU(38) ORDER                              
Pick Top ORDER     
Scheduling SU(38) STPXi renamable $x18, renamable $x17, $sp, 3, debug-location !201 :: (store 8 into stack + 24), (store 8 into stack + 32); cg.c:190:5
  Ready @39c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 40
  Executed: 40c
  Critical: 40c, 40 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 40 
Pick Top ONLY1     
Scheduling SU(40) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !201; cg.c:190:5
  Ready @40c
  *** Max MOps 1 at cycle 40
Cycle: 41 TopQ.A
TopQ.A @41c
  Retired: 41
  Executed: 41c
  Critical: 41c, 41 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @naa, debug-location !195; cg.c:190:11
SU(1):   renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !195 :: (dereferenceable load 4 from @naa); cg.c:190:11
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) @nzz, debug-location !196; cg.c:190:16
SU(4):   renamable $w1 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !196 :: (dereferenceable load 4 from @nzz); cg.c:190:16
SU(5):   renamable $x8 = ADRP target-flags(aarch64-page) @firstrow, debug-location !197; cg.c:190:40
SU(6):   renamable $w5 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !197 :: (dereferenceable load 4 from @firstrow); cg.c:190:40
SU(8):   renamable $x8 = ADRP target-flags(aarch64-page) @lastrow, debug-location !198; cg.c:190:50
SU(9):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !198 :: (dereferenceable load 4 from @lastrow); cg.c:190:50
SU(11):   renamable $x8 = ADRP target-flags(aarch64-page) @firstcol, debug-location !199; cg.c:190:59
SU(12):   renamable $w3 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !199 :: (dereferenceable load 4 from @firstcol); cg.c:190:59
SU(14):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol, debug-location !200; cg.c:190:69
SU(15):   renamable $w4 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !200 :: (dereferenceable load 4 from @lastcol); cg.c:190:69
SU(10):   STRWui renamable $w2, $sp, 28 :: (store 4 into %stack.23)
SU(13):   STRWui renamable $w3, $sp, 30 :: (store 4 into %stack.22)
SU(18):   $x8 = ADRP target-flags(aarch64-page) @iv, debug-location !201; cg.c:190:5
SU(16):   STRWui renamable $w4, $sp, 32 :: (store 4 into %stack.21)
SU(20):   $x16 = ADRP target-flags(aarch64-page) @aelt, debug-location !201; cg.c:190:5
SU(22):   $x17 = ADRP target-flags(aarch64-page) @acol, debug-location !201; cg.c:190:5
SU(24):   $x18 = ADRP target-flags(aarch64-page) @arow, debug-location !201; cg.c:190:5
SU(26):   STRWui renamable $w4, $sp, 4, debug-location !201 :: (store 4 into stack + 16); cg.c:190:5
SU(27):   STRWui renamable $w3, $sp, 2, debug-location !201 :: (store 4 into stack + 8); cg.c:190:5
SU(28):   STRWui renamable $w2, $sp, 0, debug-location !201 :: (store 4 into stack); cg.c:190:5
SU(31):   $x2 = ADRP target-flags(aarch64-page) @a, debug-location !201; cg.c:190:5
SU(33):   $x3 = ADRP target-flags(aarch64-page) @colidx, debug-location !201; cg.c:190:5
SU(35):   $x4 = ADRP target-flags(aarch64-page) @rowstr, debug-location !201; cg.c:190:5
SU(19):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @iv, 0, debug-location !201; cg.c:190:5
SU(21):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @aelt, 0, debug-location !201; cg.c:190:5
SU(23):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @acol, 0, debug-location !201; cg.c:190:5
SU(25):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @arow, 0, debug-location !201; cg.c:190:5
SU(29):   $x20 = ADRP target-flags(aarch64-page) @colidx, debug-location !201; cg.c:190:5
SU(32):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !201; cg.c:190:5
SU(34):   $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !201; cg.c:190:5
SU(36):   $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !201; cg.c:190:5
SU(39):   $x19 = ADRP target-flags(aarch64-page) @rowstr, debug-location !201; cg.c:190:5
SU(2):   STRWui renamable $w0, $sp, 26 :: (store 4 into %stack.24)
SU(7):   STPWi renamable $w5, renamable $w1, $sp, 23 :: (store 4 into %stack.25), (store 4 into %stack.26)
SU(17):   STURDi renamable $d0, $fp, -64, debug-location !194 :: (store 8 into %ir.zeta); cg.c:185:10
SU(30):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !201; cg.c:190:5
SU(37):   STPXi renamable $x16, renamable $x8, $sp, 5, debug-location !201 :: (store 8 into stack + 40), (store 8 into stack + 48); cg.c:190:5
SU(38):   STPXi renamable $x18, renamable $x17, $sp, 3, debug-location !201 :: (store 8 into stack + 24), (store 8 into stack + 32); cg.c:190:5
SU(40):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !201; cg.c:190:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: renamable $x17 = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !193; cg.c:185:12
 RegionInstrs: 22
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(15): Data Latency=1 Reg=$x17
SU(1):   renamable $x18 = ADRP target-flags(aarch64-page) @nzz, debug-location !189; cg.c:178:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(11): Data Latency=1 Reg=$x18
SU(2):   $x8 = ADRP target-flags(aarch64-page) @tran, debug-location !190; cg.c:183:10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 12
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !190; cg.c:183:10
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 11
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Out  Latency=1
    SU(12): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x8
SU(4):   $x16 = MOVZXi 41216, 16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 13
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
SU(5):   $x16 = MOVKXi $x16(tied-def 0), 47536, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 12
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x16
SU(6):   $x16 = MOVKXi $x16(tied-def 0), 16818, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 11
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
  Successors:
    SU(10): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
SU(7):   STRXui renamable $x16, renamable $x8, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 10
  Predecessors:
    SU(6): Data Latency=1 Reg=$x16
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(10): Anti Latency=0
    SU(8): Anti Latency=0
    SU(12): Anti Latency=0
SU(8):   $w8 = MOVZWi 19936, 0
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 10
  Predecessors:
    SU(7): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(12): Out  Latency=1
    SU(9): Data Latency=1 Reg=$w8
SU(9):   $w8 = MOVKWi $w8(tied-def 0), 224, 16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 9
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w8
  Successors:
    SU(12): Out  Latency=1
    SU(11): Data Latency=1 Reg=$w8
    SU(12): Anti Latency=0
SU(10):   renamable $x16 = ADRP target-flags(aarch64-page) @amult, debug-location !191; cg.c:184:11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 6
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(16): Data Latency=1 Reg=$x16
SU(11):   STRWui renamable $w8, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(9): Data Latency=1 Reg=$w8
    SU(1): Data Latency=1 Reg=$x18
  Successors:
    SU(12): Anti Latency=0
SU(12):   $x8 = MOVZXi 58688, 16
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 8
  Predecessors:
    SU(11): Anti Latency=0
    SU(9): Out  Latency=1
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(7): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
SU(13):   $x8 = MOVKXi $x8(tied-def 0), 12444, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 7
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
SU(14):   $x8 = MOVKXi $x8(tied-def 0), 16850, 48
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 6
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x8
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x8
SU(15):   STRWui renamable $w19, renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x17
SU(16):   STRXui renamable $x8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(14): Data Latency=1 Reg=$x8
    SU(10): Data Latency=1 Reg=$x16
  Successors:
    SU(17): Anti Latency=0
SU(17):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 5
  Predecessors:
    SU(16): Anti Latency=0
    SU(14): Out  Latency=1
  Successors:
    SU(18): Data Latency=1 Reg=$x8
SU(18):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 4
  Predecessors:
    SU(17): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(19): Data Latency=4 Reg=$d0
SU(19):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(18): Data Latency=4 Reg=$d0
SU(20):   $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !193; cg.c:185:12
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x0
SU(21):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !193; cg.c:185:12
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !193; cg.c:185:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 13
  Height             : 0
  Predecessors:
    SU(21): Ord  Latency=1 Artificial
    SU(18): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 13
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 20 
  TopQ.A RemainingLatency 0 + 0c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
  Cand SU(2) TOP-PATH                  12 cycles 
  Cand SU(4) TOP-PATH                  13 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $x16 = MOVZXi 41216, 16
  Ready @0c
  TopQ.A BotLatency SU(4) 13c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 20 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
  Cand SU(2) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x8 = ADRP target-flags(aarch64-page) @tran, debug-location !190; cg.c:183:10
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 20 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
  Cand SU(5) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $x16 = MOVKXi $x16(tied-def 0), 47536, 32
  Ready @2c
  TopQ.A TopLatency SU(5) 1c
  TopQ.A BotLatency SU(5) 12c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 20 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
  Cand SU(3) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !190; cg.c:183:10
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 20 
  TopQ.A RemainingLatency 0 + 4c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
  Cand SU(6) TOP-PATH                  11 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x16 = MOVKXi $x16(tied-def 0), 16818, 48
  Ready @4c
  TopQ.A TopLatency SU(6) 2c
  TopQ.A BotLatency SU(6) 11c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 20 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
  Cand SU(7) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) STRXui renamable $x16, renamable $x8, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
  Ready @5c
  TopQ.A TopLatency SU(7) 3c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 20 10 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
  Cand SU(8) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $w8 = MOVZWi 19936, 0
  Ready @6c
  TopQ.A BotLatency SU(8) 10c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 20 10 9 
  TopQ.A RemainingLatency 0 + 7c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x18 = ADRP target-flags(aarch64-page) @nzz, debug-location !189; cg.c:178:9
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 20 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $w8 = MOVKWi $w8(tied-def 0), 224, 16
  Ready @8c
  TopQ.A TopLatency SU(9) 4c
  TopQ.A BotLatency SU(9) 9c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 20 11 
  TopQ.A RemainingLatency 0 + 9c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  6 cycles 
  Cand SU(11) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) STRWui renamable $w8, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
  Ready @9c
  TopQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 20 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  6 cycles 
  Cand SU(12) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(12) $x8 = MOVZXi 58688, 16
  Ready @10c
  TopQ.A BotLatency SU(12) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 20 13 
  TopQ.A RemainingLatency 0 + 11c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  6 cycles 
  Cand SU(13) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(13) $x8 = MOVKXi $x8(tied-def 0), 12444, 32
  Ready @11c
  TopQ.A TopLatency SU(13) 6c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 20 14 
  TopQ.A RemainingLatency 0 + 12c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x16 = ADRP target-flags(aarch64-page) @amult, debug-location !191; cg.c:184:11
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 14 20 
  TopQ.A RemainingLatency 0 + 13c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(14) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x8 = MOVKXi $x8(tied-def 0), 16850, 48
  Ready @13c
  TopQ.A TopLatency SU(14) 7c
  TopQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 20 16 
  TopQ.A RemainingLatency 0 + 14c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(16) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) STRXui renamable $x8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
  Ready @14c
  TopQ.A TopLatency SU(16) 8c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 20 17 
  TopQ.A RemainingLatency 0 + 15c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(17) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @15c
  TopQ.A BotLatency SU(17) 5c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 20 18 
  TopQ.A RemainingLatency 0 + 16c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
  Cand SU(18) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @16c
  TopQ.A TopLatency SU(18) 9c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 0 20 
  TopQ.A RemainingLatency 0 + 17c > CritPath 13
  Cand SU(0) ORDER                              
  Cand SU(20) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !193; cg.c:185:12
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 0 21 
  TopQ.A RemainingLatency 0 + 18c > CritPath 13
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x17 = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 19 
Queue TopQ.A: 21 15 
  TopQ.A RemainingLatency 0 + 19c > CritPath 13
  Cand SU(21) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(21) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !193; cg.c:185:12
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 19 
  TopQ.A RemainingLatency 0 + 20c > CritPath 13
  Cand SU(15) ORDER                              
Pick Top ORDER     
Scheduling SU(15) STRWui renamable $w19, renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  Ready @21c
  TopQ.A TopLatency SU(19) 13c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(4):   $x16 = MOVZXi 41216, 16
SU(2):   $x8 = ADRP target-flags(aarch64-page) @tran, debug-location !190; cg.c:183:10
SU(5):   $x16 = MOVKXi $x16(tied-def 0), 47536, 32
SU(3):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !190; cg.c:183:10
SU(6):   $x16 = MOVKXi $x16(tied-def 0), 16818, 48
SU(7):   STRXui renamable $x16, renamable $x8, 0, debug-location !190 :: (store 8 into @tran); cg.c:183:10
SU(8):   $w8 = MOVZWi 19936, 0
SU(1):   renamable $x18 = ADRP target-flags(aarch64-page) @nzz, debug-location !189; cg.c:178:9
SU(9):   $w8 = MOVKWi $w8(tied-def 0), 224, 16
SU(11):   STRWui renamable $w8, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @nzz, debug-location !189 :: (store 4 into @nzz); cg.c:178:9
SU(12):   $x8 = MOVZXi 58688, 16
SU(13):   $x8 = MOVKXi $x8(tied-def 0), 12444, 32
SU(10):   renamable $x16 = ADRP target-flags(aarch64-page) @amult, debug-location !191; cg.c:184:11
SU(14):   $x8 = MOVKXi $x8(tied-def 0), 16850, 48
SU(16):   STRXui renamable $x8, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !191 :: (store 8 into @amult); cg.c:184:11
SU(17):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(18):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(20):   $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !193; cg.c:185:12
SU(0):   renamable $x17 = ADRP target-flags(aarch64-page) @naa, debug-location !188; cg.c:177:9
SU(21):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !193; cg.c:185:12
SU(15):   STRWui renamable $w19, renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !188 :: (store 4 into @naa); cg.c:177:9
SU(19):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)

********** MI Scheduling **********
main:%bb.6 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @cg__str_8___, debug-location !187; cg.c:175:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !187; cg.c:175:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_8___, debug-location !187; cg.c:175:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_8___, 0, debug-location !187; cg.c:175:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !187; cg.c:175:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @cg__str_8___, debug-location !187; cg.c:175:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_8___, 0, debug-location !187; cg.c:175:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_8___, debug-location !187; cg.c:175:5
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_8___, 0, debug-location !187; cg.c:175:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !186; cg.c:174:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, 0, debug-location !186; cg.c:174:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 75, 0, debug-location !186; cg.c:174:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !186; cg.c:174:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, 0, debug-location !186; cg.c:174:5
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w1 = MOVZWi 75, 0, debug-location !186; cg.c:174:5
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_7__Iteration, debug-location !186; cg.c:174:5
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_7__Iteration, 0, debug-location !186; cg.c:174:5
SU(2):   $w1 = MOVZWi 75, 0, debug-location !186; cg.c:174:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: $x0 = ADRP target-flags(aarch64-page) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !185; cg.c:173:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, 0, debug-location !185; cg.c:173:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   $w1 = MOVZWi 9464, 0, debug-location !185; cg.c:173:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w1
SU(3):   $w1 = MOVKWi $w1(tied-def 0), 1, 16, debug-location !185; cg.c:173:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$w1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !185; cg.c:173:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $w1 = MOVZWi 9464, 0, debug-location !185; cg.c:173:5
  Ready @1c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, 0, debug-location !185; cg.c:173:5
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w1 = MOVKWi $w1(tied-def 0), 1, 16, debug-location !185; cg.c:173:5
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_6__Size___11, debug-location !185; cg.c:173:5
SU(2):   $w1 = MOVZWi 9464, 0, debug-location !185; cg.c:173:5
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_6__Size___11, 0, debug-location !185; cg.c:173:5
SU(3):   $w1 = MOVKWi $w1(tied-def 0), 1, 16, debug-location !185; cg.c:173:5

********** MI Scheduling **********
main:%bb.6 if.end
  From: renamable $x16 = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !184; cg.c:172:5
 RegionInstrs: 18
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=$x16
SU(1):   renamable $w8 = SUBWri renamable $w19, 1, 0, debug-location !174; cg.c:136:13
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Out  Latency=1
    SU(9): Out  Latency=1
    SU(6): Data Latency=1 Reg=$w8
    SU(5): Data Latency=1 Reg=$w8
SU(2):   renamable $x17 = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Data Latency=1 Reg=$x17
SU(3):   renamable $x18 = ADRP target-flags(aarch64-page) @firstcol, debug-location !175; cg.c:137:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=1 Reg=$x18
SU(4):   renamable $x6 = ADRP target-flags(aarch64-page) @lastcol, debug-location !176; cg.c:138:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(6): Data Latency=1 Reg=$x6
SU(5):   STRWui renamable $w8, renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x17
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    SU(7): Anti Latency=0
    SU(9): Anti Latency=0
SU(6):   STRWui renamable $w8, renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$x6
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    SU(7): Anti Latency=0
    SU(9): Anti Latency=0
SU(7):   $w8 = MOVZWi 66, 0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w8
SU(8):   STURBBi renamable $w8, $fp, -116, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
  Successors:
    SU(9): Anti Latency=0
SU(9):   $x8 = MOVZXi 17818, 0
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(8): Anti Latency=0
    SU(7): Out  Latency=1
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
SU(10):   $x8 = MOVKXi $x8(tied-def 0), 31978, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x8
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
SU(11):   $x8 = MOVKXi $x8(tied-def 0), 46710, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x8
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
SU(12):   $x8 = MOVKXi $x8(tied-def 0), 16438, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x8
  Successors:
    SU(15): Data Latency=1 Reg=$x8
SU(13):   STRWui $wzr, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x16
SU(14):   STRWui $wzr, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$x18
SU(15):   STURXi renamable $x8, $fp, -128, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=$x8
SU(16):   $x0 = ADRP target-flags(aarch64-page) @cg__str_5____NAS_Par, debug-location !184; cg.c:172:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x0
SU(17):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_5____NAS_Par, 0, debug-location !184; cg.c:172:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !184; cg.c:172:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 16 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = SUBWri renamable $w19, 1, 0, debug-location !174; cg.c:136:13
  Ready @0c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x17 = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
  Ready @1c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 4 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x6 = ADRP target-flags(aarch64-page) @lastcol, debug-location !176; cg.c:138:13
  Ready @2c
  TopQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 5 3 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(5) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) STRWui renamable $w8, renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 6 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(6) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) STRWui renamable $w8, renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
  Ready @4c
  TopQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 3 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w8 = MOVZWi 66, 0
  Ready @5c
  TopQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 3 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(8) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) STURBBi renamable $w8, $fp, -116, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
  Ready @6c
  TopQ.A TopLatency SU(8) 2c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 3 9 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(9) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x8 = MOVZXi 17818, 0
  Ready @7c
  TopQ.A BotLatency SU(9) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 3 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(10) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) $x8 = MOVKXi $x8(tied-def 0), 31978, 16
  Ready @8c
  TopQ.A TopLatency SU(10) 3c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 3 11 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $x8 = MOVKXi $x8(tied-def 0), 46710, 32
  Ready @9c
  TopQ.A TopLatency SU(11) 4c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 16 3 12 
  TopQ.A RemainingLatency 0 + 10c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) $x0 = ADRP target-flags(aarch64-page) @cg__str_5____NAS_Par, debug-location !184; cg.c:172:5
  Ready @10c
  TopQ.A BotLatency SU(16) 2c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 12 3 17 
  TopQ.A RemainingLatency 0 + 11c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x16 = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 12 3 13 
  TopQ.A RemainingLatency 0 + 12c > CritPath 6
  Cand SU(17) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x18 = ADRP target-flags(aarch64-page) @firstcol, debug-location !175; cg.c:137:14
  Ready @12c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 12 13 14 
  TopQ.A RemainingLatency 0 + 13c > CritPath 6
  Cand SU(17) ORDER                              
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x8 = MOVKXi $x8(tied-def 0), 16438, 48
  Ready @13c
  TopQ.A TopLatency SU(12) 5c
  TopQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 14 13 15 
  TopQ.A RemainingLatency 0 + 14c > CritPath 6
  Cand SU(17) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(17) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_5____NAS_Par, 0, debug-location !184; cg.c:172:5
  Ready @14c
  TopQ.A BotLatency SU(17) 1c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 14 13 
  TopQ.A RemainingLatency 0 + 15c > CritPath 6
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) STRWui $wzr, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 14 
  TopQ.A RemainingLatency 0 + 16c > CritPath 6
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
Pick Top ORDER     
Scheduling SU(14) STRWui $wzr, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) STURXi renamable $x8, $fp, -128, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27
  Ready @17c
  TopQ.A TopLatency SU(15) 6c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   renamable $w8 = SUBWri renamable $w19, 1, 0, debug-location !174; cg.c:136:13
SU(2):   renamable $x17 = ADRP target-flags(aarch64-page) @lastrow, debug-location !174; cg.c:136:13
SU(4):   renamable $x6 = ADRP target-flags(aarch64-page) @lastcol, debug-location !176; cg.c:138:13
SU(5):   STRWui renamable $w8, renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !174 :: (store 4 into @lastrow); cg.c:136:13
SU(6):   STRWui renamable $w8, renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !176 :: (store 4 into @lastcol); cg.c:138:13
SU(7):   $w8 = MOVZWi 66, 0
SU(8):   STURBBi renamable $w8, $fp, -116, debug-location !177 :: (store 1 into %ir.Class, align 4); cg.c:153:15
SU(9):   $x8 = MOVZXi 17818, 0
SU(10):   $x8 = MOVKXi $x8(tied-def 0), 31978, 16
SU(11):   $x8 = MOVKXi $x8(tied-def 0), 46710, 32
SU(16):   $x0 = ADRP target-flags(aarch64-page) @cg__str_5____NAS_Par, debug-location !184; cg.c:172:5
SU(0):   renamable $x16 = ADRP target-flags(aarch64-page) @firstrow, debug-location !173; cg.c:135:14
SU(3):   renamable $x18 = ADRP target-flags(aarch64-page) @firstcol, debug-location !175; cg.c:137:14
SU(12):   $x8 = MOVKXi $x8(tied-def 0), 16438, 48
SU(17):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_5____NAS_Par, 0, debug-location !184; cg.c:172:5
SU(13):   STRWui $wzr, renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !173 :: (store 4 into @firstrow); cg.c:135:14
SU(14):   STRWui $wzr, renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !175 :: (store 4 into @firstcol); cg.c:137:14
SU(15):   STURXi renamable $x8, $fp, -128, debug-location !183 :: (store 8 into %ir.zeta_verify_value); cg.c:154:27

********** MI Scheduling **********
main:%bb.6 if.end
  From: $w19 = MOVZWi 9464, 0
    To: BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !172; cg.c:133:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w19 = MOVZWi 9464, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$w19
SU(1):   $w19 = MOVKWi $w19(tied-def 0), 1, 16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$w19
SU(2):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !172; cg.c:133:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !172; cg.c:133:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w19 = MOVZWi 9464, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !172; cg.c:133:5
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w19 = MOVKWi $w19(tied-def 0), 1, 16
  Ready @2c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $w19 = MOVZWi 9464, 0
SU(2):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !172; cg.c:133:5
SU(1):   $w19 = MOVKWi $w19(tied-def 0), 1, 16

Fixup kills for %bb.6
********** MI Scheduling **********
main:%bb.7 for.cond10
  From: renamable $w8 = LDRWui renamable $x7, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
    To: Bcc 10, %bb.12, implicit $nzcv, debug-location !212; cg.c:202:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x7, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !208 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w17
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !209; cg.c:202:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !210; cg.c:202:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !212; cg.c:202:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.12, implicit $nzcv, debug-location !212; cg.c:202:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x7, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !208 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = LDURWi $fp, -48, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !209; cg.c:202:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !210; cg.c:202:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !212; cg.c:202:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w8 = LDRWui renamable $x7, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !207 :: (dereferenceable load 4 from @lastrow); cg.c:202:21
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !208 :: (dereferenceable load 4 from @firstrow); cg.c:202:31
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !205 :: (dereferenceable load 4 from %ir.j); cg.c:202:17
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !209; cg.c:202:29
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !210; cg.c:202:40
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !212; cg.c:202:5

Fixup kills for %bb.7
********** MI Scheduling **********
main:%bb.8 for.body12
  From: renamable $x8 = LDURSWi $fp, -48, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $w8 = LDRWroX renamable $x19, renamable $x8, 0, 1, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -48, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWroX renamable $x19, renamable $x8, 0, 1, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !213 :: (dereferenceable load 4 from %ir.j); cg.c:203:25
SU(1):   renamable $w8 = LDRWroX renamable $x19, renamable $x8, 0, 1, debug-location !216 :: (load 4 from %ir.arrayidx13); cg.c:203:18

Fixup kills for %bb.8
********** MI Scheduling **********
main:%bb.9 for.cond14
  From: STURWi killed renamable $w8, $fp, -52, debug-location !DILocation(line: 0, scope: !214) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.11, implicit $nzcv, debug-location !225; cg.c:203:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w8, $fp, -52, debug-location !DILocation(line: 0, scope: !214) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(2): Anti Latency=0
    SU(1): Ord  Latency=1 Memory
SU(1):   renamable $w16, $w8 = LDPWi $fp, -13, debug-location !221 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:203:40
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 9
  Predecessors:
    SU(0): Anti Latency=0
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w16
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$w8
SU(2):   $w8 = KILL $w8, implicit-def $x8, debug-location !221; cg.c:203:40
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 8
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=0 Reg=$w8
    SU(0): Anti Latency=0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=0 Reg=$x8
SU(3):   $x8 = SBFMXri $x8, 0, 31, debug-location !221; cg.c:203:40
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 7
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=0 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $x8 = ADDXrs renamable $x19, renamable $x8, 2, debug-location !223; cg.c:203:33
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !223 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=4 Reg=$w8
SU(6):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !225; cg.c:203:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.11, implicit $nzcv, debug-location !225; cg.c:203:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi renamable $w8, $fp, -52, debug-location !DILocation(line: 0, scope: !214) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16, $w8 = LDPWi $fp, -13, debug-location !221 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:203:40
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $w8 = KILL $w8, implicit-def $x8, debug-location !221; cg.c:203:40
  Ready @2c
  TopQ.A TopLatency SU(2) 2c
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 3 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x8 = SBFMXri $x8, 0, 31, debug-location !221; cg.c:203:40
  Ready @3c
  TopQ.A TopLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x8 = ADDXrs renamable $x19, renamable $x8, 2, debug-location !223; cg.c:203:33
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = LDRWui renamable $x8, 1, debug-location !223 :: (load 4 from %ir.arrayidx17); cg.c:203:33
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !225; cg.c:203:9
  Ready @9c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   STURWi renamable $w8, $fp, -52, debug-location !DILocation(line: 0, scope: !214) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $w16, $w8 = LDPWi $fp, -13, debug-location !221 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.k); cg.c:203:40
SU(2):   $w8 = KILL $w8, implicit-def $x8, debug-location !221; cg.c:203:40
SU(3):   $x8 = SBFMXri $x8, 0, 31, debug-location !221; cg.c:203:40
SU(4):   renamable $x8 = ADDXrs renamable $x19, renamable $x8, 2, debug-location !223; cg.c:203:33
SU(5):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !223 :: (load 4 from %ir.arrayidx17); cg.c:203:33
SU(6):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !225; cg.c:203:9

Fixup kills for %bb.9
********** MI Scheduling **********
main:%bb.10 for.body19
  From: renamable $x8 = LDURSWi $fp, -52, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
    To: B %bb.9
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -52, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w8
    SU(5): Data Latency=0 Reg=$x8
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @firstcol, debug-location !229; cg.c:204:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w16
SU(3):   renamable $x17 = UBFMXri renamable $x8, 62, 61, debug-location !228; cg.c:204:25
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$x17
    SU(4): Data Latency=1 Reg=$x17
    SU(5): Anti Latency=0
SU(4):   renamable $w18 = LDRWroX renamable $x20, renamable $x17, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    SU(6): Data Latency=4 Reg=$w18
    SU(7): Ord  Latency=0 Memory
SU(5):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !234; cg.c:203:49
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
SU(6):   $w16 = SUBWrs renamable $w18, renamable $w16, 0, debug-location !230; cg.c:204:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=$w18
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w16
  Successors:
    SU(7): Data Latency=1 Reg=$w16
SU(7):   STRWroX renamable $w16, renamable $x20, renamable $x17, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$w16
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=$x17
ExitSU:   B %bb.9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -52, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = ADRP target-flags(aarch64-page) @firstcol, debug-location !229; cg.c:204:37
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x17 = UBFMXri renamable $x8, 62, 61, debug-location !228; cg.c:204:25
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w18 = LDRWroX renamable $x20, renamable $x17, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !234; cg.c:203:49
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $w16 = SUBWrs renamable $w18, renamable $w16, 0, debug-location !230; cg.c:204:35
  Ready @9c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWroX renamable $w16, renamable $x20, renamable $x17, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23
  Ready @10c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x8 = LDURSWi $fp, -52, debug-location !226 :: (dereferenceable load 4 from %ir.k); cg.c:204:32
SU(1):   renamable $x16 = ADRP target-flags(aarch64-page) @firstcol, debug-location !229; cg.c:204:37
SU(2):   renamable $w16 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !229 :: (dereferenceable load 4 from @firstcol); cg.c:204:37
SU(3):   renamable $x17 = UBFMXri renamable $x8, 62, 61, debug-location !228; cg.c:204:25
SU(4):   renamable $w18 = LDRWroX renamable $x20, renamable $x17, 0, 0, debug-location !228 :: (load 4 from %ir.arrayidx21); cg.c:204:25
SU(5):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !234; cg.c:203:49
SU(6):   $w16 = SUBWrs renamable $w18, renamable $w16, 0, debug-location !230; cg.c:204:35
SU(7):   STRWroX renamable $w16, renamable $x20, renamable $x17, 0, 0, debug-location !233 :: (store 4 into %ir.arrayidx24); cg.c:204:23

Fixup kills for %bb.10
********** MI Scheduling **********
main:%bb.11 for.inc28
  From: renamable $w8 = LDURWi $fp, -48, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
    To: B %bb.7
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -48, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !238; cg.c:202:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -48, debug-location !238 :: (store 4 into %ir.j); cg.c:202:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -48, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !238; cg.c:202:46
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -48, debug-location !238 :: (store 4 into %ir.j); cg.c:202:46
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $w8 = LDURWi $fp, -48, debug-location !238 :: (dereferenceable load 4 from %ir.j); cg.c:202:46
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !238; cg.c:202:46
SU(2):   STURWi renamable $w8, $fp, -48, debug-location !238 :: (store 4 into %ir.j); cg.c:202:46

Fixup kills for %bb.11
********** MI Scheduling **********
main:%bb.12 for.end30
  From: STURWi $wzr, $fp, -44, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -44, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x8 = ADRP target-flags(aarch64-page) @x
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x16 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w0 = MOVZWi 9464, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w0
SU(5):   $w0 = MOVKWi $w0(tied-def 0), 1, 16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = ADRP target-flags(aarch64-page) @x
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $w0 = MOVZWi 9464, 0
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x16 = MOVZXi 16368, 48
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $w0 = MOVKWi $w0(tied-def 0), 1, 16
  Ready @4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -44, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(1):   $x8 = ADRP target-flags(aarch64-page) @x
SU(4):   $w0 = MOVZWi 9464, 0
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
SU(3):   $x16 = MOVZXi 16368, 48
SU(5):   $w0 = MOVKWi $w0(tied-def 0), 1, 16
SU(0):   STURWi $wzr, $fp, -44, debug-location !242 :: (store 4 into %ir.i); cg.c:211:12

Fixup kills for %bb.12
********** MI Scheduling **********
main:%bb.13 for.cond31
  From: renamable $w17 = LDURWi $fp, -44, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
    To: Bcc 10, %bb.15, implicit $nzcv, debug-location !248; cg.c:211:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDURWi $fp, -44, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w17
SU(1):   renamable $w18 = ADDWri renamable $w0, 1, 0, debug-location !247; cg.c:211:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   $wzr = SUBSWrs renamable $w17, renamable $w18, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !248; cg.c:211:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.15, implicit $nzcv, debug-location !248; cg.c:211:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w17 = LDURWi $fp, -44, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = ADDWri renamable $w0, 1, 0, debug-location !247; cg.c:211:19
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w17, renamable $w18, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !248; cg.c:211:5
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w17 = LDURWi $fp, -44, debug-location !245 :: (dereferenceable load 4 from %ir.i); cg.c:211:17
SU(1):   renamable $w18 = ADDWri renamable $w0, 1, 0, debug-location !247; cg.c:211:19
SU(2):   $wzr = SUBSWrs renamable $w17, renamable $w18, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !248; cg.c:211:5

Fixup kills for %bb.13
********** MI Scheduling **********
main:%bb.14 for.body33
  From: renamable $x17 = LDURSWi $fp, -44, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
    To: B %bb.13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDURSWi $fp, -44, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w17
    SU(2): Data Latency=0 Reg=$x17
    SU(1): Data Latency=4 Reg=$x17
    SU(3): Ord  Latency=0 Memory
SU(1):   STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !253; cg.c:211:30
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
    SU(0): Data Latency=0 Reg=$x17
  Successors:
    SU(3): Data Latency=1 Reg=$w17
SU(3):   STURWi renamable $w17, $fp, -44, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w17
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x17 = LDURSWi $fp, -44, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !253; cg.c:211:30
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w17, $fp, -44, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   renamable $x17 = LDURSWi $fp, -44, debug-location !249 :: (dereferenceable load 4 from %ir.i); cg.c:212:11
SU(1):   STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !252 :: (store 8 into %ir.arrayidx35); cg.c:212:14
SU(2):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !253; cg.c:211:30
SU(3):   STURWi renamable $w17, $fp, -44, debug-location !253 :: (store 4 into %ir.i); cg.c:211:30

Fixup kills for %bb.14
********** MI Scheduling **********
main:%bb.15 for.end38
  From: STURWi $wzr, $fp, -48, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
    To: End RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -48, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x17 = ADRP target-flags(aarch64-page) @q
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
SU(4):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x18 = ADRP target-flags(aarch64-page) @z
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x18
SU(6):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $x0 = ADRP target-flags(aarch64-page) @r
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   $x1 = ADRP target-flags(aarch64-page) @p
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
SU(10):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 7 9 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $x17 = ADRP target-flags(aarch64-page) @q
  Ready @0c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 9 5 7 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(9) TOP-PATH                  2 cycles 
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x18 = ADRP target-flags(aarch64-page) @z
  Ready @1c
  TopQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 9 4 7 6 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(9) TOP-PATH                  2 cycles 
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $x0 = ADRP target-flags(aarch64-page) @r
  Ready @2c
  TopQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 9 4 6 8 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(9) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) $x1 = ADRP target-flags(aarch64-page) @p
  Ready @3c
  TopQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 8 4 6 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 2 8 4 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 6 8 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
  Ready @6c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 6 8 
  TopQ.A RemainingLatency 0 + 7c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  Ready @7c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 8 
  TopQ.A RemainingLatency 0 + 8c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
  Ready @8c
  TopQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(10) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
  Ready @9c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -48, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(3):   $x17 = ADRP target-flags(aarch64-page) @q
SU(5):   $x18 = ADRP target-flags(aarch64-page) @z
SU(7):   $x0 = ADRP target-flags(aarch64-page) @r
SU(9):   $x1 = ADRP target-flags(aarch64-page) @p
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
SU(4):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @q, 0
SU(6):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
SU(8):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @r, 0
SU(10):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @p, 0
SU(0):   STURWi $wzr, $fp, -48, debug-location !257 :: (store 4 into %ir.j); cg.c:214:12

Fixup kills for %bb.15
********** MI Scheduling **********
main:%bb.16 for.cond39
  From: renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
    To: Bcc 10, %bb.18, implicit $nzcv, debug-location !267; cg.c:214:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w2
SU(1):   renamable $w3 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !263 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w3
SU(2):   renamable $w4 = LDURWi $fp, -48, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w4
SU(3):   $w2 = SUBWrs renamable $w2, renamable $w3, 0, debug-location !264; cg.c:214:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w3
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w2
SU(4):   renamable $w2 = nsw ADDWri renamable $w2, 1, 0, debug-location !265; cg.c:214:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w2
  Successors:
    SU(5): Data Latency=1 Reg=$w2
SU(5):   $wzr = SUBSWrs renamable $w4, renamable $w2, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !267; cg.c:214:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w2
    SU(2): Data Latency=4 Reg=$w4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.18, implicit $nzcv, debug-location !267; cg.c:214:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w3 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !263 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w4 = LDURWi $fp, -48, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w2 = SUBWrs renamable $w2, renamable $w3, 0, debug-location !264; cg.c:214:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w2 = nsw ADDWri renamable $w2, 1, 0, debug-location !265; cg.c:214:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w4, renamable $w2, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !267; cg.c:214:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $w2 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !262 :: (dereferenceable load 4 from @lastcol); cg.c:214:21
SU(1):   renamable $w3 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !263 :: (dereferenceable load 4 from @firstcol); cg.c:214:31
SU(2):   renamable $w4 = LDURWi $fp, -48, debug-location !260 :: (dereferenceable load 4 from %ir.j); cg.c:214:17
SU(3):   $w2 = SUBWrs renamable $w2, renamable $w3, 0, debug-location !264; cg.c:214:29
SU(4):   renamable $w2 = nsw ADDWri renamable $w2, 1, 0, debug-location !265; cg.c:214:40
SU(5):   $wzr = SUBSWrs renamable $w4, renamable $w2, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !267; cg.c:214:5

Fixup kills for %bb.16
********** MI Scheduling **********
main:%bb.17 for.body43
  From: renamable $x2 = LDURSWi $fp, -48, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
    To: B %bb.16
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x2 = LDURSWi $fp, -48, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w2
    SU(2): Data Latency=0 Reg=$x2
    SU(1): Data Latency=4 Reg=$x2
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $x3 = UBFMXri renamable $x2, 61, 60, debug-location !279; cg.c:218:9
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x2
  Successors:
    SU(6): Data Latency=1 Reg=$x3
    SU(5): Data Latency=1 Reg=$x3
    SU(4): Data Latency=1 Reg=$x3
    SU(3): Data Latency=1 Reg=$x3
    SU(2): Anti Latency=0
SU(2):   renamable $w2 = nsw ADDWri renamable $w2, 1, 0, implicit $x2, debug-location !281; cg.c:214:46
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w2
    SU(0): Data Latency=0 Reg=$x2
  Successors:
    SU(7): Data Latency=1 Reg=$w2
SU(3):   STRXroX $xzr, renamable $x17, renamable $x3, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x3
SU(4):   STRXroX $xzr, renamable $x18, renamable $x3, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x3
SU(5):   STRXroX $xzr, renamable $x0, renamable $x3, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x3
SU(6):   STRXroX $xzr, renamable $x1, renamable $x3, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$x3
SU(7):   STURWi renamable $w2, $fp, -48, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w2
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x2 = LDURSWi $fp, -48, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x3 = UBFMXri renamable $x2, 61, 60, debug-location !279; cg.c:218:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 3 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w2 = nsw ADDWri renamable $w2, 1, 0, implicit $x2, debug-location !281; cg.c:214:46
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRXroX $xzr, renamable $x17, renamable $x3, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRXroX $xzr, renamable $x18, renamable $x3, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 7 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRXroX $xzr, renamable $x0, renamable $x3, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STRXroX $xzr, renamable $x1, renamable $x3, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURWi renamable $w2, $fp, -48, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $x2 = LDURSWi $fp, -48, debug-location !268 :: (dereferenceable load 4 from %ir.j); cg.c:215:11
SU(1):   renamable $x3 = UBFMXri renamable $x2, 61, 60, debug-location !279; cg.c:218:9
SU(2):   renamable $w2 = nsw ADDWri renamable $w2, 1, 0, implicit $x2, debug-location !281; cg.c:214:46
SU(3):   STRXroX $xzr, renamable $x17, renamable $x3, 0, 0, debug-location !271 :: (store 8 into %ir.arrayidx45); cg.c:215:14
SU(4):   STRXroX $xzr, renamable $x18, renamable $x3, 0, 0, debug-location !274 :: (store 8 into %ir.arrayidx47); cg.c:216:14
SU(5):   STRXroX $xzr, renamable $x0, renamable $x3, 0, 0, debug-location !277 :: (store 8 into %ir.arrayidx49); cg.c:217:14
SU(6):   STRXroX $xzr, renamable $x1, renamable $x3, 0, 0, debug-location !280 :: (store 8 into %ir.arrayidx51); cg.c:218:14
SU(7):   STURWi renamable $w2, $fp, -48, debug-location !281 :: (store 4 into %ir.j); cg.c:214:46

Fixup kills for %bb.17
********** MI Scheduling **********
main:%bb.18 for.end54
  From: STURXi $xzr, $fp, -64, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
    To: End RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   STURXi $xzr, $fp, -64, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(2):   $x20 = ADRP target-flags(aarch64-page) @x
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x20
SU(3):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   renamable $x16 = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=1 Reg=$x16
SU(5):   STURWi renamable $w8, $fp, -56, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
SU(6):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(7): Data Latency=4 Reg=$d0
SU(7):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(6): Data Latency=4 Reg=$d0
SU(8):   $x19 = ADRP target-flags(aarch64-page) @z
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x19
SU(9):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x16 = ADRP target-flags(aarch64-page) %const.4
  Ready @0c
  TopQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 8 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
  Cand SU(6) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 0 1 2 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x20 = ADRP target-flags(aarch64-page) @x
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 0 1 8 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) $x19 = ADRP target-flags(aarch64-page) @z
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 0 1 3 9 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 1, 0
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 3 5 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  Ready @5c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 9 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(9) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  Ready @6c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURXi $xzr, $fp, -64, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STURWi renamable $w8, $fp, -56, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  Ready @9c
  TopQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(4):   renamable $x16 = ADRP target-flags(aarch64-page) %const.4
SU(6):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(2):   $x20 = ADRP target-flags(aarch64-page) @x
SU(8):   $x19 = ADRP target-flags(aarch64-page) @z
SU(1):   $w8 = MOVZWi 1, 0
SU(3):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
SU(9):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
SU(0):   STURXi $xzr, $fp, -64, debug-location !285 :: (store 8 into %ir.zeta); cg.c:221:10
SU(5):   STURWi renamable $w8, $fp, -56, debug-location !286 :: (store 4 into %ir.it); cg.c:228:13
SU(7):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)

Fixup kills for %bb.18
********** MI Scheduling **********
main:%bb.19 for.cond55
  From: renamable $w8 = LDURWi $fp, -56, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
    To: Bcc 12, %bb.29, implicit $nzcv, debug-location !292; cg.c:228:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !292; cg.c:228:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.29, implicit $nzcv, debug-location !292; cg.c:228:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !292; cg.c:228:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $w8 = LDURWi $fp, -56, debug-location !289 :: (dereferenceable load 4 from %ir.it); cg.c:228:18
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !292; cg.c:228:5

Fixup kills for %bb.19
********** MI Scheduling **********
main:%bb.20 for.body57
  From: STPXi $xzr, $xzr, $fp, -11, debug-location !295 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:240:20
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STPXi $xzr, $xzr, $fp, -11, debug-location !295 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:240:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURWi $wzr, $fp, -48, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPXi $xzr, $xzr, $fp, -11, debug-location !295 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:240:20
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi $wzr, $fp, -48, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   STPXi $xzr, $xzr, $fp, -11, debug-location !295 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:240:20
SU(1):   STURWi $wzr, $fp, -48, debug-location !297 :: (store 4 into %ir.j); cg.c:242:16

********** MI Scheduling **********
main:%bb.20 for.body57
  From: renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
    To: PCN_STACKMAP 10, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !295 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:240:20
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   PCN_STACKMAP 10, 0, 0, $fp, -116, 0, $fp, -136, 0, $fp, -144, 0, $fp, -44, 0, $fp, -56, 0, $fp, -48, 0, $fp, -104, 0, $fp, -80, 0, $fp, -88, 0, $fp, -72, 0, $fp, -96, 0, $fp, -176, 0, $fp, -112, 0, $fp, -120, 0, $fp, -64, 0, $fp, -128, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !295 :: (load 8 from %stack.14.Class, align 4), (load 8 from %stack.17.epsilon), (load 8 from %stack.18.err), (load 8 from %stack.3.i, align 4), (load 8 from %stack.6.it, align 4), (load 8 from %stack.4.j, align 4), (load 8 from %stack.12.mflops), (load 8 from %stack.9.norm_temp1), (load 8 from %stack.10.norm_temp2), (load 8 from %stack.8.rnorm), (load 8 from %stack.11.t), (load 8 from %stack.19.t_names, align 16), (load 8 from %stack.13.tmax), (load 8 from %stack.15.verified, align 4), (load 8 from %stack.7.zeta), (load 8 from %stack.16.zeta_verify_value); cg.c:240:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
SU(1):   renamable $x18 = ADRP target-flags(aarch64-page) @lastcol

********** MI Scheduling **********
main:%bb.20 for.body57
  From: $x8 = SUBXri $fp, 72, 0, debug-location !293; cg.c:232:9
    To: BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit-def $sp, debug-location !293; cg.c:232:9
 RegionInstrs: 20
ScheduleDAGMI::schedule starting
SU(0):   $x8 = SUBXri $fp, 72, 0, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(14): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(14): Anti Latency=0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
SU(5):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x2 = ADRP target-flags(aarch64-page) @x, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x2
SU(7):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x3 = ADRP target-flags(aarch64-page) @z, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x3
SU(9):   $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @z, 0, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x4 = ADRP target-flags(aarch64-page) @a, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x4
SU(11):   $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x5 = ADRP target-flags(aarch64-page) @p, debug-location !293; cg.c:232:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x5
SU(13):   $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @p, 0, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x5
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(14):   $x8 = ADRP target-flags(aarch64-page) @q, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x8
SU(15):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x8
SU(16):   STRXui renamable $x8, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(15): Data Latency=1 Reg=$x8
  Successors:
    SU(17): Anti Latency=0
SU(17):   $x8 = ADRP target-flags(aarch64-page) @r, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(16): Anti Latency=0
    SU(15): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x8
SU(18):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @r, 0, debug-location !293; cg.c:232:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x8
  Successors:
    SU(19): Data Latency=1 Reg=$x8
SU(19):   STRXui renamable $x8, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$x8
ExitSU:   BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit-def $sp, debug-location !293; cg.c:232:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = SUBXri $fp, 72, 0, debug-location !293; cg.c:232:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 2 4 6 8 10 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) STRXui renamable $x8, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 2 4 6 8 10 14 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(14) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x8 = ADRP target-flags(aarch64-page) @q, debug-location !293; cg.c:232:9
  Ready @2c
  TopQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 2 4 6 8 10 15 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(15) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0, debug-location !293; cg.c:232:9
  Ready @3c
  TopQ.A TopLatency SU(15) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 2 4 6 8 10 16 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !293; cg.c:232:9
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 4 6 8 10 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !293; cg.c:232:9
  Ready @5c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 3 6 8 10 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x2 = ADRP target-flags(aarch64-page) @x, debug-location !293; cg.c:232:9
  Ready @6c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 3 5 8 10 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x3 = ADRP target-flags(aarch64-page) @z, debug-location !293; cg.c:232:9
  Ready @7c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 3 5 7 10 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x4 = ADRP target-flags(aarch64-page) @a, debug-location !293; cg.c:232:9
  Ready @8c
  TopQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 3 5 7 9 11 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x5 = ADRP target-flags(aarch64-page) @p, debug-location !293; cg.c:232:9
  Ready @9c
  TopQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 16 3 5 7 9 13 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) STRXui renamable $x8, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
  Ready @10c
  TopQ.A TopLatency SU(16) 3c
  TopQ.A BotLatency SU(16) 2c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 3 5 7 9 17 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(17) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x8 = ADRP target-flags(aarch64-page) @r, debug-location !293; cg.c:232:9
  Ready @11c
  TopQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 3 5 7 9 18 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !293; cg.c:232:9
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 18 5 7 9 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !293; cg.c:232:9
  Ready @13c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 18 9 7 
  TopQ.A RemainingLatency 0 + 14c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !293; cg.c:232:9
  Ready @14c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 18 9 
  TopQ.A RemainingLatency 0 + 15c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @z, 0, debug-location !293; cg.c:232:9
  Ready @15c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 18 
  TopQ.A RemainingLatency 0 + 16c > CritPath 5
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !293; cg.c:232:9
  Ready @16c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 13 
  TopQ.A RemainingLatency 0 + 17c > CritPath 5
  Cand SU(18) ORDER                              
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @p, 0, debug-location !293; cg.c:232:9
  Ready @17c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @r, 0, debug-location !293; cg.c:232:9
  Ready @18c
  TopQ.A TopLatency SU(18) 4c
  TopQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRXui renamable $x8, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9
  Ready @19c
  TopQ.A TopLatency SU(19) 5c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   $x8 = SUBXri $fp, 72, 0, debug-location !293; cg.c:232:9
SU(1):   STRXui renamable $x8, $sp, 2, debug-location !293 :: (store 8 into stack + 16); cg.c:232:9
SU(14):   $x8 = ADRP target-flags(aarch64-page) @q, debug-location !293; cg.c:232:9
SU(15):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0, debug-location !293; cg.c:232:9
SU(2):   $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !293; cg.c:232:9
SU(4):   $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !293; cg.c:232:9
SU(6):   $x2 = ADRP target-flags(aarch64-page) @x, debug-location !293; cg.c:232:9
SU(8):   $x3 = ADRP target-flags(aarch64-page) @z, debug-location !293; cg.c:232:9
SU(10):   $x4 = ADRP target-flags(aarch64-page) @a, debug-location !293; cg.c:232:9
SU(12):   $x5 = ADRP target-flags(aarch64-page) @p, debug-location !293; cg.c:232:9
SU(16):   STRXui renamable $x8, $sp, 0, debug-location !293 :: (store 8 into stack); cg.c:232:9
SU(17):   $x8 = ADRP target-flags(aarch64-page) @r, debug-location !293; cg.c:232:9
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !293; cg.c:232:9
SU(5):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !293; cg.c:232:9
SU(7):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !293; cg.c:232:9
SU(9):   $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @z, 0, debug-location !293; cg.c:232:9
SU(11):   $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !293; cg.c:232:9
SU(13):   $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @p, 0, debug-location !293; cg.c:232:9
SU(18):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @r, 0, debug-location !293; cg.c:232:9
SU(19):   STRXui renamable $x8, $sp, 1, debug-location !293 :: (store 8 into stack + 8); cg.c:232:9

Fixup kills for %bb.20
********** MI Scheduling **********
main:%bb.21 for.cond58
  From: renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
    To: Bcc 10, %bb.23, implicit $nzcv, debug-location !307; cg.c:242:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !303 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w17
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !304; cg.c:242:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !305; cg.c:242:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !307; cg.c:242:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.23, implicit $nzcv, debug-location !307; cg.c:242:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !303 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = LDURWi $fp, -48, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !304; cg.c:242:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !305; cg.c:242:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !307; cg.c:242:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !302 :: (dereferenceable load 4 from @lastcol); cg.c:242:25
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !303 :: (dereferenceable load 4 from @firstcol); cg.c:242:35
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !300 :: (dereferenceable load 4 from %ir.j); cg.c:242:21
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !304; cg.c:242:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !305; cg.c:242:44
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !307; cg.c:242:9

Fixup kills for %bb.21
********** MI Scheduling **********
main:%bb.22 for.body62
  From: renamable $x8 = LDURSWi $fp, -48, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
    To: B %bb.21
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(7): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(11): Ord  Latency=0 Memory
SU(1):   renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !319; cg.c:244:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Data Latency=1 Reg=$x16
    SU(2): Data Latency=1 Reg=$x16
    SU(7): Anti Latency=0
SU(2):   renamable $d0 = LDRDroX renamable $x20, renamable $x16, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d1
    SU(5): Data Latency=4 Reg=$d1
SU(4):   renamable $d3, renamable $d2 = LDPDi $fp, -11, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1), (dereferenceable load 8 from %ir.norm_temp2); cg.c:243:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=$d3
    SU(6): Data Latency=4 Reg=$d2
    SU(10): Ord  Latency=0 Memory
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !314; cg.c:243:44
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
    SU(8): Anti Latency=0
SU(6):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !315; cg.c:243:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    SU(10): Data Latency=1 Reg=$d0
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !325; cg.c:242:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(11): Data Latency=1 Reg=$w8
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !322; cg.c:244:44
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
SU(9):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !323; cg.c:244:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(4): Data Latency=4 Reg=$d3
  Successors:
    SU(10): Data Latency=1 Reg=$d1
SU(10):   STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !316 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:243:24
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(6): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(11):   STURWi renamable $w8, $fp, -48, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -48, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d3, renamable $d2 = LDPDi $fp, -11, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1), (dereferenceable load 8 from %ir.norm_temp2); cg.c:243:26
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !319; cg.c:244:39
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x20, renamable $x16, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
  Ready @6c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !325; cg.c:242:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STURWi renamable $w8, $fp, -48, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !314; cg.c:243:44
  Ready @10c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(6) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !322; cg.c:244:44
  Ready @11c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 9 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !315; cg.c:243:37
  Ready @12c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !323; cg.c:244:37
  Ready @13c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !316 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:243:24
  Ready @14c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 12
  Executed: 15c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !310 :: (dereferenceable load 4 from %ir.j); cg.c:243:41
SU(4):   renamable $d3, renamable $d2 = LDPDi $fp, -11, debug-location !308 :: (dereferenceable load 8 from %ir.norm_temp1), (dereferenceable load 8 from %ir.norm_temp2); cg.c:243:26
SU(1):   renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !319; cg.c:244:39
SU(2):   renamable $d0 = LDRDroX renamable $x20, renamable $x16, 0, 0, debug-location !311 :: (load 8 from %ir.arrayidx64); cg.c:243:39
SU(3):   renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !319 :: (load 8 from %ir.arrayidx71); cg.c:244:39
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !325; cg.c:242:50
SU(11):   STURWi renamable $w8, $fp, -48, debug-location !325 :: (store 4 into %ir.j); cg.c:242:50
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !314; cg.c:243:44
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !322; cg.c:244:44
SU(6):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !315; cg.c:243:37
SU(9):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !323; cg.c:244:37
SU(10):   STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !316 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:243:24

Fixup kills for %bb.22
********** MI Scheduling **********
main:%bb.23 for.end76
  From: renamable $d1 = LDURDi $fp, -88, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
    To: Bcc 7, %bb.25, implicit $nzcv, debug-location !331; cg.c:247:26
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -88, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !330; cg.c:247:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$d0
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !331; cg.c:247:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.25, implicit $nzcv, debug-location !331; cg.c:247:26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d1 = LDURDi $fp, -88, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FSQRTDr renamable $d1, debug-location !330; cg.c:247:28
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !331; cg.c:247:26
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $d1 = LDURDi $fp, -88, debug-location !329 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:247:33
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !330; cg.c:247:28
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !331; cg.c:247:26

Fixup kills for %bb.23
********** MI Scheduling **********
main:%bb.24 call.sqrt
  From: renamable $d1 = LDRDui $sp, 15 :: (load 8 from %stack.22)
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 15 :: (load 8 from %stack.22)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 15 :: (load 8 from %stack.22)
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $d1 = LDRDui $sp, 15 :: (load 8 from %stack.22)
SU(1):   renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
SU(2):   renamable $x18 = ADRP target-flags(aarch64-page) @lastcol

********** MI Scheduling **********
main:%bb.24 call.sqrt
  From: $q0 = ORRv16i8 $q1, $q1, debug-location !331; cg.c:247:26
    To: BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !331; cg.c:247:26
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !331; cg.c:247:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   STRDui renamable $d1, $sp, 15 :: (store 8 into %stack.22)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !331; cg.c:247:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $q0 = ORRv16i8 $q1, $q1, debug-location !331; cg.c:247:26
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d1, $sp, 15 :: (store 8 into %stack.22)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !331; cg.c:247:26
SU(1):   STRDui renamable $d1, $sp, 15 :: (store 8 into %stack.22)

Fixup kills for %bb.24
********** MI Scheduling **********
main:%bb.25 for.end76.split
  From: renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.21)
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.21)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0, debug-location !331; cg.c:247:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(2): Data Latency=1 Reg=$d0
SU(2):   STURDi renamable $d0, $fp, -88, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
SU(3):   STURWi $wzr, $fp, -48, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.21)
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi $wzr, $fp, -48, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FDIVDrr renamable $d1, renamable $d0, debug-location !331; cg.c:247:26
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURDi renamable $d0, $fp, -88, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $d1 = LDRDui $sp, 16 :: (load 8 from %stack.21)
SU(3):   STURWi $wzr, $fp, -48, debug-location !333 :: (store 4 into %ir.j); cg.c:252:16
SU(1):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0, debug-location !331; cg.c:247:26
SU(2):   STURDi renamable $d0, $fp, -88, debug-location !332 :: (store 8 into %ir.norm_temp2); cg.c:247:20

Fixup kills for %bb.25
********** MI Scheduling **********
main:%bb.26 for.cond78
  From: renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
    To: Bcc 10, %bb.28, implicit $nzcv, debug-location !343; cg.c:252:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !339 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w17
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !340; cg.c:252:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !341; cg.c:252:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !343; cg.c:252:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.28, implicit $nzcv, debug-location !343; cg.c:252:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !339 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = LDURWi $fp, -48, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !340; cg.c:252:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !341; cg.c:252:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !343; cg.c:252:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !338 :: (dereferenceable load 4 from @lastcol); cg.c:252:25
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !339 :: (dereferenceable load 4 from @firstcol); cg.c:252:35
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !336 :: (dereferenceable load 4 from %ir.j); cg.c:252:21
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !340; cg.c:252:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !341; cg.c:252:44
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !343; cg.c:252:9

Fixup kills for %bb.26
********** MI Scheduling **********
main:%bb.27 for.body82
  From: renamable $x8 = LDURSWi $fp, -48, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
    To: B %bb.26
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(4): Data Latency=0 Reg=$x8
    SU(2): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $d0 = LDURDi $fp, -88, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(2):   renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !347; cg.c:253:33
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$x16
    SU(3): Data Latency=1 Reg=$x16
    SU(4): Anti Latency=0
SU(3):   renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(5): Data Latency=4 Reg=$d1
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !352; cg.c:252:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$w8
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !348; cg.c:253:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDroX renamable $d0, renamable $x20, renamable $x16, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(2): Data Latency=1 Reg=$x16
SU(7):   STURWi renamable $w8, $fp, -48, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.26
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -48, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDURDi $fp, -88, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !347; cg.c:253:33
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !352; cg.c:252:50
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURWi renamable $w8, $fp, -48, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !348; cg.c:253:31
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDroX renamable $d0, renamable $x20, renamable $x16, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !346 :: (dereferenceable load 4 from %ir.j); cg.c:253:35
SU(1):   renamable $d0 = LDURDi $fp, -88, debug-location !344 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:253:20
SU(2):   renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !347; cg.c:253:33
SU(3):   renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !347 :: (load 8 from %ir.arrayidx84); cg.c:253:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !352; cg.c:252:50
SU(7):   STURWi renamable $w8, $fp, -48, debug-location !352 :: (store 4 into %ir.j); cg.c:252:50
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !348; cg.c:253:31
SU(6):   STRDroX renamable $d0, renamable $x20, renamable $x16, 0, 0, debug-location !351 :: (store 8 into %ir.arrayidx87); cg.c:253:18

Fixup kills for %bb.27
********** MI Scheduling **********
main:%bb.28 for.inc91
  From: renamable $w8 = LDURWi $fp, -56, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
    To: B %bb.19
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !356; cg.c:228:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -56, debug-location !356 :: (store 4 into %ir.it); cg.c:228:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.19
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !356; cg.c:228:29
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -56, debug-location !356 :: (store 4 into %ir.it); cg.c:228:29
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $w8 = LDURWi $fp, -56, debug-location !356 :: (dereferenceable load 4 from %ir.it); cg.c:228:29
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !356; cg.c:228:29
SU(2):   STURWi renamable $w8, $fp, -56, debug-location !356 :: (store 4 into %ir.it); cg.c:228:29

Fixup kills for %bb.28
********** MI Scheduling **********
main:%bb.29 for.end93
  From: STURWi $wzr, $fp, -44, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -44, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x8 = ADRP target-flags(aarch64-page) @x
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $x16 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w0 = MOVZWi 9464, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$w0
SU(5):   $w0 = MOVKWi $w0(tied-def 0), 1, 16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x8 = ADRP target-flags(aarch64-page) @x
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $w0 = MOVZWi 9464, 0
  Ready @1c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x16 = MOVZXi 16368, 48
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $w0 = MOVKWi $w0(tied-def 0), 1, 16
  Ready @4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -44, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(1):   $x8 = ADRP target-flags(aarch64-page) @x
SU(4):   $w0 = MOVZWi 9464, 0
SU(2):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
SU(3):   $x16 = MOVZXi 16368, 48
SU(5):   $w0 = MOVKWi $w0(tied-def 0), 1, 16
SU(0):   STURWi $wzr, $fp, -44, debug-location !360 :: (store 4 into %ir.i); cg.c:260:12

Fixup kills for %bb.29
********** MI Scheduling **********
main:%bb.30 for.cond94
  From: renamable $w17 = LDURWi $fp, -44, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
    To: Bcc 10, %bb.32, implicit $nzcv, debug-location !366; cg.c:260:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDURWi $fp, -44, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w17
SU(1):   renamable $w18 = ADDWri renamable $w0, 1, 0, debug-location !365; cg.c:260:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=1 Reg=$w18
SU(2):   $wzr = SUBSWrs renamable $w17, renamable $w18, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !366; cg.c:260:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w18
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.32, implicit $nzcv, debug-location !366; cg.c:260:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w17 = LDURWi $fp, -44, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w18 = ADDWri renamable $w0, 1, 0, debug-location !365; cg.c:260:19
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w17, renamable $w18, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !366; cg.c:260:5
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   renamable $w17 = LDURWi $fp, -44, debug-location !363 :: (dereferenceable load 4 from %ir.i); cg.c:260:17
SU(1):   renamable $w18 = ADDWri renamable $w0, 1, 0, debug-location !365; cg.c:260:19
SU(2):   $wzr = SUBSWrs renamable $w17, renamable $w18, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !366; cg.c:260:5

Fixup kills for %bb.30
********** MI Scheduling **********
main:%bb.31 for.body96
  From: renamable $x17 = LDURSWi $fp, -44, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
    To: B %bb.30
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDURSWi $fp, -44, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w17
    SU(2): Data Latency=0 Reg=$x17
    SU(1): Data Latency=4 Reg=$x17
    SU(3): Ord  Latency=0 Memory
SU(1):   STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(2): Anti Latency=0
SU(2):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !371; cg.c:260:30
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
    SU(0): Data Latency=0 Reg=$x17
  Successors:
    SU(3): Data Latency=1 Reg=$w17
SU(3):   STURWi renamable $w17, $fp, -44, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w17
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.30
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x17 = LDURSWi $fp, -44, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !371; cg.c:260:30
  Ready @5c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi renamable $w17, $fp, -44, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $x17 = LDURSWi $fp, -44, debug-location !367 :: (dereferenceable load 4 from %ir.i); cg.c:261:11
SU(1):   STRXroX renamable $x16, renamable $x8, renamable $x17, 0, 1, debug-location !370 :: (store 8 into %ir.arrayidx98); cg.c:261:14
SU(2):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !371; cg.c:260:30
SU(3):   STURWi renamable $w17, $fp, -44, debug-location !371 :: (store 4 into %ir.i); cg.c:260:30

Fixup kills for %bb.31
********** MI Scheduling **********
main:%bb.32 for.end101
  From: STURWi killed renamable $w19, $fp, -56, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
    To: End RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w19, $fp, -56, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Anti Latency=0
SU(1):   $x20 = ADRP target-flags(aarch64-page) @x
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x20
SU(2):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=1 Reg=$x8
SU(4):   renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=1 Reg=$x16
SU(5):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
SU(6):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.24)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(5): Data Latency=4 Reg=$d0
  Successors:
    SU(7): Anti Latency=0
SU(7):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    SU(8): Data Latency=4 Reg=$d0
SU(8):   STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.25)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=$d0
SU(9):   $x19 = ADRP target-flags(aarch64-page) @z
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x19
SU(10):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADRP target-flags(aarch64-page) %const.4
  Ready @0c
  TopQ.A BotLatency SU(3) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
  Cand SU(5) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $x16 = ADRP target-flags(aarch64-page) %const.5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 3c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURWi renamable $w19, $fp, -56, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 1 9 
  TopQ.A RemainingLatency 0 + 4c > CritPath 9
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) $x20 = ADRP target-flags(aarch64-page) @x
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 2 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 9
  Cand SU(9) ORDER                              
  Cand SU(6) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.24)
  Ready @5c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 2 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 9
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
  Ready @6c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 9 2 
  TopQ.A RemainingLatency 0 + 7c > CritPath 9
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x19 = ADRP target-flags(aarch64-page) @z
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 2 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 9
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.25)
  Ready @10c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.4
SU(5):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.4 :: (load 8 from constant-pool)
SU(4):   renamable $x16 = ADRP target-flags(aarch64-page) %const.5
SU(0):   STURWi renamable $w19, $fp, -56, debug-location !381 :: (store 4 into %ir.it); cg.c:279:13
SU(1):   $x20 = ADRP target-flags(aarch64-page) @x
SU(6):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.24)
SU(7):   renamable $d0 = LDRDui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) %const.5 :: (load 8 from constant-pool)
SU(9):   $x19 = ADRP target-flags(aarch64-page) @z
SU(2):   renamable $x20 = ADDXri $x20, target-flags(aarch64-pageoff, aarch64-nc) @x, 0
SU(10):   renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @z, 0
SU(8):   STRDui renamable $d0, $sp, 12 :: (store 8 into %stack.25)

********** MI Scheduling **********
main:%bb.32 for.end101
  From: $w0 = MOVZWi 1, 0, debug-location !379; cg.c:270:5
    To: BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !379; cg.c:270:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w0 = MOVZWi 1, 0, debug-location !379; cg.c:270:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   $w19 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @timer_start, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !379; cg.c:270:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w0 = MOVZWi 1, 0, debug-location !379; cg.c:270:5
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w19 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   $w0 = MOVZWi 1, 0, debug-location !379; cg.c:270:5
SU(1):   $w19 = MOVZWi 1, 0

********** MI Scheduling **********
main:%bb.32 for.end101
  From: STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !378; cg.c:268:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, 0, debug-location !378; cg.c:268:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !378; cg.c:268:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, 0, debug-location !378; cg.c:268:5
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_9__Initializ, debug-location !378; cg.c:268:5
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_9__Initializ, 0, debug-location !378; cg.c:268:5
SU(0):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)

********** MI Scheduling **********
main:%bb.32 for.end101
  From: STURXi $xzr, $fp, -64, debug-location !375 :: (store 8 into %ir.zeta); cg.c:264:10
    To: BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !376; cg.c:266:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STURXi $xzr, $fp, -64, debug-location !375 :: (store 8 into %ir.zeta); cg.c:264:10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !376; cg.c:266:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_stop, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, debug-location !376; cg.c:266:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w0 = ORRWrs $wzr, $wzr, 0, debug-location !376; cg.c:266:5
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURXi $xzr, $fp, -64, debug-location !375 :: (store 8 into %ir.zeta); cg.c:264:10
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(1):   $w0 = ORRWrs $wzr, $wzr, 0, debug-location !376; cg.c:266:5
SU(0):   STURXi $xzr, $fp, -64, debug-location !375 :: (store 8 into %ir.zeta); cg.c:264:10

Fixup kills for %bb.32
********** MI Scheduling **********
main:%bb.33 for.cond108
  From: renamable $w8 = LDURWi $fp, -56, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
    To: Bcc 12, %bb.49, implicit $nzcv, debug-location !387; cg.c:279:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 75, 0, implicit-def $nzcv, debug-location !387; cg.c:279:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.49, implicit $nzcv, debug-location !387; cg.c:279:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 75, 0, implicit-def $nzcv, debug-location !387; cg.c:279:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   renamable $w8 = LDURWi $fp, -56, debug-location !384 :: (dereferenceable load 4 from %ir.it); cg.c:279:18
SU(1):   dead $wzr = SUBSWri renamable $w8, 75, 0, implicit-def $nzcv, debug-location !387; cg.c:279:5

Fixup kills for %bb.33
********** MI Scheduling **********
main:%bb.34 for.body110
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !388; cg.c:284:13
    To: CBZW killed renamable $w8, %bb.36, debug-location !391; cg.c:284:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !388; cg.c:284:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !388 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.36, debug-location !391; cg.c:284:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !388; cg.c:284:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !388 :: (dereferenceable load 4 from @timeron); cg.c:284:13
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !388; cg.c:284:13
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !388 :: (dereferenceable load 4 from @timeron); cg.c:284:13

Fixup kills for %bb.34
Fixup kills for %bb.35
********** MI Scheduling **********
main:%bb.36 if.end112
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !394; cg.c:287:13
    To: CBZW killed renamable $w8, %bb.38, debug-location !396; cg.c:287:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !394; cg.c:287:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !394 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.38, debug-location !396; cg.c:287:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !394; cg.c:287:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !394 :: (dereferenceable load 4 from @timeron); cg.c:287:13
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !394; cg.c:287:13
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !394 :: (dereferenceable load 4 from @timeron); cg.c:287:13

********** MI Scheduling **********
main:%bb.36 if.end112
  From: $x8 = SUBXri $fp, 72, 0, debug-location !393; cg.c:286:9
    To: BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit-def $sp, debug-location !393; cg.c:286:9
 RegionInstrs: 20
ScheduleDAGMI::schedule starting
SU(0):   $x8 = SUBXri $fp, 72, 0, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(14): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STRXui renamable $x8, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(14): Anti Latency=0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x1
SU(5):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x2 = ADRP target-flags(aarch64-page) @x, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x2
SU(7):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(8):   $x3 = ADRP target-flags(aarch64-page) @z, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x3
SU(9):   $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @z, 0, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x3
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x4 = ADRP target-flags(aarch64-page) @a, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x4
SU(11):   $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x4
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   $x5 = ADRP target-flags(aarch64-page) @p, debug-location !393; cg.c:286:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x5
SU(13):   $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @p, 0, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x5
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(14):   $x8 = ADRP target-flags(aarch64-page) @q, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x8
SU(15):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x8
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x8
SU(16):   STRXui renamable $x8, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(15): Data Latency=1 Reg=$x8
  Successors:
    SU(17): Anti Latency=0
SU(17):   $x8 = ADRP target-flags(aarch64-page) @r, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(16): Anti Latency=0
    SU(15): Out  Latency=1
  Successors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x8
SU(18):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @r, 0, debug-location !393; cg.c:286:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x8
  Successors:
    SU(19): Data Latency=1 Reg=$x8
SU(19):   STRXui renamable $x8, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(18): Data Latency=1 Reg=$x8
ExitSU:   BL @conj_grad, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $x3, implicit $x4, implicit $x5, implicit-def $sp, debug-location !393; cg.c:286:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
    SU(11): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(7): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 6 8 10 12 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = SUBXri $fp, 72, 0, debug-location !393; cg.c:286:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 2 4 6 8 10 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) STRXui renamable $x8, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 2 4 6 8 10 14 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(14) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) $x8 = ADRP target-flags(aarch64-page) @q, debug-location !393; cg.c:286:9
  Ready @2c
  TopQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 2 4 6 8 10 15 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(15) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0, debug-location !393; cg.c:286:9
  Ready @3c
  TopQ.A TopLatency SU(15) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 2 4 6 8 10 16 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !393; cg.c:286:9
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 4 6 8 10 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !393; cg.c:286:9
  Ready @5c
  TopQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 3 6 8 10 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x2 = ADRP target-flags(aarch64-page) @x, debug-location !393; cg.c:286:9
  Ready @6c
  TopQ.A BotLatency SU(6) 2c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 3 5 8 10 7 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x3 = ADRP target-flags(aarch64-page) @z, debug-location !393; cg.c:286:9
  Ready @7c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 3 5 7 10 9 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(12) ORDER                              
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x4 = ADRP target-flags(aarch64-page) @a, debug-location !393; cg.c:286:9
  Ready @8c
  TopQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 16 3 5 7 9 11 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x5 = ADRP target-flags(aarch64-page) @p, debug-location !393; cg.c:286:9
  Ready @9c
  TopQ.A BotLatency SU(12) 2c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 16 3 5 7 9 13 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(16) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) STRXui renamable $x8, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
  Ready @10c
  TopQ.A TopLatency SU(16) 3c
  TopQ.A BotLatency SU(16) 2c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 3 5 7 9 17 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(17) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) $x8 = ADRP target-flags(aarch64-page) @r, debug-location !393; cg.c:286:9
  Ready @11c
  TopQ.A BotLatency SU(17) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 3 5 7 9 18 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !393; cg.c:286:9
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 18 5 7 9 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !393; cg.c:286:9
  Ready @13c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 18 9 7 
  TopQ.A RemainingLatency 0 + 14c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !393; cg.c:286:9
  Ready @14c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 18 9 
  TopQ.A RemainingLatency 0 + 15c > CritPath 5
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @z, 0, debug-location !393; cg.c:286:9
  Ready @15c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 13 18 
  TopQ.A RemainingLatency 0 + 16c > CritPath 5
  Cand SU(11) ORDER                              
Pick Top ORDER     
Scheduling SU(11) $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !393; cg.c:286:9
  Ready @16c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 13 
  TopQ.A RemainingLatency 0 + 17c > CritPath 5
  Cand SU(18) ORDER                              
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @p, 0, debug-location !393; cg.c:286:9
  Ready @17c
  TopQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @r, 0, debug-location !393; cg.c:286:9
  Ready @18c
  TopQ.A TopLatency SU(18) 4c
  TopQ.A BotLatency SU(18) 1c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) STRXui renamable $x8, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9
  Ready @19c
  TopQ.A TopLatency SU(19) 5c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   $x8 = SUBXri $fp, 72, 0, debug-location !393; cg.c:286:9
SU(1):   STRXui renamable $x8, $sp, 2, debug-location !393 :: (store 8 into stack + 16); cg.c:286:9
SU(14):   $x8 = ADRP target-flags(aarch64-page) @q, debug-location !393; cg.c:286:9
SU(15):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @q, 0, debug-location !393; cg.c:286:9
SU(2):   $x0 = ADRP target-flags(aarch64-page) @colidx, debug-location !393; cg.c:286:9
SU(4):   $x1 = ADRP target-flags(aarch64-page) @rowstr, debug-location !393; cg.c:286:9
SU(6):   $x2 = ADRP target-flags(aarch64-page) @x, debug-location !393; cg.c:286:9
SU(8):   $x3 = ADRP target-flags(aarch64-page) @z, debug-location !393; cg.c:286:9
SU(10):   $x4 = ADRP target-flags(aarch64-page) @a, debug-location !393; cg.c:286:9
SU(12):   $x5 = ADRP target-flags(aarch64-page) @p, debug-location !393; cg.c:286:9
SU(16):   STRXui renamable $x8, $sp, 0, debug-location !393 :: (store 8 into stack); cg.c:286:9
SU(17):   $x8 = ADRP target-flags(aarch64-page) @r, debug-location !393; cg.c:286:9
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @colidx, 0, debug-location !393; cg.c:286:9
SU(5):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @rowstr, 0, debug-location !393; cg.c:286:9
SU(7):   $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @x, 0, debug-location !393; cg.c:286:9
SU(9):   $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @z, 0, debug-location !393; cg.c:286:9
SU(11):   $x4 = ADDXri $x4, target-flags(aarch64-pageoff, aarch64-nc) @a, 0, debug-location !393; cg.c:286:9
SU(13):   $x5 = ADDXri $x5, target-flags(aarch64-pageoff, aarch64-nc) @p, 0, debug-location !393; cg.c:286:9
SU(18):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @r, 0, debug-location !393; cg.c:286:9
SU(19):   STRXui renamable $x8, $sp, 1, debug-location !393 :: (store 8 into stack + 8); cg.c:286:9

Fixup kills for %bb.36
Fixup kills for %bb.37
********** MI Scheduling **********
main:%bb.38 if.end115
  From: STPXi $xzr, $xzr, $fp, -11, debug-location !398 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:297:20
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STPXi $xzr, $xzr, $fp, -11, debug-location !398 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:297:20
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURWi $wzr, $fp, -48, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  Ready @0c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  Ready @1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPXi $xzr, $xzr, $fp, -11, debug-location !398 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:297:20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi $wzr, $fp, -48, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(2):   renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
SU(3):   renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
SU(0):   STPXi $xzr, $xzr, $fp, -11, debug-location !398 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:297:20
SU(1):   STURWi $wzr, $fp, -48, debug-location !400 :: (store 4 into %ir.j); cg.c:299:16

Fixup kills for %bb.38
********** MI Scheduling **********
main:%bb.39 for.cond116
  From: renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
    To: Bcc 10, %bb.41, implicit $nzcv, debug-location !410; cg.c:299:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !406 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w17
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !407; cg.c:299:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !408; cg.c:299:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !410; cg.c:299:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.41, implicit $nzcv, debug-location !410; cg.c:299:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !406 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = LDURWi $fp, -48, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !407; cg.c:299:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !408; cg.c:299:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !410; cg.c:299:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !405 :: (dereferenceable load 4 from @lastcol); cg.c:299:25
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !406 :: (dereferenceable load 4 from @firstcol); cg.c:299:35
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !403 :: (dereferenceable load 4 from %ir.j); cg.c:299:21
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !407; cg.c:299:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !408; cg.c:299:44
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !410; cg.c:299:9

Fixup kills for %bb.39
********** MI Scheduling **********
main:%bb.40 for.body120
  From: renamable $x8 = LDURSWi $fp, -48, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
    To: B %bb.39
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(7): Data Latency=0 Reg=$x8
    SU(1): Data Latency=4 Reg=$x8
    SU(11): Ord  Latency=0 Memory
SU(1):   renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !422; cg.c:301:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Data Latency=1 Reg=$x16
    SU(2): Data Latency=1 Reg=$x16
    SU(7): Anti Latency=0
SU(2):   renamable $d0 = LDRDroX renamable $x20, renamable $x16, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(3):   renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d1
    SU(5): Data Latency=4 Reg=$d1
SU(4):   renamable $d3, renamable $d2 = LDPDi $fp, -11, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1), (dereferenceable load 8 from %ir.norm_temp2); cg.c:300:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=$d3
    SU(6): Data Latency=4 Reg=$d2
    SU(10): Ord  Latency=0 Memory
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !417; cg.c:300:44
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
    SU(8): Anti Latency=0
SU(6):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !418; cg.c:300:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    SU(10): Data Latency=1 Reg=$d0
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !428; cg.c:299:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(11): Data Latency=1 Reg=$w8
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !425; cg.c:301:44
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d1
SU(9):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !426; cg.c:301:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d1
    SU(4): Data Latency=4 Reg=$d3
  Successors:
    SU(10): Data Latency=1 Reg=$d1
SU(10):   STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !419 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:300:24
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d1
    SU(6): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(11):   STURWi renamable $w8, $fp, -48, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.39
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -48, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d3, renamable $d2 = LDPDi $fp, -11, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1), (dereferenceable load 8 from %ir.norm_temp2); cg.c:300:26
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !422; cg.c:301:39
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 2 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x20, renamable $x16, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 7 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
  Ready @6c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !428; cg.c:299:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STURWi renamable $w8, $fp, -48, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !417; cg.c:300:44
  Ready @10c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 11
  Cand SU(6) ORDER                              
  Cand SU(8) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !425; cg.c:301:44
  Ready @11c
  TopQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 9 
  TopQ.A RemainingLatency 0 + 12c > CritPath 11
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !418; cg.c:300:37
  Ready @12c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !426; cg.c:301:37
  Ready @13c
  TopQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !419 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:300:24
  Ready @14c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 12
  Executed: 15c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !413 :: (dereferenceable load 4 from %ir.j); cg.c:300:41
SU(4):   renamable $d3, renamable $d2 = LDPDi $fp, -11, debug-location !411 :: (dereferenceable load 8 from %ir.norm_temp1), (dereferenceable load 8 from %ir.norm_temp2); cg.c:300:26
SU(1):   renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !422; cg.c:301:39
SU(2):   renamable $d0 = LDRDroX renamable $x20, renamable $x16, 0, 0, debug-location !414 :: (load 8 from %ir.arrayidx122); cg.c:300:39
SU(3):   renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !422 :: (load 8 from %ir.arrayidx130); cg.c:301:39
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !428; cg.c:299:50
SU(11):   STURWi renamable $w8, $fp, -48, debug-location !428 :: (store 4 into %ir.j); cg.c:299:50
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !417; cg.c:300:44
SU(8):   renamable $d1 = FMULDrr renamable $d1, renamable $d1, debug-location !425; cg.c:301:44
SU(6):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !418; cg.c:300:37
SU(9):   renamable $d1 = FADDDrr renamable $d3, renamable $d1, debug-location !426; cg.c:301:37
SU(10):   STPDi renamable $d1, renamable $d0, $fp, -11, debug-location !419 :: (store 8 into %ir.norm_temp1), (store 8 into %ir.norm_temp2); cg.c:300:24

Fixup kills for %bb.40
********** MI Scheduling **********
main:%bb.41 for.end135
  From: renamable $d1 = LDURDi $fp, -88, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
    To: Bcc 7, %bb.43, implicit $nzcv, debug-location !434; cg.c:304:26
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -88, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !433; cg.c:304:28
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$d0
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !434; cg.c:304:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.43, implicit $nzcv, debug-location !434; cg.c:304:26
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d1 = LDURDi $fp, -88, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FSQRTDr renamable $d1, debug-location !433; cg.c:304:28
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !434; cg.c:304:26
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.41 ***
SU(0):   renamable $d1 = LDURDi $fp, -88, debug-location !432 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:304:33
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !433; cg.c:304:28
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !434; cg.c:304:26

Fixup kills for %bb.41
********** MI Scheduling **********
main:%bb.42 call.sqrt4
  From: $q0 = ORRv16i8 $q1, $q1, debug-location !434; cg.c:304:26
    To: BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !434; cg.c:304:26
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !434; cg.c:304:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   STRDui renamable $d1, $sp, 16 :: (store 8 into %stack.21)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !434; cg.c:304:26
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $q0 = ORRv16i8 $q1, $q1, debug-location !434; cg.c:304:26
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d1, $sp, 16 :: (store 8 into %stack.21)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !434; cg.c:304:26
SU(1):   STRDui renamable $d1, $sp, 16 :: (store 8 into %stack.21)

Fixup kills for %bb.42
********** MI Scheduling **********
main:%bb.43 for.end135.split
  From: renamable $d1 = LDURDi $fp, -80, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
    To: Bcc 1, %bb.45, implicit $nzcv, debug-location !443; cg.c:307:13
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDURDi $fp, -80, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
SU(1):   renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.24)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=$d2
    SU(2): Data Latency=4 Reg=$d2
SU(2):   renamable $d0 = FDIVDrr renamable $d2, renamable $d0, debug-location !434; cg.c:304:26
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$d0
SU(3):   renamable $w8 = LDURWi $fp, -56, debug-location !440 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=$w8
SU(4):   STURDi renamable $d0, $fp, -88, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
  Successors:
    SU(5): Anti Latency=0
SU(5):   renamable $d0 = FDIVDrr renamable $d2, renamable $d1, debug-location !437; cg.c:306:28
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Anti Latency=0
SU(6):   renamable $d1 = LDRDui $sp, 12 :: (load 8 from %stack.25)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(5): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(7): Data Latency=4 Reg=$d1
SU(7):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !438; cg.c:306:22
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=$d1
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
  Successors:
    SU(9): Data Latency=1 Reg=$d0
SU(8):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(9):   STURDi renamable $d0, $fp, -64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$d0
ExitSU:   Bcc 1, %bb.45, implicit $nzcv, debug-location !443; cg.c:307:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.24)
  Ready @0c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1 = LDURDi $fp, -80, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDURWi $fp, -56, debug-location !440 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 8 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FDIVDrr renamable $d2, renamable $d0, debug-location !434; cg.c:304:26
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURDi renamable $d0, $fp, -88, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 10
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = FDIVDrr renamable $d2, renamable $d1, debug-location !437; cg.c:306:28
  Ready @6c
  TopQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 10
  Cand SU(8) ORDER                              
  Cand SU(6) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) renamable $d1 = LDRDui $sp, 12 :: (load 8 from %stack.25)
  Ready @7c
  TopQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !438; cg.c:306:22
  Ready @11c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STURDi renamable $d0, $fp, -64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14
  Ready @12c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(1):   renamable $d2 = LDRDui $sp, 13 :: (load 8 from %stack.24)
SU(0):   renamable $d1 = LDURDi $fp, -80, debug-location !436 :: (dereferenceable load 8 from %ir.norm_temp1); cg.c:306:30
SU(3):   renamable $w8 = LDURWi $fp, -56, debug-location !440 :: (dereferenceable load 4 from %ir.it); cg.c:307:13
SU(2):   renamable $d0 = FDIVDrr renamable $d2, renamable $d0, debug-location !434; cg.c:304:26
SU(4):   STURDi renamable $d0, $fp, -88, debug-location !435 :: (store 8 into %ir.norm_temp2); cg.c:304:20
SU(5):   renamable $d0 = FDIVDrr renamable $d2, renamable $d1, debug-location !437; cg.c:306:28
SU(6):   renamable $d1 = LDRDui $sp, 12 :: (load 8 from %stack.25)
SU(8):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !443; cg.c:307:13
SU(7):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !438; cg.c:306:22
SU(9):   STURDi renamable $d0, $fp, -64, debug-location !439 :: (store 8 into %ir.zeta); cg.c:306:14

Fixup kills for %bb.43
********** MI Scheduling **********
main:%bb.44 if.then141
  From: $x0 = ADRP target-flags(aarch64-page) @cg__str_10_____iterat, debug-location !444; cg.c:308:13
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !444; cg.c:308:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_10_____iterat, debug-location !444; cg.c:308:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_10_____iterat, 0, debug-location !444; cg.c:308:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !444; cg.c:308:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @cg__str_10_____iterat, debug-location !444; cg.c:308:13
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_10_____iterat, 0, debug-location !444; cg.c:308:13
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_10_____iterat, debug-location !444; cg.c:308:13
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_10_____iterat, 0, debug-location !444; cg.c:308:13

Fixup kills for %bb.44
********** MI Scheduling **********
main:%bb.45 if.end143
  From: STURWi $wzr, $fp, -48, debug-location !449 :: (store 4 into %ir.j); cg.c:314:16
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -48, debug-location !449 :: (store 4 into %ir.j); cg.c:314:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -48, debug-location !449 :: (store 4 into %ir.j); cg.c:314:16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(1):   renamable $x18 = ADRP target-flags(aarch64-page) @lastcol
SU(2):   renamable $x6 = ADRP target-flags(aarch64-page) @firstcol
SU(0):   STURWi $wzr, $fp, -48, debug-location !449 :: (store 4 into %ir.j); cg.c:314:16

********** MI Scheduling **********
main:%bb.45 if.end143
  From: renamable $w1 = LDURWi $fp, -56, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !448; cg.c:309:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1 = LDURWi $fp, -56, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$w1
SU(1):   STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$w1
SU(2):   renamable $d0, renamable $d1 = LDPDi $fp, -9, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm), (dereferenceable load 8 from %ir.zeta); cg.c:309:54
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$d0
    SU(3): Data Latency=4 Reg=$d1
SU(3):   STPDi renamable $d1, renamable $d0, $sp, 14 :: (store 8 into %stack.22), (store 8 into %stack.23)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
    SU(2): Data Latency=4 Reg=$d1
SU(4):   $x0 = ADRP target-flags(aarch64-page) @cg__str_11______5d___, debug-location !448; cg.c:309:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, 0, debug-location !448; cg.c:309:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !448; cg.c:309:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w1 = LDURWi $fp, -56, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0, renamable $d1 = LDPDi $fp, -9, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm), (dereferenceable load 8 from %ir.zeta); cg.c:309:54
  Ready @1c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @cg__str_11______5d___, debug-location !448; cg.c:309:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 3 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, 0, debug-location !448; cg.c:309:9
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.21)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STPDi renamable $d1, renamable $d0, $sp, 14 :: (store 8 into %stack.22), (store 8 into %stack.23)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $w1 = LDURWi $fp, -56, debug-location !445 :: (dereferenceable load 4 from %ir.it); cg.c:309:50
SU(2):   renamable $d0, renamable $d1 = LDPDi $fp, -9, debug-location !446 :: (dereferenceable load 8 from %ir.rnorm), (dereferenceable load 8 from %ir.zeta); cg.c:309:54
SU(4):   $x0 = ADRP target-flags(aarch64-page) @cg__str_11______5d___, debug-location !448; cg.c:309:9
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_11______5d___, 0, debug-location !448; cg.c:309:9
SU(1):   STRWui renamable $w1, $sp, 32 :: (store 4 into %stack.21)
SU(3):   STPDi renamable $d1, renamable $d0, $sp, 14 :: (store 8 into %stack.22), (store 8 into %stack.23)

Fixup kills for %bb.45
********** MI Scheduling **********
main:%bb.46 for.cond145
  From: renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
    To: Bcc 10, %bb.48, implicit $nzcv, debug-location !459; cg.c:314:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !455 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w17
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !456; cg.c:314:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w8
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !457; cg.c:314:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !459; cg.c:314:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.48, implicit $nzcv, debug-location !459; cg.c:314:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !455 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = LDURWi $fp, -48, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !456; cg.c:314:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !457; cg.c:314:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !459; cg.c:314:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   renamable $w8 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !454 :: (dereferenceable load 4 from @lastcol); cg.c:314:25
SU(1):   renamable $w16 = LDRWui renamable $x6, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !455 :: (dereferenceable load 4 from @firstcol); cg.c:314:35
SU(2):   renamable $w17 = LDURWi $fp, -48, debug-location !452 :: (dereferenceable load 4 from %ir.j); cg.c:314:21
SU(3):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !456; cg.c:314:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !457; cg.c:314:44
SU(5):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !459; cg.c:314:9

Fixup kills for %bb.46
********** MI Scheduling **********
main:%bb.47 for.body149
  From: renamable $x8 = LDURSWi $fp, -48, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
    To: B %bb.46
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(4): Data Latency=0 Reg=$x8
    SU(2): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
SU(1):   renamable $d0 = LDURDi $fp, -88, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(2):   renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !463; cg.c:315:33
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Data Latency=1 Reg=$x16
    SU(3): Data Latency=1 Reg=$x16
    SU(4): Anti Latency=0
SU(3):   renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(5): Data Latency=4 Reg=$d1
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !468; cg.c:314:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=0 Reg=$x8
  Successors:
    SU(7): Data Latency=1 Reg=$w8
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !464; cg.c:315:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDroX renamable $d0, renamable $x20, renamable $x16, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(2): Data Latency=1 Reg=$x16
SU(7):   STURWi renamable $w8, $fp, -48, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.46
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -48, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = LDURDi $fp, -88, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !463; cg.c:315:33
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !468; cg.c:314:50
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURWi renamable $w8, $fp, -48, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !464; cg.c:315:31
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDroX renamable $d0, renamable $x20, renamable $x16, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $x8 = LDURSWi $fp, -48, debug-location !462 :: (dereferenceable load 4 from %ir.j); cg.c:315:35
SU(1):   renamable $d0 = LDURDi $fp, -88, debug-location !460 :: (dereferenceable load 8 from %ir.norm_temp2); cg.c:315:20
SU(2):   renamable $x16 = UBFMXri renamable $x8, 61, 60, debug-location !463; cg.c:315:33
SU(3):   renamable $d1 = LDRDroX renamable $x19, renamable $x16, 0, 0, debug-location !463 :: (load 8 from %ir.arrayidx151); cg.c:315:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, implicit $x8, debug-location !468; cg.c:314:50
SU(7):   STURWi renamable $w8, $fp, -48, debug-location !468 :: (store 4 into %ir.j); cg.c:314:50
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !464; cg.c:315:31
SU(6):   STRDroX renamable $d0, renamable $x20, renamable $x16, 0, 0, debug-location !467 :: (store 8 into %ir.arrayidx154); cg.c:315:18

Fixup kills for %bb.47
********** MI Scheduling **********
main:%bb.48 for.inc158
  From: renamable $w8 = LDURWi $fp, -56, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
    To: B %bb.33
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -56, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !472; cg.c:279:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -56, debug-location !472 :: (store 4 into %ir.it); cg.c:279:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.33
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -56, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !472; cg.c:279:33
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -56, debug-location !472 :: (store 4 into %ir.it); cg.c:279:33
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   renamable $w8 = LDURWi $fp, -56, debug-location !472 :: (dereferenceable load 4 from %ir.it); cg.c:279:33
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !472; cg.c:279:33
SU(2):   STURWi renamable $w8, $fp, -56, debug-location !472 :: (store 4 into %ir.it); cg.c:279:33

Fixup kills for %bb.48
********** MI Scheduling **********
main:%bb.49 do.end164
  From: renamable $w8 = LDURSBWi $fp, -116, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
    To: Bcc 0, %bb.53, implicit $nzcv, debug-location !484; cg.c:332:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURSBWi $fp, -116, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w8
SU(1):   $x16 = MOVZXi 48571, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
SU(2):   $x16 = MOVKXi $x16(tied-def 0), 55767, 16
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x16
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
SU(3):   $x16 = MOVKXi $x16(tied-def 0), 31967, 32
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x16
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
SU(4):   $x16 = MOVKXi $x16(tied-def 0), 15835, 48
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
  Successors:
    SU(6): Data Latency=1 Reg=$x16
SU(5):   dead $wzr = SUBSWri renamable $w8, 85, 0, implicit-def $nzcv, debug-location !484; cg.c:332:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   STURXi renamable $x16, $fp, -136, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$x16
ExitSU:   Bcc 0, %bb.53, implicit $nzcv, debug-location !484; cg.c:332:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURSBWi $fp, -116, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x16 = MOVZXi 48571, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x16 = MOVKXi $x16(tied-def 0), 55767, 16
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x16 = MOVKXi $x16(tied-def 0), 31967, 32
  Ready @3c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x16 = MOVKXi $x16(tied-def 0), 15835, 48
  Ready @4c
  TopQ.A TopLatency SU(4) 3c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) dead $wzr = SUBSWri renamable $w8, 85, 0, implicit-def $nzcv, debug-location !484; cg.c:332:9
  Ready @5c
  TopQ.A TopLatency SU(5) 4c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STURXi renamable $x16, $fp, -136, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   renamable $w8 = LDURSBWi $fp, -116, debug-location !481 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:332:9
SU(1):   $x16 = MOVZXi 48571, 0
SU(2):   $x16 = MOVKXi $x16(tied-def 0), 55767, 16
SU(3):   $x16 = MOVKXi $x16(tied-def 0), 31967, 32
SU(4):   $x16 = MOVKXi $x16(tied-def 0), 15835, 48
SU(5):   dead $wzr = SUBSWri renamable $w8, 85, 0, implicit-def $nzcv, debug-location !484; cg.c:332:9
SU(6):   STURXi renamable $x16, $fp, -136, debug-location !480 :: (store 8 into %ir.epsilon); cg.c:331:13

********** MI Scheduling **********
main:%bb.49 do.end164
  From: STURDi killed renamable $d0, $fp, -96, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !479; cg.c:329:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURDi renamable $d0, $fp, -96, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_12__Benchmark, debug-location !479; cg.c:329:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_12__Benchmark, 0, debug-location !479; cg.c:329:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !479; cg.c:329:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @cg__str_12__Benchmark, debug-location !479; cg.c:329:5
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_12__Benchmark, 0, debug-location !479; cg.c:329:5
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURDi renamable $d0, $fp, -96, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.49 ***
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_12__Benchmark, debug-location !479; cg.c:329:5
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_12__Benchmark, 0, debug-location !479; cg.c:329:5
SU(0):   STURDi renamable $d0, $fp, -96, debug-location !478 :: (store 8 into %ir.t); cg.c:327:7

Fixup kills for %bb.49
********** MI Scheduling **********
main:%bb.50 if.then169
  From: renamable $d0 = LDURDi $fp, -64, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
    To: Bcc 8, %bb.52, implicit $nzcv, debug-location !497; cg.c:334:13
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -64, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
SU(1):   renamable $d2, renamable $d1 = LDPDi $fp, -17, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value), (dereferenceable load 8 from %ir.epsilon); cg.c:333:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(4): Data Latency=4 Reg=$d2
    SU(3): Data Latency=4 Reg=$d1
    SU(2): Data Latency=4 Reg=$d1
SU(2):   renamable $d0 = FABD64 renamable $d0, renamable $d1, debug-location !489; cg.c:333:15
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !491; cg.c:333:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d1
  Successors:
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=1 Reg=$d0
SU(4):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !497; cg.c:334:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   STURDi renamable $d0, $fp, -144, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
ExitSU:   Bcc 8, %bb.52, implicit $nzcv, debug-location !497; cg.c:334:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDURDi $fp, -64, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d2, renamable $d1 = LDPDi $fp, -17, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value), (dereferenceable load 8 from %ir.epsilon); cg.c:333:27
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FABD64 renamable $d0, renamable $d1, debug-location !489; cg.c:333:15
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !491; cg.c:333:46
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !497; cg.c:334:13
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STURDi renamable $d0, $fp, -144, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   renamable $d0 = LDURDi $fp, -64, debug-location !485 :: (dereferenceable load 8 from %ir.zeta); cg.c:333:20
SU(1):   renamable $d2, renamable $d1 = LDPDi $fp, -17, debug-location !487 :: (dereferenceable load 8 from %ir.zeta_verify_value), (dereferenceable load 8 from %ir.epsilon); cg.c:333:27
SU(2):   renamable $d0 = FABD64 renamable $d0, renamable $d1, debug-location !489; cg.c:333:15
SU(3):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !491; cg.c:333:46
SU(4):   FCMPDrr renamable $d0, renamable $d2, implicit-def $nzcv, debug-location !497; cg.c:334:13
SU(5):   STURDi renamable $d0, $fp, -144, debug-location !492 :: (store 8 into %ir.err); cg.c:333:13

Fixup kills for %bb.50
********** MI Scheduling **********
main:%bb.51 if.then174
  From: renamable $d0 = LDURDi $fp, -144, debug-location !503 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !504; cg.c:338:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -144, debug-location !503 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, 0, debug-location !504; cg.c:338:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !504; cg.c:338:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -144, debug-location !503 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, 0, debug-location !504; cg.c:338:13
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $d0 = LDURDi $fp, -144, debug-location !503 :: (dereferenceable load 8 from %ir.err); cg.c:338:45
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_15__Error_is_, debug-location !504; cg.c:338:13
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_15__Error_is_, 0, debug-location !504; cg.c:338:13
SU(1):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)

********** MI Scheduling **********
main:%bb.51 if.then174
  From: renamable $d0 = LDURDi $fp, -64, debug-location !501 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !502; cg.c:337:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -64, debug-location !501 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, 0, debug-location !502; cg.c:337:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !502; cg.c:337:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -64, debug-location !501 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, 0, debug-location !502; cg.c:337:13
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $d0 = LDURDi $fp, -64, debug-location !501 :: (dereferenceable load 8 from %ir.zeta); cg.c:337:45
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_14__Zeta_is__, debug-location !502; cg.c:337:13
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_14__Zeta_is__, 0, debug-location !502; cg.c:337:13
SU(1):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)

********** MI Scheduling **********
main:%bb.51 if.then174
  From: $w8 = MOVZWi 1, 0
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !500; cg.c:336:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STURWi renamable $w8, $fp, -120, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_13__VERIFICAT, debug-location !500; cg.c:336:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_13__VERIFICAT, 0, debug-location !500; cg.c:336:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !500; cg.c:336:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @cg__str_13__VERIFICAT, debug-location !500; cg.c:336:13
  Ready @0c
  TopQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $w8 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_13__VERIFICAT, 0, debug-location !500; cg.c:336:13
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi renamable $w8, $fp, -120, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_13__VERIFICAT, debug-location !500; cg.c:336:13
SU(0):   $w8 = MOVZWi 1, 0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_13__VERIFICAT, 0, debug-location !500; cg.c:336:13
SU(1):   STURWi renamable $w8, $fp, -120, debug-location !498 :: (store 4 into %ir.verified); cg.c:335:22

Fixup kills for %bb.51
********** MI Scheduling **********
main:%bb.52 if.else178
  From: renamable $d0 = LDURDi $fp, -128, debug-location !511 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !512; cg.c:344:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -128, debug-location !511 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, 0, debug-location !512; cg.c:344:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !512; cg.c:344:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -128, debug-location !511 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, 0, debug-location !512; cg.c:344:13
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   renamable $d0 = LDURDi $fp, -128, debug-location !511 :: (dereferenceable load 8 from %ir.zeta_verify_value); cg.c:344:54
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_18__The_corre, debug-location !512; cg.c:344:13
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_18__The_corre, 0, debug-location !512; cg.c:344:13
SU(1):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)

********** MI Scheduling **********
main:%bb.52 if.else178
  From: renamable $d0 = LDURDi $fp, -64, debug-location !509 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !510; cg.c:343:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -64, debug-location !509 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d0
SU(1):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, 0, debug-location !510; cg.c:343:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !510; cg.c:343:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDURDi $fp, -64, debug-location !509 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, 0, debug-location !510; cg.c:343:13
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   renamable $d0 = LDURDi $fp, -64, debug-location !509 :: (dereferenceable load 8 from %ir.zeta); cg.c:343:54
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_17__Zeta_____, debug-location !510; cg.c:343:13
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_17__Zeta_____, 0, debug-location !510; cg.c:343:13
SU(1):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)

********** MI Scheduling **********
main:%bb.52 if.else178
  From: STURWi $wzr, $fp, -120, debug-location !506 :: (store 4 into %ir.verified); cg.c:341:22
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !508; cg.c:342:13
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -120, debug-location !506 :: (store 4 into %ir.verified); cg.c:341:22
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_16__VERIFICAT, debug-location !508; cg.c:342:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_16__VERIFICAT, 0, debug-location !508; cg.c:342:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !508; cg.c:342:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @cg__str_16__VERIFICAT, debug-location !508; cg.c:342:13
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_16__VERIFICAT, 0, debug-location !508; cg.c:342:13
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -120, debug-location !506 :: (store 4 into %ir.verified); cg.c:341:22
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.52 ***
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_16__VERIFICAT, debug-location !508; cg.c:342:13
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_16__VERIFICAT, 0, debug-location !508; cg.c:342:13
SU(0):   STURWi $wzr, $fp, -120, debug-location !506 :: (store 4 into %ir.verified); cg.c:341:22

Fixup kills for %bb.52
********** MI Scheduling **********
main:%bb.53 if.else183
  From: $x0 = ADRP target-flags(aarch64-page) @cg__str_20__NO_VERIFI, debug-location !516; cg.c:350:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !516; cg.c:350:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_20__NO_VERIFI, debug-location !516; cg.c:350:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_20__NO_VERIFI, 0, debug-location !516; cg.c:350:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !516; cg.c:350:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @cg__str_20__NO_VERIFI, debug-location !516; cg.c:350:9
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_20__NO_VERIFI, 0, debug-location !516; cg.c:350:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_20__NO_VERIFI, debug-location !516; cg.c:350:9
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_20__NO_VERIFI, 0, debug-location !516; cg.c:350:9

********** MI Scheduling **********
main:%bb.53 if.else183
  From: STURWi $wzr, $fp, -120, debug-location !513 :: (store 4 into %ir.verified); cg.c:348:18
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !515; cg.c:349:9
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -120, debug-location !513 :: (store 4 into %ir.verified); cg.c:348:18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_19__Problem_s, debug-location !515; cg.c:349:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_19__Problem_s, 0, debug-location !515; cg.c:349:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !515; cg.c:349:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @cg__str_19__Problem_s, debug-location !515; cg.c:349:9
  Ready @0c
  TopQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_19__Problem_s, 0, debug-location !515; cg.c:349:9
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -120, debug-location !513 :: (store 4 into %ir.verified); cg.c:348:18
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_19__Problem_s, debug-location !515; cg.c:349:9
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_19__Problem_s, 0, debug-location !515; cg.c:349:9
SU(0):   STURWi $wzr, $fp, -120, debug-location !513 :: (store 4 into %ir.verified); cg.c:348:18

Fixup kills for %bb.53
********** MI Scheduling **********
main:%bb.54 if.end186
  From: renamable $d0 = LDURDi $fp, -96, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
    To: Bcc 0, %bb.56, implicit $nzcv, debug-location !520; cg.c:353:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -96, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d0
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !520; cg.c:353:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 0, %bb.56, implicit $nzcv, debug-location !520; cg.c:353:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d0 = LDURDi $fp, -96, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) FCMPDri renamable $d0, implicit-def $nzcv, debug-location !520; cg.c:353:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   renamable $d0 = LDURDi $fp, -96, debug-location !517 :: (dereferenceable load 8 from %ir.t); cg.c:353:9
SU(1):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !520; cg.c:353:9

Fixup kills for %bb.54
********** MI Scheduling **********
main:%bb.55 if.then189
  From: renamable $d0 = LDURDi $fp, -96, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
    To: B %bb.57
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDURDi $fp, -96, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=4 Reg=$d1
    SU(3): Anti Latency=0
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(6): Data Latency=4 Reg=$d2
SU(5):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0, debug-location !523; cg.c:356:73
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
SU(6):   renamable $d0 = FDIVDrr renamable $d0, renamable $d2, debug-location !524; cg.c:357:20
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Data Latency=4 Reg=$d2
  Successors:
    SU(7): Data Latency=1 Reg=$d0
SU(7):   STURDi renamable $d0, $fp, -104, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
ExitSU:   B %bb.57
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  Ready @0c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDURDi $fp, -96, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  TopQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  Ready @3c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @4c
  TopQ.A TopLatency SU(4) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FDIVDrr renamable $d1, renamable $d0, debug-location !523; cg.c:356:73
  Ready @6c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = FDIVDrr renamable $d0, renamable $d2, debug-location !524; cg.c:357:20
  Ready @8c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STURDi renamable $d0, $fp, -104, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16
  Ready @9c
  TopQ.A TopLatency SU(7) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
SU(0):   renamable $d0 = LDURDi $fp, -96, debug-location !521 :: (dereferenceable load 8 from %ir.t); cg.c:357:18
SU(2):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
SU(4):   renamable $d2 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(5):   renamable $d0 = FDIVDrr renamable $d1, renamable $d0, debug-location !523; cg.c:356:73
SU(6):   renamable $d0 = FDIVDrr renamable $d0, renamable $d2, debug-location !524; cg.c:357:20
SU(7):   STURDi renamable $d0, $fp, -104, debug-location !525 :: (store 8 into %ir.mflops); cg.c:354:16

Fixup kills for %bb.55
Fixup kills for %bb.56
********** MI Scheduling **********
main:%bb.57 if.end193
  From: renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
    To: CBZW killed renamable $w8, %bb.67, debug-location !536; cg.c:370:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   CBZW killed renamable $w8, %bb.67, debug-location !536; cg.c:370:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @timeron, debug-location !534; cg.c:370:9
SU(1):   renamable $w8 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @timeron, debug-location !534 :: (dereferenceable load 4 from @timeron); cg.c:370:9

********** MI Scheduling **********
main:%bb.57 if.end193
  From: renamable $w19 = LDURSBWi $fp, -116, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
    To: BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !533; cg.c:363:5
 RegionInstrs: 39
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURSBWi $fp, -116, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(36): Data Latency=4 Reg=$w19
SU(1):   renamable $d1, renamable $d0 = LDPDi $fp, -13, debug-location !530 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.mflops); cg.c:363:49
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$d1
    SU(2): Data Latency=4 Reg=$d0
SU(2):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(1): Data Latency=4 Reg=$d0
SU(3):   renamable $w20 = LDURWi $fp, -120, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(23): Data Latency=4 Reg=$w20
SU(4):   $x8 = ADRP target-flags(aarch64-page) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
  Successors:
    SU(21): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x8
SU(6):   $x16 = ADRP target-flags(aarch64-page) @cg__str_30__O3__mcmod, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$x16
SU(7):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_30__O3__mcmod, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x16
  Successors:
    SU(25): Out  Latency=1
    SU(20): Data Latency=1 Reg=$x16
SU(8):   $x17 = ADRP target-flags(aarch64-page) @cg__str_29__g__Wall__, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x17
SU(9):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_29__g__Wall__, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x17
  Successors:
    SU(24): Data Latency=1 Reg=$x17
SU(10):   $x18 = ADRP target-flags(aarch64-page) @cg__str_28__I___commo, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x18
SU(11):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_28__I___commo, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x18
  Successors:
    SU(24): Data Latency=1 Reg=$x18
SU(12):   $x0 = ADRP target-flags(aarch64-page) @cg__str_27__lm_, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=1 Reg=$x0
SU(13):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_27__lm_, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x0
  Successors:
    SU(28): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x0
SU(14):   $x1 = ADRP target-flags(aarch64-page) @cg__str_26___CC__, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(15): Out  Latency=1
    SU(15): Data Latency=1 Reg=$x1
SU(15):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_26___CC__, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=1 Reg=$x1
  Successors:
    SU(36): Out  Latency=1
    SU(27): Data Latency=1 Reg=$x1
SU(16):   $x2 = ADRP target-flags(aarch64-page) @cg__str_25_gcc_, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x2
SU(17):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_25_gcc_, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$x2
  Successors:
    SU(32): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x2
SU(18):   $x3 = ADRP target-flags(aarch64-page) @cg__str_24_03_Nov_201, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=1 Reg=$x3
SU(19):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_24_03_Nov_201, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x3
  Successors:
    SU(37): Out  Latency=1
    SU(30): Data Latency=1 Reg=$x3
SU(20):   STPXi renamable $x16, renamable $x8, $sp, 9, debug-location !533 :: (store 8 into stack + 80), (store 8 into stack + 72); cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1 Reg=$x16
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    SU(25): Anti Latency=0
    SU(21): Anti Latency=0
SU(21):   $x8 = ADRP target-flags(aarch64-page) @cg__str_23_3_3_1_, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(20): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(22): Out  Latency=1
    SU(22): Data Latency=1 Reg=$x8
SU(22):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_23_3_3_1_, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(21): Out  Latency=1
    SU(21): Data Latency=1 Reg=$x8
  Successors:
    SU(31): Data Latency=1 Reg=$x8
SU(23):   STRWui renamable $w20, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=$w20
SU(24):   STPXi renamable $x18, renamable $x17, $sp, 7, debug-location !533 :: (store 8 into stack + 64), (store 8 into stack + 56); cg.c:363:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$x18
    SU(9): Data Latency=1 Reg=$x17
SU(25):   $x16 = ADRP target-flags(aarch64-page) @cg__str_22___________, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(20): Anti Latency=0
    SU(7): Out  Latency=1
  Successors:
    SU(26): Out  Latency=1
    SU(26): Data Latency=1 Reg=$x16
SU(26):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_22___________, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(25): Out  Latency=1
    SU(25): Data Latency=1 Reg=$x16
  Successors:
    SU(35): Data Latency=1 Reg=$x16
SU(27):   STPXi renamable $x1, renamable $x0, $sp, 5, debug-location !533 :: (store 8 into stack + 48), (store 8 into stack + 40); cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(15): Data Latency=1 Reg=$x1
    SU(13): Data Latency=1 Reg=$x0
  Successors:
    SU(36): Anti Latency=0
    SU(28): Anti Latency=0
SU(28):   $x0 = ADRP target-flags(aarch64-page) @cg__str_21_CG_, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(27): Anti Latency=0
    SU(13): Out  Latency=1
  Successors:
    SU(29): Out  Latency=1
    SU(29): Data Latency=1 Reg=$x0
SU(29):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_21_CG_, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(28): Out  Latency=1
    SU(28): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(30):   STPXi renamable $x3, renamable $x2, $sp, 3, debug-location !533 :: (store 8 into stack + 32), (store 8 into stack + 24); cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(19): Data Latency=1 Reg=$x3
    SU(17): Data Latency=1 Reg=$x2
  Successors:
    SU(37): Anti Latency=0
    SU(32): Anti Latency=0
SU(31):   STRXui renamable $x8, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(22): Data Latency=1 Reg=$x8
SU(32):   $w2 = MOVZWi 9464, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(30): Anti Latency=0
    SU(17): Out  Latency=1
  Successors:
    SU(33): Out  Latency=1
    SU(33): Data Latency=1 Reg=$w2
SU(33):   $w2 = MOVKWi $w2(tied-def 0), 1, 16, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(32): Out  Latency=1
    SU(32): Data Latency=1 Reg=$w2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(34):   $w5 = MOVZWi 75, 0, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(35):   STRXui renamable $x16, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(26): Data Latency=1 Reg=$x16
SU(36):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !533; cg.c:363:5
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(27): Anti Latency=0
    SU(15): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(37):   $w3 = ORRWrs $wzr, $wzr, 0, debug-location !533; cg.c:363:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(30): Anti Latency=0
    SU(19): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(38):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !533; cg.c:363:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @print_results, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !533; cg.c:363:5
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(38): Ord  Latency=1 Artificial
    SU(37): Ord  Latency=1 Artificial
    SU(36): Ord  Latency=1 Artificial
    SU(34): Ord  Latency=1 Artificial
    SU(33): Ord  Latency=1 Artificial
    SU(29): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 4 6 8 10 12 14 16 18 34 38 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDURSBWi $fp, -116, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 1 3 4 6 8 10 12 14 16 18 34 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1, renamable $d0 = LDPDi $fp, -13, debug-location !530 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.mflops); cg.c:363:49
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 38 34 3 4 6 8 10 12 14 16 18 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(3) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w20 = LDURWi $fp, -120, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
  Ready @2c
  TopQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 23 
Queue TopQ.A: 38 34 18 4 6 8 10 12 14 16 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(18) TOP-PATH                  4 cycles 
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x8 = ADRP target-flags(aarch64-page) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
  Ready @3c
  TopQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 23 
Queue TopQ.A: 38 34 18 16 6 8 10 12 14 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(18) TOP-PATH                  4 cycles 
  Cand SU(16) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x16 = ADRP target-flags(aarch64-page) @cg__str_30__O3__mcmod, debug-location !533; cg.c:363:5
  Ready @4c
  TopQ.A BotLatency SU(6) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 23 
Queue TopQ.A: 38 34 18 16 5 8 10 12 14 7 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(18) TOP-PATH                  4 cycles 
  Cand SU(16) ORDER                              
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) $x0 = ADRP target-flags(aarch64-page) @cg__str_27__lm_, debug-location !533; cg.c:363:5
  Ready @5c
  TopQ.A BotLatency SU(12) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 18 16 5 8 10 2 14 7 13 23 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(18) TOP-PATH                  4 cycles 
  Cand SU(16) ORDER                              
  Cand SU(14) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(14) $x1 = ADRP target-flags(aarch64-page) @cg__str_26___CC__, debug-location !533; cg.c:363:5
  Ready @6c
  TopQ.A BotLatency SU(14) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 18 16 5 8 10 2 23 7 13 15 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(18) TOP-PATH                  4 cycles 
  Cand SU(16) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(16) $x2 = ADRP target-flags(aarch64-page) @cg__str_25_gcc_, debug-location !533; cg.c:363:5
  Ready @7c
  TopQ.A BotLatency SU(16) 4c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 18 15 5 8 10 2 23 7 13 17 
  TopQ.A RemainingLatency 0 + 8c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(18) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) $x3 = ADRP target-flags(aarch64-page) @cg__str_24_03_Nov_201, debug-location !533; cg.c:363:5
  Ready @8c
  TopQ.A BotLatency SU(18) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 17 15 5 8 10 2 23 7 13 19 
  TopQ.A RemainingLatency 0 + 9c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
  Cand SU(15) ORDER                              
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, 0, debug-location !533; cg.c:363:5
  Ready @9c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 17 15 19 8 10 2 23 7 13 
  TopQ.A RemainingLatency 0 + 10c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
  Cand SU(15) ORDER                              
  Cand SU(7) ORDER                              
Pick Top ORDER     
Scheduling SU(7) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_30__O3__mcmod, 0, debug-location !533; cg.c:363:5
  Ready @10c
  TopQ.A BotLatency SU(7) 3c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 17 15 19 8 10 2 23 13 20 
  TopQ.A RemainingLatency 0 + 11c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
  Cand SU(15) ORDER                              
  Cand SU(13) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(13) renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_27__lm_, 0, debug-location !533; cg.c:363:5
  Ready @11c
  TopQ.A BotLatency SU(13) 3c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 17 15 19 8 10 2 23 20 
  TopQ.A RemainingLatency 0 + 12c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
  Cand SU(15) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(15) renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_26___CC__, 0, debug-location !533; cg.c:363:5
  Ready @12c
  TopQ.A BotLatency SU(15) 3c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 17 20 19 8 10 2 23 27 
  TopQ.A RemainingLatency 0 + 13c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(17) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_25_gcc_, 0, debug-location !533; cg.c:363:5
  Ready @13c
  TopQ.A BotLatency SU(17) 3c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 27 20 19 8 10 2 23 
  TopQ.A RemainingLatency 0 + 14c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(20) ORDER                              
  Cand SU(19) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_24_03_Nov_201, 0, debug-location !533; cg.c:363:5
  Ready @14c
  TopQ.A BotLatency SU(19) 3c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 27 20 23 8 10 2 30 
  TopQ.A RemainingLatency 0 + 15c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(20) ORDER                              
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) $x17 = ADRP target-flags(aarch64-page) @cg__str_29__g__Wall__, debug-location !533; cg.c:363:5
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 27 20 23 30 10 2 9 
  TopQ.A RemainingLatency 0 + 16c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(20) ORDER                              
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x18 = ADRP target-flags(aarch64-page) @cg__str_28__I___commo, debug-location !533; cg.c:363:5
  Ready @16c
  TopQ.A BotLatency SU(10) 2c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 27 20 23 30 9 2 11 
  TopQ.A RemainingLatency 0 + 17c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(20) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(20) STPXi renamable $x16, renamable $x8, $sp, 9, debug-location !533 :: (store 8 into stack + 80), (store 8 into stack + 72); cg.c:363:5
  Ready @17c
  TopQ.A TopLatency SU(20) 2c
  TopQ.A BotLatency SU(20) 2c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 27 11 23 30 9 2 25 21 
  TopQ.A RemainingLatency 0 + 18c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
  Cand SU(21) ORDER                              
Pick Top ORDER     
Scheduling SU(21) $x8 = ADRP target-flags(aarch64-page) @cg__str_23_3_3_1_, debug-location !533; cg.c:363:5
  Ready @18c
  TopQ.A BotLatency SU(21) 2c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 27 11 23 30 9 2 25 22 
  TopQ.A RemainingLatency 0 + 19c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
  Cand SU(25) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(25) $x16 = ADRP target-flags(aarch64-page) @cg__str_22___________, debug-location !533; cg.c:363:5
  Ready @19c
  TopQ.A BotLatency SU(25) 2c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 27 11 23 30 9 2 22 26 
  TopQ.A RemainingLatency 0 + 20c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(27) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(27) STPXi renamable $x1, renamable $x0, $sp, 5, debug-location !533 :: (store 8 into stack + 48), (store 8 into stack + 40); cg.c:363:5
  Ready @20c
  TopQ.A BotLatency SU(27) 2c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 26 11 23 30 9 2 22 36 28 
  TopQ.A RemainingLatency 0 + 21c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
  Cand SU(28) ORDER                              
Pick Top ORDER     
Scheduling SU(28) $x0 = ADRP target-flags(aarch64-page) @cg__str_21_CG_, debug-location !533; cg.c:363:5
  Ready @21c
  TopQ.A BotLatency SU(28) 2c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 26 11 23 30 9 2 22 36 29 
  TopQ.A RemainingLatency 0 + 22c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(30) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(30) STPXi renamable $x3, renamable $x2, $sp, 3, debug-location !533 :: (store 8 into stack + 32), (store 8 into stack + 24); cg.c:363:5
  Ready @22c
  TopQ.A BotLatency SU(30) 2c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 26 11 23 29 9 2 22 36 37 32 
  TopQ.A RemainingLatency 0 + 23c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(32) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(32) $w2 = MOVZWi 9464, 0, debug-location !533; cg.c:363:5
  Ready @23c
  TopQ.A BotLatency SU(32) 2c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 26 11 23 29 9 2 22 36 37 33 
  TopQ.A RemainingLatency 0 + 24c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_29__g__Wall__, 0, debug-location !533; cg.c:363:5
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 26 11 23 29 33 2 22 36 37 
  TopQ.A RemainingLatency 0 + 25c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_28__I___commo, 0, debug-location !533; cg.c:363:5
  Ready @25c
  TopQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 26 37 23 29 33 2 22 36 24 
  TopQ.A RemainingLatency 0 + 26c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(26) ORDER                              
  Cand SU(22) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(22) renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_23_3_3_1_, 0, debug-location !533; cg.c:363:5
  Ready @26c
  TopQ.A TopLatency SU(22) 3c
  TopQ.A BotLatency SU(22) 1c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 27
  Executed: 27c
  Critical: 27c, 27 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 26 37 23 29 33 2 24 36 31 
  TopQ.A RemainingLatency 0 + 27c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(26) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(26) renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_22___________, 0, debug-location !533; cg.c:363:5
  Ready @27c
  TopQ.A BotLatency SU(26) 1c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 28
  Executed: 28c
  Critical: 28c, 28 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 31 37 23 29 33 2 24 36 35 
  TopQ.A RemainingLatency 0 + 28c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(29) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(29) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_21_CG_, 0, debug-location !533; cg.c:363:5
  Ready @28c
  TopQ.A BotLatency SU(29) 1c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 29
  Executed: 29c
  Critical: 29c, 29 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 31 37 23 35 33 2 24 36 
  TopQ.A RemainingLatency 0 + 29c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
  Cand SU(33) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(33) $w2 = MOVKWi $w2(tied-def 0), 1, 16, debug-location !533; cg.c:363:5
  Ready @29c
  TopQ.A BotLatency SU(33) 1c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 30
  Executed: 30c
  Critical: 30c, 30 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 34 31 37 23 35 36 2 24 
  TopQ.A RemainingLatency 0 + 30c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(34) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(34) $w5 = MOVZWi 75, 0, debug-location !533; cg.c:363:5
  Ready @30c
  TopQ.A BotLatency SU(34) 1c
  *** Max MOps 1 at cycle 30
Cycle: 31 TopQ.A
TopQ.A @31c
  Retired: 31
  Executed: 31c
  Critical: 31c, 31 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 24 31 37 23 35 36 2 
  TopQ.A RemainingLatency 0 + 31c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(37) ORDER                              
  Cand SU(36) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(36) $w1 = ORRWrs $wzr, $w19, 0, debug-location !533; cg.c:363:5
  Ready @31c
  TopQ.A TopLatency SU(36) 4c
  TopQ.A BotLatency SU(36) 1c
  *** Max MOps 1 at cycle 31
Cycle: 32 TopQ.A
TopQ.A @32c
  Retired: 32
  Executed: 32c
  Critical: 32c, 32 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 24 31 37 23 35 2 
  TopQ.A RemainingLatency 0 + 32c > CritPath 5
  Cand SU(38) ORDER                              
  Cand SU(37) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(37) $w3 = ORRWrs $wzr, $wzr, 0, debug-location !533; cg.c:363:5
  Ready @32c
  TopQ.A BotLatency SU(37) 1c
  *** Max MOps 1 at cycle 32
Cycle: 33 TopQ.A
TopQ.A @33c
  Retired: 33
  Executed: 33c
  Critical: 33c, 33 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 38 24 31 2 23 35 
  TopQ.A RemainingLatency 0 + 33c > CritPath 5
  Cand SU(38) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(38) $w4 = ORRWrs $wzr, $wzr, 0, debug-location !533; cg.c:363:5
  Ready @33c
  TopQ.A BotLatency SU(38) 1c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 34
  Executed: 34c
  Critical: 34c, 34 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 24 31 2 23 
  TopQ.A RemainingLatency 0 + 34c > CritPath 5
  Cand SU(35) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
  Ready @34c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 35
  Executed: 35c
  Critical: 35c, 35 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 24 31 23 
  TopQ.A RemainingLatency 0 + 35c > CritPath 5
  Cand SU(35) ORDER                              
  Cand SU(24) ORDER                              
  Cand SU(23) ORDER                              
Pick Top ORDER     
Scheduling SU(23) STRWui renamable $w20, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
  Ready @35c
  *** Max MOps 1 at cycle 35
Cycle: 36 TopQ.A
TopQ.A @36c
  Retired: 36
  Executed: 36c
  Critical: 36c, 36 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 24 31 
  TopQ.A RemainingLatency 0 + 36c > CritPath 5
  Cand SU(35) ORDER                              
  Cand SU(24) ORDER                              
Pick Top ORDER     
Scheduling SU(24) STPXi renamable $x18, renamable $x17, $sp, 7, debug-location !533 :: (store 8 into stack + 64), (store 8 into stack + 56); cg.c:363:5
  Ready @36c
  *** Max MOps 1 at cycle 36
Cycle: 37 TopQ.A
TopQ.A @37c
  Retired: 37
  Executed: 37c
  Critical: 37c, 37 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 31 
  TopQ.A RemainingLatency 0 + 37c > CritPath 5
  Cand SU(35) ORDER                              
  Cand SU(31) ORDER                              
Pick Top ORDER     
Scheduling SU(31) STRXui renamable $x8, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
  Ready @37c
  *** Max MOps 1 at cycle 37
Cycle: 38 TopQ.A
TopQ.A @38c
  Retired: 38
  Executed: 38c
  Critical: 38c, 38 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 35 
Pick Top ONLY1     
Scheduling SU(35) STRXui renamable $x16, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5
  Ready @38c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 39
  Executed: 39c
  Critical: 39c, 39 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   renamable $w19 = LDURSBWi $fp, -116, debug-location !529 :: (dereferenceable load 1 from %ir.Class, align 4); cg.c:363:25
SU(1):   renamable $d1, renamable $d0 = LDPDi $fp, -13, debug-location !530 :: (dereferenceable load 8 from %ir.t), (dereferenceable load 8 from %ir.mflops); cg.c:363:49
SU(3):   renamable $w20 = LDURWi $fp, -120, debug-location !532 :: (dereferenceable load 4 from %ir.verified); cg.c:364:47
SU(4):   $x8 = ADRP target-flags(aarch64-page) @cg__str_31_randdp_, debug-location !533; cg.c:363:5
SU(6):   $x16 = ADRP target-flags(aarch64-page) @cg__str_30__O3__mcmod, debug-location !533; cg.c:363:5
SU(12):   $x0 = ADRP target-flags(aarch64-page) @cg__str_27__lm_, debug-location !533; cg.c:363:5
SU(14):   $x1 = ADRP target-flags(aarch64-page) @cg__str_26___CC__, debug-location !533; cg.c:363:5
SU(16):   $x2 = ADRP target-flags(aarch64-page) @cg__str_25_gcc_, debug-location !533; cg.c:363:5
SU(18):   $x3 = ADRP target-flags(aarch64-page) @cg__str_24_03_Nov_201, debug-location !533; cg.c:363:5
SU(5):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_31_randdp_, 0, debug-location !533; cg.c:363:5
SU(7):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_30__O3__mcmod, 0, debug-location !533; cg.c:363:5
SU(13):   renamable $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_27__lm_, 0, debug-location !533; cg.c:363:5
SU(15):   renamable $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_26___CC__, 0, debug-location !533; cg.c:363:5
SU(17):   renamable $x2 = ADDXri $x2, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_25_gcc_, 0, debug-location !533; cg.c:363:5
SU(19):   renamable $x3 = ADDXri $x3, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_24_03_Nov_201, 0, debug-location !533; cg.c:363:5
SU(8):   $x17 = ADRP target-flags(aarch64-page) @cg__str_29__g__Wall__, debug-location !533; cg.c:363:5
SU(10):   $x18 = ADRP target-flags(aarch64-page) @cg__str_28__I___commo, debug-location !533; cg.c:363:5
SU(20):   STPXi renamable $x16, renamable $x8, $sp, 9, debug-location !533 :: (store 8 into stack + 80), (store 8 into stack + 72); cg.c:363:5
SU(21):   $x8 = ADRP target-flags(aarch64-page) @cg__str_23_3_3_1_, debug-location !533; cg.c:363:5
SU(25):   $x16 = ADRP target-flags(aarch64-page) @cg__str_22___________, debug-location !533; cg.c:363:5
SU(27):   STPXi renamable $x1, renamable $x0, $sp, 5, debug-location !533 :: (store 8 into stack + 48), (store 8 into stack + 40); cg.c:363:5
SU(28):   $x0 = ADRP target-flags(aarch64-page) @cg__str_21_CG_, debug-location !533; cg.c:363:5
SU(30):   STPXi renamable $x3, renamable $x2, $sp, 3, debug-location !533 :: (store 8 into stack + 32), (store 8 into stack + 24); cg.c:363:5
SU(32):   $w2 = MOVZWi 9464, 0, debug-location !533; cg.c:363:5
SU(9):   renamable $x17 = ADDXri $x17, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_29__g__Wall__, 0, debug-location !533; cg.c:363:5
SU(11):   renamable $x18 = ADDXri $x18, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_28__I___commo, 0, debug-location !533; cg.c:363:5
SU(22):   renamable $x8 = ADDXri $x8, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_23_3_3_1_, 0, debug-location !533; cg.c:363:5
SU(26):   renamable $x16 = ADDXri $x16, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_22___________, 0, debug-location !533; cg.c:363:5
SU(29):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_21_CG_, 0, debug-location !533; cg.c:363:5
SU(33):   $w2 = MOVKWi $w2(tied-def 0), 1, 16, debug-location !533; cg.c:363:5
SU(34):   $w5 = MOVZWi 75, 0, debug-location !533; cg.c:363:5
SU(36):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !533; cg.c:363:5
SU(37):   $w3 = ORRWrs $wzr, $wzr, 0, debug-location !533; cg.c:363:5
SU(38):   $w4 = ORRWrs $wzr, $wzr, 0, debug-location !533; cg.c:363:5
SU(2):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
SU(23):   STRWui renamable $w20, $sp, 2, debug-location !533 :: (store 4 into stack + 8); cg.c:363:5
SU(24):   STPXi renamable $x18, renamable $x17, $sp, 7, debug-location !533 :: (store 8 into stack + 64), (store 8 into stack + 56); cg.c:363:5
SU(31):   STRXui renamable $x8, $sp, 2, debug-location !533 :: (store 8 into stack + 16); cg.c:363:5
SU(35):   STRXui renamable $x16, $sp, 0, debug-location !533 :: (store 8 into stack); cg.c:363:5

Fixup kills for %bb.57
********** MI Scheduling **********
main:%bb.58 if.then195
  From: FCMPDri renamable $d0, implicit-def $nzcv, debug-location !543; cg.c:372:13
    To: Bcc 1, %bb.60, implicit $nzcv, debug-location !543; cg.c:372:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !543; cg.c:372:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   STURDi renamable $d0, $fp, -112, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   Bcc 1, %bb.60, implicit $nzcv, debug-location !543; cg.c:372:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) FCMPDri renamable $d0, implicit-def $nzcv, debug-location !543; cg.c:372:13
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -112, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   FCMPDri renamable $d0, implicit-def $nzcv, debug-location !543; cg.c:372:13
SU(1):   STURDi renamable $d0, $fp, -112, debug-location !539 :: (store 8 into %ir.tmax); cg.c:371:14

Fixup kills for %bb.58
********** MI Scheduling **********
main:%bb.59 if.then199
  From: $x8 = MOVZXi 16368, 48
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   STURXi renamable $x8, $fp, -112, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURXi renamable $x8, $fp, -112, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   STURXi renamable $x8, $fp, -112, debug-location !544 :: (store 8 into %ir.tmax); cg.c:373:18

Fixup kills for %bb.59
********** MI Scheduling **********
main:%bb.60 if.end200
  From: renamable $x8 = ADRP target-flags(aarch64-page) %const.3
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(2): Data Latency=4 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.23)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
SU(3):   STURWi $wzr, $fp, -44, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   $x20 = ADDXri $sp, 144, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) %const.3
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x20 = ADDXri $sp, 144, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi $wzr, $fp, -44, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.23)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) %const.3
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.3 :: (load 8 from constant-pool)
SU(4):   $x20 = ADDXri $sp, 144, 0
SU(3):   STURWi $wzr, $fp, -44, debug-location !547 :: (store 4 into %ir.i); cg.c:375:16
SU(2):   STRDui renamable $d0, $sp, 14 :: (store 8 into %stack.23)

********** MI Scheduling **********
main:%bb.60 if.end200
  From: $x0 = ADRP target-flags(aarch64-page) @cg__str_32___SECTION_, debug-location !546; cg.c:374:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !546; cg.c:374:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_32___SECTION_, debug-location !546; cg.c:374:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_32___SECTION_, 0, debug-location !546; cg.c:374:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !546; cg.c:374:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @cg__str_32___SECTION_, debug-location !546; cg.c:374:9
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_32___SECTION_, 0, debug-location !546; cg.c:374:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_32___SECTION_, debug-location !546; cg.c:374:9
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_32___SECTION_, 0, debug-location !546; cg.c:374:9

Fixup kills for %bb.60
********** MI Scheduling **********
main:%bb.61 for.cond202
  From: renamable $w8 = LDURWi $fp, -44, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
    To: Bcc 12, %bb.67, implicit $nzcv, debug-location !553; cg.c:375:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !553; cg.c:375:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.67, implicit $nzcv, debug-location !553; cg.c:375:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -44, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !553; cg.c:375:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.61 ***
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !550 :: (dereferenceable load 4 from %ir.i); cg.c:375:21
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !553; cg.c:375:9

Fixup kills for %bb.61
********** MI Scheduling **********
main:%bb.62 for.body205
  From: renamable $w8 = LDURWi $fp, -44, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
    To: CBNZW killed renamable $w8, %bb.64, debug-location !561; cg.c:377:17
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(1):   STURDi renamable $d0, $fp, -96, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   CBNZW killed renamable $w8, %bb.64, debug-location !561; cg.c:377:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -44, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURDi renamable $d0, $fp, -96, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !558 :: (dereferenceable load 4 from %ir.i); cg.c:377:17
SU(1):   STURDi renamable $d0, $fp, -96, debug-location !557 :: (store 8 into %ir.t); cg.c:376:15

********** MI Scheduling **********
main:%bb.62 for.body205
  From: renamable $w19 = LDURWi $fp, -44, debug-location !554 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
    To: BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !556; cg.c:376:17
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -44, debug-location !554 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w19
SU(1):   $w0 = ORRWrs $wzr, $w19, 0, debug-location !556; cg.c:376:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @timer_read, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $d0, debug-location !556; cg.c:376:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w19 = LDURWi $fp, -44, debug-location !554 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w0 = ORRWrs $wzr, $w19, 0, debug-location !556; cg.c:376:17
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   renamable $w19 = LDURWi $fp, -44, debug-location !554 :: (dereferenceable load 4 from %ir.i); cg.c:376:28
SU(1):   $w0 = ORRWrs $wzr, $w19, 0, debug-location !556; cg.c:376:17

Fixup kills for %bb.62
********** MI Scheduling **********
main:%bb.63 if.then209
  From: renamable $x8 = LDURSWi $fp, -44, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !566; cg.c:378:17
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -44, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(1): Data Latency=4 Reg=$x8
SU(1):   renamable $x19 = LDRXroX renamable $x20, renamable $x8, 0, 1, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Data Latency=4 Reg=$x19
SU(2):   renamable $d0 = LDURDi $fp, -96, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$d0
SU(3):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
SU(4):   $x0 = ADRP target-flags(aarch64-page) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, 0, debug-location !566; cg.c:378:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x1 = ORRXrs $xzr, $x19, 0, debug-location !566; cg.c:378:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit-def $sp, implicit-def dead $w8, debug-location !566; cg.c:378:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -44, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDURDi $fp, -96, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 3 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, 0, debug-location !566; cg.c:378:17
  Ready @3c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x19 = LDRXroX renamable $x20, renamable $x8, 0, 1, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x1 = ORRXrs $xzr, $x19, 0, debug-location !566; cg.c:378:17
  Ready @8c
  TopQ.A TopLatency SU(6) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   renamable $x8 = LDURSWi $fp, -44, debug-location !562 :: (dereferenceable load 4 from %ir.i); cg.c:378:49
SU(2):   renamable $d0 = LDURDi $fp, -96, debug-location !565 :: (dereferenceable load 8 from %ir.t); cg.c:378:53
SU(4):   $x0 = ADRP target-flags(aarch64-page) @cg__str_33____8s__9_3, debug-location !566; cg.c:378:17
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_33____8s__9_3, 0, debug-location !566; cg.c:378:17
SU(1):   renamable $x19 = LDRXroX renamable $x20, renamable $x8, 0, 1, debug-location !564 :: (load 8 from %ir.arrayidx211); cg.c:378:41
SU(3):   STRDui renamable $d0, $sp, 16 :: (store 8 into %stack.21)
SU(6):   $x1 = ORRXrs $xzr, $x19, 0, debug-location !566; cg.c:378:17

Fixup kills for %bb.63
********** MI Scheduling **********
main:%bb.64 if.else213
  From: renamable $w8 = LDURWi $fp, -44, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
    To: Bcc 1, %bb.66, implicit $nzcv, debug-location !580; cg.c:383:21
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !580; cg.c:383:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.66, implicit $nzcv, debug-location !580; cg.c:383:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -44, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !580; cg.c:383:21
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !577 :: (dereferenceable load 4 from %ir.i); cg.c:383:21
SU(1):   dead $wzr = SUBSWri renamable $w8, 2, 0, implicit-def $nzcv, debug-location !580; cg.c:383:21

********** MI Scheduling **********
main:%bb.64 if.else213
  From: renamable $x8 = LDURSWi $fp, -44, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !576; cg.c:381:17
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURSWi $fp, -44, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $d0 = LDURDi $fp, -96, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(7): Data Latency=4 Reg=$d0
    SU(5): Data Latency=4 Reg=$d0
SU(2):   renamable $d2 = LDURDi $fp, -112, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=$d2
SU(3):   renamable $x19 = LDRXroX renamable $x20, renamable $x8, 0, 1, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(10): Data Latency=4 Reg=$x19
SU(4):   renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.23)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !573; cg.c:382:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
    SU(1): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !575; cg.c:382:34
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
    SU(2): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d1
SU(7):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(1): Data Latency=4 Reg=$d0
SU(8):   $x0 = ADRP target-flags(aarch64-page) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, 0, debug-location !576; cg.c:381:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ORRXrs $xzr, $x19, 0, debug-location !576; cg.c:381:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$x19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !576; cg.c:381:17
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 8 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURSWi $fp, -44, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 1 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(8) ORDER                              
  Cand SU(1) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDURDi $fp, -96, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 8 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(8) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.23)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 5 
Queue TopQ.A: 8 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 9
  Cand SU(8) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d2 = LDURDi $fp, -112, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 8 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 9
  Cand SU(8) ORDER                              
  Cand SU(3) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x19 = LDRXroX renamable $x20, renamable $x8, 0, 1, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 10 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) $x0 = ADRP target-flags(aarch64-page) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 9 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 9
  Cand SU(9) ORDER                              
  Cand SU(5) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !573; cg.c:382:26
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 9 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 9
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !575; cg.c:382:34
  Ready @7c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 9
  Cand SU(9) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(9) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, 0, debug-location !576; cg.c:381:17
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 7 
  TopQ.A RemainingLatency 0 + 9c > CritPath 9
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ORRXrs $xzr, $x19, 0, debug-location !576; cg.c:381:17
  Ready @9c
  TopQ.A TopLatency SU(10) 8c
  TopQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   renamable $x8 = LDURSWi $fp, -44, debug-location !568 :: (dereferenceable load 4 from %ir.i); cg.c:381:60
SU(1):   renamable $d0 = LDURDi $fp, -96, debug-location !571 :: (dereferenceable load 8 from %ir.t); cg.c:381:64
SU(4):   renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.23)
SU(2):   renamable $d2 = LDURDi $fp, -112, debug-location !574 :: (dereferenceable load 8 from %ir.tmax); cg.c:382:36
SU(3):   renamable $x19 = LDRXroX renamable $x20, renamable $x8, 0, 1, debug-location !570 :: (load 8 from %ir.arrayidx215); cg.c:381:52
SU(8):   $x0 = ADRP target-flags(aarch64-page) @cg__str_34____8s__9_3, debug-location !576; cg.c:381:17
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !573; cg.c:382:26
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !575; cg.c:382:34
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_34____8s__9_3, 0, debug-location !576; cg.c:381:17
SU(10):   $x1 = ORRXrs $xzr, $x19, 0, debug-location !576; cg.c:381:17
SU(7):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)

Fixup kills for %bb.64
********** MI Scheduling **********
main:%bb.65 if.then221
  From: renamable $d2 = LDURDi $fp, -112, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !591; cg.c:385:21
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $d2 = LDURDi $fp, -112, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=$d2
    SU(2): Data Latency=4 Reg=$d2
SU(1):   renamable $d1 = LDURDi $fp, -96, debug-location !583 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d1
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $d0 = FSUBDrr renamable $d2, renamable $d1, debug-location !584; cg.c:384:30
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d0
    SU(5): Data Latency=1 Reg=$d0
    SU(3): Data Latency=1 Reg=$d0
    SU(4): Anti Latency=0
SU(3):   STURDi renamable $d0, $fp, -96, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Ord  Latency=0 Memory
SU(4):   renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.23)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d1
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !588; cg.c:386:30
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
    SU(2): Data Latency=1 Reg=$d0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d1
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !590; cg.c:386:38
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d1
    SU(0): Data Latency=4 Reg=$d2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(7): Data Latency=1 Reg=$d1
SU(7):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d1
    SU(2): Data Latency=1 Reg=$d0
SU(8):   $x0 = ADRP target-flags(aarch64-page) @cg__str_35__________8, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, 0, debug-location !591; cg.c:385:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(10):   $x1 = ADRP target-flags(aarch64-page) @cg__str_36_rest_, debug-location !591; cg.c:385:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x1
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_36_rest_, 0, debug-location !591; cg.c:385:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$x1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $d0, implicit $d1, implicit-def $sp, implicit-def dead $w8, debug-location !591; cg.c:385:21
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=1 Artificial
    SU(9): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 8 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d2 = LDURDi $fp, -112, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 1 8 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(10) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDURDi $fp, -96, debug-location !583 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 10 8 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(10) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) $x0 = ADRP target-flags(aarch64-page) @cg__str_35__________8, debug-location !591; cg.c:385:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 3c > CritPath 10
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) $x1 = ADRP target-flags(aarch64-page) @cg__str_36_rest_, debug-location !591; cg.c:385:21
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 9 11 
  TopQ.A RemainingLatency 0 + 4c > CritPath 10
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, 0, debug-location !591; cg.c:385:21
  Ready @4c
  TopQ.A TopLatency SU(9) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = FSUBDrr renamable $d2, renamable $d1, debug-location !584; cg.c:384:30
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 3 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 10
  Cand SU(11) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.23)
  Ready @6c
  TopQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 11 3 
  TopQ.A RemainingLatency 0 + 7c > CritPath 10
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_36_rest_, 0, debug-location !591; cg.c:385:21
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURDi renamable $d0, $fp, -96, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
  Ready @8c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !588; cg.c:386:30
  Ready @10c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !590; cg.c:386:38
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)
  Ready @12c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.65 ***
SU(0):   renamable $d2 = LDURDi $fp, -112, debug-location !581 :: (dereferenceable load 8 from %ir.tmax); cg.c:384:25
SU(1):   renamable $d1 = LDURDi $fp, -96, debug-location !583 :: (dereferenceable load 8 from %ir.t); cg.c:384:32
SU(8):   $x0 = ADRP target-flags(aarch64-page) @cg__str_35__________8, debug-location !591; cg.c:385:21
SU(10):   $x1 = ADRP target-flags(aarch64-page) @cg__str_36_rest_, debug-location !591; cg.c:385:21
SU(9):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_35__________8, 0, debug-location !591; cg.c:385:21
SU(2):   renamable $d0 = FSUBDrr renamable $d2, renamable $d1, debug-location !584; cg.c:384:30
SU(4):   renamable $d1 = LDRDui $sp, 14 :: (load 8 from %stack.23)
SU(11):   $x1 = ADDXri $x1, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_36_rest_, 0, debug-location !591; cg.c:385:21
SU(3):   STURDi renamable $d0, $fp, -96, debug-location !585 :: (store 8 into %ir.t); cg.c:384:23
SU(5):   renamable $d1 = FMULDrr renamable $d0, renamable $d1, debug-location !588; cg.c:386:30
SU(6):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !590; cg.c:386:38
SU(7):   STPDi renamable $d1, renamable $d0, $sp, 15 :: (store 8 into %stack.21), (store 8 into %stack.22)

Fixup kills for %bb.65
********** MI Scheduling **********
main:%bb.66 for.inc228
  From: renamable $w8 = LDURWi $fp, -44, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
    To: B %bb.61
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !593; cg.c:375:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -44, debug-location !593 :: (store 4 into %ir.i); cg.c:375:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.61
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -44, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !593; cg.c:375:34
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -44, debug-location !593 :: (store 4 into %ir.i); cg.c:375:34
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.66 ***
SU(0):   renamable $w8 = LDURWi $fp, -44, debug-location !593 :: (dereferenceable load 4 from %ir.i); cg.c:375:34
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !593; cg.c:375:34
SU(2):   STURWi renamable $w8, $fp, -44, debug-location !593 :: (store 4 into %ir.i); cg.c:375:34

Fixup kills for %bb.66
********** MI Scheduling **********
main:%bb.67 do.end235
  From: $w8 = ORRWrs $wzr, $wzr, 0, debug-location !597; cg.c:394:5
    To: $sp = frame-destroy ADDXri $sp, 336, 0, debug-location !597; cg.c:394:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0, debug-location !597; cg.c:394:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !597 :: (load 8 from %stack.51), (load 8 from %stack.50); cg.c:394:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !597 :: (load 8 from %stack.53), (load 8 from %stack.52); cg.c:394:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 336, 0, debug-location !597; cg.c:394:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !597 :: (load 8 from %stack.51), (load 8 from %stack.50); cg.c:394:5
  Ready @0c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !597 :: (load 8 from %stack.53), (load 8 from %stack.52); cg.c:394:5
  Ready @1c
  TopQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = ORRWrs $wzr, $wzr, 0, debug-location !597; cg.c:394:5
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.67 ***
SU(1):   $fp, $lr = frame-destroy LDPXi $sp, 40, debug-location !597 :: (load 8 from %stack.51), (load 8 from %stack.50); cg.c:394:5
SU(2):   $x20, $x19 = frame-destroy LDPXi $sp, 38, debug-location !597 :: (load 8 from %stack.53), (load 8 from %stack.52); cg.c:394:5
SU(0):   $w8 = ORRWrs $wzr, $wzr, 0, debug-location !597; cg.c:394:5

Fixup kills for %bb.67
Before MISched:
# Machine code for function makea: NoPHIs, TracksLiveness
Frame Objects:
  fi#-7: size=8, align=16, fixed, at location [SP+48]
  fi#-6: size=8, align=8, fixed, at location [SP+40]
  fi#-5: size=8, align=16, fixed, at location [SP+32]
  fi#-4: size=8, align=8, fixed, at location [SP+24]
  fi#-3: size=4, align=16, fixed, at location [SP+16]
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=4, align=4, at location [SP]
  fi#17: size=56, align=16, at location [SP]
  fi#18: size=112, align=16, at location [SP]
Constant Pool:
  cp#0: 1.000000e-01, align=8
  cp#1: 6.000000e+01, align=8
  cp#2: 5.000000e-01, align=8
Function Live Ins: $w0 in %0, $w1 in %1, $x2 in %2, $x3 in %3, $x4 in %4, $w5 in %5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $w1, $x2, $x3, $x4, $w5
  %5:gpr32 = COPY $w5
  %4:gpr64 = COPY $x4
  %3:gpr64 = COPY $x3
  %2:gpr64 = COPY $x2
  %1:gpr32 = COPY $w1
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
  STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
  %6:gpr32 = MOVi32imm 1
  STRWui %6:gpr32, %stack.16.nn1, 0, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9

bb.1.do.body:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

  %7:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  %8:gpr32 = UBFMWri %7:gpr32, 31, 30, debug-location !645; cg.c:611:17
  STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
  %9:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !648 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  dead $wzr = SUBSWrr %8:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !650; cg.c:612:5
  Bcc 11, %bb.1, implicit killed $nzcv, debug-location !650; cg.c:612:5
  B %bb.2, debug-location !650; cg.c:612:5

bb.2.do.end:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STRWui $wzr, %stack.13.iouter, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
  %32:gpr32 = MOVi32imm 13
  %35:gpr64sp = ADDXri %stack.18.vc, 0, 0
  %36:gpr64sp = ADDXri %stack.17.ivc, 0, 0
  %40:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  %41:fpr64 = LDRDui %40:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  undef %60.sub_32:gpr64 = MOVi32imm 56
  undef %70.sub_32:gpr64 = MOVi32imm 112

bb.3.for.cond:
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

  %12:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  %13:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !658 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  dead $wzr = SUBSWrr %12:gpr32, %13:gpr32, implicit-def $nzcv, debug-location !660; cg.c:617:5
  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !660; cg.c:617:5
  B %bb.4, debug-location !660; cg.c:617:5

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  STRWui %32:gpr32, %stack.15.nzv, 0, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
  %33:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  %34:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !668; cg.c:619:9
  $w0 = COPY %33:gpr32, debug-location !668; cg.c:619:9
  $w1 = MOVi32imm 13, debug-location !668; cg.c:619:9
  $w2 = COPY %34:gpr32, debug-location !668; cg.c:619:9
  $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !668; cg.c:619:9
  $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !668; cg.c:619:9
  BL @sprnvc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !668; cg.c:619:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !668; cg.c:619:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !669; cg.c:620:16
  PCN_STACKMAP 0, 0, 0, %stack.2.a.addr, 0, 0, %fixed-stack.2, 0, 0, %fixed-stack.1, 0, 0, %fixed-stack.3, 0, 0, %stack.18.vc, 0, 0, %stack.17.ivc, 0, 0, %stack.3.colidx.addr, 0, 0, %stack.5.firstrow.addr, 0, 0, %stack.13.iouter, 0, 0, %fixed-stack.0, 0, 0, %stack.17.ivc, 0, 0, %stack.14.ivelt, 0, 0, %fixed-stack.6, 0, 0, %stack.0.n.addr, 0, 0, %stack.16.nn1, 0, 0, %stack.1.nz.addr, 0, 0, %stack.15.nzv, 0, 0, %stack.4.rowstr.addr, 0, 0, %stack.18.vc, 0, %33:gpr32, %32:gpr32, %34:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !669 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16); cg.c:620:16
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !669; cg.c:620:16
  %37:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  %38:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  %39:gpr32sp = nsw ADDWri %38:gpr32common, 1, 0, debug-location !673; cg.c:620:41
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !674; cg.c:620:9
  $w0 = COPY %37:gpr32, debug-location !674; cg.c:620:9
  $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !674; cg.c:620:9
  $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !674; cg.c:620:9
  $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !674; cg.c:620:9
  $w4 = COPY %39:gpr32sp, debug-location !674; cg.c:620:9
  $d0 = COPY %41:fpr64, debug-location !674; cg.c:620:9
  BL @vecset, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit killed $d0, implicit-def $sp, debug-location !674; cg.c:620:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !674; cg.c:620:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !675; cg.c:621:24
  PCN_STACKMAP 1, 0, 0, %stack.2.a.addr, 0, 0, %fixed-stack.2, 0, %39:gpr32sp, 0, %fixed-stack.1, 0, 0, %fixed-stack.3, 0, 0, %stack.18.vc, 0, 0, %stack.17.ivc, 0, 0, %stack.3.colidx.addr, 0, 0, %stack.5.firstrow.addr, 0, 0, %stack.13.iouter, 0, 0, %fixed-stack.0, 0, 0, %stack.17.ivc, 0, 0, %stack.14.ivelt, 0, 0, %fixed-stack.6, 0, 0, %stack.0.n.addr, 0, 0, %stack.16.nn1, 0, 0, %stack.1.nz.addr, 0, 0, %stack.15.nzv, 0, 0, %stack.4.rowstr.addr, 0, 0, %stack.18.vc, 0, %37:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !675 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16); cg.c:621:24
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !675; cg.c:621:24
  %43:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  %44:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  %45:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  STRWroX %43:gpr32, %44:gpr64common, %45:gpr64, 0, 1, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
  STRWui $wzr, %stack.14.ivelt, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20

bb.5.for.cond5:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

  %47:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  %48:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !684 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
  dead $wzr = SUBSWrr %47:gpr32, %48:gpr32, implicit-def $nzcv, debug-location !686; cg.c:623:9
  Bcc 10, %bb.7, implicit killed $nzcv, debug-location !686; cg.c:623:9
  B %bb.6, debug-location !686; cg.c:623:9

bb.6.for.body7:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %52:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
  %53:gpr64 = UBFMXri %52:gpr64, 62, 61, debug-location !689; cg.c:624:35
  %55:gpr32common = LDRWroX %36:gpr64sp, %53:gpr64, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  %56:gpr32common = SUBWri %55:gpr32common, 1, 0, debug-location !690; cg.c:624:46
  %57:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  %58:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
  %62:gpr64common = MADDXrrr %58:gpr64, %60:gpr64, %57:gpr64, debug-location !691; cg.c:624:13
  STRWroX %56:gpr32common, %62:gpr64common, %53:gpr64, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  %63:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
  %64:gpr64 = UBFMXri %63:gpr64, 61, 60, debug-location !696; cg.c:625:35
  %66:fpr64 = LDRDroX %35:gpr64sp, %64:gpr64, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  %67:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  %68:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
  %72:gpr64common = MADDXrrr %68:gpr64, %70:gpr64, %67:gpr64, debug-location !697; cg.c:625:13
  STRDroX %66:fpr64, %72:gpr64common, %64:gpr64, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  %73:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !701 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !701; cg.c:623:43
  STRWui %74:gpr32common, %stack.14.ivelt, 0, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43
  B %bb.5, debug-location !702; cg.c:623:9

bb.7.for.inc20:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %50:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  %51:gpr32common = nsw ADDWri %50:gpr32common, 1, 0, debug-location !705; cg.c:617:40
  STRWui %51:gpr32common, %stack.13.iouter, 0, debug-location !705 :: (store 4 into %ir.iouter); cg.c:617:40
  B %bb.3, debug-location !706; cg.c:617:5

bb.8.for.end22:
; predecessors: %bb.3

  %15:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  %16:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  %17:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  %19:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  %20:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
  %21:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
  %22:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
  %23:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  %24:gpr32 = LDRWui %fixed-stack.6, 0, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  %25:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
  ADJCALLSTACKDOWN 48, 0, implicit-def dead $sp, implicit $sp, debug-location !720; cg.c:633:5
  STRXui %25:gpr64, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
  STRWui %24:gpr32, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
  STRWui %23:gpr32, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
  STRXui %22:gpr64, $sp, 2, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
  STRXui %21:gpr64, $sp, 1, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
  STRXui %20:gpr64, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5
  %27:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %28:fpr64 = LDRDui %27:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %29:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  %30:fpr64 = LDRDui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  $x0 = COPY %15:gpr64, debug-location !720; cg.c:633:5
  $x1 = COPY %16:gpr64, debug-location !720; cg.c:633:5
  $x2 = COPY %17:gpr64, debug-location !720; cg.c:633:5
  $w3 = COPY %18:gpr32, debug-location !720; cg.c:633:5
  $w4 = COPY %19:gpr32, debug-location !720; cg.c:633:5
  $w5 = MOVi32imm 13, debug-location !720; cg.c:633:5
  $d0 = COPY %28:fpr64, debug-location !720; cg.c:633:5
  $d1 = COPY %30:fpr64, debug-location !720; cg.c:633:5
  BL @sparse, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !720; cg.c:633:5
  ADJCALLSTACKUP 48, 0, implicit-def $sp, implicit $sp, debug-location !720; cg.c:633:5
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !721; cg.c:635:1
  PCN_STACKMAP 2, 0, %15:gpr64, %16:gpr64, %17:gpr64, %18:gpr32, %19:gpr32, %20:gpr64, %21:gpr64, %22:gpr64, %23:gpr32, %24:gpr32, %25:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !721; cg.c:635:1
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !721; cg.c:635:1
  RET_ReallyLR debug-location !721; cg.c:635:1

# End machine code for function makea.

********** MI Scheduling **********
makea:%bb.0 entry
  From: %5:gpr32 = COPY $w5
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=6
Live In: W0 W1 W2 W3 W4 W5 
Live Out: 
Live Thru: 
Top Pressure:
GPR32=6
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:gpr32 = COPY $w5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%5
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %4:gpr64 = COPY $x4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %3:gpr64 = COPY $x3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %2:gpr64 = COPY $x2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %1:gpr32 = COPY $w1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %6:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%6
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRWui %6:gpr32, %stack.16.nn1, 0, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%6
  Pressure Diff      : GPR32 1
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 12 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %5:gpr32 = COPY $w5
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 12 1 2 3 4 5 11 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %4:gpr64 = COPY $x4
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 12 11 2 3 4 5 10 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %3:gpr64 = COPY $x3
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 12 11 10 3 4 5 9 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %2:gpr64 = COPY $x2
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 12 11 10 9 4 5 8 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %1:gpr32 = COPY $w1
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 12 11 10 9 8 5 7 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(5) PHYS-REG                           
  Cand SU(5) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(5) %0:gpr32 = COPY $w0
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 12 11 10 9 8 7 6 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) STRWui %6:gpr32, %stack.16.nn1, 0, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9
Bottom Pressure:
GPR32=1
  LiveReg: %6
  UpdateRegP: SU(13) STRWui %6:gpr32, %stack.16.nn1, 0, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 7 12 
Queue TopQ.P: 
Queue TopQ.A: 12 11 10 9 8 7 6 
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %6:gpr32 = MOVi32imm 1
Bottom Pressure:

  Ready @1c
  BotQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 11 10 9 8 7 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
Bottom Pressure:
GPR32=1
  LiveReg: %5
  UpdateRegP: SU(11) STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
              to 
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 6 7 10 9 8 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
GPR32=2
  LiveReg: %4
  UpdateRegP: SU(10) STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
GPR32=3
  LiveReg: %3
  UpdateRegP: SU(9) STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GPR32=4
  LiveReg: %2
  UpdateRegP: SU(8) STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
              to 
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
GPR32=5
  LiveReg: %1
  UpdateRegP: SU(7) STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
Bottom Pressure:
GPR32=6
  LiveReg: %0
  UpdateRegP: SU(6) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
              to 
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:gpr32 = COPY $w5
SU(1):   %4:gpr64 = COPY $x4
SU(2):   %3:gpr64 = COPY $x3
SU(3):   %2:gpr64 = COPY $x2
SU(4):   %1:gpr32 = COPY $w1
SU(5):   %0:gpr32 = COPY $w0
SU(6):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
SU(7):   STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
SU(8):   STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
SU(9):   STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
SU(10):   STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
SU(11):   STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
SU(12):   %6:gpr32 = MOVi32imm 1
SU(13):   STRWui %6:gpr32, %stack.16.nn1, 0, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9

********** MI Scheduling **********
makea:%bb.1 do.body
  From: %7:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
    To: Bcc 11, %bb.1, implicit killed $nzcv, debug-location !650; cg.c:612:5
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %7:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=4 Reg=%7
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %8:gpr32 = UBFMWri %7:gpr32, 31, 30, debug-location !645; cg.c:611:17
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=%7
  Successors:
    SU(4): Data Latency=1 Reg=%8
    SU(2): Data Latency=1 Reg=%8
  Single Issue       : false;
SU(2):   STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%8
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %9:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !648 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%9
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %8:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !650; cg.c:612:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%8
    SU(3): Data Latency=4 Reg=%9
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.1, implicit killed $nzcv, debug-location !650; cg.c:612:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %8:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !650; cg.c:612:5
  Ready @1c
  BotQ.A TopLatency SU(4) 5c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %8:gpr32 = UBFMWri %7:gpr32, 31, 30, debug-location !645; cg.c:611:17
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %9:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !648 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %7:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %7:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
SU(3):   %9:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !648 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
SU(1):   %8:gpr32 = UBFMWri %7:gpr32, 31, 30, debug-location !645; cg.c:611:17
SU(4):   dead $wzr = SUBSWrr %8:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !650; cg.c:612:5
SU(2):   STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13

********** MI Scheduling **********
makea:%bb.2 do.end
  From: STRWui $wzr, %stack.13.iouter, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
    To: End RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: %70 %60 %41 %36 %35 %32 
Live Thru: 
  LiveReg: %70
  LiveReg: %60
  LiveReg: %41
  LiveReg: %36
  LiveReg: %35
  LiveReg: %32
Top Pressure:

Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Excess PSets: 
SU(0):   STRWui $wzr, %stack.13.iouter, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %32:gpr32 = MOVi32imm 13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %35:gpr64sp = ADDXri %stack.18.vc, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %36:gpr64sp = ADDXri %stack.17.ivc, 0, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %40:gpr64temp = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1 Reg=%40
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(5):   %41:fpr64 = LDRDui %40:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1 Reg=%40
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(6):   undef %60.sub_32:gpr64 = MOVi32imm 56
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   undef %70.sub_32:gpr64 = MOVi32imm 112
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 7 6 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 7 
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) undef %70.sub_32:gpr64 = MOVi32imm 112
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 0 6 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 6 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) undef %60.sub_32:gpr64 = MOVi32imm 56
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 0 1 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %36:gpr64sp = ADDXri %stack.17.ivc, 0, 0
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %41:fpr64 = LDRDui %40:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
GPR32=3
  LiveReg: %40
  UpdateRegP: SU(5) %41:fpr64 = LDRDui %40:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A TopLatency SU(5) 1c
  BotQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %40:gpr64temp = ADRP target-flags(aarch64-page) %const.2
Bottom Pressure:
GPR32=2
  Ready @4c
  BotQ.A BotLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %35:gpr64sp = ADDXri %stack.18.vc, 0, 0
Bottom Pressure:
GPR32=1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %32:gpr32 = MOVi32imm 13
Bottom Pressure:

  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.13.iouter, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
Bottom Pressure:

  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   STRWui $wzr, %stack.13.iouter, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
SU(1):   %32:gpr32 = MOVi32imm 13
SU(2):   %35:gpr64sp = ADDXri %stack.18.vc, 0, 0
SU(4):   %40:gpr64temp = ADRP target-flags(aarch64-page) %const.2
SU(5):   %41:fpr64 = LDRDui %40:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(3):   %36:gpr64sp = ADDXri %stack.17.ivc, 0, 0
SU(6):   undef %60.sub_32:gpr64 = MOVi32imm 56
SU(7):   undef %70.sub_32:gpr64 = MOVi32imm 112

********** MI Scheduling **********
makea:%bb.3 for.cond
  From: %12:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
    To: Bcc 10, %bb.8, implicit killed $nzcv, debug-location !660; cg.c:617:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %12:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%12
  Single Issue       : false;
SU(1):   %13:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !658 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%13
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %12:gpr32, %13:gpr32, implicit-def $nzcv, debug-location !660; cg.c:617:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%13
    SU(0): Data Latency=4 Reg=%12
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.8, implicit killed $nzcv, debug-location !660; cg.c:617:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %12:gpr32, %13:gpr32, implicit-def $nzcv, debug-location !660; cg.c:617:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %13:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !658 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %12:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
SU(1):   %13:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !658 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
SU(2):   dead $wzr = SUBSWrr %12:gpr32, %13:gpr32, implicit-def $nzcv, debug-location !660; cg.c:617:5

********** MI Scheduling **********
makea:%bb.4 for.body
  From: %43:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %43:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%43
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %44:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%44
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %45:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%45
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRWroX %43:gpr32, %44:gpr64common, %45:gpr64, 0, 1, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%45
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%44
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%43
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui $wzr, %stack.14.ivelt, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui $wzr, %stack.14.ivelt, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWroX %43:gpr32, %44:gpr64common, %45:gpr64, 0, 1, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %45:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  Ready @5c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %44:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %43:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %43:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
SU(1):   %44:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
SU(2):   %45:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
SU(3):   STRWroX %43:gpr32, %44:gpr64common, %45:gpr64, 0, 1, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
SU(4):   STRWui $wzr, %stack.14.ivelt, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20

********** MI Scheduling **********
makea:%bb.4 for.body
  From: $w0 = COPY %37:gpr32, debug-location !674; cg.c:620:9
    To: BL @vecset, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit killed $d0, implicit-def $sp, debug-location !674; cg.c:620:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = COPY %37:gpr32, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $w4 = COPY %39:gpr32sp, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(5):   $d0 = COPY %41:fpr64, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @vecset, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit killed $d0, implicit-def $sp, debug-location !674; cg.c:620:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Artificial
    SU(4): Ord  Latency=0 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 5 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(5) $d0 = COPY %41:fpr64, debug-location !674; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 0 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(4) $w4 = COPY %39:gpr32sp, debug-location !674; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $w0 = COPY %37:gpr32, debug-location !674; cg.c:620:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 1 2 
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !674; cg.c:620:9
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !674; cg.c:620:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !674; cg.c:620:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !674; cg.c:620:9
SU(2):   $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !674; cg.c:620:9
SU(3):   $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !674; cg.c:620:9
SU(0):   $w0 = COPY %37:gpr32, debug-location !674; cg.c:620:9
SU(4):   $w4 = COPY %39:gpr32sp, debug-location !674; cg.c:620:9
SU(5):   $d0 = COPY %41:fpr64, debug-location !674; cg.c:620:9

********** MI Scheduling **********
makea:%bb.4 for.body
  From: %37:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !674; cg.c:620:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %37:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %38:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=%38
  Single Issue       : false;
SU(2):   %39:gpr32sp = nsw ADDWri %38:gpr32common, 1, 0, debug-location !673; cg.c:620:41
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=%38
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !674; cg.c:620:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %39:gpr32sp = nsw ADDWri %38:gpr32common, 1, 0, debug-location !673; cg.c:620:41
  Ready @0c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %37:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  Ready @3c
  BotQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %38:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  Ready @4c
  BotQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   %38:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
SU(0):   %37:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
SU(2):   %39:gpr32sp = nsw ADDWri %38:gpr32common, 1, 0, debug-location !673; cg.c:620:41

********** MI Scheduling **********
makea:%bb.4 for.body
  From: $w0 = COPY %33:gpr32, debug-location !668; cg.c:619:9
    To: BL @sprnvc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !668; cg.c:619:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $w0 = COPY %33:gpr32, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w1 = MOVi32imm 13, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %34:gpr32, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(3):   $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(4):   $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   BL @sprnvc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !668; cg.c:619:9
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 3 1 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(3) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %34:gpr32, debug-location !668; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 3 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $w0 = COPY %33:gpr32, debug-location !668; cg.c:619:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 1 3 
Queue TopQ.P: 
Queue TopQ.A: 3 1 4 
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(1) PHYS-REG                           
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(1) $w1 = MOVi32imm 13, debug-location !668; cg.c:619:9
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !668; cg.c:619:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !668; cg.c:619:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(3):   $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !668; cg.c:619:9
SU(4):   $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !668; cg.c:619:9
SU(1):   $w1 = MOVi32imm 13, debug-location !668; cg.c:619:9
SU(0):   $w0 = COPY %33:gpr32, debug-location !668; cg.c:619:9
SU(2):   $w2 = COPY %34:gpr32, debug-location !668; cg.c:619:9

********** MI Scheduling **********
makea:%bb.4 for.body
  From: STRWui %32:gpr32, %stack.15.nzv, 0, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !668; cg.c:619:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui %32:gpr32, %stack.15.nzv, 0, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %33:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(2):   %34:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !668; cg.c:619:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui %32:gpr32, %stack.15.nzv, 0, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %34:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %33:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   %33:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
SU(2):   %34:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
SU(0):   STRWui %32:gpr32, %stack.15.nzv, 0, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13

********** MI Scheduling **********
makea:%bb.5 for.cond5
  From: %47:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
    To: Bcc 10, %bb.7, implicit killed $nzcv, debug-location !686; cg.c:623:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %47:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%47
  Single Issue       : false;
SU(1):   %48:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !684 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%48
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %47:gpr32, %48:gpr32, implicit-def $nzcv, debug-location !686; cg.c:623:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%48
    SU(0): Data Latency=4 Reg=%47
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.7, implicit killed $nzcv, debug-location !686; cg.c:623:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %47:gpr32, %48:gpr32, implicit-def $nzcv, debug-location !686; cg.c:623:9
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %48:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !684 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %47:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %47:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
SU(1):   %48:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !684 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
SU(2):   dead $wzr = SUBSWrr %47:gpr32, %48:gpr32, implicit-def $nzcv, debug-location !686; cg.c:623:9

********** MI Scheduling **********
makea:%bb.6 for.body7
  From: %52:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
    To: B %bb.5, debug-location !702; cg.c:623:9
 RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=8
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: %70 %35 %60 %36 
Live Out: %70 %35 %60 %36 
Live Thru: GPR32=4
  LiveReg: %70
  UpdateRegP: SU(13) %72:gpr64common = MADDXrrr %68:gpr64, %70:gpr64, %67:gpr64, debug-location !697; cg.c:625:13
              to GPR32 1
  LiveReg: %35
  UpdateRegP: SU(10) %66:fpr64 = LDRDroX %35:gpr64sp, %64:gpr64, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %60
  UpdateRegP: SU(6) %62:gpr64common = MADDXrrr %58:gpr64, %60:gpr64, %57:gpr64, debug-location !691; cg.c:624:13
              to GPR32 1
  LiveReg: %36
  UpdateRegP: SU(2) %55:gpr32common = LDRWroX %36:gpr64sp, %53:gpr64, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
              to 
Top Pressure:
GPR32=4
Bottom Pressure:
GPR32=4
Excess PSets: 
SU(0):   %52:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(1): Data Latency=4 Reg=%52
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %53:gpr64 = UBFMXri %52:gpr64, 62, 61, debug-location !689; cg.c:624:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(0): Data Latency=4 Reg=%52
  Successors:
    SU(7): Data Latency=1 Reg=%53
    SU(2): Data Latency=1 Reg=%53
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %55:gpr32common = LDRWroX %36:gpr64sp, %53:gpr64, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(1): Data Latency=1 Reg=%53
  Successors:
    SU(3): Data Latency=4 Reg=%55
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %56:gpr32common = SUBWri %55:gpr32common, 1, 0, debug-location !690; cg.c:624:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 17
  Predecessors:
    SU(2): Data Latency=4 Reg=%55
  Successors:
    SU(7): Data Latency=1 Reg=%56
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %57:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(6): Data Latency=4 Reg=%57
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %58:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(6): Data Latency=4 Reg=%58
    SU(14): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %62:gpr64common = MADDXrrr %58:gpr64, %60:gpr64, %57:gpr64, debug-location !691; cg.c:624:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(5): Data Latency=4 Reg=%58
    SU(4): Data Latency=4 Reg=%57
  Successors:
    SU(7): Data Latency=1 Reg=%62
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   STRWroX %56:gpr32common, %62:gpr64common, %53:gpr64, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  # preds left       : 7
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 16
  Predecessors:
    SU(3): Data Latency=1 Reg=%56
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(6): Data Latency=1 Reg=%62
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=%53
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(15): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(8):   %63:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 15
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%63
    SU(17): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %64:gpr64 = UBFMXri %63:gpr64, 61, 60, debug-location !696; cg.c:625:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 11
  Predecessors:
    SU(8): Data Latency=4 Reg=%63
  Successors:
    SU(14): Data Latency=1 Reg=%64
    SU(10): Data Latency=1 Reg=%64
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %66:fpr64 = LDRDroX %35:gpr64sp, %64:gpr64, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 10
  Predecessors:
    SU(9): Data Latency=1 Reg=%64
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%66
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(11):   %67:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%67
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %68:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%68
    SU(14): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   %72:gpr64common = MADDXrrr %68:gpr64, %70:gpr64, %67:gpr64, debug-location !697; cg.c:625:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(12): Data Latency=4 Reg=%68
    SU(11): Data Latency=4 Reg=%67
  Successors:
    SU(14): Data Latency=1 Reg=%72
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   STRDroX %66:fpr64, %72:gpr64common, %64:gpr64, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 6
  Predecessors:
    SU(10): Data Latency=4 Reg=%66
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(13): Data Latency=1 Reg=%72
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=1 Reg=%64
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(15):   %73:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !701 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 5
  Predecessors:
    SU(14): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
  Successors:
    SU(16): Data Latency=4 Reg=%73
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !701; cg.c:623:43
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 1
  Predecessors:
    SU(15): Data Latency=4 Reg=%73
  Successors:
    SU(17): Data Latency=1 Reg=%74
  Pressure Diff      : 
  Single Issue       : false;
SU(17):   STRWui %74:gpr32common, %stack.14.ivelt, 0, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 0
  Predecessors:
    SU(16): Data Latency=1 Reg=%74
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.5, debug-location !702; cg.c:623:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 26
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Pick Bot ONLY1     
Scheduling SU(17) STRWui %74:gpr32common, %stack.14.ivelt, 0, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43
Bottom Pressure:
GPR32=5
  LiveReg: %74
  UpdateRegP: SU(17) STRWui %74:gpr32common, %stack.14.ivelt, 0, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43
              to 
  Ready @0c
  BotQ.A TopLatency SU(17) 26c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Pick Bot ONLY1     
Scheduling SU(16) %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !701; cg.c:623:43
Bottom Pressure:
GPR32=5
  LiveReg: %73
  UpdateRegP: SU(16) %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !701; cg.c:623:43
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(16) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 15 
Pick Bot ONLY1     
Scheduling SU(15) %73:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !701 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
Bottom Pressure:
GPR32=4
  Ready @5c
  BotQ.A BotLatency SU(15) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) STRDroX %66:fpr64, %72:gpr64common, %64:gpr64, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
Bottom Pressure:
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %66
  UpdateRegP: SU(14) STRDroX %66:fpr64, %72:gpr64common, %64:gpr64, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to GPR32 2
  LiveReg: %72
  UpdateRegP: SU(14) STRDroX %66:fpr64, %72:gpr64common, %64:gpr64, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to GPR32 1
  LiveReg: %64
  UpdateRegP: SU(10) %66:fpr64 = LDRDroX %35:gpr64sp, %64:gpr64, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(14) STRDroX %66:fpr64, %72:gpr64common, %64:gpr64, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
              to 
  Ready @6c
  BotQ.A BotLatency SU(14) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) %72:gpr64common = MADDXrrr %68:gpr64, %70:gpr64, %67:gpr64, debug-location !697; cg.c:625:13
Bottom Pressure:
FPR8=1
GPR32=7
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %68
  UpdateRegP: SU(13) %72:gpr64common = MADDXrrr %68:gpr64, %70:gpr64, %67:gpr64, debug-location !697; cg.c:625:13
              to 
  LiveReg: %67
  UpdateRegP: SU(13) %72:gpr64common = MADDXrrr %68:gpr64, %70:gpr64, %67:gpr64, debug-location !697; cg.c:625:13
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(13) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 11 12 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %66:fpr64 = LDRDroX %35:gpr64sp, %64:gpr64, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
Bottom Pressure:
GPR32=7
  Ready @10c
  BotQ.A BotLatency SU(10) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 12 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
BotQ.A RemLatency SU(9) 15c
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %68:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
Bottom Pressure:
GPR32=6
  Ready @11c
  BotQ.A BotLatency SU(12) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 11 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
BotQ.A RemLatency SU(9) 15c
  BotQ.A RemainingLatency 15 + 12c > CritPath 26
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %64:gpr64 = UBFMXri %63:gpr64, 61, 60, debug-location !696; cg.c:625:35
Bottom Pressure:
GPR32=6
  LiveReg: %63
  UpdateRegP: SU(9) %64:gpr64 = UBFMXri %63:gpr64, 61, 60, debug-location !696; cg.c:625:35
              to GPR32 -1
  Ready @12c
  BotQ.A TopLatency SU(9) 15c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %67:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
Bottom Pressure:
GPR32=5
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %63:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
Bottom Pressure:
GPR32=4
  Ready @16c
  BotQ.A BotLatency SU(8) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWroX %56:gpr32common, %62:gpr64common, %53:gpr64, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
Bottom Pressure:
GPR32=7
  LiveReg: %56
  UpdateRegP: SU(7) STRWroX %56:gpr32common, %62:gpr64common, %53:gpr64, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to GPR32 2
  LiveReg: %62
  UpdateRegP: SU(7) STRWroX %56:gpr32common, %62:gpr64common, %53:gpr64, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to GPR32 1
  LiveReg: %53
  UpdateRegP: SU(2) %55:gpr32common = LDRWroX %36:gpr64sp, %53:gpr64, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
              to GPR32 -1
  UpdateRegP: SU(7) STRWroX %56:gpr32common, %62:gpr64common, %53:gpr64, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
              to 
  Ready @17c
  BotQ.A BotLatency SU(7) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 11
  Executed: 18c
  Critical: 11c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
BotQ.A RemLatency SU(3) 9c
  BotQ.A RemainingLatency 9 + 18c > CritPath 26
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) %56:gpr32common = SUBWri %55:gpr32common, 1, 0, debug-location !690; cg.c:624:46
Bottom Pressure:
GPR32=7
  LiveReg: %55
  UpdateRegP: SU(3) %56:gpr32common = SUBWri %55:gpr32common, 1, 0, debug-location !690; cg.c:624:46
              to GPR32 -1
  Ready @18c
  BotQ.A BotLatency SU(3) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 12
  Executed: 19c
  Critical: 12c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %62:gpr64common = MADDXrrr %58:gpr64, %60:gpr64, %57:gpr64, debug-location !691; cg.c:624:13
Bottom Pressure:
GPR32=8
  LiveReg: %58
  UpdateRegP: SU(6) %62:gpr64common = MADDXrrr %58:gpr64, %60:gpr64, %57:gpr64, debug-location !691; cg.c:624:13
              to 
  LiveReg: %57
  UpdateRegP: SU(6) %62:gpr64common = MADDXrrr %58:gpr64, %60:gpr64, %57:gpr64, debug-location !691; cg.c:624:13
              to GPR32 -1
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 13
  Executed: 20c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 22 BotQ.A
Queue BotQ.P: 4 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %55:gpr32common = LDRWroX %36:gpr64sp, %53:gpr64, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
Bottom Pressure:
GPR32=7
  Ready @22c
  BotQ.A BotLatency SU(2) 21c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 14
  Executed: 23c
  Critical: 14c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 23c > CritPath 26
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) %53:gpr64 = UBFMXri %52:gpr64, 62, 61, debug-location !689; cg.c:624:35
Bottom Pressure:
GPR32=7
  LiveReg: %52
  UpdateRegP: SU(1) %53:gpr64 = UBFMXri %52:gpr64, 62, 61, debug-location !689; cg.c:624:35
              to GPR32 -1
  Ready @23c
  BotQ.A BotLatency SU(1) 22c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 15
  Executed: 24c
  Critical: 15c, 15 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 4 5 
  BotQ.A RemainingLatency 3 + 24c > CritPath 26
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %58:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
Bottom Pressure:
GPR32=6
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 16
  Executed: 25c
  Critical: 16c, 16 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %57:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
Bottom Pressure:
GPR32=5
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 17
  Executed: 26c
  Critical: 17c, 17 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 27 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %52:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
Bottom Pressure:
GPR32=4
  Ready @27c
  BotQ.A BotLatency SU(0) 26c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 18
  Executed: 28c
  Critical: 18c, 18 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %52:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
SU(4):   %57:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
SU(5):   %58:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
SU(1):   %53:gpr64 = UBFMXri %52:gpr64, 62, 61, debug-location !689; cg.c:624:35
SU(2):   %55:gpr32common = LDRWroX %36:gpr64sp, %53:gpr64, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
SU(6):   %62:gpr64common = MADDXrrr %58:gpr64, %60:gpr64, %57:gpr64, debug-location !691; cg.c:624:13
SU(3):   %56:gpr32common = SUBWri %55:gpr32common, 1, 0, debug-location !690; cg.c:624:46
SU(7):   STRWroX %56:gpr32common, %62:gpr64common, %53:gpr64, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
SU(8):   %63:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
SU(11):   %67:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
SU(9):   %64:gpr64 = UBFMXri %63:gpr64, 61, 60, debug-location !696; cg.c:625:35
SU(12):   %68:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
SU(10):   %66:fpr64 = LDRDroX %35:gpr64sp, %64:gpr64, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
SU(13):   %72:gpr64common = MADDXrrr %68:gpr64, %70:gpr64, %67:gpr64, debug-location !697; cg.c:625:13
SU(14):   STRDroX %66:fpr64, %72:gpr64common, %64:gpr64, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
SU(15):   %73:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !701 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
SU(16):   %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !701; cg.c:623:43
SU(17):   STRWui %74:gpr32common, %stack.14.ivelt, 0, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43

********** MI Scheduling **********
makea:%bb.7 for.inc20
  From: %50:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
    To: B %bb.3, debug-location !706; cg.c:617:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %50:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%50
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %51:gpr32common = nsw ADDWri %50:gpr32common, 1, 0, debug-location !705; cg.c:617:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%50
  Successors:
    SU(2): Data Latency=1 Reg=%51
  Single Issue       : false;
SU(2):   STRWui %51:gpr32common, %stack.13.iouter, 0, debug-location !705 :: (store 4 into %ir.iouter); cg.c:617:40
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%51
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.3, debug-location !706; cg.c:617:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %51:gpr32common, %stack.13.iouter, 0, debug-location !705 :: (store 4 into %ir.iouter); cg.c:617:40
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %51:gpr32common = nsw ADDWri %50:gpr32common, 1, 0, debug-location !705; cg.c:617:40
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %50:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %50:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
SU(1):   %51:gpr32common = nsw ADDWri %50:gpr32common, 1, 0, debug-location !705; cg.c:617:40
SU(2):   STRWui %51:gpr32common, %stack.13.iouter, 0, debug-location !705 :: (store 4 into %ir.iouter); cg.c:617:40

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: STRXui %25:gpr64, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
    To: BL @sparse, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !720; cg.c:633:5
 RegionInstrs: 18
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=2
GPR32=17
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %19 %18 %17 %16 %15 %20 %21 %22 %23 %24 %25 
Live Out: %19 %18 %17 %16 %15 %20 %21 %22 %23 %24 %25 
Live Thru: GPR32=11
  LiveReg: %19
  UpdateRegP: SU(14) $w4 = COPY %19:gpr32, debug-location !720; cg.c:633:5
              to GPR32 -1
  LiveReg: %18
  UpdateRegP: SU(13) $w3 = COPY %18:gpr32, debug-location !720; cg.c:633:5
              to GPR32 -1
  LiveReg: %17
  UpdateRegP: SU(12) $x2 = COPY %17:gpr64, debug-location !720; cg.c:633:5
              to GPR32 -1
  LiveReg: %16
  UpdateRegP: SU(11) $x1 = COPY %16:gpr64, debug-location !720; cg.c:633:5
              to GPR32 -1
  LiveReg: %15
  UpdateRegP: SU(10) $x0 = COPY %15:gpr64, debug-location !720; cg.c:633:5
              to GPR32 -1
  LiveReg: %20
  UpdateRegP: SU(5) STRXui %20:gpr64, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5
              to 
  LiveReg: %21
  UpdateRegP: SU(4) STRXui %21:gpr64, $sp, 1, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
              to 
  LiveReg: %22
  UpdateRegP: SU(3) STRXui %22:gpr64, $sp, 2, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
              to 
  LiveReg: %23
  UpdateRegP: SU(2) STRWui %23:gpr32, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
              to 
  LiveReg: %24
  UpdateRegP: SU(1) STRWui %24:gpr32, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
              to 
  LiveReg: %25
  UpdateRegP: SU(0) STRXui %25:gpr64, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
              to 
Top Pressure:
GPR32=11
Bottom Pressure:
FPR8=2
GPR32=17
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
GPR32 Limit 15 Actual 17
Excess PSets: GPR32 
Cluster ld/st SU(5) - SU(4)
SU(0):   STRXui %25:gpr64, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   STRWui %24:gpr32, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   STRWui %23:gpr32, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   STRXui %22:gpr64, $sp, 2, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   STRXui %21:gpr64, $sp, 1, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRXui %20:gpr64, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5
  # preds left       : 0
  # succs left       : 0
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Ord  Latency=0 Cluster
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %27:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=1 Reg=%27
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(7):   %28:fpr64 = LDRDui %27:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%27
  Successors:
    SU(16): Data Latency=4 Reg=%28
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %29:gpr64temp = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=1 Reg=%29
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(9):   %30:fpr64 = LDRDui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(8): Data Latency=1 Reg=%29
  Successors:
    SU(17): Data Latency=4 Reg=%30
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   $x0 = COPY %15:gpr64, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   $x1 = COPY %16:gpr64, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   $x2 = COPY %17:gpr64, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   $w3 = COPY %18:gpr32, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   $w4 = COPY %19:gpr32, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   $w5 = MOVi32imm 13, debug-location !720; cg.c:633:5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   $d0 = COPY %28:fpr64, debug-location !720; cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=%28
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : ZPR_3b -1
  Single Issue       : false;
SU(17):   $d1 = COPY %30:fpr64, debug-location !720; cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(9): Data Latency=4 Reg=%30
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : ZPR_3b -1
  Single Issue       : false;
ExitSU:   BL @sparse, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !720; cg.c:633:5
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(17): Ord  Latency=0 Artificial
    SU(16): Ord  Latency=0 Artificial
    SU(15): Ord  Latency=1 Artificial
    SU(14): Ord  Latency=0 Artificial
    SU(13): Ord  Latency=0 Artificial
    SU(12): Ord  Latency=0 Artificial
    SU(11): Ord  Latency=0 Artificial
    SU(10): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 
Queue BotQ.A: 5 4 3 2 1 0 17 16 14 13 12 11 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 10 11 12 13 14 15 
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) WEAK                               
  Cand SU(17) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(17) $d1 = COPY %30:fpr64, debug-location !720; cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=17
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %30
  UpdateRegP: SU(17) $d1 = COPY %30:fpr64, debug-location !720; cg.c:633:5
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(17) 5c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 9 
Queue BotQ.A: 5 4 3 2 1 0 10 16 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 10 11 12 13 14 15 
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) WEAK                               
  Cand SU(10) PHYS-REG                           
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(16) $d0 = COPY %28:fpr64, debug-location !720; cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=17
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %28
  UpdateRegP: SU(16) $d0 = COPY %28:fpr64, debug-location !720; cg.c:633:5
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 9 7 
Queue BotQ.A: 5 4 3 2 1 0 10 11 14 13 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 10 11 12 13 14 15 
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) WEAK                               
  Cand SU(10) PHYS-REG                           
  Cand SU(11) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(14) $w4 = COPY %19:gpr32, debug-location !720; cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=16
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 17 > 15(+ 11 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 9 7 
Queue BotQ.A: 5 4 3 2 1 0 10 11 12 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 10 11 12 13 15 
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) WEAK                               
  Cand SU(10) PHYS-REG                           
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(13) $w3 = COPY %18:gpr32, debug-location !720; cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=15
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 17 > 15(+ 11 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 9 7 
Queue BotQ.A: 5 4 3 2 1 0 10 11 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 10 11 12 15 
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) WEAK                               
  Cand SU(10) PHYS-REG                           
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(12) $x2 = COPY %17:gpr64, debug-location !720; cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=14
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 17 > 15(+ 11 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 9 7 
Queue BotQ.A: 5 4 3 2 1 0 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 10 11 15 
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) WEAK                               
  Cand SU(10) PHYS-REG                           
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(11) $x1 = COPY %16:gpr64, debug-location !720; cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=13
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 17 > 15(+ 11 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 9 7 
Queue BotQ.A: 5 4 3 2 1 0 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 10 15 
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) WEAK                               
  Cand SU(10) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(10) $x0 = COPY %15:gpr64, debug-location !720; cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 17 > 15(+ 11 livethru)
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 15 9 7 
Queue BotQ.A: 5 4 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 8 15 
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(4) WEAK                               
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot WEAK      
Scheduling SU(4) STRXui %21:gpr64, $sp, 1, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=12
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 9 
Queue BotQ.A: 5 0 3 2 1 15 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 15 5 6 8 
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(15) PHYS-REG                           
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot PHYS-REG  
Scheduling SU(15) $w5 = MOVi32imm 13, debug-location !720; cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  GPR32: 17 > 15(+ 11 livethru)
  Ready @1c
  BotQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 9 
Queue BotQ.A: 5 0 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 8 5 6 
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot CLUSTER   
Scheduling SU(5) STRXui %20:gpr64, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 9 
Queue BotQ.A: 1 0 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 8 6 
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) STRXui %22:gpr64, $sp, 2, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
Bottom Pressure:
FPR8=2
GPR32=11
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 7 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 8 
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %30:fpr64 = LDRDui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=12
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR32: 17 > 15(+ 11 livethru)
  LiveReg: %29
  UpdateRegP: SU(9) %30:fpr64 = LDRDui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A BotLatency SU(9) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 7 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 8 
BotQ.A RemLatency SU(7) 1c
  BotQ.A RemainingLatency 1 + 5c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %29:gpr64temp = ADRP target-flags(aarch64-page) %const.1
Bottom Pressure:
FPR8=1
GPR32=11
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  GPR32: 17 > 15(+ 11 livethru)
  Ready @5c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  BotQ.A RemainingLatency 0 + 6c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(7) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %28:fpr64 = LDRDui %27:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
GPR32=12
  GPR32: 17 > 15(+ 11 livethru)
  LiveReg: %27
  UpdateRegP: SU(7) %28:fpr64 = LDRDui %27:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A TopLatency SU(7) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %27:gpr64temp = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
GPR32=11
  GPR32: 17 > 15(+ 11 livethru)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 8c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui %23:gpr32, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
Bottom Pressure:
GPR32=11
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 9c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRWui %24:gpr32, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
Bottom Pressure:
GPR32=11
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui %25:gpr64, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
Bottom Pressure:
GPR32=11
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   STRXui %25:gpr64, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
SU(1):   STRWui %24:gpr32, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
SU(2):   STRWui %23:gpr32, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
SU(6):   %27:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(7):   %28:fpr64 = LDRDui %27:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(8):   %29:gpr64temp = ADRP target-flags(aarch64-page) %const.1
SU(9):   %30:fpr64 = LDRDui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(3):   STRXui %22:gpr64, $sp, 2, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
SU(5):   STRXui %20:gpr64, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5
SU(15):   $w5 = MOVi32imm 13, debug-location !720; cg.c:633:5
SU(4):   STRXui %21:gpr64, $sp, 1, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
SU(10):   $x0 = COPY %15:gpr64, debug-location !720; cg.c:633:5
SU(11):   $x1 = COPY %16:gpr64, debug-location !720; cg.c:633:5
SU(12):   $x2 = COPY %17:gpr64, debug-location !720; cg.c:633:5
SU(13):   $w3 = COPY %18:gpr32, debug-location !720; cg.c:633:5
SU(14):   $w4 = COPY %19:gpr32, debug-location !720; cg.c:633:5
SU(16):   $d0 = COPY %28:fpr64, debug-location !720; cg.c:633:5
SU(17):   $d1 = COPY %30:fpr64, debug-location !720; cg.c:633:5

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: %15:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
    To: ADJCALLSTACKDOWN 48, 0, implicit-def dead $sp, implicit $sp, debug-location !720; cg.c:633:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=11
Live In: 
Live Out: %25 %24 %23 %22 %21 %20 %19 %18 %17 %16 %15 
Live Thru: 
  LiveReg: %25
  LiveReg: %24
  LiveReg: %23
  LiveReg: %22
  LiveReg: %21
  LiveReg: %20
  LiveReg: %19
  LiveReg: %18
  LiveReg: %17
  LiveReg: %16
  LiveReg: %15
Top Pressure:

Bottom Pressure:
GPR32=11
Excess PSets: 
SU(0):   %15:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %16:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %17:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %19:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %20:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %21:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %22:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %23:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %24:gpr32 = LDRWui %fixed-stack.6, 0, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   %25:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 48, 0, implicit-def dead $sp, implicit $sp, debug-location !720; cg.c:633:5
  # preds left       : 11
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(10): Ord  Latency=3 Artificial
    SU(9): Ord  Latency=3 Artificial
    SU(8): Ord  Latency=3 Artificial
    SU(7): Ord  Latency=3 Artificial
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
    SU(4): Ord  Latency=3 Artificial
    SU(3): Ord  Latency=3 Artificial
    SU(2): Ord  Latency=3 Artificial
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 10 0 1 2 3 4 5 6 7 8 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 10 
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) %25:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
Bottom Pressure:
GPR32=10
  Ready @3c
  BotQ.A BotLatency SU(10) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 0 1 2 3 4 5 6 7 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 9 
  BotQ.A RemainingLatency 0 + 4c > CritPath 3
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) %24:gpr32 = LDRWui %fixed-stack.6, 0, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
Bottom Pressure:
GPR32=9
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 0 1 2 3 4 5 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 8 
  BotQ.A RemainingLatency 0 + 5c > CritPath 3
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %23:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
Bottom Pressure:
GPR32=8
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 0 1 2 3 4 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 
  BotQ.A RemainingLatency 0 + 6c > CritPath 3
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %22:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
Bottom Pressure:
GPR32=7
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 0 1 2 3 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  BotQ.A RemainingLatency 0 + 7c > CritPath 3
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %21:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
Bottom Pressure:
GPR32=6
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 0 1 2 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  BotQ.A RemainingLatency 0 + 8c > CritPath 3
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %20:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
Bottom Pressure:
GPR32=5
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 0 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  BotQ.A RemainingLatency 0 + 9c > CritPath 3
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %19:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
Bottom Pressure:
GPR32=4
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  BotQ.A RemainingLatency 0 + 10c > CritPath 3
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
Bottom Pressure:
GPR32=3
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 3
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %17:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
Bottom Pressure:
GPR32=2
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 12c > CritPath 3
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %16:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
Bottom Pressure:
GPR32=1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %15:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
Bottom Pressure:

  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %15:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
SU(1):   %16:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
SU(2):   %17:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
SU(3):   %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
SU(4):   %19:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
SU(5):   %20:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
SU(6):   %21:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
SU(7):   %22:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
SU(8):   %23:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
SU(9):   %24:gpr32 = LDRWui %fixed-stack.6, 0, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
SU(10):   %25:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21

********** INTERVALS **********
WSP [736r,736d:9)[848r,848d:8)[856r,856d:7)[864r,864d:6)[896r,896d:5)[960r,960d:4)[1072r,1072d:3)[1088r,1088d:2)[1104r,1104d:1)[1136r,1136d:0)[1936r,1936d:14)[2288r,2288d:13)[2296r,2296d:12)[2304r,2304d:11)[2336r,2336d:10)  0@1136r 1@1104r 2@1088r 3@1072r 4@960r 5@896r 6@864r 7@856r 8@848r 9@736r 10@2336r 11@2304r 12@2296r 13@2288r 14@1936r
W0 [0B,96r:0)[832r,848r:2)[1032r,1072r:1)[2232r,2288r:3)  0@0B-phi 1@1032r 2@832r 3@2232r
W1 [0B,80r:0)[824r,848r:1)[992r,1072r:2)[2240r,2288r:3)  0@0B-phi 1@824r 2@992r 3@2240r
W2 [0B,64r:0)[840r,848r:1)[1008r,1072r:2)[2248r,2288r:3)  0@0B-phi 1@840r 2@1008r 3@2248r
W3 [0B,48r:0)[800r,848r:3)[1024r,1072r:2)[2256r,2288r:1)  0@0B-phi 1@2256r 2@1024r 3@800r
W4 [0B,32r:0)[816r,848r:3)[1040r,1072r:1)[2264r,2288r:2)  0@0B-phi 1@1040r 2@2264r 3@816r
W5 [0B,16r:0)[2224r,2288r:1)  0@0B-phi 1@2224r
%0 [96r,112r:0)  0@96r weight:0.000000e+00
%1 [80r,128r:0)  0@80r weight:0.000000e+00
%2 [64r,144r:0)  0@64r weight:0.000000e+00
%3 [48r,160r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,192r:0)  0@16r weight:0.000000e+00
%6 [208r,224r:0)  0@208r weight:0.000000e+00
%7 [256r,312r:0)  0@256r weight:0.000000e+00
%8 [312r,328r:0)  0@312r weight:0.000000e+00
%9 [304r,320r:0)  0@304r weight:0.000000e+00
%12 [592r,624r:0)  0@592r weight:0.000000e+00
%13 [608r,624r:0)  0@608r weight:0.000000e+00
%15 [1760r,2320r:0)  0@1760r weight:0.000000e+00
%16 [1776r,2320r:0)  0@1776r weight:0.000000e+00
%17 [1792r,2320r:0)  0@1792r weight:0.000000e+00
%18 [1808r,2320r:0)  0@1808r weight:0.000000e+00
%19 [1824r,2320r:0)  0@1824r weight:0.000000e+00
%20 [1840r,2320r:0)  0@1840r weight:0.000000e+00
%21 [1856r,2320r:0)  0@1856r weight:0.000000e+00
%22 [1872r,2320r:0)  0@1872r weight:0.000000e+00
%23 [1888r,2320r:0)  0@1888r weight:0.000000e+00
%24 [1904r,2320r:0)  0@1904r weight:0.000000e+00
%25 [1920r,2320r:0)  0@1920r weight:0.000000e+00
%27 [2064r,2080r:0)  0@2064r weight:0.000000e+00
%28 [2080r,2272r:0)  0@2080r weight:0.000000e+00
%29 [2096r,2112r:0)  0@2096r weight:0.000000e+00
%30 [2112r,2280r:0)  0@2112r weight:0.000000e+00
%32 [416r,1744B:0)  0@416r weight:0.000000e+00
%33 [704r,880r:0)  0@704r weight:0.000000e+00
%34 [720r,880r:0)  0@720r weight:0.000000e+00
%35 [432r,1744B:0)  0@432r weight:0.000000e+00
%36 [488r,1744B:0)  0@488r weight:0.000000e+00
%37 [936r,1120r:0)  0@936r weight:0.000000e+00
%38 [928r,944r:0)  0@928r weight:0.000000e+00
%39 [944r,1120r:0)  0@944r weight:0.000000e+00
%40 [464r,480r:0)  0@464r weight:0.000000e+00
%41 [480r,1744B:0)  0@480r weight:0.000000e+00
%43 [1152r,1200r:0)  0@1152r weight:0.000000e+00
%44 [1168r,1200r:0)  0@1168r weight:0.000000e+00
%45 [1184r,1200r:0)  0@1184r weight:0.000000e+00
%47 [1264r,1296r:0)  0@1264r weight:0.000000e+00
%48 [1280r,1296r:0)  0@1280r weight:0.000000e+00
%50 [1680r,1696r:0)  0@1680r weight:0.000000e+00
%51 [1696r,1712r:0)  0@1696r weight:0.000000e+00
%52 [1360r,1444r:0)  0@1360r weight:0.000000e+00
%53 [1444r,1472r:0)  0@1444r weight:0.000000e+00
%55 [1448r,1464r:0)  0@1448r weight:0.000000e+00
%56 [1464r,1472r:0)  0@1464r weight:0.000000e+00
%57 [1424r,1456r:0)  0@1424r weight:0.000000e+00
%58 [1440r,1456r:0)  0@1440r weight:0.000000e+00
%60 [512r,1744B:0)  0@512r weight:0.000000e+00
%62 [1456r,1472r:0)  0@1456r weight:0.000000e+00
%63 [1488r,1544r:0)  0@1488r weight:0.000000e+00
%64 [1544r,1584r:0)  0@1544r weight:0.000000e+00
%66 [1560r,1584r:0)  0@1560r weight:0.000000e+00
%67 [1536r,1568r:0)  0@1536r weight:0.000000e+00
%68 [1552r,1568r:0)  0@1552r weight:0.000000e+00
%70 [544r,1744B:0)  0@544r weight:0.000000e+00
%72 [1568r,1584r:0)  0@1568r weight:0.000000e+00
%73 [1600r,1616r:0)  0@1600r weight:0.000000e+00
%74 [1616r,1632r:0)  0@1616r weight:0.000000e+00
RegMasks: 848r 1072r 2288r
********** MACHINEINSTRS **********
# Machine code for function makea: NoPHIs, TracksLiveness
Frame Objects:
  fi#-7: size=8, align=16, fixed, at location [SP+48]
  fi#-6: size=8, align=8, fixed, at location [SP+40]
  fi#-5: size=8, align=16, fixed, at location [SP+32]
  fi#-4: size=8, align=8, fixed, at location [SP+24]
  fi#-3: size=4, align=16, fixed, at location [SP+16]
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=4, align=4, at location [SP]
  fi#17: size=56, align=16, at location [SP]
  fi#18: size=112, align=16, at location [SP]
Constant Pool:
  cp#0: 1.000000e-01, align=8
  cp#1: 6.000000e+01, align=8
  cp#2: 5.000000e-01, align=8
Function Live Ins: $w0 in %0, $w1 in %1, $x2 in %2, $x3 in %3, $x4 in %4, $w5 in %5

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0, $w1, $x2, $x3, $x4, $w5
16B	  %5:gpr32 = COPY $w5
32B	  %4:gpr64 = COPY $x4
48B	  %3:gpr64 = COPY $x3
64B	  %2:gpr64 = COPY $x2
80B	  %1:gpr32 = COPY $w1
96B	  %0:gpr32 = COPY $w0
112B	  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
128B	  STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
144B	  STRXui %2:gpr64, %stack.2.a.addr, 0 :: (store 8 into %ir.a.addr)
160B	  STRXui %3:gpr64, %stack.3.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
176B	  STRXui %4:gpr64, %stack.4.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
192B	  STRWui %5:gpr32, %stack.5.firstrow.addr, 0 :: (store 4 into %ir.firstrow.addr)
208B	  %6:gpr32 = MOVi32imm 1
224B	  STRWui %6:gpr32, %stack.16.nn1, 0, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9

240B	bb.1.do.body:
	; predecessors: %bb.0, %bb.1
	  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

256B	  %7:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
304B	  %9:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !648 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
312B	  %8:gpr32 = UBFMWri %7:gpr32, 31, 30, debug-location !645; cg.c:611:17
320B	  dead $wzr = SUBSWrr %8:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !650; cg.c:612:5
328B	  STRWui %8:gpr32, %stack.16.nn1, 0, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
336B	  Bcc 11, %bb.1, implicit killed $nzcv, debug-location !650; cg.c:612:5
352B	  B %bb.2, debug-location !650; cg.c:612:5

368B	bb.2.do.end:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

400B	  STRWui $wzr, %stack.13.iouter, 0, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
416B	  %32:gpr32 = MOVi32imm 13
432B	  %35:gpr64sp = ADDXri %stack.18.vc, 0, 0
464B	  %40:gpr64temp = ADRP target-flags(aarch64-page) %const.2
480B	  %41:fpr64 = LDRDui %40:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
488B	  %36:gpr64sp = ADDXri %stack.17.ivc, 0, 0
512B	  undef %60.sub_32:gpr64 = MOVi32imm 56
544B	  undef %70.sub_32:gpr64 = MOVi32imm 112

576B	bb.3.for.cond:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)

592B	  %12:gpr32 = LDRWui %stack.13.iouter, 0, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
608B	  %13:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !658 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
624B	  dead $wzr = SUBSWrr %12:gpr32, %13:gpr32, implicit-def $nzcv, debug-location !660; cg.c:617:5
640B	  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !660; cg.c:617:5
656B	  B %bb.4, debug-location !660; cg.c:617:5

672B	bb.4.for.body:
	; predecessors: %bb.3
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

704B	  %33:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
720B	  %34:gpr32 = LDRWui %stack.16.nn1, 0, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
728B	  STRWui %32:gpr32, %stack.15.nzv, 0, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
736B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !668; cg.c:619:9
800B	  $x3 = ADDXri %stack.18.vc, 0, 0, debug-location !668; cg.c:619:9
816B	  $x4 = ADDXri %stack.17.ivc, 0, 0, debug-location !668; cg.c:619:9
824B	  $w1 = MOVi32imm 13, debug-location !668; cg.c:619:9
832B	  $w0 = COPY %33:gpr32, debug-location !668; cg.c:619:9
840B	  $w2 = COPY %34:gpr32, debug-location !668; cg.c:619:9
848B	  BL @sprnvc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !668; cg.c:619:9
856B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !668; cg.c:619:9
864B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !669; cg.c:620:16
880B	  PCN_STACKMAP 0, 0, 0, %stack.2.a.addr, 0, 0, %fixed-stack.2, 0, 0, %fixed-stack.1, 0, 0, %fixed-stack.3, 0, 0, %stack.18.vc, 0, 0, %stack.17.ivc, 0, 0, %stack.3.colidx.addr, 0, 0, %stack.5.firstrow.addr, 0, 0, %stack.13.iouter, 0, 0, %fixed-stack.0, 0, 0, %stack.17.ivc, 0, 0, %stack.14.ivelt, 0, 0, %fixed-stack.6, 0, 0, %stack.0.n.addr, 0, 0, %stack.16.nn1, 0, 0, %stack.1.nz.addr, 0, 0, %stack.15.nzv, 0, 0, %stack.4.rowstr.addr, 0, 0, %stack.18.vc, 0, %33:gpr32, %32:gpr32, %34:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !669 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16); cg.c:620:16
896B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !669; cg.c:620:16
928B	  %38:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
936B	  %37:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
944B	  %39:gpr32sp = nsw ADDWri %38:gpr32common, 1, 0, debug-location !673; cg.c:620:41
960B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !674; cg.c:620:9
992B	  $x1 = ADDXri %stack.18.vc, 0, 0, debug-location !674; cg.c:620:9
1008B	  $x2 = ADDXri %stack.17.ivc, 0, 0, debug-location !674; cg.c:620:9
1024B	  $x3 = ADDXri %stack.15.nzv, 0, 0, debug-location !674; cg.c:620:9
1032B	  $w0 = COPY %37:gpr32, debug-location !674; cg.c:620:9
1040B	  $w4 = COPY %39:gpr32sp, debug-location !674; cg.c:620:9
1056B	  $d0 = COPY %41:fpr64, debug-location !674; cg.c:620:9
1072B	  BL @vecset, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit killed $d0, implicit-def $sp, debug-location !674; cg.c:620:9
1088B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !674; cg.c:620:9
1104B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !675; cg.c:621:24
1120B	  PCN_STACKMAP 1, 0, 0, %stack.2.a.addr, 0, 0, %fixed-stack.2, 0, %39:gpr32sp, 0, %fixed-stack.1, 0, 0, %fixed-stack.3, 0, 0, %stack.18.vc, 0, 0, %stack.17.ivc, 0, 0, %stack.3.colidx.addr, 0, 0, %stack.5.firstrow.addr, 0, 0, %stack.13.iouter, 0, 0, %fixed-stack.0, 0, 0, %stack.17.ivc, 0, 0, %stack.14.ivelt, 0, 0, %fixed-stack.6, 0, 0, %stack.0.n.addr, 0, 0, %stack.16.nn1, 0, 0, %stack.1.nz.addr, 0, 0, %stack.15.nzv, 0, 0, %stack.4.rowstr.addr, 0, 0, %stack.18.vc, 0, %37:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !675 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16); cg.c:621:24
1136B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !675; cg.c:621:24
1152B	  %43:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
1168B	  %44:gpr64common = LDRXui %fixed-stack.3, 0, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
1184B	  %45:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
1200B	  STRWroX %43:gpr32, %44:gpr64common, %45:gpr64, 0, 1, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
1232B	  STRWui $wzr, %stack.14.ivelt, 0, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20

1248B	bb.5.for.cond5:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)

1264B	  %47:gpr32 = LDRWui %stack.14.ivelt, 0, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:25
1280B	  %48:gpr32 = LDRWui %stack.15.nzv, 0, debug-location !684 :: (dereferenceable load 4 from %ir.nzv); cg.c:623:33
1296B	  dead $wzr = SUBSWrr %47:gpr32, %48:gpr32, implicit-def $nzcv, debug-location !686; cg.c:623:9
1312B	  Bcc 10, %bb.7, implicit killed $nzcv, debug-location !686; cg.c:623:9
1328B	  B %bb.6, debug-location !686; cg.c:623:9

1344B	bb.6.for.body7:
	; predecessors: %bb.5
	  successors: %bb.5(0x80000000); %bb.5(100.00%)

1360B	  %52:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt); cg.c:624:39
1424B	  %57:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
1440B	  %58:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !692 :: (dereferenceable load 4 from %ir.iouter); cg.c:624:18
1444B	  %53:gpr64 = UBFMXri %52:gpr64, 62, 61, debug-location !689; cg.c:624:35
1448B	  %55:gpr32common = LDRWroX %36:gpr64sp, %53:gpr64, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
1456B	  %62:gpr64common = MADDXrrr %58:gpr64, %60:gpr64, %57:gpr64, debug-location !691; cg.c:624:13
1464B	  %56:gpr32common = SUBWri %55:gpr32common, 1, 0, debug-location !690; cg.c:624:46
1472B	  STRWroX %56:gpr32common, %62:gpr64common, %53:gpr64, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
1488B	  %63:gpr64 = LDRSWui %stack.14.ivelt, 0, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt); cg.c:625:38
1536B	  %67:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
1544B	  %64:gpr64 = UBFMXri %63:gpr64, 61, 60, debug-location !696; cg.c:625:35
1552B	  %68:gpr64 = LDRSWui %stack.13.iouter, 0, debug-location !698 :: (dereferenceable load 4 from %ir.iouter); cg.c:625:18
1560B	  %66:fpr64 = LDRDroX %35:gpr64sp, %64:gpr64, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
1568B	  %72:gpr64common = MADDXrrr %68:gpr64, %70:gpr64, %67:gpr64, debug-location !697; cg.c:625:13
1584B	  STRDroX %66:fpr64, %72:gpr64common, %64:gpr64, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
1600B	  %73:gpr32common = LDRWui %stack.14.ivelt, 0, debug-location !701 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
1616B	  %74:gpr32common = nsw ADDWri %73:gpr32common, 1, 0, debug-location !701; cg.c:623:43
1632B	  STRWui %74:gpr32common, %stack.14.ivelt, 0, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43
1648B	  B %bb.5, debug-location !702; cg.c:623:9

1664B	bb.7.for.inc20:
	; predecessors: %bb.5
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1680B	  %50:gpr32common = LDRWui %stack.13.iouter, 0, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
1696B	  %51:gpr32common = nsw ADDWri %50:gpr32common, 1, 0, debug-location !705; cg.c:617:40
1712B	  STRWui %51:gpr32common, %stack.13.iouter, 0, debug-location !705 :: (store 4 into %ir.iouter); cg.c:617:40
1728B	  B %bb.3, debug-location !706; cg.c:617:5

1744B	bb.8.for.end22:
	; predecessors: %bb.3

1760B	  %15:gpr64 = LDRXui %stack.2.a.addr, 0, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr); cg.c:633:12
1776B	  %16:gpr64 = LDRXui %stack.3.colidx.addr, 0, debug-location !710 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:15
1792B	  %17:gpr64 = LDRXui %stack.4.rowstr.addr, 0, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
1808B	  %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr); cg.c:633:31
1824B	  %19:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !713 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:633:34
1840B	  %20:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:633:46
1856B	  %21:gpr64 = LDRXui %fixed-stack.2, 0, debug-location !715 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:52
1872B	  %22:gpr64 = LDRXui %fixed-stack.1, 0, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:633:58
1888B	  %23:gpr32 = LDRWui %stack.5.firstrow.addr, 0, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
1904B	  %24:gpr32 = LDRWui %fixed-stack.6, 0, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
1920B	  %25:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !719 :: (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:634:21
1936B	  ADJCALLSTACKDOWN 48, 0, implicit-def dead $sp, implicit $sp, debug-location !720; cg.c:633:5
1968B	  STRXui %25:gpr64, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
1984B	  STRWui %24:gpr32, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
2000B	  STRWui %23:gpr32, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
2064B	  %27:gpr64temp = ADRP target-flags(aarch64-page) %const.0
2080B	  %28:fpr64 = LDRDui %27:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
2096B	  %29:gpr64temp = ADRP target-flags(aarch64-page) %const.1
2112B	  %30:fpr64 = LDRDui %29:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
2116B	  STRXui %22:gpr64, $sp, 2, debug-location !720 :: (store 8 into stack + 16); cg.c:633:5
2120B	  STRXui %20:gpr64, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5
2224B	  $w5 = MOVi32imm 13, debug-location !720; cg.c:633:5
2228B	  STRXui %21:gpr64, $sp, 1, debug-location !720 :: (store 8 into stack + 8); cg.c:633:5
2232B	  $x0 = COPY %15:gpr64, debug-location !720; cg.c:633:5
2240B	  $x1 = COPY %16:gpr64, debug-location !720; cg.c:633:5
2248B	  $x2 = COPY %17:gpr64, debug-location !720; cg.c:633:5
2256B	  $w3 = COPY %18:gpr32, debug-location !720; cg.c:633:5
2264B	  $w4 = COPY %19:gpr32, debug-location !720; cg.c:633:5
2272B	  $d0 = COPY %28:fpr64, debug-location !720; cg.c:633:5
2280B	  $d1 = COPY %30:fpr64, debug-location !720; cg.c:633:5
2288B	  BL @sparse, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit killed $d0, implicit killed $d1, implicit-def $sp, debug-location !720; cg.c:633:5
2296B	  ADJCALLSTACKUP 48, 0, implicit-def $sp, implicit $sp, debug-location !720; cg.c:633:5
2304B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !721; cg.c:635:1
2320B	  PCN_STACKMAP 2, 0, %15:gpr64, %16:gpr64, %17:gpr64, %18:gpr32, %19:gpr32, %20:gpr64, %21:gpr64, %22:gpr64, %23:gpr32, %24:gpr32, %25:gpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !721; cg.c:635:1
2336B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !721; cg.c:635:1
2352B	  RET_ReallyLR debug-location !721; cg.c:635:1

# End machine code for function makea.

Before post-MI-sched:
# Machine code for function makea: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-7: size=8, align=16, fixed, at location [SP+48]
  fi#-6: size=8, align=8, fixed, at location [SP+40]
  fi#-5: size=8, align=16, fixed, at location [SP+32]
  fi#-4: size=8, align=8, fixed, at location [SP+24]
  fi#-3: size=4, align=16, fixed, at location [SP+16]
  fi#-2: size=4, align=8, fixed, at location [SP+8]
  fi#-1: size=4, align=16, fixed, at location [SP]
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=4, align=4, at location [SP-48]
  fi#2: size=8, align=8, at location [SP-56]
  fi#3: size=8, align=8, at location [SP-64]
  fi#4: size=8, align=8, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-76]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: dead
  fi#13: size=4, align=4, at location [SP-80]
  fi#14: size=4, align=4, at location [SP-84]
  fi#15: size=4, align=4, at location [SP-88]
  fi#16: size=4, align=4, at location [SP-92]
  fi#17: size=56, align=16, at location [SP-160]
  fi#18: size=112, align=16, at location [SP-272]
  fi#19: size=8, align=8, at location [SP-280]
  fi#20: size=4, align=4, at location [SP-284]
  fi#21: size=8, align=8, at location [SP-296]
  fi#22: size=8, align=8, at location [SP-304]
  fi#23: size=8, align=8, at location [SP-312]
  fi#24: size=8, align=8, at location [SP-320]
  fi#25: size=8, align=8, at location [SP-328]
  fi#26: size=8, align=8, at location [SP-336]
  fi#27: size=8, align=8, at location [SP-344]
  fi#28: dead
  fi#29: dead
  fi#30: dead
  fi#31: dead
  fi#32: dead
  fi#33: size=8, align=8, at location [SP-40]
  fi#34: size=8, align=8, at location [SP-8]
  fi#35: size=8, align=8, at location [SP-16]
  fi#36: size=8, align=8, at location [SP-24]
  fi#37: size=8, align=8, at location [SP-32]
Constant Pool:
  cp#0: 1.000000e-01, align=8
  cp#1: 6.000000e+01, align=8
  cp#2: 5.000000e-01, align=8
Function Live Ins: $w0, $w1, $x2, $x3, $x4, $w5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $w1, $w5, $x2, $x3, $x4, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 400, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 46 :: (store 8 into %stack.37), (store 8 into %stack.36)
  frame-setup STPXi killed $fp, killed $lr, $sp, 48 :: (store 8 into %stack.35), (store 8 into %stack.34)
  $fp = frame-setup ADDXri $sp, 384, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  STPXi renamable $x3, renamable $x2, $fp, -6 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
  STURXi killed renamable $x4, $fp, -56 :: (store 8 into %ir.rowstr.addr)
  STURWi killed renamable $w5, $fp, -60 :: (store 4 into %ir.firstrow.addr)
  $w8 = MOVZWi 1, 0
  STURWi killed renamable $w8, $fp, -76, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9

bb.1.do.body:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x7c000000), %bb.2(0x04000000); %bb.1(96.88%), %bb.2(3.12%)

  renamable $w8 = LDURWi $fp, -76, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  renamable $w16 = LDURWi $fp, -28, debug-location !648 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  renamable $w8 = UBFMWri killed renamable $w8, 31, 30, debug-location !645; cg.c:611:17
  $wzr = SUBSWrs renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !650; cg.c:612:5
  STURWi killed renamable $w8, $fp, -76, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
  Bcc 11, %bb.1, implicit $nzcv, debug-location !650; cg.c:612:5

bb.2.do.end:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  STURWi $wzr, $fp, -64, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
  renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  STRDui killed renamable $d0, $sp, 13 :: (store 8 into %stack.21)
  $w19 = MOVZWi 56, 0, implicit-def $x19
  $w20 = MOVZWi 112, 0, implicit-def $x20

bb.3.for.cond:
; predecessors: %bb.2, %bb.7
  successors: %bb.4(0x7c000000), %bb.8(0x04000000); %bb.4(96.88%), %bb.8(3.12%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -64, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  renamable $w16 = LDURWi $fp, -28, debug-location !658 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !660; cg.c:617:5
  Bcc 10, %bb.8, implicit $nzcv, debug-location !660; cg.c:617:5

bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x19, $x20
  renamable $w0 = LDURWi $fp, -28, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  renamable $w2 = LDURWi $fp, -76, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  STPWi renamable $w2, renamable $w0, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
  $w8 = MOVZWi 13, 0
  STURWi killed renamable $w8, $fp, -72, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
  $x3 = ADDXri $sp, 128, 0, debug-location !668; cg.c:619:9
  $x4 = SUBXri $fp, 144, 0, debug-location !668; cg.c:619:9
  $w1 = MOVZWi 13, 0, debug-location !668; cg.c:619:9
  BL @sprnvc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !668; cg.c:619:9
  $w8 = MOVZWi 13, 0, debug-location !669; cg.c:620:16
  PCN_STACKMAP 0, 0, 0, $fp, -40, 0, $fp, 48, 0, $fp, 56, 0, $fp, 40, 0, $fp, -256, 0, $fp, -144, 0, $fp, -48, 0, $fp, -60, 0, $fp, -64, 0, $fp, 64, 0, $fp, -144, 0, $fp, -68, 0, $fp, 16, 0, $fp, -28, 0, $fp, -76, 0, $fp, -32, 0, $fp, -72, 0, $fp, -56, 0, $fp, -256, 1, 4, $fp, -264, killed renamable $w8, 1, 4, $fp, -268, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !669 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16), (load 4 from %stack.19), (load 4 from %stack.20); cg.c:620:16
  renamable $w8 = LDURWi $fp, -64, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  renamable $w0 = LDURWi $fp, -28, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  renamable $w4 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !673; cg.c:620:41
  STPWi renamable $w4, renamable $w0, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
  $x1 = ADDXri $sp, 128, 0, debug-location !674; cg.c:620:9
  $x2 = SUBXri $fp, 144, 0, debug-location !674; cg.c:620:9
  $x3 = SUBXri $fp, 72, 0, debug-location !674; cg.c:620:9
  $d0 = LDRDui $sp, 13 :: (load 8 from %stack.21)
  BL @vecset, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit $d0, implicit-def $sp, debug-location !674; cg.c:620:9
  $x1 = SUBXri $fp, 144, 0
  $x0 = ADDXri $sp, 128, 0
  PCN_STACKMAP 1, 0, 0, $fp, -40, 0, $fp, 48, 1, 4, $fp, -268, 0, $fp, 56, 0, $fp, 40, 0, $fp, -256, 0, $fp, -144, 0, $fp, -48, 0, $fp, -60, 0, $fp, -64, 0, $fp, 64, 0, $fp, -144, 0, $fp, -68, 0, $fp, 16, 0, $fp, -28, 0, $fp, -76, 0, $fp, -32, 0, $fp, -72, 0, $fp, -56, 0, $fp, -256, 1, 4, $fp, -264, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !675 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16), (load 4 from %stack.19), (load 4 from %stack.20); cg.c:621:24
  renamable $w8 = LDURWi $fp, -72, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  renamable $x16 = LDRXui $fp, 5, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  renamable $x17 = LDURSWi $fp, -64, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  STRWroX killed renamable $w8, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
  STURWi $wzr, $fp, -68, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20

bb.5.for.cond5:
; predecessors: %bb.4, %bb.6
  successors: %bb.6(0x7c000000), %bb.7(0x04000000); %bb.6(96.88%), %bb.7(3.12%)
  liveins: $x0, $x1, $x19, $x20
  renamable $w16, renamable $w8 = LDPWi $fp, -18, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !686; cg.c:623:9
  Bcc 10, %bb.7, implicit $nzcv, debug-location !686; cg.c:623:9

bb.6.for.body7:
; predecessors: %bb.5
  successors: %bb.5(0x80000000); %bb.5(100.00%)
  liveins: $x0, $x1, $x19, $x20
  renamable $x8, renamable $x17 = LDPSWi $fp, -17, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
  renamable $x16 = LDRXui $fp, 6, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  renamable $x8 = UBFMXri killed renamable $x8, 62, 61, debug-location !689; cg.c:624:35
  renamable $w18 = LDRWroX renamable $x1, renamable $x8, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  renamable $x16 = MADDXrrr killed renamable $x17, renamable $x19, killed renamable $x16, debug-location !691; cg.c:624:13
  renamable $w17 = SUBWri killed renamable $w18, 1, 0, debug-location !690; cg.c:624:46
  STRWroX killed renamable $w17, killed renamable $x16, killed renamable $x8, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  renamable $x8, renamable $x17 = LDPSWi $fp, -17, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:625:38
  renamable $x16 = LDRXui $fp, 7, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60, debug-location !696; cg.c:625:35
  renamable $d0 = LDRDroX renamable $x0, renamable $x8, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  renamable $x16 = MADDXrrr killed renamable $x17, renamable $x20, killed renamable $x16, debug-location !697; cg.c:625:13
  STRDroX killed renamable $d0, killed renamable $x16, killed renamable $x8, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  renamable $w8 = LDURWi $fp, -68, debug-location !701 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !701; cg.c:623:43
  STURWi killed renamable $w8, $fp, -68, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43
  B %bb.5

bb.7.for.inc20:
; predecessors: %bb.5
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x19, $x20
  renamable $w8 = LDURWi $fp, -64, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !705; cg.c:617:40
  STURWi killed renamable $w8, $fp, -64, debug-location !705 :: (store 4 into %ir.iouter); cg.c:617:40
  B %bb.3

bb.8.for.end22:
; predecessors: %bb.3

  renamable $x1, renamable $x0 = LDPXi $fp, -6, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
  STPXi renamable $x1, renamable $x0, $sp, 8 :: (store 8 into %stack.25), (store 8 into %stack.26)
  renamable $x2 = LDURXi $fp, -56, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  STRXui renamable $x2, $sp, 7 :: (store 8 into %stack.27)
  renamable $w20, renamable $w19 = LDPWi $fp, -8, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr), (dereferenceable load 4 from %ir.nz.addr); cg.c:633:31
  renamable $x16, renamable $x17 = LDPXi $fp, 5, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr), (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:46
  STPXi renamable $x17, renamable $x16, $sp, 10 :: (store 8 into %stack.23), (store 8 into %stack.24)
  renamable $x18, renamable $x6 = LDPXi $fp, 7, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr), (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:633:58
  STRXui renamable $x18, $sp, 12 :: (store 8 into %stack.22)
  renamable $w8 = LDURWi $fp, -60, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  STRWui renamable $w8, $sp, 26 :: (store 4 into %stack.21)
  renamable $w5 = LDRWui $fp, 4, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  STRWui renamable $w5, $sp, 29 :: (store 4 into %stack.20)
  STRXui renamable $x6, $sp, 15 :: (store 8 into %stack.19)
  STRXui killed renamable $x6, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
  STRWui killed renamable $w5, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
  STRWui killed renamable $w8, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  STPXi renamable $x17, renamable $x18, $sp, 1, debug-location !720 :: (store 8 into stack + 16), (store 8 into stack + 8); cg.c:633:5
  STRXui killed renamable $x16, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5
  $w5 = MOVZWi 13, 0, debug-location !720; cg.c:633:5
  $w3 = ORRWrs $wzr, $w19, 0, debug-location !720; cg.c:633:5
  $w4 = ORRWrs $wzr, $w20, 0, debug-location !720; cg.c:633:5
  BL @sparse, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !720; cg.c:633:5
  PCN_STACKMAP 2, 0, 1, 8, $fp, -312, 1, 8, $fp, -320, 1, 8, $fp, -328, killed renamable $w19, killed renamable $w20, 1, 8, $fp, -296, 1, 8, $fp, -304, 1, 8, $fp, -288, 1, 4, $fp, -280, 1, 4, $fp, -268, 1, 8, $fp, -264, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !721 :: (load 8 from %stack.19), (load 4 from %stack.20), (load 4 from %stack.21), (load 8 from %stack.22), (load 8 from %stack.23), (load 8 from %stack.24), (load 8 from %stack.25), (load 8 from %stack.26), (load 8 from %stack.27); cg.c:635:1
  $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !721 :: (load 8 from %stack.35), (load 8 from %stack.34); cg.c:635:1
  $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !721 :: (load 8 from %stack.37), (load 8 from %stack.36); cg.c:635:1
  $sp = frame-destroy ADDXri $sp, 400, 0, debug-location !721; cg.c:635:1
  RET undef $lr, debug-location !721; cg.c:635:1

# End machine code for function makea.

********** MI Scheduling **********
makea:%bb.0 entry
  From: STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STPXi renamable $x3, renamable $x2, $fp, -6 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STURXi renamable $x4, $fp, -56 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STURWi renamable $w5, $fp, -60 :: (store 4 into %ir.firstrow.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   STURWi renamable $w8, $fp, -76, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPXi renamable $x3, renamable $x2, $fp, -6 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STURXi renamable $x4, $fp, -56 :: (store 8 into %ir.rowstr.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STURWi renamable $w5, $fp, -60 :: (store 4 into %ir.firstrow.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STURWi renamable $w8, $fp, -76, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9
  Ready @5c
  TopQ.A TopLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(4):   $w8 = MOVZWi 1, 0
SU(0):   STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
SU(1):   STPXi renamable $x3, renamable $x2, $fp, -6 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
SU(2):   STURXi renamable $x4, $fp, -56 :: (store 8 into %ir.rowstr.addr)
SU(3):   STURWi renamable $w5, $fp, -60 :: (store 4 into %ir.firstrow.addr)
SU(5):   STURWi renamable $w8, $fp, -76, debug-location !641 :: (store 4 into %ir.nn1); cg.c:609:9

********** MI Scheduling **********
makea:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 46 :: (store 8 into %stack.37), (store 8 into %stack.36)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 46 :: (store 8 into %stack.37), (store 8 into %stack.36)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 48 :: (store 8 into %stack.35), (store 8 into %stack.34)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 384, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 46 :: (store 8 into %stack.37), (store 8 into %stack.36)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 48 :: (store 8 into %stack.35), (store 8 into %stack.34)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 384, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 46 :: (store 8 into %stack.37), (store 8 into %stack.36)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 48 :: (store 8 into %stack.35), (store 8 into %stack.34)
SU(2):   $fp = frame-setup ADDXri $sp, 384, 0

Fixup kills for %bb.0
********** MI Scheduling **********
makea:%bb.1 do.body
  From: renamable $w8 = LDURWi $fp, -76, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
    To: Bcc 11, %bb.1, implicit $nzcv, debug-location !650; cg.c:612:5
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -76, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $w16 = LDURWi $fp, -28, debug-location !648 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(2):   renamable $w8 = UBFMWri renamable $w8, 31, 30, debug-location !645; cg.c:611:17
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Data Latency=1 Reg=$w8
    SU(3): Data Latency=1 Reg=$w8
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !650; cg.c:612:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(1): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   STURWi renamable $w8, $fp, -76, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   Bcc 11, %bb.1, implicit $nzcv, debug-location !650; cg.c:612:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -76, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -28, debug-location !648 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = UBFMWri renamable $w8, 31, 30, debug-location !645; cg.c:611:17
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !650; cg.c:612:5
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -76, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDURWi $fp, -76, debug-location !643 :: (dereferenceable load 4 from %ir.nn1); cg.c:611:19
SU(1):   renamable $w16 = LDURWi $fp, -28, debug-location !648 :: (dereferenceable load 4 from %ir.n.addr); cg.c:612:20
SU(2):   renamable $w8 = UBFMWri renamable $w8, 31, 30, debug-location !645; cg.c:611:17
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !650; cg.c:612:5
SU(4):   STURWi renamable $w8, $fp, -76, debug-location !646 :: (store 4 into %ir.nn1); cg.c:611:13

Fixup kills for %bb.1
********** MI Scheduling **********
makea:%bb.2 do.end
  From: STURWi $wzr, $fp, -64, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -64, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=1 Reg=$x8
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Data Latency=4 Reg=$d0
SU(3):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.21)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
SU(4):   $w19 = MOVZWi 56, 0, implicit-def $x19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w20 = MOVZWi 112, 0, implicit-def $x20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) %const.2
  Ready @0c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 5 4 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
  Ready @1c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 5 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $w19 = MOVZWi 56, 0, implicit-def $x19
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $w20 = MOVZWi 112, 0, implicit-def $x20
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -64, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.21)
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) %const.2
SU(2):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.2 :: (load 8 from constant-pool)
SU(4):   $w19 = MOVZWi 56, 0, implicit-def $x19
SU(5):   $w20 = MOVZWi 112, 0, implicit-def $x20
SU(0):   STURWi $wzr, $fp, -64, debug-location !653 :: (store 4 into %ir.iouter); cg.c:617:17
SU(3):   STRDui renamable $d0, $sp, 13 :: (store 8 into %stack.21)

Fixup kills for %bb.2
********** MI Scheduling **********
makea:%bb.3 for.cond
  From: renamable $w8 = LDURWi $fp, -64, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
    To: Bcc 10, %bb.8, implicit $nzcv, debug-location !660; cg.c:617:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDURWi $fp, -28, debug-location !658 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w16
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !660; cg.c:617:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.8, implicit $nzcv, debug-location !660; cg.c:617:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -28, debug-location !658 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !660; cg.c:617:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $w8 = LDURWi $fp, -64, debug-location !656 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:22
SU(1):   renamable $w16 = LDURWi $fp, -28, debug-location !658 :: (dereferenceable load 4 from %ir.n.addr); cg.c:617:31
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !660; cg.c:617:5

Fixup kills for %bb.3
********** MI Scheduling **********
makea:%bb.4 for.body
  From: renamable $w8 = LDURWi $fp, -72, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -72, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$w8
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDRXui $fp, 5, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x16
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x17 = LDURSWi $fp, -64, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x17
    SU(3): Ord  Latency=0 Memory
SU(3):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$x17
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x16
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
SU(4):   STURWi $wzr, $fp, -68, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -72, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x16 = LDRXui $fp, 5, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x17 = LDURSWi $fp, -64, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi $wzr, $fp, -68, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w8 = LDURWi $fp, -72, debug-location !675 :: (dereferenceable load 4 from %ir.nzv); cg.c:621:24
SU(1):   renamable $x16 = LDRXui $fp, 5, debug-location !676 :: (dereferenceable load 8 from %ir.arow.addr); cg.c:621:9
SU(2):   renamable $x17 = LDURSWi $fp, -64, debug-location !677 :: (dereferenceable load 4 from %ir.iouter); cg.c:621:14
SU(3):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !678 :: (store 4 into %ir.arrayidx); cg.c:621:22
SU(4):   STURWi $wzr, $fp, -68, debug-location !679 :: (store 4 into %ir.ivelt); cg.c:623:20

********** MI Scheduling **********
makea:%bb.4 for.body
  From: $x1 = SUBXri $fp, 144, 0
    To: PCN_STACKMAP 1, 0, 0, $fp, -40, 0, $fp, 48, 1, 4, $fp, -268, 0, $fp, 56, 0, $fp, 40, 0, $fp, -256, 0, $fp, -144, 0, $fp, -48, 0, $fp, -60, 0, $fp, -64, 0, $fp, 64, 0, $fp, -144, 0, $fp, -68, 0, $fp, 16, 0, $fp, -28, 0, $fp, -76, 0, $fp, -32, 0, $fp, -72, 0, $fp, -56, 0, $fp, -256, 1, 4, $fp, -264, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !675 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16), (load 4 from %stack.19), (load 4 from %stack.20); cg.c:621:24
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x1 = SUBXri $fp, 144, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $x0 = ADDXri $sp, 128, 0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   PCN_STACKMAP 1, 0, 0, $fp, -40, 0, $fp, 48, 1, 4, $fp, -268, 0, $fp, 56, 0, $fp, 40, 0, $fp, -256, 0, $fp, -144, 0, $fp, -48, 0, $fp, -60, 0, $fp, -64, 0, $fp, 64, 0, $fp, -144, 0, $fp, -68, 0, $fp, 16, 0, $fp, -28, 0, $fp, -76, 0, $fp, -32, 0, $fp, -72, 0, $fp, -56, 0, $fp, -256, 1, 4, $fp, -264, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !675 :: (load 8 from %stack.2.a.addr), (load 8 from %fixed-stack.2, align 16), (load 8 from %fixed-stack.1), (load 8 from %fixed-stack.3), (load 8 from %stack.18.vc, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.3.colidx.addr), (load 8 from %stack.5.firstrow.addr, align 4), (load 8 from %stack.13.iouter, align 4), (load 8 from %fixed-stack.0, align 16), (load 8 from %stack.17.ivc, align 16), (load 8 from %stack.14.ivelt, align 4), (load 8 from %fixed-stack.6, align 16), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.16.nn1, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.15.nzv, align 4), (load 8 from %stack.4.rowstr.addr), (load 8 from %stack.18.vc, align 16), (load 4 from %stack.19), (load 4 from %stack.20); cg.c:621:24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $x1 = SUBXri $fp, 144, 0
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $sp, 128, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   $x1 = SUBXri $fp, 144, 0
SU(1):   $x0 = ADDXri $sp, 128, 0

********** MI Scheduling **********
makea:%bb.4 for.body
  From: renamable $w8 = LDURWi $fp, -64, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
    To: BL @vecset, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit $d0, implicit-def $sp, debug-location !674; cg.c:620:9
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w0 = LDURWi $fp, -28, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$w0
SU(2):   renamable $w4 = nsw ADDWri renamable $w8, 1, 0, debug-location !673; cg.c:620:41
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(3): Data Latency=1 Reg=$w4
SU(3):   STPWi renamable $w4, renamable $w0, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$w4
    SU(1): Data Latency=4 Reg=$w0
SU(4):   $x1 = ADDXri $sp, 128, 0, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $x2 = SUBXri $fp, 144, 0, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x3 = SUBXri $fp, 72, 0, debug-location !674; cg.c:620:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $d0 = LDRDui $sp, 13 :: (load 8 from %stack.21)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   BL @vecset, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $x1, implicit $x2, implicit $x3, implicit $w4, implicit $d0, implicit-def $sp, debug-location !674; cg.c:620:9
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=4 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 1 4 5 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(7) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w0 = LDURWi $fp, -28, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 6 4 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $d0 = LDRDui $sp, 13 :: (load 8 from %stack.21)
  Ready @2c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 5 6 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) $x1 = ADDXri $sp, 128, 0, debug-location !674; cg.c:620:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 2 
  TopQ.A RemainingLatency 0 + 4c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $w4 = nsw ADDWri renamable $w8, 1, 0, debug-location !673; cg.c:620:41
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 3 
  TopQ.A RemainingLatency 0 + 5c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x2 = SUBXri $fp, 144, 0, debug-location !674; cg.c:620:9
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $x3 = SUBXri $fp, 72, 0, debug-location !674; cg.c:620:9
  Ready @6c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STPWi renamable $w4, renamable $w0, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
  Ready @7c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w8 = LDURWi $fp, -64, debug-location !672 :: (dereferenceable load 4 from %ir.iouter); cg.c:620:34
SU(1):   renamable $w0 = LDURWi $fp, -28, debug-location !669 :: (dereferenceable load 4 from %ir.n.addr); cg.c:620:16
SU(7):   $d0 = LDRDui $sp, 13 :: (load 8 from %stack.21)
SU(4):   $x1 = ADDXri $sp, 128, 0, debug-location !674; cg.c:620:9
SU(2):   renamable $w4 = nsw ADDWri renamable $w8, 1, 0, debug-location !673; cg.c:620:41
SU(5):   $x2 = SUBXri $fp, 144, 0, debug-location !674; cg.c:620:9
SU(6):   $x3 = SUBXri $fp, 72, 0, debug-location !674; cg.c:620:9
SU(3):   STPWi renamable $w4, renamable $w0, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)

********** MI Scheduling **********
makea:%bb.4 for.body
  From: renamable $w0 = LDURWi $fp, -28, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
    To: BL @sprnvc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !668; cg.c:619:9
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDURWi $fp, -28, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$w0
SU(1):   renamable $w2 = LDURWi $fp, -76, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$w2
SU(2):   STPWi renamable $w2, renamable $w0, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$w2
    SU(0): Data Latency=4 Reg=$w0
SU(3):   $w8 = MOVZWi 13, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STURWi renamable $w8, $fp, -72, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
SU(5):   $x3 = ADDXri $sp, 128, 0, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $x4 = SUBXri $fp, 144, 0, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(7):   $w1 = MOVZWi 13, 0, debug-location !668; cg.c:619:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @sprnvc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit $w1, implicit $w2, implicit $x3, implicit $x4, implicit-def $sp, debug-location !668; cg.c:619:9
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Artificial
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 5 6 7 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDURWi $fp, -28, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 1 3 5 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(7) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w2 = LDURWi $fp, -76, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 6 3 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 4
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) $w8 = MOVZWi 13, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 6 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 4
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) $x3 = ADDXri $sp, 128, 0, debug-location !668; cg.c:619:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 7 6 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 4
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) $x4 = SUBXri $fp, 144, 0, debug-location !668; cg.c:619:9
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 4 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 4
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) $w1 = MOVZWi 13, 0, debug-location !668; cg.c:619:9
  Ready @5c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 4
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STPWi renamable $w2, renamable $w0, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
  Ready @6c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STURWi renamable $w8, $fp, -72, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w0 = LDURWi $fp, -28, debug-location !663 :: (dereferenceable load 4 from %ir.n.addr); cg.c:619:16
SU(1):   renamable $w2 = LDURWi $fp, -76, debug-location !665 :: (dereferenceable load 4 from %ir.nn1); cg.c:619:24
SU(3):   $w8 = MOVZWi 13, 0
SU(5):   $x3 = ADDXri $sp, 128, 0, debug-location !668; cg.c:619:9
SU(6):   $x4 = SUBXri $fp, 144, 0, debug-location !668; cg.c:619:9
SU(7):   $w1 = MOVZWi 13, 0, debug-location !668; cg.c:619:9
SU(2):   STPWi renamable $w2, renamable $w0, $sp, 29 :: (store 4 into %stack.19), (store 4 into %stack.20)
SU(4):   STURWi renamable $w8, $fp, -72, debug-location !661 :: (store 4 into %ir.nzv); cg.c:618:13

Fixup kills for %bb.4
********** MI Scheduling **********
makea:%bb.5 for.cond5
  From: renamable $w16, renamable $w8 = LDPWi $fp, -18, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
    To: Bcc 10, %bb.7, implicit $nzcv, debug-location !686; cg.c:623:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16, renamable $w8 = LDPWi $fp, -18, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w16
    SU(1): Data Latency=4 Reg=$w8
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !686; cg.c:623:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.7, implicit $nzcv, debug-location !686; cg.c:623:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16, renamable $w8 = LDPWi $fp, -18, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !686; cg.c:623:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $w16, renamable $w8 = LDPWi $fp, -18, debug-location !682 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.nzv); cg.c:623:25
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !686; cg.c:623:9

Fixup kills for %bb.5
********** MI Scheduling **********
makea:%bb.6 for.body7
  From: renamable $x8, renamable $x17 = LDPSWi $fp, -17, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
    To: B %bb.5
 RegionInstrs: 16
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8, renamable $x17 = LDPSWi $fp, -17, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
  # preds left       : 0
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 26
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(5): Out  Latency=1
    SU(7): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x17
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDRXui $fp, 6, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x16
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(2):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !689; cg.c:624:35
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 22
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w18 = LDRWroX renamable $x1, renamable $x8, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 21
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(5): Data Latency=4 Reg=$w18
    SU(7): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(4):   renamable $x16 = MADDXrrr renamable $x17, renamable $x19, renamable $x16, debug-location !691; cg.c:624:13
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 17
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(8): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x16
    SU(5): Anti Latency=0
    SU(7): Anti Latency=0
SU(5):   renamable $w17 = SUBWri renamable $w18, 1, 0, debug-location !690; cg.c:624:46
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 17
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Data Latency=4 Reg=$w18
    SU(0): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$w17
SU(6):   STRWroX renamable $w17, renamable $x16, renamable $x8, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  # preds left       : 6
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 16
  Predecessors:
    SU(5): Data Latency=1 Reg=$w17
    SU(4): Data Latency=1 Reg=$x16
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Anti Latency=0
    SU(8): Anti Latency=0
    SU(7): Anti Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
SU(7):   renamable $x8, renamable $x17 = LDPSWi $fp, -17, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:625:38
  # preds left       : 8
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 15
  Predecessors:
    SU(6): Anti Latency=0
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(5): Out  Latency=1
    SU(4): Anti Latency=0
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
    SU(0): Out  Latency=1
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x8
    SU(11): Data Latency=4 Reg=$x17
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
SU(8):   renamable $x16 = LDRXui $fp, 7, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(4): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$x16
    SU(12): Ord  Latency=0 Memory
SU(9):   renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !696; cg.c:625:35
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 11
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x8
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x8
    SU(10): Data Latency=1 Reg=$x8
SU(10):   renamable $d0 = LDRDroX renamable $x0, renamable $x8, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 16
  Height             : 10
  Predecessors:
    SU(9): Data Latency=1 Reg=$x8
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=$d0
    SU(13): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
SU(11):   renamable $x16 = MADDXrrr renamable $x17, renamable $x20, renamable $x16, debug-location !697; cg.c:625:13
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x16
    SU(7): Data Latency=4 Reg=$x17
  Successors:
    SU(12): Data Latency=1 Reg=$x16
SU(12):   STRDroX renamable $d0, renamable $x16, renamable $x8, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  # preds left       : 10
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 20
  Height             : 6
  Predecessors:
    SU(10): Data Latency=4 Reg=$d0
    SU(11): Data Latency=1 Reg=$x16
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=1 Reg=$x8
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Anti Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=1 Memory
SU(13):   renamable $w8 = LDURWi $fp, -68, debug-location !701 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 21
  Height             : 5
  Predecessors:
    SU(12): Anti Latency=0
    SU(12): Ord  Latency=1 Memory
    SU(10): Anti Latency=0
    SU(9): Out  Latency=1
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$w8
    SU(15): Ord  Latency=0 Memory
SU(14):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !701; cg.c:623:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 25
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=4 Reg=$w8
  Successors:
    SU(15): Data Latency=1 Reg=$w8
SU(15):   STURWi renamable $w8, $fp, -68, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=$w8
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 26
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 26
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8, renamable $x17 = LDPSWi $fp, -17, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
  Ready @0c
  TopQ.A BotLatency SU(0) 26c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRXui $fp, 6, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 4 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !689; cg.c:624:35
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 26
  Cand SU(3) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w18 = LDRWroX renamable $x1, renamable $x8, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x16 = MADDXrrr renamable $x17, renamable $x19, renamable $x16, debug-location !691; cg.c:624:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w17 = SUBWri renamable $w18, 1, 0, debug-location !690; cg.c:624:46
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWroX renamable $w17, renamable $x16, renamable $x8, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 8 
  TopQ.A RemainingLatency 0 + 11c > CritPath 26
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x8, renamable $x17 = LDPSWi $fp, -17, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:625:38
  Ready @11c
  TopQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $x16 = LDRXui $fp, 7, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 11 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !696; cg.c:625:35
  Ready @15c
  TopQ.A TopLatency SU(9) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 11 
  TopQ.A RemainingLatency 0 + 16c > CritPath 26
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $d0 = LDRDroX renamable $x0, renamable $x8, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
  Ready @16c
  TopQ.A TopLatency SU(10) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $x16 = MADDXrrr renamable $x17, renamable $x20, renamable $x16, debug-location !697; cg.c:625:13
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 20 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRDroX renamable $d0, renamable $x16, renamable $x8, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
  Ready @20c
  TopQ.A TopLatency SU(12) 20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 13
  Executed: 21c
  Critical: 13c, 13 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) renamable $w8 = LDURWi $fp, -68, debug-location !701 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
  Ready @21c
  TopQ.A TopLatency SU(13) 21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 14
  Executed: 22c
  Critical: 14c, 14 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 25 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !701; cg.c:623:43
  Ready @25c
  TopQ.A TopLatency SU(14) 25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 15
  Executed: 26c
  Critical: 15c, 15 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) STURWi renamable $w8, $fp, -68, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43
  Ready @26c
  TopQ.A TopLatency SU(15) 26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 16
  Executed: 27c
  Critical: 16c, 16 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x8, renamable $x17 = LDPSWi $fp, -17, debug-location !687 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:624:39
SU(1):   renamable $x16 = LDRXui $fp, 6, debug-location !691 :: (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:624:13
SU(2):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !689; cg.c:624:35
SU(3):   renamable $w18 = LDRWroX renamable $x1, renamable $x8, 0, 0, debug-location !689 :: (load 4 from %ir.arrayidx9); cg.c:624:35
SU(4):   renamable $x16 = MADDXrrr renamable $x17, renamable $x19, renamable $x16, debug-location !691; cg.c:624:13
SU(5):   renamable $w17 = SUBWri renamable $w18, 1, 0, debug-location !690; cg.c:624:46
SU(6):   STRWroX renamable $w17, renamable $x16, renamable $x8, 0, 0, debug-location !694 :: (store 4 into %ir.arrayidx13); cg.c:624:33
SU(7):   renamable $x8, renamable $x17 = LDPSWi $fp, -17, debug-location !695 :: (dereferenceable load 4 from %ir.ivelt), (dereferenceable load 4 from %ir.iouter); cg.c:625:38
SU(8):   renamable $x16 = LDRXui $fp, 7, debug-location !697 :: (dereferenceable load 8 from %ir.aelt.addr); cg.c:625:13
SU(9):   renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !696; cg.c:625:35
SU(10):   renamable $d0 = LDRDroX renamable $x0, renamable $x8, 0, 0, debug-location !696 :: (load 8 from %ir.arrayidx15); cg.c:625:35
SU(11):   renamable $x16 = MADDXrrr renamable $x17, renamable $x20, renamable $x16, debug-location !697; cg.c:625:13
SU(12):   STRDroX renamable $d0, renamable $x16, renamable $x8, 0, 0, debug-location !700 :: (store 8 into %ir.arrayidx19); cg.c:625:33
SU(13):   renamable $w8 = LDURWi $fp, -68, debug-location !701 :: (dereferenceable load 4 from %ir.ivelt); cg.c:623:43
SU(14):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !701; cg.c:623:43
SU(15):   STURWi renamable $w8, $fp, -68, debug-location !701 :: (store 4 into %ir.ivelt); cg.c:623:43

Fixup kills for %bb.6
********** MI Scheduling **********
makea:%bb.7 for.inc20
  From: renamable $w8 = LDURWi $fp, -64, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
    To: B %bb.3
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -64, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !705; cg.c:617:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STURWi renamable $w8, $fp, -64, debug-location !705 :: (store 4 into %ir.iouter); cg.c:617:40
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.3
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDURWi $fp, -64, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !705; cg.c:617:40
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STURWi renamable $w8, $fp, -64, debug-location !705 :: (store 4 into %ir.iouter); cg.c:617:40
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w8 = LDURWi $fp, -64, debug-location !705 :: (dereferenceable load 4 from %ir.iouter); cg.c:617:40
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !705; cg.c:617:40
SU(2):   STURWi renamable $w8, $fp, -64, debug-location !705 :: (store 4 into %ir.iouter); cg.c:617:40

Fixup kills for %bb.7
********** MI Scheduling **********
makea:%bb.8 for.end22
  From: $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !721 :: (load 8 from %stack.35), (load 8 from %stack.34); cg.c:635:1
    To: $sp = frame-destroy ADDXri $sp, 400, 0, debug-location !721; cg.c:635:1
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !721 :: (load 8 from %stack.35), (load 8 from %stack.34); cg.c:635:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !721 :: (load 8 from %stack.37), (load 8 from %stack.36); cg.c:635:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 400, 0, debug-location !721; cg.c:635:1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !721 :: (load 8 from %stack.35), (load 8 from %stack.34); cg.c:635:1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !721 :: (load 8 from %stack.37), (load 8 from %stack.36); cg.c:635:1
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 48, debug-location !721 :: (load 8 from %stack.35), (load 8 from %stack.34); cg.c:635:1
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 46, debug-location !721 :: (load 8 from %stack.37), (load 8 from %stack.36); cg.c:635:1

********** MI Scheduling **********
makea:%bb.8 for.end22
  From: renamable $x1, renamable $x0 = LDPXi $fp, -6, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
    To: BL @sparse, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !720; cg.c:633:5
 RegionInstrs: 26
ScheduleDAGMI::schedule starting
SU(0):   renamable $x1, renamable $x0 = LDPXi $fp, -6, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$x1
    SU(1): Data Latency=4 Reg=$x0
SU(1):   STPXi renamable $x1, renamable $x0, $sp, 8 :: (store 8 into %stack.25), (store 8 into %stack.26)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$x1
    SU(0): Data Latency=4 Reg=$x0
SU(2):   renamable $x2 = LDURXi $fp, -56, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(3): Data Latency=4 Reg=$x2
SU(3):   STRXui renamable $x2, $sp, 7 :: (store 8 into %stack.27)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$x2
SU(4):   renamable $w20, renamable $w19 = LDPWi $fp, -8, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr), (dereferenceable load 4 from %ir.nz.addr); cg.c:633:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(25): Data Latency=4 Reg=$w20
    SU(24): Data Latency=4 Reg=$w19
SU(5):   renamable $x16, renamable $x17 = LDPXi $fp, 5, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr), (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:46
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(22): Data Latency=4 Reg=$x16
    SU(6): Data Latency=4 Reg=$x16
    SU(21): Data Latency=4 Reg=$x17
    SU(6): Data Latency=4 Reg=$x17
SU(6):   STPXi renamable $x17, renamable $x16, $sp, 10 :: (store 8 into %stack.23), (store 8 into %stack.24)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=$x16
    SU(5): Data Latency=4 Reg=$x17
SU(7):   renamable $x18, renamable $x6 = LDPXi $fp, 7, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr), (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:633:58
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(21): Data Latency=4 Reg=$x18
    SU(8): Data Latency=4 Reg=$x18
    SU(14): Data Latency=4 Reg=$x6
    SU(13): Data Latency=4 Reg=$x6
SU(8):   STRXui renamable $x18, $sp, 12 :: (store 8 into %stack.22)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=$x18
SU(9):   renamable $w8 = LDURWi $fp, -60, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(17): Out  Latency=1
    SU(16): Data Latency=4 Reg=$w8
    SU(10): Data Latency=4 Reg=$w8
SU(10):   STRWui renamable $w8, $sp, 26 :: (store 4 into %stack.21)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(9): Data Latency=4 Reg=$w8
  Successors:
    SU(17): Anti Latency=0
SU(11):   renamable $w5 = LDRWui $fp, 4, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(23): Out  Latency=1
    SU(15): Data Latency=4 Reg=$w5
    SU(12): Data Latency=4 Reg=$w5
SU(12):   STRWui renamable $w5, $sp, 29 :: (store 4 into %stack.20)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(11): Data Latency=4 Reg=$w5
  Successors:
    SU(23): Anti Latency=0
SU(13):   STRXui renamable $x6, $sp, 15 :: (store 8 into %stack.19)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=$x6
SU(14):   STRXui renamable $x6, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=$x6
SU(15):   STRWui renamable $w5, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(11): Data Latency=4 Reg=$w5
  Successors:
    SU(23): Anti Latency=0
SU(16):   STRWui renamable $w8, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(9): Data Latency=4 Reg=$w8
  Successors:
    SU(17): Anti Latency=0
SU(17):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(16): Anti Latency=0
    SU(10): Anti Latency=0
    SU(9): Out  Latency=1
  Successors:
    SU(19): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x8
SU(18):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(17): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(19): Anti Latency=0
SU(19):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(18): Anti Latency=0
    SU(17): Out  Latency=1
  Successors:
    SU(20): Data Latency=1 Reg=$x8
SU(20):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 4
  Predecessors:
    SU(19): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
SU(21):   STPXi renamable $x17, renamable $x18, $sp, 1, debug-location !720 :: (store 8 into stack + 16), (store 8 into stack + 8); cg.c:633:5
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Data Latency=4 Reg=$x18
    SU(5): Data Latency=4 Reg=$x17
SU(22):   STRXui renamable $x16, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=$x16
SU(23):   $w5 = MOVZWi 13, 0, debug-location !720; cg.c:633:5
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(15): Anti Latency=0
    SU(12): Anti Latency=0
    SU(11): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(24):   $w3 = ORRWrs $wzr, $w19, 0, debug-location !720; cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(25):   $w4 = ORRWrs $wzr, $w20, 0, debug-location !720; cg.c:633:5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=$w20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @sparse, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $x1, implicit $x2, implicit $w3, implicit $w4, implicit $w5, implicit $d0, implicit $d1, implicit-def $sp, debug-location !720; cg.c:633:5
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(25): Ord  Latency=1 Artificial
    SU(24): Ord  Latency=1 Artificial
    SU(23): Ord  Latency=1 Artificial
    SU(20): Ord  Latency=4 Artificial
    SU(18): Ord  Latency=4 Artificial
    SU(2): Ord  Latency=4 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 4 5 7 9 11 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
  Cand SU(9) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(9) renamable $w8 = LDURWi $fp, -60, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
  Ready @0c
  TopQ.A BotLatency SU(9) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 10 
Queue TopQ.A: 0 2 4 5 7 11 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w20, renamable $w19 = LDPWi $fp, -8, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr), (dereferenceable load 4 from %ir.nz.addr); cg.c:633:31
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 10 25 24 
Queue TopQ.A: 0 2 11 5 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(0) ORDER                              
  Cand SU(11) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) renamable $w5 = LDRWui $fp, 4, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 10 25 24 15 12 
Queue TopQ.A: 0 2 7 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x1, renamable $x0 = LDPXi $fp, -6, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 12 25 24 15 
Queue TopQ.A: 5 2 7 16 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(16) TOP-PATH                  6 cycles 
  Cand SU(10) ORDER                              
Pick Top ORDER     
Scheduling SU(10) STRWui renamable $w8, $sp, 26 :: (store 4 into %stack.21)
  Ready @4c
  TopQ.A TopLatency SU(10) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 12 15 
Queue TopQ.A: 5 2 7 16 25 24 
  TopQ.A RemainingLatency 0 + 5c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(16) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(16) STRWui renamable $w8, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
  Ready @5c
  TopQ.A BotLatency SU(16) 6c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 5 2 7 24 25 17 12 15 
  TopQ.A RemainingLatency 0 + 6c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(17) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(17) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @6c
  TopQ.A BotLatency SU(17) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 2 7 24 25 15 12 18 1 
  TopQ.A RemainingLatency 0 + 7c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(18) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(18) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @7c
  TopQ.A TopLatency SU(18) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 2 7 24 25 15 12 1 19 
  TopQ.A RemainingLatency 0 + 8c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(19) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(19) renamable $x8 = ADRP target-flags(aarch64-page) %const.1
  Ready @8c
  TopQ.A BotLatency SU(19) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 2 7 24 25 15 12 1 20 
  TopQ.A RemainingLatency 0 + 9c > CritPath 10
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x2 = LDURXi $fp, -56, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 20 7 24 25 15 12 1 
  TopQ.A RemainingLatency 0 + 10c > CritPath 10
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x16, renamable $x17 = LDPXi $fp, 5, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr), (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:46
  Ready @10c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 22 6 
Queue TopQ.A: 1 20 7 24 25 15 12 
  TopQ.A RemainingLatency 0 + 11c > CritPath 10
  Cand SU(1) ORDER                              
  Cand SU(20) TOP-PATH                  4 cycles 
  Cand SU(7) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x18, renamable $x6 = LDPXi $fp, 7, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr), (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:633:58
  Ready @11c
  TopQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 22 6 21 8 14 13 
Queue TopQ.A: 1 20 12 24 25 15 
  TopQ.A RemainingLatency 0 + 12c > CritPath 10
  Cand SU(1) ORDER                              
  Cand SU(20) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(20) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
  Ready @12c
  TopQ.A TopLatency SU(20) 6c
  TopQ.A BotLatency SU(20) 4c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 22 6 21 8 14 
Queue TopQ.A: 1 15 12 24 25 3 
  TopQ.A RemainingLatency 0 + 13c > CritPath 10
  Cand SU(1) ORDER                              
  Cand SU(15) TOP-PATH                  1 cycles 
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) STRWui renamable $w5, $sp, 29 :: (store 4 into %stack.20)
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 13 14 8 21 
Queue TopQ.A: 1 15 3 24 25 22 6 
  TopQ.A RemainingLatency 0 + 14c > CritPath 10
  Cand SU(1) ORDER                              
  Cand SU(15) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(15) STRWui renamable $w5, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 15
  Executed: 15c
  Critical: 15c, 15 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 6 3 24 25 22 23 13 21 8 14 
  TopQ.A RemainingLatency 0 + 15c > CritPath 10
  Cand SU(1) ORDER                              
  Cand SU(24) TOP-PATH                  1 cycles 
  Cand SU(23) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(23) $w5 = MOVZWi 13, 0, debug-location !720; cg.c:633:5
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 16
  Executed: 16c
  Critical: 16c, 16 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 6 3 24 25 22 14 13 21 8 
  TopQ.A RemainingLatency 0 + 16c > CritPath 10
  Cand SU(1) ORDER                              
  Cand SU(24) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(24) $w3 = ORRWrs $wzr, $w19, 0, debug-location !720; cg.c:633:5
  Ready @16c
  TopQ.A BotLatency SU(24) 1c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 17
  Executed: 17c
  Critical: 17c, 17 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 6 3 8 25 22 14 13 21 
  TopQ.A RemainingLatency 0 + 17c > CritPath 10
  Cand SU(1) ORDER                              
  Cand SU(25) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(25) $w4 = ORRWrs $wzr, $w20, 0, debug-location !720; cg.c:633:5
  Ready @17c
  TopQ.A BotLatency SU(25) 1c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 18
  Executed: 18c
  Critical: 18c, 18 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 6 3 8 21 22 14 13 
  TopQ.A RemainingLatency 0 + 18c > CritPath 10
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPXi renamable $x1, renamable $x0, $sp, 8 :: (store 8 into %stack.25), (store 8 into %stack.26)
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 19
  Executed: 19c
  Critical: 19c, 19 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 6 3 8 21 22 14 
  TopQ.A RemainingLatency 0 + 19c > CritPath 10
  Cand SU(13) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRXui renamable $x2, $sp, 7 :: (store 8 into %stack.27)
  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 20
  Executed: 20c
  Critical: 20c, 20 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 6 14 8 21 22 
  TopQ.A RemainingLatency 0 + 20c > CritPath 10
  Cand SU(13) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STPXi renamable $x17, renamable $x16, $sp, 10 :: (store 8 into %stack.23), (store 8 into %stack.24)
  Ready @20c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 21
  Executed: 21c
  Critical: 21c, 21 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 22 14 8 21 
  TopQ.A RemainingLatency 0 + 21c > CritPath 10
  Cand SU(13) ORDER                              
  Cand SU(8) ORDER                              
Pick Top ORDER     
Scheduling SU(8) STRXui renamable $x18, $sp, 12 :: (store 8 into %stack.22)
  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 22
  Executed: 22c
  Critical: 22c, 22 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 22 14 21 
  TopQ.A RemainingLatency 0 + 22c > CritPath 10
  Cand SU(13) ORDER                              
Pick Top ORDER     
Scheduling SU(13) STRXui renamable $x6, $sp, 15 :: (store 8 into %stack.19)
  Ready @22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 23
  Executed: 23c
  Critical: 23c, 23 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 21 22 14 
  TopQ.A RemainingLatency 0 + 23c > CritPath 10
  Cand SU(21) ORDER                              
  Cand SU(14) ORDER                              
Pick Top ORDER     
Scheduling SU(14) STRXui renamable $x6, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 24
  Executed: 24c
  Critical: 24c, 24 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 21 22 
  TopQ.A RemainingLatency 0 + 24c > CritPath 10
  Cand SU(21) ORDER                              
Pick Top ORDER     
Scheduling SU(21) STPXi renamable $x17, renamable $x18, $sp, 1, debug-location !720 :: (store 8 into stack + 16), (store 8 into stack + 8); cg.c:633:5
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 25
  Executed: 25c
  Critical: 25c, 25 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 22 
Pick Top ONLY1     
Scheduling SU(22) STRXui renamable $x16, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 26
  Executed: 26c
  Critical: 26c, 26 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(9):   renamable $w8 = LDURWi $fp, -60, debug-location !717 :: (dereferenceable load 4 from %ir.firstrow.addr); cg.c:633:64
SU(4):   renamable $w20, renamable $w19 = LDPWi $fp, -8, debug-location !712 :: (dereferenceable load 4 from %ir.n.addr), (dereferenceable load 4 from %ir.nz.addr); cg.c:633:31
SU(11):   renamable $w5 = LDRWui $fp, 4, debug-location !718 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:634:12
SU(0):   renamable $x1, renamable $x0 = LDPXi $fp, -6, debug-location !709 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.colidx.addr); cg.c:633:12
SU(10):   STRWui renamable $w8, $sp, 26 :: (store 4 into %stack.21)
SU(16):   STRWui renamable $w8, $sp, 6, debug-location !720 :: (store 4 into stack + 24); cg.c:633:5
SU(17):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(18):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(19):   renamable $x8 = ADRP target-flags(aarch64-page) %const.1
SU(2):   renamable $x2 = LDURXi $fp, -56, debug-location !711 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:633:23
SU(5):   renamable $x16, renamable $x17 = LDPXi $fp, 5, debug-location !714 :: (dereferenceable load 8 from %ir.arow.addr), (dereferenceable load 8 from %ir.acol.addr, align 16); cg.c:633:46
SU(7):   renamable $x18, renamable $x6 = LDPXi $fp, 7, debug-location !716 :: (dereferenceable load 8 from %ir.aelt.addr), (dereferenceable load 8 from %ir.iv.addr, align 16); cg.c:633:58
SU(20):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.1 :: (load 8 from constant-pool)
SU(12):   STRWui renamable $w5, $sp, 29 :: (store 4 into %stack.20)
SU(15):   STRWui renamable $w5, $sp, 8, debug-location !720 :: (store 4 into stack + 32); cg.c:633:5
SU(23):   $w5 = MOVZWi 13, 0, debug-location !720; cg.c:633:5
SU(24):   $w3 = ORRWrs $wzr, $w19, 0, debug-location !720; cg.c:633:5
SU(25):   $w4 = ORRWrs $wzr, $w20, 0, debug-location !720; cg.c:633:5
SU(1):   STPXi renamable $x1, renamable $x0, $sp, 8 :: (store 8 into %stack.25), (store 8 into %stack.26)
SU(3):   STRXui renamable $x2, $sp, 7 :: (store 8 into %stack.27)
SU(6):   STPXi renamable $x17, renamable $x16, $sp, 10 :: (store 8 into %stack.23), (store 8 into %stack.24)
SU(8):   STRXui renamable $x18, $sp, 12 :: (store 8 into %stack.22)
SU(13):   STRXui renamable $x6, $sp, 15 :: (store 8 into %stack.19)
SU(14):   STRXui renamable $x6, $sp, 5, debug-location !720 :: (store 8 into stack + 40); cg.c:633:5
SU(21):   STPXi renamable $x17, renamable $x18, $sp, 1, debug-location !720 :: (store 8 into stack + 16), (store 8 into stack + 8); cg.c:633:5
SU(22):   STRXui renamable $x16, $sp, 0, debug-location !720 :: (store 8 into stack); cg.c:633:5

Fixup kills for %bb.8
Before MISched:
# Machine code for function conj_grad: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP+16]
  fi#-2: size=8, align=8, fixed, at location [SP+8]
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
Function Live Ins: $x0 in %4, $x1 in %5, $x2 in %6, $x3 in %7, $x4 in %8, $x5 in %9

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x0, $x1, $x2, $x3, $x4, $x5
  %9:gpr64 = COPY $x5
  %8:gpr64 = COPY $x4
  %7:gpr64 = COPY $x3
  %6:gpr64 = COPY $x2
  %5:gpr64 = COPY $x1
  %4:gpr64 = COPY $x0
  STRXui %4:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  STRXui %5:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  STRXui %6:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
  STRXui %7:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
  STRXui %8:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
  STRXui %9:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
  %10:gpr32 = MOVi32imm 25
  STRWui %10:gpr32, %stack.12.cgitmax, 0, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
  STRXui $xzr, %stack.15.rho, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
  STRWui $wzr, %stack.9.j, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
  %14:gpr64temp = ADRP target-flags(aarch64-page) @naa

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %13:gpr32 = LDRWui %stack.9.j, 0, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  %15:gpr32common = LDRWui %14:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
  %16:gpr32common = nsw ADDWri %15:gpr32common, 1, 0, debug-location !770; cg.c:414:25
  dead $wzr = SUBSWrr %13:gpr32, %16:gpr32common, implicit-def $nzcv, debug-location !772; cg.c:414:5
  Bcc 10, %bb.3, implicit killed $nzcv, debug-location !772; cg.c:414:5
  B %bb.2, debug-location !772; cg.c:414:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %231:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
  %232:gpr64 = LDRSWui %stack.9.j, 0, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  STRXroX $xzr, %231:gpr64common, %232:gpr64, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
  %234:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  %235:gpr64 = LDRSWui %stack.9.j, 0, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  STRXroX $xzr, %234:gpr64common, %235:gpr64, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  %236:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  %237:gpr64 = LDRSWui %stack.9.j, 0, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  %238:gpr64 = UBFMXri %237:gpr64, 61, 60, debug-location !780; cg.c:417:16
  %239:fpr64 = LDRDroX %236:gpr64common, %238:gpr64, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  %240:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  STRDroX %239:fpr64, %240:gpr64common, %238:gpr64, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  %241:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  %242:gpr64 = LDRSWui %stack.9.j, 0, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  %243:gpr64 = UBFMXri %242:gpr64, 61, 60, debug-location !785; cg.c:418:16
  %244:fpr64 = LDRDroX %241:gpr64common, %243:gpr64, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  %245:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  STRDroX %244:fpr64, %245:gpr64common, %243:gpr64, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  %246:gpr32common = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0, debug-location !790; cg.c:414:31
  STRWui %247:gpr32common, %stack.9.j, 0, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31
  B %bb.1, debug-location !791; cg.c:414:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.9.j, 0, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
  %20:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  %22:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

bb.4.for.cond11:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

  %19:gpr32 = LDRWui %stack.9.j, 0, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  %23:gpr32 = LDRWui %22:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !800 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  %24:gpr32common = nsw SUBWrr %21:gpr32, %23:gpr32, debug-location !801; cg.c:425:29
  %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !802; cg.c:425:40
  dead $wzr = SUBSWrr %19:gpr32, %25:gpr32common, implicit-def $nzcv, debug-location !804; cg.c:425:5
  Bcc 10, %bb.6, implicit killed $nzcv, debug-location !804; cg.c:425:5
  B %bb.5, debug-location !804; cg.c:425:5

bb.5.for.body14:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %223:fpr64 = LDRDui %stack.15.rho, 0, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  %224:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  %225:gpr64common = LDRSWui %stack.9.j, 0, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  %227:fpr64 = LDRDroX %224:gpr64common, %225:gpr64common, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  %228:fpr64 = FMULDrr %227:fpr64, %227:fpr64, debug-location !811; cg.c:426:26
  %229:fpr64 = FADDDrr %223:fpr64, %228:fpr64, debug-location !812; cg.c:426:19
  STRDui %229:fpr64, %stack.15.rho, 0, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
  %230:gpr32common = nsw ADDWri %225.sub_32:gpr64common, 1, 0, debug-location !814; cg.c:425:46
  STRWui %230:gpr32common, %stack.9.j, 0, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
  B %bb.4, debug-location !815; cg.c:425:5

bb.6.for.end22:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %27:gpr32 = MOVi32imm 1
  STRWui %27:gpr32, %stack.11.cgit, 0, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
  %93:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
  %95:gpr64temp = ADRP target-flags(aarch64-page) @firstrow
  %103:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  %105:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

bb.7.for.cond23:
; predecessors: %bb.6, %bb.26
  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)

  %28:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  %29:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !823 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
  dead $wzr = SUBSWrr %28:gpr32, %29:gpr32, implicit-def $nzcv, debug-location !825; cg.c:434:5
  Bcc 12, %bb.27, implicit killed $nzcv, debug-location !825; cg.c:434:5
  B %bb.8, debug-location !825; cg.c:434:5

bb.8.for.body25:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  STRWui $wzr, %stack.9.j, 0, debug-location !826 :: (store 4 into %ir.j); cg.c:447:16

bb.9.for.cond26:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

  %92:gpr32 = LDRWui %stack.9.j, 0, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  %94:gpr32 = LDRWui %93:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  %96:gpr32 = LDRWui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !833 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  %97:gpr32common = nsw SUBWrr %94:gpr32, %96:gpr32, debug-location !834; cg.c:447:33
  %98:gpr32common = nsw ADDWri %97:gpr32common, 1, 0, debug-location !835; cg.c:447:44
  dead $wzr = SUBSWrr %92:gpr32, %98:gpr32common, implicit-def $nzcv, debug-location !837; cg.c:447:9
  Bcc 10, %bb.14, implicit killed $nzcv, debug-location !837; cg.c:447:9
  B %bb.10, debug-location !837; cg.c:447:9

bb.10.for.body30:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  STRXui $xzr, %stack.14.sum, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
  %197:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  %198:gpr64 = LDRSWui %stack.9.j, 0, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  %199:gpr32 = LDRWroX %197:gpr64common, %198:gpr64, 0, 1, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  STRWui %199:gpr32, %stack.10.k, 0, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20

bb.11.for.cond33:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

  %200:gpr32 = LDRWui %stack.10.k, 0, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  %201:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  %202:gpr64 = LDRSWui %stack.9.j, 0, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  %203:gpr64common = ADDXrs %201:gpr64, %202:gpr64, 2, debug-location !847; cg.c:449:37
  %204:gpr32 = LDRWui %203:gpr64common, 1, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  dead $wzr = SUBSWrr %200:gpr32, %204:gpr32, implicit-def $nzcv, debug-location !851; cg.c:449:13
  Bcc 10, %bb.13, implicit killed $nzcv, debug-location !851; cg.c:449:13
  B %bb.12, debug-location !851; cg.c:449:13

bb.12.for.body38:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)

  %211:fpr64 = LDRDui %stack.14.sum, 0, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
  %212:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
  %213:gpr64common = LDRSWui %stack.10.k, 0, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  %215:fpr64 = LDRDroX %212:gpr64common, %213:gpr64common, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  %216:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
  %217:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  %218:gpr64 = LDRSWroX %217:gpr64common, %213:gpr64common, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  %219:fpr64 = LDRDroX %216:gpr64common, %218:gpr64, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  %220:fpr64 = FMULDrr %215:fpr64, %219:fpr64, debug-location !859; cg.c:450:34
  %221:fpr64 = FADDDrr %211:fpr64, %220:fpr64, debug-location !860; cg.c:450:27
  STRDui %221:fpr64, %stack.14.sum, 0, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
  %222:gpr32common = nsw ADDWri %213.sub_32:gpr64common, 1, 0, debug-location !862; cg.c:449:53
  STRWui %222:gpr32common, %stack.10.k, 0, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
  B %bb.11, debug-location !863; cg.c:449:13

bb.13.for.end49:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %206:fpr64 = LDRDui %stack.14.sum, 0, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  %207:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  STRDroX %206:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !870; cg.c:447:50
  STRWui %210:gpr32common, %stack.9.j, 0, debug-location !870 :: (store 4 into %ir.j); cg.c:447:50
  B %bb.9, debug-location !871; cg.c:447:9

bb.14.for.end54:
; predecessors: %bb.9
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  STRXui $xzr, %stack.13.d, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
  STRWui $wzr, %stack.9.j, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16

bb.15.for.cond55:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

  %102:gpr32 = LDRWui %stack.9.j, 0, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  %104:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !881 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  %107:gpr32common = nsw SUBWrr %104:gpr32, %106:gpr32, debug-location !882; cg.c:497:33
  %108:gpr32common = nsw ADDWri %107:gpr32common, 1, 0, debug-location !883; cg.c:497:44
  dead $wzr = SUBSWrr %102:gpr32, %108:gpr32common, implicit-def $nzcv, debug-location !885; cg.c:497:9
  Bcc 10, %bb.17, implicit killed $nzcv, debug-location !885; cg.c:497:9
  B %bb.16, debug-location !885; cg.c:497:9

bb.16.for.body59:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %185:fpr64 = LDRDui %stack.13.d, 0, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  %186:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  %187:gpr64common = LDRSWui %stack.9.j, 0, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  %189:gpr64 = UBFMXri %187:gpr64common, 61, 60, debug-location !888; cg.c:498:21
  %190:fpr64 = LDRDroX %186:gpr64common, %189:gpr64, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  %191:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
  %192:fpr64 = LDRDroX %191:gpr64common, %189:gpr64, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64, debug-location !892; cg.c:498:26
  %194:fpr64 = FADDDrr %185:fpr64, %193:fpr64, debug-location !893; cg.c:498:19
  STRDui %194:fpr64, %stack.13.d, 0, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
  %195:gpr32common = nsw ADDWri %187.sub_32:gpr64common, 1, 0, debug-location !895; cg.c:497:50
  STRWui %195:gpr32common, %stack.9.j, 0, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
  B %bb.15, debug-location !896; cg.c:497:9

bb.17.for.end68:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %110:fpr64 = LDRDui %stack.15.rho, 0, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  %111:fpr64 = LDRDui %stack.13.d, 0, debug-location !900 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  %112:fpr64 = FDIVDrr %110:fpr64, %111:fpr64, debug-location !901; cg.c:504:21
  STRDui %112:fpr64, %stack.17.alpha, 0, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
  STRDui %110:fpr64, %stack.16.rho0, 0, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
  STRXui $xzr, %stack.15.rho, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
  STRWui $wzr, %stack.9.j, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16

bb.18.for.cond69:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

  %115:gpr32 = LDRWui %stack.9.j, 0, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  %117:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  %119:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !912 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  %120:gpr32common = nsw SUBWrr %117:gpr32, %119:gpr32, debug-location !913; cg.c:516:33
  %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !914; cg.c:516:44
  dead $wzr = SUBSWrr %115:gpr32, %121:gpr32common, implicit-def $nzcv, debug-location !916; cg.c:516:9
  Bcc 10, %bb.20, implicit killed $nzcv, debug-location !916; cg.c:516:9
  B %bb.19, debug-location !916; cg.c:516:9

bb.19.for.body73:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)

  %165:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  %166:gpr64 = LDRSWui %stack.9.j, 0, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  %167:gpr64 = UBFMXri %166:gpr64, 61, 60, debug-location !917; cg.c:517:20
  %168:fpr64 = LDRDroX %165:gpr64common, %167:gpr64, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  %169:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  %170:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  %171:fpr64 = LDRDroX %170:gpr64common, %167:gpr64, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  %172:fpr64 = FMULDrr %169:fpr64, %171:fpr64, debug-location !923; cg.c:517:33
  %173:fpr64 = FADDDrr %168:fpr64, %172:fpr64, debug-location !924; cg.c:517:25
  STRDroX %173:fpr64, %165:gpr64common, %167:gpr64, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  %174:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  %175:gpr64 = LDRSWui %stack.9.j, 0, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  %176:gpr64 = UBFMXri %175:gpr64, 61, 60, debug-location !928; cg.c:518:20
  %177:fpr64 = LDRDroX %174:gpr64common, %176:gpr64, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  %178:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  %179:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
  %180:fpr64 = LDRDroX %179:gpr64common, %176:gpr64, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64, debug-location !933; cg.c:518:33
  %182:fpr64 = FSUBDrr %177:fpr64, %181:fpr64, debug-location !934; cg.c:518:25
  STRDroX %182:fpr64, %174:gpr64common, %176:gpr64, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  %183:gpr32common = LDRWui %stack.9.j, 0, debug-location !938 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  %184:gpr32common = nsw ADDWri %183:gpr32common, 1, 0, debug-location !938; cg.c:516:50
  STRWui %184:gpr32common, %stack.9.j, 0, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50
  B %bb.18, debug-location !939; cg.c:516:9

bb.20.for.end92:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  STRWui $wzr, %stack.9.j, 0, debug-location !942 :: (store 4 into %ir.j); cg.c:526:16

bb.21.for.cond93:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

  %124:gpr32 = LDRWui %stack.9.j, 0, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  %126:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  %128:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !948 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  %129:gpr32common = nsw SUBWrr %126:gpr32, %128:gpr32, debug-location !949; cg.c:526:33
  %130:gpr32common = nsw ADDWri %129:gpr32common, 1, 0, debug-location !950; cg.c:526:44
  dead $wzr = SUBSWrr %124:gpr32, %130:gpr32common, implicit-def $nzcv, debug-location !952; cg.c:526:9
  Bcc 10, %bb.23, implicit killed $nzcv, debug-location !952; cg.c:526:9
  B %bb.22, debug-location !952; cg.c:526:9

bb.22.for.body97:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %157:fpr64 = LDRDui %stack.15.rho, 0, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
  %158:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  %159:gpr64common = LDRSWui %stack.9.j, 0, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  %161:fpr64 = LDRDroX %158:gpr64common, %159:gpr64common, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  %162:fpr64 = FMULDrr %161:fpr64, %161:fpr64, debug-location !959; cg.c:527:30
  %163:fpr64 = FADDDrr %157:fpr64, %162:fpr64, debug-location !960; cg.c:527:23
  STRDui %163:fpr64, %stack.15.rho, 0, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
  %164:gpr32common = nsw ADDWri %159.sub_32:gpr64common, 1, 0, debug-location !962; cg.c:526:50
  STRWui %164:gpr32common, %stack.9.j, 0, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
  B %bb.21, debug-location !963; cg.c:526:9

bb.23.for.end106:
; predecessors: %bb.21
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %132:fpr64 = LDRDui %stack.15.rho, 0, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
  %133:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !967 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
  %134:fpr64 = FDIVDrr %132:fpr64, %133:fpr64, debug-location !968; cg.c:533:20
  STRDui %134:fpr64, %stack.18.beta, 0, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
  STRWui $wzr, %stack.9.j, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16

bb.24.for.cond108:
; predecessors: %bb.23, %bb.25
  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)

  %136:gpr32 = LDRWui %stack.9.j, 0, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  %138:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  %140:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !976 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  %141:gpr32common = nsw SUBWrr %138:gpr32, %140:gpr32, debug-location !977; cg.c:538:33
  %142:gpr32common = nsw ADDWri %141:gpr32common, 1, 0, debug-location !978; cg.c:538:44
  dead $wzr = SUBSWrr %136:gpr32, %142:gpr32common, implicit-def $nzcv, debug-location !980; cg.c:538:9
  Bcc 10, %bb.26, implicit killed $nzcv, debug-location !980; cg.c:538:9
  B %bb.25, debug-location !980; cg.c:538:9

bb.25.for.body112:
; predecessors: %bb.24
  successors: %bb.24(0x80000000); %bb.24(100.00%)

  %146:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  %147:gpr64 = LDRSWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  %148:gpr64 = UBFMXri %147:gpr64, 61, 60, debug-location !981; cg.c:539:20
  %149:fpr64 = LDRDroX %146:gpr64common, %148:gpr64, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  %150:fpr64 = LDRDui %stack.18.beta, 0, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  %151:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  %152:fpr64 = LDRDroX %151:gpr64common, %148:gpr64, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  %153:fpr64 = FMULDrr %150:fpr64, %152:fpr64, debug-location !987; cg.c:539:32
  %154:fpr64 = FADDDrr %149:fpr64, %153:fpr64, debug-location !988; cg.c:539:25
  STRDroX %154:fpr64, %151:gpr64common, %148:gpr64, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  %155:gpr32common = LDRWui %stack.9.j, 0, debug-location !992 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  %156:gpr32common = nsw ADDWri %155:gpr32common, 1, 0, debug-location !992; cg.c:538:50
  STRWui %156:gpr32common, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50
  B %bb.24, debug-location !993; cg.c:538:9

bb.26.for.inc124:
; predecessors: %bb.24
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %144:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0, debug-location !996; cg.c:434:41
  STRWui %145:gpr32common, %stack.11.cgit, 0, debug-location !996 :: (store 4 into %ir.cgit); cg.c:434:41
  B %bb.7, debug-location !997; cg.c:434:5

bb.27.for.end126:
; predecessors: %bb.7
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  STRXui $xzr, %stack.14.sum, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
  STRWui $wzr, %stack.9.j, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
  %34:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
  %36:gpr64temp = ADRP target-flags(aarch64-page) @firstrow

bb.28.for.cond127:
; predecessors: %bb.27, %bb.32
  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)

  %33:gpr32 = LDRWui %stack.9.j, 0, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  %35:gpr32 = LDRWui %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !1007 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  %38:gpr32common = nsw SUBWrr %35:gpr32, %37:gpr32, debug-location !1008; cg.c:549:29
  %39:gpr32common = nsw ADDWri %38:gpr32common, 1, 0, debug-location !1009; cg.c:549:40
  dead $wzr = SUBSWrr %33:gpr32, %39:gpr32common, implicit-def $nzcv, debug-location !1011; cg.c:549:5
  Bcc 10, %bb.33, implicit killed $nzcv, debug-location !1011; cg.c:549:5
  B %bb.29, debug-location !1011; cg.c:549:5

bb.29.for.body131:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  STRXui $xzr, %stack.13.d, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
  %65:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  %66:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  %67:gpr32 = LDRWroX %65:gpr64common, %66:gpr64, 0, 1, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  STRWui %67:gpr32, %stack.10.k, 0, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16

bb.30.for.cond134:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

  %68:gpr32 = LDRWui %stack.10.k, 0, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  %69:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  %70:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  %71:gpr64common = ADDXrs %69:gpr64, %70:gpr64, 2, debug-location !1021; cg.c:551:33
  %72:gpr32 = LDRWui %71:gpr64common, 1, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  dead $wzr = SUBSWrr %68:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !1025; cg.c:551:9
  Bcc 10, %bb.32, implicit killed $nzcv, debug-location !1025; cg.c:551:9
  B %bb.31, debug-location !1025; cg.c:551:9

bb.31.for.body139:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  %79:fpr64 = LDRDui %stack.13.d, 0, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
  %80:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
  %81:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  %83:fpr64 = LDRDroX %80:gpr64common, %81:gpr64common, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  %84:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
  %85:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  %86:gpr64 = LDRSWroX %85:gpr64common, %81:gpr64common, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  %87:fpr64 = LDRDroX %84:gpr64common, %86:gpr64, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  %88:fpr64 = FMULDrr %83:fpr64, %87:fpr64, debug-location !1033; cg.c:552:26
  %89:fpr64 = FADDDrr %79:fpr64, %88:fpr64, debug-location !1034; cg.c:552:19
  STRDui %89:fpr64, %stack.13.d, 0, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
  %90:gpr32common = nsw ADDWri %81.sub_32:gpr64common, 1, 0, debug-location !1036; cg.c:551:49
  STRWui %90:gpr32common, %stack.10.k, 0, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
  B %bb.30, debug-location !1037; cg.c:551:9

bb.32.for.end150:
; predecessors: %bb.30
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  %74:fpr64 = LDRDui %stack.13.d, 0, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  %75:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  %76:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  STRDroX %74:fpr64, %75:gpr64common, %76:gpr64, 0, 1, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  %77:gpr32common = LDRWui %stack.9.j, 0, debug-location !1044 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !1044; cg.c:549:46
  STRWui %78:gpr32common, %stack.9.j, 0, debug-location !1044 :: (store 4 into %ir.j); cg.c:549:46
  B %bb.28, debug-location !1045; cg.c:549:5

bb.33.for.end155:
; predecessors: %bb.28
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  STRWui $wzr, %stack.9.j, 0, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
  %43:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  %45:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

bb.34.for.cond156:
; predecessors: %bb.33, %bb.35
  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)

  %42:gpr32 = LDRWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  %44:gpr32 = LDRWui %43:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  %46:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1054 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  %47:gpr32common = nsw SUBWrr %44:gpr32, %46:gpr32, debug-location !1055; cg.c:560:29
  %48:gpr32common = nsw ADDWri %47:gpr32common, 1, 0, debug-location !1056; cg.c:560:40
  dead $wzr = SUBSWrr %42:gpr32, %48:gpr32common, implicit-def $nzcv, debug-location !1058; cg.c:560:5
  Bcc 10, %bb.36, implicit killed $nzcv, debug-location !1058; cg.c:560:5
  B %bb.35, debug-location !1058; cg.c:560:5

bb.35.for.body160:
; predecessors: %bb.34
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  %52:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  %53:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  %55:gpr64 = UBFMXri %53:gpr64common, 61, 60, debug-location !1059; cg.c:561:13
  %56:fpr64 = LDRDroX %52:gpr64common, %55:gpr64, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  %57:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  %58:fpr64 = LDRDroX %57:gpr64common, %55:gpr64, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  %59:fpr64 = FSUBDrr %56:fpr64, %58:fpr64, debug-location !1064; cg.c:561:18
  STRDui %59:fpr64, %stack.13.d, 0, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
  %60:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  %61:fpr64 = FMULDrr %59:fpr64, %59:fpr64, debug-location !1069; cg.c:562:23
  %62:fpr64 = FADDDrr %60:fpr64, %61:fpr64, debug-location !1070; cg.c:562:19
  STRDui %62:fpr64, %stack.14.sum, 0, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
  %63:gpr32common = nsw ADDWri %53.sub_32:gpr64common, 1, 0, debug-location !1072; cg.c:560:46
  STRWui %63:gpr32common, %stack.9.j, 0, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
  B %bb.34, debug-location !1073; cg.c:560:5

bb.36.for.end170:
; predecessors: %bb.34
  successors: %bb.38(0x50000000), %bb.37(0x30000000); %bb.38(62.50%), %bb.37(37.50%)

  %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  %248:fpr64 = FSQRTDr %0:fpr64, debug-location !1077; cg.c:565:14
  FCMPDrr %248:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !1078; cg.c:565:6
  Bcc 7, %bb.38, implicit killed $nzcv, debug-location !1078; cg.c:565:6
  B %bb.37, debug-location !1078; cg.c:565:6

bb.37.call.sqrt:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1078; cg.c:565:6
  $d0 = COPY %0:fpr64, debug-location !1078; cg.c:565:6
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !1078; cg.c:565:6
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1078; cg.c:565:6
  %248:fpr64 = COPY killed $d0, debug-location !1078; cg.c:565:6

bb.38.for.end170.split:
; predecessors: %bb.36, %bb.37

  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1078; cg.c:565:6
  PCN_STACKMAP 0, 0, 0, %fixed-stack.0, 0, %0:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1078 :: (load 8 from %fixed-stack.0, align 16); cg.c:565:6
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1078; cg.c:565:6
  %51:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  STRDui %248:fpr64, %51:gpr64common, 0, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
  RET_ReallyLR debug-location !1080; cg.c:566:1

# End machine code for function conj_grad.

********** MI Scheduling **********
conj_grad:%bb.0 entry
  From: %9:gpr64 = COPY $x5
    To: End RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=6
Live In: W0 W1 W2 W3 W4 W5 
Live Out: %14 
Live Thru: 
  LiveReg: %14
Top Pressure:
GPR32=6
Bottom Pressure:
GPR64temp=1
GPR32=1
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %9:gpr64 = COPY $x5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%9
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %8:gpr64 = COPY $x4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%8
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %7:gpr64 = COPY $x3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%7
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %6:gpr64 = COPY $x2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%6
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %5:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%5
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %4:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   STRXui %4:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   STRXui %5:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%5
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   STRXui %6:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%6
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   STRXui %7:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%7
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   STRXui %8:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%8
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   STRXui %9:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%9
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %10:gpr32 = MOVi32imm 25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(13): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   STRWui %10:gpr32, %stack.12.cgitmax, 0, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   STRXui $xzr, %stack.15.rho, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   STRWui $wzr, %stack.9.j, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   %14:gpr64temp = ADRP target-flags(aarch64-page) @naa
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 12 14 15 16 
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %9:gpr64 = COPY $x5
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 16 1 2 3 4 5 12 14 15 11 
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %8:gpr64 = COPY $x4
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 16 11 2 3 4 5 12 14 15 10 
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %7:gpr64 = COPY $x3
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 16 11 10 3 4 5 12 14 15 9 
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %6:gpr64 = COPY $x2
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 16 11 10 9 4 5 12 14 15 8 
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %5:gpr64 = COPY $x1
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 16 11 10 9 8 5 12 14 15 7 
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(5) PHYS-REG                           
  Cand SU(5) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(5) %4:gpr64 = COPY $x0
Top Pressure:
GPR32=6
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 15 14 13 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 16 11 10 9 8 7 12 14 15 6 
Picking from Bot:
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(16) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %14:gpr64temp = ADRP target-flags(aarch64-page) @naa
Bottom Pressure:

  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 15 14 13 11 10 9 8 7 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 12 14 15 
BotQ.A RemLatency SU(13) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(13) BOT-PATH                  1 cycles 
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(13) STRWui %10:gpr32, %stack.12.cgitmax, 0, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
Bottom Pressure:
GPR32=1
  LiveReg: %10
  UpdateRegP: SU(13) STRWui %10:gpr32, %stack.12.cgitmax, 0, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
              to 
  Ready @1c
  BotQ.A TopLatency SU(13) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 15 14 7 11 10 9 8 12 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 12 14 15 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) STRWui $wzr, %stack.9.j, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
Bottom Pressure:
GPR32=1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 14 7 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 12 14 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) STRXui $xzr, %stack.15.rho, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
Bottom Pressure:
GPR32=1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 12 8 7 11 10 9 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 12 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) %10:gpr32 = MOVi32imm 25
Bottom Pressure:

  Ready @4c
  BotQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 8 7 11 10 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 
  BotQ.A RemainingLatency 0 + 5c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRXui %9:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
Bottom Pressure:
GPR32=1
  LiveReg: %9
  UpdateRegP: SU(11) STRXui %9:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
              to 
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 8 7 10 
Queue TopQ.P: 
Queue TopQ.A: 6 7 10 9 8 
  BotQ.A RemainingLatency 0 + 6c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRXui %8:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
Bottom Pressure:
GPR32=2
  LiveReg: %8
  UpdateRegP: SU(10) STRXui %8:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 9 8 7 
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 9 
  BotQ.A RemainingLatency 0 + 7c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRXui %7:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
Bottom Pressure:
GPR32=3
  LiveReg: %7
  UpdateRegP: SU(9) STRXui %7:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
              to 
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 
  BotQ.A RemainingLatency 0 + 8c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRXui %6:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
Bottom Pressure:
GPR32=4
  LiveReg: %6
  UpdateRegP: SU(8) STRXui %6:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
              to 
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  BotQ.A RemainingLatency 0 + 9c > CritPath 1
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) STRXui %5:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
GPR32=5
  LiveReg: %5
  UpdateRegP: SU(7) STRXui %5:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRXui %4:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
GPR32=6
  LiveReg: %4
  UpdateRegP: SU(6) STRXui %4:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %9:gpr64 = COPY $x5
SU(1):   %8:gpr64 = COPY $x4
SU(2):   %7:gpr64 = COPY $x3
SU(3):   %6:gpr64 = COPY $x2
SU(4):   %5:gpr64 = COPY $x1
SU(5):   %4:gpr64 = COPY $x0
SU(6):   STRXui %4:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
SU(7):   STRXui %5:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
SU(8):   STRXui %6:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
SU(9):   STRXui %7:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
SU(10):   STRXui %8:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
SU(11):   STRXui %9:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
SU(12):   %10:gpr32 = MOVi32imm 25
SU(14):   STRXui $xzr, %stack.15.rho, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
SU(15):   STRWui $wzr, %stack.9.j, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
SU(13):   STRWui %10:gpr32, %stack.12.cgitmax, 0, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
SU(16):   %14:gpr64temp = ADRP target-flags(aarch64-page) @naa

********** MI Scheduling **********
conj_grad:%bb.1 for.cond
  From: %13:gpr32 = LDRWui %stack.9.j, 0, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
    To: Bcc 10, %bb.3, implicit killed $nzcv, debug-location !772; cg.c:414:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %13:gpr32 = LDRWui %stack.9.j, 0, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%13
  Single Issue       : false;
SU(1):   %15:gpr32common = LDRWui %14:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%15
  Single Issue       : false;
SU(2):   %16:gpr32common = nsw ADDWri %15:gpr32common, 1, 0, debug-location !770; cg.c:414:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%15
  Successors:
    SU(3): Data Latency=1 Reg=%16
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWrr %13:gpr32, %16:gpr32common, implicit-def $nzcv, debug-location !772; cg.c:414:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%16
    SU(0): Data Latency=4 Reg=%13
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.3, implicit killed $nzcv, debug-location !772; cg.c:414:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWrr %13:gpr32, %16:gpr32common, implicit-def $nzcv, debug-location !772; cg.c:414:5
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %16:gpr32common = nsw ADDWri %15:gpr32common, 1, 0, debug-location !770; cg.c:414:25
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %13:gpr32 = LDRWui %stack.9.j, 0, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %15:gpr32common = LDRWui %14:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   %15:gpr32common = LDRWui %14:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
SU(0):   %13:gpr32 = LDRWui %stack.9.j, 0, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
SU(2):   %16:gpr32common = nsw ADDWri %15:gpr32common, 1, 0, debug-location !770; cg.c:414:25
SU(3):   dead $wzr = SUBSWrr %13:gpr32, %16:gpr32common, implicit-def $nzcv, debug-location !772; cg.c:414:5

********** MI Scheduling **********
conj_grad:%bb.2 for.body
  From: %231:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
    To: B %bb.1, debug-location !791; cg.c:414:5
 RegionInstrs: 21
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %231:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
    SU(2): Data Latency=4 Reg=%231
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %232:gpr64 = LDRSWui %stack.9.j, 0, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
    SU(2): Data Latency=4 Reg=%232
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRXroX $xzr, %231:gpr64common, %232:gpr64, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
  # preds left       : 4
  # succs left       : 15
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 31
  Predecessors:
    SU(1): Data Latency=4 Reg=%232
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%231
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(3):   %234:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%234
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %235:gpr64 = LDRSWui %stack.9.j, 0, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  # preds left       : 1
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%235
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRXroX $xzr, %234:gpr64common, %235:gpr64, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  # preds left       : 7
  # succs left       : 12
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 26
  Predecessors:
    SU(4): Data Latency=4 Reg=%235
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%234
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(6):   %236:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 24
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%236
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %237:gpr64 = LDRSWui %stack.9.j, 0, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 25
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%237
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %238:gpr64 = UBFMXri %237:gpr64, 61, 60, debug-location !780; cg.c:417:16
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 21
  Predecessors:
    SU(7): Data Latency=4 Reg=%237
  Successors:
    SU(11): Data Latency=1 Reg=%238
    SU(9): Data Latency=1 Reg=%238
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %239:fpr64 = LDRDroX %236:gpr64common, %238:gpr64, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 20
  Predecessors:
    SU(8): Data Latency=1 Reg=%238
    SU(6): Data Latency=4 Reg=%236
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%239
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %240:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 20
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%240
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   STRDroX %239:fpr64, %240:gpr64common, %238:gpr64, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  # preds left       : 13
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 16
  Predecessors:
    SU(8): Data Latency=1 Reg=%238
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=%239
    SU(9): Ord  Latency=0 Memory
    SU(10): Data Latency=4 Reg=%240
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(12):   %241:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 14
  Predecessors:
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%241
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   %242:gpr64 = LDRSWui %stack.9.j, 0, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 15
  Predecessors:
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%242
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %243:gpr64 = UBFMXri %242:gpr64, 61, 60, debug-location !785; cg.c:418:16
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 11
  Predecessors:
    SU(13): Data Latency=4 Reg=%242
  Successors:
    SU(17): Data Latency=1 Reg=%243
    SU(15): Data Latency=1 Reg=%243
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   %244:fpr64 = LDRDroX %241:gpr64common, %243:gpr64, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
    SU(14): Data Latency=1 Reg=%243
    SU(12): Data Latency=4 Reg=%241
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=%244
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(16):   %245:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 10
  Predecessors:
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=%245
    SU(17): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   STRDroX %244:fpr64, %245:gpr64common, %243:gpr64, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  # preds left       : 18
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 6
  Predecessors:
    SU(14): Data Latency=1 Reg=%243
    SU(16): Ord  Latency=0 Memory
    SU(15): Data Latency=4 Reg=%244
    SU(15): Ord  Latency=0 Memory
    SU(16): Data Latency=4 Reg=%245
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   %246:gpr32common = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 5
  Predecessors:
    SU(17): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%246
    SU(20): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(19):   %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0, debug-location !790; cg.c:414:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 1
  Predecessors:
    SU(18): Data Latency=4 Reg=%246
  Successors:
    SU(20): Data Latency=1 Reg=%247
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   STRWui %247:gpr32common, %stack.9.j, 0, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31
  # preds left       : 12
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%247
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !791; cg.c:414:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 35
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) STRWui %247:gpr32common, %stack.9.j, 0, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31
Bottom Pressure:
GPR32=1
  LiveReg: %247
  UpdateRegP: SU(20) STRWui %247:gpr32common, %stack.9.j, 0, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31
              to 
  Ready @0c
  BotQ.A TopLatency SU(20) 35c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Pick Bot ONLY1     
Scheduling SU(19) %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0, debug-location !790; cg.c:414:31
Bottom Pressure:
GPR32=1
  LiveReg: %246
  UpdateRegP: SU(19) %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0, debug-location !790; cg.c:414:31
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 18 
Pick Bot ONLY1     
Scheduling SU(18) %246:gpr32common = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(18) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 17 
Pick Bot ONLY1     
Scheduling SU(17) STRDroX %244:fpr64, %245:gpr64common, %243:gpr64, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %244
  UpdateRegP: SU(17) STRDroX %244:fpr64, %245:gpr64common, %243:gpr64, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to GPR32 2
  LiveReg: %245
  UpdateRegP: SU(17) STRDroX %244:fpr64, %245:gpr64common, %243:gpr64, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to GPR32 1
  LiveReg: %243
  UpdateRegP: SU(15) %244:fpr64 = LDRDroX %241:gpr64common, %243:gpr64, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(17) STRDroX %244:fpr64, %245:gpr64common, %243:gpr64, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
              to 
  Ready @6c
  BotQ.A BotLatency SU(17) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 15 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(15) 25c
Picking from Bot:
  Cand SU(15) ORDER                              
  Cand SU(16) REG-MAX                            
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(16) %245:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @10c
  BotQ.A BotLatency SU(16) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Pick Bot ONLY1     
Scheduling SU(15) %244:fpr64 = LDRDroX %241:gpr64common, %243:gpr64, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
Bottom Pressure:
GPR32=2
  LiveReg: %241
  UpdateRegP: SU(15) %244:fpr64 = LDRDroX %241:gpr64common, %243:gpr64, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A TopLatency SU(15) 25c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) %243:gpr64 = UBFMXri %242:gpr64, 61, 60, debug-location !785; cg.c:418:16
Bottom Pressure:
GPR32=2
  LiveReg: %242
  UpdateRegP: SU(14) %243:gpr64 = UBFMXri %242:gpr64, 61, 60, debug-location !785; cg.c:418:16
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(14) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 13 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %241:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
Bottom Pressure:
GPR32=1
  Ready @15c
  BotQ.A BotLatency SU(12) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 8
  Executed: 16c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) %242:gpr64 = LDRSWui %stack.9.j, 0, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
Bottom Pressure:

  Ready @16c
  BotQ.A BotLatency SU(13) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) STRDroX %239:fpr64, %240:gpr64common, %238:gpr64, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %239
  UpdateRegP: SU(11) STRDroX %239:fpr64, %240:gpr64common, %238:gpr64, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to GPR32 2
  LiveReg: %240
  UpdateRegP: SU(11) STRDroX %239:fpr64, %240:gpr64common, %238:gpr64, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to GPR32 1
  LiveReg: %238
  UpdateRegP: SU(9) %239:fpr64 = LDRDroX %236:gpr64common, %238:gpr64, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(11) STRDroX %239:fpr64, %240:gpr64common, %238:gpr64, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
              to 
  Ready @17c
  BotQ.A BotLatency SU(11) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 10
  Executed: 18c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 21 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(9) 15c
  BotQ.A RemainingLatency 15 + 21c > CritPath 35
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(10) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(10) %240:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @21c
  BotQ.A BotLatency SU(10) 20c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 11
  Executed: 22c
  Critical: 11c, 11 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %239:fpr64 = LDRDroX %236:gpr64common, %238:gpr64, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
Bottom Pressure:
GPR32=2
  LiveReg: %236
  UpdateRegP: SU(9) %239:fpr64 = LDRDroX %236:gpr64common, %238:gpr64, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @22c
  BotQ.A TopLatency SU(9) 15c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 12
  Executed: 23c
  Critical: 12c, 12 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %238:gpr64 = UBFMXri %237:gpr64, 61, 60, debug-location !780; cg.c:417:16
Bottom Pressure:
GPR32=2
  LiveReg: %237
  UpdateRegP: SU(8) %238:gpr64 = UBFMXri %237:gpr64, 61, 60, debug-location !780; cg.c:417:16
              to GPR32 -1
  Ready @23c
  BotQ.A BotLatency SU(8) 21c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 13
  Executed: 24c
  Critical: 13c, 13 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 26 BotQ.A
Queue BotQ.P: 7 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %236:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
Bottom Pressure:
GPR32=1
  Ready @26c
  BotQ.A BotLatency SU(6) 24c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 14
  Executed: 27c
  Critical: 14c, 14 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %237:gpr64 = LDRSWui %stack.9.j, 0, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
Bottom Pressure:

  Ready @27c
  BotQ.A BotLatency SU(7) 25c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 15
  Executed: 28c
  Critical: 15c, 15 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRXroX $xzr, %234:gpr64common, %235:gpr64, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
Bottom Pressure:
GPR32=2
  LiveReg: %234
  UpdateRegP: SU(5) STRXroX $xzr, %234:gpr64common, %235:gpr64, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
              to GPR32 1
  LiveReg: %235
  UpdateRegP: SU(5) STRXroX $xzr, %234:gpr64common, %235:gpr64, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
              to 
  Ready @28c
  BotQ.A BotLatency SU(5) 26c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 16
  Executed: 29c
  Critical: 16c, 16 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 32 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 32c > CritPath 35
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %235:gpr64 = LDRSWui %stack.9.j, 0, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
Bottom Pressure:
GPR32=1
  Ready @32c
  BotQ.A BotLatency SU(4) 30c
  *** Max MOps 1 at cycle 32
Cycle: 33 BotQ.A
BotQ.A @33c
  Retired: 17
  Executed: 33c
  Critical: 17c, 17 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %234:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
Bottom Pressure:

  Ready @33c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 33
Cycle: 34 BotQ.A
BotQ.A @34c
  Retired: 18
  Executed: 34c
  Critical: 18c, 18 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRXroX $xzr, %231:gpr64common, %232:gpr64, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
Bottom Pressure:
GPR32=2
  LiveReg: %231
  UpdateRegP: SU(2) STRXroX $xzr, %231:gpr64common, %232:gpr64, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
              to GPR32 1
  LiveReg: %232
  UpdateRegP: SU(2) STRXroX $xzr, %231:gpr64common, %232:gpr64, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
              to 
  Ready @34c
  BotQ.A BotLatency SU(2) 31c
  *** Max MOps 1 at cycle 34
Cycle: 35 BotQ.A
BotQ.A @35c
  Retired: 19
  Executed: 35c
  Critical: 19c, 19 MOps
  ExpectedLatency: 31c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 38 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 38c > CritPath 35
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %232:gpr64 = LDRSWui %stack.9.j, 0, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
Bottom Pressure:
GPR32=1
  Ready @38c
  BotQ.A BotLatency SU(1) 35c
  *** Max MOps 1 at cycle 38
Cycle: 39 BotQ.A
BotQ.A @39c
  Retired: 20
  Executed: 39c
  Critical: 20c, 20 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %231:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
Bottom Pressure:

  Ready @39c
  *** Max MOps 1 at cycle 39
Cycle: 40 BotQ.A
BotQ.A @40c
  Retired: 21
  Executed: 40c
  Critical: 21c, 21 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %231:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
SU(1):   %232:gpr64 = LDRSWui %stack.9.j, 0, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
SU(2):   STRXroX $xzr, %231:gpr64common, %232:gpr64, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
SU(3):   %234:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
SU(4):   %235:gpr64 = LDRSWui %stack.9.j, 0, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
SU(5):   STRXroX $xzr, %234:gpr64common, %235:gpr64, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
SU(7):   %237:gpr64 = LDRSWui %stack.9.j, 0, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
SU(6):   %236:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
SU(8):   %238:gpr64 = UBFMXri %237:gpr64, 61, 60, debug-location !780; cg.c:417:16
SU(9):   %239:fpr64 = LDRDroX %236:gpr64common, %238:gpr64, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
SU(10):   %240:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
SU(11):   STRDroX %239:fpr64, %240:gpr64common, %238:gpr64, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
SU(13):   %242:gpr64 = LDRSWui %stack.9.j, 0, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
SU(12):   %241:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
SU(14):   %243:gpr64 = UBFMXri %242:gpr64, 61, 60, debug-location !785; cg.c:418:16
SU(15):   %244:fpr64 = LDRDroX %241:gpr64common, %243:gpr64, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
SU(16):   %245:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
SU(17):   STRDroX %244:fpr64, %245:gpr64common, %243:gpr64, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
SU(18):   %246:gpr32common = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
SU(19):   %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0, debug-location !790; cg.c:414:31
SU(20):   STRWui %247:gpr32common, %stack.9.j, 0, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31

********** MI Scheduling **********
conj_grad:%bb.3 for.end
  From: STRWui $wzr, %stack.9.j, 0, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.9.j, 0, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %20:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %22:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %22:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %20:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.9.j, 0, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.9.j, 0, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
SU(1):   %20:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
SU(2):   %22:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

********** MI Scheduling **********
conj_grad:%bb.4 for.cond11
  From: %19:gpr32 = LDRWui %stack.9.j, 0, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
    To: Bcc 10, %bb.6, implicit killed $nzcv, debug-location !804; cg.c:425:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %19:gpr32 = LDRWui %stack.9.j, 0, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(1):   %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%21
  Single Issue       : false;
SU(2):   %23:gpr32 = LDRWui %22:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !800 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%23
  Single Issue       : false;
SU(3):   %24:gpr32common = nsw SUBWrr %21:gpr32, %23:gpr32, debug-location !801; cg.c:425:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%23
    SU(1): Data Latency=4 Reg=%21
  Successors:
    SU(4): Data Latency=1 Reg=%24
  Single Issue       : false;
SU(4):   %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !802; cg.c:425:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%24
  Successors:
    SU(5): Data Latency=1 Reg=%25
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %19:gpr32, %25:gpr32common, implicit-def $nzcv, debug-location !804; cg.c:425:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%25
    SU(0): Data Latency=4 Reg=%19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.6, implicit killed $nzcv, debug-location !804; cg.c:425:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %19:gpr32, %25:gpr32common, implicit-def $nzcv, debug-location !804; cg.c:425:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !802; cg.c:425:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %24:gpr32common = nsw SUBWrr %21:gpr32, %23:gpr32, debug-location !801; cg.c:425:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %19:gpr32 = LDRWui %stack.9.j, 0, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %23:gpr32 = LDRWui %22:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !800 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(1):   %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
SU(2):   %23:gpr32 = LDRWui %22:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !800 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
SU(0):   %19:gpr32 = LDRWui %stack.9.j, 0, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
SU(3):   %24:gpr32common = nsw SUBWrr %21:gpr32, %23:gpr32, debug-location !801; cg.c:425:29
SU(4):   %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !802; cg.c:425:40
SU(5):   dead $wzr = SUBSWrr %19:gpr32, %25:gpr32common, implicit-def $nzcv, debug-location !804; cg.c:425:5

********** MI Scheduling **********
conj_grad:%bb.5 for.body14
  From: %223:fpr64 = LDRDui %stack.15.rho, 0, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
    To: B %bb.4, debug-location !815; cg.c:425:5
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %223:fpr64 = LDRDui %stack.15.rho, 0, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%223
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %224:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%224
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %225:gpr64common = LDRSWui %stack.9.j, 0, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=%225
    SU(3): Data Latency=4 Reg=%225
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %227:fpr64 = LDRDroX %224:gpr64common, %225:gpr64common, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%225
    SU(1): Data Latency=4 Reg=%224
  Successors:
    SU(4): Data Latency=4 Reg=%227
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %228:fpr64 = FMULDrr %227:fpr64, %227:fpr64, debug-location !811; cg.c:426:26
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=%227
  Successors:
    SU(5): Data Latency=1 Reg=%228
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %229:fpr64 = FADDDrr %223:fpr64, %228:fpr64, debug-location !812; cg.c:426:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%228
    SU(0): Data Latency=4 Reg=%223
  Successors:
    SU(6): Data Latency=1 Reg=%229
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   STRDui %229:fpr64, %stack.15.rho, 0, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%229
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   %230:gpr32common = nsw ADDWri %225.sub_32:gpr64common, 1, 0, debug-location !814; cg.c:425:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%225
  Successors:
    SU(8): Data Latency=1 Reg=%230
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   STRWui %230:gpr32common, %stack.9.j, 0, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%230
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !815; cg.c:425:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %230:gpr32common, %stack.9.j, 0, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
Bottom Pressure:
GPR32=1
  LiveReg: %230
  UpdateRegP: SU(8) STRWui %230:gpr32common, %stack.9.j, 0, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRDui %229:fpr64, %stack.15.rho, 0, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %229
  UpdateRegP: SU(6) STRDui %229:fpr64, %stack.15.rho, 0, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
              to 
  Ready @1c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(5) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %229:fpr64 = FADDDrr %223:fpr64, %228:fpr64, debug-location !812; cg.c:426:19
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %223
  UpdateRegP: SU(5) %229:fpr64 = FADDDrr %223:fpr64, %228:fpr64, debug-location !812; cg.c:426:19
              to 
  LiveReg: %228
  UpdateRegP: SU(5) %229:fpr64 = FADDDrr %223:fpr64, %228:fpr64, debug-location !812; cg.c:426:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 8c
  BotQ.A RemainingLatency 8 + 3c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(4) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %228:fpr64 = FMULDrr %227:fpr64, %227:fpr64, debug-location !811; cg.c:426:26
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %227
  UpdateRegP: SU(4) %228:fpr64 = FMULDrr %227:fpr64, %227:fpr64, debug-location !811; cg.c:426:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %230:gpr32common = nsw ADDWri %225.sub_32:gpr64common, 1, 0, debug-location !814; cg.c:425:46
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %225
  UpdateRegP: SU(3) %227:fpr64 = LDRDroX %224:gpr64common, %225:gpr64common, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(7) %230:gpr32common = nsw ADDWri %225.sub_32:gpr64common, 1, 0, debug-location !814; cg.c:425:46
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %223:fpr64 = LDRDui %stack.15.rho, 0, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %227:fpr64 = LDRDroX %224:gpr64common, %225:gpr64common, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
Bottom Pressure:
GPR32=2
  LiveReg: %224
  UpdateRegP: SU(3) %227:fpr64 = LDRDroX %224:gpr64common, %225:gpr64common, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  BotQ.A RemainingLatency 0 + 11c > CritPath 10
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %225:gpr64common = LDRSWui %stack.9.j, 0, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
Bottom Pressure:
GPR32=1
  Ready @11c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %224:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
Bottom Pressure:

  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(1):   %224:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
SU(2):   %225:gpr64common = LDRSWui %stack.9.j, 0, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
SU(3):   %227:fpr64 = LDRDroX %224:gpr64common, %225:gpr64common, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
SU(0):   %223:fpr64 = LDRDui %stack.15.rho, 0, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
SU(7):   %230:gpr32common = nsw ADDWri %225.sub_32:gpr64common, 1, 0, debug-location !814; cg.c:425:46
SU(4):   %228:fpr64 = FMULDrr %227:fpr64, %227:fpr64, debug-location !811; cg.c:426:26
SU(5):   %229:fpr64 = FADDDrr %223:fpr64, %228:fpr64, debug-location !812; cg.c:426:19
SU(6):   STRDui %229:fpr64, %stack.15.rho, 0, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
SU(8):   STRWui %230:gpr32common, %stack.9.j, 0, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46

********** MI Scheduling **********
conj_grad:%bb.6 for.end22
  From: %27:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %27:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%27
  Single Issue       : false;
SU(1):   STRWui %27:gpr32, %stack.11.cgit, 0, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%27
  Single Issue       : false;
SU(2):   %93:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %95:gpr64temp = ADRP target-flags(aarch64-page) @firstrow
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   %103:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %105:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %105:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 1c > CritPath 1
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui %27:gpr32, %stack.11.cgit, 0, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
  Ready @1c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 4 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 
  BotQ.A RemainingLatency 0 + 2c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %103:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 
  BotQ.A RemainingLatency 0 + 3c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %95:gpr64temp = ADRP target-flags(aarch64-page) @firstrow
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  BotQ.A RemainingLatency 0 + 4c > CritPath 1
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %93:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %27:gpr32 = MOVi32imm 1
  Ready @5c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %27:gpr32 = MOVi32imm 1
SU(2):   %93:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
SU(3):   %95:gpr64temp = ADRP target-flags(aarch64-page) @firstrow
SU(4):   %103:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
SU(1):   STRWui %27:gpr32, %stack.11.cgit, 0, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
SU(5):   %105:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

********** MI Scheduling **********
conj_grad:%bb.7 for.cond23
  From: %28:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
    To: Bcc 12, %bb.27, implicit killed $nzcv, debug-location !825; cg.c:434:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %28:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%28
  Single Issue       : false;
SU(1):   %29:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !823 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%29
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %28:gpr32, %29:gpr32, implicit-def $nzcv, debug-location !825; cg.c:434:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%29
    SU(0): Data Latency=4 Reg=%28
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.27, implicit killed $nzcv, debug-location !825; cg.c:434:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %28:gpr32, %29:gpr32, implicit-def $nzcv, debug-location !825; cg.c:434:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %29:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !823 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %28:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %28:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
SU(1):   %29:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !823 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
SU(2):   dead $wzr = SUBSWrr %28:gpr32, %29:gpr32, implicit-def $nzcv, debug-location !825; cg.c:434:5

********** MI Scheduling **********
conj_grad:%bb.9 for.cond26
  From: %92:gpr32 = LDRWui %stack.9.j, 0, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
    To: Bcc 10, %bb.14, implicit killed $nzcv, debug-location !837; cg.c:447:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %92:gpr32 = LDRWui %stack.9.j, 0, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%92
  Single Issue       : false;
SU(1):   %94:gpr32 = LDRWui %93:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%94
  Single Issue       : false;
SU(2):   %96:gpr32 = LDRWui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !833 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%96
  Single Issue       : false;
SU(3):   %97:gpr32common = nsw SUBWrr %94:gpr32, %96:gpr32, debug-location !834; cg.c:447:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%96
    SU(1): Data Latency=4 Reg=%94
  Successors:
    SU(4): Data Latency=1 Reg=%97
  Single Issue       : false;
SU(4):   %98:gpr32common = nsw ADDWri %97:gpr32common, 1, 0, debug-location !835; cg.c:447:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%97
  Successors:
    SU(5): Data Latency=1 Reg=%98
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %92:gpr32, %98:gpr32common, implicit-def $nzcv, debug-location !837; cg.c:447:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%98
    SU(0): Data Latency=4 Reg=%92
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.14, implicit killed $nzcv, debug-location !837; cg.c:447:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %92:gpr32, %98:gpr32common, implicit-def $nzcv, debug-location !837; cg.c:447:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %98:gpr32common = nsw ADDWri %97:gpr32common, 1, 0, debug-location !835; cg.c:447:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %97:gpr32common = nsw SUBWrr %94:gpr32, %96:gpr32, debug-location !834; cg.c:447:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %92:gpr32 = LDRWui %stack.9.j, 0, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %96:gpr32 = LDRWui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !833 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %94:gpr32 = LDRWui %93:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(1):   %94:gpr32 = LDRWui %93:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
SU(2):   %96:gpr32 = LDRWui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !833 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
SU(0):   %92:gpr32 = LDRWui %stack.9.j, 0, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
SU(3):   %97:gpr32common = nsw SUBWrr %94:gpr32, %96:gpr32, debug-location !834; cg.c:447:33
SU(4):   %98:gpr32common = nsw ADDWri %97:gpr32common, 1, 0, debug-location !835; cg.c:447:44
SU(5):   dead $wzr = SUBSWrr %92:gpr32, %98:gpr32common, implicit-def $nzcv, debug-location !837; cg.c:447:9

********** MI Scheduling **********
conj_grad:%bb.10 for.body30
  From: STRXui $xzr, %stack.14.sum, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.14.sum, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %197:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%197
  Single Issue       : false;
SU(2):   %198:gpr64 = LDRSWui %stack.9.j, 0, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%198
  Single Issue       : false;
SU(3):   %199:gpr32 = LDRWroX %197:gpr64common, %198:gpr64, 0, 1, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%198
    SU(1): Data Latency=4 Reg=%197
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%199
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %199:gpr32, %stack.10.k, 0, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%199
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %199:gpr32, %stack.10.k, 0, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %199:gpr32 = LDRWroX %197:gpr64common, %198:gpr64, 0, 1, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.14.sum, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %198:gpr64 = LDRSWui %stack.9.j, 0, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %197:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(1):   %197:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
SU(2):   %198:gpr64 = LDRSWui %stack.9.j, 0, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
SU(0):   STRXui $xzr, %stack.14.sum, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
SU(3):   %199:gpr32 = LDRWroX %197:gpr64common, %198:gpr64, 0, 1, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
SU(4):   STRWui %199:gpr32, %stack.10.k, 0, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20

********** MI Scheduling **********
conj_grad:%bb.11 for.cond33
  From: %200:gpr32 = LDRWui %stack.10.k, 0, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
    To: Bcc 10, %bb.13, implicit killed $nzcv, debug-location !851; cg.c:449:13
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %200:gpr32 = LDRWui %stack.10.k, 0, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%200
  Single Issue       : false;
SU(1):   %201:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%201
  Single Issue       : false;
SU(2):   %202:gpr64 = LDRSWui %stack.9.j, 0, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%202
  Single Issue       : false;
SU(3):   %203:gpr64common = ADDXrs %201:gpr64, %202:gpr64, 2, debug-location !847; cg.c:449:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%202
    SU(1): Data Latency=4 Reg=%201
  Successors:
    SU(4): Data Latency=1 Reg=%203
  Single Issue       : false;
SU(4):   %204:gpr32 = LDRWui %203:gpr64common, 1, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%203
  Successors:
    SU(5): Data Latency=4 Reg=%204
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %200:gpr32, %204:gpr32, implicit-def $nzcv, debug-location !851; cg.c:449:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%204
    SU(0): Data Latency=4 Reg=%200
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.13, implicit killed $nzcv, debug-location !851; cg.c:449:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %200:gpr32, %204:gpr32, implicit-def $nzcv, debug-location !851; cg.c:449:13
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %204:gpr32 = LDRWui %203:gpr64common, 1, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %203:gpr64common = ADDXrs %201:gpr64, %202:gpr64, 2, debug-location !847; cg.c:449:37
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %200:gpr32 = LDRWui %stack.10.k, 0, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %202:gpr64 = LDRSWui %stack.9.j, 0, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %201:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(1):   %201:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
SU(2):   %202:gpr64 = LDRSWui %stack.9.j, 0, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
SU(0):   %200:gpr32 = LDRWui %stack.10.k, 0, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
SU(3):   %203:gpr64common = ADDXrs %201:gpr64, %202:gpr64, 2, debug-location !847; cg.c:449:37
SU(4):   %204:gpr32 = LDRWui %203:gpr64common, 1, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:37
SU(5):   dead $wzr = SUBSWrr %200:gpr32, %204:gpr32, implicit-def $nzcv, debug-location !851; cg.c:449:13

********** MI Scheduling **********
conj_grad:%bb.12 for.body38
  From: %211:fpr64 = LDRDui %stack.14.sum, 0, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
    To: B %bb.11, debug-location !863; cg.c:449:13
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %211:fpr64 = LDRDui %stack.14.sum, 0, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%211
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %212:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%212
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %213:gpr64common = LDRSWui %stack.10.k, 0, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(11): Data Latency=4 Reg=%213
    SU(6): Data Latency=4 Reg=%213
    SU(3): Data Latency=4 Reg=%213
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %215:fpr64 = LDRDroX %212:gpr64common, %213:gpr64common, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%213
    SU(1): Data Latency=4 Reg=%212
  Successors:
    SU(8): Data Latency=4 Reg=%215
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %216:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=%216
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %217:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(6): Data Latency=4 Reg=%217
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %218:gpr64 = LDRSWroX %217:gpr64common, %213:gpr64common, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(5): Data Latency=4 Reg=%217
    SU(2): Data Latency=4 Reg=%213
  Successors:
    SU(7): Data Latency=4 Reg=%218
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %219:fpr64 = LDRDroX %216:gpr64common, %218:gpr64, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=%218
    SU(4): Data Latency=4 Reg=%216
  Successors:
    SU(8): Data Latency=4 Reg=%219
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %220:fpr64 = FMULDrr %215:fpr64, %219:fpr64, debug-location !859; cg.c:450:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(7): Data Latency=4 Reg=%219
    SU(3): Data Latency=4 Reg=%215
  Successors:
    SU(9): Data Latency=1 Reg=%220
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   %221:fpr64 = FADDDrr %211:fpr64, %220:fpr64, debug-location !860; cg.c:450:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%220
    SU(0): Data Latency=4 Reg=%211
  Successors:
    SU(10): Data Latency=1 Reg=%221
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   STRDui %221:fpr64, %stack.14.sum, 0, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%221
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   %222:gpr32common = nsw ADDWri %213.sub_32:gpr64common, 1, 0, debug-location !862; cg.c:449:53
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%213
  Successors:
    SU(12): Data Latency=1 Reg=%222
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   STRWui %222:gpr32common, %stack.10.k, 0, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%222
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.11, debug-location !863; cg.c:449:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %222:gpr32common, %stack.10.k, 0, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
Bottom Pressure:
GPR32=1
  LiveReg: %222
  UpdateRegP: SU(12) STRWui %222:gpr32common, %stack.10.k, 0, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
              to 
  Ready @0c
  BotQ.A TopLatency SU(12) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
BotQ.A RemLatency SU(10) 14c
  BotQ.A RemainingLatency 14 + 1c > CritPath 14
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRDui %221:fpr64, %stack.14.sum, 0, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %221
  UpdateRegP: SU(10) STRDui %221:fpr64, %stack.14.sum, 0, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
              to 
  Ready @1c
  BotQ.A TopLatency SU(10) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
BotQ.A RemLatency SU(9) 13c
  BotQ.A RemainingLatency 13 + 2c > CritPath 14
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(9) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %221:fpr64 = FADDDrr %211:fpr64, %220:fpr64, debug-location !860; cg.c:450:27
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %211
  UpdateRegP: SU(9) %221:fpr64 = FADDDrr %211:fpr64, %220:fpr64, debug-location !860; cg.c:450:27
              to 
  LiveReg: %220
  UpdateRegP: SU(9) %221:fpr64 = FADDDrr %211:fpr64, %220:fpr64, debug-location !860; cg.c:450:27
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 11 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
BotQ.A RemLatency SU(8) 12c
  BotQ.A RemainingLatency 12 + 3c > CritPath 14
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(8) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %220:fpr64 = FMULDrr %215:fpr64, %219:fpr64, debug-location !859; cg.c:450:34
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %215
  UpdateRegP: SU(8) %220:fpr64 = FMULDrr %215:fpr64, %219:fpr64, debug-location !859; cg.c:450:34
              to 
  LiveReg: %219
  UpdateRegP: SU(8) %220:fpr64 = FMULDrr %215:fpr64, %219:fpr64, debug-location !859; cg.c:450:34
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 7 3 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %222:gpr32common = nsw ADDWri %213.sub_32:gpr64common, 1, 0, debug-location !862; cg.c:449:53
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %213
  UpdateRegP: SU(3) %215:fpr64 = LDRDroX %212:gpr64common, %213:gpr64common, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(6) %218:gpr64 = LDRSWroX %217:gpr64common, %213:gpr64common, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
              to 
  UpdateRegP: SU(11) %222:gpr32common = nsw ADDWri %213.sub_32:gpr64common, 1, 0, debug-location !862; cg.c:449:53
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 3 7 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %211:fpr64 = LDRDui %stack.14.sum, 0, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
BotQ.A RemLatency SU(7) 8c
  BotQ.A RemainingLatency 8 + 7c > CritPath 14
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(7) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(7) %219:fpr64 = LDRDroX %216:gpr64common, %218:gpr64, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %216
  UpdateRegP: SU(7) %219:fpr64 = LDRDroX %216:gpr64common, %218:gpr64, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %218
  UpdateRegP: SU(7) %219:fpr64 = LDRDroX %216:gpr64common, %218:gpr64, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %215:fpr64 = LDRDroX %212:gpr64common, %213:gpr64common, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
Bottom Pressure:
GPR32=4
  LiveReg: %212
  UpdateRegP: SU(3) %215:fpr64 = LDRDroX %212:gpr64common, %213:gpr64common, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
BotQ.A RemLatency SU(6) 4c
  BotQ.A RemainingLatency 4 + 11c > CritPath 14
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %218:gpr64 = LDRSWroX %217:gpr64common, %213:gpr64common, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
Bottom Pressure:
GPR32=4
  LiveReg: %217
  UpdateRegP: SU(6) %218:gpr64 = LDRSWroX %217:gpr64common, %213:gpr64common, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 5 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
  BotQ.A RemainingLatency 3 + 12c > CritPath 14
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %216:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
Bottom Pressure:
GPR32=3
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 5 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %212:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
Bottom Pressure:
GPR32=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 5 
Queue TopQ.P: 
Queue TopQ.A: 5 2 
  BotQ.A RemainingLatency 0 + 15c > CritPath 14
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %217:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
Bottom Pressure:
GPR32=1
  Ready @15c
  BotQ.A BotLatency SU(5) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 12
  Executed: 16c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %213:gpr64common = LDRSWui %stack.10.k, 0, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
Bottom Pressure:

  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 13
  Executed: 17c
  Critical: 13c, 13 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(2):   %213:gpr64common = LDRSWui %stack.10.k, 0, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
SU(5):   %217:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
SU(1):   %212:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
SU(4):   %216:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
SU(6):   %218:gpr64 = LDRSWroX %217:gpr64common, %213:gpr64common, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
SU(3):   %215:fpr64 = LDRDroX %212:gpr64common, %213:gpr64common, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
SU(7):   %219:fpr64 = LDRDroX %216:gpr64common, %218:gpr64, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
SU(0):   %211:fpr64 = LDRDui %stack.14.sum, 0, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
SU(11):   %222:gpr32common = nsw ADDWri %213.sub_32:gpr64common, 1, 0, debug-location !862; cg.c:449:53
SU(8):   %220:fpr64 = FMULDrr %215:fpr64, %219:fpr64, debug-location !859; cg.c:450:34
SU(9):   %221:fpr64 = FADDDrr %211:fpr64, %220:fpr64, debug-location !860; cg.c:450:27
SU(10):   STRDui %221:fpr64, %stack.14.sum, 0, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
SU(12):   STRWui %222:gpr32common, %stack.10.k, 0, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53

********** MI Scheduling **********
conj_grad:%bb.13 for.end49
  From: %206:fpr64 = LDRDui %stack.14.sum, 0, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
    To: B %bb.9, debug-location !871; cg.c:447:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %206:fpr64 = LDRDui %stack.14.sum, 0, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%206
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %207:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%207
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%208
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRDroX %206:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%208
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%207
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%206
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=1 Memory
  Single Issue       : false;
SU(4):   %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%209
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !870; cg.c:447:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%209
  Successors:
    SU(6): Data Latency=1 Reg=%210
  Single Issue       : false;
SU(6):   STRWui %210:gpr32common, %stack.9.j, 0, debug-location !870 :: (store 4 into %ir.j); cg.c:447:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%210
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.9, debug-location !871; cg.c:447:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %210:gpr32common, %stack.9.j, 0, debug-location !870 :: (store 4 into %ir.j); cg.c:447:50
  Ready @0c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !870; cg.c:447:50
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDroX %206:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 11c > CritPath 10
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %207:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %206:fpr64 = LDRDui %stack.14.sum, 0, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %206:fpr64 = LDRDui %stack.14.sum, 0, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
SU(1):   %207:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
SU(2):   %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
SU(3):   STRDroX %206:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
SU(4):   %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
SU(5):   %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !870; cg.c:447:50
SU(6):   STRWui %210:gpr32common, %stack.9.j, 0, debug-location !870 :: (store 4 into %ir.j); cg.c:447:50

********** MI Scheduling **********
conj_grad:%bb.14 for.end54
  From: STRXui $xzr, %stack.13.d, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.13.d, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.9.j, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.9.j, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.13.d, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   STRXui $xzr, %stack.13.d, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
SU(1):   STRWui $wzr, %stack.9.j, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16

********** MI Scheduling **********
conj_grad:%bb.15 for.cond55
  From: %102:gpr32 = LDRWui %stack.9.j, 0, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
    To: Bcc 10, %bb.17, implicit killed $nzcv, debug-location !885; cg.c:497:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %102:gpr32 = LDRWui %stack.9.j, 0, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%102
  Single Issue       : false;
SU(1):   %104:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%104
  Single Issue       : false;
SU(2):   %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !881 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%106
  Single Issue       : false;
SU(3):   %107:gpr32common = nsw SUBWrr %104:gpr32, %106:gpr32, debug-location !882; cg.c:497:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%106
    SU(1): Data Latency=4 Reg=%104
  Successors:
    SU(4): Data Latency=1 Reg=%107
  Single Issue       : false;
SU(4):   %108:gpr32common = nsw ADDWri %107:gpr32common, 1, 0, debug-location !883; cg.c:497:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%107
  Successors:
    SU(5): Data Latency=1 Reg=%108
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %102:gpr32, %108:gpr32common, implicit-def $nzcv, debug-location !885; cg.c:497:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%108
    SU(0): Data Latency=4 Reg=%102
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.17, implicit killed $nzcv, debug-location !885; cg.c:497:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %102:gpr32, %108:gpr32common, implicit-def $nzcv, debug-location !885; cg.c:497:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %108:gpr32common = nsw ADDWri %107:gpr32common, 1, 0, debug-location !883; cg.c:497:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %107:gpr32common = nsw SUBWrr %104:gpr32, %106:gpr32, debug-location !882; cg.c:497:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %102:gpr32 = LDRWui %stack.9.j, 0, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !881 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %104:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(1):   %104:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
SU(2):   %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !881 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
SU(0):   %102:gpr32 = LDRWui %stack.9.j, 0, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
SU(3):   %107:gpr32common = nsw SUBWrr %104:gpr32, %106:gpr32, debug-location !882; cg.c:497:33
SU(4):   %108:gpr32common = nsw ADDWri %107:gpr32common, 1, 0, debug-location !883; cg.c:497:44
SU(5):   dead $wzr = SUBSWrr %102:gpr32, %108:gpr32common, implicit-def $nzcv, debug-location !885; cg.c:497:9

********** MI Scheduling **********
conj_grad:%bb.16 for.body59
  From: %185:fpr64 = LDRDui %stack.13.d, 0, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
    To: B %bb.15, debug-location !896; cg.c:497:9
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %185:fpr64 = LDRDui %stack.13.d, 0, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=4 Reg=%185
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %186:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=%186
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %187:gpr64common = LDRSWui %stack.9.j, 0, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(10): Data Latency=4 Reg=%187
    SU(3): Data Latency=4 Reg=%187
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %189:gpr64 = UBFMXri %187:gpr64common, 61, 60, debug-location !888; cg.c:498:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(2): Data Latency=4 Reg=%187
  Successors:
    SU(6): Data Latency=1 Reg=%189
    SU(4): Data Latency=1 Reg=%189
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %190:fpr64 = LDRDroX %186:gpr64common, %189:gpr64, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=%189
    SU(1): Data Latency=4 Reg=%186
  Successors:
    SU(7): Data Latency=4 Reg=%190
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %191:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(6): Data Latency=4 Reg=%191
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %192:fpr64 = LDRDroX %191:gpr64common, %189:gpr64, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=%189
    SU(5): Data Latency=4 Reg=%191
  Successors:
    SU(7): Data Latency=4 Reg=%192
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64, debug-location !892; cg.c:498:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(6): Data Latency=4 Reg=%192
    SU(4): Data Latency=4 Reg=%190
  Successors:
    SU(8): Data Latency=1 Reg=%193
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(8):   %194:fpr64 = FADDDrr %185:fpr64, %193:fpr64, debug-location !893; cg.c:498:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%193
    SU(0): Data Latency=4 Reg=%185
  Successors:
    SU(9): Data Latency=1 Reg=%194
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   STRDui %194:fpr64, %stack.13.d, 0, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%194
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   %195:gpr32common = nsw ADDWri %187.sub_32:gpr64common, 1, 0, debug-location !895; cg.c:497:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%187
  Successors:
    SU(11): Data Latency=1 Reg=%195
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   STRWui %195:gpr32common, %stack.9.j, 0, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%195
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.15, debug-location !896; cg.c:497:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) STRWui %195:gpr32common, %stack.9.j, 0, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
Bottom Pressure:
GPR32=1
  LiveReg: %195
  UpdateRegP: SU(11) STRWui %195:gpr32common, %stack.9.j, 0, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
BotQ.A RemLatency SU(9) 11c
  BotQ.A RemainingLatency 11 + 1c > CritPath 11
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) STRDui %194:fpr64, %stack.13.d, 0, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %194
  UpdateRegP: SU(9) STRDui %194:fpr64, %stack.13.d, 0, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
              to 
  Ready @1c
  BotQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
BotQ.A RemLatency SU(8) 10c
  BotQ.A RemainingLatency 10 + 2c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(8) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %194:fpr64 = FADDDrr %185:fpr64, %193:fpr64, debug-location !893; cg.c:498:19
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %185
  UpdateRegP: SU(8) %194:fpr64 = FADDDrr %185:fpr64, %193:fpr64, debug-location !893; cg.c:498:19
              to 
  LiveReg: %193
  UpdateRegP: SU(8) %194:fpr64 = FADDDrr %185:fpr64, %193:fpr64, debug-location !893; cg.c:498:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
BotQ.A RemLatency SU(7) 9c
  BotQ.A RemainingLatency 9 + 3c > CritPath 11
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(7) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64, debug-location !892; cg.c:498:26
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %190
  UpdateRegP: SU(7) %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64, debug-location !892; cg.c:498:26
              to 
  LiveReg: %192
  UpdateRegP: SU(7) %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64, debug-location !892; cg.c:498:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(7) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 6 4 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %195:gpr32common = nsw ADDWri %187.sub_32:gpr64common, 1, 0, debug-location !895; cg.c:497:50
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %187
  UpdateRegP: SU(3) %189:gpr64 = UBFMXri %187:gpr64common, 61, 60, debug-location !888; cg.c:498:21
              to GPR32 -1
  UpdateRegP: SU(10) %195:gpr32common = nsw ADDWri %187.sub_32:gpr64common, 1, 0, debug-location !895; cg.c:497:50
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 4 6 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %185:fpr64 = LDRDui %stack.13.d, 0, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 5 + 7c > CritPath 11
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %192:fpr64 = LDRDroX %191:gpr64common, %189:gpr64, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %191
  UpdateRegP: SU(6) %192:fpr64 = LDRDroX %191:gpr64common, %189:gpr64, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %189
  UpdateRegP: SU(4) %190:fpr64 = LDRDroX %186:gpr64common, %189:gpr64, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(6) %192:fpr64 = LDRDroX %191:gpr64common, %189:gpr64, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %190:fpr64 = LDRDroX %186:gpr64common, %189:gpr64, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
Bottom Pressure:
GPR32=4
  LiveReg: %186
  UpdateRegP: SU(4) %190:fpr64 = LDRDroX %186:gpr64common, %189:gpr64, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %189:gpr64 = UBFMXri %187:gpr64common, 61, 60, debug-location !888; cg.c:498:21
Bottom Pressure:
GPR32=3
  Ready @9c
  BotQ.A BotLatency SU(3) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 9
  Executed: 10c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 2 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %191:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
Bottom Pressure:
GPR32=2
  Ready @11c
  BotQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %186:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
Bottom Pressure:
GPR32=1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %187:gpr64common = LDRSWui %stack.9.j, 0, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
Bottom Pressure:

  Ready @13c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(2):   %187:gpr64common = LDRSWui %stack.9.j, 0, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
SU(1):   %186:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
SU(5):   %191:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
SU(3):   %189:gpr64 = UBFMXri %187:gpr64common, 61, 60, debug-location !888; cg.c:498:21
SU(4):   %190:fpr64 = LDRDroX %186:gpr64common, %189:gpr64, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
SU(6):   %192:fpr64 = LDRDroX %191:gpr64common, %189:gpr64, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
SU(0):   %185:fpr64 = LDRDui %stack.13.d, 0, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
SU(10):   %195:gpr32common = nsw ADDWri %187.sub_32:gpr64common, 1, 0, debug-location !895; cg.c:497:50
SU(7):   %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64, debug-location !892; cg.c:498:26
SU(8):   %194:fpr64 = FADDDrr %185:fpr64, %193:fpr64, debug-location !893; cg.c:498:19
SU(9):   STRDui %194:fpr64, %stack.13.d, 0, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
SU(11):   STRWui %195:gpr32common, %stack.9.j, 0, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50

********** MI Scheduling **********
conj_grad:%bb.17 for.end68
  From: %110:fpr64 = LDRDui %stack.15.rho, 0, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
    To: End RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %110:fpr64 = LDRDui %stack.15.rho, 0, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%110
    SU(2): Data Latency=4 Reg=%110
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %111:fpr64 = LDRDui %stack.13.d, 0, debug-location !900 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%111
  Single Issue       : false;
SU(2):   %112:fpr64 = FDIVDrr %110:fpr64, %111:fpr64, debug-location !901; cg.c:504:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%111
    SU(0): Data Latency=4 Reg=%110
  Successors:
    SU(3): Data Latency=1 Reg=%112
  Single Issue       : false;
SU(3):   STRDui %112:fpr64, %stack.17.alpha, 0, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%112
  Single Issue       : false;
SU(4):   STRDui %110:fpr64, %stack.16.rho0, 0, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%110
  Single Issue       : false;
SU(5):   STRXui $xzr, %stack.15.rho, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   STRWui $wzr, %stack.9.j, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 5 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui $wzr, %stack.9.j, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRDui %112:fpr64, %stack.17.alpha, 0, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) STRDui %110:fpr64, %stack.16.rho0, 0, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 5
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %112:fpr64 = FDIVDrr %110:fpr64, %111:fpr64, debug-location !901; cg.c:504:21
  Ready @3c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRXui $xzr, %stack.15.rho, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %111:fpr64 = LDRDui %stack.13.d, 0, debug-location !900 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  Ready @7c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %110:fpr64 = LDRDui %stack.15.rho, 0, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   %110:fpr64 = LDRDui %stack.15.rho, 0, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
SU(1):   %111:fpr64 = LDRDui %stack.13.d, 0, debug-location !900 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
SU(5):   STRXui $xzr, %stack.15.rho, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
SU(2):   %112:fpr64 = FDIVDrr %110:fpr64, %111:fpr64, debug-location !901; cg.c:504:21
SU(4):   STRDui %110:fpr64, %stack.16.rho0, 0, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
SU(3):   STRDui %112:fpr64, %stack.17.alpha, 0, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
SU(6):   STRWui $wzr, %stack.9.j, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16

********** MI Scheduling **********
conj_grad:%bb.18 for.cond69
  From: %115:gpr32 = LDRWui %stack.9.j, 0, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
    To: Bcc 10, %bb.20, implicit killed $nzcv, debug-location !916; cg.c:516:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %115:gpr32 = LDRWui %stack.9.j, 0, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%115
  Single Issue       : false;
SU(1):   %117:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%117
  Single Issue       : false;
SU(2):   %119:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !912 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%119
  Single Issue       : false;
SU(3):   %120:gpr32common = nsw SUBWrr %117:gpr32, %119:gpr32, debug-location !913; cg.c:516:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%119
    SU(1): Data Latency=4 Reg=%117
  Successors:
    SU(4): Data Latency=1 Reg=%120
  Single Issue       : false;
SU(4):   %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !914; cg.c:516:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%120
  Successors:
    SU(5): Data Latency=1 Reg=%121
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %115:gpr32, %121:gpr32common, implicit-def $nzcv, debug-location !916; cg.c:516:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%121
    SU(0): Data Latency=4 Reg=%115
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.20, implicit killed $nzcv, debug-location !916; cg.c:516:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %115:gpr32, %121:gpr32common, implicit-def $nzcv, debug-location !916; cg.c:516:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !914; cg.c:516:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %120:gpr32common = nsw SUBWrr %117:gpr32, %119:gpr32, debug-location !913; cg.c:516:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %115:gpr32 = LDRWui %stack.9.j, 0, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %119:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !912 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %117:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(1):   %117:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
SU(2):   %119:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !912 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
SU(0):   %115:gpr32 = LDRWui %stack.9.j, 0, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
SU(3):   %120:gpr32common = nsw SUBWrr %117:gpr32, %119:gpr32, debug-location !913; cg.c:516:33
SU(4):   %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !914; cg.c:516:44
SU(5):   dead $wzr = SUBSWrr %115:gpr32, %121:gpr32common, implicit-def $nzcv, debug-location !916; cg.c:516:9

********** MI Scheduling **********
conj_grad:%bb.19 for.body73
  From: %165:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
    To: B %bb.18, debug-location !939; cg.c:516:9
 RegionInstrs: 23
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %165:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(9): Data Latency=4 Reg=%165
    SU(3): Data Latency=4 Reg=%165
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %166:gpr64 = LDRSWui %stack.9.j, 0, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
    SU(2): Data Latency=4 Reg=%166
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %167:gpr64 = UBFMXri %166:gpr64, 61, 60, debug-location !917; cg.c:517:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(1): Data Latency=4 Reg=%166
  Successors:
    SU(9): Data Latency=1 Reg=%167
    SU(6): Data Latency=1 Reg=%167
    SU(3): Data Latency=1 Reg=%167
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %168:fpr64 = LDRDroX %165:gpr64common, %167:gpr64, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 23
  Predecessors:
    SU(2): Data Latency=1 Reg=%167
    SU(0): Data Latency=4 Reg=%165
  Successors:
    SU(8): Data Latency=4 Reg=%168
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %169:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(7): Data Latency=4 Reg=%169
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %170:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(6): Data Latency=4 Reg=%170
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %171:fpr64 = LDRDroX %170:gpr64common, %167:gpr64, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(2): Data Latency=1 Reg=%167
    SU(5): Data Latency=4 Reg=%170
  Successors:
    SU(7): Data Latency=4 Reg=%171
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %172:fpr64 = FMULDrr %169:fpr64, %171:fpr64, debug-location !923; cg.c:517:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 20
  Predecessors:
    SU(6): Data Latency=4 Reg=%171
    SU(4): Data Latency=4 Reg=%169
  Successors:
    SU(8): Data Latency=1 Reg=%172
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(8):   %173:fpr64 = FADDDrr %168:fpr64, %172:fpr64, debug-location !924; cg.c:517:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 19
  Predecessors:
    SU(7): Data Latency=1 Reg=%172
    SU(3): Data Latency=4 Reg=%168
  Successors:
    SU(9): Data Latency=1 Reg=%173
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   STRDroX %173:fpr64, %165:gpr64common, %167:gpr64, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  # preds left       : 9
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 18
  Predecessors:
    SU(8): Data Latency=1 Reg=%173
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%167
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%165
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(20): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   %174:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 15
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(19): Data Latency=4 Reg=%174
    SU(13): Data Latency=4 Reg=%174
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %175:gpr64 = LDRSWui %stack.9.j, 0, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 17
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%175
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   %176:gpr64 = UBFMXri %175:gpr64, 61, 60, debug-location !928; cg.c:518:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 13
  Predecessors:
    SU(11): Data Latency=4 Reg=%175
  Successors:
    SU(19): Data Latency=1 Reg=%176
    SU(16): Data Latency=1 Reg=%176
    SU(13): Data Latency=1 Reg=%176
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   %177:fpr64 = LDRDroX %174:gpr64common, %176:gpr64, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 11
  Predecessors:
    SU(12): Data Latency=1 Reg=%176
    SU(10): Data Latency=4 Reg=%174
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(18): Data Latency=4 Reg=%177
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(14):   %178:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 12
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=%178
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(15):   %179:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 16
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(16): Data Latency=4 Reg=%179
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(16):   %180:fpr64 = LDRDroX %179:gpr64common, %176:gpr64, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 12
  Predecessors:
    SU(12): Data Latency=1 Reg=%176
    SU(15): Data Latency=4 Reg=%179
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=%180
    SU(22): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(17):   %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64, debug-location !933; cg.c:518:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 8
  Predecessors:
    SU(16): Data Latency=4 Reg=%180
    SU(14): Data Latency=4 Reg=%178
  Successors:
    SU(18): Data Latency=1 Reg=%181
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(18):   %182:fpr64 = FSUBDrr %177:fpr64, %181:fpr64, debug-location !934; cg.c:518:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(17): Data Latency=1 Reg=%181
    SU(13): Data Latency=4 Reg=%177
  Successors:
    SU(19): Data Latency=1 Reg=%182
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(19):   STRDroX %182:fpr64, %174:gpr64common, %176:gpr64, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  # preds left       : 16
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 6
  Predecessors:
    SU(18): Data Latency=1 Reg=%182
    SU(16): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=%176
    SU(11): Ord  Latency=0 Memory
    SU(10): Data Latency=4 Reg=%174
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(22): Ord  Latency=0 Memory
    SU(20): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(20):   %183:gpr32common = LDRWui %stack.9.j, 0, debug-location !938 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 5
  Predecessors:
    SU(19): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(21): Data Latency=4 Reg=%183
    SU(22): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(21):   %184:gpr32common = nsw ADDWri %183:gpr32common, 1, 0, debug-location !938; cg.c:516:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 1
  Predecessors:
    SU(20): Data Latency=4 Reg=%183
  Successors:
    SU(22): Data Latency=1 Reg=%184
  Pressure Diff      : 
  Single Issue       : false;
SU(22):   STRWui %184:gpr32common, %stack.9.j, 0, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 0
  Predecessors:
    SU(21): Data Latency=1 Reg=%184
    SU(20): Ord  Latency=0 Memory
    SU(19): Ord  Latency=0 Memory
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.18, debug-location !939; cg.c:516:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 29
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 22 
Pick Bot ONLY1     
Scheduling SU(22) STRWui %184:gpr32common, %stack.9.j, 0, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50
Bottom Pressure:
GPR32=1
  LiveReg: %184
  UpdateRegP: SU(22) STRWui %184:gpr32common, %stack.9.j, 0, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(22) 29c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 
Pick Bot ONLY1     
Scheduling SU(21) %184:gpr32common = nsw ADDWri %183:gpr32common, 1, 0, debug-location !938; cg.c:516:50
Bottom Pressure:
GPR32=1
  LiveReg: %183
  UpdateRegP: SU(21) %184:gpr32common = nsw ADDWri %183:gpr32common, 1, 0, debug-location !938; cg.c:516:50
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(21) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 20 
Pick Bot ONLY1     
Scheduling SU(20) %183:gpr32common = LDRWui %stack.9.j, 0, debug-location !938 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(20) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 19 
Pick Bot ONLY1     
Scheduling SU(19) STRDroX %182:fpr64, %174:gpr64common, %176:gpr64, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %182
  UpdateRegP: SU(19) STRDroX %182:fpr64, %174:gpr64common, %176:gpr64, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to GPR32 2
  LiveReg: %174
  UpdateRegP: SU(13) %177:fpr64 = LDRDroX %174:gpr64common, %176:gpr64, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %182:fpr64, %174:gpr64common, %176:gpr64, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to GPR32 1
  LiveReg: %176
  UpdateRegP: SU(13) %177:fpr64 = LDRDroX %174:gpr64common, %176:gpr64, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(16) %180:fpr64 = LDRDroX %179:gpr64common, %176:gpr64, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(19) STRDroX %182:fpr64, %174:gpr64common, %176:gpr64, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
              to 
  Ready @6c
  BotQ.A BotLatency SU(19) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 18 
Pick Bot ONLY1     
Scheduling SU(18) %182:fpr64 = FSUBDrr %177:fpr64, %181:fpr64, debug-location !934; cg.c:518:25
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %177
  UpdateRegP: SU(18) %182:fpr64 = FSUBDrr %177:fpr64, %181:fpr64, debug-location !934; cg.c:518:25
              to 
  LiveReg: %181
  UpdateRegP: SU(18) %182:fpr64 = FSUBDrr %177:fpr64, %181:fpr64, debug-location !934; cg.c:518:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(18) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 17 
Pick Bot ONLY1     
Scheduling SU(17) %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64, debug-location !933; cg.c:518:33
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %178
  UpdateRegP: SU(17) %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64, debug-location !933; cg.c:518:33
              to 
  LiveReg: %180
  UpdateRegP: SU(17) %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64, debug-location !933; cg.c:518:33
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  BotQ.A BotLatency SU(17) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 14 16 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) %177:fpr64 = LDRDroX %174:gpr64common, %176:gpr64, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @11c
  BotQ.A BotLatency SU(13) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 14 16 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(16) 17c
BotQ.A RemLatency SU(10) 12c
Picking from Bot:
  Cand SU(14) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(16) %180:fpr64 = LDRDroX %179:gpr64common, %176:gpr64, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %179
  UpdateRegP: SU(16) %180:fpr64 = LDRDroX %179:gpr64common, %176:gpr64, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @12c
  BotQ.A BotLatency SU(16) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 15 
Queue BotQ.A: 14 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(12) 16c
BotQ.A RemLatency SU(10) 12c
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %178:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
Bottom Pressure:
GPR32=3
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 15 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %176:gpr64 = UBFMXri %175:gpr64, 61, 60, debug-location !928; cg.c:518:20
Bottom Pressure:
GPR32=3
  LiveReg: %175
  UpdateRegP: SU(12) %176:gpr64 = UBFMXri %175:gpr64, 61, 60, debug-location !928; cg.c:518:20
              to GPR32 -1
  Ready @14c
  BotQ.A TopLatency SU(12) 16c
  BotQ.A BotLatency SU(12) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 15 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %174:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
Bottom Pressure:
GPR32=2
  Ready @15c
  BotQ.A BotLatency SU(10) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 15 
Pick Bot ONLY1     
Scheduling SU(15) %179:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
Bottom Pressure:
GPR32=1
  Ready @16c
  BotQ.A BotLatency SU(15) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 18 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %175:gpr64 = LDRSWui %stack.9.j, 0, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
Bottom Pressure:

  Ready @18c
  BotQ.A BotLatency SU(11) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRDroX %173:fpr64, %165:gpr64common, %167:gpr64, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %173
  UpdateRegP: SU(9) STRDroX %173:fpr64, %165:gpr64common, %167:gpr64, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to GPR32 2
  LiveReg: %165
  UpdateRegP: SU(3) %168:fpr64 = LDRDroX %165:gpr64common, %167:gpr64, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(9) STRDroX %173:fpr64, %165:gpr64common, %167:gpr64, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to GPR32 1
  LiveReg: %167
  UpdateRegP: SU(3) %168:fpr64 = LDRDroX %165:gpr64common, %167:gpr64, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(6) %171:fpr64 = LDRDroX %170:gpr64common, %167:gpr64, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(9) STRDroX %173:fpr64, %165:gpr64common, %167:gpr64, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
              to 
  Ready @19c
  BotQ.A BotLatency SU(9) 18c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 14
  Executed: 20c
  Critical: 14c, 14 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %173:fpr64 = FADDDrr %168:fpr64, %172:fpr64, debug-location !924; cg.c:517:25
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %168
  UpdateRegP: SU(8) %173:fpr64 = FADDDrr %168:fpr64, %172:fpr64, debug-location !924; cg.c:517:25
              to 
  LiveReg: %172
  UpdateRegP: SU(8) %173:fpr64 = FADDDrr %168:fpr64, %172:fpr64, debug-location !924; cg.c:517:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @20c
  BotQ.A BotLatency SU(8) 19c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 15
  Executed: 21c
  Critical: 15c, 15 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %172:fpr64 = FMULDrr %169:fpr64, %171:fpr64, debug-location !923; cg.c:517:33
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %169
  UpdateRegP: SU(7) %172:fpr64 = FMULDrr %169:fpr64, %171:fpr64, debug-location !923; cg.c:517:33
              to 
  LiveReg: %171
  UpdateRegP: SU(7) %172:fpr64 = FMULDrr %169:fpr64, %171:fpr64, debug-location !923; cg.c:517:33
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @21c
  BotQ.A BotLatency SU(7) 20c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 16
  Executed: 22c
  Critical: 16c, 16 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 24 BotQ.A
Queue BotQ.P: 4 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %168:fpr64 = LDRDroX %165:gpr64common, %167:gpr64, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @24c
  BotQ.A BotLatency SU(3) 23c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 17
  Executed: 25c
  Critical: 17c, 17 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(6) 5c
  BotQ.A RemainingLatency 5 + 25c > CritPath 29
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %171:fpr64 = LDRDroX %170:gpr64common, %167:gpr64, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %170
  UpdateRegP: SU(6) %171:fpr64 = LDRDroX %170:gpr64common, %167:gpr64, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @25c
  BotQ.A BotLatency SU(6) 24c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 18
  Executed: 26c
  Critical: 18c, 18 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 5 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 26c > CritPath 29
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %167:gpr64 = UBFMXri %166:gpr64, 61, 60, debug-location !917; cg.c:517:20
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %166
  UpdateRegP: SU(2) %167:gpr64 = UBFMXri %166:gpr64, 61, 60, debug-location !917; cg.c:517:20
              to GPR32 -1
  Ready @26c
  BotQ.A BotLatency SU(2) 25c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 19
  Executed: 27c
  Critical: 19c, 19 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 5 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %169:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
Bottom Pressure:
GPR32=3
  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 20
  Executed: 28c
  Critical: 20c, 20 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 5 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %165:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
Bottom Pressure:
GPR32=2
  Ready @28c
  BotQ.A BotLatency SU(0) 27c
  *** Max MOps 1 at cycle 28
Cycle: 29 BotQ.A
BotQ.A @29c
  Retired: 21
  Executed: 29c
  Critical: 21c, 21 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %170:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
Bottom Pressure:
GPR32=1
  Ready @29c
  BotQ.A BotLatency SU(5) 28c
  *** Max MOps 1 at cycle 29
Cycle: 30 BotQ.A
BotQ.A @30c
  Retired: 22
  Executed: 30c
  Critical: 22c, 22 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %166:gpr64 = LDRSWui %stack.9.j, 0, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
Bottom Pressure:

  Ready @30c
  BotQ.A BotLatency SU(1) 29c
  *** Max MOps 1 at cycle 30
Cycle: 31 BotQ.A
BotQ.A @31c
  Retired: 23
  Executed: 31c
  Critical: 23c, 23 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(1):   %166:gpr64 = LDRSWui %stack.9.j, 0, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
SU(5):   %170:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
SU(0):   %165:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
SU(4):   %169:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
SU(2):   %167:gpr64 = UBFMXri %166:gpr64, 61, 60, debug-location !917; cg.c:517:20
SU(6):   %171:fpr64 = LDRDroX %170:gpr64common, %167:gpr64, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
SU(3):   %168:fpr64 = LDRDroX %165:gpr64common, %167:gpr64, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
SU(7):   %172:fpr64 = FMULDrr %169:fpr64, %171:fpr64, debug-location !923; cg.c:517:33
SU(8):   %173:fpr64 = FADDDrr %168:fpr64, %172:fpr64, debug-location !924; cg.c:517:25
SU(9):   STRDroX %173:fpr64, %165:gpr64common, %167:gpr64, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
SU(11):   %175:gpr64 = LDRSWui %stack.9.j, 0, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
SU(15):   %179:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
SU(10):   %174:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
SU(12):   %176:gpr64 = UBFMXri %175:gpr64, 61, 60, debug-location !928; cg.c:518:20
SU(14):   %178:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
SU(16):   %180:fpr64 = LDRDroX %179:gpr64common, %176:gpr64, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
SU(13):   %177:fpr64 = LDRDroX %174:gpr64common, %176:gpr64, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
SU(17):   %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64, debug-location !933; cg.c:518:33
SU(18):   %182:fpr64 = FSUBDrr %177:fpr64, %181:fpr64, debug-location !934; cg.c:518:25
SU(19):   STRDroX %182:fpr64, %174:gpr64common, %176:gpr64, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
SU(20):   %183:gpr32common = LDRWui %stack.9.j, 0, debug-location !938 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
SU(21):   %184:gpr32common = nsw ADDWri %183:gpr32common, 1, 0, debug-location !938; cg.c:516:50
SU(22):   STRWui %184:gpr32common, %stack.9.j, 0, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50

********** MI Scheduling **********
conj_grad:%bb.21 for.cond93
  From: %124:gpr32 = LDRWui %stack.9.j, 0, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
    To: Bcc 10, %bb.23, implicit killed $nzcv, debug-location !952; cg.c:526:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %124:gpr32 = LDRWui %stack.9.j, 0, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%124
  Single Issue       : false;
SU(1):   %126:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%126
  Single Issue       : false;
SU(2):   %128:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !948 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%128
  Single Issue       : false;
SU(3):   %129:gpr32common = nsw SUBWrr %126:gpr32, %128:gpr32, debug-location !949; cg.c:526:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%128
    SU(1): Data Latency=4 Reg=%126
  Successors:
    SU(4): Data Latency=1 Reg=%129
  Single Issue       : false;
SU(4):   %130:gpr32common = nsw ADDWri %129:gpr32common, 1, 0, debug-location !950; cg.c:526:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%129
  Successors:
    SU(5): Data Latency=1 Reg=%130
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %124:gpr32, %130:gpr32common, implicit-def $nzcv, debug-location !952; cg.c:526:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%130
    SU(0): Data Latency=4 Reg=%124
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.23, implicit killed $nzcv, debug-location !952; cg.c:526:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %124:gpr32, %130:gpr32common, implicit-def $nzcv, debug-location !952; cg.c:526:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %130:gpr32common = nsw ADDWri %129:gpr32common, 1, 0, debug-location !950; cg.c:526:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %129:gpr32common = nsw SUBWrr %126:gpr32, %128:gpr32, debug-location !949; cg.c:526:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %124:gpr32 = LDRWui %stack.9.j, 0, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %128:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !948 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %126:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(1):   %126:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
SU(2):   %128:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !948 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
SU(0):   %124:gpr32 = LDRWui %stack.9.j, 0, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
SU(3):   %129:gpr32common = nsw SUBWrr %126:gpr32, %128:gpr32, debug-location !949; cg.c:526:33
SU(4):   %130:gpr32common = nsw ADDWri %129:gpr32common, 1, 0, debug-location !950; cg.c:526:44
SU(5):   dead $wzr = SUBSWrr %124:gpr32, %130:gpr32common, implicit-def $nzcv, debug-location !952; cg.c:526:9

********** MI Scheduling **********
conj_grad:%bb.22 for.body97
  From: %157:fpr64 = LDRDui %stack.15.rho, 0, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
    To: B %bb.21, debug-location !963; cg.c:526:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %157:fpr64 = LDRDui %stack.15.rho, 0, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%157
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %158:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%158
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %159:gpr64common = LDRSWui %stack.9.j, 0, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=%159
    SU(3): Data Latency=4 Reg=%159
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %161:fpr64 = LDRDroX %158:gpr64common, %159:gpr64common, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%159
    SU(1): Data Latency=4 Reg=%158
  Successors:
    SU(4): Data Latency=4 Reg=%161
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %162:fpr64 = FMULDrr %161:fpr64, %161:fpr64, debug-location !959; cg.c:527:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=%161
  Successors:
    SU(5): Data Latency=1 Reg=%162
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %163:fpr64 = FADDDrr %157:fpr64, %162:fpr64, debug-location !960; cg.c:527:23
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%162
    SU(0): Data Latency=4 Reg=%157
  Successors:
    SU(6): Data Latency=1 Reg=%163
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   STRDui %163:fpr64, %stack.15.rho, 0, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%163
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   %164:gpr32common = nsw ADDWri %159.sub_32:gpr64common, 1, 0, debug-location !962; cg.c:526:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%159
  Successors:
    SU(8): Data Latency=1 Reg=%164
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   STRWui %164:gpr32common, %stack.9.j, 0, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%164
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.21, debug-location !963; cg.c:526:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) STRWui %164:gpr32common, %stack.9.j, 0, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
Bottom Pressure:
GPR32=1
  LiveReg: %164
  UpdateRegP: SU(8) STRWui %164:gpr32common, %stack.9.j, 0, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(6) 10c
  BotQ.A RemainingLatency 10 + 1c > CritPath 10
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) STRDui %163:fpr64, %stack.15.rho, 0, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %163
  UpdateRegP: SU(6) STRDui %163:fpr64, %stack.15.rho, 0, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
              to 
  Ready @1c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 2c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(5) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) %163:fpr64 = FADDDrr %157:fpr64, %162:fpr64, debug-location !960; cg.c:527:23
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %157
  UpdateRegP: SU(5) %163:fpr64 = FADDDrr %157:fpr64, %162:fpr64, debug-location !960; cg.c:527:23
              to 
  LiveReg: %162
  UpdateRegP: SU(5) %163:fpr64 = FADDDrr %157:fpr64, %162:fpr64, debug-location !960; cg.c:527:23
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 7 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 8c
  BotQ.A RemainingLatency 8 + 3c > CritPath 10
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(4) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %162:fpr64 = FMULDrr %161:fpr64, %161:fpr64, debug-location !959; cg.c:527:30
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %161
  UpdateRegP: SU(4) %162:fpr64 = FMULDrr %161:fpr64, %161:fpr64, debug-location !959; cg.c:527:30
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %164:gpr32common = nsw ADDWri %159.sub_32:gpr64common, 1, 0, debug-location !962; cg.c:526:50
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %159
  UpdateRegP: SU(3) %161:fpr64 = LDRDroX %158:gpr64common, %159:gpr64common, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(7) %164:gpr32common = nsw ADDWri %159.sub_32:gpr64common, 1, 0, debug-location !962; cg.c:526:50
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %157:fpr64 = LDRDui %stack.15.rho, 0, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %161:fpr64 = LDRDroX %158:gpr64common, %159:gpr64common, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
Bottom Pressure:
GPR32=2
  LiveReg: %158
  UpdateRegP: SU(3) %161:fpr64 = LDRDroX %158:gpr64common, %159:gpr64common, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  BotQ.A RemainingLatency 0 + 11c > CritPath 10
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %159:gpr64common = LDRSWui %stack.9.j, 0, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
Bottom Pressure:
GPR32=1
  Ready @11c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %158:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
Bottom Pressure:

  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.22 ***
SU(1):   %158:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
SU(2):   %159:gpr64common = LDRSWui %stack.9.j, 0, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
SU(3):   %161:fpr64 = LDRDroX %158:gpr64common, %159:gpr64common, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
SU(0):   %157:fpr64 = LDRDui %stack.15.rho, 0, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
SU(7):   %164:gpr32common = nsw ADDWri %159.sub_32:gpr64common, 1, 0, debug-location !962; cg.c:526:50
SU(4):   %162:fpr64 = FMULDrr %161:fpr64, %161:fpr64, debug-location !959; cg.c:527:30
SU(5):   %163:fpr64 = FADDDrr %157:fpr64, %162:fpr64, debug-location !960; cg.c:527:23
SU(6):   STRDui %163:fpr64, %stack.15.rho, 0, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
SU(8):   STRWui %164:gpr32common, %stack.9.j, 0, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50

********** MI Scheduling **********
conj_grad:%bb.23 for.end106
  From: %132:fpr64 = LDRDui %stack.15.rho, 0, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %132:fpr64 = LDRDui %stack.15.rho, 0, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%132
  Single Issue       : false;
SU(1):   %133:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !967 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%133
  Single Issue       : false;
SU(2):   %134:fpr64 = FDIVDrr %132:fpr64, %133:fpr64, debug-location !968; cg.c:533:20
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%133
    SU(0): Data Latency=4 Reg=%132
  Successors:
    SU(3): Data Latency=1 Reg=%134
  Single Issue       : false;
SU(3):   STRDui %134:fpr64, %stack.18.beta, 0, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%134
  Single Issue       : false;
SU(4):   STRWui $wzr, %stack.9.j, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) STRWui $wzr, %stack.9.j, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDui %134:fpr64, %stack.18.beta, 0, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %134:fpr64 = FDIVDrr %132:fpr64, %133:fpr64, debug-location !968; cg.c:533:20
  Ready @2c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 5
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %133:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !967 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
  Ready @6c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %132:fpr64 = LDRDui %stack.15.rho, 0, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   %132:fpr64 = LDRDui %stack.15.rho, 0, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
SU(1):   %133:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !967 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
SU(2):   %134:fpr64 = FDIVDrr %132:fpr64, %133:fpr64, debug-location !968; cg.c:533:20
SU(3):   STRDui %134:fpr64, %stack.18.beta, 0, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
SU(4):   STRWui $wzr, %stack.9.j, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16

********** MI Scheduling **********
conj_grad:%bb.24 for.cond108
  From: %136:gpr32 = LDRWui %stack.9.j, 0, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
    To: Bcc 10, %bb.26, implicit killed $nzcv, debug-location !980; cg.c:538:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %136:gpr32 = LDRWui %stack.9.j, 0, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%136
  Single Issue       : false;
SU(1):   %138:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%138
  Single Issue       : false;
SU(2):   %140:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !976 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%140
  Single Issue       : false;
SU(3):   %141:gpr32common = nsw SUBWrr %138:gpr32, %140:gpr32, debug-location !977; cg.c:538:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%140
    SU(1): Data Latency=4 Reg=%138
  Successors:
    SU(4): Data Latency=1 Reg=%141
  Single Issue       : false;
SU(4):   %142:gpr32common = nsw ADDWri %141:gpr32common, 1, 0, debug-location !978; cg.c:538:44
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%141
  Successors:
    SU(5): Data Latency=1 Reg=%142
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %136:gpr32, %142:gpr32common, implicit-def $nzcv, debug-location !980; cg.c:538:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%142
    SU(0): Data Latency=4 Reg=%136
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.26, implicit killed $nzcv, debug-location !980; cg.c:538:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %136:gpr32, %142:gpr32common, implicit-def $nzcv, debug-location !980; cg.c:538:9
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %142:gpr32common = nsw ADDWri %141:gpr32common, 1, 0, debug-location !978; cg.c:538:44
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %141:gpr32common = nsw SUBWrr %138:gpr32, %140:gpr32, debug-location !977; cg.c:538:33
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %136:gpr32 = LDRWui %stack.9.j, 0, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %140:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !976 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %138:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(1):   %138:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
SU(2):   %140:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !976 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
SU(0):   %136:gpr32 = LDRWui %stack.9.j, 0, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
SU(3):   %141:gpr32common = nsw SUBWrr %138:gpr32, %140:gpr32, debug-location !977; cg.c:538:33
SU(4):   %142:gpr32common = nsw ADDWri %141:gpr32common, 1, 0, debug-location !978; cg.c:538:44
SU(5):   dead $wzr = SUBSWrr %136:gpr32, %142:gpr32common, implicit-def $nzcv, debug-location !980; cg.c:538:9

********** MI Scheduling **********
conj_grad:%bb.25 for.body112
  From: %146:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
    To: B %bb.24, debug-location !993; cg.c:538:9
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %146:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%146
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %147:gpr64 = LDRSWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%147
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %148:gpr64 = UBFMXri %147:gpr64, 61, 60, debug-location !981; cg.c:539:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%147
  Successors:
    SU(9): Data Latency=1 Reg=%148
    SU(6): Data Latency=1 Reg=%148
    SU(3): Data Latency=1 Reg=%148
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %149:fpr64 = LDRDroX %146:gpr64common, %148:gpr64, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%148
    SU(0): Data Latency=4 Reg=%146
  Successors:
    SU(8): Data Latency=4 Reg=%149
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %150:fpr64 = LDRDui %stack.18.beta, 0, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Data Latency=4 Reg=%150
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %151:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=%151
    SU(6): Data Latency=4 Reg=%151
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %152:fpr64 = LDRDroX %151:gpr64common, %148:gpr64, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(2): Data Latency=1 Reg=%148
    SU(5): Data Latency=4 Reg=%151
  Successors:
    SU(7): Data Latency=4 Reg=%152
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %153:fpr64 = FMULDrr %150:fpr64, %152:fpr64, debug-location !987; cg.c:539:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(6): Data Latency=4 Reg=%152
    SU(4): Data Latency=4 Reg=%150
  Successors:
    SU(8): Data Latency=1 Reg=%153
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(8):   %154:fpr64 = FADDDrr %149:fpr64, %153:fpr64, debug-location !988; cg.c:539:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 7
  Predecessors:
    SU(7): Data Latency=1 Reg=%153
    SU(3): Data Latency=4 Reg=%149
  Successors:
    SU(9): Data Latency=1 Reg=%154
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   STRDroX %154:fpr64, %151:gpr64common, %148:gpr64, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  # preds left       : 9
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 6
  Predecessors:
    SU(8): Data Latency=1 Reg=%154
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%151
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%148
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   %155:gpr32common = LDRWui %stack.9.j, 0, debug-location !992 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%155
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %156:gpr32common = nsw ADDWri %155:gpr32common, 1, 0, debug-location !992; cg.c:538:50
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(10): Data Latency=4 Reg=%155
  Successors:
    SU(12): Data Latency=1 Reg=%156
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   STRWui %156:gpr32common, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%156
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.24, debug-location !993; cg.c:538:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) STRWui %156:gpr32common, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50
Bottom Pressure:
GPR32=1
  LiveReg: %156
  UpdateRegP: SU(12) STRWui %156:gpr32common, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50
              to 
  Ready @0c
  BotQ.A TopLatency SU(12) 17c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %156:gpr32common = nsw ADDWri %155:gpr32common, 1, 0, debug-location !992; cg.c:538:50
Bottom Pressure:
GPR32=1
  LiveReg: %155
  UpdateRegP: SU(11) %156:gpr32common = nsw ADDWri %155:gpr32common, 1, 0, debug-location !992; cg.c:538:50
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(11) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %155:gpr32common = LDRWui %stack.9.j, 0, debug-location !992 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(10) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRDroX %154:fpr64, %151:gpr64common, %148:gpr64, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %154
  UpdateRegP: SU(9) STRDroX %154:fpr64, %151:gpr64common, %148:gpr64, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
              to GPR32 2
  LiveReg: %151
  UpdateRegP: SU(6) %152:fpr64 = LDRDroX %151:gpr64common, %148:gpr64, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(9) STRDroX %154:fpr64, %151:gpr64common, %148:gpr64, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
              to GPR32 1
  LiveReg: %148
  UpdateRegP: SU(3) %149:fpr64 = LDRDroX %146:gpr64common, %148:gpr64, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(6) %152:fpr64 = LDRDroX %151:gpr64common, %148:gpr64, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(9) STRDroX %154:fpr64, %151:gpr64common, %148:gpr64, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
              to 
  Ready @6c
  BotQ.A BotLatency SU(9) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %154:fpr64 = FADDDrr %149:fpr64, %153:fpr64, debug-location !988; cg.c:539:25
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %149
  UpdateRegP: SU(8) %154:fpr64 = FADDDrr %149:fpr64, %153:fpr64, debug-location !988; cg.c:539:25
              to 
  LiveReg: %153
  UpdateRegP: SU(8) %154:fpr64 = FADDDrr %149:fpr64, %153:fpr64, debug-location !988; cg.c:539:25
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(8) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %153:fpr64 = FMULDrr %150:fpr64, %152:fpr64, debug-location !987; cg.c:539:32
Bottom Pressure:
FPR8=3
GPR32=2
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %150
  UpdateRegP: SU(7) %153:fpr64 = FMULDrr %150:fpr64, %152:fpr64, debug-location !987; cg.c:539:32
              to 
  LiveReg: %152
  UpdateRegP: SU(7) %153:fpr64 = FMULDrr %150:fpr64, %152:fpr64, debug-location !987; cg.c:539:32
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  BotQ.A BotLatency SU(7) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 4 6 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %149:fpr64 = LDRDroX %146:gpr64common, %148:gpr64, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %146
  UpdateRegP: SU(3) %149:fpr64 = LDRDroX %146:gpr64common, %148:gpr64, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A BotLatency SU(3) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(6) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %152:fpr64 = LDRDroX %151:gpr64common, %148:gpr64, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @12c
  BotQ.A BotLatency SU(6) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 5 
Queue BotQ.A: 4 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %150:fpr64 = LDRDui %stack.18.beta, 0, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
Bottom Pressure:
GPR32=3
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 5 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %148:gpr64 = UBFMXri %147:gpr64, 61, 60, debug-location !981; cg.c:539:20
Bottom Pressure:
GPR32=3
  LiveReg: %147
  UpdateRegP: SU(2) %148:gpr64 = UBFMXri %147:gpr64, 61, 60, debug-location !981; cg.c:539:20
              to GPR32 -1
  Ready @14c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 5 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %146:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
Bottom Pressure:
GPR32=2
  Ready @15c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %151:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
Bottom Pressure:
GPR32=1
  Ready @16c
  BotQ.A BotLatency SU(5) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 18 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %147:gpr64 = LDRSWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
Bottom Pressure:

  Ready @18c
  BotQ.A BotLatency SU(1) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(1):   %147:gpr64 = LDRSWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
SU(5):   %151:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
SU(0):   %146:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
SU(2):   %148:gpr64 = UBFMXri %147:gpr64, 61, 60, debug-location !981; cg.c:539:20
SU(4):   %150:fpr64 = LDRDui %stack.18.beta, 0, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
SU(6):   %152:fpr64 = LDRDroX %151:gpr64common, %148:gpr64, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
SU(3):   %149:fpr64 = LDRDroX %146:gpr64common, %148:gpr64, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
SU(7):   %153:fpr64 = FMULDrr %150:fpr64, %152:fpr64, debug-location !987; cg.c:539:32
SU(8):   %154:fpr64 = FADDDrr %149:fpr64, %153:fpr64, debug-location !988; cg.c:539:25
SU(9):   STRDroX %154:fpr64, %151:gpr64common, %148:gpr64, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
SU(10):   %155:gpr32common = LDRWui %stack.9.j, 0, debug-location !992 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
SU(11):   %156:gpr32common = nsw ADDWri %155:gpr32common, 1, 0, debug-location !992; cg.c:538:50
SU(12):   STRWui %156:gpr32common, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50

********** MI Scheduling **********
conj_grad:%bb.26 for.inc124
  From: %144:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
    To: B %bb.7, debug-location !997; cg.c:434:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %144:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%144
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0, debug-location !996; cg.c:434:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%144
  Successors:
    SU(2): Data Latency=1 Reg=%145
  Single Issue       : false;
SU(2):   STRWui %145:gpr32common, %stack.11.cgit, 0, debug-location !996 :: (store 4 into %ir.cgit); cg.c:434:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%145
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.7, debug-location !997; cg.c:434:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %145:gpr32common, %stack.11.cgit, 0, debug-location !996 :: (store 4 into %ir.cgit); cg.c:434:41
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0, debug-location !996; cg.c:434:41
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %144:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %144:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
SU(1):   %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0, debug-location !996; cg.c:434:41
SU(2):   STRWui %145:gpr32common, %stack.11.cgit, 0, debug-location !996 :: (store 4 into %ir.cgit); cg.c:434:41

********** MI Scheduling **********
conj_grad:%bb.27 for.end126
  From: STRXui $xzr, %stack.14.sum, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.14.sum, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.9.j, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %34:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   %36:gpr64temp = ADRP target-flags(aarch64-page) @firstrow
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %36:gpr64temp = ADRP target-flags(aarch64-page) @firstrow
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %34:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.9.j, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.14.sum, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   STRXui $xzr, %stack.14.sum, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
SU(1):   STRWui $wzr, %stack.9.j, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
SU(2):   %34:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
SU(3):   %36:gpr64temp = ADRP target-flags(aarch64-page) @firstrow

********** MI Scheduling **********
conj_grad:%bb.28 for.cond127
  From: %33:gpr32 = LDRWui %stack.9.j, 0, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
    To: Bcc 10, %bb.33, implicit killed $nzcv, debug-location !1011; cg.c:549:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %33:gpr32 = LDRWui %stack.9.j, 0, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%33
  Single Issue       : false;
SU(1):   %35:gpr32 = LDRWui %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%35
  Single Issue       : false;
SU(2):   %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !1007 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%37
  Single Issue       : false;
SU(3):   %38:gpr32common = nsw SUBWrr %35:gpr32, %37:gpr32, debug-location !1008; cg.c:549:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%37
    SU(1): Data Latency=4 Reg=%35
  Successors:
    SU(4): Data Latency=1 Reg=%38
  Single Issue       : false;
SU(4):   %39:gpr32common = nsw ADDWri %38:gpr32common, 1, 0, debug-location !1009; cg.c:549:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%38
  Successors:
    SU(5): Data Latency=1 Reg=%39
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %33:gpr32, %39:gpr32common, implicit-def $nzcv, debug-location !1011; cg.c:549:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%39
    SU(0): Data Latency=4 Reg=%33
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.33, implicit killed $nzcv, debug-location !1011; cg.c:549:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %33:gpr32, %39:gpr32common, implicit-def $nzcv, debug-location !1011; cg.c:549:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %39:gpr32common = nsw ADDWri %38:gpr32common, 1, 0, debug-location !1009; cg.c:549:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %38:gpr32common = nsw SUBWrr %35:gpr32, %37:gpr32, debug-location !1008; cg.c:549:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %33:gpr32 = LDRWui %stack.9.j, 0, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !1007 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %35:gpr32 = LDRWui %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(1):   %35:gpr32 = LDRWui %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
SU(2):   %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !1007 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
SU(0):   %33:gpr32 = LDRWui %stack.9.j, 0, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
SU(3):   %38:gpr32common = nsw SUBWrr %35:gpr32, %37:gpr32, debug-location !1008; cg.c:549:29
SU(4):   %39:gpr32common = nsw ADDWri %38:gpr32common, 1, 0, debug-location !1009; cg.c:549:40
SU(5):   dead $wzr = SUBSWrr %33:gpr32, %39:gpr32common, implicit-def $nzcv, debug-location !1011; cg.c:549:5

********** MI Scheduling **********
conj_grad:%bb.29 for.body131
  From: STRXui $xzr, %stack.13.d, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRXui $xzr, %stack.13.d, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %65:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%65
  Single Issue       : false;
SU(2):   %66:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%66
  Single Issue       : false;
SU(3):   %67:gpr32 = LDRWroX %65:gpr64common, %66:gpr64, 0, 1, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%66
    SU(1): Data Latency=4 Reg=%65
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%67
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %67:gpr32, %stack.10.k, 0, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%67
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %67:gpr32, %stack.10.k, 0, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %67:gpr32 = LDRWroX %65:gpr64common, %66:gpr64, 0, 1, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRXui $xzr, %stack.13.d, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %66:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %65:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(1):   %65:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
SU(2):   %66:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
SU(0):   STRXui $xzr, %stack.13.d, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
SU(3):   %67:gpr32 = LDRWroX %65:gpr64common, %66:gpr64, 0, 1, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
SU(4):   STRWui %67:gpr32, %stack.10.k, 0, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16

********** MI Scheduling **********
conj_grad:%bb.30 for.cond134
  From: %68:gpr32 = LDRWui %stack.10.k, 0, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
    To: Bcc 10, %bb.32, implicit killed $nzcv, debug-location !1025; cg.c:551:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %68:gpr32 = LDRWui %stack.10.k, 0, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%68
  Single Issue       : false;
SU(1):   %69:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%69
  Single Issue       : false;
SU(2):   %70:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%70
  Single Issue       : false;
SU(3):   %71:gpr64common = ADDXrs %69:gpr64, %70:gpr64, 2, debug-location !1021; cg.c:551:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%70
    SU(1): Data Latency=4 Reg=%69
  Successors:
    SU(4): Data Latency=1 Reg=%71
  Single Issue       : false;
SU(4):   %72:gpr32 = LDRWui %71:gpr64common, 1, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%71
  Successors:
    SU(5): Data Latency=4 Reg=%72
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %68:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !1025; cg.c:551:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%72
    SU(0): Data Latency=4 Reg=%68
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.32, implicit killed $nzcv, debug-location !1025; cg.c:551:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %68:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !1025; cg.c:551:9
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %72:gpr32 = LDRWui %71:gpr64common, 1, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %71:gpr64common = ADDXrs %69:gpr64, %70:gpr64, 2, debug-location !1021; cg.c:551:33
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %68:gpr32 = LDRWui %stack.10.k, 0, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %70:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %69:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(1):   %69:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
SU(2):   %70:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
SU(0):   %68:gpr32 = LDRWui %stack.10.k, 0, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
SU(3):   %71:gpr64common = ADDXrs %69:gpr64, %70:gpr64, 2, debug-location !1021; cg.c:551:33
SU(4):   %72:gpr32 = LDRWui %71:gpr64common, 1, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:33
SU(5):   dead $wzr = SUBSWrr %68:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !1025; cg.c:551:9

********** MI Scheduling **********
conj_grad:%bb.31 for.body139
  From: %79:fpr64 = LDRDui %stack.13.d, 0, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
    To: B %bb.30, debug-location !1037; cg.c:551:9
 RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=3
GPR32=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %79:fpr64 = LDRDui %stack.13.d, 0, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=%79
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %80:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%80
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %81:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(11): Data Latency=4 Reg=%81
    SU(6): Data Latency=4 Reg=%81
    SU(3): Data Latency=4 Reg=%81
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %83:fpr64 = LDRDroX %80:gpr64common, %81:gpr64common, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%81
    SU(1): Data Latency=4 Reg=%80
  Successors:
    SU(8): Data Latency=4 Reg=%83
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %84:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=%84
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %85:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(6): Data Latency=4 Reg=%85
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %86:gpr64 = LDRSWroX %85:gpr64common, %81:gpr64common, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(5): Data Latency=4 Reg=%85
    SU(2): Data Latency=4 Reg=%81
  Successors:
    SU(7): Data Latency=4 Reg=%86
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %87:fpr64 = LDRDroX %84:gpr64common, %86:gpr64, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=%86
    SU(4): Data Latency=4 Reg=%84
  Successors:
    SU(8): Data Latency=4 Reg=%87
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %88:fpr64 = FMULDrr %83:fpr64, %87:fpr64, debug-location !1033; cg.c:552:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(7): Data Latency=4 Reg=%87
    SU(3): Data Latency=4 Reg=%83
  Successors:
    SU(9): Data Latency=1 Reg=%88
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(9):   %89:fpr64 = FADDDrr %79:fpr64, %88:fpr64, debug-location !1034; cg.c:552:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(8): Data Latency=1 Reg=%88
    SU(0): Data Latency=4 Reg=%79
  Successors:
    SU(10): Data Latency=1 Reg=%89
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(10):   STRDui %89:fpr64, %stack.13.d, 0, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%89
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   %90:gpr32common = nsw ADDWri %81.sub_32:gpr64common, 1, 0, debug-location !1036; cg.c:551:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%81
  Successors:
    SU(12): Data Latency=1 Reg=%90
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   STRWui %90:gpr32common, %stack.10.k, 0, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%90
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.30, debug-location !1037; cg.c:551:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 14
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %90:gpr32common, %stack.10.k, 0, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
Bottom Pressure:
GPR32=1
  LiveReg: %90
  UpdateRegP: SU(12) STRWui %90:gpr32common, %stack.10.k, 0, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
              to 
  Ready @0c
  BotQ.A TopLatency SU(12) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
BotQ.A RemLatency SU(10) 14c
  BotQ.A RemainingLatency 14 + 1c > CritPath 14
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) STRDui %89:fpr64, %stack.13.d, 0, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %89
  UpdateRegP: SU(10) STRDui %89:fpr64, %stack.13.d, 0, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
              to 
  Ready @1c
  BotQ.A TopLatency SU(10) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
BotQ.A RemLatency SU(9) 13c
  BotQ.A RemainingLatency 13 + 2c > CritPath 14
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(9) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %89:fpr64 = FADDDrr %79:fpr64, %88:fpr64, debug-location !1034; cg.c:552:19
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %79
  UpdateRegP: SU(9) %89:fpr64 = FADDDrr %79:fpr64, %88:fpr64, debug-location !1034; cg.c:552:19
              to 
  LiveReg: %88
  UpdateRegP: SU(9) %89:fpr64 = FADDDrr %79:fpr64, %88:fpr64, debug-location !1034; cg.c:552:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 11 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 5 
BotQ.A RemLatency SU(8) 12c
  BotQ.A RemainingLatency 12 + 3c > CritPath 14
Picking from Bot:
  Cand SU(11) ORDER                              
  Cand SU(8) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %88:fpr64 = FMULDrr %83:fpr64, %87:fpr64, debug-location !1033; cg.c:552:26
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %83
  UpdateRegP: SU(8) %88:fpr64 = FMULDrr %83:fpr64, %87:fpr64, debug-location !1033; cg.c:552:26
              to 
  LiveReg: %87
  UpdateRegP: SU(8) %88:fpr64 = FMULDrr %83:fpr64, %87:fpr64, debug-location !1033; cg.c:552:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(8) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 7 3 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %90:gpr32common = nsw ADDWri %81.sub_32:gpr64common, 1, 0, debug-location !1036; cg.c:551:49
Bottom Pressure:
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %81
  UpdateRegP: SU(3) %83:fpr64 = LDRDroX %80:gpr64common, %81:gpr64common, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(6) %86:gpr64 = LDRSWroX %85:gpr64common, %81:gpr64common, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
              to 
  UpdateRegP: SU(11) %90:gpr32common = nsw ADDWri %81.sub_32:gpr64common, 1, 0, debug-location !1036; cg.c:551:49
              to GPR32 -1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 3 7 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %79:fpr64 = LDRDui %stack.13.d, 0, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @6c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 7 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
BotQ.A RemLatency SU(7) 8c
  BotQ.A RemainingLatency 8 + 7c > CritPath 14
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(7) BOT-PATH                  8 cycles 
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(7) %87:fpr64 = LDRDroX %84:gpr64common, %86:gpr64, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %84
  UpdateRegP: SU(7) %87:fpr64 = LDRDroX %84:gpr64common, %86:gpr64, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %86
  UpdateRegP: SU(7) %87:fpr64 = LDRDroX %84:gpr64common, %86:gpr64, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %83:fpr64 = LDRDroX %80:gpr64common, %81:gpr64common, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
Bottom Pressure:
GPR32=4
  LiveReg: %80
  UpdateRegP: SU(3) %83:fpr64 = LDRDroX %80:gpr64common, %81:gpr64common, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 6 4 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
BotQ.A RemLatency SU(6) 4c
  BotQ.A RemainingLatency 4 + 11c > CritPath 14
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(6) %86:gpr64 = LDRSWroX %85:gpr64common, %81:gpr64common, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
Bottom Pressure:
GPR32=4
  LiveReg: %85
  UpdateRegP: SU(6) %86:gpr64 = LDRSWroX %85:gpr64common, %81:gpr64common, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 5 
Queue BotQ.A: 4 1 
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 4 
  BotQ.A RemainingLatency 3 + 12c > CritPath 14
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %84:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
Bottom Pressure:
GPR32=3
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 5 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %80:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
Bottom Pressure:
GPR32=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 5 
Queue TopQ.P: 
Queue TopQ.A: 5 2 
  BotQ.A RemainingLatency 0 + 15c > CritPath 14
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %85:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
Bottom Pressure:
GPR32=1
  Ready @15c
  BotQ.A BotLatency SU(5) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 12
  Executed: 16c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %81:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
Bottom Pressure:

  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 13
  Executed: 17c
  Critical: 13c, 13 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(2):   %81:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
SU(5):   %85:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
SU(1):   %80:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
SU(4):   %84:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
SU(6):   %86:gpr64 = LDRSWroX %85:gpr64common, %81:gpr64common, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
SU(3):   %83:fpr64 = LDRDroX %80:gpr64common, %81:gpr64common, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
SU(7):   %87:fpr64 = LDRDroX %84:gpr64common, %86:gpr64, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
SU(0):   %79:fpr64 = LDRDui %stack.13.d, 0, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
SU(11):   %90:gpr32common = nsw ADDWri %81.sub_32:gpr64common, 1, 0, debug-location !1036; cg.c:551:49
SU(8):   %88:fpr64 = FMULDrr %83:fpr64, %87:fpr64, debug-location !1033; cg.c:552:26
SU(9):   %89:fpr64 = FADDDrr %79:fpr64, %88:fpr64, debug-location !1034; cg.c:552:19
SU(10):   STRDui %89:fpr64, %stack.13.d, 0, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
SU(12):   STRWui %90:gpr32common, %stack.10.k, 0, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49

********** MI Scheduling **********
conj_grad:%bb.32 for.end150
  From: %74:fpr64 = LDRDui %stack.13.d, 0, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
    To: B %bb.28, debug-location !1045; cg.c:549:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %74:fpr64 = LDRDui %stack.13.d, 0, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%74
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %75:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%75
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %76:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%76
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRDroX %74:fpr64, %75:gpr64common, %76:gpr64, 0, 1, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  # preds left       : 6
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%76
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%75
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%74
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=1 Memory
  Single Issue       : false;
SU(4):   %77:gpr32common = LDRWui %stack.9.j, 0, debug-location !1044 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%77
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !1044; cg.c:549:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%77
  Successors:
    SU(6): Data Latency=1 Reg=%78
  Single Issue       : false;
SU(6):   STRWui %78:gpr32common, %stack.9.j, 0, debug-location !1044 :: (store 4 into %ir.j); cg.c:549:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%78
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.28, debug-location !1045; cg.c:549:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %78:gpr32common, %stack.9.j, 0, debug-location !1044 :: (store 4 into %ir.j); cg.c:549:46
  Ready @0c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !1044; cg.c:549:46
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %77:gpr32common = LDRWui %stack.9.j, 0, debug-location !1044 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDroX %74:fpr64, %75:gpr64common, %76:gpr64, 0, 1, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %76:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 11c > CritPath 10
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %75:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %74:fpr64 = LDRDui %stack.13.d, 0, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %74:fpr64 = LDRDui %stack.13.d, 0, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
SU(1):   %75:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
SU(2):   %76:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
SU(3):   STRDroX %74:fpr64, %75:gpr64common, %76:gpr64, 0, 1, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
SU(4):   %77:gpr32common = LDRWui %stack.9.j, 0, debug-location !1044 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
SU(5):   %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !1044; cg.c:549:46
SU(6):   STRWui %78:gpr32common, %stack.9.j, 0, debug-location !1044 :: (store 4 into %ir.j); cg.c:549:46

********** MI Scheduling **********
conj_grad:%bb.33 for.end155
  From: STRWui $wzr, %stack.9.j, 0, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.9.j, 0, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %43:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %45:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %45:gpr64temp = ADRP target-flags(aarch64-page) @firstcol
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %43:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.9.j, 0, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   STRWui $wzr, %stack.9.j, 0, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
SU(1):   %43:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
SU(2):   %45:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

********** MI Scheduling **********
conj_grad:%bb.34 for.cond156
  From: %42:gpr32 = LDRWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
    To: Bcc 10, %bb.36, implicit killed $nzcv, debug-location !1058; cg.c:560:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %42:gpr32 = LDRWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%42
  Single Issue       : false;
SU(1):   %44:gpr32 = LDRWui %43:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%44
  Single Issue       : false;
SU(2):   %46:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1054 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=%46
  Single Issue       : false;
SU(3):   %47:gpr32common = nsw SUBWrr %44:gpr32, %46:gpr32, debug-location !1055; cg.c:560:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(2): Data Latency=4 Reg=%46
    SU(1): Data Latency=4 Reg=%44
  Successors:
    SU(4): Data Latency=1 Reg=%47
  Single Issue       : false;
SU(4):   %48:gpr32common = nsw ADDWri %47:gpr32common, 1, 0, debug-location !1056; cg.c:560:40
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%47
  Successors:
    SU(5): Data Latency=1 Reg=%48
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %42:gpr32, %48:gpr32common, implicit-def $nzcv, debug-location !1058; cg.c:560:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%48
    SU(0): Data Latency=4 Reg=%42
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.36, implicit killed $nzcv, debug-location !1058; cg.c:560:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 7
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %42:gpr32, %48:gpr32common, implicit-def $nzcv, debug-location !1058; cg.c:560:5
  Ready @1c
  BotQ.A TopLatency SU(5) 6c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %48:gpr32common = nsw ADDWri %47:gpr32common, 1, 0, debug-location !1056; cg.c:560:40
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %47:gpr32common = nsw SUBWrr %44:gpr32, %46:gpr32, debug-location !1055; cg.c:560:29
  Ready @3c
  BotQ.A BotLatency SU(3) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 3
  Executed: 4c
  Critical: 3c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %42:gpr32 = LDRWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 7 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %46:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1054 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  Ready @7c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %44:gpr32 = LDRWui %43:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(1):   %44:gpr32 = LDRWui %43:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
SU(2):   %46:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1054 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
SU(0):   %42:gpr32 = LDRWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
SU(3):   %47:gpr32common = nsw SUBWrr %44:gpr32, %46:gpr32, debug-location !1055; cg.c:560:29
SU(4):   %48:gpr32common = nsw ADDWri %47:gpr32common, 1, 0, debug-location !1056; cg.c:560:40
SU(5):   dead $wzr = SUBSWrr %42:gpr32, %48:gpr32common, implicit-def $nzcv, debug-location !1058; cg.c:560:5

********** MI Scheduling **********
conj_grad:%bb.35 for.body160
  From: %52:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
    To: B %bb.34, debug-location !1073; cg.c:560:5
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %52:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Data Latency=4 Reg=%52
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %53:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(12): Data Latency=4 Reg=%53
    SU(2): Data Latency=4 Reg=%53
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %55:gpr64 = UBFMXri %53:gpr64common, 61, 60, debug-location !1059; cg.c:561:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 8
  Predecessors:
    SU(1): Data Latency=4 Reg=%53
  Successors:
    SU(5): Data Latency=1 Reg=%55
    SU(3): Data Latency=1 Reg=%55
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %56:fpr64 = LDRDroX %52:gpr64common, %55:gpr64, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Data Latency=1 Reg=%55
    SU(0): Data Latency=4 Reg=%52
  Successors:
    SU(6): Data Latency=4 Reg=%56
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %57:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Data Latency=4 Reg=%57
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %58:fpr64 = LDRDroX %57:gpr64common, %55:gpr64, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(2): Data Latency=1 Reg=%55
    SU(4): Data Latency=4 Reg=%57
  Successors:
    SU(6): Data Latency=4 Reg=%58
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(6):   %59:fpr64 = FSUBDrr %56:fpr64, %58:fpr64, debug-location !1064; cg.c:561:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 3
  Predecessors:
    SU(5): Data Latency=4 Reg=%58
    SU(3): Data Latency=4 Reg=%56
  Successors:
    SU(9): Data Latency=1 Reg=%59
    SU(7): Data Latency=1 Reg=%59
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   STRDui %59:fpr64, %stack.13.d, 0, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%59
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(8):   %60:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%60
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(9):   %61:fpr64 = FMULDrr %59:fpr64, %59:fpr64, debug-location !1069; cg.c:562:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=%59
  Successors:
    SU(10): Data Latency=1 Reg=%61
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   %62:fpr64 = FADDDrr %60:fpr64, %61:fpr64, debug-location !1070; cg.c:562:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 1
  Predecessors:
    SU(9): Data Latency=1 Reg=%61
    SU(8): Data Latency=4 Reg=%60
  Successors:
    SU(11): Data Latency=1 Reg=%62
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   STRDui %62:fpr64, %stack.14.sum, 0, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%62
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(12):   %63:gpr32common = nsw ADDWri %53.sub_32:gpr64common, 1, 0, debug-location !1072; cg.c:560:46
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%53
  Successors:
    SU(13): Data Latency=1 Reg=%63
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   STRWui %63:gpr32common, %stack.9.j, 0, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%63
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.34, debug-location !1073; cg.c:560:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 12
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 11 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
Picking from Bot:
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) STRWui %63:gpr32common, %stack.9.j, 0, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
Bottom Pressure:
GPR32=1
  LiveReg: %63
  UpdateRegP: SU(13) STRWui %63:gpr32common, %stack.9.j, 0, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 11 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(11) 12c
  BotQ.A RemainingLatency 12 + 1c > CritPath 12
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(11) BOT-PATH                  12 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(11) STRDui %62:fpr64, %stack.14.sum, 0, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %62
  UpdateRegP: SU(11) STRDui %62:fpr64, %stack.14.sum, 0, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
              to 
  Ready @1c
  BotQ.A TopLatency SU(11) 12c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(10) 11c
  BotQ.A RemainingLatency 11 + 2c > CritPath 12
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(10) BOT-PATH                  11 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(10) %62:fpr64 = FADDDrr %60:fpr64, %61:fpr64, debug-location !1070; cg.c:562:19
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %60
  UpdateRegP: SU(10) %62:fpr64 = FADDDrr %60:fpr64, %61:fpr64, debug-location !1070; cg.c:562:19
              to 
  LiveReg: %61
  UpdateRegP: SU(10) %62:fpr64 = FADDDrr %60:fpr64, %61:fpr64, debug-location !1070; cg.c:562:19
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 7 12 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(7) 10c
  BotQ.A RemainingLatency 10 + 3c > CritPath 12
Picking from Bot:
  Cand SU(7) ORDER                              
  Cand SU(12) REG-MAX                            
  Cand SU(9) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %61:fpr64 = FMULDrr %59:fpr64, %59:fpr64, debug-location !1069; cg.c:562:23
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %59
  UpdateRegP: SU(7) STRDui %59:fpr64, %stack.13.d, 0, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
              to 
  UpdateRegP: SU(9) %61:fpr64 = FMULDrr %59:fpr64, %59:fpr64, debug-location !1069; cg.c:562:23
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(9) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 7 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(7) 10c
  BotQ.A RemainingLatency 10 + 4c > CritPath 12
Picking from Bot:
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) STRDui %59:fpr64, %stack.13.d, 0, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @4c
  BotQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 8 
Queue BotQ.A: 12 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(6) 9c
  BotQ.A RemainingLatency 9 + 5c > CritPath 12
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(12) %63:gpr32common = nsw ADDWri %53.sub_32:gpr64common, 1, 0, debug-location !1072; cg.c:560:46
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %53
  UpdateRegP: SU(2) %55:gpr64 = UBFMXri %53:gpr64common, 61, 60, debug-location !1059; cg.c:561:13
              to GPR32 -1
  UpdateRegP: SU(12) %63:gpr32common = nsw ADDWri %53.sub_32:gpr64common, 1, 0, debug-location !1072; cg.c:560:46
              to GPR32 -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 8 
BotQ.A RemLatency SU(6) 9c
  BotQ.A RemainingLatency 9 + 6c > CritPath 12
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(8) %60:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @6c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %59:fpr64 = FSUBDrr %56:fpr64, %58:fpr64, debug-location !1064; cg.c:561:18
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %56
  UpdateRegP: SU(6) %59:fpr64 = FSUBDrr %56:fpr64, %58:fpr64, debug-location !1064; cg.c:561:18
              to 
  LiveReg: %58
  UpdateRegP: SU(6) %59:fpr64 = FSUBDrr %56:fpr64, %58:fpr64, debug-location !1064; cg.c:561:18
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 12
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %58:fpr64 = LDRDroX %57:gpr64common, %55:gpr64, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %57
  UpdateRegP: SU(5) %58:fpr64 = LDRDroX %57:gpr64common, %55:gpr64, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %55
  UpdateRegP: SU(3) %56:fpr64 = LDRDroX %52:gpr64common, %55:gpr64, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(5) %58:fpr64 = LDRDroX %57:gpr64common, %55:gpr64, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @11c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %56:fpr64 = LDRDroX %52:gpr64common, %55:gpr64, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
Bottom Pressure:
GPR32=4
  LiveReg: %52
  UpdateRegP: SU(3) %56:fpr64 = LDRDroX %52:gpr64common, %55:gpr64, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %55:gpr64 = UBFMXri %53:gpr64common, 61, 60, debug-location !1059; cg.c:561:13
Bottom Pressure:
GPR32=3
  Ready @13c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 1 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %57:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
Bottom Pressure:
GPR32=2
  Ready @15c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 12
  Executed: 16c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %52:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
Bottom Pressure:
GPR32=1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 13
  Executed: 17c
  Critical: 13c, 13 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %53:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
Bottom Pressure:

  Ready @17c
  BotQ.A BotLatency SU(1) 12c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 14
  Executed: 18c
  Critical: 14c, 14 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(1):   %53:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
SU(0):   %52:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
SU(4):   %57:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
SU(2):   %55:gpr64 = UBFMXri %53:gpr64common, 61, 60, debug-location !1059; cg.c:561:13
SU(3):   %56:fpr64 = LDRDroX %52:gpr64common, %55:gpr64, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
SU(5):   %58:fpr64 = LDRDroX %57:gpr64common, %55:gpr64, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
SU(6):   %59:fpr64 = FSUBDrr %56:fpr64, %58:fpr64, debug-location !1064; cg.c:561:18
SU(8):   %60:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
SU(12):   %63:gpr32common = nsw ADDWri %53.sub_32:gpr64common, 1, 0, debug-location !1072; cg.c:560:46
SU(7):   STRDui %59:fpr64, %stack.13.d, 0, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
SU(9):   %61:fpr64 = FMULDrr %59:fpr64, %59:fpr64, debug-location !1069; cg.c:562:23
SU(10):   %62:fpr64 = FADDDrr %60:fpr64, %61:fpr64, debug-location !1070; cg.c:562:19
SU(11):   STRDui %62:fpr64, %stack.14.sum, 0, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
SU(13):   STRWui %63:gpr32common, %stack.9.j, 0, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46

********** MI Scheduling **********
conj_grad:%bb.36 for.end170
  From: %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
    To: Bcc 7, %bb.38, implicit killed $nzcv, debug-location !1078; cg.c:565:6
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=4 Reg=%0
  Single Issue       : false;
SU(1):   %248:fpr64 = FSQRTDr %0:fpr64, debug-location !1077; cg.c:565:14
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=%0
  Successors:
    SU(2): Data Latency=1 Reg=%248
  Single Issue       : false;
SU(2):   FCMPDrr %248:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !1078; cg.c:565:6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=%248
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 7, %bb.38, implicit killed $nzcv, debug-location !1078; cg.c:565:6
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) FCMPDrr %248:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !1078; cg.c:565:6
  Ready @1c
  BotQ.A TopLatency SU(2) 5c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %248:fpr64 = FSQRTDr %0:fpr64, debug-location !1077; cg.c:565:14
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  Ready @6c
  BotQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
SU(1):   %248:fpr64 = FSQRTDr %0:fpr64, debug-location !1077; cg.c:565:14
SU(2):   FCMPDrr %248:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !1078; cg.c:565:6

********** MI Scheduling **********
conj_grad:%bb.38 for.end170.split
  From: %51:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
    To: RET_ReallyLR debug-location !1080; cg.c:566:1
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %51:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%51
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRDui %248:fpr64, %51:gpr64common, 0, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%51
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   RET_ReallyLR debug-location !1080; cg.c:566:1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %248:fpr64, %51:gpr64common, 0, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
  Ready @0c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %51:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  Ready @4c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %51:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
SU(1):   STRDui %248:fpr64, %51:gpr64common, 0, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12

********** INTERVALS **********
W0 [0B,96r:0)  0@0B-phi
W1 [0B,80r:0)  0@0B-phi
W2 [0B,64r:0)  0@0B-phi
W3 [0B,48r:0)  0@0B-phi
W4 [0B,32r:0)  0@0B-phi
W5 [0B,16r:0)  0@0B-phi
%0 [5840r,6112r:0)  0@5840r weight:0.000000e+00
%4 [96r,112r:0)  0@96r weight:0.000000e+00
%5 [80r,128r:0)  0@80r weight:0.000000e+00
%6 [64r,144r:0)  0@64r weight:0.000000e+00
%7 [48r,160r:0)  0@48r weight:0.000000e+00
%8 [32r,176r:0)  0@32r weight:0.000000e+00
%9 [16r,192r:0)  0@16r weight:0.000000e+00
%10 [208r,296r:0)  0@208r weight:0.000000e+00
%13 [360r,384r:0)  0@360r weight:0.000000e+00
%14 [304r,816B:0)  0@304r weight:0.000000e+00
%15 [352r,368r:0)  0@352r weight:0.000000e+00
%16 [368r,384r:0)  0@368r weight:0.000000e+00
%19 [952r,992r:0)  0@952r weight:0.000000e+00
%20 [864r,1232B:0)  0@864r weight:0.000000e+00
%21 [928r,960r:0)  0@928r weight:0.000000e+00
%22 [880r,1232B:0)  0@880r weight:0.000000e+00
%23 [944r,960r:0)  0@944r weight:0.000000e+00
%24 [960r,976r:0)  0@960r weight:0.000000e+00
%25 [976r,992r:0)  0@976r weight:0.000000e+00
%27 [1248r,1320r:0)  0@1248r weight:0.000000e+00
%28 [1360r,1392r:0)  0@1360r weight:0.000000e+00
%29 [1376r,1392r:0)  0@1376r weight:0.000000e+00
%33 [4584r,4624r:0)  0@4584r weight:0.000000e+00
%34 [4496r,5328B:0)  0@4496r weight:0.000000e+00
%35 [4560r,4592r:0)  0@4560r weight:0.000000e+00
%36 [4512r,5328B:0)  0@4512r weight:0.000000e+00
%37 [4576r,4592r:0)  0@4576r weight:0.000000e+00
%38 [4592r,4608r:0)  0@4592r weight:0.000000e+00
%39 [4608r,4624r:0)  0@4608r weight:0.000000e+00
%42 [5464r,5504r:0)  0@5464r weight:0.000000e+00
%43 [5376r,5824B:0)  0@5376r weight:0.000000e+00
%44 [5440r,5472r:0)  0@5440r weight:0.000000e+00
%45 [5392r,5824B:0)  0@5392r weight:0.000000e+00
%46 [5456r,5472r:0)  0@5456r weight:0.000000e+00
%47 [5472r,5488r:0)  0@5472r weight:0.000000e+00
%48 [5488r,5504r:0)  0@5488r weight:0.000000e+00
%51 [6144r,6160r:0)  0@6144r weight:0.000000e+00
%52 [5592r,5656r:0)  0@5592r weight:0.000000e+00
%53 [5584r,5776r:0)  0@5584r weight:0.000000e+00
%55 [5652r,5664r:0)  0@5652r weight:0.000000e+00
%56 [5656r,5680r:0)  0@5656r weight:0.000000e+00
%57 [5648r,5664r:0)  0@5648r weight:0.000000e+00
%58 [5664r,5680r:0)  0@5664r weight:0.000000e+00
%59 [5680r,5784r:0)  0@5680r weight:0.000000e+00
%60 [5712r,5792r:0)  0@5712r weight:0.000000e+00
%61 [5784r,5792r:0)  0@5784r weight:0.000000e+00
%62 [5792r,5800r:0)  0@5792r weight:0.000000e+00
%63 [5776r,5808r:0)  0@5776r weight:0.000000e+00
%65 [4720r,4752r:0)  0@4720r weight:0.000000e+00
%66 [4736r,4752r:0)  0@4736r weight:0.000000e+00
%67 [4752r,4768r:0)  0@4752r weight:0.000000e+00
%68 [4840r,4880r:0)  0@4840r weight:0.000000e+00
%69 [4816r,4848r:0)  0@4816r weight:0.000000e+00
%70 [4832r,4848r:0)  0@4832r weight:0.000000e+00
%71 [4848r,4864r:0)  0@4848r weight:0.000000e+00
%72 [4864r,4880r:0)  0@4864r weight:0.000000e+00
%74 [5200r,5248r:0)  0@5200r weight:0.000000e+00
%75 [5216r,5248r:0)  0@5216r weight:0.000000e+00
%76 [5232r,5248r:0)  0@5232r weight:0.000000e+00
%77 [5264r,5280r:0)  0@5264r weight:0.000000e+00
%78 [5280r,5296r:0)  0@5280r weight:0.000000e+00
%79 [5080r,5152r:0)  0@5080r weight:0.000000e+00
%80 [5044r,5064r:0)  0@5044r weight:0.000000e+00
%81 [4976r,5136r:0)  0@4976r weight:0.000000e+00
%83 [5064r,5144r:0)  0@5064r weight:0.000000e+00
%84 [5048r,5072r:0)  0@5048r weight:0.000000e+00
%85 [5040r,5056r:0)  0@5040r weight:0.000000e+00
%86 [5056r,5072r:0)  0@5056r weight:0.000000e+00
%87 [5072r,5144r:0)  0@5072r weight:0.000000e+00
%88 [5144r,5152r:0)  0@5144r weight:0.000000e+00
%89 [5152r,5160r:0)  0@5152r weight:0.000000e+00
%90 [5136r,5168r:0)  0@5136r weight:0.000000e+00
%92 [1544r,1584r:0)  0@1544r weight:0.000000e+00
%93 [1280r,4416B:0)  0@1280r weight:0.000000e+00
%94 [1520r,1552r:0)  0@1520r weight:0.000000e+00
%95 [1296r,4416B:0)  0@1296r weight:0.000000e+00
%96 [1536r,1552r:0)  0@1536r weight:0.000000e+00
%97 [1552r,1568r:0)  0@1552r weight:0.000000e+00
%98 [1568r,1584r:0)  0@1568r weight:0.000000e+00
%102 [2424r,2464r:0)  0@2424r weight:0.000000e+00
%103 [1312r,4416B:0)  0@1312r weight:0.000000e+00
%104 [2400r,2432r:0)  0@2400r weight:0.000000e+00
%105 [1328r,4416B:0)  0@1328r weight:0.000000e+00
%106 [2416r,2432r:0)  0@2416r weight:0.000000e+00
%107 [2432r,2448r:0)  0@2432r weight:0.000000e+00
%108 [2448r,2464r:0)  0@2448r weight:0.000000e+00
%110 [2768r,2880r:0)  0@2768r weight:0.000000e+00
%111 [2784r,2872r:0)  0@2784r weight:0.000000e+00
%112 [2872r,2888r:0)  0@2872r weight:0.000000e+00
%115 [2968r,3008r:0)  0@2968r weight:0.000000e+00
%117 [2944r,2976r:0)  0@2944r weight:0.000000e+00
%119 [2960r,2976r:0)  0@2960r weight:0.000000e+00
%120 [2976r,2992r:0)  0@2976r weight:0.000000e+00
%121 [2992r,3008r:0)  0@2992r weight:0.000000e+00
%124 [3560r,3600r:0)  0@3560r weight:0.000000e+00
%126 [3536r,3568r:0)  0@3536r weight:0.000000e+00
%128 [3552r,3568r:0)  0@3552r weight:0.000000e+00
%129 [3568r,3584r:0)  0@3568r weight:0.000000e+00
%130 [3584r,3600r:0)  0@3584r weight:0.000000e+00
%132 [3856r,3888r:0)  0@3856r weight:0.000000e+00
%133 [3872r,3888r:0)  0@3872r weight:0.000000e+00
%134 [3888r,3904r:0)  0@3888r weight:0.000000e+00
%136 [4008r,4048r:0)  0@4008r weight:0.000000e+00
%138 [3984r,4016r:0)  0@3984r weight:0.000000e+00
%140 [4000r,4016r:0)  0@4000r weight:0.000000e+00
%141 [4016r,4032r:0)  0@4016r weight:0.000000e+00
%142 [4032r,4048r:0)  0@4032r weight:0.000000e+00
%144 [4352r,4368r:0)  0@4352r weight:0.000000e+00
%145 [4368r,4384r:0)  0@4368r weight:0.000000e+00
%146 [4200r,4232r:0)  0@4200r weight:0.000000e+00
%147 [4128r,4208r:0)  0@4128r weight:0.000000e+00
%148 [4208r,4256r:0)  0@4208r weight:0.000000e+00
%149 [4232r,4248r:0)  0@4232r weight:0.000000e+00
%150 [4216r,4240r:0)  0@4216r weight:0.000000e+00
%151 [4192r,4256r:0)  0@4192r weight:0.000000e+00
%152 [4224r,4240r:0)  0@4224r weight:0.000000e+00
%153 [4240r,4248r:0)  0@4240r weight:0.000000e+00
%154 [4248r,4256r:0)  0@4248r weight:0.000000e+00
%155 [4272r,4288r:0)  0@4272r weight:0.000000e+00
%156 [4288r,4304r:0)  0@4288r weight:0.000000e+00
%157 [3736r,3808r:0)  0@3736r weight:0.000000e+00
%158 [3680r,3728r:0)  0@3680r weight:0.000000e+00
%159 [3696r,3792r:0)  0@3696r weight:0.000000e+00
%161 [3728r,3800r:0)  0@3728r weight:0.000000e+00
%162 [3800r,3808r:0)  0@3800r weight:0.000000e+00
%163 [3808r,3816r:0)  0@3808r weight:0.000000e+00
%164 [3792r,3824r:0)  0@3792r weight:0.000000e+00
%165 [3160r,3216r:0)  0@3160r weight:0.000000e+00
%166 [3088r,3176r:0)  0@3088r weight:0.000000e+00
%167 [3176r,3216r:0)  0@3176r weight:0.000000e+00
%168 [3192r,3208r:0)  0@3192r weight:0.000000e+00
%169 [3168r,3200r:0)  0@3168r weight:0.000000e+00
%170 [3152r,3184r:0)  0@3152r weight:0.000000e+00
%171 [3184r,3200r:0)  0@3184r weight:0.000000e+00
%172 [3200r,3208r:0)  0@3200r weight:0.000000e+00
%173 [3208r,3216r:0)  0@3208r weight:0.000000e+00
%174 [3320r,3376r:0)  0@3320r weight:0.000000e+00
%175 [3248r,3328r:0)  0@3248r weight:0.000000e+00
%176 [3328r,3376r:0)  0@3328r weight:0.000000e+00
%177 [3352r,3368r:0)  0@3352r weight:0.000000e+00
%178 [3336r,3360r:0)  0@3336r weight:0.000000e+00
%179 [3312r,3344r:0)  0@3312r weight:0.000000e+00
%180 [3344r,3360r:0)  0@3344r weight:0.000000e+00
%181 [3360r,3368r:0)  0@3360r weight:0.000000e+00
%182 [3368r,3376r:0)  0@3368r weight:0.000000e+00
%183 [3392r,3408r:0)  0@3392r weight:0.000000e+00
%184 [3408r,3424r:0)  0@3408r weight:0.000000e+00
%185 [2648r,2720r:0)  0@2648r weight:0.000000e+00
%186 [2568r,2632r:0)  0@2568r weight:0.000000e+00
%187 [2560r,2704r:0)  0@2560r weight:0.000000e+00
%189 [2628r,2640r:0)  0@2628r weight:0.000000e+00
%190 [2632r,2712r:0)  0@2632r weight:0.000000e+00
%191 [2624r,2640r:0)  0@2624r weight:0.000000e+00
%192 [2640r,2712r:0)  0@2640r weight:0.000000e+00
%193 [2712r,2720r:0)  0@2712r weight:0.000000e+00
%194 [2720r,2728r:0)  0@2720r weight:0.000000e+00
%195 [2704r,2736r:0)  0@2704r weight:0.000000e+00
%197 [1680r,1712r:0)  0@1680r weight:0.000000e+00
%198 [1696r,1712r:0)  0@1696r weight:0.000000e+00
%199 [1712r,1728r:0)  0@1712r weight:0.000000e+00
%200 [1800r,1840r:0)  0@1800r weight:0.000000e+00
%201 [1776r,1808r:0)  0@1776r weight:0.000000e+00
%202 [1792r,1808r:0)  0@1792r weight:0.000000e+00
%203 [1808r,1824r:0)  0@1808r weight:0.000000e+00
%204 [1824r,1840r:0)  0@1824r weight:0.000000e+00
%206 [2160r,2208r:0)  0@2160r weight:0.000000e+00
%207 [2176r,2208r:0)  0@2176r weight:0.000000e+00
%208 [2192r,2208r:0)  0@2192r weight:0.000000e+00
%209 [2224r,2240r:0)  0@2224r weight:0.000000e+00
%210 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%211 [2040r,2112r:0)  0@2040r weight:0.000000e+00
%212 [2004r,2024r:0)  0@2004r weight:0.000000e+00
%213 [1936r,2096r:0)  0@1936r weight:0.000000e+00
%215 [2024r,2104r:0)  0@2024r weight:0.000000e+00
%216 [2008r,2032r:0)  0@2008r weight:0.000000e+00
%217 [2000r,2016r:0)  0@2000r weight:0.000000e+00
%218 [2016r,2032r:0)  0@2016r weight:0.000000e+00
%219 [2032r,2104r:0)  0@2032r weight:0.000000e+00
%220 [2104r,2112r:0)  0@2104r weight:0.000000e+00
%221 [2112r,2120r:0)  0@2112r weight:0.000000e+00
%222 [2096r,2128r:0)  0@2096r weight:0.000000e+00
%223 [1128r,1200r:0)  0@1128r weight:0.000000e+00
%224 [1072r,1120r:0)  0@1072r weight:0.000000e+00
%225 [1088r,1184r:0)  0@1088r weight:0.000000e+00
%227 [1120r,1192r:0)  0@1120r weight:0.000000e+00
%228 [1192r,1200r:0)  0@1192r weight:0.000000e+00
%229 [1200r,1208r:0)  0@1200r weight:0.000000e+00
%230 [1184r,1216r:0)  0@1184r weight:0.000000e+00
%231 [448r,496r:0)  0@448r weight:0.000000e+00
%232 [464r,496r:0)  0@464r weight:0.000000e+00
%234 [512r,544r:0)  0@512r weight:0.000000e+00
%235 [528r,544r:0)  0@528r weight:0.000000e+00
%236 [584r,608r:0)  0@584r weight:0.000000e+00
%237 [576r,592r:0)  0@576r weight:0.000000e+00
%238 [592r,640r:0)  0@592r weight:0.000000e+00
%239 [608r,640r:0)  0@608r weight:0.000000e+00
%240 [624r,640r:0)  0@624r weight:0.000000e+00
%241 [680r,704r:0)  0@680r weight:0.000000e+00
%242 [672r,688r:0)  0@672r weight:0.000000e+00
%243 [688r,736r:0)  0@688r weight:0.000000e+00
%244 [704r,736r:0)  0@704r weight:0.000000e+00
%245 [720r,736r:0)  0@720r weight:0.000000e+00
%246 [752r,768r:0)  0@752r weight:0.000000e+00
%247 [768r,784r:0)  0@768r weight:0.000000e+00
%248 [5856r,5936B:0)[6016r,6064B:1)[6064B,6160r:2)  0@5856r 1@6016r 2@6064B-phi weight:0.000000e+00
RegMasks: 5984r
********** MACHINEINSTRS **********
# Machine code for function conj_grad: NoPHIs, TracksLiveness
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP+16]
  fi#-2: size=8, align=8, fixed, at location [SP+8]
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=4, align=4, at location [SP]
  fi#10: size=4, align=4, at location [SP]
  fi#11: size=4, align=4, at location [SP]
  fi#12: size=4, align=4, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=8, align=8, at location [SP]
  fi#15: size=8, align=8, at location [SP]
  fi#16: size=8, align=8, at location [SP]
  fi#17: size=8, align=8, at location [SP]
  fi#18: size=8, align=8, at location [SP]
Function Live Ins: $x0 in %4, $x1 in %5, $x2 in %6, $x3 in %7, $x4 in %8, $x5 in %9

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $x0, $x1, $x2, $x3, $x4, $x5
16B	  %9:gpr64 = COPY $x5
32B	  %8:gpr64 = COPY $x4
48B	  %7:gpr64 = COPY $x3
64B	  %6:gpr64 = COPY $x2
80B	  %5:gpr64 = COPY $x1
96B	  %4:gpr64 = COPY $x0
112B	  STRXui %4:gpr64, %stack.0.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
128B	  STRXui %5:gpr64, %stack.1.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
144B	  STRXui %6:gpr64, %stack.2.x.addr, 0 :: (store 8 into %ir.x.addr)
160B	  STRXui %7:gpr64, %stack.3.z.addr, 0 :: (store 8 into %ir.z.addr)
176B	  STRXui %8:gpr64, %stack.4.a.addr, 0 :: (store 8 into %ir.a.addr)
192B	  STRXui %9:gpr64, %stack.5.p.addr, 0 :: (store 8 into %ir.p.addr)
208B	  %10:gpr32 = MOVi32imm 25
256B	  STRXui $xzr, %stack.15.rho, 0, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
288B	  STRWui $wzr, %stack.9.j, 0, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
296B	  STRWui %10:gpr32, %stack.12.cgitmax, 0, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
304B	  %14:gpr64temp = ADRP target-flags(aarch64-page) @naa

320B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

352B	  %15:gpr32common = LDRWui %14:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
360B	  %13:gpr32 = LDRWui %stack.9.j, 0, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
368B	  %16:gpr32common = nsw ADDWri %15:gpr32common, 1, 0, debug-location !770; cg.c:414:25
384B	  dead $wzr = SUBSWrr %13:gpr32, %16:gpr32common, implicit-def $nzcv, debug-location !772; cg.c:414:5
400B	  Bcc 10, %bb.3, implicit killed $nzcv, debug-location !772; cg.c:414:5
416B	  B %bb.2, debug-location !772; cg.c:414:5

432B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

448B	  %231:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
464B	  %232:gpr64 = LDRSWui %stack.9.j, 0, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
496B	  STRXroX $xzr, %231:gpr64common, %232:gpr64, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
512B	  %234:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
528B	  %235:gpr64 = LDRSWui %stack.9.j, 0, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
544B	  STRXroX $xzr, %234:gpr64common, %235:gpr64, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
576B	  %237:gpr64 = LDRSWui %stack.9.j, 0, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
584B	  %236:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
592B	  %238:gpr64 = UBFMXri %237:gpr64, 61, 60, debug-location !780; cg.c:417:16
608B	  %239:fpr64 = LDRDroX %236:gpr64common, %238:gpr64, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
624B	  %240:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
640B	  STRDroX %239:fpr64, %240:gpr64common, %238:gpr64, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
672B	  %242:gpr64 = LDRSWui %stack.9.j, 0, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
680B	  %241:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
688B	  %243:gpr64 = UBFMXri %242:gpr64, 61, 60, debug-location !785; cg.c:418:16
704B	  %244:fpr64 = LDRDroX %241:gpr64common, %243:gpr64, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
720B	  %245:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
736B	  STRDroX %244:fpr64, %245:gpr64common, %243:gpr64, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
752B	  %246:gpr32common = LDRWui %stack.9.j, 0, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
768B	  %247:gpr32common = nsw ADDWri %246:gpr32common, 1, 0, debug-location !790; cg.c:414:31
784B	  STRWui %247:gpr32common, %stack.9.j, 0, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31
800B	  B %bb.1, debug-location !791; cg.c:414:5

816B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

848B	  STRWui $wzr, %stack.9.j, 0, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
864B	  %20:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
880B	  %22:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

896B	bb.4.for.cond11:
	; predecessors: %bb.3, %bb.5
	  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)

928B	  %21:gpr32 = LDRWui %20:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
944B	  %23:gpr32 = LDRWui %22:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !800 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
952B	  %19:gpr32 = LDRWui %stack.9.j, 0, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
960B	  %24:gpr32common = nsw SUBWrr %21:gpr32, %23:gpr32, debug-location !801; cg.c:425:29
976B	  %25:gpr32common = nsw ADDWri %24:gpr32common, 1, 0, debug-location !802; cg.c:425:40
992B	  dead $wzr = SUBSWrr %19:gpr32, %25:gpr32common, implicit-def $nzcv, debug-location !804; cg.c:425:5
1008B	  Bcc 10, %bb.6, implicit killed $nzcv, debug-location !804; cg.c:425:5
1024B	  B %bb.5, debug-location !804; cg.c:425:5

1040B	bb.5.for.body14:
	; predecessors: %bb.4
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1072B	  %224:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
1088B	  %225:gpr64common = LDRSWui %stack.9.j, 0, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
1120B	  %227:fpr64 = LDRDroX %224:gpr64common, %225:gpr64common, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
1128B	  %223:fpr64 = LDRDui %stack.15.rho, 0, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
1184B	  %230:gpr32common = nsw ADDWri %225.sub_32:gpr64common, 1, 0, debug-location !814; cg.c:425:46
1192B	  %228:fpr64 = FMULDrr %227:fpr64, %227:fpr64, debug-location !811; cg.c:426:26
1200B	  %229:fpr64 = FADDDrr %223:fpr64, %228:fpr64, debug-location !812; cg.c:426:19
1208B	  STRDui %229:fpr64, %stack.15.rho, 0, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
1216B	  STRWui %230:gpr32common, %stack.9.j, 0, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
1224B	  B %bb.4, debug-location !815; cg.c:425:5

1232B	bb.6.for.end22:
	; predecessors: %bb.4
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

1248B	  %27:gpr32 = MOVi32imm 1
1280B	  %93:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
1296B	  %95:gpr64temp = ADRP target-flags(aarch64-page) @firstrow
1312B	  %103:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
1320B	  STRWui %27:gpr32, %stack.11.cgit, 0, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
1328B	  %105:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

1344B	bb.7.for.cond23:
	; predecessors: %bb.6, %bb.26
	  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)

1360B	  %28:gpr32 = LDRWui %stack.11.cgit, 0, debug-location !821 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:20
1376B	  %29:gpr32 = LDRWui %stack.12.cgitmax, 0, debug-location !823 :: (dereferenceable load 4 from %ir.cgitmax); cg.c:434:28
1392B	  dead $wzr = SUBSWrr %28:gpr32, %29:gpr32, implicit-def $nzcv, debug-location !825; cg.c:434:5
1408B	  Bcc 12, %bb.27, implicit killed $nzcv, debug-location !825; cg.c:434:5
1424B	  B %bb.8, debug-location !825; cg.c:434:5

1440B	bb.8.for.body25:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

1472B	  STRWui $wzr, %stack.9.j, 0, debug-location !826 :: (store 4 into %ir.j); cg.c:447:16

1488B	bb.9.for.cond26:
	; predecessors: %bb.8, %bb.13
	  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)

1520B	  %94:gpr32 = LDRWui %93:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
1536B	  %96:gpr32 = LDRWui %95:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !833 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
1544B	  %92:gpr32 = LDRWui %stack.9.j, 0, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
1552B	  %97:gpr32common = nsw SUBWrr %94:gpr32, %96:gpr32, debug-location !834; cg.c:447:33
1568B	  %98:gpr32common = nsw ADDWri %97:gpr32common, 1, 0, debug-location !835; cg.c:447:44
1584B	  dead $wzr = SUBSWrr %92:gpr32, %98:gpr32common, implicit-def $nzcv, debug-location !837; cg.c:447:9
1600B	  Bcc 10, %bb.14, implicit killed $nzcv, debug-location !837; cg.c:447:9
1616B	  B %bb.10, debug-location !837; cg.c:447:9

1632B	bb.10.for.body30:
	; predecessors: %bb.9
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1680B	  %197:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
1696B	  %198:gpr64 = LDRSWui %stack.9.j, 0, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
1704B	  STRXui $xzr, %stack.14.sum, 0, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
1712B	  %199:gpr32 = LDRWroX %197:gpr64common, %198:gpr64, 0, 1, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
1728B	  STRWui %199:gpr32, %stack.10.k, 0, debug-location !843 :: (store 4 into %ir.k); cg.c:449:20

1744B	bb.11.for.cond33:
	; predecessors: %bb.10, %bb.12
	  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)

1776B	  %201:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
1792B	  %202:gpr64 = LDRSWui %stack.9.j, 0, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
1800B	  %200:gpr32 = LDRWui %stack.10.k, 0, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
1808B	  %203:gpr64common = ADDXrs %201:gpr64, %202:gpr64, 2, debug-location !847; cg.c:449:37
1824B	  %204:gpr32 = LDRWui %203:gpr64common, 1, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:37
1840B	  dead $wzr = SUBSWrr %200:gpr32, %204:gpr32, implicit-def $nzcv, debug-location !851; cg.c:449:13
1856B	  Bcc 10, %bb.13, implicit killed $nzcv, debug-location !851; cg.c:449:13
1872B	  B %bb.12, debug-location !851; cg.c:449:13

1888B	bb.12.for.body38:
	; predecessors: %bb.11
	  successors: %bb.11(0x80000000); %bb.11(100.00%)

1936B	  %213:gpr64common = LDRSWui %stack.10.k, 0, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
2000B	  %217:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
2004B	  %212:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr); cg.c:450:29
2008B	  %216:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !856 :: (dereferenceable load 8 from %ir.p.addr); cg.c:450:36
2016B	  %218:gpr64 = LDRSWroX %217:gpr64common, %213:gpr64common, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
2024B	  %215:fpr64 = LDRDroX %212:gpr64common, %213:gpr64common, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
2032B	  %219:fpr64 = LDRDroX %216:gpr64common, %218:gpr64, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
2040B	  %211:fpr64 = LDRDui %stack.14.sum, 0, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
2096B	  %222:gpr32common = nsw ADDWri %213.sub_32:gpr64common, 1, 0, debug-location !862; cg.c:449:53
2104B	  %220:fpr64 = FMULDrr %215:fpr64, %219:fpr64, debug-location !859; cg.c:450:34
2112B	  %221:fpr64 = FADDDrr %211:fpr64, %220:fpr64, debug-location !860; cg.c:450:27
2120B	  STRDui %221:fpr64, %stack.14.sum, 0, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
2128B	  STRWui %222:gpr32common, %stack.10.k, 0, debug-location !862 :: (store 4 into %ir.k); cg.c:449:53
2136B	  B %bb.11, debug-location !863; cg.c:449:13

2144B	bb.13.for.end49:
	; predecessors: %bb.11
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2160B	  %206:fpr64 = LDRDui %stack.14.sum, 0, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
2176B	  %207:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
2192B	  %208:gpr64 = LDRSWui %stack.9.j, 0, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
2208B	  STRDroX %206:fpr64, %207:gpr64common, %208:gpr64, 0, 1, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
2224B	  %209:gpr32common = LDRWui %stack.9.j, 0, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
2240B	  %210:gpr32common = nsw ADDWri %209:gpr32common, 1, 0, debug-location !870; cg.c:447:50
2256B	  STRWui %210:gpr32common, %stack.9.j, 0, debug-location !870 :: (store 4 into %ir.j); cg.c:447:50
2272B	  B %bb.9, debug-location !871; cg.c:447:9

2288B	bb.14.for.end54:
	; predecessors: %bb.9
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2320B	  STRXui $xzr, %stack.13.d, 0, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
2352B	  STRWui $wzr, %stack.9.j, 0, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16

2368B	bb.15.for.cond55:
	; predecessors: %bb.14, %bb.16
	  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)

2400B	  %104:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
2416B	  %106:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !881 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
2424B	  %102:gpr32 = LDRWui %stack.9.j, 0, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
2432B	  %107:gpr32common = nsw SUBWrr %104:gpr32, %106:gpr32, debug-location !882; cg.c:497:33
2448B	  %108:gpr32common = nsw ADDWri %107:gpr32common, 1, 0, debug-location !883; cg.c:497:44
2464B	  dead $wzr = SUBSWrr %102:gpr32, %108:gpr32common, implicit-def $nzcv, debug-location !885; cg.c:497:9
2480B	  Bcc 10, %bb.17, implicit killed $nzcv, debug-location !885; cg.c:497:9
2496B	  B %bb.16, debug-location !885; cg.c:497:9

2512B	bb.16.for.body59:
	; predecessors: %bb.15
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2560B	  %187:gpr64common = LDRSWui %stack.9.j, 0, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
2568B	  %186:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
2624B	  %191:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
2628B	  %189:gpr64 = UBFMXri %187:gpr64common, 61, 60, debug-location !888; cg.c:498:21
2632B	  %190:fpr64 = LDRDroX %186:gpr64common, %189:gpr64, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
2640B	  %192:fpr64 = LDRDroX %191:gpr64common, %189:gpr64, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
2648B	  %185:fpr64 = LDRDui %stack.13.d, 0, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
2704B	  %195:gpr32common = nsw ADDWri %187.sub_32:gpr64common, 1, 0, debug-location !895; cg.c:497:50
2712B	  %193:fpr64 = FMULDrr %190:fpr64, %192:fpr64, debug-location !892; cg.c:498:26
2720B	  %194:fpr64 = FADDDrr %185:fpr64, %193:fpr64, debug-location !893; cg.c:498:19
2728B	  STRDui %194:fpr64, %stack.13.d, 0, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
2736B	  STRWui %195:gpr32common, %stack.9.j, 0, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
2744B	  B %bb.15, debug-location !896; cg.c:497:9

2752B	bb.17.for.end68:
	; predecessors: %bb.15
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

2768B	  %110:fpr64 = LDRDui %stack.15.rho, 0, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
2784B	  %111:fpr64 = LDRDui %stack.13.d, 0, debug-location !900 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
2864B	  STRXui $xzr, %stack.15.rho, 0, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
2872B	  %112:fpr64 = FDIVDrr %110:fpr64, %111:fpr64, debug-location !901; cg.c:504:21
2880B	  STRDui %110:fpr64, %stack.16.rho0, 0, debug-location !904 :: (store 8 into %ir.rho0); cg.c:509:14
2888B	  STRDui %112:fpr64, %stack.17.alpha, 0, debug-location !902 :: (store 8 into %ir.alpha); cg.c:504:15
2904B	  STRWui $wzr, %stack.9.j, 0, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16

2912B	bb.18.for.cond69:
	; predecessors: %bb.17, %bb.19
	  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)

2944B	  %117:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
2960B	  %119:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !912 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
2968B	  %115:gpr32 = LDRWui %stack.9.j, 0, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
2976B	  %120:gpr32common = nsw SUBWrr %117:gpr32, %119:gpr32, debug-location !913; cg.c:516:33
2992B	  %121:gpr32common = nsw ADDWri %120:gpr32common, 1, 0, debug-location !914; cg.c:516:44
3008B	  dead $wzr = SUBSWrr %115:gpr32, %121:gpr32common, implicit-def $nzcv, debug-location !916; cg.c:516:9
3024B	  Bcc 10, %bb.20, implicit killed $nzcv, debug-location !916; cg.c:516:9
3040B	  B %bb.19, debug-location !916; cg.c:516:9

3056B	bb.19.for.body73:
	; predecessors: %bb.18
	  successors: %bb.18(0x80000000); %bb.18(100.00%)

3088B	  %166:gpr64 = LDRSWui %stack.9.j, 0, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
3152B	  %170:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
3160B	  %165:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
3168B	  %169:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
3176B	  %167:gpr64 = UBFMXri %166:gpr64, 61, 60, debug-location !917; cg.c:517:20
3184B	  %171:fpr64 = LDRDroX %170:gpr64common, %167:gpr64, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
3192B	  %168:fpr64 = LDRDroX %165:gpr64common, %167:gpr64, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
3200B	  %172:fpr64 = FMULDrr %169:fpr64, %171:fpr64, debug-location !923; cg.c:517:33
3208B	  %173:fpr64 = FADDDrr %168:fpr64, %172:fpr64, debug-location !924; cg.c:517:25
3216B	  STRDroX %173:fpr64, %165:gpr64common, %167:gpr64, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
3248B	  %175:gpr64 = LDRSWui %stack.9.j, 0, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
3312B	  %179:gpr64common = LDRXui %fixed-stack.2, 0, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:518:35
3320B	  %174:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !928 :: (dereferenceable load 8 from %ir.r.addr); cg.c:518:20
3328B	  %176:gpr64 = UBFMXri %175:gpr64, 61, 60, debug-location !928; cg.c:518:20
3336B	  %178:fpr64 = LDRDui %stack.17.alpha, 0, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
3344B	  %180:fpr64 = LDRDroX %179:gpr64common, %176:gpr64, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
3352B	  %177:fpr64 = LDRDroX %174:gpr64common, %176:gpr64, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
3360B	  %181:fpr64 = FMULDrr %178:fpr64, %180:fpr64, debug-location !933; cg.c:518:33
3368B	  %182:fpr64 = FSUBDrr %177:fpr64, %181:fpr64, debug-location !934; cg.c:518:25
3376B	  STRDroX %182:fpr64, %174:gpr64common, %176:gpr64, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
3392B	  %183:gpr32common = LDRWui %stack.9.j, 0, debug-location !938 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
3408B	  %184:gpr32common = nsw ADDWri %183:gpr32common, 1, 0, debug-location !938; cg.c:516:50
3424B	  STRWui %184:gpr32common, %stack.9.j, 0, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50
3440B	  B %bb.18, debug-location !939; cg.c:516:9

3456B	bb.20.for.end92:
	; predecessors: %bb.18
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3488B	  STRWui $wzr, %stack.9.j, 0, debug-location !942 :: (store 4 into %ir.j); cg.c:526:16

3504B	bb.21.for.cond93:
	; predecessors: %bb.20, %bb.22
	  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)

3536B	  %126:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
3552B	  %128:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !948 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
3560B	  %124:gpr32 = LDRWui %stack.9.j, 0, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
3568B	  %129:gpr32common = nsw SUBWrr %126:gpr32, %128:gpr32, debug-location !949; cg.c:526:33
3584B	  %130:gpr32common = nsw ADDWri %129:gpr32common, 1, 0, debug-location !950; cg.c:526:44
3600B	  dead $wzr = SUBSWrr %124:gpr32, %130:gpr32common, implicit-def $nzcv, debug-location !952; cg.c:526:9
3616B	  Bcc 10, %bb.23, implicit killed $nzcv, debug-location !952; cg.c:526:9
3632B	  B %bb.22, debug-location !952; cg.c:526:9

3648B	bb.22.for.body97:
	; predecessors: %bb.21
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3680B	  %158:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
3696B	  %159:gpr64common = LDRSWui %stack.9.j, 0, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
3728B	  %161:fpr64 = LDRDroX %158:gpr64common, %159:gpr64common, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
3736B	  %157:fpr64 = LDRDui %stack.15.rho, 0, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
3792B	  %164:gpr32common = nsw ADDWri %159.sub_32:gpr64common, 1, 0, debug-location !962; cg.c:526:50
3800B	  %162:fpr64 = FMULDrr %161:fpr64, %161:fpr64, debug-location !959; cg.c:527:30
3808B	  %163:fpr64 = FADDDrr %157:fpr64, %162:fpr64, debug-location !960; cg.c:527:23
3816B	  STRDui %163:fpr64, %stack.15.rho, 0, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
3824B	  STRWui %164:gpr32common, %stack.9.j, 0, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
3832B	  B %bb.21, debug-location !963; cg.c:526:9

3840B	bb.23.for.end106:
	; predecessors: %bb.21
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

3856B	  %132:fpr64 = LDRDui %stack.15.rho, 0, debug-location !966 :: (dereferenceable load 8 from %ir.rho); cg.c:533:16
3872B	  %133:fpr64 = LDRDui %stack.16.rho0, 0, debug-location !967 :: (dereferenceable load 8 from %ir.rho0); cg.c:533:22
3888B	  %134:fpr64 = FDIVDrr %132:fpr64, %133:fpr64, debug-location !968; cg.c:533:20
3904B	  STRDui %134:fpr64, %stack.18.beta, 0, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
3936B	  STRWui $wzr, %stack.9.j, 0, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16

3952B	bb.24.for.cond108:
	; predecessors: %bb.23, %bb.25
	  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)

3984B	  %138:gpr32 = LDRWui %103:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
4000B	  %140:gpr32 = LDRWui %105:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !976 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
4008B	  %136:gpr32 = LDRWui %stack.9.j, 0, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
4016B	  %141:gpr32common = nsw SUBWrr %138:gpr32, %140:gpr32, debug-location !977; cg.c:538:33
4032B	  %142:gpr32common = nsw ADDWri %141:gpr32common, 1, 0, debug-location !978; cg.c:538:44
4048B	  dead $wzr = SUBSWrr %136:gpr32, %142:gpr32common, implicit-def $nzcv, debug-location !980; cg.c:538:9
4064B	  Bcc 10, %bb.26, implicit killed $nzcv, debug-location !980; cg.c:538:9
4080B	  B %bb.25, debug-location !980; cg.c:538:9

4096B	bb.25.for.body112:
	; predecessors: %bb.24
	  successors: %bb.24(0x80000000); %bb.24(100.00%)

4128B	  %147:gpr64 = LDRSWui %stack.9.j, 0, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
4192B	  %151:gpr64common = LDRXui %stack.5.p.addr, 0, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
4200B	  %146:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
4208B	  %148:gpr64 = UBFMXri %147:gpr64, 61, 60, debug-location !981; cg.c:539:20
4216B	  %150:fpr64 = LDRDui %stack.18.beta, 0, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
4224B	  %152:fpr64 = LDRDroX %151:gpr64common, %148:gpr64, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
4232B	  %149:fpr64 = LDRDroX %146:gpr64common, %148:gpr64, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
4240B	  %153:fpr64 = FMULDrr %150:fpr64, %152:fpr64, debug-location !987; cg.c:539:32
4248B	  %154:fpr64 = FADDDrr %149:fpr64, %153:fpr64, debug-location !988; cg.c:539:25
4256B	  STRDroX %154:fpr64, %151:gpr64common, %148:gpr64, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
4272B	  %155:gpr32common = LDRWui %stack.9.j, 0, debug-location !992 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
4288B	  %156:gpr32common = nsw ADDWri %155:gpr32common, 1, 0, debug-location !992; cg.c:538:50
4304B	  STRWui %156:gpr32common, %stack.9.j, 0, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50
4320B	  B %bb.24, debug-location !993; cg.c:538:9

4336B	bb.26.for.inc124:
	; predecessors: %bb.24
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

4352B	  %144:gpr32common = LDRWui %stack.11.cgit, 0, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
4368B	  %145:gpr32common = nsw ADDWri %144:gpr32common, 1, 0, debug-location !996; cg.c:434:41
4384B	  STRWui %145:gpr32common, %stack.11.cgit, 0, debug-location !996 :: (store 4 into %ir.cgit); cg.c:434:41
4400B	  B %bb.7, debug-location !997; cg.c:434:5

4416B	bb.27.for.end126:
	; predecessors: %bb.7
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

4448B	  STRXui $xzr, %stack.14.sum, 0, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
4480B	  STRWui $wzr, %stack.9.j, 0, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
4496B	  %34:gpr64temp = ADRP target-flags(aarch64-page) @lastrow
4512B	  %36:gpr64temp = ADRP target-flags(aarch64-page) @firstrow

4528B	bb.28.for.cond127:
	; predecessors: %bb.27, %bb.32
	  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)

4560B	  %35:gpr32 = LDRWui %34:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
4576B	  %37:gpr32 = LDRWui %36:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !1007 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
4584B	  %33:gpr32 = LDRWui %stack.9.j, 0, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
4592B	  %38:gpr32common = nsw SUBWrr %35:gpr32, %37:gpr32, debug-location !1008; cg.c:549:29
4608B	  %39:gpr32common = nsw ADDWri %38:gpr32common, 1, 0, debug-location !1009; cg.c:549:40
4624B	  dead $wzr = SUBSWrr %33:gpr32, %39:gpr32common, implicit-def $nzcv, debug-location !1011; cg.c:549:5
4640B	  Bcc 10, %bb.33, implicit killed $nzcv, debug-location !1011; cg.c:549:5
4656B	  B %bb.29, debug-location !1011; cg.c:549:5

4672B	bb.29.for.body131:
	; predecessors: %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4720B	  %65:gpr64common = LDRXui %stack.1.rowstr.addr, 0, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
4736B	  %66:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
4744B	  STRXui $xzr, %stack.13.d, 0, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
4752B	  %67:gpr32 = LDRWroX %65:gpr64common, %66:gpr64, 0, 1, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
4768B	  STRWui %67:gpr32, %stack.10.k, 0, debug-location !1017 :: (store 4 into %ir.k); cg.c:551:16

4784B	bb.30.for.cond134:
	; predecessors: %bb.29, %bb.31
	  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)

4816B	  %69:gpr64 = LDRXui %stack.1.rowstr.addr, 0, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
4832B	  %70:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
4840B	  %68:gpr32 = LDRWui %stack.10.k, 0, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
4848B	  %71:gpr64common = ADDXrs %69:gpr64, %70:gpr64, 2, debug-location !1021; cg.c:551:33
4864B	  %72:gpr32 = LDRWui %71:gpr64common, 1, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:33
4880B	  dead $wzr = SUBSWrr %68:gpr32, %72:gpr32, implicit-def $nzcv, debug-location !1025; cg.c:551:9
4896B	  Bcc 10, %bb.32, implicit killed $nzcv, debug-location !1025; cg.c:551:9
4912B	  B %bb.31, debug-location !1025; cg.c:551:9

4928B	bb.31.for.body139:
	; predecessors: %bb.30
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4976B	  %81:gpr64common = LDRSWui %stack.10.k, 0, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
5040B	  %85:gpr64common = LDRXui %stack.0.colidx.addr, 0, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
5044B	  %80:gpr64common = LDRXui %stack.4.a.addr, 0, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr); cg.c:552:21
5048B	  %84:gpr64common = LDRXui %stack.3.z.addr, 0, debug-location !1030 :: (dereferenceable load 8 from %ir.z.addr); cg.c:552:28
5056B	  %86:gpr64 = LDRSWroX %85:gpr64common, %81:gpr64common, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
5064B	  %83:fpr64 = LDRDroX %80:gpr64common, %81:gpr64common, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
5072B	  %87:fpr64 = LDRDroX %84:gpr64common, %86:gpr64, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
5080B	  %79:fpr64 = LDRDui %stack.13.d, 0, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
5136B	  %90:gpr32common = nsw ADDWri %81.sub_32:gpr64common, 1, 0, debug-location !1036; cg.c:551:49
5144B	  %88:fpr64 = FMULDrr %83:fpr64, %87:fpr64, debug-location !1033; cg.c:552:26
5152B	  %89:fpr64 = FADDDrr %79:fpr64, %88:fpr64, debug-location !1034; cg.c:552:19
5160B	  STRDui %89:fpr64, %stack.13.d, 0, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
5168B	  STRWui %90:gpr32common, %stack.10.k, 0, debug-location !1036 :: (store 4 into %ir.k); cg.c:551:49
5176B	  B %bb.30, debug-location !1037; cg.c:551:9

5184B	bb.32.for.end150:
	; predecessors: %bb.30
	  successors: %bb.28(0x80000000); %bb.28(100.00%)

5200B	  %74:fpr64 = LDRDui %stack.13.d, 0, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
5216B	  %75:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
5232B	  %76:gpr64 = LDRSWui %stack.9.j, 0, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
5248B	  STRDroX %74:fpr64, %75:gpr64common, %76:gpr64, 0, 1, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
5264B	  %77:gpr32common = LDRWui %stack.9.j, 0, debug-location !1044 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
5280B	  %78:gpr32common = nsw ADDWri %77:gpr32common, 1, 0, debug-location !1044; cg.c:549:46
5296B	  STRWui %78:gpr32common, %stack.9.j, 0, debug-location !1044 :: (store 4 into %ir.j); cg.c:549:46
5312B	  B %bb.28, debug-location !1045; cg.c:549:5

5328B	bb.33.for.end155:
	; predecessors: %bb.28
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

5360B	  STRWui $wzr, %stack.9.j, 0, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
5376B	  %43:gpr64temp = ADRP target-flags(aarch64-page) @lastcol
5392B	  %45:gpr64temp = ADRP target-flags(aarch64-page) @firstcol

5408B	bb.34.for.cond156:
	; predecessors: %bb.33, %bb.35
	  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)

5440B	  %44:gpr32 = LDRWui %43:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
5456B	  %46:gpr32 = LDRWui %45:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1054 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
5464B	  %42:gpr32 = LDRWui %stack.9.j, 0, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
5472B	  %47:gpr32common = nsw SUBWrr %44:gpr32, %46:gpr32, debug-location !1055; cg.c:560:29
5488B	  %48:gpr32common = nsw ADDWri %47:gpr32common, 1, 0, debug-location !1056; cg.c:560:40
5504B	  dead $wzr = SUBSWrr %42:gpr32, %48:gpr32common, implicit-def $nzcv, debug-location !1058; cg.c:560:5
5520B	  Bcc 10, %bb.36, implicit killed $nzcv, debug-location !1058; cg.c:560:5
5536B	  B %bb.35, debug-location !1058; cg.c:560:5

5552B	bb.35.for.body160:
	; predecessors: %bb.34
	  successors: %bb.34(0x80000000); %bb.34(100.00%)

5584B	  %53:gpr64common = LDRSWui %stack.9.j, 0, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
5592B	  %52:gpr64common = LDRXui %stack.2.x.addr, 0, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
5648B	  %57:gpr64common = LDRXui %fixed-stack.1, 0, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
5652B	  %55:gpr64 = UBFMXri %53:gpr64common, 61, 60, debug-location !1059; cg.c:561:13
5656B	  %56:fpr64 = LDRDroX %52:gpr64common, %55:gpr64, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
5664B	  %58:fpr64 = LDRDroX %57:gpr64common, %55:gpr64, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
5680B	  %59:fpr64 = FSUBDrr %56:fpr64, %58:fpr64, debug-location !1064; cg.c:561:18
5712B	  %60:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
5776B	  %63:gpr32common = nsw ADDWri %53.sub_32:gpr64common, 1, 0, debug-location !1072; cg.c:560:46
5780B	  STRDui %59:fpr64, %stack.13.d, 0, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
5784B	  %61:fpr64 = FMULDrr %59:fpr64, %59:fpr64, debug-location !1069; cg.c:562:23
5792B	  %62:fpr64 = FADDDrr %60:fpr64, %61:fpr64, debug-location !1070; cg.c:562:19
5800B	  STRDui %62:fpr64, %stack.14.sum, 0, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
5808B	  STRWui %63:gpr32common, %stack.9.j, 0, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
5816B	  B %bb.34, debug-location !1073; cg.c:560:5

5824B	bb.36.for.end170:
	; predecessors: %bb.34
	  successors: %bb.38(0x50000000), %bb.37(0x30000000); %bb.38(62.50%), %bb.37(37.50%)

5840B	  %0:fpr64 = LDRDui %stack.14.sum, 0, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
5856B	  %248:fpr64 = FSQRTDr %0:fpr64, debug-location !1077; cg.c:565:14
5872B	  FCMPDrr %248:fpr64, %248:fpr64, implicit-def $nzcv, debug-location !1078; cg.c:565:6
5904B	  Bcc 7, %bb.38, implicit killed $nzcv, debug-location !1078; cg.c:565:6
5920B	  B %bb.37, debug-location !1078; cg.c:565:6

5936B	bb.37.call.sqrt:
	; predecessors: %bb.36
	  successors: %bb.38(0x80000000); %bb.38(100.00%)

5952B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1078; cg.c:565:6
5968B	  $d0 = COPY %0:fpr64, debug-location !1078; cg.c:565:6
5984B	  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !1078; cg.c:565:6
6000B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1078; cg.c:565:6
6016B	  %248:fpr64 = COPY killed $d0, debug-location !1078; cg.c:565:6

6064B	bb.38.for.end170.split:
	; predecessors: %bb.36, %bb.37

6096B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1078; cg.c:565:6
6112B	  PCN_STACKMAP 0, 0, 0, %fixed-stack.0, 0, %0:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1078 :: (load 8 from %fixed-stack.0, align 16); cg.c:565:6
6128B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1078; cg.c:565:6
6144B	  %51:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
6160B	  STRDui %248:fpr64, %51:gpr64common, 0, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
6176B	  RET_ReallyLR debug-location !1080; cg.c:566:1

# End machine code for function conj_grad.

Before post-MI-sched:
# Machine code for function conj_grad: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP+16]
  fi#-2: size=8, align=8, fixed, at location [SP+8]
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP-32]
  fi#1: size=8, align=8, at location [SP-40]
  fi#2: size=8, align=8, at location [SP-48]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=8, align=8, at location [SP-64]
  fi#5: size=8, align=8, at location [SP-72]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: size=4, align=4, at location [SP-76]
  fi#10: size=4, align=4, at location [SP-80]
  fi#11: size=4, align=4, at location [SP-84]
  fi#12: size=4, align=4, at location [SP-88]
  fi#13: size=8, align=8, at location [SP-96]
  fi#14: size=8, align=8, at location [SP-104]
  fi#15: size=8, align=8, at location [SP-112]
  fi#16: size=8, align=8, at location [SP-120]
  fi#17: size=8, align=8, at location [SP-128]
  fi#18: size=8, align=8, at location [SP-136]
  fi#19: size=8, align=8, at location [SP-144]
  fi#20: size=8, align=8, at location [SP-24]
  fi#21: size=8, align=8, at location [SP-8]
  fi#22: size=8, align=8, at location [SP-16]
Function Live Ins: $x0, $x1, $x2, $x3, $x4, $x5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x0, $x1, $x2, $x3, $x4, $x5, $lr
  $sp = frame-setup SUBXri $sp, 144, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 16 :: (store 8 into %stack.22), (store 8 into %stack.21)
  $fp = frame-setup ADDXri $sp, 128, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STPXi renamable $x1, renamable $x0, $fp, -3 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
  STPXi renamable $x3, renamable $x2, $fp, -5 :: (store 8 into %ir.x.addr), (store 8 into %ir.z.addr)
  STPXi renamable $x5, renamable $x4, $fp, -7 :: (store 8 into %ir.a.addr), (store 8 into %ir.p.addr)
  $w8 = MOVZWi 25, 0
  STRXui $xzr, $sp, 4, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
  STURWi $wzr, $fp, -60, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
  STRWui killed renamable $w8, $sp, 14, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
  renamable $x8 = ADRP target-flags(aarch64-page) @naa

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $x8
  renamable $w16 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
  renamable $w17 = LDURWi $fp, -60, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !770; cg.c:414:25
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !772; cg.c:414:5
  Bcc 10, %bb.3, implicit $nzcv, debug-location !772; cg.c:414:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8
  renamable $x16 = LDRXui $fp, 2, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
  renamable $x17 = LDURSWi $fp, -60, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  STRXroX $xzr, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
  renamable $x16 = LDURXi $fp, -40, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  renamable $x17 = LDURSWi $fp, -60, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  STRXroX $xzr, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  renamable $x16 = LDURSWi $fp, -60, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  renamable $x17 = LDURXi $fp, -32, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  renamable $x16 = UBFMXri killed renamable $x16, 61, 60, debug-location !780; cg.c:417:16
  renamable $d0 = LDRDroX killed renamable $x17, renamable $x16, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  renamable $x17 = LDRXui $fp, 3, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  STRDroX killed renamable $d0, killed renamable $x17, killed renamable $x16, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  renamable $x16 = LDURSWi $fp, -60, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  renamable $x17 = LDRXui $fp, 3, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  renamable $x16 = UBFMXri killed renamable $x16, 61, 60, debug-location !785; cg.c:418:16
  renamable $d0 = LDRDroX killed renamable $x17, renamable $x16, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  renamable $x17 = LDURXi $fp, -56, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  STRDroX killed renamable $d0, killed renamable $x17, killed renamable $x16, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  renamable $w16 = LDURWi $fp, -60, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !790; cg.c:414:31
  STURWi killed renamable $w16, $fp, -60, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STURWi $wzr, $fp, -60, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
  renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  renamable $x16 = ADRP target-flags(aarch64-page) @firstcol

bb.4.for.cond11:
; predecessors: %bb.3, %bb.5
  successors: %bb.5(0x7c000000), %bb.6(0x04000000); %bb.5(96.88%), %bb.6(3.12%)
  liveins: $x8, $x16
  renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !800 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  renamable $w0 = LDURWi $fp, -60, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  $w17 = SUBWrs killed renamable $w17, killed renamable $w18, 0, debug-location !801; cg.c:425:29
  renamable $w17 = nsw ADDWri killed renamable $w17, 1, 0, debug-location !802; cg.c:425:40
  $wzr = SUBSWrs killed renamable $w0, killed renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !804; cg.c:425:5
  Bcc 10, %bb.6, implicit $nzcv, debug-location !804; cg.c:425:5

bb.5.for.body14:
; predecessors: %bb.4
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $x8, $x16
  renamable $x17 = LDRXui $fp, 3, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  renamable $x18 = LDURSWi $fp, -60, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  renamable $d0 = LDRDroX killed renamable $x17, renamable $x18, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  renamable $d1 = LDRDui $sp, 4, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  renamable $w17 = nsw ADDWri renamable $w18, 1, 0, implicit killed $x18, debug-location !814; cg.c:425:46
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d0, debug-location !811; cg.c:426:26
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !812; cg.c:426:19
  STRDui killed renamable $d0, $sp, 4, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
  STURWi killed renamable $w17, $fp, -60, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
  B %bb.4

bb.6.for.end22:
; predecessors: %bb.4
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  $w18 = MOVZWi 1, 0
  renamable $x8 = ADRP target-flags(aarch64-page) @lastrow
  renamable $x16 = ADRP target-flags(aarch64-page) @firstrow
  renamable $x17 = ADRP target-flags(aarch64-page) @lastcol
  STRWui killed renamable $w18, $sp, 15, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
  renamable $x18 = ADRP target-flags(aarch64-page) @firstcol

bb.7.for.cond23:
; predecessors: %bb.6, %bb.26
  successors: %bb.8(0x7c000000), %bb.27(0x04000000); %bb.8(96.88%), %bb.27(3.12%)
  liveins: $x8, $x16, $x17, $x18
  renamable $w1, renamable $w0 = LDPWi $sp, 14, debug-location !821 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
  $wzr = SUBSWrs killed renamable $w0, killed renamable $w1, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !825; cg.c:434:5
  Bcc 12, %bb.27, implicit $nzcv, debug-location !825; cg.c:434:5

bb.8.for.body25:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x8, $x16, $x17, $x18
  STURWi $wzr, $fp, -60, debug-location !826 :: (store 4 into %ir.j); cg.c:447:16

bb.9.for.cond26:
; predecessors: %bb.8, %bb.13
  successors: %bb.10(0x7c000000), %bb.14(0x04000000); %bb.10(96.88%), %bb.14(3.12%)
  liveins: $x8, $x16, $x17, $x18
  renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  renamable $w1 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !833 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  renamable $w2 = LDURWi $fp, -60, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  $w0 = SUBWrs killed renamable $w0, killed renamable $w1, 0, debug-location !834; cg.c:447:33
  renamable $w0 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !835; cg.c:447:44
  $wzr = SUBSWrs killed renamable $w2, killed renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !837; cg.c:447:9
  Bcc 10, %bb.14, implicit $nzcv, debug-location !837; cg.c:447:9

bb.10.for.body30:
; predecessors: %bb.9
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $x0 = LDURXi $fp, -24, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  renamable $x1 = LDURSWi $fp, -60, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  STRXui $xzr, $sp, 5, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
  renamable $w0 = LDRWroX killed renamable $x0, killed renamable $x1, 0, 1, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22

bb.11.for.cond33:
; predecessors: %bb.10, %bb.12
  successors: %bb.12(0x7c000000), %bb.13(0x04000000); %bb.12(96.88%), %bb.13(3.12%)
  liveins: $x8, $x16, $x17, $x18, $w0
  STRWui killed renamable $w0, $sp, 16, debug-location !DILocation(line: 0, scope: !841) :: (store 4 into %ir.k); cg.c:0
  renamable $x0 = LDURXi $fp, -24, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  renamable $x1 = LDURSWi $fp, -60, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  renamable $w2 = LDRWui $sp, 16, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  renamable $x0 = ADDXrs killed renamable $x0, killed renamable $x1, 2, debug-location !847; cg.c:449:37
  renamable $w0 = LDRWui killed renamable $x0, 1, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  $wzr = SUBSWrs killed renamable $w2, killed renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !851; cg.c:449:13
  Bcc 10, %bb.13, implicit $nzcv, debug-location !851; cg.c:449:13

bb.12.for.body38:
; predecessors: %bb.11
  successors: %bb.11(0x80000000); %bb.11(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $x0 = LDRSWui $sp, 16, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  renamable $x1 = LDURXi $fp, -16, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  renamable $x3, renamable $x2 = LDPXi $fp, -7, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.p.addr); cg.c:450:29
  renamable $x1 = LDRSWroX killed renamable $x1, renamable $x0, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  renamable $d0 = LDRDroX killed renamable $x2, renamable $x0, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  renamable $d1 = LDRDroX killed renamable $x3, killed renamable $x1, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  renamable $d2 = LDRDui $sp, 5, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
  renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit killed $x0, debug-location !862; cg.c:449:53
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !859; cg.c:450:34
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !860; cg.c:450:27
  STRDui killed renamable $d0, $sp, 5, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
  B %bb.11

bb.13.for.end49:
; predecessors: %bb.11
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $d0 = LDRDui $sp, 5, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  renamable $x0 = LDRXui $fp, 2, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  renamable $x1 = LDURSWi $fp, -60, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  STRDroX killed renamable $d0, killed renamable $x0, killed renamable $x1, 0, 1, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  renamable $w0 = LDURWi $fp, -60, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  renamable $w0 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !870; cg.c:447:50
  STURWi killed renamable $w0, $fp, -60, debug-location !870 :: (store 4 into %ir.j); cg.c:447:50
  B %bb.9

bb.14.for.end54:
; predecessors: %bb.9
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $x8, $x16, $x17, $x18
  STRXui $xzr, $sp, 6, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
  STURWi $wzr, $fp, -60, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16

bb.15.for.cond55:
; predecessors: %bb.14, %bb.16
  successors: %bb.16(0x7c000000), %bb.17(0x04000000); %bb.16(96.88%), %bb.17(3.12%)
  liveins: $x8, $x16, $x17, $x18
  renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !881 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  renamable $w2 = LDURWi $fp, -60, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  $w0 = SUBWrs killed renamable $w0, killed renamable $w1, 0, debug-location !882; cg.c:497:33
  renamable $w0 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !883; cg.c:497:44
  $wzr = SUBSWrs killed renamable $w2, killed renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !885; cg.c:497:9
  Bcc 10, %bb.17, implicit $nzcv, debug-location !885; cg.c:497:9

bb.16.for.body59:
; predecessors: %bb.15
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $x0 = LDURSWi $fp, -60, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  renamable $x1 = LDURXi $fp, -56, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  renamable $x2 = LDRXui $fp, 2, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
  renamable $x3 = UBFMXri renamable $x0, 61, 60, debug-location !888; cg.c:498:21
  renamable $d0 = LDRDroX killed renamable $x1, renamable $x3, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  renamable $d1 = LDRDroX killed renamable $x2, killed renamable $x3, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  renamable $d2 = LDRDui $sp, 6, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit killed $x0, debug-location !895; cg.c:497:50
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !892; cg.c:498:26
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !893; cg.c:498:19
  STRDui killed renamable $d0, $sp, 6, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
  STURWi killed renamable $w0, $fp, -60, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
  B %bb.15

bb.17.for.end68:
; predecessors: %bb.15
  successors: %bb.18(0x80000000); %bb.18(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $d0 = LDRDui $sp, 4, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  renamable $d1 = LDRDui $sp, 6, debug-location !900 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  STRXui $xzr, $sp, 4, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
  renamable $d1 = FDIVDrr renamable $d0, killed renamable $d1, debug-location !901; cg.c:504:21
  STPDi renamable $d1, renamable $d0, $sp, 2, debug-location !904 :: (store 8 into %ir.rho0), (store 8 into %ir.alpha); cg.c:509:14
  STURWi $wzr, $fp, -60, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16

bb.18.for.cond69:
; predecessors: %bb.17, %bb.19
  successors: %bb.19(0x7c000000), %bb.20(0x04000000); %bb.19(96.88%), %bb.20(3.12%)
  liveins: $x8, $x16, $x17, $x18
  renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !912 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  renamable $w2 = LDURWi $fp, -60, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  $w0 = SUBWrs killed renamable $w0, killed renamable $w1, 0, debug-location !913; cg.c:516:33
  renamable $w0 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !914; cg.c:516:44
  $wzr = SUBSWrs killed renamable $w2, killed renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !916; cg.c:516:9
  Bcc 10, %bb.20, implicit $nzcv, debug-location !916; cg.c:516:9

bb.19.for.body73:
; predecessors: %bb.18
  successors: %bb.18(0x80000000); %bb.18(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $x0 = LDURSWi $fp, -60, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  renamable $x1 = LDURXi $fp, -56, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  renamable $x2 = LDURXi $fp, -40, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  renamable $d0 = LDRDui $sp, 2, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  renamable $x0 = UBFMXri killed renamable $x0, 61, 60, debug-location !917; cg.c:517:20
  renamable $d1 = LDRDroX killed renamable $x1, renamable $x0, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !923; cg.c:517:33
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !924; cg.c:517:25
  STRDroX killed renamable $d0, killed renamable $x2, killed renamable $x0, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  renamable $x0 = LDURSWi $fp, -60, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  renamable $x1, renamable $x2 = LDPXi $fp, 2, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16), (dereferenceable load 8 from %ir.r.addr); cg.c:518:35
  renamable $x0 = UBFMXri killed renamable $x0, 61, 60, debug-location !928; cg.c:518:20
  renamable $d0 = LDRDui $sp, 2, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  renamable $d1 = LDRDroX killed renamable $x1, renamable $x0, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !933; cg.c:518:33
  renamable $d0 = FSUBDrr killed renamable $d2, killed renamable $d0, debug-location !934; cg.c:518:25
  STRDroX killed renamable $d0, killed renamable $x2, killed renamable $x0, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  renamable $w0 = LDURWi $fp, -60, debug-location !938 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  renamable $w0 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !938; cg.c:516:50
  STURWi killed renamable $w0, $fp, -60, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50
  B %bb.18

bb.20.for.end92:
; predecessors: %bb.18
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $x8, $x16, $x17, $x18
  STURWi $wzr, $fp, -60, debug-location !942 :: (store 4 into %ir.j); cg.c:526:16

bb.21.for.cond93:
; predecessors: %bb.20, %bb.22
  successors: %bb.22(0x7c000000), %bb.23(0x04000000); %bb.22(96.88%), %bb.23(3.12%)
  liveins: $x8, $x16, $x17, $x18
  renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !948 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  renamable $w2 = LDURWi $fp, -60, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  $w0 = SUBWrs killed renamable $w0, killed renamable $w1, 0, debug-location !949; cg.c:526:33
  renamable $w0 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !950; cg.c:526:44
  $wzr = SUBSWrs killed renamable $w2, killed renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !952; cg.c:526:9
  Bcc 10, %bb.23, implicit $nzcv, debug-location !952; cg.c:526:9

bb.22.for.body97:
; predecessors: %bb.21
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $x0 = LDRXui $fp, 3, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  renamable $x1 = LDURSWi $fp, -60, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  renamable $d0 = LDRDroX killed renamable $x0, renamable $x1, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  renamable $d1 = LDRDui $sp, 4, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
  renamable $w0 = nsw ADDWri renamable $w1, 1, 0, implicit killed $x1, debug-location !962; cg.c:526:50
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d0, debug-location !959; cg.c:527:30
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !960; cg.c:527:23
  STRDui killed renamable $d0, $sp, 4, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
  STURWi killed renamable $w0, $fp, -60, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
  B %bb.21

bb.23.for.end106:
; predecessors: %bb.21
  successors: %bb.24(0x80000000); %bb.24(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $d1, renamable $d0 = LDPDi $sp, 3, debug-location !966 :: (dereferenceable load 8 from %ir.rho), (dereferenceable load 8 from %ir.rho0); cg.c:533:16
  renamable $d0 = FDIVDrr killed renamable $d0, killed renamable $d1, debug-location !968; cg.c:533:20
  STRDui killed renamable $d0, $sp, 1, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
  STURWi $wzr, $fp, -60, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16

bb.24.for.cond108:
; predecessors: %bb.23, %bb.25
  successors: %bb.25(0x7c000000), %bb.26(0x04000000); %bb.25(96.88%), %bb.26(3.12%)
  liveins: $x8, $x16, $x17, $x18
  renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !976 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  renamable $w2 = LDURWi $fp, -60, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  $w0 = SUBWrs killed renamable $w0, killed renamable $w1, 0, debug-location !977; cg.c:538:33
  renamable $w0 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !978; cg.c:538:44
  $wzr = SUBSWrs killed renamable $w2, killed renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !980; cg.c:538:9
  Bcc 10, %bb.26, implicit $nzcv, debug-location !980; cg.c:538:9

bb.25.for.body112:
; predecessors: %bb.24
  successors: %bb.24(0x80000000); %bb.24(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $x0 = LDURSWi $fp, -60, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  renamable $x1 = LDURXi $fp, -56, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  renamable $x2 = LDRXui $fp, 3, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  renamable $x0 = UBFMXri killed renamable $x0, 61, 60, debug-location !981; cg.c:539:20
  renamable $d0 = LDRDui $sp, 1, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  renamable $d2 = LDRDroX killed renamable $x2, renamable $x0, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !987; cg.c:539:32
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !988; cg.c:539:25
  STRDroX killed renamable $d0, killed renamable $x1, killed renamable $x0, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  renamable $w0 = LDURWi $fp, -60, debug-location !992 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  renamable $w0 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !992; cg.c:538:50
  STURWi killed renamable $w0, $fp, -60, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50
  B %bb.24

bb.26.for.inc124:
; predecessors: %bb.24
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $x8, $x16, $x17, $x18
  renamable $w0 = LDRWui $sp, 15, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  renamable $w0 = nsw ADDWri killed renamable $w0, 1, 0, debug-location !996; cg.c:434:41
  STRWui killed renamable $w0, $sp, 15, debug-location !996 :: (store 4 into %ir.cgit); cg.c:434:41
  B %bb.7

bb.27.for.end126:
; predecessors: %bb.7
  successors: %bb.28(0x80000000); %bb.28(100.00%)

  STRXui $xzr, $sp, 5, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
  STURWi $wzr, $fp, -60, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
  renamable $x8 = ADRP target-flags(aarch64-page) @lastrow
  renamable $x16 = ADRP target-flags(aarch64-page) @firstrow

bb.28.for.cond127:
; predecessors: %bb.27, %bb.32
  successors: %bb.29(0x7c000000), %bb.33(0x04000000); %bb.29(96.88%), %bb.33(3.12%)
  liveins: $x8, $x16
  renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !1007 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  renamable $w0 = LDURWi $fp, -60, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  $w17 = SUBWrs killed renamable $w17, killed renamable $w18, 0, debug-location !1008; cg.c:549:29
  renamable $w17 = nsw ADDWri killed renamable $w17, 1, 0, debug-location !1009; cg.c:549:40
  $wzr = SUBSWrs killed renamable $w0, killed renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1011; cg.c:549:5
  Bcc 10, %bb.33, implicit $nzcv, debug-location !1011; cg.c:549:5

bb.29.for.body131:
; predecessors: %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x8, $x16
  renamable $x17 = LDURXi $fp, -24, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  renamable $x18 = LDURSWi $fp, -60, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  STRXui $xzr, $sp, 6, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
  renamable $w17 = LDRWroX killed renamable $x17, killed renamable $x18, 0, 1, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18

bb.30.for.cond134:
; predecessors: %bb.29, %bb.31
  successors: %bb.31(0x7c000000), %bb.32(0x04000000); %bb.31(96.88%), %bb.32(3.12%)
  liveins: $x8, $x16, $w17
  STRWui killed renamable $w17, $sp, 16, debug-location !DILocation(line: 0, scope: !1015) :: (store 4 into %ir.k); cg.c:0
  renamable $x17 = LDURXi $fp, -24, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  renamable $x18 = LDURSWi $fp, -60, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  renamable $w0 = LDRWui $sp, 16, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  renamable $x17 = ADDXrs killed renamable $x17, killed renamable $x18, 2, debug-location !1021; cg.c:551:33
  renamable $w17 = LDRWui killed renamable $x17, 1, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  $wzr = SUBSWrs killed renamable $w0, killed renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1025; cg.c:551:9
  Bcc 10, %bb.32, implicit $nzcv, debug-location !1025; cg.c:551:9

bb.31.for.body139:
; predecessors: %bb.30
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x8, $x16
  renamable $x17 = LDRSWui $sp, 16, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  renamable $x18 = LDURXi $fp, -16, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  renamable $x0, renamable $x1 = LDPXi $fp, -6, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.z.addr); cg.c:552:21
  renamable $x18 = LDRSWroX killed renamable $x18, renamable $x17, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  renamable $d0 = LDRDroX killed renamable $x0, renamable $x17, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  renamable $d1 = LDRDroX killed renamable $x1, killed renamable $x18, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  renamable $d2 = LDRDui $sp, 6, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
  renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit killed $x17, debug-location !1036; cg.c:551:49
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !1033; cg.c:552:26
  renamable $d0 = FADDDrr killed renamable $d2, killed renamable $d0, debug-location !1034; cg.c:552:19
  STRDui killed renamable $d0, $sp, 6, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
  B %bb.30

bb.32.for.end150:
; predecessors: %bb.30
  successors: %bb.28(0x80000000); %bb.28(100.00%)
  liveins: $x8, $x16
  renamable $d0 = LDRDui $sp, 6, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  renamable $x17 = LDRXui $fp, 3, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  renamable $x18 = LDURSWi $fp, -60, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  STRDroX killed renamable $d0, killed renamable $x17, killed renamable $x18, 0, 1, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  renamable $w17 = LDURWi $fp, -60, debug-location !1044 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  renamable $w17 = nsw ADDWri killed renamable $w17, 1, 0, debug-location !1044; cg.c:549:46
  STURWi killed renamable $w17, $fp, -60, debug-location !1044 :: (store 4 into %ir.j); cg.c:549:46
  B %bb.28

bb.33.for.end155:
; predecessors: %bb.28
  successors: %bb.34(0x80000000); %bb.34(100.00%)

  STURWi $wzr, $fp, -60, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
  renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  renamable $x16 = ADRP target-flags(aarch64-page) @firstcol

bb.34.for.cond156:
; predecessors: %bb.33, %bb.35
  successors: %bb.35(0x7c000000), %bb.36(0x04000000); %bb.35(96.88%), %bb.36(3.12%)
  liveins: $x8, $x16
  renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1054 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  renamable $w0 = LDURWi $fp, -60, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  $w17 = SUBWrs killed renamable $w17, killed renamable $w18, 0, debug-location !1055; cg.c:560:29
  renamable $w17 = nsw ADDWri killed renamable $w17, 1, 0, debug-location !1056; cg.c:560:40
  $wzr = SUBSWrs killed renamable $w0, killed renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1058; cg.c:560:5
  Bcc 10, %bb.36, implicit $nzcv, debug-location !1058; cg.c:560:5

bb.35.for.body160:
; predecessors: %bb.34
  successors: %bb.34(0x80000000); %bb.34(100.00%)
  liveins: $x8, $x16
  renamable $x17 = LDURSWi $fp, -60, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  renamable $x18 = LDURXi $fp, -32, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  renamable $x0 = LDRXui $fp, 3, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  renamable $x1 = UBFMXri renamable $x17, 61, 60, debug-location !1059; cg.c:561:13
  renamable $d0 = LDRDroX killed renamable $x18, renamable $x1, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  renamable $d1 = LDRDroX killed renamable $x0, killed renamable $x1, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d1, debug-location !1064; cg.c:561:18
  renamable $d1 = LDRDui $sp, 5, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit killed $x17, debug-location !1072; cg.c:560:46
  STRDui renamable $d0, $sp, 6, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
  renamable $d0 = FMULDrr killed renamable $d0, renamable $d0, debug-location !1069; cg.c:562:23
  renamable $d0 = FADDDrr killed renamable $d1, killed renamable $d0, debug-location !1070; cg.c:562:19
  STRDui killed renamable $d0, $sp, 5, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
  STURWi killed renamable $w17, $fp, -60, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
  B %bb.34

bb.36.for.end170:
; predecessors: %bb.34
  successors: %bb.38(0x50000000), %bb.37(0x30000000); %bb.38(62.50%), %bb.37(37.50%)

  renamable $d1 = LDRDui $sp, 5, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  renamable $d0 = FSQRTDr renamable $d1, debug-location !1077; cg.c:565:14
  FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !1078; cg.c:565:6
  Bcc 7, %bb.38, implicit $nzcv, debug-location !1078; cg.c:565:6

bb.37.call.sqrt:
; predecessors: %bb.36
  successors: %bb.38(0x80000000); %bb.38(100.00%)
  liveins: $d1
  $q0 = ORRv16i8 $q1, $q1, debug-location !1078; cg.c:565:6
  STRDui killed renamable $d1, $sp, 0 :: (store 8 into %stack.19)
  BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1078; cg.c:565:6
  renamable $d1 = LDRDui $sp, 0 :: (load 8 from %stack.19)

bb.38.for.end170.split:
; predecessors: %bb.36, %bb.37
  liveins: $d0, $d1
  PCN_STACKMAP 0, 0, 0, $fp, 32, killed renamable $d1, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1078 :: (load 8 from %fixed-stack.0, align 16); cg.c:565:6
  renamable $x8 = LDRXui $fp, 4, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  STRDui killed renamable $d0, killed renamable $x8, 0, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
  $fp, $lr = frame-destroy LDPXi $sp, 16, debug-location !1080 :: (load 8 from %stack.22), (load 8 from %stack.21); cg.c:566:1
  $sp = frame-destroy ADDXri $sp, 144, 0, debug-location !1080; cg.c:566:1
  RET undef $lr, debug-location !1080; cg.c:566:1

# End machine code for function conj_grad.

********** MI Scheduling **********
conj_grad:%bb.0 entry
  From: STPXi renamable $x1, renamable $x0, $fp, -3 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
    To: End RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   STPXi renamable $x1, renamable $x0, $fp, -3 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STPXi renamable $x3, renamable $x2, $fp, -5 :: (store 8 into %ir.x.addr), (store 8 into %ir.z.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STPXi renamable $x5, renamable $x4, $fp, -7 :: (store 8 into %ir.a.addr), (store 8 into %ir.p.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $w8 = MOVZWi 25, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$w8
SU(4):   STRXui $xzr, $sp, 4, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   STURWi $wzr, $fp, -60, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   STRWui renamable $w8, $sp, 14, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
  Successors:
    SU(7): Anti Latency=0
SU(7):   renamable $x8 = ADRP target-flags(aarch64-page) @naa
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(6): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $w8 = MOVZWi 25, 0
  Ready @0c
  TopQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 4 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) STRWui renamable $w8, $sp, 14, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
  Ready @1c
  TopQ.A TopLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 4 7 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(0) ORDER                              
  Cand SU(7) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $x8 = ADRP target-flags(aarch64-page) @naa
  Ready @2c
  TopQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPXi renamable $x1, renamable $x0, $fp, -3 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 2 5 
  TopQ.A RemainingLatency 0 + 4c > CritPath 2
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STPXi renamable $x3, renamable $x2, $fp, -5 :: (store 8 into %ir.x.addr), (store 8 into %ir.z.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 2 
  TopQ.A RemainingLatency 0 + 5c > CritPath 2
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STPXi renamable $x5, renamable $x4, $fp, -7 :: (store 8 into %ir.a.addr), (store 8 into %ir.p.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 2
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRXui $xzr, $sp, 4, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STURWi $wzr, $fp, -60, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(3):   $w8 = MOVZWi 25, 0
SU(6):   STRWui renamable $w8, $sp, 14, debug-location !750 :: (store 4 into %ir.cgitmax); cg.c:406:15
SU(7):   renamable $x8 = ADRP target-flags(aarch64-page) @naa
SU(0):   STPXi renamable $x1, renamable $x0, $fp, -3 :: (store 8 into %ir.colidx.addr), (store 8 into %ir.rowstr.addr)
SU(1):   STPXi renamable $x3, renamable $x2, $fp, -5 :: (store 8 into %ir.x.addr), (store 8 into %ir.z.addr)
SU(2):   STPXi renamable $x5, renamable $x4, $fp, -7 :: (store 8 into %ir.a.addr), (store 8 into %ir.p.addr)
SU(4):   STRXui $xzr, $sp, 4, debug-location !763 :: (store 8 into %ir.rho); cg.c:409:9
SU(5):   STURWi $wzr, $fp, -60, debug-location !764 :: (store 4 into %ir.j); cg.c:414:12

********** MI Scheduling **********
conj_grad:%bb.0 entry
  From: frame-setup STPXi killed $fp, killed $lr, $sp, 16 :: (store 8 into %stack.22), (store 8 into %stack.21)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $fp, $lr, $sp, 16 :: (store 8 into %stack.22), (store 8 into %stack.21)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Anti Latency=0
SU(1):   $fp = frame-setup ADDXri $sp, 128, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) frame-setup STPXi $fp, $lr, $sp, 16 :: (store 8 into %stack.22), (store 8 into %stack.21)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $fp = frame-setup ADDXri $sp, 128, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $fp, $lr, $sp, 16 :: (store 8 into %stack.22), (store 8 into %stack.21)
SU(1):   $fp = frame-setup ADDXri $sp, 128, 0

Fixup kills for %bb.0
********** MI Scheduling **********
conj_grad:%bb.1 for.cond
  From: renamable $w16 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
    To: Bcc 10, %bb.3, implicit $nzcv, debug-location !772; cg.c:414:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w16
SU(1):   renamable $w17 = LDURWi $fp, -60, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w17
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !770; cg.c:414:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    SU(3): Data Latency=1 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w17, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !772; cg.c:414:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$w16
    SU(1): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.3, implicit $nzcv, debug-location !772; cg.c:414:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w16 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w17 = LDURWi $fp, -60, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !770; cg.c:414:25
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w17, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !772; cg.c:414:5
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w16 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @naa, debug-location !769 :: (dereferenceable load 4 from @naa); cg.c:414:21
SU(1):   renamable $w17 = LDURWi $fp, -60, debug-location !767 :: (dereferenceable load 4 from %ir.j); cg.c:414:17
SU(2):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !770; cg.c:414:25
SU(3):   $wzr = SUBSWrs renamable $w17, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !772; cg.c:414:5

Fixup kills for %bb.1
********** MI Scheduling **********
conj_grad:%bb.2 for.body
  From: renamable $x16 = LDRXui $fp, 2, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
    To: B %bb.1
 RegionInstrs: 21
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDRXui $fp, 2, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x17 = LDURSWi $fp, -60, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  # preds left       : 0
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 35
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x17
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRXroX $xzr, renamable $x16, renamable $x17, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
  # preds left       : 4
  # succs left       : 17
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 31
  Predecessors:
    SU(1): Data Latency=4 Reg=$x17
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x16
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(4): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $x16 = LDURXi $fp, -40, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x16
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $x17 = LDURSWi $fp, -60, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 30
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x17
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(5):   STRXroX $xzr, renamable $x16, renamable $x17, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  # preds left       : 7
  # succs left       : 14
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 26
  Predecessors:
    SU(4): Data Latency=4 Reg=$x17
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=$x16
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(7): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
SU(6):   renamable $x16 = LDURSWi $fp, -60, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 25
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Out  Latency=1
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x16
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(7):   renamable $x17 = LDURXi $fp, -32, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 24
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(4): Out  Latency=1
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x17
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(8):   renamable $x16 = UBFMXri renamable $x16, 61, 60, debug-location !780; cg.c:417:16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 21
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x16
  Successors:
    SU(12): Out  Latency=1
    SU(11): Data Latency=1 Reg=$x16
    SU(9): Data Latency=1 Reg=$x16
SU(9):   renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  # preds left       : 4
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 20
  Predecessors:
    SU(8): Data Latency=1 Reg=$x16
    SU(7): Data Latency=4 Reg=$x17
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(15): Out  Latency=1
    SU(11): Data Latency=4 Reg=$d0
    SU(10): Anti Latency=0
    SU(12): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(10):   renamable $x17 = LDRXui $fp, 3, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 20
  Predecessors:
    SU(9): Anti Latency=0
    SU(7): Out  Latency=1
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(13): Out  Latency=1
    SU(11): Data Latency=4 Reg=$x17
    SU(17): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
SU(11):   STRDroX renamable $d0, renamable $x17, renamable $x16, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  # preds left       : 13
  # succs left       : 10
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 16
  Predecessors:
    SU(10): Data Latency=4 Reg=$x17
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=$d0
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=$x16
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Anti Latency=0
    SU(13): Anti Latency=0
    SU(12): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
    SU(12): Ord  Latency=1 Memory
    SU(16): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
SU(12):   renamable $x16 = LDURSWi $fp, -60, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 15
  Predecessors:
    SU(11): Anti Latency=0
    SU(11): Ord  Latency=1 Memory
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$x16
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
SU(13):   renamable $x17 = LDRXui $fp, 3, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 20
  Height             : 14
  Predecessors:
    SU(11): Anti Latency=0
    SU(11): Ord  Latency=1 Memory
    SU(10): Out  Latency=1
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(16): Out  Latency=1
    SU(15): Data Latency=4 Reg=$x17
    SU(17): Ord  Latency=0 Memory
SU(14):   renamable $x16 = UBFMXri renamable $x16, 61, 60, debug-location !785; cg.c:418:16
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 24
  Height             : 11
  Predecessors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=4 Reg=$x16
  Successors:
    SU(18): Out  Latency=1
    SU(17): Data Latency=1 Reg=$x16
    SU(15): Data Latency=1 Reg=$x16
SU(15):   renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  # preds left       : 7
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
    SU(14): Data Latency=1 Reg=$x16
    SU(13): Data Latency=4 Reg=$x17
    SU(11): Anti Latency=0
    SU(11): Ord  Latency=1 Memory
    SU(9): Out  Latency=1
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=$d0
    SU(16): Anti Latency=0
    SU(18): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
SU(16):   renamable $x17 = LDURXi $fp, -56, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 25
  Height             : 10
  Predecessors:
    SU(15): Anti Latency=0
    SU(13): Out  Latency=1
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(17): Data Latency=4 Reg=$x17
    SU(17): Ord  Latency=0 Memory
SU(17):   STRDroX renamable $d0, renamable $x17, renamable $x16, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  # preds left       : 18
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 6
  Predecessors:
    SU(16): Data Latency=4 Reg=$x17
    SU(16): Ord  Latency=0 Memory
    SU(15): Data Latency=4 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(14): Data Latency=1 Reg=$x16
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(18): Anti Latency=0
    SU(20): Ord  Latency=0 Memory
    SU(18): Ord  Latency=1 Memory
SU(18):   renamable $w16 = LDURWi $fp, -60, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 30
  Height             : 5
  Predecessors:
    SU(17): Anti Latency=0
    SU(17): Ord  Latency=1 Memory
    SU(15): Anti Latency=0
    SU(14): Out  Latency=1
    SU(11): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=4 Reg=$w16
    SU(20): Ord  Latency=0 Memory
SU(19):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !790; cg.c:414:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 34
  Height             : 1
  Predecessors:
    SU(18): Out  Latency=1
    SU(18): Data Latency=4 Reg=$w16
  Successors:
    SU(20): Data Latency=1 Reg=$w16
SU(20):   STURWi renamable $w16, $fp, -60, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31
  # preds left       : 12
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 35
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=$w16
    SU(18): Ord  Latency=0 Memory
    SU(17): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 35
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 35
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x16 = LDRXui $fp, 2, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
  Ready @0c
  TopQ.A BotLatency SU(0) 35c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x17 = LDURSWi $fp, -60, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
  Ready @1c
  TopQ.A BotLatency SU(1) 35c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXroX $xzr, renamable $x16, renamable $x17, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 35
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x16 = LDURXi $fp, -40, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x17 = LDURSWi $fp, -60, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
  Ready @7c
  TopQ.A BotLatency SU(4) 30c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRXroX $xzr, renamable $x16, renamable $x17, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
  Ready @11c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  TopQ.A RemainingLatency 0 + 12c > CritPath 35
  Cand SU(6) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(6) renamable $x16 = LDURSWi $fp, -60, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
  Ready @12c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x17 = LDURXi $fp, -32, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $x16 = UBFMXri renamable $x16, 61, 60, debug-location !780; cg.c:417:16
  Ready @16c
  TopQ.A TopLatency SU(8) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
  Ready @17c
  TopQ.A TopLatency SU(9) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 10
  Executed: 18c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $x17 = LDRXui $fp, 3, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
  Ready @18c
  TopQ.A BotLatency SU(10) 20c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 11
  Executed: 19c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 22 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STRDroX renamable $d0, renamable $x17, renamable $x16, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
  Ready @22c
  TopQ.A TopLatency SU(11) 19c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 12
  Executed: 23c
  Critical: 12c, 12 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 13 
  TopQ.A RemainingLatency 0 + 23c > CritPath 35
  Cand SU(12) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(12) renamable $x16 = LDURSWi $fp, -60, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
  Ready @23c
  TopQ.A TopLatency SU(12) 20c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 13
  Executed: 24c
  Critical: 13c, 13 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 14 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) renamable $x17 = LDRXui $fp, 3, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 14
  Executed: 25c
  Critical: 14c, 14 MOps
  ExpectedLatency: 20c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 27 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $x16 = UBFMXri renamable $x16, 61, 60, debug-location !785; cg.c:418:16
  Ready @27c
  TopQ.A TopLatency SU(14) 24c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 15
  Executed: 28c
  Critical: 15c, 15 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
  Ready @28c
  TopQ.A TopLatency SU(15) 25c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 16
  Executed: 29c
  Critical: 16c, 16 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $x17 = LDURXi $fp, -56, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
  Ready @29c
  TopQ.A BotLatency SU(16) 10c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 17
  Executed: 30c
  Critical: 17c, 17 MOps
  ExpectedLatency: 25c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 33 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) STRDroX renamable $d0, renamable $x17, renamable $x16, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
  Ready @33c
  TopQ.A TopLatency SU(17) 29c
  *** Max MOps 1 at cycle 33
Cycle: 34 TopQ.A
TopQ.A @34c
  Retired: 18
  Executed: 34c
  Critical: 18c, 18 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) renamable $w16 = LDURWi $fp, -60, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
  Ready @34c
  TopQ.A TopLatency SU(18) 30c
  *** Max MOps 1 at cycle 34
Cycle: 35 TopQ.A
TopQ.A @35c
  Retired: 19
  Executed: 35c
  Critical: 19c, 19 MOps
  ExpectedLatency: 30c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 38 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !790; cg.c:414:31
  Ready @38c
  TopQ.A TopLatency SU(19) 34c
  *** Max MOps 1 at cycle 38
Cycle: 39 TopQ.A
TopQ.A @39c
  Retired: 20
  Executed: 39c
  Critical: 20c, 20 MOps
  ExpectedLatency: 34c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) STURWi renamable $w16, $fp, -60, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31
  Ready @39c
  TopQ.A TopLatency SU(20) 35c
  *** Max MOps 1 at cycle 39
Cycle: 40 TopQ.A
TopQ.A @40c
  Retired: 21
  Executed: 40c
  Critical: 21c, 21 MOps
  ExpectedLatency: 35c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x16 = LDRXui $fp, 2, debug-location !773 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:415:9
SU(1):   renamable $x17 = LDURSWi $fp, -60, debug-location !775 :: (dereferenceable load 4 from %ir.j); cg.c:415:11
SU(2):   STRXroX $xzr, renamable $x16, renamable $x17, 0, 1, debug-location !776 :: (store 8 into %ir.arrayidx); cg.c:415:14
SU(3):   renamable $x16 = LDURXi $fp, -40, debug-location !777 :: (dereferenceable load 8 from %ir.z.addr); cg.c:416:9
SU(4):   renamable $x17 = LDURSWi $fp, -60, debug-location !778 :: (dereferenceable load 4 from %ir.j); cg.c:416:11
SU(5):   STRXroX $xzr, renamable $x16, renamable $x17, 0, 1, debug-location !779 :: (store 8 into %ir.arrayidx2); cg.c:416:14
SU(6):   renamable $x16 = LDURSWi $fp, -60, debug-location !781 :: (dereferenceable load 4 from %ir.j); cg.c:417:18
SU(7):   renamable $x17 = LDURXi $fp, -32, debug-location !780 :: (dereferenceable load 8 from %ir.x.addr); cg.c:417:16
SU(8):   renamable $x16 = UBFMXri renamable $x16, 61, 60, debug-location !780; cg.c:417:16
SU(9):   renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0, debug-location !780 :: (load 8 from %ir.arrayidx4); cg.c:417:16
SU(10):   renamable $x17 = LDRXui $fp, 3, debug-location !782 :: (dereferenceable load 8 from %ir.r.addr); cg.c:417:9
SU(11):   STRDroX renamable $d0, renamable $x17, renamable $x16, 0, 0, debug-location !784 :: (store 8 into %ir.arrayidx6); cg.c:417:14
SU(12):   renamable $x16 = LDURSWi $fp, -60, debug-location !786 :: (dereferenceable load 4 from %ir.j); cg.c:418:18
SU(13):   renamable $x17 = LDRXui $fp, 3, debug-location !785 :: (dereferenceable load 8 from %ir.r.addr); cg.c:418:16
SU(14):   renamable $x16 = UBFMXri renamable $x16, 61, 60, debug-location !785; cg.c:418:16
SU(15):   renamable $d0 = LDRDroX renamable $x17, renamable $x16, 0, 0, debug-location !785 :: (load 8 from %ir.arrayidx8); cg.c:418:16
SU(16):   renamable $x17 = LDURXi $fp, -56, debug-location !787 :: (dereferenceable load 8 from %ir.p.addr); cg.c:418:9
SU(17):   STRDroX renamable $d0, renamable $x17, renamable $x16, 0, 0, debug-location !789 :: (store 8 into %ir.arrayidx10); cg.c:418:14
SU(18):   renamable $w16 = LDURWi $fp, -60, debug-location !790 :: (dereferenceable load 4 from %ir.j); cg.c:414:31
SU(19):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !790; cg.c:414:31
SU(20):   STURWi renamable $w16, $fp, -60, debug-location !790 :: (store 4 into %ir.j); cg.c:414:31

Fixup kills for %bb.2
********** MI Scheduling **********
conj_grad:%bb.3 for.end
  From: STURWi $wzr, $fp, -60, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -60, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -60, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
SU(0):   STURWi $wzr, $fp, -60, debug-location !794 :: (store 4 into %ir.j); cg.c:425:12

Fixup kills for %bb.3
********** MI Scheduling **********
conj_grad:%bb.4 for.cond11
  From: renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
    To: Bcc 10, %bb.6, implicit $nzcv, debug-location !804; cg.c:425:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w17
SU(1):   renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !800 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w18
SU(2):   renamable $w0 = LDURWi $fp, -60, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w0
SU(3):   $w17 = SUBWrs renamable $w17, renamable $w18, 0, debug-location !801; cg.c:425:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w18
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w17
SU(4):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !802; cg.c:425:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w17
  Successors:
    SU(5): Data Latency=1 Reg=$w17
SU(5):   $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !804; cg.c:425:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w17
    SU(2): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.6, implicit $nzcv, debug-location !804; cg.c:425:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !800 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w0 = LDURWi $fp, -60, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w17 = SUBWrs renamable $w17, renamable $w18, 0, debug-location !801; cg.c:425:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !802; cg.c:425:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !804; cg.c:425:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !799 :: (dereferenceable load 4 from @lastcol); cg.c:425:21
SU(1):   renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !800 :: (dereferenceable load 4 from @firstcol); cg.c:425:31
SU(2):   renamable $w0 = LDURWi $fp, -60, debug-location !797 :: (dereferenceable load 4 from %ir.j); cg.c:425:17
SU(3):   $w17 = SUBWrs renamable $w17, renamable $w18, 0, debug-location !801; cg.c:425:29
SU(4):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !802; cg.c:425:40
SU(5):   $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !804; cg.c:425:5

Fixup kills for %bb.4
********** MI Scheduling **********
conj_grad:%bb.5 for.body14
  From: renamable $x17 = LDRXui $fp, 3, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
    To: B %bb.4
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDRXui $fp, 3, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x17
SU(1):   renamable $x18 = LDURSWi $fp, -60, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$w18
    SU(4): Data Latency=0 Reg=$x18
    SU(2): Data Latency=4 Reg=$x18
    SU(8): Ord  Latency=0 Memory
SU(2):   renamable $d0 = LDRDroX renamable $x17, renamable $x18, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x18
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(4): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(3):   renamable $d1 = LDRDui $sp, 4, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=$d1
    SU(7): Ord  Latency=0 Memory
SU(4):   renamable $w17 = nsw ADDWri renamable $w18, 1, 0, implicit $x18, debug-location !814; cg.c:425:46
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w18
    SU(1): Data Latency=0 Reg=$x18
    SU(0): Out  Latency=1
  Successors:
    SU(8): Data Latency=1 Reg=$w17
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !811; cg.c:426:26
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
SU(6):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !812; cg.c:426:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(7): Data Latency=1 Reg=$d0
SU(7):   STRDui renamable $d0, $sp, 4, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(8):   STURWi renamable $w17, $fp, -60, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w17
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x17 = LDRXui $fp, 3, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x18 = LDURSWi $fp, -60, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui $sp, 4, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x17, renamable $x18, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w17 = nsw ADDWri renamable $w18, 1, 0, implicit $x18, debug-location !814; cg.c:425:46
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STURWi renamable $w17, $fp, -60, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
  Ready @7c
  TopQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !811; cg.c:426:26
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !812; cg.c:426:19
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRDui renamable $d0, $sp, 4, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x17 = LDRXui $fp, 3, debug-location !807 :: (dereferenceable load 8 from %ir.r.addr); cg.c:426:21
SU(1):   renamable $x18 = LDURSWi $fp, -60, debug-location !808 :: (dereferenceable load 4 from %ir.j); cg.c:426:23
SU(3):   renamable $d1 = LDRDui $sp, 4, debug-location !805 :: (dereferenceable load 8 from %ir.rho); cg.c:426:15
SU(2):   renamable $d0 = LDRDroX renamable $x17, renamable $x18, 0, 1, debug-location !807 :: (load 8 from %ir.arrayidx18); cg.c:426:21
SU(4):   renamable $w17 = nsw ADDWri renamable $w18, 1, 0, implicit $x18, debug-location !814; cg.c:425:46
SU(8):   STURWi renamable $w17, $fp, -60, debug-location !814 :: (store 4 into %ir.j); cg.c:425:46
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !811; cg.c:426:26
SU(6):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !812; cg.c:426:19
SU(7):   STRDui renamable $d0, $sp, 4, debug-location !813 :: (store 8 into %ir.rho); cg.c:426:13

Fixup kills for %bb.5
********** MI Scheduling **********
conj_grad:%bb.6 for.end22
  From: $w18 = MOVZWi 1, 0
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   $w18 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w18
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastrow
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @firstrow
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   renamable $x17 = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   STRWui renamable $w18, $sp, 15, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=1 Reg=$w18
  Successors:
    SU(5): Anti Latency=0
SU(5):   renamable $x18 = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 2
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $w18 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 2 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @lastrow
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 2
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) renamable $x16 = ADRP target-flags(aarch64-page) @firstrow
  Ready @2c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 3c > CritPath 2
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x17 = ADRP target-flags(aarch64-page) @lastcol
  Ready @3c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui renamable $w18, $sp, 15, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
  Ready @4c
  TopQ.A TopLatency SU(4) 1c
  TopQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x18 = ADRP target-flags(aarch64-page) @firstcol
  Ready @5c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $w18 = MOVZWi 1, 0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastrow
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @firstrow
SU(3):   renamable $x17 = ADRP target-flags(aarch64-page) @lastcol
SU(4):   STRWui renamable $w18, $sp, 15, debug-location !818 :: (store 4 into %ir.cgit); cg.c:434:15
SU(5):   renamable $x18 = ADRP target-flags(aarch64-page) @firstcol

Fixup kills for %bb.6
********** MI Scheduling **********
conj_grad:%bb.7 for.cond23
  From: renamable $w1, renamable $w0 = LDPWi $sp, 14, debug-location !821 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
    To: Bcc 12, %bb.27, implicit $nzcv, debug-location !825; cg.c:434:5
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w1, renamable $w0 = LDPWi $sp, 14, debug-location !821 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w1
    SU(1): Data Latency=4 Reg=$w0
SU(1):   $wzr = SUBSWrs renamable $w0, renamable $w1, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !825; cg.c:434:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w1
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 12, %bb.27, implicit $nzcv, debug-location !825; cg.c:434:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w1, renamable $w0 = LDPWi $sp, 14, debug-location !821 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w0, renamable $w1, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !825; cg.c:434:5
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $w1, renamable $w0 = LDPWi $sp, 14, debug-location !821 :: (dereferenceable load 4 from %ir.cgit), (dereferenceable load 4 from %ir.cgitmax); cg.c:434:20
SU(1):   $wzr = SUBSWrs renamable $w0, renamable $w1, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !825; cg.c:434:5

Fixup kills for %bb.7
Fixup kills for %bb.8
********** MI Scheduling **********
conj_grad:%bb.9 for.cond26
  From: renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
    To: Bcc 10, %bb.14, implicit $nzcv, debug-location !837; cg.c:447:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w0
SU(1):   renamable $w1 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !833 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w1
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w2
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !834; cg.c:447:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w0
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !835; cg.c:447:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w0
  Successors:
    SU(5): Data Latency=1 Reg=$w0
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !837; cg.c:447:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w0
    SU(2): Data Latency=4 Reg=$w2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.14, implicit $nzcv, debug-location !837; cg.c:447:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !833 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w2 = LDURWi $fp, -60, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !834; cg.c:447:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !835; cg.c:447:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !837; cg.c:447:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $w0 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !832 :: (dereferenceable load 4 from @lastrow); cg.c:447:25
SU(1):   renamable $w1 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !833 :: (dereferenceable load 4 from @firstrow); cg.c:447:35
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !830 :: (dereferenceable load 4 from %ir.j); cg.c:447:21
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !834; cg.c:447:33
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !835; cg.c:447:44
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !837; cg.c:447:9

Fixup kills for %bb.9
********** MI Scheduling **********
conj_grad:%bb.10 for.body30
  From: renamable $x0 = LDURXi $fp, -24, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDURXi $fp, -24, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x0
SU(1):   renamable $x1 = LDURSWi $fp, -60, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=$x1
SU(2):   STRXui $xzr, $sp, 5, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w0 = LDRWroX renamable $x0, renamable $x1, 0, 1, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=$x1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDURXi $fp, -24, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x1 = LDURSWi $fp, -60, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXui $xzr, $sp, 5, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w0 = LDRWroX renamable $x0, renamable $x1, 0, 1, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $x0 = LDURXi $fp, -24, debug-location !840 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:22
SU(1):   renamable $x1 = LDURSWi $fp, -60, debug-location !842 :: (dereferenceable load 4 from %ir.j); cg.c:449:29
SU(2):   STRXui $xzr, $sp, 5, debug-location !838 :: (store 8 into %ir.sum); cg.c:448:17
SU(3):   renamable $w0 = LDRWroX renamable $x0, renamable $x1, 0, 1, debug-location !840 :: (load 4 from %ir.arrayidx32); cg.c:449:22

Fixup kills for %bb.10
********** MI Scheduling **********
conj_grad:%bb.11 for.cond33
  From: STRWui killed renamable $w0, $sp, 16, debug-location !DILocation(line: 0, scope: !841) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.13, implicit $nzcv, debug-location !851; cg.c:449:13
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w0, $sp, 16, debug-location !DILocation(line: 0, scope: !841) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
SU(1):   renamable $x0 = LDURXi $fp, -24, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x0
SU(2):   renamable $x1 = LDURSWi $fp, -60, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x1
SU(3):   renamable $w2 = LDRWui $sp, 16, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w2
SU(4):   renamable $x0 = ADDXrs renamable $x0, renamable $x1, 2, debug-location !847; cg.c:449:37
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x0
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   renamable $w0 = LDRWui renamable $x0, 1, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w0
SU(6):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !851; cg.c:449:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w0
    SU(3): Data Latency=4 Reg=$w2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.13, implicit $nzcv, debug-location !851; cg.c:449:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui renamable $w0, $sp, 16, debug-location !DILocation(line: 0, scope: !841) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x0 = LDURXi $fp, -24, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x1 = LDURSWi $fp, -60, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w2 = LDRWui $sp, 16, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x0 = ADDXrs renamable $x0, renamable $x1, 2, debug-location !847; cg.c:449:37
  Ready @6c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w0 = LDRWui renamable $x0, 1, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:37
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !851; cg.c:449:13
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   STRWui renamable $w0, $sp, 16, debug-location !DILocation(line: 0, scope: !841) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $x0 = LDURXi $fp, -24, debug-location !847 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:449:37
SU(2):   renamable $x1 = LDURSWi $fp, -60, debug-location !848 :: (dereferenceable load 4 from %ir.j); cg.c:449:44
SU(3):   renamable $w2 = LDRWui $sp, 16, debug-location !845 :: (dereferenceable load 4 from %ir.k); cg.c:449:33
SU(4):   renamable $x0 = ADDXrs renamable $x0, renamable $x1, 2, debug-location !847; cg.c:449:37
SU(5):   renamable $w0 = LDRWui renamable $x0, 1, debug-location !847 :: (load 4 from %ir.arrayidx36); cg.c:449:37
SU(6):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !851; cg.c:449:13

Fixup kills for %bb.11
********** MI Scheduling **********
conj_grad:%bb.12 for.body38
  From: renamable $x0 = LDRSWui $sp, 16, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
    To: B %bb.11
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRSWui $sp, 16, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w0
    SU(7): Data Latency=0 Reg=$x0
    SU(4): Data Latency=4 Reg=$x0
    SU(3): Data Latency=4 Reg=$x0
SU(1):   renamable $x1 = LDURXi $fp, -16, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x1
SU(2):   renamable $x3, renamable $x2 = LDPXi $fp, -7, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.p.addr); cg.c:450:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=$x3
    SU(4): Data Latency=4 Reg=$x2
SU(3):   renamable $x1 = LDRSWroX renamable $x1, renamable $x0, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x1
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(5): Data Latency=4 Reg=$x1
    SU(7): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
SU(4):   renamable $d0 = LDRDroX renamable $x2, renamable $x0, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x2
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d0
    SU(7): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
SU(5):   renamable $d1 = LDRDroX renamable $x3, renamable $x1, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(3): Data Latency=4 Reg=$x1
    SU(2): Data Latency=4 Reg=$x3
  Successors:
    SU(8): Data Latency=4 Reg=$d1
    SU(10): Ord  Latency=0 Memory
SU(6):   renamable $d2 = LDRDui $sp, 5, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=$d2
    SU(10): Ord  Latency=0 Memory
SU(7):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !862; cg.c:449:53
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
    SU(0): Data Latency=0 Reg=$x0
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !859; cg.c:450:34
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !860; cg.c:450:27
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
  Successors:
    SU(10): Data Latency=1 Reg=$d0
SU(10):   STRDui renamable $d0, $sp, 5, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
ExitSU:   B %bb.11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRSWui $sp, 16, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 14
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x1 = LDURXi $fp, -16, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
  Ready @1c
  TopQ.A BotLatency SU(1) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 14
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x3, renamable $x2 = LDPXi $fp, -7, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.p.addr); cg.c:450:29
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 4 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = LDRDui $sp, 5, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x1 = LDRSWroX renamable $x1, renamable $x0, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = LDRDroX renamable $x2, renamable $x0, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !862; cg.c:449:53
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x3, renamable $x1, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !859; cg.c:450:34
  Ready @13c
  TopQ.A TopLatency SU(8) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !860; cg.c:450:27
  Ready @14c
  TopQ.A TopLatency SU(9) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRDui renamable $d0, $sp, 5, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21
  Ready @15c
  TopQ.A TopLatency SU(10) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x0 = LDRSWui $sp, 16, debug-location !855 :: (dereferenceable load 4 from %ir.k); cg.c:450:31
SU(1):   renamable $x1 = LDURXi $fp, -16, debug-location !857 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:450:38
SU(2):   renamable $x3, renamable $x2 = LDPXi $fp, -7, debug-location !854 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.p.addr); cg.c:450:29
SU(6):   renamable $d2 = LDRDui $sp, 5, debug-location !852 :: (dereferenceable load 8 from %ir.sum); cg.c:450:23
SU(3):   renamable $x1 = LDRSWroX renamable $x1, renamable $x0, 0, 1, debug-location !857 :: (load 4 from %ir.arrayidx42); cg.c:450:38
SU(4):   renamable $d0 = LDRDroX renamable $x2, renamable $x0, 0, 1, debug-location !854 :: (load 8 from %ir.arrayidx40); cg.c:450:29
SU(7):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !862; cg.c:449:53
SU(5):   renamable $d1 = LDRDroX renamable $x3, renamable $x1, 0, 1, debug-location !856 :: (load 8 from %ir.arrayidx44); cg.c:450:36
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !859; cg.c:450:34
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !860; cg.c:450:27
SU(10):   STRDui renamable $d0, $sp, 5, debug-location !861 :: (store 8 into %ir.sum); cg.c:450:21

Fixup kills for %bb.12
********** MI Scheduling **********
conj_grad:%bb.13 for.end49
  From: renamable $d0 = LDRDui $sp, 5, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
    To: B %bb.9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 5, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=$d0
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x0 = LDRXui $fp, 2, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x0
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x1 = LDURSWi $fp, -60, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=$x1
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(3):   STRDroX renamable $d0, renamable $x0, renamable $x1, 0, 1, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x1
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x0
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Anti Latency=0
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=1 Memory
SU(4):   renamable $w0 = LDURWi $fp, -60, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w0
    SU(6): Ord  Latency=0 Memory
SU(5):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !870; cg.c:447:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w0
  Successors:
    SU(6): Data Latency=1 Reg=$w0
SU(6):   STURWi renamable $w0, $fp, -60, debug-location !870 :: (store 4 into %ir.j); cg.c:447:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w0
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 5, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x0 = LDRXui $fp, 2, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x1 = LDURSWi $fp, -60, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDroX renamable $d0, renamable $x0, renamable $x1, 0, 1, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w0 = LDURWi $fp, -60, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
  Ready @7c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !870; cg.c:447:50
  Ready @11c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STURWi renamable $w0, $fp, -60, debug-location !870 :: (store 4 into %ir.j); cg.c:447:50
  Ready @12c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $d0 = LDRDui $sp, 5, debug-location !866 :: (dereferenceable load 8 from %ir.sum); cg.c:452:20
SU(1):   renamable $x0 = LDRXui $fp, 2, debug-location !867 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:452:13
SU(2):   renamable $x1 = LDURSWi $fp, -60, debug-location !868 :: (dereferenceable load 4 from %ir.j); cg.c:452:15
SU(3):   STRDroX renamable $d0, renamable $x0, renamable $x1, 0, 1, debug-location !869 :: (store 8 into %ir.arrayidx51); cg.c:452:18
SU(4):   renamable $w0 = LDURWi $fp, -60, debug-location !870 :: (dereferenceable load 4 from %ir.j); cg.c:447:50
SU(5):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !870; cg.c:447:50
SU(6):   STURWi renamable $w0, $fp, -60, debug-location !870 :: (store 4 into %ir.j); cg.c:447:50

Fixup kills for %bb.13
********** MI Scheduling **********
conj_grad:%bb.14 for.end54
  From: STRXui $xzr, $sp, 6, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRXui $xzr, $sp, 6, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURWi $wzr, $fp, -60, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRXui $xzr, $sp, 6, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi $wzr, $fp, -60, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   STRXui $xzr, $sp, 6, debug-location !874 :: (store 8 into %ir.d); cg.c:496:11
SU(1):   STURWi $wzr, $fp, -60, debug-location !875 :: (store 4 into %ir.j); cg.c:497:16

Fixup kills for %bb.14
********** MI Scheduling **********
conj_grad:%bb.15 for.cond55
  From: renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
    To: Bcc 10, %bb.17, implicit $nzcv, debug-location !885; cg.c:497:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w0
SU(1):   renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !881 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w1
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w2
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !882; cg.c:497:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w0
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !883; cg.c:497:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w0
  Successors:
    SU(5): Data Latency=1 Reg=$w0
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !885; cg.c:497:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w0
    SU(2): Data Latency=4 Reg=$w2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.17, implicit $nzcv, debug-location !885; cg.c:497:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !881 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w2 = LDURWi $fp, -60, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !882; cg.c:497:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !883; cg.c:497:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !885; cg.c:497:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !880 :: (dereferenceable load 4 from @lastcol); cg.c:497:25
SU(1):   renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !881 :: (dereferenceable load 4 from @firstcol); cg.c:497:35
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !878 :: (dereferenceable load 4 from %ir.j); cg.c:497:21
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !882; cg.c:497:33
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !883; cg.c:497:44
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !885; cg.c:497:9

Fixup kills for %bb.15
********** MI Scheduling **********
conj_grad:%bb.16 for.body59
  From: renamable $x0 = LDURSWi $fp, -60, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
    To: B %bb.15
 RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDURSWi $fp, -60, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w0
    SU(7): Data Latency=0 Reg=$x0
    SU(3): Data Latency=4 Reg=$x0
    SU(11): Ord  Latency=0 Memory
SU(1):   renamable $x1 = LDURXi $fp, -56, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x1
SU(2):   renamable $x2 = LDRXui $fp, 2, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=$x2
SU(3):   renamable $x3 = UBFMXri renamable $x0, 61, 60, debug-location !888; cg.c:498:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(5): Data Latency=1 Reg=$x3
    SU(4): Data Latency=1 Reg=$x3
    SU(7): Anti Latency=0
SU(4):   renamable $d0 = LDRDroX renamable $x1, renamable $x3, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=$x3
    SU(1): Data Latency=4 Reg=$x1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d0
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
SU(5):   renamable $d1 = LDRDroX renamable $x2, renamable $x3, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=$x3
    SU(2): Data Latency=4 Reg=$x2
  Successors:
    SU(8): Data Latency=4 Reg=$d1
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
SU(6):   renamable $d2 = LDRDui $sp, 6, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=$d2
    SU(10): Ord  Latency=0 Memory
SU(7):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !895; cg.c:497:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
    SU(0): Data Latency=0 Reg=$x0
  Successors:
    SU(11): Data Latency=1 Reg=$w0
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !892; cg.c:498:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 2
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !893; cg.c:498:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
  Successors:
    SU(10): Data Latency=1 Reg=$d0
SU(10):   STRDui renamable $d0, $sp, 6, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(11):   STURWi renamable $w0, $fp, -60, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w0
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDURSWi $fp, -60, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x1 = LDURXi $fp, -56, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 11
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x2 = LDRXui $fp, 2, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = LDRDui $sp, 6, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x3 = UBFMXri renamable $x0, 61, 60, debug-location !888; cg.c:498:21
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 11
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = LDRDroX renamable $x1, renamable $x3, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 11
  Cand SU(7) ORDER                              
  Cand SU(5) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x2, renamable $x3, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !895; cg.c:497:50
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 8 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STURWi renamable $w0, $fp, -60, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !892; cg.c:498:26
  Ready @10c
  TopQ.A TopLatency SU(8) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 10
  Executed: 11c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !893; cg.c:498:19
  Ready @11c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 11
  Executed: 12c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRDui renamable $d0, $sp, 6, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15
  Ready @12c
  TopQ.A TopLatency SU(10) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 12
  Executed: 13c
  Critical: 12c, 12 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $x0 = LDURSWi $fp, -60, debug-location !889 :: (dereferenceable load 4 from %ir.j); cg.c:498:23
SU(1):   renamable $x1 = LDURXi $fp, -56, debug-location !888 :: (dereferenceable load 8 from %ir.p.addr); cg.c:498:21
SU(2):   renamable $x2 = LDRXui $fp, 2, debug-location !890 :: (dereferenceable load 8 from %ir.q.addr, align 16); cg.c:498:28
SU(6):   renamable $d2 = LDRDui $sp, 6, debug-location !886 :: (dereferenceable load 8 from %ir.d); cg.c:498:17
SU(3):   renamable $x3 = UBFMXri renamable $x0, 61, 60, debug-location !888; cg.c:498:21
SU(4):   renamable $d0 = LDRDroX renamable $x1, renamable $x3, 0, 0, debug-location !888 :: (load 8 from %ir.arrayidx61); cg.c:498:21
SU(5):   renamable $d1 = LDRDroX renamable $x2, renamable $x3, 0, 0, debug-location !890 :: (load 8 from %ir.arrayidx63); cg.c:498:28
SU(7):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, implicit $x0, debug-location !895; cg.c:497:50
SU(11):   STURWi renamable $w0, $fp, -60, debug-location !895 :: (store 4 into %ir.j); cg.c:497:50
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !892; cg.c:498:26
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !893; cg.c:498:19
SU(10):   STRDui renamable $d0, $sp, 6, debug-location !894 :: (store 8 into %ir.d); cg.c:498:15

Fixup kills for %bb.16
********** MI Scheduling **********
conj_grad:%bb.17 for.end68
  From: renamable $d0 = LDRDui $sp, 4, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 4, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$d0
    SU(3): Data Latency=4 Reg=$d0
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $d1 = LDRDui $sp, 6, debug-location !900 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d1
SU(2):   STRXui $xzr, $sp, 4, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=0 Memory
SU(3):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !901; cg.c:504:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(4): Data Latency=1 Reg=$d1
SU(4):   STPDi renamable $d1, renamable $d0, $sp, 2, debug-location !904 :: (store 8 into %ir.rho0), (store 8 into %ir.alpha); cg.c:509:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d1
    SU(0): Data Latency=4 Reg=$d0
SU(5):   STURWi $wzr, $fp, -60, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d0 = LDRDui $sp, 4, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDRDui $sp, 6, debug-location !900 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STRXui $xzr, $sp, 4, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STURWi $wzr, $fp, -60, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !901; cg.c:504:21
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STPDi renamable $d1, renamable $d0, $sp, 2, debug-location !904 :: (store 8 into %ir.rho0), (store 8 into %ir.alpha); cg.c:509:14
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   renamable $d0 = LDRDui $sp, 4, debug-location !899 :: (dereferenceable load 8 from %ir.rho); cg.c:504:17
SU(1):   renamable $d1 = LDRDui $sp, 6, debug-location !900 :: (dereferenceable load 8 from %ir.d); cg.c:504:23
SU(2):   STRXui $xzr, $sp, 4, debug-location !905 :: (store 8 into %ir.rho); cg.c:515:13
SU(5):   STURWi $wzr, $fp, -60, debug-location !906 :: (store 4 into %ir.j); cg.c:516:16
SU(3):   renamable $d1 = FDIVDrr renamable $d0, renamable $d1, debug-location !901; cg.c:504:21
SU(4):   STPDi renamable $d1, renamable $d0, $sp, 2, debug-location !904 :: (store 8 into %ir.rho0), (store 8 into %ir.alpha); cg.c:509:14

Fixup kills for %bb.17
********** MI Scheduling **********
conj_grad:%bb.18 for.cond69
  From: renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
    To: Bcc 10, %bb.20, implicit $nzcv, debug-location !916; cg.c:516:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w0
SU(1):   renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !912 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w1
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w2
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !913; cg.c:516:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w0
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !914; cg.c:516:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w0
  Successors:
    SU(5): Data Latency=1 Reg=$w0
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !916; cg.c:516:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w0
    SU(2): Data Latency=4 Reg=$w2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.20, implicit $nzcv, debug-location !916; cg.c:516:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !912 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w2 = LDURWi $fp, -60, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !913; cg.c:516:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !914; cg.c:516:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !916; cg.c:516:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !911 :: (dereferenceable load 4 from @lastcol); cg.c:516:25
SU(1):   renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !912 :: (dereferenceable load 4 from @firstcol); cg.c:516:35
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !909 :: (dereferenceable load 4 from %ir.j); cg.c:516:21
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !913; cg.c:516:33
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !914; cg.c:516:44
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !916; cg.c:516:9

Fixup kills for %bb.18
********** MI Scheduling **********
conj_grad:%bb.19 for.body73
  From: renamable $x0 = LDURSWi $fp, -60, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
    To: B %bb.18
 RegionInstrs: 22
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDURSWi $fp, -60, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 29
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x0
    SU(21): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(1):   renamable $x1 = LDURXi $fp, -56, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 28
  Successors:
    SU(11): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x1
    SU(18): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(2):   renamable $x2 = LDURXi $fp, -40, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(11): Out  Latency=1
    SU(9): Data Latency=4 Reg=$x2
    SU(6): Data Latency=4 Reg=$x2
    SU(18): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(3):   renamable $d0 = LDRDui $sp, 2, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 24
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(18): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(4):   renamable $x0 = UBFMXri renamable $x0, 61, 60, debug-location !917; cg.c:517:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 25
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
    SU(6): Data Latency=1 Reg=$x0
    SU(5): Data Latency=1 Reg=$x0
SU(5):   renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 24
  Predecessors:
    SU(4): Data Latency=1 Reg=$x0
    SU(1): Data Latency=4 Reg=$x1
  Successors:
    SU(14): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d1
    SU(11): Anti Latency=0
    SU(10): Anti Latency=0
    SU(21): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  # preds left       : 2
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 23
  Predecessors:
    SU(4): Data Latency=1 Reg=$x0
    SU(2): Data Latency=4 Reg=$x2
  Successors:
    SU(15): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d2
    SU(11): Anti Latency=0
    SU(10): Anti Latency=0
    SU(21): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !923; cg.c:517:33
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 20
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(14): Anti Latency=0
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !924; cg.c:517:25
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 19
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
  Successors:
    SU(13): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
    SU(15): Anti Latency=0
SU(9):   STRDroX renamable $d0, renamable $x2, renamable $x0, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  # preds left       : 9
  # succs left       : 11
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 18
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=1 Reg=$x0
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=4 Reg=$x2
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Anti Latency=0
    SU(11): Anti Latency=0
    SU(10): Anti Latency=0
    SU(21): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(19): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(15): Ord  Latency=1 Memory
    SU(14): Ord  Latency=1 Memory
    SU(13): Ord  Latency=1 Memory
    SU(11): Ord  Latency=1 Memory
SU(10):   renamable $x0 = LDURSWi $fp, -60, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 17
  Predecessors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    SU(12): Out  Latency=1
    SU(12): Data Latency=4 Reg=$x0
    SU(21): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
SU(11):   renamable $x1, renamable $x2 = LDPXi $fp, 2, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16), (dereferenceable load 8 from %ir.r.addr); cg.c:518:35
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 16
  Predecessors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(2): Out  Latency=1
    SU(1): Out  Latency=1
  Successors:
    SU(14): Data Latency=4 Reg=$x1
    SU(18): Data Latency=4 Reg=$x2
    SU(15): Data Latency=4 Reg=$x2
    SU(18): Ord  Latency=0 Memory
SU(12):   renamable $x0 = UBFMXri renamable $x0, 61, 60, debug-location !928; cg.c:518:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 13
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$x0
  Successors:
    SU(19): Out  Latency=1
    SU(18): Data Latency=1 Reg=$x0
    SU(15): Data Latency=1 Reg=$x0
    SU(14): Data Latency=1 Reg=$x0
SU(13):   renamable $d0 = LDRDui $sp, 2, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 12
  Predecessors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
    SU(8): Out  Latency=1
  Successors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=4 Reg=$d0
    SU(18): Ord  Latency=0 Memory
SU(14):   renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 12
  Predecessors:
    SU(12): Data Latency=1 Reg=$x0
    SU(11): Data Latency=4 Reg=$x1
    SU(9): Ord  Latency=1 Memory
    SU(7): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(16): Data Latency=4 Reg=$d1
    SU(19): Anti Latency=0
    SU(21): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
SU(15):   renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 11
  Predecessors:
    SU(12): Data Latency=1 Reg=$x0
    SU(11): Data Latency=4 Reg=$x2
    SU(9): Ord  Latency=1 Memory
    SU(8): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(17): Data Latency=4 Reg=$d2
    SU(19): Anti Latency=0
    SU(21): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
SU(16):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !933; cg.c:518:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 8
  Predecessors:
    SU(14): Data Latency=4 Reg=$d1
    SU(13): Out  Latency=1
    SU(13): Data Latency=4 Reg=$d0
  Successors:
    SU(17): Out  Latency=1
    SU(17): Data Latency=1 Reg=$d0
SU(17):   renamable $d0 = FSUBDrr renamable $d2, renamable $d0, debug-location !934; cg.c:518:25
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 7
  Predecessors:
    SU(16): Out  Latency=1
    SU(16): Data Latency=1 Reg=$d0
    SU(15): Data Latency=4 Reg=$d2
  Successors:
    SU(18): Data Latency=1 Reg=$d0
SU(18):   STRDroX renamable $d0, renamable $x2, renamable $x0, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  # preds left       : 15
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 6
  Predecessors:
    SU(17): Data Latency=1 Reg=$d0
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(12): Data Latency=1 Reg=$x0
    SU(11): Data Latency=4 Reg=$x2
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(19): Anti Latency=0
    SU(21): Ord  Latency=0 Memory
    SU(19): Ord  Latency=1 Memory
SU(19):   renamable $w0 = LDURWi $fp, -60, debug-location !938 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 24
  Height             : 5
  Predecessors:
    SU(18): Anti Latency=0
    SU(18): Ord  Latency=1 Memory
    SU(15): Anti Latency=0
    SU(14): Anti Latency=0
    SU(12): Out  Latency=1
    SU(9): Ord  Latency=1 Memory
  Successors:
    SU(20): Out  Latency=1
    SU(20): Data Latency=4 Reg=$w0
    SU(21): Ord  Latency=0 Memory
SU(20):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !938; cg.c:516:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 28
  Height             : 1
  Predecessors:
    SU(19): Out  Latency=1
    SU(19): Data Latency=4 Reg=$w0
  Successors:
    SU(21): Data Latency=1 Reg=$w0
SU(21):   STURWi renamable $w0, $fp, -60, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50
  # preds left       : 10
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 29
  Height             : 0
  Predecessors:
    SU(20): Data Latency=1 Reg=$w0
    SU(19): Ord  Latency=0 Memory
    SU(18): Ord  Latency=0 Memory
    SU(15): Ord  Latency=0 Memory
    SU(14): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.18
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 29
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 29
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDURSWi $fp, -60, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
  Ready @0c
  TopQ.A BotLatency SU(0) 29c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 29
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  28 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x1 = LDURXi $fp, -56, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 29
  Cand SU(3) ORDER                              
  Cand SU(2) TOP-PATH                  27 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x2 = LDURXi $fp, -40, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = LDRDui $sp, 2, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x0 = UBFMXri renamable $x0, 61, 60, debug-location !917; cg.c:517:20
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !923; cg.c:517:33
  Ready @9c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !924; cg.c:517:25
  Ready @10c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRDroX renamable $d0, renamable $x2, renamable $x0, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
  Ready @11c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 13 11 
  TopQ.A RemainingLatency 0 + 12c > CritPath 29
  Cand SU(10) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(10) renamable $x0 = LDURSWi $fp, -60, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
  Ready @12c
  TopQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 11 13 
  TopQ.A RemainingLatency 0 + 13c > CritPath 29
  Cand SU(11) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(11) renamable $x1, renamable $x2 = LDPXi $fp, 2, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16), (dereferenceable load 8 from %ir.r.addr); cg.c:518:35
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 12 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) renamable $d0 = LDRDui $sp, 2, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
  Ready @14c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 13
  Executed: 15c
  Critical: 13c, 13 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) renamable $x0 = UBFMXri renamable $x0, 61, 60, debug-location !928; cg.c:518:20
  Ready @16c
  TopQ.A TopLatency SU(12) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 14
  Executed: 17c
  Critical: 14c, 14 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 14 
  TopQ.A RemainingLatency 0 + 17c > CritPath 29
  Cand SU(15) ORDER                              
  Cand SU(14) TOP-PATH                  12 cycles 
Pick Top TOP-PATH  
Scheduling SU(14) renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
  Ready @17c
  TopQ.A TopLatency SU(14) 17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 15
  Executed: 18c
  Critical: 15c, 15 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 16 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 16
  Executed: 19c
  Critical: 16c, 16 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 21 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 16 
Pick Top ONLY1     
Scheduling SU(16) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !933; cg.c:518:33
  Ready @21c
  TopQ.A TopLatency SU(16) 21c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 17
  Executed: 22c
  Critical: 17c, 17 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 17 
Pick Top ONLY1     
Scheduling SU(17) renamable $d0 = FSUBDrr renamable $d2, renamable $d0, debug-location !934; cg.c:518:25
  Ready @22c
  TopQ.A TopLatency SU(17) 22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 18
  Executed: 23c
  Critical: 18c, 18 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 18 
Pick Top ONLY1     
Scheduling SU(18) STRDroX renamable $d0, renamable $x2, renamable $x0, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
  Ready @23c
  TopQ.A TopLatency SU(18) 23c
  *** Max MOps 1 at cycle 23
Cycle: 24 TopQ.A
TopQ.A @24c
  Retired: 19
  Executed: 24c
  Critical: 19c, 19 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 19 
Pick Top ONLY1     
Scheduling SU(19) renamable $w0 = LDURWi $fp, -60, debug-location !938 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
  Ready @24c
  TopQ.A TopLatency SU(19) 24c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 20
  Executed: 25c
  Critical: 20c, 20 MOps
  ExpectedLatency: 24c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 28 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 20 
Pick Top ONLY1     
Scheduling SU(20) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !938; cg.c:516:50
  Ready @28c
  TopQ.A TopLatency SU(20) 28c
  *** Max MOps 1 at cycle 28
Cycle: 29 TopQ.A
TopQ.A @29c
  Retired: 21
  Executed: 29c
  Critical: 21c, 21 MOps
  ExpectedLatency: 28c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 21 
Pick Top ONLY1     
Scheduling SU(21) STURWi renamable $w0, $fp, -60, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50
  Ready @29c
  TopQ.A TopLatency SU(21) 29c
  *** Max MOps 1 at cycle 29
Cycle: 30 TopQ.A
TopQ.A @30c
  Retired: 22
  Executed: 30c
  Critical: 22c, 22 MOps
  ExpectedLatency: 29c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $x0 = LDURSWi $fp, -60, debug-location !919 :: (dereferenceable load 4 from %ir.j); cg.c:517:22
SU(1):   renamable $x1 = LDURXi $fp, -56, debug-location !921 :: (dereferenceable load 8 from %ir.p.addr); cg.c:517:35
SU(2):   renamable $x2 = LDURXi $fp, -40, debug-location !917 :: (dereferenceable load 8 from %ir.z.addr); cg.c:517:20
SU(3):   renamable $d0 = LDRDui $sp, 2, debug-location !920 :: (dereferenceable load 8 from %ir.alpha); cg.c:517:27
SU(4):   renamable $x0 = UBFMXri renamable $x0, 61, 60, debug-location !917; cg.c:517:20
SU(5):   renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !921 :: (load 8 from %ir.arrayidx77); cg.c:517:35
SU(6):   renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !917 :: (load 8 from %ir.arrayidx75); cg.c:517:20
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !923; cg.c:517:33
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !924; cg.c:517:25
SU(9):   STRDroX renamable $d0, renamable $x2, renamable $x0, 0, 0, debug-location !927 :: (store 8 into %ir.arrayidx81); cg.c:517:18
SU(10):   renamable $x0 = LDURSWi $fp, -60, debug-location !929 :: (dereferenceable load 4 from %ir.j); cg.c:518:22
SU(11):   renamable $x1, renamable $x2 = LDPXi $fp, 2, debug-location !931 :: (dereferenceable load 8 from %ir.q.addr, align 16), (dereferenceable load 8 from %ir.r.addr); cg.c:518:35
SU(13):   renamable $d0 = LDRDui $sp, 2, debug-location !930 :: (dereferenceable load 8 from %ir.alpha); cg.c:518:27
SU(12):   renamable $x0 = UBFMXri renamable $x0, 61, 60, debug-location !928; cg.c:518:20
SU(14):   renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !931 :: (load 8 from %ir.arrayidx85); cg.c:518:35
SU(15):   renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !928 :: (load 8 from %ir.arrayidx83); cg.c:518:20
SU(16):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !933; cg.c:518:33
SU(17):   renamable $d0 = FSUBDrr renamable $d2, renamable $d0, debug-location !934; cg.c:518:25
SU(18):   STRDroX renamable $d0, renamable $x2, renamable $x0, 0, 0, debug-location !937 :: (store 8 into %ir.arrayidx89); cg.c:518:18
SU(19):   renamable $w0 = LDURWi $fp, -60, debug-location !938 :: (dereferenceable load 4 from %ir.j); cg.c:516:50
SU(20):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !938; cg.c:516:50
SU(21):   STURWi renamable $w0, $fp, -60, debug-location !938 :: (store 4 into %ir.j); cg.c:516:50

Fixup kills for %bb.19
Fixup kills for %bb.20
********** MI Scheduling **********
conj_grad:%bb.21 for.cond93
  From: renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
    To: Bcc 10, %bb.23, implicit $nzcv, debug-location !952; cg.c:526:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w0
SU(1):   renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !948 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w1
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w2
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !949; cg.c:526:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w0
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !950; cg.c:526:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w0
  Successors:
    SU(5): Data Latency=1 Reg=$w0
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !952; cg.c:526:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w0
    SU(2): Data Latency=4 Reg=$w2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.23, implicit $nzcv, debug-location !952; cg.c:526:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !948 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w2 = LDURWi $fp, -60, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !949; cg.c:526:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !950; cg.c:526:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !952; cg.c:526:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !947 :: (dereferenceable load 4 from @lastcol); cg.c:526:25
SU(1):   renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !948 :: (dereferenceable load 4 from @firstcol); cg.c:526:35
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !945 :: (dereferenceable load 4 from %ir.j); cg.c:526:21
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !949; cg.c:526:33
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !950; cg.c:526:44
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !952; cg.c:526:9

Fixup kills for %bb.21
********** MI Scheduling **********
conj_grad:%bb.22 for.body97
  From: renamable $x0 = LDRXui $fp, 3, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
    To: B %bb.21
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDRXui $fp, 3, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x0
SU(1):   renamable $x1 = LDURSWi $fp, -60, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$w1
    SU(4): Data Latency=0 Reg=$x1
    SU(2): Data Latency=4 Reg=$x1
    SU(8): Ord  Latency=0 Memory
SU(2):   renamable $d0 = LDRDroX renamable $x0, renamable $x1, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x1
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(4): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(3):   renamable $d1 = LDRDui $sp, 4, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=$d1
    SU(7): Ord  Latency=0 Memory
SU(4):   renamable $w0 = nsw ADDWri renamable $w1, 1, 0, implicit $x1, debug-location !962; cg.c:526:50
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Data Latency=4 Reg=$w1
    SU(1): Data Latency=0 Reg=$x1
    SU(0): Out  Latency=1
  Successors:
    SU(8): Data Latency=1 Reg=$w0
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !959; cg.c:527:30
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
SU(6):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !960; cg.c:527:23
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$d0
    SU(3): Data Latency=4 Reg=$d1
  Successors:
    SU(7): Data Latency=1 Reg=$d0
SU(7):   STRDui renamable $d0, $sp, 4, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(8):   STURWi renamable $w0, $fp, -60, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w0
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDRXui $fp, 3, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x1 = LDURSWi $fp, -60, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d1 = LDRDui $sp, 4, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x0, renamable $x1, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w0 = nsw ADDWri renamable $w1, 1, 0, implicit $x1, debug-location !962; cg.c:526:50
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STURWi renamable $w0, $fp, -60, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
  Ready @7c
  TopQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !959; cg.c:527:30
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !960; cg.c:527:23
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRDui renamable $d0, $sp, 4, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.22 ***
SU(0):   renamable $x0 = LDRXui $fp, 3, debug-location !955 :: (dereferenceable load 8 from %ir.r.addr); cg.c:527:25
SU(1):   renamable $x1 = LDURSWi $fp, -60, debug-location !956 :: (dereferenceable load 4 from %ir.j); cg.c:527:27
SU(3):   renamable $d1 = LDRDui $sp, 4, debug-location !953 :: (dereferenceable load 8 from %ir.rho); cg.c:527:19
SU(2):   renamable $d0 = LDRDroX renamable $x0, renamable $x1, 0, 1, debug-location !955 :: (load 8 from %ir.arrayidx101); cg.c:527:25
SU(4):   renamable $w0 = nsw ADDWri renamable $w1, 1, 0, implicit $x1, debug-location !962; cg.c:526:50
SU(8):   STURWi renamable $w0, $fp, -60, debug-location !962 :: (store 4 into %ir.j); cg.c:526:50
SU(5):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !959; cg.c:527:30
SU(6):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !960; cg.c:527:23
SU(7):   STRDui renamable $d0, $sp, 4, debug-location !961 :: (store 8 into %ir.rho); cg.c:527:17

Fixup kills for %bb.22
********** MI Scheduling **********
conj_grad:%bb.23 for.end106
  From: renamable $d1, renamable $d0 = LDPDi $sp, 3, debug-location !966 :: (dereferenceable load 8 from %ir.rho), (dereferenceable load 8 from %ir.rho0); cg.c:533:16
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1, renamable $d0 = LDPDi $sp, 3, debug-location !966 :: (dereferenceable load 8 from %ir.rho), (dereferenceable load 8 from %ir.rho0); cg.c:533:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$d1
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d0
SU(1):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !968; cg.c:533:20
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(2): Data Latency=1 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 1, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
SU(3):   STURWi $wzr, $fp, -60, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $d1, renamable $d0 = LDPDi $sp, 3, debug-location !966 :: (dereferenceable load 8 from %ir.rho), (dereferenceable load 8 from %ir.rho0); cg.c:533:16
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 1 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STURWi $wzr, $fp, -60, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !968; cg.c:533:20
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 1, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $d1, renamable $d0 = LDPDi $sp, 3, debug-location !966 :: (dereferenceable load 8 from %ir.rho), (dereferenceable load 8 from %ir.rho0); cg.c:533:16
SU(3):   STURWi $wzr, $fp, -60, debug-location !970 :: (store 4 into %ir.j); cg.c:538:16
SU(1):   renamable $d0 = FDIVDrr renamable $d0, renamable $d1, debug-location !968; cg.c:533:20
SU(2):   STRDui renamable $d0, $sp, 1, debug-location !969 :: (store 8 into %ir.beta); cg.c:533:14

Fixup kills for %bb.23
********** MI Scheduling **********
conj_grad:%bb.24 for.cond108
  From: renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
    To: Bcc 10, %bb.26, implicit $nzcv, debug-location !980; cg.c:538:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w0
SU(1):   renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !976 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w1
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w2
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !977; cg.c:538:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w0
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !978; cg.c:538:44
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w0
  Successors:
    SU(5): Data Latency=1 Reg=$w0
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !980; cg.c:538:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w0
    SU(2): Data Latency=4 Reg=$w2
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.26, implicit $nzcv, debug-location !980; cg.c:538:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !976 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w2 = LDURWi $fp, -60, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !977; cg.c:538:33
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !978; cg.c:538:44
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !980; cg.c:538:9
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $w0 = LDRWui renamable $x17, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !975 :: (dereferenceable load 4 from @lastcol); cg.c:538:25
SU(1):   renamable $w1 = LDRWui renamable $x18, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !976 :: (dereferenceable load 4 from @firstcol); cg.c:538:35
SU(2):   renamable $w2 = LDURWi $fp, -60, debug-location !973 :: (dereferenceable load 4 from %ir.j); cg.c:538:21
SU(3):   $w0 = SUBWrs renamable $w0, renamable $w1, 0, debug-location !977; cg.c:538:33
SU(4):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !978; cg.c:538:44
SU(5):   $wzr = SUBSWrs renamable $w2, renamable $w0, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !980; cg.c:538:9

Fixup kills for %bb.24
********** MI Scheduling **********
conj_grad:%bb.25 for.body112
  From: renamable $x0 = LDURSWi $fp, -60, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
    To: B %bb.24
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0 = LDURSWi $fp, -60, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x0
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(1):   renamable $x1 = LDURXi $fp, -56, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(9): Data Latency=4 Reg=$x1
    SU(5): Data Latency=4 Reg=$x1
    SU(9): Ord  Latency=0 Memory
SU(2):   renamable $x2 = LDRXui $fp, 3, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=$x2
    SU(9): Ord  Latency=0 Memory
SU(3):   renamable $x0 = UBFMXri renamable $x0, 61, 60, debug-location !981; cg.c:539:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x0
    SU(6): Data Latency=1 Reg=$x0
    SU(5): Data Latency=1 Reg=$x0
SU(4):   renamable $d0 = LDRDui $sp, 1, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 12
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$d0
    SU(9): Ord  Latency=0 Memory
SU(5):   renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(3): Data Latency=1 Reg=$x0
    SU(1): Data Latency=4 Reg=$x1
  Successors:
    SU(7): Data Latency=4 Reg=$d1
    SU(10): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(3): Data Latency=1 Reg=$x0
    SU(2): Data Latency=4 Reg=$x2
  Successors:
    SU(8): Data Latency=4 Reg=$d2
    SU(10): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !987; cg.c:539:32
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 8
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !988; cg.c:539:25
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 7
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
  Successors:
    SU(9): Data Latency=1 Reg=$d0
SU(9):   STRDroX renamable $d0, renamable $x1, renamable $x0, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  # preds left       : 9
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 6
  Predecessors:
    SU(8): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=$x0
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x1
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
SU(10):   renamable $w0 = LDURWi $fp, -60, debug-location !992 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w0
    SU(12): Ord  Latency=0 Memory
SU(11):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !992; cg.c:538:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w0
  Successors:
    SU(12): Data Latency=1 Reg=$w0
SU(12):   STURWi renamable $w0, $fp, -60, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$w0
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.24
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 17
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 17
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0 = LDURSWi $fp, -60, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
  Ready @0c
  TopQ.A BotLatency SU(0) 17c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 17
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  16 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x1 = LDURXi $fp, -56, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 17
  Cand SU(4) ORDER                              
  Cand SU(2) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x2 = LDRXui $fp, 3, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = LDRDui $sp, 1, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x0 = UBFMXri renamable $x0, 61, 60, debug-location !981; cg.c:539:20
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !987; cg.c:539:32
  Ready @9c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !988; cg.c:539:25
  Ready @10c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRDroX renamable $d0, renamable $x1, renamable $x0, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
  Ready @11c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w0 = LDURWi $fp, -60, debug-location !992 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
  Ready @12c
  TopQ.A TopLatency SU(10) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !992; cg.c:538:50
  Ready @16c
  TopQ.A TopLatency SU(11) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STURWi renamable $w0, $fp, -60, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50
  Ready @17c
  TopQ.A TopLatency SU(12) 17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 13
  Executed: 18c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $x0 = LDURSWi $fp, -60, debug-location !983 :: (dereferenceable load 4 from %ir.j); cg.c:539:22
SU(1):   renamable $x1 = LDURXi $fp, -56, debug-location !985 :: (dereferenceable load 8 from %ir.p.addr); cg.c:539:34
SU(2):   renamable $x2 = LDRXui $fp, 3, debug-location !981 :: (dereferenceable load 8 from %ir.r.addr); cg.c:539:20
SU(4):   renamable $d0 = LDRDui $sp, 1, debug-location !984 :: (dereferenceable load 8 from %ir.beta); cg.c:539:27
SU(3):   renamable $x0 = UBFMXri renamable $x0, 61, 60, debug-location !981; cg.c:539:20
SU(5):   renamable $d1 = LDRDroX renamable $x1, renamable $x0, 0, 0, debug-location !985 :: (load 8 from %ir.arrayidx116); cg.c:539:34
SU(6):   renamable $d2 = LDRDroX renamable $x2, renamable $x0, 0, 0, debug-location !981 :: (load 8 from %ir.arrayidx114); cg.c:539:20
SU(7):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !987; cg.c:539:32
SU(8):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !988; cg.c:539:25
SU(9):   STRDroX renamable $d0, renamable $x1, renamable $x0, 0, 0, debug-location !991 :: (store 8 into %ir.arrayidx120); cg.c:539:18
SU(10):   renamable $w0 = LDURWi $fp, -60, debug-location !992 :: (dereferenceable load 4 from %ir.j); cg.c:538:50
SU(11):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !992; cg.c:538:50
SU(12):   STURWi renamable $w0, $fp, -60, debug-location !992 :: (store 4 into %ir.j); cg.c:538:50

Fixup kills for %bb.25
********** MI Scheduling **********
conj_grad:%bb.26 for.inc124
  From: renamable $w0 = LDRWui $sp, 15, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
    To: B %bb.7
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w0 = LDRWui $sp, 15, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w0
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !996; cg.c:434:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w0
  Successors:
    SU(2): Data Latency=1 Reg=$w0
SU(2):   STRWui renamable $w0, $sp, 15, debug-location !996 :: (store 4 into %ir.cgit); cg.c:434:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w0
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.7
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w0 = LDRWui $sp, 15, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !996; cg.c:434:41
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w0, $sp, 15, debug-location !996 :: (store 4 into %ir.cgit); cg.c:434:41
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $w0 = LDRWui $sp, 15, debug-location !996 :: (dereferenceable load 4 from %ir.cgit); cg.c:434:41
SU(1):   renamable $w0 = nsw ADDWri renamable $w0, 1, 0, debug-location !996; cg.c:434:41
SU(2):   STRWui renamable $w0, $sp, 15, debug-location !996 :: (store 4 into %ir.cgit); cg.c:434:41

Fixup kills for %bb.26
********** MI Scheduling **********
conj_grad:%bb.27 for.end126
  From: STRXui $xzr, $sp, 5, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRXui $xzr, $sp, 5, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURWi $wzr, $fp, -60, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @lastrow
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   renamable $x16 = ADRP target-flags(aarch64-page) @firstrow
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x8 = ADRP target-flags(aarch64-page) @lastrow
  Ready @0c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x16 = ADRP target-flags(aarch64-page) @firstrow
  Ready @1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRXui $xzr, $sp, 5, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STURWi $wzr, $fp, -60, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(2):   renamable $x8 = ADRP target-flags(aarch64-page) @lastrow
SU(3):   renamable $x16 = ADRP target-flags(aarch64-page) @firstrow
SU(0):   STRXui $xzr, $sp, 5, debug-location !1000 :: (store 8 into %ir.sum); cg.c:548:9
SU(1):   STURWi $wzr, $fp, -60, debug-location !1001 :: (store 4 into %ir.j); cg.c:549:12

Fixup kills for %bb.27
********** MI Scheduling **********
conj_grad:%bb.28 for.cond127
  From: renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
    To: Bcc 10, %bb.33, implicit $nzcv, debug-location !1011; cg.c:549:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w17
SU(1):   renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !1007 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w18
SU(2):   renamable $w0 = LDURWi $fp, -60, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w0
SU(3):   $w17 = SUBWrs renamable $w17, renamable $w18, 0, debug-location !1008; cg.c:549:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w18
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w17
SU(4):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1009; cg.c:549:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w17
  Successors:
    SU(5): Data Latency=1 Reg=$w17
SU(5):   $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1011; cg.c:549:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w17
    SU(2): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.33, implicit $nzcv, debug-location !1011; cg.c:549:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !1007 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w0 = LDURWi $fp, -60, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w17 = SUBWrs renamable $w17, renamable $w18, 0, debug-location !1008; cg.c:549:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1009; cg.c:549:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1011; cg.c:549:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastrow, debug-location !1006 :: (dereferenceable load 4 from @lastrow); cg.c:549:21
SU(1):   renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstrow, debug-location !1007 :: (dereferenceable load 4 from @firstrow); cg.c:549:31
SU(2):   renamable $w0 = LDURWi $fp, -60, debug-location !1004 :: (dereferenceable load 4 from %ir.j); cg.c:549:17
SU(3):   $w17 = SUBWrs renamable $w17, renamable $w18, 0, debug-location !1008; cg.c:549:29
SU(4):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1009; cg.c:549:40
SU(5):   $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1011; cg.c:549:5

Fixup kills for %bb.28
********** MI Scheduling **********
conj_grad:%bb.29 for.body131
  From: renamable $x17 = LDURXi $fp, -24, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDURXi $fp, -24, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x17
SU(1):   renamable $x18 = LDURSWi $fp, -60, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=$x18
SU(2):   STRXui $xzr, $sp, 6, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w17 = LDRWroX renamable $x17, renamable $x18, 0, 1, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=$x18
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x17 = LDURXi $fp, -24, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x18 = LDURSWi $fp, -60, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXui $xzr, $sp, 6, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w17 = LDRWroX renamable $x17, renamable $x18, 0, 1, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   renamable $x17 = LDURXi $fp, -24, debug-location !1014 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:18
SU(1):   renamable $x18 = LDURSWi $fp, -60, debug-location !1016 :: (dereferenceable load 4 from %ir.j); cg.c:551:25
SU(2):   STRXui $xzr, $sp, 6, debug-location !1012 :: (store 8 into %ir.d); cg.c:550:11
SU(3):   renamable $w17 = LDRWroX renamable $x17, renamable $x18, 0, 1, debug-location !1014 :: (load 4 from %ir.arrayidx133); cg.c:551:18

Fixup kills for %bb.29
********** MI Scheduling **********
conj_grad:%bb.30 for.cond134
  From: STRWui killed renamable $w17, $sp, 16, debug-location !DILocation(line: 0, scope: !1015) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.32, implicit $nzcv, debug-location !1025; cg.c:551:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w17, $sp, 16, debug-location !DILocation(line: 0, scope: !1015) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
SU(1):   renamable $x17 = LDURXi $fp, -24, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x17
SU(2):   renamable $x18 = LDURSWi $fp, -60, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x18
SU(3):   renamable $w0 = LDRWui $sp, 16, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w0
SU(4):   renamable $x17 = ADDXrs renamable $x17, renamable $x18, 2, debug-location !1021; cg.c:551:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x18
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x17
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
SU(5):   renamable $w17 = LDRWui renamable $x17, 1, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x17
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w17
SU(6):   $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1025; cg.c:551:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w17
    SU(3): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.32, implicit $nzcv, debug-location !1025; cg.c:551:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui renamable $w17, $sp, 16, debug-location !DILocation(line: 0, scope: !1015) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x17 = LDURXi $fp, -24, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x18 = LDURSWi $fp, -60, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w0 = LDRWui $sp, 16, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x17 = ADDXrs renamable $x17, renamable $x18, 2, debug-location !1021; cg.c:551:33
  Ready @6c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w17 = LDRWui renamable $x17, 1, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:33
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1025; cg.c:551:9
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   STRWui renamable $w17, $sp, 16, debug-location !DILocation(line: 0, scope: !1015) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $x17 = LDURXi $fp, -24, debug-location !1021 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:551:33
SU(2):   renamable $x18 = LDURSWi $fp, -60, debug-location !1022 :: (dereferenceable load 4 from %ir.j); cg.c:551:40
SU(3):   renamable $w0 = LDRWui $sp, 16, debug-location !1019 :: (dereferenceable load 4 from %ir.k); cg.c:551:29
SU(4):   renamable $x17 = ADDXrs renamable $x17, renamable $x18, 2, debug-location !1021; cg.c:551:33
SU(5):   renamable $w17 = LDRWui renamable $x17, 1, debug-location !1021 :: (load 4 from %ir.arrayidx137); cg.c:551:33
SU(6):   $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1025; cg.c:551:9

Fixup kills for %bb.30
********** MI Scheduling **********
conj_grad:%bb.31 for.body139
  From: renamable $x17 = LDRSWui $sp, 16, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
    To: B %bb.30
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDRSWui $sp, 16, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w17
    SU(7): Data Latency=0 Reg=$x17
    SU(4): Data Latency=4 Reg=$x17
    SU(3): Data Latency=4 Reg=$x17
SU(1):   renamable $x18 = LDURXi $fp, -16, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x18
SU(2):   renamable $x0, renamable $x1 = LDPXi $fp, -6, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.z.addr); cg.c:552:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x0
    SU(5): Data Latency=4 Reg=$x1
SU(3):   renamable $x18 = LDRSWroX renamable $x18, renamable $x17, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x18
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(5): Data Latency=4 Reg=$x18
    SU(7): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
SU(4):   renamable $d0 = LDRDroX renamable $x0, renamable $x17, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x0
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d0
    SU(7): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
SU(5):   renamable $d1 = LDRDroX renamable $x1, renamable $x18, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 8
  Height             : 6
  Predecessors:
    SU(3): Data Latency=4 Reg=$x18
    SU(2): Data Latency=4 Reg=$x1
  Successors:
    SU(8): Data Latency=4 Reg=$d1
    SU(10): Ord  Latency=0 Memory
SU(6):   renamable $d2 = LDRDui $sp, 6, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=4 Reg=$d2
    SU(10): Ord  Latency=0 Memory
SU(7):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !1036; cg.c:551:49
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
    SU(0): Data Latency=0 Reg=$x17
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1033; cg.c:552:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 2
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=1 Reg=$d0
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !1034; cg.c:552:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$d0
    SU(6): Data Latency=4 Reg=$d2
  Successors:
    SU(10): Data Latency=1 Reg=$d0
SU(10):   STRDui renamable $d0, $sp, 6, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
ExitSU:   B %bb.30
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x17 = LDRSWui $sp, 16, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 14
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x18 = LDURXi $fp, -16, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
  Ready @1c
  TopQ.A BotLatency SU(1) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 14
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  10 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x0, renamable $x1 = LDPXi $fp, -6, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.z.addr); cg.c:552:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 4 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d2 = LDRDui $sp, 6, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x18 = LDRSWroX renamable $x18, renamable $x17, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d0 = LDRDroX renamable $x0, renamable $x17, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !1036; cg.c:551:49
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x1, renamable $x18, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
  Ready @9c
  TopQ.A TopLatency SU(5) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1033; cg.c:552:26
  Ready @13c
  TopQ.A TopLatency SU(8) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !1034; cg.c:552:19
  Ready @14c
  TopQ.A TopLatency SU(9) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRDui renamable $d0, $sp, 6, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15
  Ready @15c
  TopQ.A TopLatency SU(10) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $x17 = LDRSWui $sp, 16, debug-location !1029 :: (dereferenceable load 4 from %ir.k); cg.c:552:23
SU(1):   renamable $x18 = LDURXi $fp, -16, debug-location !1031 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:552:30
SU(2):   renamable $x0, renamable $x1 = LDPXi $fp, -6, debug-location !1028 :: (dereferenceable load 8 from %ir.a.addr), (dereferenceable load 8 from %ir.z.addr); cg.c:552:21
SU(6):   renamable $d2 = LDRDui $sp, 6, debug-location !1026 :: (dereferenceable load 8 from %ir.d); cg.c:552:17
SU(3):   renamable $x18 = LDRSWroX renamable $x18, renamable $x17, 0, 1, debug-location !1031 :: (load 4 from %ir.arrayidx143); cg.c:552:30
SU(4):   renamable $d0 = LDRDroX renamable $x0, renamable $x17, 0, 1, debug-location !1028 :: (load 8 from %ir.arrayidx141); cg.c:552:21
SU(7):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !1036; cg.c:551:49
SU(5):   renamable $d1 = LDRDroX renamable $x1, renamable $x18, 0, 1, debug-location !1030 :: (load 8 from %ir.arrayidx145); cg.c:552:28
SU(8):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1033; cg.c:552:26
SU(9):   renamable $d0 = FADDDrr renamable $d2, renamable $d0, debug-location !1034; cg.c:552:19
SU(10):   STRDui renamable $d0, $sp, 6, debug-location !1035 :: (store 8 into %ir.d); cg.c:552:15

Fixup kills for %bb.31
********** MI Scheduling **********
conj_grad:%bb.32 for.end150
  From: renamable $d0 = LDRDui $sp, 6, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
    To: B %bb.28
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 6, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=$d0
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x17 = LDRXui $fp, 3, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x17
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x18 = LDURSWi $fp, -60, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=$x18
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(3):   STRDroX renamable $d0, renamable $x17, renamable $x18, 0, 1, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  # preds left       : 6
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x18
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x17
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Anti Latency=0
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=1 Memory
SU(4):   renamable $w17 = LDURWi $fp, -60, debug-location !1044 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w17
    SU(6): Ord  Latency=0 Memory
SU(5):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1044; cg.c:549:46
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w17
  Successors:
    SU(6): Data Latency=1 Reg=$w17
SU(6):   STURWi renamable $w17, $fp, -60, debug-location !1044 :: (store 4 into %ir.j); cg.c:549:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=$w17
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.28
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 6, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x17 = LDRXui $fp, 3, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x18 = LDURSWi $fp, -60, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDroX renamable $d0, renamable $x17, renamable $x18, 0, 1, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w17 = LDURWi $fp, -60, debug-location !1044 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
  Ready @7c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1044; cg.c:549:46
  Ready @11c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STURWi renamable $w17, $fp, -60, debug-location !1044 :: (store 4 into %ir.j); cg.c:549:46
  Ready @12c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $d0 = LDRDui $sp, 6, debug-location !1040 :: (dereferenceable load 8 from %ir.d); cg.c:554:16
SU(1):   renamable $x17 = LDRXui $fp, 3, debug-location !1041 :: (dereferenceable load 8 from %ir.r.addr); cg.c:554:9
SU(2):   renamable $x18 = LDURSWi $fp, -60, debug-location !1042 :: (dereferenceable load 4 from %ir.j); cg.c:554:11
SU(3):   STRDroX renamable $d0, renamable $x17, renamable $x18, 0, 1, debug-location !1043 :: (store 8 into %ir.arrayidx152); cg.c:554:14
SU(4):   renamable $w17 = LDURWi $fp, -60, debug-location !1044 :: (dereferenceable load 4 from %ir.j); cg.c:549:46
SU(5):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1044; cg.c:549:46
SU(6):   STURWi renamable $w17, $fp, -60, debug-location !1044 :: (store 4 into %ir.j); cg.c:549:46

Fixup kills for %bb.32
********** MI Scheduling **********
conj_grad:%bb.33 for.end155
  From: STURWi $wzr, $fp, -60, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   STURWi $wzr, $fp, -60, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
  Ready @1c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STURWi $wzr, $fp, -60, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(1):   renamable $x8 = ADRP target-flags(aarch64-page) @lastcol
SU(2):   renamable $x16 = ADRP target-flags(aarch64-page) @firstcol
SU(0):   STURWi $wzr, $fp, -60, debug-location !1048 :: (store 4 into %ir.j); cg.c:560:12

Fixup kills for %bb.33
********** MI Scheduling **********
conj_grad:%bb.34 for.cond156
  From: renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
    To: Bcc 10, %bb.36, implicit $nzcv, debug-location !1058; cg.c:560:5
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w17
SU(1):   renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1054 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Data Latency=4 Reg=$w18
SU(2):   renamable $w0 = LDURWi $fp, -60, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w0
SU(3):   $w17 = SUBWrs renamable $w17, renamable $w18, 0, debug-location !1055; cg.c:560:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Data Latency=4 Reg=$w18
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$w17
SU(4):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1056; cg.c:560:40
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$w17
  Successors:
    SU(5): Data Latency=1 Reg=$w17
SU(5):   $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1058; cg.c:560:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w17
    SU(2): Data Latency=4 Reg=$w0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.36, implicit $nzcv, debug-location !1058; cg.c:560:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1054 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w0 = LDURWi $fp, -60, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w17 = SUBWrs renamable $w17, renamable $w18, 0, debug-location !1055; cg.c:560:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1056; cg.c:560:40
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1058; cg.c:560:5
  Ready @7c
  TopQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $w17 = LDRWui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @lastcol, debug-location !1053 :: (dereferenceable load 4 from @lastcol); cg.c:560:21
SU(1):   renamable $w18 = LDRWui renamable $x16, target-flags(aarch64-pageoff, aarch64-nc) @firstcol, debug-location !1054 :: (dereferenceable load 4 from @firstcol); cg.c:560:31
SU(2):   renamable $w0 = LDURWi $fp, -60, debug-location !1051 :: (dereferenceable load 4 from %ir.j); cg.c:560:17
SU(3):   $w17 = SUBWrs renamable $w17, renamable $w18, 0, debug-location !1055; cg.c:560:29
SU(4):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1056; cg.c:560:40
SU(5):   $wzr = SUBSWrs renamable $w0, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1058; cg.c:560:5

Fixup kills for %bb.34
********** MI Scheduling **********
conj_grad:%bb.35 for.body160
  From: renamable $x17 = LDURSWi $fp, -60, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
    To: B %bb.34
 RegionInstrs: 14
ScheduleDAGMI::schedule starting
SU(0):   renamable $x17 = LDURSWi $fp, -60, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w17
    SU(8): Data Latency=0 Reg=$x17
    SU(3): Data Latency=4 Reg=$x17
    SU(13): Ord  Latency=0 Memory
SU(1):   renamable $x18 = LDURXi $fp, -32, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(4): Data Latency=4 Reg=$x18
SU(2):   renamable $x0 = LDRXui $fp, 3, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 13
  Successors:
    SU(5): Data Latency=4 Reg=$x0
SU(3):   renamable $x1 = UBFMXri renamable $x17, 61, 60, debug-location !1059; cg.c:561:13
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(0): Data Latency=4 Reg=$x17
  Successors:
    SU(5): Data Latency=1 Reg=$x1
    SU(4): Data Latency=1 Reg=$x1
    SU(8): Anti Latency=0
SU(4):   renamable $d0 = LDRDroX renamable $x18, renamable $x1, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(3): Data Latency=1 Reg=$x1
    SU(1): Data Latency=4 Reg=$x18
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(5):   renamable $d1 = LDRDroX renamable $x0, renamable $x1, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(3): Data Latency=1 Reg=$x1
    SU(2): Data Latency=4 Reg=$x0
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d1
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !1064; cg.c:561:18
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(5): Data Latency=4 Reg=$d1
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d0
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d0
    SU(9): Data Latency=1 Reg=$d0
    SU(7): Anti Latency=0
SU(7):   renamable $d1 = LDRDui $sp, 5, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(6): Anti Latency=0
    SU(5): Out  Latency=1
  Successors:
    SU(11): Data Latency=4 Reg=$d1
    SU(12): Ord  Latency=0 Memory
SU(8):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !1072; cg.c:560:46
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w17
    SU(0): Data Latency=0 Reg=$x17
  Successors:
    SU(13): Data Latency=1 Reg=$w17
SU(9):   STRDui renamable $d0, $sp, 6, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(6): Data Latency=1 Reg=$d0
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(10): Anti Latency=0
SU(10):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !1069; cg.c:562:23
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 2
  Predecessors:
    SU(9): Anti Latency=0
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d0
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=1 Reg=$d0
SU(11):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !1070; cg.c:562:19
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=1 Reg=$d0
    SU(7): Data Latency=4 Reg=$d1
  Successors:
    SU(12): Data Latency=1 Reg=$d0
SU(12):   STRDui renamable $d0, $sp, 5, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$d0
    SU(7): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(13):   STURWi renamable $w17, $fp, -60, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$w17
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.34
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x17 = LDURSWi $fp, -60, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 14
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x18 = LDURXi $fp, -32, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x0 = LDRXui $fp, 3, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
  Ready @2c
  TopQ.A BotLatency SU(2) 13c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x1 = UBFMXri renamable $x17, 61, 60, debug-location !1059; cg.c:561:13
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 8 
  TopQ.A RemainingLatency 0 + 5c > CritPath 14
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d0 = LDRDroX renamable $x18, renamable $x1, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 14
  Cand SU(8) ORDER                              
  Cand SU(5) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d1 = LDRDroX renamable $x0, renamable $x1, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !1072; cg.c:560:46
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) STURWi renamable $w17, $fp, -60, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 8
  Executed: 9c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !1064; cg.c:561:18
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 9
  Executed: 11c
  Critical: 9c, 9 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 7 
  TopQ.A RemainingLatency 0 + 11c > CritPath 14
  Cand SU(9) ORDER                              
  Cand SU(7) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) renamable $d1 = LDRDui $sp, 5, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
  Ready @11c
  TopQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 10
  Executed: 12c
  Critical: 10c, 10 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRDui renamable $d0, $sp, 6, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
  Ready @12c
  TopQ.A TopLatency SU(9) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 11
  Executed: 13c
  Critical: 11c, 11 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !1069; cg.c:562:23
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 12
  Executed: 14c
  Critical: 12c, 12 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !1070; cg.c:562:19
  Ready @15c
  TopQ.A TopLatency SU(11) 13c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 13
  Executed: 16c
  Critical: 13c, 13 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRDui renamable $d0, $sp, 5, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13
  Ready @16c
  TopQ.A TopLatency SU(12) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 14
  Executed: 17c
  Critical: 14c, 14 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $x17 = LDURSWi $fp, -60, debug-location !1061 :: (dereferenceable load 4 from %ir.j); cg.c:561:15
SU(1):   renamable $x18 = LDURXi $fp, -32, debug-location !1059 :: (dereferenceable load 8 from %ir.x.addr); cg.c:561:13
SU(2):   renamable $x0 = LDRXui $fp, 3, debug-location !1062 :: (dereferenceable load 8 from %ir.r.addr); cg.c:561:20
SU(3):   renamable $x1 = UBFMXri renamable $x17, 61, 60, debug-location !1059; cg.c:561:13
SU(4):   renamable $d0 = LDRDroX renamable $x18, renamable $x1, 0, 0, debug-location !1059 :: (load 8 from %ir.arrayidx162); cg.c:561:13
SU(5):   renamable $d1 = LDRDroX renamable $x0, renamable $x1, 0, 0, debug-location !1062 :: (load 8 from %ir.arrayidx164); cg.c:561:20
SU(8):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, implicit $x17, debug-location !1072; cg.c:560:46
SU(13):   STURWi renamable $w17, $fp, -60, debug-location !1072 :: (store 4 into %ir.j); cg.c:560:46
SU(6):   renamable $d0 = FSUBDrr renamable $d0, renamable $d1, debug-location !1064; cg.c:561:18
SU(7):   renamable $d1 = LDRDui $sp, 5, debug-location !1066 :: (dereferenceable load 8 from %ir.sum); cg.c:562:15
SU(9):   STRDui renamable $d0, $sp, 6, debug-location !1065 :: (store 8 into %ir.d); cg.c:561:11
SU(10):   renamable $d0 = FMULDrr renamable $d0, renamable $d0, debug-location !1069; cg.c:562:23
SU(11):   renamable $d0 = FADDDrr renamable $d1, renamable $d0, debug-location !1070; cg.c:562:19
SU(12):   STRDui renamable $d0, $sp, 5, debug-location !1071 :: (store 8 into %ir.sum); cg.c:562:13

Fixup kills for %bb.35
********** MI Scheduling **********
conj_grad:%bb.36 for.end170
  From: renamable $d1 = LDRDui $sp, 5, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
    To: Bcc 7, %bb.38, implicit $nzcv, debug-location !1078; cg.c:565:6
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $d1 = LDRDui $sp, 5, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(1): Data Latency=4 Reg=$d1
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !1077; cg.c:565:14
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(2): Data Latency=1 Reg=$d0
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !1078; cg.c:565:6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$d0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 7, %bb.38, implicit $nzcv, debug-location !1078; cg.c:565:6
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $d1 = LDRDui $sp, 5, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d0 = FSQRTDr renamable $d1, debug-location !1077; cg.c:565:14
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !1078; cg.c:565:6
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $d1 = LDRDui $sp, 5, debug-location !1076 :: (dereferenceable load 8 from %ir.sum); cg.c:565:19
SU(1):   renamable $d0 = FSQRTDr renamable $d1, debug-location !1077; cg.c:565:14
SU(2):   FCMPDrr renamable $d0, renamable $d0, implicit-def $nzcv, debug-location !1078; cg.c:565:6

Fixup kills for %bb.36
********** MI Scheduling **********
conj_grad:%bb.37 call.sqrt
  From: $q0 = ORRv16i8 $q1, $q1, debug-location !1078; cg.c:565:6
    To: BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1078; cg.c:565:6
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !1078; cg.c:565:6
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(1):   STRDui renamable $d1, $sp, 0 :: (store 8 into %stack.19)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
ExitSU:   BL @sqrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1078; cg.c:565:6
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $q0 = ORRv16i8 $q1, $q1, debug-location !1078; cg.c:565:6
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d1, $sp, 0 :: (store 8 into %stack.19)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   $q0 = ORRv16i8 $q1, $q1, debug-location !1078; cg.c:565:6
SU(1):   STRDui renamable $d1, $sp, 0 :: (store 8 into %stack.19)

Fixup kills for %bb.37
********** MI Scheduling **********
conj_grad:%bb.38 for.end170.split
  From: renamable $x8 = LDRXui $fp, 4, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
    To: $sp = frame-destroy ADDXri $sp, 144, 0, debug-location !1080; cg.c:566:1
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $fp, 4, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(1): Data Latency=4 Reg=$x8
    SU(2): Anti Latency=0
    SU(1): Ord  Latency=0 Memory
SU(1):   STRDui renamable $d0, renamable $x8, 0, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(2): Ord  Latency=1 Memory
SU(2):   $fp, $lr = frame-destroy LDPXi $sp, 16, debug-location !1080 :: (load 8 from %stack.22), (load 8 from %stack.21); cg.c:566:1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(1): Ord  Latency=1 Memory
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 144, 0, debug-location !1080; cg.c:566:1
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $x8 = LDRXui $fp, 4, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRDui renamable $d0, renamable $x8, 0, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp, $lr = frame-destroy LDPXi $sp, 16, debug-location !1080 :: (load 8 from %stack.22), (load 8 from %stack.21); cg.c:566:1
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $x8 = LDRXui $fp, 4, debug-location !1078 :: (dereferenceable load 8 from %ir.rnorm.addr, align 16); cg.c:565:6
SU(1):   STRDui renamable $d0, renamable $x8, 0, debug-location !1079 :: (store 8 into %ir.158); cg.c:565:12
SU(2):   $fp, $lr = frame-destroy LDPXi $sp, 16, debug-location !1080 :: (load 8 from %stack.22), (load 8 from %stack.21); cg.c:566:1

Fixup kills for %bb.38
Before MISched:
# Machine code for function sprnvc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0, $w1 in %1, $w2 in %2, $x3 in %3, $x4 in %4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $w1, $w2, $x3, $x4
  %4:gpr64 = COPY $x4
  %3:gpr64 = COPY $x3
  %2:gpr32 = COPY $w2
  %1:gpr32 = COPY $w1
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
  STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
  STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  STRWui $wzr, %stack.5.nzv, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
  %9:gpr64temp = ADRP target-flags(aarch64-page) @amult
  %31:gpr32 = MOVi32imm 1

bb.1.while.cond:
; predecessors: %bb.0, %bb.2, %bb.8, %bb.9
  successors: %bb.2(0x7c000000), %bb.10(0x04000000); %bb.2(96.88%), %bb.10(3.12%)

  %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1105; cg.c:811:5
  Bcc 10, %bb.10, implicit killed $nzcv, debug-location !1105; cg.c:811:5
  B %bb.2, debug-location !1105; cg.c:811:5

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  %10:fpr64 = LDRDui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1109 :: (dereferenceable load 8 from @amult); cg.c:812:32
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1111; cg.c:812:18
  $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1111; cg.c:812:18
  $d0 = COPY %10:fpr64, debug-location !1111; cg.c:812:18
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !1111; cg.c:812:18
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1111; cg.c:812:18
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1112; cg.c:812:16
  PCN_STACKMAP 0, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %10:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1112 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:812:16
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1112; cg.c:812:16
  %12:fpr64 = COPY killed $d0, debug-location !1111; cg.c:812:18
  STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
  %13:fpr64 = LDRDui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1114; cg.c:817:18
  $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1114; cg.c:817:18
  $d0 = COPY %13:fpr64, debug-location !1114; cg.c:817:18
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit killed $d0, implicit-def $sp, implicit-def $d0, debug-location !1114; cg.c:817:18
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1114; cg.c:817:18
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1115; cg.c:817:16
  PCN_STACKMAP 1, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %13:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1115 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:817:16
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1115; cg.c:817:16
  %14:fpr64 = COPY killed $d0, debug-location !1114; cg.c:817:18
  STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
  %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1118; cg.c:818:13
  $d0 = COPY %14:fpr64, debug-location !1118; cg.c:818:13
  $w0 = COPY %15:gpr32, debug-location !1118; cg.c:818:13
  BL @icnvrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit $w0, implicit-def $sp, implicit-def $w8, debug-location !1118; cg.c:818:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1118; cg.c:818:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1119; cg.c:818:33
  PCN_STACKMAP 2, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %14:fpr64, %15:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1119 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:818:33
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1119; cg.c:818:33
  %16:gpr32sp = COPY killed $w8, debug-location !1118; cg.c:818:13
  %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1119; cg.c:818:33
  STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
  %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:819:13
  Bcc 12, %bb.1, implicit killed $nzcv, debug-location !1125; cg.c:819:13
  B %bb.3, debug-location !1125; cg.c:819:13

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.10.was_gen, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
  STRWui $wzr, %stack.6.ii, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17

bb.4.for.cond:
; predecessors: %bb.3, %bb.7
  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

  %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1133 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
  dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1135; cg.c:826:9
  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1135; cg.c:826:9
  B %bb.5, debug-location !1135; cg.c:826:9

bb.5.for.body:
; predecessors: %bb.4
  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

  %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
  %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1140 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1142; cg.c:827:17
  Bcc 1, %bb.7, implicit killed $nzcv, debug-location !1142; cg.c:827:17
  B %bb.6, debug-location !1142; cg.c:827:17

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  STRWui %31:gpr32, %stack.10.was_gen, 0, debug-location !1143 :: (store 4 into %ir.was_gen); cg.c:828:25
  B %bb.8, debug-location !1145; cg.c:829:17

bb.7.for.inc:
; predecessors: %bb.5
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1146; cg.c:826:34
  STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1146 :: (store 4 into %ir.ii); cg.c:826:34
  B %bb.4, debug-location !1147; cg.c:826:9

bb.8.for.end:
; predecessors: %bb.4, %bb.6
  successors: %bb.1(0x40000000), %bb.9(0x40000000); %bb.1(50.00%), %bb.9(50.00%)

  %32:gpr32 = LDRWui %stack.10.was_gen, 0, debug-location !1150 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
  CBNZW %32:gpr32, %bb.1, debug-location !1152; cg.c:832:13
  B %bb.9, debug-location !1152; cg.c:832:13

bb.9.if.end9:
; predecessors: %bb.8
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1161 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1162; cg.c:836:19
  STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13
  B %bb.1, debug-location !1105; cg.c:811:5

bb.10.while.end:
; predecessors: %bb.1

  RET_ReallyLR debug-location !1164; cg.c:838:1

# End machine code for function sprnvc.

********** MI Scheduling **********
sprnvc:%bb.0 entry
  From: %4:gpr64 = COPY $x4
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
GPR32=5
Live In: W0 W1 W2 W3 W4 
Live Out: %31 %9 
Live Thru: 
  LiveReg: %31
  LiveReg: %9
Top Pressure:
GPR32=5
Bottom Pressure:
GPR64temp=1
GPR32=2
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %4:gpr64 = COPY $x4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %3:gpr64 = COPY $x3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%3
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %2:gpr32 = COPY $w2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%2
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %1:gpr32 = COPY $w1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%2
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%3
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   STRWui $wzr, %stack.5.nzv, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   %9:gpr64temp = ADRP target-flags(aarch64-page) @amult
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(12):   %31:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 10 11 12 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %4:gpr64 = COPY $x4
Top Pressure:
GPR32=5
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 12 1 2 3 4 10 11 9 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %3:gpr64 = COPY $x3
Top Pressure:
GPR32=5
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 12 9 2 3 4 10 11 8 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %2:gpr32 = COPY $w2
Top Pressure:
GPR32=5
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 12 9 8 3 4 10 11 7 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(8) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %1:gpr32 = COPY $w1
Top Pressure:
GPR32=5
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 12 9 8 7 4 10 11 6 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %0:gpr32 = COPY $w0
Top Pressure:
GPR32=5
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 10 9 8 7 6 5 
Queue TopQ.P: 
Queue TopQ.A: 12 9 8 7 6 10 11 5 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(12) ORDER                              
  Cand SU(9) REG-MAX                            
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %31:gpr32 = MOVi32imm 1
Bottom Pressure:
GPR64temp=1
GPR32=1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 5 9 8 7 6 10 11 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) %9:gpr64temp = ADRP target-flags(aarch64-page) @amult
Bottom Pressure:

  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 10 9 8 7 
Queue TopQ.P: 
Queue TopQ.A: 5 9 8 7 6 10 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRWui $wzr, %stack.5.nzv, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
Bottom Pressure:

  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 9 8 
Queue TopQ.P: 
Queue TopQ.A: 5 9 8 7 6 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
Bottom Pressure:
GPR32=1
  LiveReg: %4
  UpdateRegP: SU(9) STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 8 
Queue TopQ.P: 
Queue TopQ.A: 5 6 8 7 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
Bottom Pressure:
GPR32=2
  LiveReg: %3
  UpdateRegP: SU(8) STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
              to 
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 7 
Queue TopQ.P: 
Queue TopQ.A: 5 6 7 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
Bottom Pressure:
GPR32=3
  LiveReg: %2
  UpdateRegP: SU(7) STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
              to 
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 6 
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  BotQ.A RemainingLatency 0 + 6c > CritPath 0
Picking from Bot:
  Cand SU(5) ORDER                              
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(5) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
GPR32=4
  LiveReg: %1
  UpdateRegP: SU(6) STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
Bottom Pressure:
GPR32=5
  LiveReg: %0
  UpdateRegP: SU(5) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
              to 
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %4:gpr64 = COPY $x4
SU(1):   %3:gpr64 = COPY $x3
SU(2):   %2:gpr32 = COPY $w2
SU(3):   %1:gpr32 = COPY $w1
SU(4):   %0:gpr32 = COPY $w0
SU(5):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
SU(6):   STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
SU(7):   STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
SU(8):   STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
SU(9):   STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
SU(10):   STRWui $wzr, %stack.5.nzv, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
SU(11):   %9:gpr64temp = ADRP target-flags(aarch64-page) @amult
SU(12):   %31:gpr32 = MOVi32imm 1

********** MI Scheduling **********
sprnvc:%bb.1 while.cond
  From: %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
    To: Bcc 10, %bb.10, implicit killed $nzcv, debug-location !1105; cg.c:811:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%6
  Single Issue       : false;
SU(1):   %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%7
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1105; cg.c:811:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%7
    SU(0): Data Latency=4 Reg=%6
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.10, implicit killed $nzcv, debug-location !1105; cg.c:811:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1105; cg.c:811:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
SU(1):   %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
SU(2):   dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1105; cg.c:811:5

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %16:gpr32sp = COPY killed $w8, debug-location !1118; cg.c:818:13
    To: Bcc 12, %bb.1, implicit killed $nzcv, debug-location !1125; cg.c:819:13
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %16:gpr32sp = COPY killed $w8, debug-location !1118; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=0 Reg=%16
  Single Issue       : false;
SU(1):   %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1119; cg.c:818:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Data Latency=0 Reg=%16
  Successors:
    SU(4): Data Latency=1 Reg=%17
    SU(2): Data Latency=1 Reg=%17
  Single Issue       : false;
SU(2):   STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%17
  Single Issue       : false;
SU(3):   %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:819:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%18
    SU(1): Data Latency=1 Reg=%17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 12, %bb.1, implicit killed $nzcv, debug-location !1125; cg.c:819:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:819:13
  Ready @1c
  BotQ.A TopLatency SU(4) 4c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1119; cg.c:818:33
  Ready @2c
  BotQ.A BotLatency SU(1) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %16:gpr32sp = COPY killed $w8, debug-location !1118; cg.c:818:13
  Ready @3c
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(3):   %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
SU(0):   %16:gpr32sp = COPY $w8, debug-location !1118; cg.c:818:13
SU(1):   %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1119; cg.c:818:33
SU(4):   dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:819:13
SU(2):   STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $d0 = COPY %14:fpr64, debug-location !1118; cg.c:818:13
    To: BL @icnvrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit $w0, implicit-def $sp, implicit-def $w8, debug-location !1118; cg.c:818:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $d0 = COPY %14:fpr64, debug-location !1118; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $w0 = COPY %15:gpr32, debug-location !1118; cg.c:818:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @icnvrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit killed $d0, implicit $w0, implicit-def $sp, implicit-def $w8, debug-location !1118; cg.c:818:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $w0 = COPY %15:gpr32, debug-location !1118; cg.c:818:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $d0 = COPY %14:fpr64, debug-location !1118; cg.c:818:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $d0 = COPY %14:fpr64, debug-location !1118; cg.c:818:13
SU(1):   $w0 = COPY %15:gpr32, debug-location !1118; cg.c:818:13

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %14:fpr64 = COPY killed $d0, debug-location !1114; cg.c:817:18
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1118; cg.c:818:13
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %14:fpr64 = COPY killed $d0, debug-location !1114; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(1):   STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(2):   %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1118; cg.c:818:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %14:fpr64 = COPY killed $d0, debug-location !1114; cg.c:817:18
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(2):   %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
SU(0):   %14:fpr64 = COPY $d0, debug-location !1114; cg.c:817:18
SU(1):   STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1114; cg.c:817:18
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1114; cg.c:817:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1114; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %13:fpr64, debug-location !1114; cg.c:817:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1114; cg.c:817:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %13:fpr64, debug-location !1114; cg.c:817:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1114; cg.c:817:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1114; cg.c:817:18
SU(1):   $d0 = COPY %13:fpr64, debug-location !1114; cg.c:817:18

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: %12:fpr64 = COPY $d0, debug-location !1111; cg.c:812:18
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1114; cg.c:817:18
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %12:fpr64 = COPY $d0, debug-location !1111; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%12
  Single Issue       : false;
SU(1):   STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%12
  Single Issue       : false;
SU(2):   %13:fpr64 = LDRDui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1114; cg.c:817:18
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:fpr64 = COPY $d0, debug-location !1111; cg.c:812:18
  Ready @1c
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 2 BotQ.A
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %13:fpr64 = LDRDui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 2
  Executed: 4c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(2):   %13:fpr64 = LDRDui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
SU(0):   %12:fpr64 = COPY $d0, debug-location !1111; cg.c:812:18
SU(1):   STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1111; cg.c:812:18
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1111; cg.c:812:18
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1111; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $d0 = COPY %10:fpr64, debug-location !1111; cg.c:812:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1111; cg.c:812:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $d0 = COPY %10:fpr64, debug-location !1111; cg.c:812:18
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1111; cg.c:812:18
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1111; cg.c:812:18
SU(1):   $d0 = COPY %10:fpr64, debug-location !1111; cg.c:812:18

********** MI Scheduling **********
sprnvc:%bb.3 if.end
  From: STRWui $wzr, %stack.10.was_gen, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.10.was_gen, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   STRWui $wzr, %stack.6.ii, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) STRWui $wzr, %stack.6.ii, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.10.was_gen, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.10.was_gen, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
SU(1):   STRWui $wzr, %stack.6.ii, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17

********** MI Scheduling **********
sprnvc:%bb.4 for.cond
  From: %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
    To: Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1135; cg.c:826:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%21
  Single Issue       : false;
SU(1):   %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1133 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%22
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1135; cg.c:826:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%22
    SU(0): Data Latency=4 Reg=%21
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1135; cg.c:826:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1135; cg.c:826:9
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1133 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
SU(1):   %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1133 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
SU(2):   dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1135; cg.c:826:9

********** MI Scheduling **********
sprnvc:%bb.5 for.body
  From: %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
    To: Bcc 1, %bb.7, implicit killed $nzcv, debug-location !1142; cg.c:827:17
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(1):   %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%25
  Single Issue       : false;
SU(2):   %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%25
    SU(0): Data Latency=4 Reg=%24
  Successors:
    SU(4): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(3):   %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1140 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%27
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1142; cg.c:827:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%26
    SU(3): Data Latency=4 Reg=%27
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.7, implicit killed $nzcv, debug-location !1142; cg.c:827:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1142; cg.c:827:17
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1140 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
  Ready @6c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 5
  Executed: 12c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
SU(1):   %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
SU(2):   %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
SU(3):   %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1140 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
SU(4):   dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1142; cg.c:827:17

********** MI Scheduling **********
sprnvc:%bb.7 for.inc
  From: %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
    To: B %bb.4, debug-location !1147; cg.c:826:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%29
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1146; cg.c:826:34
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%29
  Successors:
    SU(2): Data Latency=1 Reg=%30
  Single Issue       : false;
SU(2):   STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1146 :: (store 4 into %ir.ii); cg.c:826:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%30
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !1147; cg.c:826:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1146 :: (store 4 into %ir.ii); cg.c:826:34
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1146; cg.c:826:34
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
SU(1):   %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1146; cg.c:826:34
SU(2):   STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1146 :: (store 4 into %ir.ii); cg.c:826:34

********** MI Scheduling **********
sprnvc:%bb.9 if.end9
  From: %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
    To: B %bb.1, debug-location !1105; cg.c:811:5
 RegionInstrs: 11
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%33
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%34
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%35
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  # preds left       : 6
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(2): Data Latency=4 Reg=%35
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%34
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%33
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(4):   %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%36
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%37
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%38
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  # preds left       : 10
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=%38
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%37
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%36
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(8):   %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1161 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%39
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1162; cg.c:836:19
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%39
  Successors:
    SU(10): Data Latency=1 Reg=%40
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%40
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !1105; cg.c:811:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13
Bottom Pressure:
GPR32=1
  LiveReg: %40
  UpdateRegP: SU(10) STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13
              to 
  Ready @0c
  BotQ.A TopLatency SU(10) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1162; cg.c:836:19
Bottom Pressure:
GPR32=1
  LiveReg: %39
  UpdateRegP: SU(9) %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1162; cg.c:836:19
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(9) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1161 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
Bottom Pressure:
GPR32=3
  LiveReg: %36
  UpdateRegP: SU(7) STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
              to GPR32 2
  LiveReg: %37
  UpdateRegP: SU(7) STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
              to GPR32 1
  LiveReg: %38
  UpdateRegP: SU(7) STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
              to 
  Ready @6c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 4 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(6) 5c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
Bottom Pressure:
GPR32=2
  Ready @10c
  BotQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 11c > CritPath 15
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
Bottom Pressure:
GPR32=1
  Ready @11c
  BotQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
Bottom Pressure:

  Ready @12c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %33
  UpdateRegP: SU(3) STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
              to GPR32 2
  LiveReg: %34
  UpdateRegP: SU(3) STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
              to GPR32 1
  LiveReg: %35
  UpdateRegP: SU(3) STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
              to 
  Ready @13c
  BotQ.A BotLatency SU(3) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 17 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 17c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @17c
  BotQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 18c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
Bottom Pressure:

  Ready @19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 11
  Executed: 20c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
SU(1):   %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
SU(2):   %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
SU(3):   STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
SU(4):   %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
SU(5):   %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
SU(6):   %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
SU(7):   STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
SU(8):   %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1161 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
SU(9):   %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1162; cg.c:836:19
SU(10):   STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13

********** INTERVALS **********
B0 [416r,432r:4)[432r,548r:3)[592r,608r:2)[608r,724r:1)[752r,784r:0)  0@752r 1@608r 2@592r 3@432r 4@416r
W0 [0B,80r:0)[400r,432r:3)[576r,608r:2)[768r,784r:1)  0@0B-phi 1@768r 2@576r 3@400r
W1 [0B,64r:0)  0@0B-phi
W2 [0B,48r:0)  0@0B-phi
W3 [0B,32r:0)  0@0B-phi
W4 [0B,16r:0)  0@0B-phi
W8 [784r,916r:0)  0@784r
%0 [80r,96r:0)  0@80r weight:0.000000e+00
%1 [64r,112r:0)  0@64r weight:0.000000e+00
%2 [48r,128r:0)  0@48r weight:0.000000e+00
%3 [32r,144r:0)  0@32r weight:0.000000e+00
%4 [16r,160r:0)  0@16r weight:0.000000e+00
%6 [272r,304r:0)  0@272r weight:0.000000e+00
%7 [288r,304r:0)  0@288r weight:0.000000e+00
%9 [208r,1664B:0)  0@208r weight:0.000000e+00
%10 [368r,480r:0)  0@368r weight:0.000000e+00
%12 [548r,552r:0)  0@548r weight:0.000000e+00
%13 [544r,656r:0)  0@544r weight:0.000000e+00
%14 [724r,832r:0)  0@724r weight:0.000000e+00
%15 [720r,832r:0)  0@720r weight:0.000000e+00
%16 [916r,920r:0)  0@916r weight:0.000000e+00
%17 [920r,936r:0)  0@920r weight:0.000000e+00
%18 [912r,928r:0)  0@912r weight:0.000000e+00
%21 [1056r,1088r:0)  0@1056r weight:0.000000e+00
%22 [1072r,1088r:0)  0@1072r weight:0.000000e+00
%24 [1152r,1184r:0)  0@1152r weight:0.000000e+00
%25 [1168r,1184r:0)  0@1168r weight:0.000000e+00
%26 [1184r,1216r:0)  0@1184r weight:0.000000e+00
%27 [1200r,1216r:0)  0@1200r weight:0.000000e+00
%29 [1328r,1344r:0)  0@1328r weight:0.000000e+00
%30 [1344r,1360r:0)  0@1344r weight:0.000000e+00
%31 [240r,1664B:0)  0@240r weight:0.000000e+00
%32 [1408r,1424r:0)  0@1408r weight:0.000000e+00
%33 [1472r,1520r:0)  0@1472r weight:0.000000e+00
%34 [1488r,1520r:0)  0@1488r weight:0.000000e+00
%35 [1504r,1520r:0)  0@1504r weight:0.000000e+00
%36 [1536r,1584r:0)  0@1536r weight:0.000000e+00
%37 [1552r,1584r:0)  0@1552r weight:0.000000e+00
%38 [1568r,1584r:0)  0@1568r weight:0.000000e+00
%39 [1600r,1616r:0)  0@1600r weight:0.000000e+00
%40 [1616r,1632r:0)  0@1616r weight:0.000000e+00
RegMasks: 432r 608r 784r
********** MACHINEINSTRS **********
# Machine code for function sprnvc: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=4, align=4, at location [SP]
  fi#2: size=4, align=4, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=8, align=8, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
  fi#8: size=8, align=8, at location [SP]
  fi#9: size=8, align=8, at location [SP]
  fi#10: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0, $w1 in %1, $w2 in %2, $x3 in %3, $x4 in %4

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0, $w1, $w2, $x3, $x4
16B	  %4:gpr64 = COPY $x4
32B	  %3:gpr64 = COPY $x3
48B	  %2:gpr32 = COPY $w2
64B	  %1:gpr32 = COPY $w1
80B	  %0:gpr32 = COPY $w0
96B	  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
112B	  STRWui %1:gpr32, %stack.1.nz.addr, 0 :: (store 4 into %ir.nz.addr)
128B	  STRWui %2:gpr32, %stack.2.nn1.addr, 0 :: (store 4 into %ir.nn1.addr)
144B	  STRXui %3:gpr64, %stack.3.v.addr, 0 :: (store 8 into %ir.v.addr)
160B	  STRXui %4:gpr64, %stack.4.iv.addr, 0 :: (store 8 into %ir.iv.addr)
192B	  STRWui $wzr, %stack.5.nzv, 0, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
208B	  %9:gpr64temp = ADRP target-flags(aarch64-page) @amult
240B	  %31:gpr32 = MOVi32imm 1

256B	bb.1.while.cond:
	; predecessors: %bb.0, %bb.2, %bb.8, %bb.9
	  successors: %bb.2(0x7c000000), %bb.10(0x04000000); %bb.2(96.88%), %bb.10(3.12%)

272B	  %6:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
288B	  %7:gpr32 = LDRWui %stack.1.nz.addr, 0, debug-location !1107 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
304B	  dead $wzr = SUBSWrr %6:gpr32, %7:gpr32, implicit-def $nzcv, debug-location !1105; cg.c:811:5
320B	  Bcc 10, %bb.10, implicit killed $nzcv, debug-location !1105; cg.c:811:5
336B	  B %bb.2, debug-location !1105; cg.c:811:5

352B	bb.2.while.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

368B	  %10:fpr64 = LDRDui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1109 :: (dereferenceable load 8 from @amult); cg.c:812:32
384B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1111; cg.c:812:18
400B	  $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1111; cg.c:812:18
416B	  $d0 = COPY %10:fpr64, debug-location !1111; cg.c:812:18
432B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1111; cg.c:812:18
448B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1111; cg.c:812:18
464B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1112; cg.c:812:16
480B	  PCN_STACKMAP 0, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %10:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1112 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:812:16
496B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1112; cg.c:812:16
544B	  %13:fpr64 = LDRDui %9:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
548B	  %12:fpr64 = COPY $d0, debug-location !1111; cg.c:812:18
552B	  STRDui %12:fpr64, %stack.8.vecelt, 0, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
560B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1114; cg.c:817:18
576B	  $x0 = MOVaddr target-flags(aarch64-page) @tran, target-flags(aarch64-pageoff, aarch64-nc) @tran, debug-location !1114; cg.c:817:18
592B	  $d0 = COPY %13:fpr64, debug-location !1114; cg.c:817:18
608B	  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1114; cg.c:817:18
624B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1114; cg.c:817:18
640B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1115; cg.c:817:16
656B	  PCN_STACKMAP 1, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %13:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1115 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:817:16
672B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1115; cg.c:817:16
720B	  %15:gpr32 = LDRWui %stack.2.nn1.addr, 0, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
724B	  %14:fpr64 = COPY $d0, debug-location !1114; cg.c:817:18
728B	  STRDui %14:fpr64, %stack.9.vecloc, 0, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
736B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1118; cg.c:818:13
752B	  $d0 = COPY %14:fpr64, debug-location !1118; cg.c:818:13
768B	  $w0 = COPY %15:gpr32, debug-location !1118; cg.c:818:13
784B	  BL @icnvrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $w0, implicit-def $sp, implicit-def $w8, debug-location !1118; cg.c:818:13
800B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1118; cg.c:818:13
816B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1119; cg.c:818:33
832B	  PCN_STACKMAP 2, 0, 0, %stack.7.i, 0, 0, %stack.6.ii, 0, 0, %stack.4.iv.addr, 0, 0, %stack.0.n.addr, 0, 0, %stack.2.nn1.addr, 0, 0, %stack.1.nz.addr, 0, 0, %stack.5.nzv, 0, 0, %stack.3.v.addr, 0, 0, %stack.8.vecelt, 0, 0, %stack.9.vecloc, 0, 0, %stack.10.was_gen, 0, %14:fpr64, %15:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1119 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4); cg.c:818:33
848B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1119; cg.c:818:33
912B	  %18:gpr32 = LDRWui %stack.0.n.addr, 0, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
916B	  %16:gpr32sp = COPY $w8, debug-location !1118; cg.c:818:13
920B	  %17:gpr32common = nsw ADDWri %16:gpr32sp, 1, 0, debug-location !1119; cg.c:818:33
928B	  dead $wzr = SUBSWrr %17:gpr32common, %18:gpr32, implicit-def $nzcv, debug-location !1125; cg.c:819:13
936B	  STRWui %17:gpr32common, %stack.7.i, 0, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
944B	  Bcc 12, %bb.1, implicit killed $nzcv, debug-location !1125; cg.c:819:13
960B	  B %bb.3, debug-location !1125; cg.c:819:13

976B	bb.3.if.end:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1008B	  STRWui $wzr, %stack.10.was_gen, 0, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
1024B	  STRWui $wzr, %stack.6.ii, 0, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17

1040B	bb.4.for.cond:
	; predecessors: %bb.3, %bb.7
	  successors: %bb.5(0x7c000000), %bb.8(0x04000000); %bb.5(96.88%), %bb.8(3.12%)

1056B	  %21:gpr32 = LDRWui %stack.6.ii, 0, debug-location !1131 :: (dereferenceable load 4 from %ir.ii); cg.c:826:22
1072B	  %22:gpr32 = LDRWui %stack.5.nzv, 0, debug-location !1133 :: (dereferenceable load 4 from %ir.nzv); cg.c:826:27
1088B	  dead $wzr = SUBSWrr %21:gpr32, %22:gpr32, implicit-def $nzcv, debug-location !1135; cg.c:826:9
1104B	  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1135; cg.c:826:9
1120B	  B %bb.5, debug-location !1135; cg.c:826:9

1136B	bb.5.for.body:
	; predecessors: %bb.4
	  successors: %bb.6(0x04000000), %bb.7(0x7c000000); %bb.6(3.12%), %bb.7(96.88%)

1152B	  %24:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
1168B	  %25:gpr64 = LDRSWui %stack.6.ii, 0, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
1184B	  %26:gpr32 = LDRWroX %24:gpr64common, %25:gpr64, 0, 1, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
1200B	  %27:gpr32 = LDRWui %stack.7.i, 0, debug-location !1140 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
1216B	  dead $wzr = SUBSWrr %26:gpr32, %27:gpr32, implicit-def $nzcv, debug-location !1142; cg.c:827:17
1232B	  Bcc 1, %bb.7, implicit killed $nzcv, debug-location !1142; cg.c:827:17
1248B	  B %bb.6, debug-location !1142; cg.c:827:17

1264B	bb.6.if.then6:
	; predecessors: %bb.5
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

1280B	  STRWui %31:gpr32, %stack.10.was_gen, 0, debug-location !1143 :: (store 4 into %ir.was_gen); cg.c:828:25
1296B	  B %bb.8, debug-location !1145; cg.c:829:17

1312B	bb.7.for.inc:
	; predecessors: %bb.5
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1328B	  %29:gpr32common = LDRWui %stack.6.ii, 0, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
1344B	  %30:gpr32common = nsw ADDWri %29:gpr32common, 1, 0, debug-location !1146; cg.c:826:34
1360B	  STRWui %30:gpr32common, %stack.6.ii, 0, debug-location !1146 :: (store 4 into %ir.ii); cg.c:826:34
1376B	  B %bb.4, debug-location !1147; cg.c:826:9

1392B	bb.8.for.end:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.1(0x40000000), %bb.9(0x40000000); %bb.1(50.00%), %bb.9(50.00%)

1408B	  %32:gpr32 = LDRWui %stack.10.was_gen, 0, debug-location !1150 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
1424B	  CBNZW %32:gpr32, %bb.1, debug-location !1152; cg.c:832:13
1440B	  B %bb.9, debug-location !1152; cg.c:832:13

1456B	bb.9.if.end9:
	; predecessors: %bb.8
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

1472B	  %33:fpr64 = LDRDui %stack.8.vecelt, 0, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
1488B	  %34:gpr64common = LDRXui %stack.3.v.addr, 0, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
1504B	  %35:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
1520B	  STRDroX %33:fpr64, %34:gpr64common, %35:gpr64, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
1536B	  %36:gpr32 = LDRWui %stack.7.i, 0, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
1552B	  %37:gpr64common = LDRXui %stack.4.iv.addr, 0, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
1568B	  %38:gpr64 = LDRSWui %stack.5.nzv, 0, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
1584B	  STRWroX %36:gpr32, %37:gpr64common, %38:gpr64, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
1600B	  %39:gpr32common = LDRWui %stack.5.nzv, 0, debug-location !1161 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
1616B	  %40:gpr32common = nsw ADDWri %39:gpr32common, 1, 0, debug-location !1162; cg.c:836:19
1632B	  STRWui %40:gpr32common, %stack.5.nzv, 0, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13
1648B	  B %bb.1, debug-location !1105; cg.c:811:5

1664B	bb.10.while.end:
	; predecessors: %bb.1

1680B	  RET_ReallyLR debug-location !1164; cg.c:838:1

# End machine code for function sprnvc.

Before post-MI-sched:
# Machine code for function sprnvc: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-44]
  fi#1: size=4, align=4, at location [SP-48]
  fi#2: size=4, align=4, at location [SP-52]
  fi#3: size=8, align=8, at location [SP-64]
  fi#4: size=8, align=8, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-76]
  fi#6: size=4, align=4, at location [SP-80]
  fi#7: size=4, align=4, at location [SP-84]
  fi#8: size=8, align=8, at location [SP-96]
  fi#9: size=8, align=8, at location [SP-104]
  fi#10: size=4, align=4, at location [SP-108]
  fi#11: size=8, align=8, at location [SP-120]
  fi#12: dead
  fi#13: dead
  fi#14: size=8, align=8, at location [SP-40]
  fi#15: size=8, align=8, at location [SP-8]
  fi#16: size=8, align=8, at location [SP-16]
  fi#17: size=8, align=8, at location [SP-24]
  fi#18: size=8, align=8, at location [SP-32]
Function Live Ins: $w0, $w1, $w2, $x3, $x4

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $w1, $w2, $x3, $x4, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 128, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 12 :: (store 8 into %stack.18), (store 8 into %stack.17)
  frame-setup STPXi killed $fp, killed $lr, $sp, 14 :: (store 8 into %stack.16), (store 8 into %stack.15)
  $fp = frame-setup ADDXri $sp, 112, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  STURWi killed renamable $w2, $fp, -36 :: (store 4 into %ir.nn1.addr)
  STURXi killed renamable $x3, $fp, -48 :: (store 8 into %ir.v.addr)
  STRXui killed renamable $x4, $sp, 7 :: (store 8 into %ir.iv.addr)
  STRWui $wzr, $sp, 13, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
  $w20 = MOVZWi 1, 0

bb.1.while.cond:
; predecessors: %bb.0, %bb.2, %bb.7, %bb.8
  successors: %bb.2(0x7c000000), %bb.9(0x04000000); %bb.2(96.88%), %bb.9(3.12%)
  liveins: $w20
  renamable $w8 = LDRWui $sp, 13, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  renamable $w16 = LDURWi $fp, -32, debug-location !1107 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1105; cg.c:811:5
  Bcc 10, %bb.9, implicit $nzcv, debug-location !1105; cg.c:811:5

bb.2.while.body:
; predecessors: %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $w20
  renamable $x8 = ADRP target-flags(aarch64-page) @amult
  renamable $d0 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1109 :: (dereferenceable load 8 from @amult); cg.c:812:32
  STRDui renamable $d0, $sp, 1 :: (store 8 into %stack.11)
  $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !1111; cg.c:812:18
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !1111; cg.c:812:18
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1111; cg.c:812:18
  PCN_STACKMAP 0, 0, 0, $fp, -68, 0, $fp, -64, 0, $fp, -56, 0, $fp, -28, 0, $fp, -36, 0, $fp, -32, 0, $fp, -60, 0, $fp, -48, 0, $fp, -80, 0, $fp, -88, 0, $fp, -92, 1, 8, $fp, -104, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1112 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4), (load 8 from %stack.11); cg.c:812:16
  renamable $x8 = ADRP target-flags(aarch64-page) @amult, debug-location !1113; cg.c:817:32
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
  STRDui renamable $d1, $sp, 1 :: (store 8 into %stack.11)
  STRDui killed renamable $d0, $sp, 4, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
  $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !1114; cg.c:817:18
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !1114; cg.c:817:18
  $q0 = ORRv16i8 $q1, killed $q1, debug-location !1114; cg.c:817:18
  BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1114; cg.c:817:18
  PCN_STACKMAP 1, 0, 0, $fp, -68, 0, $fp, -64, 0, $fp, -56, 0, $fp, -28, 0, $fp, -36, 0, $fp, -32, 0, $fp, -60, 0, $fp, -48, 0, $fp, -80, 0, $fp, -88, 0, $fp, -92, 1, 8, $fp, -104, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1115 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4), (load 8 from %stack.11); cg.c:817:16
  renamable $w19 = LDURWi $fp, -36, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  STRDui renamable $d0, $sp, 1 :: (store 8 into %stack.11)
  STRDui renamable $d0, $sp, 3, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
  $w0 = ORRWrs $wzr, $w19, 0, debug-location !1118; cg.c:818:13
  BL @icnvrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $w0, implicit-def $sp, implicit-def $w8, debug-location !1118; cg.c:818:13
  PCN_STACKMAP 2, 0, 0, $fp, -68, 0, $fp, -64, 0, $fp, -56, 0, $fp, -28, 0, $fp, -36, 0, $fp, -32, 0, $fp, -60, 0, $fp, -48, 0, $fp, -80, 0, $fp, -88, 0, $fp, -92, 1, 8, $fp, -104, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1119 :: (load 8 from %stack.7.i, align 4), (load 8 from %stack.6.ii, align 4), (load 8 from %stack.4.iv.addr), (load 8 from %stack.0.n.addr, align 4), (load 8 from %stack.2.nn1.addr, align 4), (load 8 from %stack.1.nz.addr, align 4), (load 8 from %stack.5.nzv, align 4), (load 8 from %stack.3.v.addr), (load 8 from %stack.8.vecelt), (load 8 from %stack.9.vecloc), (load 8 from %stack.10.was_gen, align 4), (load 8 from %stack.11); cg.c:818:33
  renamable $w16 = LDURWi $fp, -28, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1119; cg.c:818:33
  $wzr = SUBSWrs renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1125; cg.c:819:13
  STRWui killed renamable $w8, $sp, 11, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
  Bcc 12, %bb.1, implicit $nzcv, debug-location !1125; cg.c:819:13

bb.3.if.end:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $w20
  STRWui $wzr, $sp, 5, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
  STRWui $wzr, $sp, 12, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17

bb.4.for.cond:
; predecessors: %bb.3, %bb.10
  successors: %bb.5(0x7c000000), %bb.7(0x04000000); %bb.5(96.88%), %bb.7(3.12%)
  liveins: $w20
  renamable $w8, renamable $w16 = LDPWi $sp, 12, debug-location !1131 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1135; cg.c:826:9
  Bcc 10, %bb.7, implicit $nzcv, debug-location !1135; cg.c:826:9

bb.5.for.body:
; predecessors: %bb.4
  successors: %bb.6(0x04000000), %bb.10(0x7c000000); %bb.6(3.12%), %bb.10(96.88%)
  liveins: $w20
  renamable $x8 = LDRXui $sp, 7, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  renamable $x16 = LDRSWui $sp, 12, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
  renamable $w16 = LDRWui $sp, 11, debug-location !1140 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1142; cg.c:827:17
  Bcc 1, %bb.10, implicit $nzcv, debug-location !1142; cg.c:827:17

bb.6.if.then6:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $w20
  STRWui renamable $w20, $sp, 5, debug-location !1143 :: (store 4 into %ir.was_gen); cg.c:828:25

bb.7.for.end:
; predecessors: %bb.4, %bb.6
  successors: %bb.1(0x40000000), %bb.8(0x40000000); %bb.1(50.00%), %bb.8(50.00%)
  liveins: $w20
  renamable $w8 = LDRWui $sp, 5, debug-location !1150 :: (dereferenceable load 4 from %ir.was_gen); cg.c:832:13
  CBNZW killed renamable $w8, %bb.1, debug-location !1152; cg.c:832:13

bb.8.if.end9:
; predecessors: %bb.7
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w20
  renamable $d0 = LDRDui $sp, 4, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  renamable $x8 = LDURXi $fp, -48, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  renamable $x16 = LDRSWui $sp, 13, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  STRDroX killed renamable $d0, killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  renamable $w8 = LDRWui $sp, 11, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  renamable $x16 = LDRXui $sp, 7, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  renamable $x17 = LDRSWui $sp, 13, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  STRWroX killed renamable $w8, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  renamable $w8 = LDRWui $sp, 13, debug-location !1161 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1162; cg.c:836:19
  STRWui killed renamable $w8, $sp, 13, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13
  B %bb.1

bb.9.while.end:
; predecessors: %bb.1

  $fp, $lr = frame-destroy LDPXi $sp, 14, debug-location !1164 :: (load 8 from %stack.16), (load 8 from %stack.15); cg.c:838:1
  $x20, $x19 = frame-destroy LDPXi $sp, 12, debug-location !1164 :: (load 8 from %stack.18), (load 8 from %stack.17); cg.c:838:1
  $sp = frame-destroy ADDXri $sp, 128, 0, debug-location !1164; cg.c:838:1
  RET undef $lr, debug-location !1164; cg.c:838:1

bb.10.for.inc:
; predecessors: %bb.5
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $w20
  renamable $w8 = LDRWui $sp, 12, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1146; cg.c:826:34
  STRWui killed renamable $w8, $sp, 12, debug-location !1146 :: (store 4 into %ir.ii); cg.c:826:34
  B %bb.4

# End machine code for function sprnvc.

********** MI Scheduling **********
sprnvc:%bb.0 entry
  From: STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
    To: End RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURWi renamable $w2, $fp, -36 :: (store 4 into %ir.nn1.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STURXi renamable $x3, $fp, -48 :: (store 8 into %ir.v.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STRXui renamable $x4, $sp, 7 :: (store 8 into %ir.iv.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   STRWui $wzr, $sp, 13, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   $w20 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $w20 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 1 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(4) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURWi renamable $w2, $fp, -36 :: (store 4 into %ir.nn1.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 2 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STURXi renamable $x3, $fp, -48 :: (store 8 into %ir.v.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 1
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRXui renamable $x4, $sp, 7 :: (store 8 into %ir.iv.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui $wzr, $sp, 13, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(5):   $w20 = MOVZWi 1, 0
SU(0):   STPWi renamable $w1, renamable $w0, $fp, -8 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
SU(1):   STURWi renamable $w2, $fp, -36 :: (store 4 into %ir.nn1.addr)
SU(2):   STURXi renamable $x3, $fp, -48 :: (store 8 into %ir.v.addr)
SU(3):   STRXui renamable $x4, $sp, 7 :: (store 8 into %ir.iv.addr)
SU(4):   STRWui $wzr, $sp, 13, debug-location !1104 :: (store 4 into %ir.nzv); cg.c:809:9

********** MI Scheduling **********
sprnvc:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 12 :: (store 8 into %stack.18), (store 8 into %stack.17)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 12 :: (store 8 into %stack.18), (store 8 into %stack.17)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 14 :: (store 8 into %stack.16), (store 8 into %stack.15)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 112, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 12 :: (store 8 into %stack.18), (store 8 into %stack.17)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 14 :: (store 8 into %stack.16), (store 8 into %stack.15)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 112, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 12 :: (store 8 into %stack.18), (store 8 into %stack.17)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 14 :: (store 8 into %stack.16), (store 8 into %stack.15)
SU(2):   $fp = frame-setup ADDXri $sp, 112, 0

Fixup kills for %bb.0
********** MI Scheduling **********
sprnvc:%bb.1 while.cond
  From: renamable $w8 = LDRWui $sp, 13, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
    To: Bcc 10, %bb.9, implicit $nzcv, debug-location !1105; cg.c:811:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 13, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDURWi $fp, -32, debug-location !1107 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w16
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1105; cg.c:811:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.9, implicit $nzcv, debug-location !1105; cg.c:811:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 13, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -32, debug-location !1107 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1105; cg.c:811:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDRWui $sp, 13, debug-location !1106 :: (dereferenceable load 4 from %ir.nzv); cg.c:811:12
SU(1):   renamable $w16 = LDURWi $fp, -32, debug-location !1107 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:811:18
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1105; cg.c:811:5

Fixup kills for %bb.1
********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: renamable $w16 = LDURWi $fp, -28, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
    To: Bcc 12, %bb.1, implicit $nzcv, debug-location !1125; cg.c:819:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDURWi $fp, -28, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w16
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1119; cg.c:818:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=1 Reg=$w8
    SU(2): Data Latency=1 Reg=$w8
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1125; cg.c:819:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   STRWui renamable $w8, $sp, 11, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
ExitSU:   Bcc 12, %bb.1, implicit $nzcv, debug-location !1125; cg.c:819:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w16 = LDURWi $fp, -28, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1119; cg.c:818:33
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w8, $sp, 11, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
  Ready @2c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1125; cg.c:819:13
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $w16 = LDURWi $fp, -28, debug-location !1123 :: (dereferenceable load 4 from %ir.n.addr); cg.c:819:17
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1119; cg.c:818:33
SU(3):   STRWui renamable $w8, $sp, 11, debug-location !1120 :: (store 4 into %ir.i); cg.c:818:11
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1125; cg.c:819:13

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: renamable $w19 = LDURWi $fp, -36, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
    To: BL @icnvrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $w0, implicit-def $sp, implicit-def $w8, debug-location !1118; cg.c:818:13
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDURWi $fp, -36, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w19
SU(1):   STRDui renamable $d0, $sp, 1 :: (store 8 into %stack.11)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STRDui renamable $d0, $sp, 3, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   $w0 = ORRWrs $wzr, $w19, 0, debug-location !1118; cg.c:818:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @icnvrt, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $w0, implicit-def $sp, implicit-def $w8, debug-location !1118; cg.c:818:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDURWi $fp, -36, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STRDui renamable $d0, $sp, 1 :: (store 8 into %stack.11)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 3, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w0 = ORRWrs $wzr, $w19, 0, debug-location !1118; cg.c:818:13
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $w19 = LDURWi $fp, -36, debug-location !1117 :: (dereferenceable load 4 from %ir.nn1.addr); cg.c:818:28
SU(1):   STRDui renamable $d0, $sp, 1 :: (store 8 into %stack.11)
SU(2):   STRDui renamable $d0, $sp, 3, debug-location !1115 :: (store 8 into %ir.vecloc); cg.c:817:16
SU(3):   $w0 = ORRWrs $wzr, $w19, 0, debug-location !1118; cg.c:818:13

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: renamable $x8 = ADRP target-flags(aarch64-page) @amult, debug-location !1113; cg.c:817:32
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1114; cg.c:817:18
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @amult, debug-location !1113; cg.c:817:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(2): Data Latency=4 Reg=$d1
    SU(6): Data Latency=4 Reg=$q1
SU(2):   STRDui renamable $d1, $sp, 1 :: (store 8 into %stack.11)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
SU(3):   STRDui renamable $d0, $sp, 4, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Anti Latency=0
SU(4):   $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !1114; cg.c:817:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x0
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !1114; cg.c:817:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   $q0 = ORRv16i8 $q1, $q1, debug-location !1114; cg.c:817:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Data Latency=4 Reg=$q1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1114; cg.c:817:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @amult, debug-location !1113; cg.c:817:32
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !1114; cg.c:817:18
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 5 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRDui renamable $d0, $sp, 4, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !1114; cg.c:817:18
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(2) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $q0 = ORRv16i8 $q1, $q1, debug-location !1114; cg.c:817:18
  Ready @5c
  TopQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d1, $sp, 1 :: (store 8 into %stack.11)
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @amult, debug-location !1113; cg.c:817:32
SU(1):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1113 :: (dereferenceable load 8 from @amult); cg.c:817:32
SU(4):   $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !1114; cg.c:817:18
SU(3):   STRDui renamable $d0, $sp, 4, debug-location !1112 :: (store 8 into %ir.vecelt); cg.c:812:16
SU(5):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !1114; cg.c:817:18
SU(6):   $q0 = ORRv16i8 $q1, $q1, debug-location !1114; cg.c:817:18
SU(2):   STRDui renamable $d1, $sp, 1 :: (store 8 into %stack.11)

********** MI Scheduling **********
sprnvc:%bb.2 while.body
  From: renamable $x8 = ADRP target-flags(aarch64-page) @amult
    To: BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1111; cg.c:812:18
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @amult
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=1 Reg=$x8
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1109 :: (dereferenceable load 8 from @amult); cg.c:812:32
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(2): Data Latency=4 Reg=$d0
SU(2):   STRDui renamable $d0, $sp, 1 :: (store 8 into %stack.11)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=4 Reg=$d0
SU(3):   $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !1111; cg.c:812:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x0
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !1111; cg.c:812:18
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @randlc, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $d0, implicit-def $sp, implicit-def $d0, debug-location !1111; cg.c:812:18
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = ADRP target-flags(aarch64-page) @amult
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(3) ORDER                              
  Cand SU(1) TOP-PATH                  4 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1109 :: (dereferenceable load 8 from @amult); cg.c:812:32
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !1111; cg.c:812:18
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !1111; cg.c:812:18
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRDui renamable $d0, $sp, 1 :: (store 8 into %stack.11)
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x8 = ADRP target-flags(aarch64-page) @amult
SU(1):   renamable $d0 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) @amult, debug-location !1109 :: (dereferenceable load 8 from @amult); cg.c:812:32
SU(3):   $x0 = ADRP target-flags(aarch64-page) @tran, debug-location !1111; cg.c:812:18
SU(4):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @tran, 0, debug-location !1111; cg.c:812:18
SU(2):   STRDui renamable $d0, $sp, 1 :: (store 8 into %stack.11)

Fixup kills for %bb.2
********** MI Scheduling **********
sprnvc:%bb.3 if.end
  From: STRWui $wzr, $sp, 5, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 5, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 12, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui $wzr, $sp, 5, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 12, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, $sp, 5, debug-location !1127 :: (store 4 into %ir.was_gen); cg.c:825:17
SU(1):   STRWui $wzr, $sp, 12, debug-location !1128 :: (store 4 into %ir.ii); cg.c:826:17

Fixup kills for %bb.3
********** MI Scheduling **********
sprnvc:%bb.4 for.cond
  From: renamable $w8, renamable $w16 = LDPWi $sp, 12, debug-location !1131 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
    To: Bcc 10, %bb.7, implicit $nzcv, debug-location !1135; cg.c:826:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w16 = LDPWi $sp, 12, debug-location !1131 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w16
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1135; cg.c:826:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.7, implicit $nzcv, debug-location !1135; cg.c:826:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8, renamable $w16 = LDPWi $sp, 12, debug-location !1131 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1135; cg.c:826:9
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w8, renamable $w16 = LDPWi $sp, 12, debug-location !1131 :: (dereferenceable load 4 from %ir.ii), (dereferenceable load 4 from %ir.nzv); cg.c:826:22
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1135; cg.c:826:9

Fixup kills for %bb.4
********** MI Scheduling **********
sprnvc:%bb.5 for.body
  From: renamable $x8 = LDRXui $sp, 7, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
    To: Bcc 1, %bb.10, implicit $nzcv, debug-location !1142; cg.c:827:17
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $sp, 7, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 12, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
    SU(3): Anti Latency=0
SU(3):   renamable $w16 = LDRWui $sp, 11, debug-location !1140 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w16
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1142; cg.c:827:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w16
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.10, implicit $nzcv, debug-location !1142; cg.c:827:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui $sp, 7, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 12, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w16 = LDRWui $sp, 11, debug-location !1140 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
  Ready @6c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1142; cg.c:827:17
  Ready @10c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   renamable $x8 = LDRXui $sp, 7, debug-location !1136 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:827:17
SU(1):   renamable $x16 = LDRSWui $sp, 12, debug-location !1139 :: (dereferenceable load 4 from %ir.ii); cg.c:827:20
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1136 :: (load 4 from %ir.arrayidx); cg.c:827:17
SU(3):   renamable $w16 = LDRWui $sp, 11, debug-location !1140 :: (dereferenceable load 4 from %ir.i); cg.c:827:27
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1142; cg.c:827:17

Fixup kills for %bb.5
Fixup kills for %bb.6
Fixup kills for %bb.7
********** MI Scheduling **********
sprnvc:%bb.8 if.end9
  From: renamable $d0 = LDRDui $sp, 4, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
    To: B %bb.1
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 4, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=$d0
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x8 = LDURXi $fp, -48, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x16 = LDRSWui $sp, 13, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x16
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(3):   STRDroX renamable $d0, renamable $x8, renamable $x16, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  # preds left       : 6
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(2): Data Latency=4 Reg=$x16
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x8
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Anti Latency=0
    SU(5): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
SU(4):   renamable $w8 = LDRWui $sp, 11, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(7): Ord  Latency=0 Memory
SU(5):   renamable $x16 = LDRXui $sp, 7, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(2): Out  Latency=1
  Successors:
    SU(7): Data Latency=4 Reg=$x16
    SU(7): Ord  Latency=0 Memory
SU(6):   renamable $x17 = LDRSWui $sp, 13, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=$x17
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(7):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  # preds left       : 10
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=$x17
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=$x16
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=$w8
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Anti Latency=0
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
SU(8):   renamable $w8 = LDRWui $sp, 13, debug-location !1161 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Anti Latency=0
    SU(7): Ord  Latency=1 Memory
    SU(4): Out  Latency=1
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w8
    SU(10): Ord  Latency=0 Memory
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1162; cg.c:836:19
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w8
  Successors:
    SU(10): Data Latency=1 Reg=$w8
SU(10):   STRWui renamable $w8, $sp, 13, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$w8
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 4, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x8 = LDURXi $fp, -48, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
  Ready @1c
  TopQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = LDRSWui $sp, 13, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
  Ready @2c
  TopQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDroX renamable $d0, renamable $x8, renamable $x16, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $w8 = LDRWui $sp, 11, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
  Ready @7c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 8c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x16 = LDRXui $sp, 7, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
  Ready @8c
  TopQ.A BotLatency SU(5) 10c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x17 = LDRSWui $sp, 13, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
  Ready @9c
  TopQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
  Ready @13c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w8 = LDRWui $sp, 13, debug-location !1161 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
  Ready @14c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 18 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1162; cg.c:836:19
  Ready @18c
  TopQ.A TopLatency SU(9) 14c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWui renamable $w8, $sp, 13, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13
  Ready @19c
  TopQ.A TopLatency SU(10) 15c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 11
  Executed: 20c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $d0 = LDRDui $sp, 4, debug-location !1153 :: (dereferenceable load 8 from %ir.vecelt); cg.c:834:18
SU(1):   renamable $x8 = LDURXi $fp, -48, debug-location !1154 :: (dereferenceable load 8 from %ir.v.addr); cg.c:834:9
SU(2):   renamable $x16 = LDRSWui $sp, 13, debug-location !1155 :: (dereferenceable load 4 from %ir.nzv); cg.c:834:11
SU(3):   STRDroX renamable $d0, renamable $x8, renamable $x16, 0, 1, debug-location !1156 :: (store 8 into %ir.arrayidx11); cg.c:834:16
SU(4):   renamable $w8 = LDRWui $sp, 11, debug-location !1157 :: (dereferenceable load 4 from %ir.i); cg.c:835:19
SU(5):   renamable $x16 = LDRXui $sp, 7, debug-location !1158 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:835:9
SU(6):   renamable $x17 = LDRSWui $sp, 13, debug-location !1159 :: (dereferenceable load 4 from %ir.nzv); cg.c:835:12
SU(7):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1160 :: (store 4 into %ir.arrayidx13); cg.c:835:17
SU(8):   renamable $w8 = LDRWui $sp, 13, debug-location !1161 :: (dereferenceable load 4 from %ir.nzv); cg.c:836:15
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1162; cg.c:836:19
SU(10):   STRWui renamable $w8, $sp, 13, debug-location !1163 :: (store 4 into %ir.nzv); cg.c:836:13

Fixup kills for %bb.8
********** MI Scheduling **********
sprnvc:%bb.9 while.end
  From: $fp, $lr = frame-destroy LDPXi $sp, 14, debug-location !1164 :: (load 8 from %stack.16), (load 8 from %stack.15); cg.c:838:1
    To: $sp = frame-destroy ADDXri $sp, 128, 0, debug-location !1164; cg.c:838:1
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 14, debug-location !1164 :: (load 8 from %stack.16), (load 8 from %stack.15); cg.c:838:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 12, debug-location !1164 :: (load 8 from %stack.18), (load 8 from %stack.17); cg.c:838:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 128, 0, debug-location !1164; cg.c:838:1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) $fp, $lr = frame-destroy LDPXi $sp, 14, debug-location !1164 :: (load 8 from %stack.16), (load 8 from %stack.15); cg.c:838:1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x20, $x19 = frame-destroy LDPXi $sp, 12, debug-location !1164 :: (load 8 from %stack.18), (load 8 from %stack.17); cg.c:838:1
  Ready @1c
  TopQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   $fp, $lr = frame-destroy LDPXi $sp, 14, debug-location !1164 :: (load 8 from %stack.16), (load 8 from %stack.15); cg.c:838:1
SU(1):   $x20, $x19 = frame-destroy LDPXi $sp, 12, debug-location !1164 :: (load 8 from %stack.18), (load 8 from %stack.17); cg.c:838:1

Fixup kills for %bb.9
********** MI Scheduling **********
sprnvc:%bb.10 for.inc
  From: renamable $w8 = LDRWui $sp, 12, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
    To: B %bb.4
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 12, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1146; cg.c:826:34
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 12, debug-location !1146 :: (store 4 into %ir.ii); cg.c:826:34
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 12, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1146; cg.c:826:34
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 12, debug-location !1146 :: (store 4 into %ir.ii); cg.c:826:34
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w8 = LDRWui $sp, 12, debug-location !1146 :: (dereferenceable load 4 from %ir.ii); cg.c:826:34
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1146; cg.c:826:34
SU(2):   STRWui renamable $w8, $sp, 12, debug-location !1146 :: (store 4 into %ir.ii); cg.c:826:34

Fixup kills for %bb.10
Before MISched:
# Machine code for function vecset: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0, $x1 in %1, $x2 in %2, $x3 in %3, $w4 in %4, $d0 in %5

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w0, $x1, $x2, $x3, $w4, $d0
  %5:fpr64 = COPY $d0
  %4:gpr32 = COPY $w4
  %3:gpr64 = COPY $x3
  %2:gpr64 = COPY $x2
  %1:gpr64 = COPY $x1
  %0:gpr32 = COPY $w0
  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
  STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
  STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
  STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
  STRWui $wzr, %stack.7.set, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
  STRWui $wzr, %stack.6.k, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
  %31:gpr32 = MOVi32imm 1

bb.1.for.cond:
; predecessors: %bb.0, %bb.4
  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

  %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1191 :: (load 4 from %ir.1); cg.c:855:21
  dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1193; cg.c:855:5
  Bcc 10, %bb.5, implicit killed $nzcv, debug-location !1193; cg.c:855:5
  B %bb.2, debug-location !1193; cg.c:855:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

  %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
  %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1200; cg.c:856:13
  Bcc 1, %bb.4, implicit killed $nzcv, debug-location !1200; cg.c:856:13
  B %bb.3, debug-location !1200; cg.c:856:13

bb.3.if.then:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  STRWui %31:gpr32, %stack.7.set, 0, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17

bb.4.for.inc:
; predecessors: %bb.2, %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1208; cg.c:855:28
  STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1208 :: (store 4 into %ir.k); cg.c:855:28
  B %bb.1, debug-location !1209; cg.c:855:5

bb.5.for.end:
; predecessors: %bb.1
  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

  %11:gpr32 = LDRWui %stack.7.set, 0, debug-location !1212 :: (dereferenceable load 4 from %ir.set); cg.c:861:9
  CBNZW %11:gpr32, %bb.7, debug-location !1215; cg.c:861:9
  B %bb.6, debug-location !1215; cg.c:861:9

bb.6.if.then5:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
  %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
  STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
  %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
  STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
  %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1229; cg.c:864:21
  STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14

bb.7.if.end10:
; predecessors: %bb.5, %bb.6

  RET_ReallyLR debug-location !1233; cg.c:866:1

# End machine code for function vecset.

********** MI Scheduling **********
vecset:%bb.0 entry
  From: %5:fpr64 = COPY $d0
    To: End RegionInstrs: 15
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: W0 W1 W2 W3 W4 B0 
Live Out: %31 
Live Thru: 
  LiveReg: %31
Top Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
GPR32=1
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %5:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%5
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(1):   %4:gpr32 = COPY $w4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(2):   %3:gpr64 = COPY $x3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%3
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %2:gpr64 = COPY $x2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%2
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(7): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %0:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(6): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%1
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%2
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%5
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(12):   STRWui $wzr, %stack.7.set, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   STRWui $wzr, %stack.6.k, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
SU(14):   %31:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 12 13 14 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %5:fpr64 = COPY $d0
Top Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 1 2 3 4 5 12 13 11 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %4:gpr32 = COPY $w4
Top Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 2 3 4 5 12 13 10 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %3:gpr64 = COPY $x3
Top Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 10 3 4 5 12 13 9 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %2:gpr64 = COPY $x2
Top Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 10 9 4 5 12 13 8 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %1:gpr64 = COPY $x1
Top Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 10 9 8 5 12 13 7 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(5) PHYS-REG                           
  Cand SU(5) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(5) %0:gpr32 = COPY $w0
Top Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 13 12 11 10 9 8 7 6 
Queue TopQ.P: 
Queue TopQ.A: 14 11 10 9 8 7 12 13 6 
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(14) ORDER                              
  Cand SU(11) REG-MAX                            
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(14) %31:gpr32 = MOVi32imm 1
Bottom Pressure:

  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 13 12 11 10 9 8 7 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 12 13 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) STRWui $wzr, %stack.6.k, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
Bottom Pressure:

  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 12 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) STRWui $wzr, %stack.7.set, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
Bottom Pressure:

  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 11 10 9 
Queue TopQ.P: 
Queue TopQ.A: 6 11 10 9 8 7 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %5
  UpdateRegP: SU(11) STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
              to 
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 10 
Queue TopQ.P: 
Queue TopQ.A: 6 7 10 9 8 
  BotQ.A RemainingLatency 0 + 4c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %4
  UpdateRegP: SU(10) STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
              to 
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 9 
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 9 
  BotQ.A RemainingLatency 0 + 5c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %3
  UpdateRegP: SU(9) STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
              to 
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 8 
Queue TopQ.P: 
Queue TopQ.A: 6 7 8 
  BotQ.A RemainingLatency 0 + 6c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
Bottom Pressure:
FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %2
  UpdateRegP: SU(8) STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 7 
Queue TopQ.P: 
Queue TopQ.A: 6 7 
  BotQ.A RemainingLatency 0 + 7c > CritPath 0
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(6) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %1
  UpdateRegP: SU(7) STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
              to 
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %0
  UpdateRegP: SU(6) STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
              to 
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %5:fpr64 = COPY $d0
SU(1):   %4:gpr32 = COPY $w4
SU(2):   %3:gpr64 = COPY $x3
SU(3):   %2:gpr64 = COPY $x2
SU(4):   %1:gpr64 = COPY $x1
SU(5):   %0:gpr32 = COPY $w0
SU(6):   STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
SU(7):   STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
SU(8):   STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
SU(9):   STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
SU(10):   STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
SU(11):   STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
SU(12):   STRWui $wzr, %stack.7.set, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
SU(13):   STRWui $wzr, %stack.6.k, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
SU(14):   %31:gpr32 = MOVi32imm 1

********** MI Scheduling **********
vecset:%bb.1 for.cond
  From: %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
    To: Bcc 10, %bb.5, implicit killed $nzcv, debug-location !1193; cg.c:855:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%7
  Single Issue       : false;
SU(1):   %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%8
  Single Issue       : false;
SU(2):   %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1191 :: (load 4 from %ir.1); cg.c:855:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%8
  Successors:
    SU(3): Data Latency=4 Reg=%9
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1193; cg.c:855:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%9
    SU(0): Data Latency=4 Reg=%7
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.5, implicit killed $nzcv, debug-location !1193; cg.c:855:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1193; cg.c:855:5
  Ready @1c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1191 :: (load 4 from %ir.1); cg.c:855:21
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
SU(0):   %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
SU(2):   %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1191 :: (load 4 from %ir.1); cg.c:855:21
SU(3):   dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1193; cg.c:855:5

********** MI Scheduling **********
vecset:%bb.2 for.body
  From: %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
    To: Bcc 1, %bb.4, implicit killed $nzcv, debug-location !1200; cg.c:856:13
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%23
  Single Issue       : false;
SU(1):   %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(2):   %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%24
    SU(0): Data Latency=4 Reg=%23
  Successors:
    SU(4): Data Latency=4 Reg=%25
  Single Issue       : false;
SU(3):   %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%26
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1200; cg.c:856:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%25
    SU(3): Data Latency=4 Reg=%26
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.4, implicit killed $nzcv, debug-location !1200; cg.c:856:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1200; cg.c:856:13
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
  Ready @6c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 5
  Executed: 12c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
SU(1):   %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
SU(2):   %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
SU(3):   %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
SU(4):   dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1200; cg.c:856:13

********** MI Scheduling **********
vecset:%bb.3 if.then
  From: %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%28
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%29
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%30
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%30
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%29
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%28
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %31:gpr32, %stack.7.set, 0, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %31:gpr32, %stack.7.set, 0, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  Ready @5c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
SU(1):   %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
SU(2):   %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
SU(3):   STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
SU(4):   STRWui %31:gpr32, %stack.7.set, 0, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17

********** MI Scheduling **********
vecset:%bb.4 for.inc
  From: %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
    To: B %bb.1, debug-location !1209; cg.c:855:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%32
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1208; cg.c:855:28
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%32
  Successors:
    SU(2): Data Latency=1 Reg=%33
  Single Issue       : false;
SU(2):   STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1208 :: (store 4 into %ir.k); cg.c:855:28
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%33
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !1209; cg.c:855:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1208 :: (store 4 into %ir.k); cg.c:855:28
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1208; cg.c:855:28
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
SU(1):   %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1208; cg.c:855:28
SU(2):   STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1208 :: (store 4 into %ir.k); cg.c:855:28

********** MI Scheduling **********
vecset:%bb.6 if.then5
  From: %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
    To: End RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(4): Data Latency=4 Reg=%12
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(1):   %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(4): Data Latency=4 Reg=%13
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(3): Data Latency=4 Reg=%14
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 23
  Predecessors:
    SU(2): Data Latency=4 Reg=%14
  Successors:
    SU(4): Data Latency=4 Reg=%15
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  # preds left       : 7
  # succs left       : 8
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 19
  Predecessors:
    SU(3): Data Latency=4 Reg=%15
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%13
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%12
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(11): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%16
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%17
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 18
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%18
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 14
  Predecessors:
    SU(7): Data Latency=4 Reg=%18
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%19
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  # preds left       : 12
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(8): Data Latency=4 Reg=%19
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Data Latency=4 Reg=%17
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%16
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(10):   %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(13): Data Latency=4 Reg=%20
    SU(11): Data Latency=4 Reg=%20
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 5
  Predecessors:
    SU(10): Data Latency=4 Reg=%20
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%21
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1229; cg.c:864:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 1
  Predecessors:
    SU(11): Data Latency=4 Reg=%21
  Successors:
    SU(13): Data Latency=1 Reg=%22
  Pressure Diff      : 
  Single Issue       : false;
SU(13):   STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14
  # preds left       : 14
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%22
    SU(11): Ord  Latency=0 Memory
    SU(10): Data Latency=4 Reg=%20
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
Critical Path(GS-RR ): 27
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14
Bottom Pressure:
GPR32=2
  LiveReg: %22
  UpdateRegP: SU(13) STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14
              to GPR32 1
  LiveReg: %20
  UpdateRegP: SU(11) %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
              to GPR32 -1
  UpdateRegP: SU(13) STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14
              to 
  Ready @0c
  BotQ.A TopLatency SU(13) 27c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1229; cg.c:864:21
Bottom Pressure:
GPR32=2
  LiveReg: %21
  UpdateRegP: SU(12) %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1229; cg.c:864:21
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(12) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
Bottom Pressure:
GPR32=1
  Ready @5c
  BotQ.A BotLatency SU(11) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
Bottom Pressure:

  Ready @9c
  BotQ.A BotLatency SU(10) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
Bottom Pressure:
GPR32=3
  LiveReg: %16
  UpdateRegP: SU(9) STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
              to GPR32 2
  LiveReg: %17
  UpdateRegP: SU(9) STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
              to GPR32 1
  LiveReg: %19
  UpdateRegP: SU(9) STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
              to 
  Ready @10c
  BotQ.A BotLatency SU(9) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 14 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 5 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(8) 13c
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
Bottom Pressure:
GPR32=3
  LiveReg: %18
  UpdateRegP: SU(8) %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
              to GPR32 -1
  Ready @14c
  BotQ.A BotLatency SU(8) 14c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 6
  Executed: 15c
  Critical: 6c, 6 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(6) 9c
BotQ.A RemLatency SU(7) 9c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
Bottom Pressure:
GPR32=2
  Ready @15c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 7
  Executed: 16c
  Critical: 7c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
Bottom Pressure:
GPR32=1
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 18 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
Bottom Pressure:

  Ready @18c
  BotQ.A BotLatency SU(7) 18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 9
  Executed: 19c
  Critical: 9c, 9 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %12
  UpdateRegP: SU(4) STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
              to GPR32 2
  LiveReg: %13
  UpdateRegP: SU(4) STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
              to GPR32 1
  LiveReg: %15
  UpdateRegP: SU(4) STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
              to 
  Ready @19c
  BotQ.A BotLatency SU(4) 19c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 10
  Executed: 20c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 23 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %14
  UpdateRegP: SU(3) %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
              to GPR32 -1
  Ready @23c
  BotQ.A BotLatency SU(3) 23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 11
  Executed: 24c
  Critical: 11c, 11 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @24c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 12
  Executed: 25c
  Critical: 12c, 12 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
Bottom Pressure:
GPR32=1
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 13
  Executed: 26c
  Critical: 13c, 13 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 27 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
Bottom Pressure:

  Ready @27c
  BotQ.A BotLatency SU(2) 27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 14
  Executed: 28c
  Critical: 14c, 14 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(2):   %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
SU(0):   %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
SU(1):   %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
SU(3):   %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
SU(4):   STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
SU(7):   %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
SU(5):   %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
SU(6):   %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
SU(8):   %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
SU(9):   STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
SU(10):   %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
SU(11):   %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
SU(12):   %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1229; cg.c:864:21
SU(13):   STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14

********** INTERVALS **********
B0 [0B,16r:0)  0@0B-phi
W0 [0B,96r:0)  0@0B-phi
W1 [0B,80r:0)  0@0B-phi
W2 [0B,64r:0)  0@0B-phi
W3 [0B,48r:0)  0@0B-phi
W4 [0B,32r:0)  0@0B-phi
%0 [96r,112r:0)  0@96r weight:0.000000e+00
%1 [80r,128r:0)  0@80r weight:0.000000e+00
%2 [64r,144r:0)  0@64r weight:0.000000e+00
%3 [48r,160r:0)  0@48r weight:0.000000e+00
%4 [32r,176r:0)  0@32r weight:0.000000e+00
%5 [16r,192r:0)  0@16r weight:0.000000e+00
%7 [312r,336r:0)  0@312r weight:0.000000e+00
%8 [304r,320r:0)  0@304r weight:0.000000e+00
%9 [320r,336r:0)  0@320r weight:0.000000e+00
%11 [704r,720r:0)  0@704r weight:0.000000e+00
%12 [804r,832r:0)  0@804r weight:0.000000e+00
%13 [808r,832r:0)  0@808r weight:0.000000e+00
%14 [800r,816r:0)  0@800r weight:0.000000e+00
%15 [816r,832r:0)  0@816r weight:0.000000e+00
%16 [884r,912r:0)  0@884r weight:0.000000e+00
%17 [888r,912r:0)  0@888r weight:0.000000e+00
%18 [880r,896r:0)  0@880r weight:0.000000e+00
%19 [896r,912r:0)  0@896r weight:0.000000e+00
%20 [928r,976r:0)  0@928r weight:0.000000e+00
%21 [944r,960r:0)  0@944r weight:0.000000e+00
%22 [960r,976r:0)  0@960r weight:0.000000e+00
%23 [400r,432r:0)  0@400r weight:0.000000e+00
%24 [416r,432r:0)  0@416r weight:0.000000e+00
%25 [432r,464r:0)  0@432r weight:0.000000e+00
%26 [448r,464r:0)  0@448r weight:0.000000e+00
%28 [528r,576r:0)  0@528r weight:0.000000e+00
%29 [544r,576r:0)  0@544r weight:0.000000e+00
%30 [560r,576r:0)  0@560r weight:0.000000e+00
%31 [256r,688B:0)  0@256r weight:0.000000e+00
%32 [624r,640r:0)  0@624r weight:0.000000e+00
%33 [640r,656r:0)  0@640r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function vecset: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=8, align=8, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=8, align=8, at location [SP]
  fi#6: size=4, align=4, at location [SP]
  fi#7: size=4, align=4, at location [SP]
Function Live Ins: $w0 in %0, $x1 in %1, $x2 in %2, $x3 in %3, $w4 in %4, $d0 in %5

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $w0, $x1, $x2, $x3, $w4, $d0
16B	  %5:fpr64 = COPY $d0
32B	  %4:gpr32 = COPY $w4
48B	  %3:gpr64 = COPY $x3
64B	  %2:gpr64 = COPY $x2
80B	  %1:gpr64 = COPY $x1
96B	  %0:gpr32 = COPY $w0
112B	  STRWui %0:gpr32, %stack.0.n.addr, 0 :: (store 4 into %ir.n.addr)
128B	  STRXui %1:gpr64, %stack.1.v.addr, 0 :: (store 8 into %ir.v.addr)
144B	  STRXui %2:gpr64, %stack.2.iv.addr, 0 :: (store 8 into %ir.iv.addr)
160B	  STRXui %3:gpr64, %stack.3.nzv.addr, 0 :: (store 8 into %ir.nzv.addr)
176B	  STRWui %4:gpr32, %stack.4.i.addr, 0 :: (store 4 into %ir.i.addr)
192B	  STRDui %5:fpr64, %stack.5.val.addr, 0 :: (store 8 into %ir.val.addr)
224B	  STRWui $wzr, %stack.7.set, 0, debug-location !1184 :: (store 4 into %ir.set); cg.c:854:9
240B	  STRWui $wzr, %stack.6.k, 0, debug-location !1185 :: (store 4 into %ir.k); cg.c:855:12
256B	  %31:gpr32 = MOVi32imm 1

272B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.4
	  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)

304B	  %8:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
312B	  %7:gpr32 = LDRWui %stack.6.k, 0, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
320B	  %9:gpr32 = LDRWui %8:gpr64common, 0, debug-location !1191 :: (load 4 from %ir.1); cg.c:855:21
336B	  dead $wzr = SUBSWrr %7:gpr32, %9:gpr32, implicit-def $nzcv, debug-location !1193; cg.c:855:5
352B	  Bcc 10, %bb.5, implicit killed $nzcv, debug-location !1193; cg.c:855:5
368B	  B %bb.2, debug-location !1193; cg.c:855:5

384B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)

400B	  %23:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
416B	  %24:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
432B	  %25:gpr32 = LDRWroX %23:gpr64common, %24:gpr64, 0, 1, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
448B	  %26:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1198 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
464B	  dead $wzr = SUBSWrr %25:gpr32, %26:gpr32, implicit-def $nzcv, debug-location !1200; cg.c:856:13
480B	  Bcc 1, %bb.4, implicit killed $nzcv, debug-location !1200; cg.c:856:13
496B	  B %bb.3, debug-location !1200; cg.c:856:13

512B	bb.3.if.then:
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

528B	  %28:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
544B	  %29:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
560B	  %30:gpr64 = LDRSWui %stack.6.k, 0, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
576B	  STRDroX %28:fpr64, %29:gpr64common, %30:gpr64, 0, 1, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
592B	  STRWui %31:gpr32, %stack.7.set, 0, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17

608B	bb.4.for.inc:
	; predecessors: %bb.2, %bb.3
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

624B	  %32:gpr32common = LDRWui %stack.6.k, 0, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
640B	  %33:gpr32common = nsw ADDWri %32:gpr32common, 1, 0, debug-location !1208; cg.c:855:28
656B	  STRWui %33:gpr32common, %stack.6.k, 0, debug-location !1208 :: (store 4 into %ir.k); cg.c:855:28
672B	  B %bb.1, debug-location !1209; cg.c:855:5

688B	bb.5.for.end:
	; predecessors: %bb.1
	  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

704B	  %11:gpr32 = LDRWui %stack.7.set, 0, debug-location !1212 :: (dereferenceable load 4 from %ir.set); cg.c:861:9
720B	  CBNZW %11:gpr32, %bb.7, debug-location !1215; cg.c:861:9
736B	  B %bb.6, debug-location !1215; cg.c:861:9

752B	bb.6.if.then5:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %14:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:862:12
804B	  %12:fpr64 = LDRDui %stack.5.val.addr, 0, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
808B	  %13:gpr64common = LDRXui %stack.1.v.addr, 0, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
816B	  %15:gpr64 = LDRSWui %14:gpr64common, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
832B	  STRDroX %12:fpr64, %13:gpr64common, %15:gpr64, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
880B	  %18:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
884B	  %16:gpr32 = LDRWui %stack.4.i.addr, 0, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
888B	  %17:gpr64common = LDRXui %stack.2.iv.addr, 0, debug-location !1223 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:863:9
896B	  %19:gpr64 = LDRSWui %18:gpr64common, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
912B	  STRWroX %16:gpr32, %17:gpr64common, %19:gpr64, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
928B	  %20:gpr64common = LDRXui %stack.3.nzv.addr, 0, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
944B	  %21:gpr32common = LDRWui %20:gpr64common, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
960B	  %22:gpr32common = nsw ADDWri %21:gpr32common, 1, 0, debug-location !1229; cg.c:864:21
976B	  STRWui %22:gpr32common, %20:gpr64common, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14

992B	bb.7.if.end10:
	; predecessors: %bb.5, %bb.6

1008B	  RET_ReallyLR debug-location !1233; cg.c:866:1

# End machine code for function vecset.

Before post-MI-sched:
# Machine code for function vecset: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=8, align=8, at location [SP-40]
  fi#2: size=8, align=8, at location [SP-48]
  fi#3: size=8, align=8, at location [SP-56]
  fi#4: size=4, align=4, at location [SP-60]
  fi#5: size=8, align=8, at location [SP-72]
  fi#6: size=4, align=4, at location [SP-76]
  fi#7: size=4, align=4, at location [SP-80]
  fi#8: size=8, align=8, at location [SP-24]
  fi#9: size=8, align=8, at location [SP-8]
  fi#10: size=8, align=8, at location [SP-16]
Function Live Ins: $w0, $x1, $x2, $x3, $w4, $d0

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $d0, $w0, $w4, $x1, $x2, $x3, $lr
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 8 :: (store 8 into %stack.10), (store 8 into %stack.9)
  $fp = frame-setup ADDXri $sp, 64, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STURWi killed renamable $w0, $fp, -12 :: (store 4 into %ir.n.addr)
  STURXi killed renamable $x1, $fp, -24 :: (store 8 into %ir.v.addr)
  STPXi renamable $x3, renamable $x2, $sp, 3 :: (store 8 into %ir.iv.addr), (store 8 into %ir.nzv.addr)
  STRWui killed renamable $w4, $sp, 5 :: (store 4 into %ir.i.addr)
  STRDui killed renamable $d0, $sp, 1 :: (store 8 into %ir.val.addr)
  STRXui $xzr, $sp, 0, debug-location !1184 :: (store 4 into %ir.set), (store 4 into %ir.k); cg.c:854:9
  $w8 = MOVZWi 1, 0

bb.1.for.cond:
; predecessors: %bb.0, %bb.4
  successors: %bb.2(0x7c000000), %bb.5(0x04000000); %bb.2(96.88%), %bb.5(3.12%)
  liveins: $w8
  renamable $x16 = LDRXui $sp, 3, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  renamable $w17 = LDRWui $sp, 1, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  renamable $w16 = LDRWui killed renamable $x16, 0, debug-location !1191 :: (load 4 from %ir.1); cg.c:855:21
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1193; cg.c:855:5
  Bcc 10, %bb.5, implicit $nzcv, debug-location !1193; cg.c:855:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.3(0x40000000), %bb.4(0x40000000); %bb.3(50.00%), %bb.4(50.00%)
  liveins: $w8
  renamable $x16 = LDRXui $sp, 4, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  renamable $x17 = LDRSWui $sp, 1, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  renamable $w16 = LDRWroX killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
  renamable $w17 = LDRWui $sp, 5, debug-location !1198 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  $wzr = SUBSWrs killed renamable $w16, killed renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1200; cg.c:856:13
  Bcc 1, %bb.4, implicit $nzcv, debug-location !1200; cg.c:856:13

bb.3.if.then:
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $w8
  renamable $d0 = LDRDui $sp, 1, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  renamable $x16 = LDURXi $fp, -24, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  renamable $x17 = LDRSWui $sp, 1, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  STRDroX killed renamable $d0, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  STRWui renamable $w8, $sp, 0, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17

bb.4.for.inc:
; predecessors: %bb.2, %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $w8
  renamable $w16 = LDRWui $sp, 1, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !1208; cg.c:855:28
  STRWui killed renamable $w16, $sp, 1, debug-location !1208 :: (store 4 into %ir.k); cg.c:855:28
  B %bb.1

bb.5.for.end:
; predecessors: %bb.1
  successors: %bb.6(0x30000000), %bb.7(0x50000000); %bb.6(37.50%), %bb.7(62.50%)

  renamable $w8 = LDRWui $sp, 0, debug-location !1212 :: (dereferenceable load 4 from %ir.set); cg.c:861:9
  CBNZW killed renamable $w8, %bb.7, debug-location !1215; cg.c:861:9

bb.6.if.then5:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  renamable $x8, renamable $x17 = LDPXi $sp, 3, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
  renamable $d0 = LDRDui $sp, 1, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  renamable $x16 = LDURXi $fp, -24, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  renamable $x8 = LDRSWui killed renamable $x8, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
  STRDroX killed renamable $d0, killed renamable $x16, killed renamable $x8, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  renamable $x8 = LDRXui $sp, 3, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  renamable $w16 = LDRWui $sp, 5, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  renamable $x8 = LDRSWui killed renamable $x8, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
  STRWroX killed renamable $w16, killed renamable $x17, killed renamable $x8, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  renamable $x8 = LDRXui $sp, 3, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  renamable $w16 = LDRWui renamable $x8, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !1229; cg.c:864:21
  STRWui killed renamable $w16, killed renamable $x8, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14

bb.7.if.end10:
; predecessors: %bb.5, %bb.6

  $fp, $lr = frame-destroy LDPXi $sp, 8, debug-location !1233 :: (load 8 from %stack.10), (load 8 from %stack.9); cg.c:866:1
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !1233; cg.c:866:1
  RET undef $lr, debug-location !1233; cg.c:866:1

# End machine code for function vecset.

********** MI Scheduling **********
vecset:%bb.0 entry
  From: STURWi killed renamable $w0, $fp, -12 :: (store 4 into %ir.n.addr)
    To: End RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STURWi renamable $w0, $fp, -12 :: (store 4 into %ir.n.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURXi renamable $x1, $fp, -24 :: (store 8 into %ir.v.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STPXi renamable $x3, renamable $x2, $sp, 3 :: (store 8 into %ir.iv.addr), (store 8 into %ir.nzv.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   STRWui renamable $w4, $sp, 5 :: (store 4 into %ir.i.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(4):   STRDui renamable $d0, $sp, 1 :: (store 8 into %ir.val.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   STRXui $xzr, $sp, 0, debug-location !1184 :: (store 4 into %ir.set), (store 4 into %ir.k); cg.c:854:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   $w8 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(6) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(6) $w8 = MOVZWi 1, 0
  Ready @0c
  TopQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STURWi renamable $w0, $fp, -12 :: (store 4 into %ir.n.addr)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 3 4 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURXi renamable $x1, $fp, -24 :: (store 8 into %ir.v.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 2 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STPXi renamable $x3, renamable $x2, $sp, 3 :: (store 8 into %ir.iv.addr), (store 8 into %ir.nzv.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 3 
  TopQ.A RemainingLatency 0 + 4c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) STRWui renamable $w4, $sp, 5 :: (store 4 into %ir.i.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 5c > CritPath 1
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) STRDui renamable $d0, $sp, 1 :: (store 8 into %ir.val.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRXui $xzr, $sp, 0, debug-location !1184 :: (store 4 into %ir.set), (store 4 into %ir.k); cg.c:854:9
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(6):   $w8 = MOVZWi 1, 0
SU(0):   STURWi renamable $w0, $fp, -12 :: (store 4 into %ir.n.addr)
SU(1):   STURXi renamable $x1, $fp, -24 :: (store 8 into %ir.v.addr)
SU(2):   STPXi renamable $x3, renamable $x2, $sp, 3 :: (store 8 into %ir.iv.addr), (store 8 into %ir.nzv.addr)
SU(3):   STRWui renamable $w4, $sp, 5 :: (store 4 into %ir.i.addr)
SU(4):   STRDui renamable $d0, $sp, 1 :: (store 8 into %ir.val.addr)
SU(5):   STRXui $xzr, $sp, 0, debug-location !1184 :: (store 4 into %ir.set), (store 4 into %ir.k); cg.c:854:9

********** MI Scheduling **********
vecset:%bb.0 entry
  From: frame-setup STPXi killed $fp, killed $lr, $sp, 8 :: (store 8 into %stack.10), (store 8 into %stack.9)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $fp, $lr, $sp, 8 :: (store 8 into %stack.10), (store 8 into %stack.9)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Anti Latency=0
SU(1):   $fp = frame-setup ADDXri $sp, 64, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) frame-setup STPXi $fp, $lr, $sp, 8 :: (store 8 into %stack.10), (store 8 into %stack.9)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $fp = frame-setup ADDXri $sp, 64, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $fp, $lr, $sp, 8 :: (store 8 into %stack.10), (store 8 into %stack.9)
SU(1):   $fp = frame-setup ADDXri $sp, 64, 0

Fixup kills for %bb.0
********** MI Scheduling **********
vecset:%bb.1 for.cond
  From: renamable $x16 = LDRXui $sp, 3, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
    To: Bcc 10, %bb.5, implicit $nzcv, debug-location !1193; cg.c:855:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDRXui $sp, 3, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
SU(1):   renamable $w17 = LDRWui $sp, 1, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w17
SU(2):   renamable $w16 = LDRWui renamable $x16, 0, debug-location !1191 :: (load 4 from %ir.1); cg.c:855:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w17, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1193; cg.c:855:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(1): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.5, implicit $nzcv, debug-location !1193; cg.c:855:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x16 = LDRXui $sp, 3, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w17 = LDRWui $sp, 1, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui renamable $x16, 0, debug-location !1191 :: (load 4 from %ir.1); cg.c:855:21
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w17, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1193; cg.c:855:5
  Ready @8c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $x16 = LDRXui $sp, 3, debug-location !1190 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:855:22
SU(1):   renamable $w17 = LDRWui $sp, 1, debug-location !1188 :: (dereferenceable load 4 from %ir.k); cg.c:855:17
SU(2):   renamable $w16 = LDRWui renamable $x16, 0, debug-location !1191 :: (load 4 from %ir.1); cg.c:855:21
SU(3):   $wzr = SUBSWrs renamable $w17, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1193; cg.c:855:5

Fixup kills for %bb.1
********** MI Scheduling **********
vecset:%bb.2 for.body
  From: renamable $x16 = LDRXui $sp, 4, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
    To: Bcc 1, %bb.4, implicit $nzcv, debug-location !1200; cg.c:856:13
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDRXui $sp, 4, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
SU(1):   renamable $x17 = LDRSWui $sp, 1, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x17
SU(2):   renamable $w16 = LDRWroX renamable $x16, renamable $x17, 0, 1, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x17
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(4): Data Latency=4 Reg=$w16
    SU(3): Anti Latency=0
SU(3):   renamable $w17 = LDRWui $sp, 5, debug-location !1198 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w17
SU(4):   $wzr = SUBSWrs renamable $w16, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1200; cg.c:856:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w17
    SU(2): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.4, implicit $nzcv, debug-location !1200; cg.c:856:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x16 = LDRXui $sp, 4, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x17 = LDRSWui $sp, 1, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWroX renamable $x16, renamable $x17, 0, 1, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w17 = LDRWui $sp, 5, debug-location !1198 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
  Ready @6c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w16, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1200; cg.c:856:13
  Ready @10c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x16 = LDRXui $sp, 4, debug-location !1194 :: (dereferenceable load 8 from %ir.iv.addr); cg.c:856:13
SU(1):   renamable $x17 = LDRSWui $sp, 1, debug-location !1197 :: (dereferenceable load 4 from %ir.k); cg.c:856:16
SU(2):   renamable $w16 = LDRWroX renamable $x16, renamable $x17, 0, 1, debug-location !1194 :: (load 4 from %ir.arrayidx); cg.c:856:13
SU(3):   renamable $w17 = LDRWui $sp, 5, debug-location !1198 :: (dereferenceable load 4 from %ir.i.addr); cg.c:856:22
SU(4):   $wzr = SUBSWrs renamable $w16, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1200; cg.c:856:13

Fixup kills for %bb.2
********** MI Scheduling **********
vecset:%bb.3 if.then
  From: renamable $d0 = LDRDui $sp, 1, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 1, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$d0
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDURXi $fp, -24, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x16
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x17 = LDRSWui $sp, 1, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x17
    SU(3): Ord  Latency=0 Memory
SU(3):   STRDroX renamable $d0, renamable $x16, renamable $x17, 0, 1, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$x17
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x16
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$d0
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
SU(4):   STRWui renamable $w8, $sp, 0, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 1, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x16 = LDURXi $fp, -24, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x17 = LDRSWui $sp, 1, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDroX renamable $d0, renamable $x16, renamable $x17, 0, 1, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui renamable $w8, $sp, 0, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   renamable $d0 = LDRDui $sp, 1, debug-location !1201 :: (dereferenceable load 8 from %ir.val.addr); cg.c:857:20
SU(1):   renamable $x16 = LDURXi $fp, -24, debug-location !1203 :: (dereferenceable load 8 from %ir.v.addr); cg.c:857:13
SU(2):   renamable $x17 = LDRSWui $sp, 1, debug-location !1204 :: (dereferenceable load 4 from %ir.k); cg.c:857:15
SU(3):   STRDroX renamable $d0, renamable $x16, renamable $x17, 0, 1, debug-location !1205 :: (store 8 into %ir.arrayidx3); cg.c:857:18
SU(4):   STRWui renamable $w8, $sp, 0, debug-location !1206 :: (store 4 into %ir.set); cg.c:858:17

Fixup kills for %bb.3
********** MI Scheduling **********
vecset:%bb.4 for.inc
  From: renamable $w16 = LDRWui $sp, 1, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
    To: B %bb.1
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDRWui $sp, 1, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w16
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1208; cg.c:855:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    SU(2): Data Latency=1 Reg=$w16
SU(2):   STRWui renamable $w16, $sp, 1, debug-location !1208 :: (store 4 into %ir.k); cg.c:855:28
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDRWui $sp, 1, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1208; cg.c:855:28
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w16, $sp, 1, debug-location !1208 :: (store 4 into %ir.k); cg.c:855:28
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w16 = LDRWui $sp, 1, debug-location !1208 :: (dereferenceable load 4 from %ir.k); cg.c:855:28
SU(1):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1208; cg.c:855:28
SU(2):   STRWui renamable $w16, $sp, 1, debug-location !1208 :: (store 4 into %ir.k); cg.c:855:28

Fixup kills for %bb.4
Fixup kills for %bb.5
********** MI Scheduling **********
vecset:%bb.6 if.then5
  From: renamable $x8, renamable $x17 = LDPXi $sp, 3, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
    To: End RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8, renamable $x17 = LDPXi $sp, 3, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 27
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
    SU(8): Data Latency=4 Reg=$x17
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $d0 = LDRDui $sp, 1, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(4): Data Latency=4 Reg=$d0
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(2):   renamable $x16 = LDURXi $fp, -24, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(6): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x16
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(3):   renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 23
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(4):   STRDroX renamable $d0, renamable $x16, renamable $x8, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  # preds left       : 7
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 19
  Predecessors:
    SU(3): Data Latency=4 Reg=$x8
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=4 Reg=$x16
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$d0
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
SU(5):   renamable $x8 = LDRXui $sp, 3, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 18
  Predecessors:
    SU(4): Anti Latency=0
    SU(4): Ord  Latency=1 Memory
    SU(3): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
SU(6):   renamable $w16 = LDRWui $sp, 5, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Anti Latency=0
    SU(4): Ord  Latency=1 Memory
    SU(2): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w16
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
SU(7):   renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 14
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
SU(8):   STRWroX renamable $w16, renamable $x17, renamable $x8, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  # preds left       : 11
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 10
  Predecessors:
    SU(7): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
    SU(6): Data Latency=4 Reg=$w16
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x17
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(10): Anti Latency=0
    SU(9): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
SU(9):   renamable $x8 = LDRXui $sp, 3, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 9
  Predecessors:
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
    SU(7): Out  Latency=1
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=$x8
    SU(10): Data Latency=4 Reg=$x8
    SU(12): Ord  Latency=0 Memory
SU(10):   renamable $w16 = LDRWui renamable $x8, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 22
  Height             : 5
  Predecessors:
    SU(9): Data Latency=4 Reg=$x8
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
    SU(6): Out  Latency=1
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w16
    SU(12): Ord  Latency=0 Memory
SU(11):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1229; cg.c:864:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 26
  Height             : 1
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w16
  Successors:
    SU(12): Data Latency=1 Reg=$w16
SU(12):   STRWui renamable $w16, renamable $x8, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14
  # preds left       : 13
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 27
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=$w16
    SU(10): Ord  Latency=0 Memory
    SU(9): Data Latency=4 Reg=$x8
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 27
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 27
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8, renamable $x17 = LDPXi $sp, 3, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
  Ready @0c
  TopQ.A BotLatency SU(0) 27c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 27
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $d0 = LDRDui $sp, 1, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x16 = LDURXi $fp, -24, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 8 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDroX renamable $d0, renamable $x16, renamable $x8, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
  Ready @8c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 5
  Executed: 9c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 9c > CritPath 27
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $x8 = LDRXui $sp, 3, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w16 = LDRWui $sp, 5, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 13 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
  Ready @13c
  TopQ.A TopLatency SU(7) 13c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 17 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWroX renamable $w16, renamable $x17, renamable $x8, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
  Ready @17c
  TopQ.A TopLatency SU(8) 17c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $x8 = LDRXui $sp, 3, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
  Ready @18c
  TopQ.A TopLatency SU(9) 18c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 22 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w16 = LDRWui renamable $x8, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
  Ready @22c
  TopQ.A TopLatency SU(10) 22c
  *** Max MOps 1 at cycle 22
Cycle: 23 TopQ.A
TopQ.A @23c
  Retired: 11
  Executed: 23c
  Critical: 11c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 26 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1229; cg.c:864:21
  Ready @26c
  TopQ.A TopLatency SU(11) 26c
  *** Max MOps 1 at cycle 26
Cycle: 27 TopQ.A
TopQ.A @27c
  Retired: 12
  Executed: 27c
  Critical: 12c, 12 MOps
  ExpectedLatency: 26c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWui renamable $w16, renamable $x8, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14
  Ready @27c
  TopQ.A TopLatency SU(12) 27c
  *** Max MOps 1 at cycle 27
Cycle: 28 TopQ.A
TopQ.A @28c
  Retired: 13
  Executed: 28c
  Critical: 13c, 13 MOps
  ExpectedLatency: 27c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x8, renamable $x17 = LDPXi $sp, 3, debug-location !1219 :: (dereferenceable load 8 from %ir.nzv.addr), (dereferenceable load 8 from %ir.iv.addr); cg.c:862:12
SU(1):   renamable $d0 = LDRDui $sp, 1, debug-location !1216 :: (dereferenceable load 8 from %ir.val.addr); cg.c:862:19
SU(2):   renamable $x16 = LDURXi $fp, -24, debug-location !1218 :: (dereferenceable load 8 from %ir.v.addr); cg.c:862:9
SU(3):   renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1220 :: (load 4 from %ir.14); cg.c:862:11
SU(4):   STRDroX renamable $d0, renamable $x16, renamable $x8, 0, 1, debug-location !1221 :: (store 8 into %ir.arrayidx7); cg.c:862:17
SU(5):   renamable $x8 = LDRXui $sp, 3, debug-location !1224 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:863:13
SU(6):   renamable $w16 = LDRWui $sp, 5, debug-location !1222 :: (dereferenceable load 4 from %ir.i.addr); cg.c:863:20
SU(7):   renamable $x8 = LDRSWui renamable $x8, 0, debug-location !1225 :: (load 4 from %ir.18); cg.c:863:12
SU(8):   STRWroX renamable $w16, renamable $x17, renamable $x8, 0, 1, debug-location !1226 :: (store 4 into %ir.arrayidx9); cg.c:863:18
SU(9):   renamable $x8 = LDRXui $sp, 3, debug-location !1227 :: (dereferenceable load 8 from %ir.nzv.addr); cg.c:864:17
SU(10):   renamable $w16 = LDRWui renamable $x8, 0, debug-location !1228 :: (load 4 from %ir.20); cg.c:864:16
SU(11):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1229; cg.c:864:21
SU(12):   STRWui renamable $w16, renamable $x8, 0, debug-location !1231 :: (store 4 into %ir.22); cg.c:864:14

Fixup kills for %bb.6
Fixup kills for %bb.7
Before MISched:
# Machine code for function sparse: NoPHIs, TracksLiveness
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP+40]
  fi#-5: size=4, align=16, fixed, at location [SP+32]
  fi#-4: size=4, align=8, fixed, at location [SP+24]
  fi#-3: size=8, align=16, fixed, at location [SP+16]
  fi#-2: size=8, align=8, fixed, at location [SP+8]
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=4, align=4, at location [SP]
  fi#17: size=4, align=4, at location [SP]
  fi#18: size=4, align=4, at location [SP]
  fi#19: size=4, align=4, at location [SP]
  fi#20: size=4, align=4, at location [SP]
  fi#21: size=4, align=4, at location [SP]
  fi#22: size=4, align=4, at location [SP]
  fi#23: size=4, align=4, at location [SP]
  fi#24: size=8, align=8, at location [SP]
  fi#25: size=8, align=8, at location [SP]
  fi#26: size=8, align=8, at location [SP]
  fi#27: size=8, align=8, at location [SP]
  fi#28: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 1.000000e+00, align=8
Function Live Ins: $x0 in %0, $x1 in %1, $x2 in %2, $w3 in %3, $w4 in %4, $w5 in %5, $d0 in %6, $d1 in %7

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x0, $x1, $x2, $w3, $w4, $w5, $d0, $d1
  %7:fpr64 = COPY $d1
  %6:fpr64 = COPY $d0
  %5:gpr32 = COPY $w5
  %4:gpr32 = COPY $w4
  %3:gpr32 = COPY $w3
  %2:gpr64 = COPY $x2
  %1:gpr64 = COPY $x1
  %0:gpr64 = COPY $x0
  STRXui %0:gpr64, %stack.0.a.addr, 0 :: (store 8 into %ir.a.addr)
  STRXui %1:gpr64, %stack.1.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  STRXui %2:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  STRWui %3:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
  STRWui %4:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  STRWui %5:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
  STRDui %6:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
  STRDui %7:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
  %8:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  %9:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1296 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  %10:gpr32common = nsw SUBWrr %8:gpr32, %9:gpr32, debug-location !1297; cg.c:659:21
  %11:gpr32common = nsw ADDWri %10:gpr32common, 1, 0, debug-location !1298; cg.c:659:32
  STRWui %11:gpr32common, %stack.14.nrows, 0, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
  STRWui $wzr, %stack.16.j, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %13:gpr32 = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  %14:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1306; cg.c:664:27
  dead $wzr = SUBSWrr %13:gpr32, %15:gpr32common, implicit-def $nzcv, debug-location !1308; cg.c:664:5
  Bcc 10, %bb.3, implicit killed $nzcv, debug-location !1308; cg.c:664:5
  B %bb.2, debug-location !1308; cg.c:664:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %327:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  %328:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  STRWroX $wzr, %327:gpr64common, %328:gpr64, 0, 1, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
  %330:gpr32common = LDRWui %stack.16.j, 0, debug-location !1313 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0, debug-location !1313; cg.c:664:33
  STRWui %331:gpr32common, %stack.16.j, 0, debug-location !1313 :: (store 4 into %ir.j); cg.c:664:33
  B %bb.1, debug-location !1314; cg.c:664:5

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, %stack.15.i, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
  undef %311.sub_32:gpr64 = MOVi32imm 56

bb.4.for.cond2:
; predecessors: %bb.3, %bb.8
  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)

  %18:gpr32 = LDRWui %stack.15.i, 0, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  %19:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  dead $wzr = SUBSWrr %18:gpr32, %19:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:668:5
  Bcc 10, %bb.9, implicit killed $nzcv, debug-location !1324; cg.c:668:5
  B %bb.5, debug-location !1324; cg.c:668:5

bb.5.for.body4:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  STRWui $wzr, %stack.19.nza, 0, debug-location !1325 :: (store 4 into %ir.nza); cg.c:669:18

bb.6.for.cond5:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

  %301:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  %302:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  %303:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  %304:gpr32 = LDRWroX %302:gpr64common, %303:gpr64, 0, 1, debug-location !1331 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  dead $wzr = SUBSWrr %301:gpr32, %304:gpr32, implicit-def $nzcv, debug-location !1334; cg.c:669:9
  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1334; cg.c:669:9
  B %bb.7, debug-location !1334; cg.c:669:9

bb.7.for.body9:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %308:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  %309:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  %313:gpr64common = MADDXrrr %309:gpr64, %311:gpr64, %308:gpr64, debug-location !1335; cg.c:670:17
  %314:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  %315:gpr32common = LDRWroX %313:gpr64common, %314:gpr64, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  undef %318.sub_32:gpr64common = nsw ADDWri %315:gpr32common, 1, 0, debug-location !1339; cg.c:670:30
  STRWui %318.sub_32:gpr64common, %stack.16.j, 0, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
  %317:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  %320:gpr64 = SBFMXri %318:gpr64common, 62, 31, debug-location !1341; cg.c:671:25
  %321:gpr32 = LDRWroX %317:gpr64common, %320:gpr64, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  %322:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
  %323:gpr32 = LDRWroX %322:gpr64common, %309:gpr64, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  %324:gpr32 = nsw ADDWrr %321:gpr32, %323:gpr32, debug-location !1345; cg.c:671:35
  STRWroX %324:gpr32, %317:gpr64common, %320:gpr64, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  %325:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1349 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !1349; cg.c:669:41
  STRWui %326:gpr32common, %stack.19.nza, 0, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41
  B %bb.6, debug-location !1350; cg.c:669:9

bb.8.for.inc25:
; predecessors: %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %306:gpr32common = LDRWui %stack.15.i, 0, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  %307:gpr32common = nsw ADDWri %306:gpr32common, 1, 0, debug-location !1353; cg.c:668:25
  STRWui %307:gpr32common, %stack.15.i, 0, debug-location !1353 :: (store 4 into %ir.i); cg.c:668:25
  B %bb.4, debug-location !1354; cg.c:668:5

bb.9.for.end27:
; predecessors: %bb.4
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %21:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  STRWui $wzr, %21:gpr64common, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  %23:gpr32 = MOVi32imm 1
  STRWui %23:gpr32, %stack.16.j, 0, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12

bb.10.for.cond29:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  %24:gpr32 = LDRWui %stack.16.j, 0, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  %25:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  %26:gpr32common = nsw ADDWri %25:gpr32common, 1, 0, debug-location !1365; cg.c:676:27
  dead $wzr = SUBSWrr %24:gpr32, %26:gpr32common, implicit-def $nzcv, debug-location !1367; cg.c:676:5
  Bcc 10, %bb.12, implicit killed $nzcv, debug-location !1367; cg.c:676:5
  B %bb.11, debug-location !1367; cg.c:676:5

bb.11.for.body32:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %292:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  %293:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  %294:gpr64common = ADDXrs %292:gpr64, %293:gpr64, 2, debug-location !1368; cg.c:677:21
  %295:gpr32 = LDRWui %294:gpr64common, 0, debug-location !1368 :: (load 4 from %ir.arrayidx34); cg.c:677:21
  %296:gpr32 = LDURWi %294:gpr64common, -4, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  %297:gpr32 = nsw ADDWrr %295:gpr32, %296:gpr32, debug-location !1374; cg.c:677:31
  STRWui %297:gpr32, %294:gpr64common, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  %298:gpr32common = LDRWui %stack.16.j, 0, debug-location !1378 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  %299:gpr32common = nsw ADDWri %298:gpr32common, 1, 0, debug-location !1378; cg.c:676:33
  STRWui %299:gpr32common, %stack.16.j, 0, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33
  B %bb.10, debug-location !1379; cg.c:676:5

bb.12.for.end43:
; predecessors: %bb.10
  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

  %28:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  %29:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  %30:gpr32common = LDRWroX %28:gpr64common, %29:gpr64, 0, 1, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  %31:gpr32common = SUBWri %30:gpr32common, 1, 0, debug-location !1384; cg.c:679:25
  STRWui %31:gpr32common, %stack.19.nza, 0, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
  %32:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1388 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  dead $wzr = SUBSWrr %31:gpr32common, %32:gpr32, implicit-def $nzcv, debug-location !1390; cg.c:685:9
  Bcc 13, %bb.14, implicit killed $nzcv, debug-location !1390; cg.c:685:9
  B %bb.13, debug-location !1390; cg.c:685:9

bb.13.if.then:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1391; cg.c:686:9
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_37_Space_for_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_37_Space_for_, debug-location !1391; cg.c:686:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !1391; cg.c:686:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1391; cg.c:686:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1393; cg.c:687:41
  PCN_STACKMAP 0, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.4.nz.addr, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1393 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.4.nz.addr, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:687:41
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1393; cg.c:687:41
  %36:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  %37:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1395; cg.c:687:9
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_38_nza__nzmax, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
  $w1 = COPY %36:gpr32, debug-location !1395; cg.c:687:9
  $w2 = COPY %37:gpr32, debug-location !1395; cg.c:687:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !1395; cg.c:687:9
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1395; cg.c:687:9
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1396; cg.c:689:5
  PCN_STACKMAP 1, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %36:gpr32, %37:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1396 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:689:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1396; cg.c:689:5

bb.14.if.end:
; predecessors: %bb.12, %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  STRWui $wzr, %stack.16.j, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
  %289:gpr32 = MOVi32imm -1

bb.15.for.cond49:
; predecessors: %bb.14, %bb.19
  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

  %41:gpr32 = LDRWui %stack.16.j, 0, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  %42:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  dead $wzr = SUBSWrr %41:gpr32, %42:gpr32, implicit-def $nzcv, debug-location !1404; cg.c:694:5
  Bcc 10, %bb.20, implicit killed $nzcv, debug-location !1404; cg.c:694:5
  B %bb.16, debug-location !1404; cg.c:694:5

bb.16.for.body51:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %270:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  %271:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  %272:gpr32 = LDRWroX %270:gpr64common, %271:gpr64, 0, 1, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  STRWui %272:gpr32, %stack.20.k, 0, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16

bb.17.for.cond54:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

  %273:gpr32 = LDRWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  %274:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  %275:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  %276:gpr64common = ADDXrs %274:gpr64, %275:gpr64, 2, debug-location !1413; cg.c:695:33
  %277:gpr32 = LDRWui %276:gpr64common, 1, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  dead $wzr = SUBSWrr %273:gpr32, %277:gpr32, implicit-def $nzcv, debug-location !1417; cg.c:695:9
  Bcc 10, %bb.19, implicit killed $nzcv, debug-location !1417; cg.c:695:9
  B %bb.18, debug-location !1417; cg.c:695:9

bb.18.for.body59:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)

  %284:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  %285:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  STRXroX $xzr, %284:gpr64common, %285:gpr64, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  %287:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  STRWroX %289:gpr32, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  %290:gpr32common = LDRWui %stack.20.k, 0, debug-location !1425 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  %291:gpr32common = nsw ADDWri %290:gpr32common, 1, 0, debug-location !1425; cg.c:695:49
  STRWui %291:gpr32common, %stack.20.k, 0, debug-location !1425 :: (store 4 into %ir.k); cg.c:695:49
  B %bb.17, debug-location !1426; cg.c:695:9

bb.19.for.end66:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  %279:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  %280:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  STRWroX $wzr, %279:gpr64common, %280:gpr64, 0, 1, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  %282:gpr32common = LDRWui %stack.16.j, 0, debug-location !1432 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  %283:gpr32common = nsw ADDWri %282:gpr32common, 1, 0, debug-location !1432; cg.c:694:29
  STRWui %283:gpr32common, %stack.16.j, 0, debug-location !1432 :: (store 4 into %ir.j); cg.c:694:29
  B %bb.15, debug-location !1433; cg.c:694:5

bb.20.for.end71:
; predecessors: %bb.15
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %44:gpr64 = MOVi64imm 4607182418800017408
  STRXui %44:gpr64, %stack.24.size, 0, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
  %45:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  undef %47.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  %49:fpr128 = SSHLLv2i32_shift %47:fpr64, 0, debug-location !1439; cg.c:706:31
  %51:fpr64 = SCVTFv1i64 %49.dsub:fpr128, debug-location !1439; cg.c:706:31
  %52:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  %53:fpr64 = LDRDui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  %54:fpr64 = FDIVDrr %53:fpr64, %51:fpr64, debug-location !1440; cg.c:706:29
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1441; cg.c:706:13
  $d0 = COPY %45:fpr64, debug-location !1441; cg.c:706:13
  $d1 = COPY %54:fpr64, debug-location !1441; cg.c:706:13
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1441; cg.c:706:13
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1441; cg.c:706:13
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1442; cg.c:706:11
  PCN_STACKMAP 2, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, %54:fpr64, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %45:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1442 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:706:11
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1442; cg.c:706:11
  %55:fpr64 = COPY $d0, debug-location !1441; cg.c:706:13
  STRDui %55:fpr64, %stack.26.ratio, 0, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
  STRWui $wzr, %stack.15.i, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
  undef %147.sub_32:gpr64 = MOVi32imm 56
  undef %155.sub_32:gpr64 = MOVi32imm 112
  %244:gpr32 = MOVi32imm 1

bb.21.for.cond73:
; predecessors: %bb.20, %bb.47
  successors: %bb.22(0x7c000000), %bb.48(0x04000000); %bb.22(96.88%), %bb.48(3.12%)

  %57:gpr32 = LDRWui %stack.15.i, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  %58:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1448 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  dead $wzr = SUBSWrr %57:gpr32, %58:gpr32, implicit-def $nzcv, debug-location !1450; cg.c:708:5
  Bcc 10, %bb.48, implicit killed $nzcv, debug-location !1450; cg.c:708:5
  B %bb.22, debug-location !1450; cg.c:708:5

bb.22.for.body76:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  STRWui $wzr, %stack.19.nza, 0, debug-location !1451 :: (store 4 into %ir.nza); cg.c:709:18

bb.23.for.cond77:
; predecessors: %bb.22, %bb.46
  successors: %bb.24(0x7c000000), %bb.47(0x04000000); %bb.24(96.88%), %bb.47(3.12%)

  %134:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  %135:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  %136:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  %137:gpr32 = LDRWroX %135:gpr64common, %136:gpr64, 0, 1, debug-location !1457 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  dead $wzr = SUBSWrr %134:gpr32, %137:gpr32, implicit-def $nzcv, debug-location !1460; cg.c:709:9
  Bcc 10, %bb.47, implicit killed $nzcv, debug-location !1460; cg.c:709:9
  B %bb.24, debug-location !1460; cg.c:709:9

bb.24.for.body82:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %144:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  %145:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  %149:gpr64common = MADDXrrr %145:gpr64, %147:gpr64, %144:gpr64, debug-location !1461; cg.c:710:17
  %150:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  %151:gpr32 = LDRWroX %149:gpr64common, %150:gpr64, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  STRWui %151:gpr32, %stack.16.j, 0, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
  %152:fpr64 = LDRDui %stack.24.size, 0, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  %153:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  %157:gpr64common = MADDXrrr %145:gpr64, %155:gpr64, %153:gpr64, debug-location !1467; cg.c:712:28
  %158:fpr64 = LDRDroX %157:gpr64common, %150:gpr64, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  %159:fpr64 = FMULDrr %152:fpr64, %158:fpr64, debug-location !1470; cg.c:712:26
  STRDui %159:fpr64, %stack.25.scale, 0, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
  STRWui $wzr, %stack.22.nzrow, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24

bb.25.for.cond91:
; predecessors: %bb.24, %bb.45
  successors: %bb.26(0x7c000000), %bb.46(0x04000000); %bb.26(96.88%), %bb.46(3.12%)

  %161:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  %162:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  %163:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  %164:gpr32 = LDRWroX %162:gpr64common, %163:gpr64, 0, 1, debug-location !1477 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  dead $wzr = SUBSWrr %161:gpr32, %164:gpr32, implicit-def $nzcv, debug-location !1480; cg.c:713:13
  Bcc 10, %bb.46, implicit killed $nzcv, debug-location !1480; cg.c:713:13
  B %bb.26, debug-location !1480; cg.c:713:13

bb.26.for.body96:
; predecessors: %bb.25
  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

  %168:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  %169:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  %173:gpr64common = MADDXrrr %169:gpr64, %147:gpr64, %168:gpr64, debug-location !1481; cg.c:714:24
  %174:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  %175:gpr32 = LDRWroX %173:gpr64common, %174:gpr64, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  STRWui %175:gpr32, %stack.23.jcol, 0, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
  %176:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  %180:gpr64common = MADDXrrr %169:gpr64, %155:gpr64, %176:gpr64, debug-location !1486; cg.c:715:22
  %181:fpr64 = LDRDroX %180:gpr64common, %174:gpr64, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  %182:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1489 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  %183:fpr64 = FMULDrr %181:fpr64, %182:fpr64, debug-location !1490; cg.c:715:37
  STRDui %183:fpr64, %stack.27.va, 0, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
  %184:gpr32 = LDRWui %stack.16.j, 0, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  dead $wzr = SUBSWrr %175:gpr32, %184:gpr32, implicit-def $nzcv, debug-location !1496; cg.c:721:31
  Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1496; cg.c:721:31
  B %bb.27, debug-location !1496; cg.c:721:31

bb.27.land.lhs.true:
; predecessors: %bb.26
  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

  %186:gpr32 = LDRWui %stack.16.j, 0, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  %187:gpr32 = LDRWui %stack.15.i, 0, debug-location !1498 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
  dead $wzr = SUBSWrr %186:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1500; cg.c:721:21
  Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1500; cg.c:721:21
  B %bb.28, debug-location !1500; cg.c:721:21

bb.28.if.then110:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)

  %189:fpr64 = LDRDui %stack.27.va, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  %190:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1503 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
  %191:fpr64 = FADDDrr %189:fpr64, %190:fpr64, debug-location !1504; cg.c:722:29
  %192:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1505 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
  %193:fpr64 = FSUBDrr %191:fpr64, %192:fpr64, debug-location !1506; cg.c:722:37
  STRDui %193:fpr64, %stack.27.va, 0, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24

bb.29.if.end113:
; predecessors: %bb.26, %bb.27, %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  STRWui $wzr, %stack.28.cont40, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
  %195:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  %196:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  %197:gpr32 = LDRWroX %195:gpr64common, %196:gpr64, 0, 1, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  STRWui %197:gpr32, %stack.20.k, 0, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24

bb.30.for.cond116:
; predecessors: %bb.29, %bb.42
  successors: %bb.31(0x7c000000), %bb.43(0x04000000); %bb.31(96.88%), %bb.43(3.12%)

  %198:gpr32 = LDRWui %stack.20.k, 0, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  %199:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  %200:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  %201:gpr64common = ADDXrs %199:gpr64, %200:gpr64, 2, debug-location !1517; cg.c:726:41
  %202:gpr32 = LDRWui %201:gpr64common, 1, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  dead $wzr = SUBSWrr %198:gpr32, %202:gpr32, implicit-def $nzcv, debug-location !1521; cg.c:726:17
  Bcc 10, %bb.43, implicit killed $nzcv, debug-location !1521; cg.c:726:17
  B %bb.31, debug-location !1521; cg.c:726:17

bb.31.for.body122:
; predecessors: %bb.30
  successors: %bb.32(0x04000000), %bb.38(0x7c000000); %bb.32(3.12%), %bb.38(96.88%)

  %204:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  %205:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  %206:gpr32 = LDRWroX %204:gpr64common, %205:gpr64, 0, 1, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  %207:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1526 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  dead $wzr = SUBSWrr %206:gpr32, %207:gpr32, implicit-def $nzcv, debug-location !1528; cg.c:727:25
  Bcc 13, %bb.38, implicit killed $nzcv, debug-location !1528; cg.c:727:25
  B %bb.32, debug-location !1528; cg.c:727:25

bb.32.if.then127:
; predecessors: %bb.31
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  %230:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  %231:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  %232:gpr64common = ADDXrs %230:gpr64, %231:gpr64, 2, debug-location !1529; cg.c:731:35
  %233:gpr32common = LDRWui %232:gpr64common, 1, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  %234:gpr32common = SUBWri %233:gpr32common, 2, 0, debug-location !1534; cg.c:731:49
  STRWui %234:gpr32common, %stack.21.kk, 0, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33

bb.33.for.cond132:
; predecessors: %bb.32, %bb.36
  successors: %bb.34(0x7c000000), %bb.37(0x04000000); %bb.34(96.88%), %bb.37(3.12%)

  %235:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  %236:gpr32 = LDRWui %stack.20.k, 0, debug-location !1539 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  dead $wzr = SUBSWrr %235:gpr32, %236:gpr32, implicit-def $nzcv, debug-location !1541; cg.c:731:25
  Bcc 11, %bb.37, implicit killed $nzcv, debug-location !1541; cg.c:731:25
  B %bb.34, debug-location !1541; cg.c:731:25

bb.34.for.body135:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

  %257:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  %258:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  %259:gpr32 = LDRWroX %257:gpr64common, %258:gpr64, 0, 1, debug-location !1542 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  TBNZW %259:gpr32, 31, %bb.36, debug-location !1547; cg.c:732:33
  B %bb.35, debug-location !1547; cg.c:732:33

bb.35.if.then140:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)

  %260:gpr64 = LDRXui %stack.0.a.addr, 0, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  %262:gpr64common = ADDXrs %260:gpr64, %261:gpr64, 3, debug-location !1548; cg.c:733:45
  %263:fpr64 = LDRDui %262:gpr64common, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  STRDui %263:fpr64, %262:gpr64common, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  %264:gpr64 = LDRXui %stack.1.colidx.addr, 0, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  %265:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  %266:gpr64common = ADDXrs %264:gpr64, %265:gpr64, 2, debug-location !1555; cg.c:734:50
  %267:gpr32 = LDRWui %266:gpr64common, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  STRWui %267:gpr32, %266:gpr64common, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48

bb.36.for.inc152:
; predecessors: %bb.34, %bb.35
  successors: %bb.33(0x80000000); %bb.33(100.00%)

  %268:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  %269:gpr32common = nsw SUBWri %268:gpr32common, 1, 0, debug-location !1562; cg.c:731:65
  STRWui %269:gpr32common, %stack.21.kk, 0, debug-location !1562 :: (store 4 into %ir.kk); cg.c:731:65
  B %bb.33, debug-location !1563; cg.c:731:25

bb.37.for.end153:
; predecessors: %bb.33
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %238:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  %239:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  %240:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  STRWroX %238:gpr32, %239:gpr64common, %240:gpr64, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  %241:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  %242:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  STRXroX $xzr, %241:gpr64common, %242:gpr64, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
  B %bb.43, debug-location !1574; cg.c:740:25

bb.38.if.else:
; predecessors: %bb.31
  successors: %bb.39(0x04000000), %bb.40(0x7c000000); %bb.39(3.12%), %bb.40(96.88%)

  %209:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  %210:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  %211:gpr32common = LDRWroX %209:gpr64common, %210:gpr64, 0, 1, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  dead $wzr = ADDSWri %211:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1579; cg.c:742:30
  Bcc 1, %bb.40, implicit killed $nzcv, debug-location !1579; cg.c:742:30
  B %bb.39, debug-location !1579; cg.c:742:30

bb.39.if.then162:
; predecessors: %bb.38
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %226:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  %227:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  %228:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  STRWroX %226:gpr32, %227:gpr64common, %228:gpr64, 0, 1, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32
  B %bb.43, debug-location !1586; cg.c:745:25

bb.40.if.else165:
; predecessors: %bb.38
  successors: %bb.41(0x04000000), %bb.42(0x7c000000); %bb.41(3.12%), %bb.42(96.88%)

  %213:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  %214:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  %215:gpr32 = LDRWroX %213:gpr64common, %214:gpr64, 0, 1, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  %216:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1590 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  dead $wzr = SUBSWrr %215:gpr32, %216:gpr32, implicit-def $nzcv, debug-location !1592; cg.c:747:30
  Bcc 1, %bb.42, implicit killed $nzcv, debug-location !1592; cg.c:747:30
  B %bb.41, debug-location !1592; cg.c:747:30

bb.41.if.then170:
; predecessors: %bb.40
  successors: %bb.43(0x80000000); %bb.43(100.00%)

  %220:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  %221:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  %222:gpr64 = UBFMXri %221:gpr64, 62, 61, debug-location !1593; cg.c:751:36
  %223:gpr32common = LDRWroX %220:gpr64common, %222:gpr64, 0, 0, debug-location !1593 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  %224:gpr32common = nsw ADDWri %223:gpr32common, 1, 0, debug-location !1596; cg.c:751:45
  STRWroX %224:gpr32common, %220:gpr64common, %222:gpr64, 0, 0, debug-location !1599 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32
  B %bb.43, debug-location !1601; cg.c:753:25

bb.42.for.inc179:
; predecessors: %bb.40
  successors: %bb.30(0x80000000); %bb.30(100.00%)

  %218:gpr32common = LDRWui %stack.20.k, 0, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0, debug-location !1602; cg.c:726:57
  STRWui %219:gpr32common, %stack.20.k, 0, debug-location !1602 :: (store 4 into %ir.k); cg.c:726:57
  B %bb.30, debug-location !1603; cg.c:726:17

bb.43.for.end181:
; predecessors: %bb.30, %bb.41, %bb.39, %bb.37
  successors: %bb.44(0x30000000), %bb.45(0x50000000); %bb.44(37.50%), %bb.45(62.50%)

  %245:gpr32 = LDRWui %stack.28.cont40, 0, debug-location !1606 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:21
  CBNZW %245:gpr32, %bb.45, debug-location !1609; cg.c:756:21
  B %bb.44, debug-location !1609; cg.c:756:21

bb.44.if.then184:
; predecessors: %bb.43
  successors: %bb.45(0x80000000); %bb.45(100.00%)

  %246:gpr32 = LDRWui %stack.15.i, 0, debug-location !1610 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1612; cg.c:757:21
  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_39_internal_e, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
  $w1 = COPY %246:gpr32, debug-location !1612; cg.c:757:21
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !1612; cg.c:757:21
  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1612; cg.c:757:21
  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1613; cg.c:760:17
  PCN_STACKMAP 3, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %246:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1613 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:760:17
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1613; cg.c:760:17

bb.45.if.end186:
; predecessors: %bb.43, %bb.44
  successors: %bb.25(0x80000000); %bb.25(100.00%)

  %249:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  %250:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  %251:gpr64 = UBFMXri %250:gpr64, 61, 60, debug-location !1614; cg.c:761:24
  %252:fpr64 = LDRDroX %249:gpr64common, %251:gpr64, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  %253:fpr64 = LDRDui %stack.27.va, 0, debug-location !1616 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  %254:fpr64 = FADDDrr %252:fpr64, %253:fpr64, debug-location !1617; cg.c:761:29
  STRDroX %254:fpr64, %249:gpr64common, %251:gpr64, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  %255:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1621 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0, debug-location !1621; cg.c:713:51
  STRWui %256:gpr32common, %stack.22.nzrow, 0, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51
  B %bb.25, debug-location !1622; cg.c:713:13

bb.46.for.inc195:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)

  %166:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  %167:gpr32common = nsw ADDWri %166:gpr32common, 1, 0, debug-location !1625; cg.c:709:41
  STRWui %167:gpr32common, %stack.19.nza, 0, debug-location !1625 :: (store 4 into %ir.nza); cg.c:709:41
  B %bb.23, debug-location !1626; cg.c:709:9

bb.47.for.end197:
; predecessors: %bb.23
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  %139:fpr64 = LDRDui %stack.24.size, 0, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  %140:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1630 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  %141:fpr64 = FMULDrr %139:fpr64, %140:fpr64, debug-location !1631; cg.c:764:21
  STRDui %141:fpr64, %stack.24.size, 0, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
  %142:gpr32common = LDRWui %stack.15.i, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0, debug-location !1633; cg.c:708:25
  STRWui %143:gpr32common, %stack.15.i, 0, debug-location !1633 :: (store 4 into %ir.i); cg.c:708:25
  B %bb.21, debug-location !1634; cg.c:708:5

bb.48.for.end201:
; predecessors: %bb.21
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %60:gpr32 = MOVi32imm 1
  STRWui %60:gpr32, %stack.16.j, 0, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12

bb.49.for.cond202:
; predecessors: %bb.48, %bb.50
  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

  %61:gpr32 = LDRWui %stack.16.j, 0, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  %62:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1642 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  dead $wzr = SUBSWrr %61:gpr32, %62:gpr32, implicit-def $nzcv, debug-location !1644; cg.c:770:5
  Bcc 10, %bb.51, implicit killed $nzcv, debug-location !1644; cg.c:770:5
  B %bb.50, debug-location !1644; cg.c:770:5

bb.50.for.body205:
; predecessors: %bb.49
  successors: %bb.49(0x80000000); %bb.49(100.00%)

  %125:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  %126:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  %127:gpr64common = ADDXrs %125:gpr64, %126:gpr64, 2, debug-location !1645; cg.c:771:20
  %128:gpr32 = LDRWui %127:gpr64common, 0, debug-location !1645 :: (load 4 from %ir.arrayidx207); cg.c:771:20
  %129:gpr32 = LDURWi %127:gpr64common, -4, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  %130:gpr32 = nsw ADDWrr %128:gpr32, %129:gpr32, debug-location !1651; cg.c:771:29
  STRWui %130:gpr32, %127:gpr64common, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  %131:gpr32common = LDRWui %stack.16.j, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  %132:gpr32common = nsw ADDWri %131:gpr32common, 1, 0, debug-location !1655; cg.c:770:29
  STRWui %132:gpr32common, %stack.16.j, 0, debug-location !1655 :: (store 4 into %ir.j); cg.c:770:29
  B %bb.49, debug-location !1656; cg.c:770:5

bb.51.for.end216:
; predecessors: %bb.49
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  STRWui $wzr, %stack.16.j, 0, debug-location !1659 :: (store 4 into %ir.j); cg.c:774:12

bb.52.for.cond217:
; predecessors: %bb.51, %bb.59
  successors: %bb.53(0x7c000000), %bb.60(0x04000000); %bb.53(96.88%), %bb.60(3.12%)

  %65:gpr32 = LDRWui %stack.16.j, 0, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  %66:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1664 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  dead $wzr = SUBSWrr %65:gpr32, %66:gpr32, implicit-def $nzcv, debug-location !1666; cg.c:774:5
  Bcc 10, %bb.60, implicit killed $nzcv, debug-location !1666; cg.c:774:5
  B %bb.53, debug-location !1666; cg.c:774:5

bb.53.for.body220:
; predecessors: %bb.52
  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

  %87:gpr32common = LDRWui %stack.16.j, 0, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  dead $wzr = SUBSWri %87:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1671; cg.c:775:13
  Bcc 11, %bb.55, implicit killed $nzcv, debug-location !1671; cg.c:775:13
  B %bb.54, debug-location !1671; cg.c:775:13

bb.54.if.then223:
; predecessors: %bb.53
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  %90:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  %91:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  %92:gpr64 = UBFMXri %91:gpr64, 62, 61, debug-location !1672; cg.c:776:18
  %93:gpr32 = LDRWroX %90:gpr64common, %92:gpr64, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  %94:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  %95:gpr64common = ADDXrr %92:gpr64, %94:gpr64, debug-location !1675; cg.c:776:30
  %96:gpr32 = LDURWi %95:gpr64common, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  %97:gpr32 = nsw SUBWrr %93:gpr32, %96:gpr32, debug-location !1678; cg.c:776:28
  STRWui %97:gpr32, %stack.17.j1, 0, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
  B %bb.56, debug-location !1680; cg.c:777:9

bb.55.if.else230:
; predecessors: %bb.53
  successors: %bb.56(0x80000000); %bb.56(100.00%)

  STRWui $wzr, %stack.17.j1, 0, debug-location !1681 :: (store 4 into %ir.j1); cg.c:779:16

bb.56.if.end231:
; predecessors: %bb.55, %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %98:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  %99:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  %100:gpr64 = UBFMXri %99:gpr64, 62, 61, debug-location !1690; cg.c:782:15
  %101:gpr64common = ADDXrr %100:gpr64, %98:gpr64, debug-location !1683; cg.c:781:14
  %102:gpr32 = LDRWui %101:gpr64common, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  %103:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  %104:gpr32 = LDRWroX %103:gpr64common, %100:gpr64, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  %105:gpr32 = nsw SUBWrr %102:gpr32, %104:gpr32, debug-location !1688; cg.c:781:28
  STRWui %105:gpr32, %stack.18.j2, 0, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
  %106:gpr32 = LDRWui %101:gpr64common, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  STRWui %106:gpr32, %stack.19.nza, 0, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
  %107:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  STRWui %107:gpr32, %stack.20.k, 0, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16

bb.57.for.cond240:
; predecessors: %bb.56, %bb.58
  successors: %bb.58(0x7c000000), %bb.59(0x04000000); %bb.58(96.88%), %bb.59(3.12%)

  %108:gpr32 = LDRWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  %109:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1699 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  dead $wzr = SUBSWrr %108:gpr32, %109:gpr32, implicit-def $nzcv, debug-location !1701; cg.c:783:9
  Bcc 10, %bb.59, implicit killed $nzcv, debug-location !1701; cg.c:783:9
  B %bb.58, debug-location !1701; cg.c:783:9

bb.58.for.body243:
; predecessors: %bb.57
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  %113:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  %114:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
  %115:fpr64 = LDRDroX %113:gpr64common, %114:gpr64, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  %116:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
  STRDroX %115:fpr64, %113:gpr64common, %116:gpr64, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  %117:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  %118:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
  %119:gpr32 = LDRWroX %117:gpr64common, %118:gpr64, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  %120:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
  STRWroX %119:gpr32, %117:gpr64common, %120:gpr64, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  %121:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1713 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
  %122:gpr32common = nsw ADDWri %121:gpr32common, 1, 0, debug-location !1714; cg.c:786:23
  STRWui %122:gpr32common, %stack.19.nza, 0, debug-location !1715 :: (store 4 into %ir.nza); cg.c:786:17
  %123:gpr32common = LDRWui %stack.20.k, 0, debug-location !1716 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
  %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !1716; cg.c:783:31
  STRWui %124:gpr32common, %stack.20.k, 0, debug-location !1716 :: (store 4 into %ir.k); cg.c:783:31
  B %bb.57, debug-location !1717; cg.c:783:9

bb.59.for.inc256:
; predecessors: %bb.57
  successors: %bb.52(0x80000000); %bb.52(100.00%)

  %111:gpr32common = LDRWui %stack.16.j, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  %112:gpr32common = nsw ADDWri %111:gpr32common, 1, 0, debug-location !1720; cg.c:774:29
  STRWui %112:gpr32common, %stack.16.j, 0, debug-location !1720 :: (store 4 into %ir.j); cg.c:774:29
  B %bb.52, debug-location !1721; cg.c:774:5

bb.60.for.end258:
; predecessors: %bb.52
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %68:gpr32 = MOVi32imm 1
  STRWui %68:gpr32, %stack.16.j, 0, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12

bb.61.for.cond259:
; predecessors: %bb.60, %bb.62
  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

  %69:gpr32 = LDRWui %stack.16.j, 0, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
  %70:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  %71:gpr32common = nsw ADDWri %70:gpr32common, 1, 0, debug-location !1730; cg.c:789:27
  dead $wzr = SUBSWrr %69:gpr32, %71:gpr32common, implicit-def $nzcv, debug-location !1732; cg.c:789:5
  Bcc 10, %bb.63, implicit killed $nzcv, debug-location !1732; cg.c:789:5
  B %bb.62, debug-location !1732; cg.c:789:5

bb.62.for.body263:
; predecessors: %bb.61
  successors: %bb.61(0x80000000); %bb.61(100.00%)

  %77:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  %78:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  %79:gpr64 = UBFMXri %78:gpr64, 62, 61, debug-location !1733; cg.c:790:21
  %80:gpr32 = LDRWroX %77:gpr64common, %79:gpr64, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  %81:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  %82:gpr64common = ADDXrr %79:gpr64, %81:gpr64, debug-location !1736; cg.c:790:33
  %83:gpr32 = LDURWi %82:gpr64common, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  %84:gpr32 = nsw SUBWrr %80:gpr32, %83:gpr32, debug-location !1739; cg.c:790:31
  STRWroX %84:gpr32, %77:gpr64common, %79:gpr64, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  %85:gpr32common = LDRWui %stack.16.j, 0, debug-location !1743 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !1743; cg.c:789:33
  STRWui %86:gpr32common, %stack.16.j, 0, debug-location !1743 :: (store 4 into %ir.j); cg.c:789:33
  B %bb.61, debug-location !1744; cg.c:789:5

bb.63.for.end274:
; predecessors: %bb.61

  %73:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  %74:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  %75:gpr32common = LDRWroX %73:gpr64common, %74:gpr64, 0, 1, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  %76:gpr32common = SUBWri %75:gpr32common, 1, 0, debug-location !1749; cg.c:792:25
  STRWui %76:gpr32common, %stack.19.nza, 0, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
  RET_ReallyLR debug-location !1751; cg.c:793:1

# End machine code for function sparse.

********** MI Scheduling **********
sparse:%bb.0 entry
  From: %7:fpr64 = COPY $d1
    To: End RegionInstrs: 22
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: W0 W1 W2 W3 W4 W5 B0 B1 
Live Out: 
Live Thru: 
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Bottom Pressure:

Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %7:fpr64 = COPY $d1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(15): Data Latency=0 Reg=%7
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(1):   %6:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(14): Data Latency=0 Reg=%6
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(2):   %5:gpr32 = COPY $w5
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(13): Data Latency=0 Reg=%5
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %4:gpr32 = COPY $w4
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(12): Data Latency=0 Reg=%4
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %3:gpr32 = COPY $w3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(11): Data Latency=0 Reg=%3
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %2:gpr64 = COPY $x2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(10): Data Latency=0 Reg=%2
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %1:gpr64 = COPY $x1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(9): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %0:gpr64 = COPY $x0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(8): Data Latency=0 Reg=%0
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   STRXui %0:gpr64, %stack.0.a.addr, 0 :: (store 8 into %ir.a.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(7): Data Latency=0 Reg=%0
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   STRXui %1:gpr64, %stack.1.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(6): Data Latency=0 Reg=%1
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   STRXui %2:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%2
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   STRWui %3:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%3
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   STRWui %4:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%4
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   STRWui %5:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%5
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(14):   STRDui %6:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%6
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(15):   STRDui %7:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%7
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(16):   %8:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(18): Data Latency=4 Reg=%8
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(17):   %9:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1296 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(18): Data Latency=4 Reg=%9
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(18):   %10:gpr32common = nsw SUBWrr %8:gpr32, %9:gpr32, debug-location !1297; cg.c:659:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(17): Data Latency=4 Reg=%9
    SU(16): Data Latency=4 Reg=%8
  Successors:
    SU(19): Data Latency=1 Reg=%10
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(19):   %11:gpr32common = nsw ADDWri %10:gpr32common, 1, 0, debug-location !1298; cg.c:659:32
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(18): Data Latency=1 Reg=%10
  Successors:
    SU(20): Data Latency=1 Reg=%11
  Pressure Diff      : 
  Single Issue       : false;
SU(20):   STRWui %11:gpr32common, %stack.14.nrows, 0, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(19): Data Latency=1 Reg=%11
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(21):   STRWui $wzr, %stack.16.j, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 7 16 17 21 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %7:fpr64 = COPY $d1
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 21 1 2 3 4 5 6 7 16 17 15 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(21) ORDER                              
  Cand SU(1) PHYS-REG                           
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %6:fpr64 = COPY $d0
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 21 15 2 3 4 5 6 7 16 17 14 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(21) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(2) PHYS-REG                           
  Cand SU(2) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(2) %5:gpr32 = COPY $w5
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 21 15 14 3 4 5 6 7 16 17 13 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(21) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(3) PHYS-REG                           
  Cand SU(3) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(3) %4:gpr32 = COPY $w4
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 21 15 14 13 4 5 6 7 16 17 12 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(21) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(4) PHYS-REG                           
  Cand SU(4) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(4) %3:gpr32 = COPY $w3
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 21 15 14 13 12 5 6 7 16 17 11 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(21) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(5) PHYS-REG                           
  Cand SU(5) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(5) %2:gpr64 = COPY $x2
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 21 15 14 13 12 11 6 7 16 17 10 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(21) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(6) PHYS-REG                           
  Cand SU(6) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(6) %1:gpr64 = COPY $x1
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 21 15 14 13 12 11 10 7 16 17 9 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(21) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(7) PHYS-REG                           
  Cand SU(7) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(7) %0:gpr64 = COPY $x0
Top Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 21 20 15 14 13 12 11 10 9 8 
Queue TopQ.P: 
Queue TopQ.A: 21 15 14 13 12 11 10 9 16 17 8 
Picking from Bot:
  Cand SU(21) ORDER                              
Picking from Top:
  Cand SU(21) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(14) ORDER                              
  Cand SU(13) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(21) STRWui $wzr, %stack.16.j, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12
Bottom Pressure:

  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 20 15 14 13 12 11 10 9 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 16 17 
BotQ.A RemLatency SU(20) 6c
  BotQ.A RemainingLatency 6 + 1c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(20) BOT-PATH                  6 cycles 
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(20) STRWui %11:gpr32common, %stack.14.nrows, 0, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
Bottom Pressure:
GPR32=1
  LiveReg: %11
  UpdateRegP: SU(20) STRWui %11:gpr32common, %stack.14.nrows, 0, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
              to 
  Ready @1c
  BotQ.A TopLatency SU(20) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 19 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 16 17 
BotQ.A RemLatency SU(19) 5c
  BotQ.A RemainingLatency 5 + 2c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(19) BOT-PATH                  5 cycles 
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(19) %11:gpr32common = nsw ADDWri %10:gpr32common, 1, 0, debug-location !1298; cg.c:659:32
Bottom Pressure:
GPR32=1
  LiveReg: %10
  UpdateRegP: SU(19) %11:gpr32common = nsw ADDWri %10:gpr32common, 1, 0, debug-location !1298; cg.c:659:32
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(19) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 15 14 13 12 11 10 18 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 16 17 
BotQ.A RemLatency SU(18) 4c
  BotQ.A RemainingLatency 4 + 3c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
  Cand SU(18) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(18) %10:gpr32common = nsw SUBWrr %8:gpr32, %9:gpr32, debug-location !1297; cg.c:659:21
Bottom Pressure:
GPR32=2
  LiveReg: %8
  UpdateRegP: SU(18) %10:gpr32common = nsw SUBWrr %8:gpr32, %9:gpr32, debug-location !1297; cg.c:659:21
              to 
  LiveReg: %9
  UpdateRegP: SU(18) %10:gpr32common = nsw SUBWrr %8:gpr32, %9:gpr32, debug-location !1297; cg.c:659:21
              to GPR32 -1
  Ready @3c
  BotQ.A BotLatency SU(18) 2c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 
Queue BotQ.A: 8 9 15 14 13 12 11 10 
Queue TopQ.P: 
Queue TopQ.A: 8 15 14 13 12 11 10 9 16 17 
  BotQ.A RemainingLatency 3 + 4c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(15) STRDui %7:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %7
  UpdateRegP: SU(15) STRDui %7:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
              to 
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 
Queue BotQ.A: 8 9 10 14 13 12 11 
Queue TopQ.P: 
Queue TopQ.A: 8 17 14 13 12 11 10 9 16 
  BotQ.A RemainingLatency 2 + 5c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) STRDui %6:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %6
  UpdateRegP: SU(14) STRDui %6:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
              to 
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 17 16 
Queue BotQ.A: 8 9 10 11 13 12 
Queue TopQ.P: 
Queue TopQ.A: 8 17 16 13 12 11 10 9 
  BotQ.A RemainingLatency 1 + 6c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(13) STRWui %5:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %5
  UpdateRegP: SU(13) STRWui %5:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
              to 
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 11 12 17 16 
Queue TopQ.P: 
Queue TopQ.A: 8 17 16 9 12 11 10 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(17) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(17) %9:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1296 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @7c
  BotQ.A BotLatency SU(17) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 11 12 16 
Queue TopQ.P: 
Queue TopQ.A: 8 10 16 9 12 11 
  BotQ.A RemainingLatency 0 + 8c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
  Cand SU(16) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(16) %8:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
Bottom Pressure:
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 11 12 
Queue TopQ.P: 
Queue TopQ.A: 8 10 11 9 12 
  BotQ.A RemainingLatency 0 + 9c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(12) STRWui %4:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %4
  UpdateRegP: SU(12) STRWui %4:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
              to 
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 11 
Queue TopQ.P: 
Queue TopQ.A: 8 10 11 9 
  BotQ.A RemainingLatency 0 + 10c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(11) STRWui %3:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %3
  UpdateRegP: SU(11) STRWui %3:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
              to 
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 10 
Queue TopQ.P: 
Queue TopQ.A: 8 10 9 
  BotQ.A RemainingLatency 0 + 11c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) STRXui %2:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %2
  UpdateRegP: SU(10) STRXui %2:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
              to 
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 12
  Executed: 12c
  Critical: 12c, 12 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 9 
Queue TopQ.P: 
Queue TopQ.A: 8 9 
  BotQ.A RemainingLatency 0 + 12c > CritPath 6
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(8) NOCAND                             
Pick Bot ORDER     
Scheduling SU(9) STRXui %1:gpr64, %stack.1.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
Bottom Pressure:
FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %1
  UpdateRegP: SU(9) STRXui %1:gpr64, %stack.1.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
              to 
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 13
  Executed: 13c
  Critical: 13c, 13 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRXui %0:gpr64, %stack.0.a.addr, 0 :: (store 8 into %ir.a.addr)
Bottom Pressure:
FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %0
  UpdateRegP: SU(8) STRXui %0:gpr64, %stack.0.a.addr, 0 :: (store 8 into %ir.a.addr)
              to 
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 14
  Executed: 14c
  Critical: 14c, 14 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %7:fpr64 = COPY $d1
SU(1):   %6:fpr64 = COPY $d0
SU(2):   %5:gpr32 = COPY $w5
SU(3):   %4:gpr32 = COPY $w4
SU(4):   %3:gpr32 = COPY $w3
SU(5):   %2:gpr64 = COPY $x2
SU(6):   %1:gpr64 = COPY $x1
SU(7):   %0:gpr64 = COPY $x0
SU(8):   STRXui %0:gpr64, %stack.0.a.addr, 0 :: (store 8 into %ir.a.addr)
SU(9):   STRXui %1:gpr64, %stack.1.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
SU(10):   STRXui %2:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
SU(11):   STRWui %3:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
SU(12):   STRWui %4:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
SU(16):   %8:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
SU(17):   %9:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1296 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
SU(13):   STRWui %5:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
SU(14):   STRDui %6:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
SU(15):   STRDui %7:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
SU(18):   %10:gpr32common = nsw SUBWrr %8:gpr32, %9:gpr32, debug-location !1297; cg.c:659:21
SU(19):   %11:gpr32common = nsw ADDWri %10:gpr32common, 1, 0, debug-location !1298; cg.c:659:32
SU(20):   STRWui %11:gpr32common, %stack.14.nrows, 0, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
SU(21):   STRWui $wzr, %stack.16.j, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12

********** MI Scheduling **********
sparse:%bb.1 for.cond
  From: %13:gpr32 = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
    To: Bcc 10, %bb.3, implicit killed $nzcv, debug-location !1308; cg.c:664:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %13:gpr32 = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%13
  Single Issue       : false;
SU(1):   %14:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%14
  Single Issue       : false;
SU(2):   %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1306; cg.c:664:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%14
  Successors:
    SU(3): Data Latency=1 Reg=%15
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWrr %13:gpr32, %15:gpr32common, implicit-def $nzcv, debug-location !1308; cg.c:664:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%15
    SU(0): Data Latency=4 Reg=%13
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.3, implicit killed $nzcv, debug-location !1308; cg.c:664:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWrr %13:gpr32, %15:gpr32common, implicit-def $nzcv, debug-location !1308; cg.c:664:5
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1306; cg.c:664:27
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %13:gpr32 = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %14:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(1):   %14:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
SU(0):   %13:gpr32 = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
SU(2):   %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1306; cg.c:664:27
SU(3):   dead $wzr = SUBSWrr %13:gpr32, %15:gpr32common, implicit-def $nzcv, debug-location !1308; cg.c:664:5

********** MI Scheduling **********
sparse:%bb.2 for.body
  From: %327:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
    To: B %bb.1, debug-location !1314; cg.c:664:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %327:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%327
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %328:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%328
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   STRWroX $wzr, %327:gpr64common, %328:gpr64, 0, 1, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%328
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%327
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   %330:gpr32common = LDRWui %stack.16.j, 0, debug-location !1313 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%330
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0, debug-location !1313; cg.c:664:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%330
  Successors:
    SU(5): Data Latency=1 Reg=%331
  Single Issue       : false;
SU(5):   STRWui %331:gpr32common, %stack.16.j, 0, debug-location !1313 :: (store 4 into %ir.j); cg.c:664:33
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%331
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.1, debug-location !1314; cg.c:664:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %331:gpr32common, %stack.16.j, 0, debug-location !1313 :: (store 4 into %ir.j); cg.c:664:33
  Ready @0c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0, debug-location !1313; cg.c:664:33
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %330:gpr32common = LDRWui %stack.16.j, 0, debug-location !1313 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWroX $wzr, %327:gpr64common, %328:gpr64, 0, 1, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %328:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %327:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %327:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
SU(1):   %328:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
SU(2):   STRWroX $wzr, %327:gpr64common, %328:gpr64, 0, 1, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
SU(3):   %330:gpr32common = LDRWui %stack.16.j, 0, debug-location !1313 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
SU(4):   %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0, debug-location !1313; cg.c:664:33
SU(5):   STRWui %331:gpr32common, %stack.16.j, 0, debug-location !1313 :: (store 4 into %ir.j); cg.c:664:33

********** MI Scheduling **********
sparse:%bb.3 for.end
  From: STRWui $wzr, %stack.15.i, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.15.i, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   undef %311.sub_32:gpr64 = MOVi32imm 56
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) undef %311.sub_32:gpr64 = MOVi32imm 56
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.15.i, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.3 ***
SU(0):   STRWui $wzr, %stack.15.i, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
SU(1):   undef %311.sub_32:gpr64 = MOVi32imm 56

********** MI Scheduling **********
sparse:%bb.4 for.cond2
  From: %18:gpr32 = LDRWui %stack.15.i, 0, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
    To: Bcc 10, %bb.9, implicit killed $nzcv, debug-location !1324; cg.c:668:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %18:gpr32 = LDRWui %stack.15.i, 0, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%18
  Single Issue       : false;
SU(1):   %19:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%19
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %18:gpr32, %19:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:668:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%19
    SU(0): Data Latency=4 Reg=%18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.9, implicit killed $nzcv, debug-location !1324; cg.c:668:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %18:gpr32, %19:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:668:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %19:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %18:gpr32 = LDRWui %stack.15.i, 0, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %18:gpr32 = LDRWui %stack.15.i, 0, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
SU(1):   %19:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
SU(2):   dead $wzr = SUBSWrr %18:gpr32, %19:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:668:5

********** MI Scheduling **********
sparse:%bb.6 for.cond5
  From: %301:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
    To: Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1334; cg.c:669:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %301:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%301
  Single Issue       : false;
SU(1):   %302:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%302
  Single Issue       : false;
SU(2):   %303:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%303
  Single Issue       : false;
SU(3):   %304:gpr32 = LDRWroX %302:gpr64common, %303:gpr64, 0, 1, debug-location !1331 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%303
    SU(1): Data Latency=4 Reg=%302
  Successors:
    SU(4): Data Latency=4 Reg=%304
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %301:gpr32, %304:gpr32, implicit-def $nzcv, debug-location !1334; cg.c:669:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%304
    SU(0): Data Latency=4 Reg=%301
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1334; cg.c:669:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %301:gpr32, %304:gpr32, implicit-def $nzcv, debug-location !1334; cg.c:669:9
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %304:gpr32 = LDRWroX %302:gpr64common, %303:gpr64, 0, 1, debug-location !1331 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %301:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %303:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %302:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   %302:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
SU(2):   %303:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
SU(0):   %301:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
SU(3):   %304:gpr32 = LDRWroX %302:gpr64common, %303:gpr64, 0, 1, debug-location !1331 :: (load 4 from %ir.arrayidx7); cg.c:669:29
SU(4):   dead $wzr = SUBSWrr %301:gpr32, %304:gpr32, implicit-def $nzcv, debug-location !1334; cg.c:669:9

********** MI Scheduling **********
sparse:%bb.7 for.body9
  From: %308:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
    To: B %bb.6, debug-location !1350; cg.c:669:9
 RegionInstrs: 17
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=6
Live In: %311 
Live Out: %311 
Live Thru: GPR32=1
  LiveReg: %311
  UpdateRegP: SU(2) %313:gpr64common = MADDXrrr %309:gpr64, %311:gpr64, %308:gpr64, debug-location !1335; cg.c:670:17
              to GPR32 1
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=1
Excess PSets: 
SU(0):   %308:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(2): Data Latency=4 Reg=%308
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %309:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(11): Data Latency=4 Reg=%309
    SU(2): Data Latency=4 Reg=%309
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %313:gpr64common = MADDXrrr %309:gpr64, %311:gpr64, %308:gpr64, debug-location !1335; cg.c:670:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(1): Data Latency=4 Reg=%309
    SU(0): Data Latency=4 Reg=%308
  Successors:
    SU(4): Data Latency=1 Reg=%313
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %314:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(4): Data Latency=4 Reg=%314
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %315:gpr32common = LDRWroX %313:gpr64common, %314:gpr64, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(2): Data Latency=1 Reg=%313
    SU(3): Data Latency=4 Reg=%314
  Successors:
    SU(5): Data Latency=4 Reg=%315
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   undef %318.sub_32:gpr64common = nsw ADDWri %315:gpr32common, 1, 0, debug-location !1339; cg.c:670:30
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(4): Data Latency=4 Reg=%315
  Successors:
    SU(8): Data Latency=1 Reg=%318
    SU(6): Data Latency=1 Reg=%318
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   STRWui %318.sub_32:gpr64common, %stack.16.j, 0, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%318
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %317:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(13): Data Latency=4 Reg=%317
    SU(9): Data Latency=4 Reg=%317
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %320:gpr64 = SBFMXri %318:gpr64common, 62, 31, debug-location !1341; cg.c:671:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(5): Data Latency=1 Reg=%318
  Successors:
    SU(13): Data Latency=1 Reg=%320
    SU(9): Data Latency=1 Reg=%320
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   %321:gpr32 = LDRWroX %317:gpr64common, %320:gpr64, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(8): Data Latency=1 Reg=%320
    SU(7): Data Latency=4 Reg=%317
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(12): Data Latency=4 Reg=%321
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(10):   %322:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(11): Data Latency=4 Reg=%322
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %323:gpr32 = LDRWroX %322:gpr64common, %309:gpr64, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(10): Data Latency=4 Reg=%322
    SU(6): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=%309
  Successors:
    SU(12): Data Latency=4 Reg=%323
    SU(16): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(12):   %324:gpr32 = nsw ADDWrr %321:gpr32, %323:gpr32, debug-location !1345; cg.c:671:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(11): Data Latency=4 Reg=%323
    SU(9): Data Latency=4 Reg=%321
  Successors:
    SU(13): Data Latency=1 Reg=%324
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   STRWroX %324:gpr32, %317:gpr64common, %320:gpr64, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  # preds left       : 12
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 6
  Predecessors:
    SU(12): Data Latency=1 Reg=%324
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=%320
    SU(7): Data Latency=4 Reg=%317
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(16): Ord  Latency=0 Memory
    SU(14): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(14):   %325:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1349 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 5
  Predecessors:
    SU(13): Ord  Latency=1 Memory
  Successors:
    SU(15): Data Latency=4 Reg=%325
    SU(16): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(15):   %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !1349; cg.c:669:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 1
  Predecessors:
    SU(14): Data Latency=4 Reg=%325
  Successors:
    SU(16): Data Latency=1 Reg=%326
  Pressure Diff      : 
  Single Issue       : false;
SU(16):   STRWui %326:gpr32common, %stack.19.nza, 0, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(15): Data Latency=1 Reg=%326
    SU(14): Ord  Latency=0 Memory
    SU(13): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.6, debug-location !1350; cg.c:669:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 22
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 16 
Pick Bot ONLY1     
Scheduling SU(16) STRWui %326:gpr32common, %stack.19.nza, 0, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41
Bottom Pressure:
GPR32=2
  LiveReg: %326
  UpdateRegP: SU(16) STRWui %326:gpr32common, %stack.19.nza, 0, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41
              to 
  Ready @0c
  BotQ.A TopLatency SU(16) 22c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 
Pick Bot ONLY1     
Scheduling SU(15) %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !1349; cg.c:669:41
Bottom Pressure:
GPR32=2
  LiveReg: %325
  UpdateRegP: SU(15) %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !1349; cg.c:669:41
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(15) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 14 
Pick Bot ONLY1     
Scheduling SU(14) %325:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1349 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
Bottom Pressure:
GPR32=1
  Ready @5c
  BotQ.A BotLatency SU(14) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) STRWroX %324:gpr32, %317:gpr64common, %320:gpr64, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
Bottom Pressure:
GPR32=4
  LiveReg: %324
  UpdateRegP: SU(13) STRWroX %324:gpr32, %317:gpr64common, %320:gpr64, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
              to GPR32 2
  LiveReg: %317
  UpdateRegP: SU(9) %321:gpr32 = LDRWroX %317:gpr64common, %320:gpr64, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
              to 
  UpdateRegP: SU(13) STRWroX %324:gpr32, %317:gpr64common, %320:gpr64, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
              to GPR32 1
  LiveReg: %320
  UpdateRegP: SU(9) %321:gpr32 = LDRWroX %317:gpr64common, %320:gpr64, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
              to GPR32 -1
  UpdateRegP: SU(13) STRWroX %324:gpr32, %317:gpr64common, %320:gpr64, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
              to 
  Ready @6c
  BotQ.A BotLatency SU(13) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %324:gpr32 = nsw ADDWrr %321:gpr32, %323:gpr32, debug-location !1345; cg.c:671:35
Bottom Pressure:
GPR32=5
  LiveReg: %321
  UpdateRegP: SU(12) %324:gpr32 = nsw ADDWrr %321:gpr32, %323:gpr32, debug-location !1345; cg.c:671:35
              to 
  LiveReg: %323
  UpdateRegP: SU(12) %324:gpr32 = nsw ADDWrr %321:gpr32, %323:gpr32, debug-location !1345; cg.c:671:35
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(12) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 11 9 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
BotQ.A RemLatency SU(11) 11c
Picking from Bot:
  Cand SU(11) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %323:gpr32 = LDRWroX %322:gpr64common, %309:gpr64, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
Bottom Pressure:
GPR32=6
  LiveReg: %322
  UpdateRegP: SU(11) %323:gpr32 = LDRWroX %322:gpr64common, %309:gpr64, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
              to 
  LiveReg: %309
  UpdateRegP: SU(2) %313:gpr64common = MADDXrrr %309:gpr64, %311:gpr64, %308:gpr64, debug-location !1335; cg.c:670:17
              to 
  UpdateRegP: SU(11) %323:gpr32 = LDRWroX %322:gpr64common, %309:gpr64, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(11) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %321:gpr32 = LDRWroX %317:gpr64common, %320:gpr64, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
Bottom Pressure:
GPR32=5
  Ready @12c
  BotQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 7 
Queue BotQ.A: 8 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
BotQ.A RemLatency SU(8) 10c
  BotQ.A RemainingLatency 10 + 13c > CritPath 22
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(8) %320:gpr64 = SBFMXri %318:gpr64common, 62, 31, debug-location !1341; cg.c:671:25
Bottom Pressure:
GPR32=5
  LiveReg: %318
  UpdateRegP: SU(6) STRWui %318.sub_32:gpr64common, %stack.16.j, 0, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
              to 
  UpdateRegP: SU(8) %320:gpr64 = SBFMXri %318:gpr64common, 62, 31, debug-location !1341; cg.c:671:25
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(8) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 10 7 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %318.sub_32:gpr64common, %stack.16.j, 0, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
Bottom Pressure:
GPR32=5
  Ready @14c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 
Queue BotQ.A: 5 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 15c > CritPath 22
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) undef %318.sub_32:gpr64common = nsw ADDWri %315:gpr32common, 1, 0, debug-location !1339; cg.c:670:30
Bottom Pressure:
GPR32=5
  LiveReg: %315
  UpdateRegP: SU(5) undef %318.sub_32:gpr64common = nsw ADDWri %315:gpr32common, 1, 0, debug-location !1339; cg.c:670:30
              to GPR32 -1
  Ready @15c
  BotQ.A BotLatency SU(5) 13c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 10
  Executed: 16c
  Critical: 10c, 10 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 10 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 7 10 
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 8 + 16c > CritPath 22
Picking from Bot:
  Cand SU(10) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(10) %322:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
Bottom Pressure:
GPR32=4
  Ready @16c
  BotQ.A BotLatency SU(10) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %317:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
Bottom Pressure:
GPR32=3
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 19 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %315:gpr32common = LDRWroX %313:gpr64common, %314:gpr64, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
Bottom Pressure:
GPR32=4
  LiveReg: %313
  UpdateRegP: SU(4) %315:gpr32common = LDRWroX %313:gpr64common, %314:gpr64, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
              to 
  LiveReg: %314
  UpdateRegP: SU(4) %315:gpr32common = LDRWroX %313:gpr64common, %314:gpr64, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
              to GPR32 -1
  Ready @19c
  BotQ.A BotLatency SU(4) 17c
  *** Max MOps 1 at cycle 19
Cycle: 20 BotQ.A
BotQ.A @20c
  Retired: 13
  Executed: 20c
  Critical: 13c, 13 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %313:gpr64common = MADDXrrr %309:gpr64, %311:gpr64, %308:gpr64, debug-location !1335; cg.c:670:17
Bottom Pressure:
GPR32=4
  LiveReg: %308
  UpdateRegP: SU(2) %313:gpr64common = MADDXrrr %309:gpr64, %311:gpr64, %308:gpr64, debug-location !1335; cg.c:670:17
              to GPR32 -1
  Ready @20c
  BotQ.A BotLatency SU(2) 18c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 14
  Executed: 21c
  Critical: 14c, 14 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 23 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %314:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
Bottom Pressure:
GPR32=3
  Ready @23c
  BotQ.A BotLatency SU(3) 21c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 15
  Executed: 24c
  Critical: 15c, 15 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 24c > CritPath 22
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %309:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
Bottom Pressure:
GPR32=2
  Ready @24c
  BotQ.A BotLatency SU(1) 22c
  *** Max MOps 1 at cycle 24
Cycle: 25 BotQ.A
BotQ.A @25c
  Retired: 16
  Executed: 25c
  Critical: 16c, 16 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %308:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
Bottom Pressure:
GPR32=1
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 BotQ.A
BotQ.A @26c
  Retired: 17
  Executed: 26c
  Critical: 17c, 17 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %308:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
SU(1):   %309:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
SU(3):   %314:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
SU(2):   %313:gpr64common = MADDXrrr %309:gpr64, %311:gpr64, %308:gpr64, debug-location !1335; cg.c:670:17
SU(4):   %315:gpr32common = LDRWroX %313:gpr64common, %314:gpr64, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
SU(7):   %317:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
SU(10):   %322:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
SU(5):   undef %318.sub_32:gpr64common = nsw ADDWri %315:gpr32common, 1, 0, debug-location !1339; cg.c:670:30
SU(6):   STRWui %318.sub_32:gpr64common, %stack.16.j, 0, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
SU(8):   %320:gpr64 = SBFMXri %318:gpr64common, 62, 31, debug-location !1341; cg.c:671:25
SU(9):   %321:gpr32 = LDRWroX %317:gpr64common, %320:gpr64, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
SU(11):   %323:gpr32 = LDRWroX %322:gpr64common, %309:gpr64, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
SU(12):   %324:gpr32 = nsw ADDWrr %321:gpr32, %323:gpr32, debug-location !1345; cg.c:671:35
SU(13):   STRWroX %324:gpr32, %317:gpr64common, %320:gpr64, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
SU(14):   %325:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1349 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
SU(15):   %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !1349; cg.c:669:41
SU(16):   STRWui %326:gpr32common, %stack.19.nza, 0, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41

********** MI Scheduling **********
sparse:%bb.8 for.inc25
  From: %306:gpr32common = LDRWui %stack.15.i, 0, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
    To: B %bb.4, debug-location !1354; cg.c:668:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %306:gpr32common = LDRWui %stack.15.i, 0, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%306
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %307:gpr32common = nsw ADDWri %306:gpr32common, 1, 0, debug-location !1353; cg.c:668:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%306
  Successors:
    SU(2): Data Latency=1 Reg=%307
  Single Issue       : false;
SU(2):   STRWui %307:gpr32common, %stack.15.i, 0, debug-location !1353 :: (store 4 into %ir.i); cg.c:668:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%307
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.4, debug-location !1354; cg.c:668:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %307:gpr32common, %stack.15.i, 0, debug-location !1353 :: (store 4 into %ir.i); cg.c:668:25
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %307:gpr32common = nsw ADDWri %306:gpr32common, 1, 0, debug-location !1353; cg.c:668:25
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %306:gpr32common = LDRWui %stack.15.i, 0, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %306:gpr32common = LDRWui %stack.15.i, 0, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
SU(1):   %307:gpr32common = nsw ADDWri %306:gpr32common, 1, 0, debug-location !1353; cg.c:668:25
SU(2):   STRWui %307:gpr32common, %stack.15.i, 0, debug-location !1353 :: (store 4 into %ir.i); cg.c:668:25

********** MI Scheduling **********
sparse:%bb.9 for.end27
  From: %21:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %21:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Data Latency=4 Reg=%21
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   STRWui $wzr, %21:gpr64common, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=%21
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %23:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(3):   STRWui %23:gpr32, %stack.16.j, 0, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%23
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWui %23:gpr32, %stack.16.j, 0, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12
  Ready @0c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 
BotQ.A RemLatency SU(1) 4c
  BotQ.A RemainingLatency 4 + 1c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(1) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot BOT-PATH  
Scheduling SU(1) STRWui $wzr, %21:gpr64common, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %23:gpr32 = MOVi32imm 1
  Ready @2c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %21:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  Ready @5c
  BotQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   %21:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
SU(2):   %23:gpr32 = MOVi32imm 1
SU(1):   STRWui $wzr, %21:gpr64common, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
SU(3):   STRWui %23:gpr32, %stack.16.j, 0, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12

********** MI Scheduling **********
sparse:%bb.10 for.cond29
  From: %24:gpr32 = LDRWui %stack.16.j, 0, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
    To: Bcc 10, %bb.12, implicit killed $nzcv, debug-location !1367; cg.c:676:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %24:gpr32 = LDRWui %stack.16.j, 0, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%24
  Single Issue       : false;
SU(1):   %25:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%25
  Single Issue       : false;
SU(2):   %26:gpr32common = nsw ADDWri %25:gpr32common, 1, 0, debug-location !1365; cg.c:676:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%25
  Successors:
    SU(3): Data Latency=1 Reg=%26
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWrr %24:gpr32, %26:gpr32common, implicit-def $nzcv, debug-location !1367; cg.c:676:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%26
    SU(0): Data Latency=4 Reg=%24
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.12, implicit killed $nzcv, debug-location !1367; cg.c:676:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWrr %24:gpr32, %26:gpr32common, implicit-def $nzcv, debug-location !1367; cg.c:676:5
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %26:gpr32common = nsw ADDWri %25:gpr32common, 1, 0, debug-location !1365; cg.c:676:27
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %24:gpr32 = LDRWui %stack.16.j, 0, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %25:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(1):   %25:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
SU(0):   %24:gpr32 = LDRWui %stack.16.j, 0, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
SU(2):   %26:gpr32common = nsw ADDWri %25:gpr32common, 1, 0, debug-location !1365; cg.c:676:27
SU(3):   dead $wzr = SUBSWrr %24:gpr32, %26:gpr32common, implicit-def $nzcv, debug-location !1367; cg.c:676:5

********** MI Scheduling **********
sparse:%bb.11 for.body32
  From: %292:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
    To: B %bb.10, debug-location !1379; cg.c:676:5
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %292:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%292
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %293:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%293
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %294:gpr64common = ADDXrs %292:gpr64, %293:gpr64, 2, debug-location !1368; cg.c:677:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%293
    SU(0): Data Latency=4 Reg=%292
  Successors:
    SU(6): Data Latency=1 Reg=%294
    SU(4): Data Latency=1 Reg=%294
    SU(3): Data Latency=1 Reg=%294
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %295:gpr32 = LDRWui %294:gpr64common, 0, debug-location !1368 :: (load 4 from %ir.arrayidx34); cg.c:677:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%294
  Successors:
    SU(5): Data Latency=4 Reg=%295
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %296:gpr32 = LDURWi %294:gpr64common, -4, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%294
  Successors:
    SU(5): Data Latency=4 Reg=%296
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %297:gpr32 = nsw ADDWrr %295:gpr32, %296:gpr32, debug-location !1374; cg.c:677:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(4): Data Latency=4 Reg=%296
    SU(3): Data Latency=4 Reg=%295
  Successors:
    SU(6): Data Latency=1 Reg=%297
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   STRWui %297:gpr32, %294:gpr64common, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%297
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%294
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(7):   %298:gpr32common = LDRWui %stack.16.j, 0, debug-location !1378 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%298
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %299:gpr32common = nsw ADDWri %298:gpr32common, 1, 0, debug-location !1378; cg.c:676:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%298
  Successors:
    SU(9): Data Latency=1 Reg=%299
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   STRWui %299:gpr32common, %stack.16.j, 0, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%299
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.10, debug-location !1379; cg.c:676:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWui %299:gpr32common, %stack.16.j, 0, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33
Bottom Pressure:
GPR32=1
  LiveReg: %299
  UpdateRegP: SU(9) STRWui %299:gpr32common, %stack.16.j, 0, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %299:gpr32common = nsw ADDWri %298:gpr32common, 1, 0, debug-location !1378; cg.c:676:33
Bottom Pressure:
GPR32=1
  LiveReg: %298
  UpdateRegP: SU(8) %299:gpr32common = nsw ADDWri %298:gpr32common, 1, 0, debug-location !1378; cg.c:676:33
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %298:gpr32common = LDRWui %stack.16.j, 0, debug-location !1378 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %297:gpr32, %294:gpr64common, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
Bottom Pressure:
GPR32=2
  LiveReg: %297
  UpdateRegP: SU(6) STRWui %297:gpr32, %294:gpr64common, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
              to GPR32 1
  LiveReg: %294
  UpdateRegP: SU(3) %295:gpr32 = LDRWui %294:gpr64common, 0, debug-location !1368 :: (load 4 from %ir.arrayidx34); cg.c:677:21
              to GPR32 -1
  UpdateRegP: SU(4) %296:gpr32 = LDURWi %294:gpr64common, -4, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
              to GPR32 -1
  UpdateRegP: SU(6) STRWui %297:gpr32, %294:gpr64common, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
              to 
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %297:gpr32 = nsw ADDWrr %295:gpr32, %296:gpr32, debug-location !1374; cg.c:677:31
Bottom Pressure:
GPR32=3
  LiveReg: %295
  UpdateRegP: SU(5) %297:gpr32 = nsw ADDWrr %295:gpr32, %296:gpr32, debug-location !1374; cg.c:677:31
              to 
  LiveReg: %296
  UpdateRegP: SU(5) %297:gpr32 = nsw ADDWrr %295:gpr32, %296:gpr32, debug-location !1374; cg.c:677:31
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %296:gpr32 = LDURWi %294:gpr64common, -4, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
Bottom Pressure:
GPR32=2
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %295:gpr32 = LDRWui %294:gpr64common, 0, debug-location !1368 :: (load 4 from %ir.arrayidx34); cg.c:677:21
Bottom Pressure:
GPR32=1
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %294:gpr64common = ADDXrs %292:gpr64, %293:gpr64, 2, debug-location !1368; cg.c:677:21
Bottom Pressure:
GPR32=2
  LiveReg: %292
  UpdateRegP: SU(2) %294:gpr64common = ADDXrs %292:gpr64, %293:gpr64, 2, debug-location !1368; cg.c:677:21
              to 
  LiveReg: %293
  UpdateRegP: SU(2) %294:gpr64common = ADDXrs %292:gpr64, %293:gpr64, 2, debug-location !1368; cg.c:677:21
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 17 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 17c > CritPath 16
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %293:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
Bottom Pressure:
GPR32=1
  Ready @17c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %292:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
Bottom Pressure:

  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   %292:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
SU(1):   %293:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
SU(2):   %294:gpr64common = ADDXrs %292:gpr64, %293:gpr64, 2, debug-location !1368; cg.c:677:21
SU(3):   %295:gpr32 = LDRWui %294:gpr64common, 0, debug-location !1368 :: (load 4 from %ir.arrayidx34); cg.c:677:21
SU(4):   %296:gpr32 = LDURWi %294:gpr64common, -4, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
SU(5):   %297:gpr32 = nsw ADDWrr %295:gpr32, %296:gpr32, debug-location !1374; cg.c:677:31
SU(6):   STRWui %297:gpr32, %294:gpr64common, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
SU(7):   %298:gpr32common = LDRWui %stack.16.j, 0, debug-location !1378 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
SU(8):   %299:gpr32common = nsw ADDWri %298:gpr32common, 1, 0, debug-location !1378; cg.c:676:33
SU(9):   STRWui %299:gpr32common, %stack.16.j, 0, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33

********** MI Scheduling **********
sparse:%bb.12 for.end43
  From: %28:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
    To: Bcc 13, %bb.14, implicit killed $nzcv, debug-location !1390; cg.c:685:9
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %28:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%28
  Single Issue       : false;
SU(1):   %29:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%29
  Single Issue       : false;
SU(2):   %30:gpr32common = LDRWroX %28:gpr64common, %29:gpr64, 0, 1, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%29
    SU(0): Data Latency=4 Reg=%28
  Successors:
    SU(3): Data Latency=4 Reg=%30
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %31:gpr32common = SUBWri %30:gpr32common, 1, 0, debug-location !1384; cg.c:679:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Data Latency=4 Reg=%30
  Successors:
    SU(6): Data Latency=1 Reg=%31
    SU(4): Data Latency=1 Reg=%31
  Single Issue       : false;
SU(4):   STRWui %31:gpr32common, %stack.19.nza, 0, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%31
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %32:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1388 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Data Latency=4 Reg=%32
  Single Issue       : false;
SU(6):   dead $wzr = SUBSWrr %31:gpr32common, %32:gpr32, implicit-def $nzcv, debug-location !1390; cg.c:685:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%31
    SU(5): Data Latency=4 Reg=%32
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 13, %bb.14, implicit killed $nzcv, debug-location !1390; cg.c:685:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %31:gpr32common, %stack.19.nza, 0, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
  Ready @0c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) dead $wzr = SUBSWrr %31:gpr32common, %32:gpr32, implicit-def $nzcv, debug-location !1390; cg.c:685:9
  Ready @1c
  BotQ.A TopLatency SU(6) 9c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %31:gpr32common = SUBWri %30:gpr32common, 1, 0, debug-location !1384; cg.c:679:25
  Ready @2c
  BotQ.A BotLatency SU(3) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 2 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %32:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1388 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  Ready @5c
  BotQ.A BotLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %30:gpr32common = LDRWroX %28:gpr64common, %29:gpr64, 0, 1, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %29:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %28:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %28:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
SU(1):   %29:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
SU(2):   %30:gpr32common = LDRWroX %28:gpr64common, %29:gpr64, 0, 1, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
SU(5):   %32:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1388 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
SU(3):   %31:gpr32common = SUBWri %30:gpr32common, 1, 0, debug-location !1384; cg.c:679:25
SU(6):   dead $wzr = SUBSWrr %31:gpr32common, %32:gpr32, implicit-def $nzcv, debug-location !1390; cg.c:685:9
SU(4):   STRWui %31:gpr32common, %stack.19.nza, 0, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_38_nza__nzmax, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !1395; cg.c:687:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_38_nza__nzmax, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %36:gpr32, debug-location !1395; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(2):   $w2 = COPY %37:gpr32, debug-location !1395; cg.c:687:9
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !1395; cg.c:687:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(2) $w2 = COPY %37:gpr32, debug-location !1395; cg.c:687:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %36:gpr32, debug-location !1395; cg.c:687:9
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_38_nza__nzmax, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_38_nza__nzmax, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
SU(1):   $w1 = COPY %36:gpr32, debug-location !1395; cg.c:687:9
SU(2):   $w2 = COPY %37:gpr32, debug-location !1395; cg.c:687:9

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: %36:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1395; cg.c:687:9
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %36:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
SU(1):   %37:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1395; cg.c:687:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=3 Artificial
    SU(0): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Cycle: 3 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %37:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  Ready @3c
  BotQ.A BotLatency SU(1) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 1
  Executed: 4c
  Critical: 1c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %36:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   %36:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
SU(1):   %37:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46

********** MI Scheduling **********
sparse:%bb.14 if.end
  From: STRWui $wzr, %stack.16.j, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.16.j, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %289:gpr32 = MOVi32imm -1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %289:gpr32 = MOVi32imm -1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.16.j, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.14 ***
SU(0):   STRWui $wzr, %stack.16.j, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
SU(1):   %289:gpr32 = MOVi32imm -1

********** MI Scheduling **********
sparse:%bb.15 for.cond49
  From: %41:gpr32 = LDRWui %stack.16.j, 0, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
    To: Bcc 10, %bb.20, implicit killed $nzcv, debug-location !1404; cg.c:694:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %41:gpr32 = LDRWui %stack.16.j, 0, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%41
  Single Issue       : false;
SU(1):   %42:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%42
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %41:gpr32, %42:gpr32, implicit-def $nzcv, debug-location !1404; cg.c:694:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%42
    SU(0): Data Latency=4 Reg=%41
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.20, implicit killed $nzcv, debug-location !1404; cg.c:694:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %41:gpr32, %42:gpr32, implicit-def $nzcv, debug-location !1404; cg.c:694:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %42:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %41:gpr32 = LDRWui %stack.16.j, 0, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   %41:gpr32 = LDRWui %stack.16.j, 0, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
SU(1):   %42:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
SU(2):   dead $wzr = SUBSWrr %41:gpr32, %42:gpr32, implicit-def $nzcv, debug-location !1404; cg.c:694:5

********** MI Scheduling **********
sparse:%bb.16 for.body51
  From: %270:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
    To: End RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %270:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%270
  Single Issue       : false;
SU(1):   %271:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%271
  Single Issue       : false;
SU(2):   %272:gpr32 = LDRWroX %270:gpr64common, %271:gpr64, 0, 1, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%271
    SU(0): Data Latency=4 Reg=%270
  Successors:
    SU(3): Data Latency=4 Reg=%272
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRWui %272:gpr32, %stack.20.k, 0, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%272
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWui %272:gpr32, %stack.20.k, 0, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16
  Ready @0c
  BotQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %272:gpr32 = LDRWroX %270:gpr64common, %271:gpr64, 0, 1, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  Ready @4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %271:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 3
  Executed: 9c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %270:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   %270:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
SU(1):   %271:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
SU(2):   %272:gpr32 = LDRWroX %270:gpr64common, %271:gpr64, 0, 1, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
SU(3):   STRWui %272:gpr32, %stack.20.k, 0, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16

********** MI Scheduling **********
sparse:%bb.17 for.cond54
  From: %273:gpr32 = LDRWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
    To: Bcc 10, %bb.19, implicit killed $nzcv, debug-location !1417; cg.c:695:9
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %273:gpr32 = LDRWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%273
  Single Issue       : false;
SU(1):   %274:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%274
  Single Issue       : false;
SU(2):   %275:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%275
  Single Issue       : false;
SU(3):   %276:gpr64common = ADDXrs %274:gpr64, %275:gpr64, 2, debug-location !1413; cg.c:695:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%275
    SU(1): Data Latency=4 Reg=%274
  Successors:
    SU(4): Data Latency=1 Reg=%276
  Single Issue       : false;
SU(4):   %277:gpr32 = LDRWui %276:gpr64common, 1, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%276
  Successors:
    SU(5): Data Latency=4 Reg=%277
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %273:gpr32, %277:gpr32, implicit-def $nzcv, debug-location !1417; cg.c:695:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%277
    SU(0): Data Latency=4 Reg=%273
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.19, implicit killed $nzcv, debug-location !1417; cg.c:695:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %273:gpr32, %277:gpr32, implicit-def $nzcv, debug-location !1417; cg.c:695:9
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %277:gpr32 = LDRWui %276:gpr64common, 1, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %276:gpr64common = ADDXrs %274:gpr64, %275:gpr64, 2, debug-location !1413; cg.c:695:33
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %273:gpr32 = LDRWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %275:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %274:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.17 ***
SU(1):   %274:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
SU(2):   %275:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
SU(0):   %273:gpr32 = LDRWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
SU(3):   %276:gpr64common = ADDXrs %274:gpr64, %275:gpr64, 2, debug-location !1413; cg.c:695:33
SU(4):   %277:gpr32 = LDRWui %276:gpr64common, 1, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:33
SU(5):   dead $wzr = SUBSWrr %273:gpr32, %277:gpr32, implicit-def $nzcv, debug-location !1417; cg.c:695:9

********** MI Scheduling **********
sparse:%bb.18 for.body59
  From: %284:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
    To: B %bb.17, debug-location !1426; cg.c:695:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=3
Live In: %289 
Live Out: %289 
Live Thru: GPR32=1
  LiveReg: %289
  UpdateRegP: SU(5) STRWroX %289:gpr32, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
              to GPR32 2
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=1
Excess PSets: 
SU(0):   %284:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%284
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %285:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%285
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   STRXroX $xzr, %284:gpr64common, %285:gpr64, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  # preds left       : 4
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%285
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%284
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(3):   %287:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%287
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(5): Data Latency=4 Reg=%288
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   STRWroX %289:gpr32, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%288
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%287
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(6):   %290:gpr32common = LDRWui %stack.20.k, 0, debug-location !1425 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(5): Ord  Latency=1 Memory
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%290
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %291:gpr32common = nsw ADDWri %290:gpr32common, 1, 0, debug-location !1425; cg.c:695:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%290
  Successors:
    SU(8): Data Latency=1 Reg=%291
  Pressure Diff      : 
  Single Issue       : false;
SU(8):   STRWui %291:gpr32common, %stack.20.k, 0, debug-location !1425 :: (store 4 into %ir.k); cg.c:695:49
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%291
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.17, debug-location !1426; cg.c:695:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRWui %291:gpr32common, %stack.20.k, 0, debug-location !1425 :: (store 4 into %ir.k); cg.c:695:49
Bottom Pressure:
GPR32=2
  LiveReg: %291
  UpdateRegP: SU(8) STRWui %291:gpr32common, %stack.20.k, 0, debug-location !1425 :: (store 4 into %ir.k); cg.c:695:49
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %291:gpr32common = nsw ADDWri %290:gpr32common, 1, 0, debug-location !1425; cg.c:695:49
Bottom Pressure:
GPR32=2
  LiveReg: %290
  UpdateRegP: SU(7) %291:gpr32common = nsw ADDWri %290:gpr32common, 1, 0, debug-location !1425; cg.c:695:49
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %290:gpr32common = LDRWui %stack.20.k, 0, debug-location !1425 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
Bottom Pressure:
GPR32=1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWroX %289:gpr32, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
Bottom Pressure:
GPR32=3
  LiveReg: %287
  UpdateRegP: SU(5) STRWroX %289:gpr32, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
              to GPR32 1
  LiveReg: %288
  UpdateRegP: SU(5) STRWroX %289:gpr32, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
              to 
  Ready @6c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
Bottom Pressure:
GPR32=2
  Ready @10c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %287:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
Bottom Pressure:
GPR32=1
  Ready @11c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRXroX $xzr, %284:gpr64common, %285:gpr64, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
Bottom Pressure:
GPR32=3
  LiveReg: %284
  UpdateRegP: SU(2) STRXroX $xzr, %284:gpr64common, %285:gpr64, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
              to GPR32 1
  LiveReg: %285
  UpdateRegP: SU(2) STRXroX $xzr, %284:gpr64common, %285:gpr64, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
              to 
  Ready @12c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 16c > CritPath 15
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %285:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
Bottom Pressure:
GPR32=2
  Ready @16c
  BotQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %284:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
Bottom Pressure:
GPR32=1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   %284:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
SU(1):   %285:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
SU(2):   STRXroX $xzr, %284:gpr64common, %285:gpr64, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
SU(3):   %287:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
SU(4):   %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
SU(5):   STRWroX %289:gpr32, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
SU(6):   %290:gpr32common = LDRWui %stack.20.k, 0, debug-location !1425 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
SU(7):   %291:gpr32common = nsw ADDWri %290:gpr32common, 1, 0, debug-location !1425; cg.c:695:49
SU(8):   STRWui %291:gpr32common, %stack.20.k, 0, debug-location !1425 :: (store 4 into %ir.k); cg.c:695:49

********** MI Scheduling **********
sparse:%bb.19 for.end66
  From: %279:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
    To: B %bb.15, debug-location !1433; cg.c:694:5
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %279:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%279
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %280:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%280
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   STRWroX $wzr, %279:gpr64common, %280:gpr64, 0, 1, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%280
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%279
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(3):   %282:gpr32common = LDRWui %stack.16.j, 0, debug-location !1432 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%282
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %283:gpr32common = nsw ADDWri %282:gpr32common, 1, 0, debug-location !1432; cg.c:694:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%282
  Successors:
    SU(5): Data Latency=1 Reg=%283
  Single Issue       : false;
SU(5):   STRWui %283:gpr32common, %stack.16.j, 0, debug-location !1432 :: (store 4 into %ir.j); cg.c:694:29
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%283
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.15, debug-location !1433; cg.c:694:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %283:gpr32common, %stack.16.j, 0, debug-location !1432 :: (store 4 into %ir.j); cg.c:694:29
  Ready @0c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %283:gpr32common = nsw ADDWri %282:gpr32common, 1, 0, debug-location !1432; cg.c:694:29
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %282:gpr32common = LDRWui %stack.16.j, 0, debug-location !1432 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWroX $wzr, %279:gpr64common, %280:gpr64, 0, 1, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %280:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %279:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   %279:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
SU(1):   %280:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
SU(2):   STRWroX $wzr, %279:gpr64common, %280:gpr64, 0, 1, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
SU(3):   %282:gpr32common = LDRWui %stack.16.j, 0, debug-location !1432 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
SU(4):   %283:gpr32common = nsw ADDWri %282:gpr32common, 1, 0, debug-location !1432; cg.c:694:29
SU(5):   STRWui %283:gpr32common, %stack.16.j, 0, debug-location !1432 :: (store 4 into %ir.j); cg.c:694:29

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: %55:fpr64 = COPY $d0, debug-location !1441; cg.c:706:13
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %55:fpr64 = COPY $d0, debug-location !1441; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%55
  Single Issue       : false;
SU(1):   STRDui %55:fpr64, %stack.26.ratio, 0, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%55
  Single Issue       : false;
SU(2):   STRWui $wzr, %stack.15.i, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(3):   undef %147.sub_32:gpr64 = MOVi32imm 56
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(4):   undef %155.sub_32:gpr64 = MOVi32imm 112
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(5):   %244:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 4 5 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %55:fpr64 = COPY $d0, debug-location !1441; cg.c:706:13
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 4 3 2 1 
Queue TopQ.P: 
Queue TopQ.A: 5 2 3 4 1 
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %244:gpr32 = MOVi32imm 1
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 3 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 4 
  BotQ.A RemainingLatency 0 + 1c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) undef %155.sub_32:gpr64 = MOVi32imm 112
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 3 
Queue TopQ.P: 
Queue TopQ.A: 1 2 3 
  BotQ.A RemainingLatency 0 + 2c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) undef %147.sub_32:gpr64 = MOVi32imm 56
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  BotQ.A RemainingLatency 0 + 3c > CritPath 0
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(1) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) STRWui $wzr, %stack.15.i, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRDui %55:fpr64, %stack.26.ratio, 0, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %55:fpr64 = COPY $d0, debug-location !1441; cg.c:706:13
SU(1):   STRDui %55:fpr64, %stack.26.ratio, 0, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
SU(2):   STRWui $wzr, %stack.15.i, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
SU(3):   undef %147.sub_32:gpr64 = MOVi32imm 56
SU(4):   undef %155.sub_32:gpr64 = MOVi32imm 112
SU(5):   %244:gpr32 = MOVi32imm 1

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: $d0 = COPY %45:fpr64, debug-location !1441; cg.c:706:13
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1441; cg.c:706:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $d0 = COPY %45:fpr64, debug-location !1441; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $d1 = COPY %54:fpr64, debug-location !1441; cg.c:706:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1441; cg.c:706:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $d1 = COPY %54:fpr64, debug-location !1441; cg.c:706:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $d0 = COPY %45:fpr64, debug-location !1441; cg.c:706:13
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   $d0 = COPY %45:fpr64, debug-location !1441; cg.c:706:13
SU(1):   $d1 = COPY %54:fpr64, debug-location !1441; cg.c:706:13

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: %44:gpr64 = MOVi64imm 4607182418800017408
    To: ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1441; cg.c:706:13
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=3
GPR32=1
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
Live In: 
Live Out: %54 %45 
Live Thru: 
  LiveReg: %54
  LiveReg: %45
Top Pressure:

Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Excess PSets: 
SU(0):   %44:gpr64 = MOVi64imm 4607182418800017408
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%44
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   STRXui %44:gpr64, %stack.24.size, 0, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%44
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(2):   %45:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   undef %47.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=4 Reg=%47
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %49:fpr128 = SSHLLv2i32_shift %47:fpr64, 0, debug-location !1439; cg.c:706:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(3): Data Latency=4 Reg=%47
  Successors:
    SU(5): Data Latency=1 Reg=%49
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %51:fpr64 = SCVTFv1i64 %49.dsub:fpr128, debug-location !1439; cg.c:706:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=%49
  Successors:
    SU(8): Data Latency=1 Reg=%51
  Pressure Diff      : 
  Single Issue       : false;
SU(6):   %52:gpr64temp = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=1 Reg=%52
  Pressure Diff      : GPR64temp -1    GPR32 -1
  Single Issue       : false;
SU(7):   %53:fpr64 = LDRDui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(6): Data Latency=1 Reg=%52
  Successors:
    SU(8): Data Latency=4 Reg=%53
  Pressure Diff      : GPR64temp 1    FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(8):   %54:fpr64 = FDIVDrr %53:fpr64, %51:fpr64, debug-location !1440; cg.c:706:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%51
    SU(7): Data Latency=4 Reg=%53
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1441; cg.c:706:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=3 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 
Queue BotQ.A: 8 1 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 6 
Picking from Bot:
  Cand SU(8) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %54:fpr64 = FDIVDrr %53:fpr64, %51:fpr64, debug-location !1440; cg.c:706:29
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %53
  UpdateRegP: SU(8) %54:fpr64 = FDIVDrr %53:fpr64, %51:fpr64, debug-location !1440; cg.c:706:29
              to 
  LiveReg: %51
  UpdateRegP: SU(8) %54:fpr64 = FDIVDrr %53:fpr64, %51:fpr64, debug-location !1440; cg.c:706:29
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @0c
  BotQ.A TopLatency SU(8) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 7 
Queue BotQ.A: 1 5 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 6 
BotQ.A RemLatency SU(5) 5c
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %51:fpr64 = SCVTFv1i64 %49.dsub:fpr128, debug-location !1439; cg.c:706:31
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %49
  UpdateRegP: SU(5) %51:fpr64 = SCVTFv1i64 %49.dsub:fpr128, debug-location !1439; cg.c:706:31
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @1c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 7 
Queue BotQ.A: 1 4 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 6 
BotQ.A RemLatency SU(4) 4c
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %49:fpr128 = SSHLLv2i32_shift %47:fpr64, 0, debug-location !1439; cg.c:706:31
Bottom Pressure:
FPR8=3
FPR8+ZPR_3b=3
FPR8+ZPR4_with_zsub1_in_ZPR_3b=3
FPR8+ZPR4_with_zsub2_in_ZPR_3b=3
FPR8+ZPR4_with_zsub3_in_ZPR_3b=3
ZPR_4b=3
ZPR=3
  LiveReg: %47
  UpdateRegP: SU(4) %49:fpr128 = SSHLLv2i32_shift %47:fpr64, 0, debug-location !1439; cg.c:706:31
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(4) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 7 
Queue BotQ.A: 1 2 
Queue TopQ.P: 
Queue TopQ.A: 0 2 3 6 
BotQ.A RemLatency SU(1) 1c
BotQ.A RemLatency SU(7) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %45:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @3c
  BotQ.A BotLatency SU(2) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 7 
Queue TopQ.P: 
Queue TopQ.A: 0 6 3 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(7) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(7) %53:fpr64 = LDRDui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
Bottom Pressure:
GPR64temp=1
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %52
  UpdateRegP: SU(7) %53:fpr64 = LDRDui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @4c
  BotQ.A BotLatency SU(7) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 1 6 
Queue TopQ.P: 
Queue TopQ.A: 0 6 3 
BotQ.A RemLatency SU(1) 1c
Picking from Bot:
  Cand SU(1) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %52:gpr64temp = ADRP target-flags(aarch64-page) %const.0
Bottom Pressure:
FPR8=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
BotQ.A RemLatency SU(1) 1c
  BotQ.A RemainingLatency 1 + 6c > CritPath 6
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(1) STRXui %44:gpr64, %stack.24.size, 0, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %44
  UpdateRegP: SU(1) STRXui %44:gpr64, %stack.24.size, 0, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
              to 
  Ready @6c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 3 
  BotQ.A RemainingLatency 0 + 7c > CritPath 6
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) undef %47.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
Bottom Pressure:
GPR32=1
  Ready @7c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %44:gpr64 = MOVi64imm 4607182418800017408
Bottom Pressure:

  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   %44:gpr64 = MOVi64imm 4607182418800017408
SU(3):   undef %47.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
SU(1):   STRXui %44:gpr64, %stack.24.size, 0, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
SU(6):   %52:gpr64temp = ADRP target-flags(aarch64-page) %const.0
SU(7):   %53:fpr64 = LDRDui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(2):   %45:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
SU(4):   %49:fpr128 = SSHLLv2i32_shift %47:fpr64, 0, debug-location !1439; cg.c:706:31
SU(5):   %51:fpr64 = SCVTFv1i64 %49.dsub:fpr128, debug-location !1439; cg.c:706:31
SU(8):   %54:fpr64 = FDIVDrr %53:fpr64, %51:fpr64, debug-location !1440; cg.c:706:29

********** MI Scheduling **********
sparse:%bb.21 for.cond73
  From: %57:gpr32 = LDRWui %stack.15.i, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
    To: Bcc 10, %bb.48, implicit killed $nzcv, debug-location !1450; cg.c:708:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %57:gpr32 = LDRWui %stack.15.i, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%57
  Single Issue       : false;
SU(1):   %58:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1448 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%58
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %57:gpr32, %58:gpr32, implicit-def $nzcv, debug-location !1450; cg.c:708:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%58
    SU(0): Data Latency=4 Reg=%57
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.48, implicit killed $nzcv, debug-location !1450; cg.c:708:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %57:gpr32, %58:gpr32, implicit-def $nzcv, debug-location !1450; cg.c:708:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %58:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1448 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %57:gpr32 = LDRWui %stack.15.i, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   %57:gpr32 = LDRWui %stack.15.i, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
SU(1):   %58:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1448 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
SU(2):   dead $wzr = SUBSWrr %57:gpr32, %58:gpr32, implicit-def $nzcv, debug-location !1450; cg.c:708:5

********** MI Scheduling **********
sparse:%bb.23 for.cond77
  From: %134:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
    To: Bcc 10, %bb.47, implicit killed $nzcv, debug-location !1460; cg.c:709:9
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %134:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%134
  Single Issue       : false;
SU(1):   %135:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%135
  Single Issue       : false;
SU(2):   %136:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%136
  Single Issue       : false;
SU(3):   %137:gpr32 = LDRWroX %135:gpr64common, %136:gpr64, 0, 1, debug-location !1457 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%136
    SU(1): Data Latency=4 Reg=%135
  Successors:
    SU(4): Data Latency=4 Reg=%137
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %134:gpr32, %137:gpr32, implicit-def $nzcv, debug-location !1460; cg.c:709:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%137
    SU(0): Data Latency=4 Reg=%134
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.47, implicit killed $nzcv, debug-location !1460; cg.c:709:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %134:gpr32, %137:gpr32, implicit-def $nzcv, debug-location !1460; cg.c:709:9
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %137:gpr32 = LDRWroX %135:gpr64common, %136:gpr64, 0, 1, debug-location !1457 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %134:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %136:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %135:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.23 ***
SU(1):   %135:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
SU(2):   %136:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
SU(0):   %134:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
SU(3):   %137:gpr32 = LDRWroX %135:gpr64common, %136:gpr64, 0, 1, debug-location !1457 :: (load 4 from %ir.arrayidx79); cg.c:709:29
SU(4):   dead $wzr = SUBSWrr %134:gpr32, %137:gpr32, implicit-def $nzcv, debug-location !1460; cg.c:709:9

********** MI Scheduling **********
sparse:%bb.24 for.body82
  From: %144:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=5
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %155 %147 
Live Out: %155 %147 
Live Thru: GPR32=2
  LiveReg: %155
  UpdateRegP: SU(8) %157:gpr64common = MADDXrrr %145:gpr64, %155:gpr64, %153:gpr64, debug-location !1467; cg.c:712:28
              to GPR32 1
  LiveReg: %147
  UpdateRegP: SU(2) %149:gpr64common = MADDXrrr %145:gpr64, %147:gpr64, %144:gpr64, debug-location !1461; cg.c:710:17
              to GPR32 1
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
SU(0):   %144:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%144
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %145:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(8): Data Latency=4 Reg=%145
    SU(2): Data Latency=4 Reg=%145
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %149:gpr64common = MADDXrrr %145:gpr64, %147:gpr64, %144:gpr64, debug-location !1461; cg.c:710:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%145
    SU(0): Data Latency=4 Reg=%144
  Successors:
    SU(4): Data Latency=1 Reg=%149
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %150:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(9): Data Latency=4 Reg=%150
    SU(4): Data Latency=4 Reg=%150
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %151:gpr32 = LDRWroX %149:gpr64common, %150:gpr64, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%149
    SU(3): Data Latency=4 Reg=%150
  Successors:
    SU(5): Data Latency=4 Reg=%151
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   STRWui %151:gpr32, %stack.16.j, 0, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%151
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %152:fpr64 = LDRDui %stack.24.size, 0, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%152
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(7):   %153:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(8): Data Latency=4 Reg=%153
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %157:gpr64common = MADDXrrr %145:gpr64, %155:gpr64, %153:gpr64, debug-location !1467; cg.c:712:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(7): Data Latency=4 Reg=%153
    SU(1): Data Latency=4 Reg=%145
  Successors:
    SU(9): Data Latency=1 Reg=%157
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %158:fpr64 = LDRDroX %157:gpr64common, %150:gpr64, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(8): Data Latency=1 Reg=%157
    SU(5): Ord  Latency=1 Memory
    SU(3): Data Latency=4 Reg=%150
  Successors:
    SU(10): Data Latency=4 Reg=%158
    SU(12): Ord  Latency=0 Memory
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %159:fpr64 = FMULDrr %152:fpr64, %158:fpr64, debug-location !1470; cg.c:712:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=%158
    SU(6): Data Latency=4 Reg=%152
  Successors:
    SU(11): Data Latency=1 Reg=%159
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   STRDui %159:fpr64, %stack.25.scale, 0, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%159
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(12):   STRWui $wzr, %stack.22.nzrow, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 7 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui $wzr, %stack.22.nzrow, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24
Bottom Pressure:
GPR32=2
  Ready @0c
  BotQ.A TopLatency SU(12) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) STRDui %159:fpr64, %stack.25.scale, 0, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %159
  UpdateRegP: SU(11) STRDui %159:fpr64, %stack.25.scale, 0, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
              to 
  Ready @1c
  BotQ.A TopLatency SU(11) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %159:fpr64 = FMULDrr %152:fpr64, %158:fpr64, debug-location !1470; cg.c:712:26
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %152
  UpdateRegP: SU(10) %159:fpr64 = FMULDrr %152:fpr64, %158:fpr64, debug-location !1470; cg.c:712:26
              to 
  LiveReg: %158
  UpdateRegP: SU(10) %159:fpr64 = FMULDrr %152:fpr64, %158:fpr64, debug-location !1470; cg.c:712:26
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 9 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 7 
BotQ.A RemLatency SU(9) 10c
  BotQ.A RemainingLatency 10 + 6c > CritPath 15
Picking from Bot:
  Cand SU(9) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(9) %158:fpr64 = LDRDroX %157:gpr64common, %150:gpr64, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %157
  UpdateRegP: SU(9) %158:fpr64 = LDRDroX %157:gpr64common, %150:gpr64, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %150
  UpdateRegP: SU(4) %151:gpr32 = LDRWroX %149:gpr64common, %150:gpr64, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
              to 
  UpdateRegP: SU(9) %158:fpr64 = LDRDroX %157:gpr64common, %150:gpr64, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 8 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 7 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 7c > CritPath 15
Picking from Bot:
  Cand SU(6) ORDER                              
  Cand SU(8) BOT-PATH                  4 cycles 
  Cand SU(5) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWui %151:gpr32, %stack.16.j, 0, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %151
  UpdateRegP: SU(5) STRWui %151:gpr32, %stack.16.j, 0, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
              to 
  Ready @7c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 6 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 7 
BotQ.A RemLatency SU(8) 4c
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 8 + 8c > CritPath 15
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot REG-MAX   
Scheduling SU(6) %152:fpr64 = LDRDui %stack.24.size, 0, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
Bottom Pressure:
GPR32=5
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %157:gpr64common = MADDXrrr %145:gpr64, %155:gpr64, %153:gpr64, debug-location !1467; cg.c:712:28
Bottom Pressure:
GPR32=6
  LiveReg: %145
  UpdateRegP: SU(2) %149:gpr64common = MADDXrrr %145:gpr64, %147:gpr64, %144:gpr64, debug-location !1461; cg.c:710:17
              to 
  UpdateRegP: SU(8) %157:gpr64common = MADDXrrr %145:gpr64, %155:gpr64, %153:gpr64, debug-location !1467; cg.c:712:28
              to 
  LiveReg: %153
  UpdateRegP: SU(8) %157:gpr64common = MADDXrrr %145:gpr64, %155:gpr64, %153:gpr64, debug-location !1467; cg.c:712:28
              to GPR32 -1
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 7
  Executed: 10c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 7 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %151:gpr32 = LDRWroX %149:gpr64common, %150:gpr64, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
Bottom Pressure:
GPR32=6
  LiveReg: %149
  UpdateRegP: SU(4) %151:gpr32 = LDRWroX %149:gpr64common, %150:gpr64, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 7 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %149:gpr64common = MADDXrrr %145:gpr64, %147:gpr64, %144:gpr64, debug-location !1461; cg.c:710:17
Bottom Pressure:
GPR32=6
  LiveReg: %144
  UpdateRegP: SU(2) %149:gpr64common = MADDXrrr %145:gpr64, %147:gpr64, %144:gpr64, debug-location !1461; cg.c:710:17
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 3 1 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %153:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
Bottom Pressure:
GPR32=5
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %150:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
Bottom Pressure:
GPR32=4
  Ready @15c
  BotQ.A BotLatency SU(3) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 16c > CritPath 15
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %145:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
Bottom Pressure:
GPR32=3
  Ready @16c
  BotQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %144:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
Bottom Pressure:
GPR32=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 13
  Executed: 18c
  Critical: 13c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   %144:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
SU(1):   %145:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
SU(3):   %150:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
SU(7):   %153:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
SU(2):   %149:gpr64common = MADDXrrr %145:gpr64, %147:gpr64, %144:gpr64, debug-location !1461; cg.c:710:17
SU(4):   %151:gpr32 = LDRWroX %149:gpr64common, %150:gpr64, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
SU(8):   %157:gpr64common = MADDXrrr %145:gpr64, %155:gpr64, %153:gpr64, debug-location !1467; cg.c:712:28
SU(6):   %152:fpr64 = LDRDui %stack.24.size, 0, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
SU(5):   STRWui %151:gpr32, %stack.16.j, 0, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
SU(9):   %158:fpr64 = LDRDroX %157:gpr64common, %150:gpr64, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
SU(10):   %159:fpr64 = FMULDrr %152:fpr64, %158:fpr64, debug-location !1470; cg.c:712:26
SU(11):   STRDui %159:fpr64, %stack.25.scale, 0, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
SU(12):   STRWui $wzr, %stack.22.nzrow, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24

********** MI Scheduling **********
sparse:%bb.25 for.cond91
  From: %161:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
    To: Bcc 10, %bb.46, implicit killed $nzcv, debug-location !1480; cg.c:713:13
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %161:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%161
  Single Issue       : false;
SU(1):   %162:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%162
  Single Issue       : false;
SU(2):   %163:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%163
  Single Issue       : false;
SU(3):   %164:gpr32 = LDRWroX %162:gpr64common, %163:gpr64, 0, 1, debug-location !1477 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%163
    SU(1): Data Latency=4 Reg=%162
  Successors:
    SU(4): Data Latency=4 Reg=%164
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %161:gpr32, %164:gpr32, implicit-def $nzcv, debug-location !1480; cg.c:713:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%164
    SU(0): Data Latency=4 Reg=%161
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.46, implicit killed $nzcv, debug-location !1480; cg.c:713:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %161:gpr32, %164:gpr32, implicit-def $nzcv, debug-location !1480; cg.c:713:13
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %164:gpr32 = LDRWroX %162:gpr64common, %163:gpr64, 0, 1, debug-location !1477 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %161:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %163:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  Ready @9c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %162:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.25 ***
SU(1):   %162:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
SU(2):   %163:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
SU(0):   %161:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
SU(3):   %164:gpr32 = LDRWroX %162:gpr64common, %163:gpr64, 0, 1, debug-location !1477 :: (load 4 from %ir.arrayidx93); cg.c:713:37
SU(4):   dead $wzr = SUBSWrr %161:gpr32, %164:gpr32, implicit-def $nzcv, debug-location !1480; cg.c:713:13

********** MI Scheduling **********
sparse:%bb.26 for.body96
  From: %168:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
    To: Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1496; cg.c:721:31
 RegionInstrs: 14
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=6
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: %155 %147 
Live Out: %155 %147 
Live Thru: GPR32=2
  LiveReg: %155
  UpdateRegP: SU(7) %180:gpr64common = MADDXrrr %169:gpr64, %155:gpr64, %176:gpr64, debug-location !1486; cg.c:715:22
              to GPR32 1
  LiveReg: %147
  UpdateRegP: SU(2) %173:gpr64common = MADDXrrr %169:gpr64, %147:gpr64, %168:gpr64, debug-location !1481; cg.c:714:24
              to GPR32 1
Top Pressure:
GPR32=2
Bottom Pressure:
GPR32=2
Excess PSets: 
SU(0):   %168:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Data Latency=4 Reg=%168
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %169:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(7): Data Latency=4 Reg=%169
    SU(2): Data Latency=4 Reg=%169
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %173:gpr64common = MADDXrrr %169:gpr64, %147:gpr64, %168:gpr64, debug-location !1481; cg.c:714:24
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=%169
    SU(0): Data Latency=4 Reg=%168
  Successors:
    SU(4): Data Latency=1 Reg=%173
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %174:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Data Latency=4 Reg=%174
    SU(4): Data Latency=4 Reg=%174
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   %175:gpr32 = LDRWroX %173:gpr64common, %174:gpr64, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%173
    SU(3): Data Latency=4 Reg=%174
  Successors:
    SU(13): Data Latency=4 Reg=%175
    SU(5): Data Latency=4 Reg=%175
    SU(11): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(5):   STRWui %175:gpr32, %stack.23.jcol, 0, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%175
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %176:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(7): Data Latency=4 Reg=%176
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %180:gpr64common = MADDXrrr %169:gpr64, %155:gpr64, %176:gpr64, debug-location !1486; cg.c:715:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=%176
    SU(1): Data Latency=4 Reg=%169
  Successors:
    SU(8): Data Latency=1 Reg=%180
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %181:fpr64 = LDRDroX %180:gpr64common, %174:gpr64, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=%180
    SU(5): Ord  Latency=1 Memory
    SU(3): Data Latency=4 Reg=%174
  Successors:
    SU(10): Data Latency=4 Reg=%181
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(9):   %182:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1489 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Data Latency=4 Reg=%182
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(10):   %183:fpr64 = FMULDrr %181:fpr64, %182:fpr64, debug-location !1490; cg.c:715:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=%181
    SU(9): Data Latency=4 Reg=%182
  Successors:
    SU(11): Data Latency=1 Reg=%183
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(11):   STRDui %183:fpr64, %stack.27.va, 0, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%183
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(12):   %184:gpr32 = LDRWui %stack.16.j, 0, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(13): Data Latency=4 Reg=%184
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(13):   dead $wzr = SUBSWrr %175:gpr32, %184:gpr32, implicit-def $nzcv, debug-location !1496; cg.c:721:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%175
    SU(12): Data Latency=4 Reg=%184
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Pressure Diff      : GPR32 2
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1496; cg.c:721:31
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(13): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 15
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) STRDui %183:fpr64, %stack.27.va, 0, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %183
  UpdateRegP: SU(11) STRDui %183:fpr64, %stack.27.va, 0, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 13 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 9 12 
BotQ.A RemLatency SU(10) 14c
Picking from Bot:
  Cand SU(10) ORDER                              
  Cand SU(13) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) dead $wzr = SUBSWrr %175:gpr32, %184:gpr32, implicit-def $nzcv, debug-location !1496; cg.c:721:31
Bottom Pressure:
FPR8=1
GPR32=4
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %175
  UpdateRegP: SU(5) STRWui %175:gpr32, %stack.23.jcol, 0, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
              to 
  UpdateRegP: SU(13) dead $wzr = SUBSWrr %175:gpr32, %184:gpr32, implicit-def $nzcv, debug-location !1496; cg.c:721:31
              to GPR32 1
  LiveReg: %184
  UpdateRegP: SU(13) dead $wzr = SUBSWrr %175:gpr32, %184:gpr32, implicit-def $nzcv, debug-location !1496; cg.c:721:31
              to 
  Ready @1c
  BotQ.A BotLatency SU(13) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 12 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %183:fpr64 = FMULDrr %181:fpr64, %182:fpr64, debug-location !1490; cg.c:715:37
Bottom Pressure:
FPR8=2
GPR32=4
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %181
  UpdateRegP: SU(10) %183:fpr64 = FMULDrr %181:fpr64, %182:fpr64, debug-location !1490; cg.c:715:37
              to 
  LiveReg: %182
  UpdateRegP: SU(10) %183:fpr64 = FMULDrr %181:fpr64, %182:fpr64, debug-location !1490; cg.c:715:37
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A TopLatency SU(10) 14c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 9 8 
Queue BotQ.A: 12 
Pick Bot ONLY1     
Scheduling SU(12) %184:gpr32 = LDRWui %stack.16.j, 0, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
Bottom Pressure:
FPR8=2
GPR32=3
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  Ready @5c
  BotQ.A BotLatency SU(12) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 8 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 9 
BotQ.A RemLatency SU(8) 10c
  BotQ.A RemainingLatency 10 + 6c > CritPath 15
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(8) BOT-PATH                  10 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(8) %181:fpr64 = LDRDroX %180:gpr64common, %174:gpr64, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %180
  UpdateRegP: SU(8) %181:fpr64 = LDRDroX %180:gpr64common, %174:gpr64, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  LiveReg: %174
  UpdateRegP: SU(4) %175:gpr32 = LDRWroX %173:gpr64common, %174:gpr64, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
              to 
  UpdateRegP: SU(8) %181:fpr64 = LDRDroX %180:gpr64common, %174:gpr64, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 7 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 9 
BotQ.A RemLatency SU(5) 9c
  BotQ.A RemainingLatency 9 + 7c > CritPath 15
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(7) BOT-PATH                  4 cycles 
  Cand SU(5) BOT-PATH                  9 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(5) STRWui %175:gpr32, %stack.23.jcol, 0, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
Bottom Pressure:
FPR8=1
GPR32=5
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @7c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 9 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 9 
BotQ.A RemLatency SU(7) 4c
BotQ.A RemLatency SU(4) 5c
  BotQ.A RemainingLatency 8 + 8c > CritPath 15
Picking from Bot:
  Cand SU(9) ORDER                              
  Cand SU(7) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %180:gpr64common = MADDXrrr %169:gpr64, %155:gpr64, %176:gpr64, debug-location !1486; cg.c:715:22
Bottom Pressure:
FPR8=1
GPR32=6
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %169
  UpdateRegP: SU(2) %173:gpr64common = MADDXrrr %169:gpr64, %147:gpr64, %168:gpr64, debug-location !1481; cg.c:714:24
              to 
  UpdateRegP: SU(7) %180:gpr64common = MADDXrrr %169:gpr64, %155:gpr64, %176:gpr64, debug-location !1486; cg.c:715:22
              to 
  LiveReg: %176
  UpdateRegP: SU(7) %180:gpr64common = MADDXrrr %169:gpr64, %155:gpr64, %176:gpr64, debug-location !1486; cg.c:715:22
              to GPR32 -1
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 6 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %182:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1489 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
Bottom Pressure:
GPR32=6
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 8
  Executed: 10c
  Critical: 8c, 8 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 6 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %175:gpr32 = LDRWroX %173:gpr64common, %174:gpr64, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
Bottom Pressure:
GPR32=6
  LiveReg: %173
  UpdateRegP: SU(4) %175:gpr32 = LDRWroX %173:gpr64common, %174:gpr64, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 6 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 12c > CritPath 15
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %173:gpr64common = MADDXrrr %169:gpr64, %147:gpr64, %168:gpr64, debug-location !1481; cg.c:714:24
Bottom Pressure:
GPR32=6
  LiveReg: %168
  UpdateRegP: SU(2) %173:gpr64common = MADDXrrr %169:gpr64, %147:gpr64, %168:gpr64, debug-location !1481; cg.c:714:24
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(2) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 1 0 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) %176:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
Bottom Pressure:
GPR32=5
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 11
  Executed: 14c
  Critical: 11c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %174:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
Bottom Pressure:
GPR32=4
  Ready @15c
  BotQ.A BotLatency SU(3) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 12
  Executed: 16c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 16c > CritPath 15
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %169:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
Bottom Pressure:
GPR32=3
  Ready @16c
  BotQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 13
  Executed: 17c
  Critical: 13c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %168:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
Bottom Pressure:
GPR32=2
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 14
  Executed: 18c
  Critical: 14c, 14 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   %168:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
SU(1):   %169:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
SU(3):   %174:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
SU(6):   %176:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
SU(2):   %173:gpr64common = MADDXrrr %169:gpr64, %147:gpr64, %168:gpr64, debug-location !1481; cg.c:714:24
SU(4):   %175:gpr32 = LDRWroX %173:gpr64common, %174:gpr64, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
SU(9):   %182:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1489 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
SU(7):   %180:gpr64common = MADDXrrr %169:gpr64, %155:gpr64, %176:gpr64, debug-location !1486; cg.c:715:22
SU(5):   STRWui %175:gpr32, %stack.23.jcol, 0, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
SU(8):   %181:fpr64 = LDRDroX %180:gpr64common, %174:gpr64, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
SU(12):   %184:gpr32 = LDRWui %stack.16.j, 0, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
SU(10):   %183:fpr64 = FMULDrr %181:fpr64, %182:fpr64, debug-location !1490; cg.c:715:37
SU(13):   dead $wzr = SUBSWrr %175:gpr32, %184:gpr32, implicit-def $nzcv, debug-location !1496; cg.c:721:31
SU(11):   STRDui %183:fpr64, %stack.27.va, 0, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20

********** MI Scheduling **********
sparse:%bb.27 land.lhs.true
  From: %186:gpr32 = LDRWui %stack.16.j, 0, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
    To: Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1500; cg.c:721:21
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %186:gpr32 = LDRWui %stack.16.j, 0, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%186
  Single Issue       : false;
SU(1):   %187:gpr32 = LDRWui %stack.15.i, 0, debug-location !1498 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%187
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %186:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1500; cg.c:721:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%187
    SU(0): Data Latency=4 Reg=%186
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1500; cg.c:721:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %186:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1500; cg.c:721:21
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %187:gpr32 = LDRWui %stack.15.i, 0, debug-location !1498 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %186:gpr32 = LDRWui %stack.16.j, 0, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   %186:gpr32 = LDRWui %stack.16.j, 0, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
SU(1):   %187:gpr32 = LDRWui %stack.15.i, 0, debug-location !1498 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
SU(2):   dead $wzr = SUBSWrr %186:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1500; cg.c:721:21

********** MI Scheduling **********
sparse:%bb.28 if.then110
  From: %189:fpr64 = LDRDui %stack.27.va, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %189:fpr64 = LDRDui %stack.27.va, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%189
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %190:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1503 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%190
  Single Issue       : false;
SU(2):   %191:fpr64 = FADDDrr %189:fpr64, %190:fpr64, debug-location !1504; cg.c:722:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%190
    SU(0): Data Latency=4 Reg=%189
  Successors:
    SU(4): Data Latency=1 Reg=%191
  Single Issue       : false;
SU(3):   %192:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1505 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%192
  Single Issue       : false;
SU(4):   %193:fpr64 = FSUBDrr %191:fpr64, %192:fpr64, debug-location !1506; cg.c:722:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%191
    SU(3): Data Latency=4 Reg=%192
  Successors:
    SU(5): Data Latency=1 Reg=%193
  Single Issue       : false;
SU(5):   STRDui %193:fpr64, %stack.27.va, 0, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%193
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRDui %193:fpr64, %stack.27.va, 0, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24
  Ready @0c
  BotQ.A TopLatency SU(5) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %193:fpr64 = FSUBDrr %191:fpr64, %192:fpr64, debug-location !1506; cg.c:722:37
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 3 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %191:fpr64 = FADDDrr %189:fpr64, %190:fpr64, debug-location !1504; cg.c:722:29
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %192:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1505 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %190:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1503 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %189:fpr64 = LDRDui %stack.27.va, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   %189:fpr64 = LDRDui %stack.27.va, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
SU(1):   %190:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1503 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
SU(3):   %192:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1505 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
SU(2):   %191:fpr64 = FADDDrr %189:fpr64, %190:fpr64, debug-location !1504; cg.c:722:29
SU(4):   %193:fpr64 = FSUBDrr %191:fpr64, %192:fpr64, debug-location !1506; cg.c:722:37
SU(5):   STRDui %193:fpr64, %stack.27.va, 0, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24

********** MI Scheduling **********
sparse:%bb.29 if.end113
  From: STRWui $wzr, %stack.28.cont40, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
    To: End RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   STRWui $wzr, %stack.28.cont40, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
  Single Issue       : false;
SU(1):   %195:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%195
  Single Issue       : false;
SU(2):   %196:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=%196
  Single Issue       : false;
SU(3):   %197:gpr32 = LDRWroX %195:gpr64common, %196:gpr64, 0, 1, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Data Latency=4 Reg=%196
    SU(1): Data Latency=4 Reg=%195
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=%197
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %197:gpr32, %stack.20.k, 0, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(3): Data Latency=4 Reg=%197
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %197:gpr32, %stack.20.k, 0, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24
  Ready @0c
  BotQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %197:gpr32 = LDRWroX %195:gpr64common, %196:gpr64, 0, 1, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) STRWui $wzr, %stack.28.cont40, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %196:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  Ready @8c
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 4
  Executed: 9c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %195:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.29 ***
SU(1):   %195:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
SU(2):   %196:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
SU(0):   STRWui $wzr, %stack.28.cont40, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
SU(3):   %197:gpr32 = LDRWroX %195:gpr64common, %196:gpr64, 0, 1, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
SU(4):   STRWui %197:gpr32, %stack.20.k, 0, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24

********** MI Scheduling **********
sparse:%bb.30 for.cond116
  From: %198:gpr32 = LDRWui %stack.20.k, 0, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
    To: Bcc 10, %bb.43, implicit killed $nzcv, debug-location !1521; cg.c:726:17
 RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %198:gpr32 = LDRWui %stack.20.k, 0, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%198
  Single Issue       : false;
SU(1):   %199:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%199
  Single Issue       : false;
SU(2):   %200:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Data Latency=4 Reg=%200
  Single Issue       : false;
SU(3):   %201:gpr64common = ADDXrs %199:gpr64, %200:gpr64, 2, debug-location !1517; cg.c:726:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=%200
    SU(1): Data Latency=4 Reg=%199
  Successors:
    SU(4): Data Latency=1 Reg=%201
  Single Issue       : false;
SU(4):   %202:gpr32 = LDRWui %201:gpr64common, 1, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=%201
  Successors:
    SU(5): Data Latency=4 Reg=%202
  Single Issue       : false;
SU(5):   dead $wzr = SUBSWrr %198:gpr32, %202:gpr32, implicit-def $nzcv, debug-location !1521; cg.c:726:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%202
    SU(0): Data Latency=4 Reg=%198
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.43, implicit killed $nzcv, debug-location !1521; cg.c:726:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) dead $wzr = SUBSWrr %198:gpr32, %202:gpr32, implicit-def $nzcv, debug-location !1521; cg.c:726:17
  Ready @1c
  BotQ.A TopLatency SU(5) 9c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %202:gpr32 = LDRWui %201:gpr64common, 1, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  Ready @5c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(3) 4c
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(3) %201:gpr64common = ADDXrs %199:gpr64, %200:gpr64, 2, debug-location !1517; cg.c:726:41
  Ready @6c
  BotQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 2 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %198:gpr32 = LDRWui %stack.20.k, 0, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 4
  Executed: 8c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 1 
Queue TopQ.P: 
Queue TopQ.A: 2 1 
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %200:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  Ready @10c
  BotQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %199:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.30 ***
SU(1):   %199:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
SU(2):   %200:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
SU(0):   %198:gpr32 = LDRWui %stack.20.k, 0, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
SU(3):   %201:gpr64common = ADDXrs %199:gpr64, %200:gpr64, 2, debug-location !1517; cg.c:726:41
SU(4):   %202:gpr32 = LDRWui %201:gpr64common, 1, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:41
SU(5):   dead $wzr = SUBSWrr %198:gpr32, %202:gpr32, implicit-def $nzcv, debug-location !1521; cg.c:726:17

********** MI Scheduling **********
sparse:%bb.31 for.body122
  From: %204:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
    To: Bcc 13, %bb.38, implicit killed $nzcv, debug-location !1528; cg.c:727:25
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %204:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%204
  Single Issue       : false;
SU(1):   %205:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%205
  Single Issue       : false;
SU(2):   %206:gpr32 = LDRWroX %204:gpr64common, %205:gpr64, 0, 1, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%205
    SU(0): Data Latency=4 Reg=%204
  Successors:
    SU(4): Data Latency=4 Reg=%206
  Single Issue       : false;
SU(3):   %207:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1526 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%207
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %206:gpr32, %207:gpr32, implicit-def $nzcv, debug-location !1528; cg.c:727:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%206
    SU(3): Data Latency=4 Reg=%207
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 13, %bb.38, implicit killed $nzcv, debug-location !1528; cg.c:727:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %206:gpr32, %207:gpr32, implicit-def $nzcv, debug-location !1528; cg.c:727:25
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %207:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1526 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %206:gpr32 = LDRWroX %204:gpr64common, %205:gpr64, 0, 1, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  Ready @6c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %205:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %204:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 5
  Executed: 12c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   %204:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
SU(1):   %205:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
SU(2):   %206:gpr32 = LDRWroX %204:gpr64common, %205:gpr64, 0, 1, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
SU(3):   %207:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1526 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
SU(4):   dead $wzr = SUBSWrr %206:gpr32, %207:gpr32, implicit-def $nzcv, debug-location !1528; cg.c:727:25

********** MI Scheduling **********
sparse:%bb.32 if.then127
  From: %230:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
    To: End RegionInstrs: 6
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %230:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%230
  Single Issue       : false;
SU(1):   %231:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%231
  Single Issue       : false;
SU(2):   %232:gpr64common = ADDXrs %230:gpr64, %231:gpr64, 2, debug-location !1529; cg.c:731:35
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%231
    SU(0): Data Latency=4 Reg=%230
  Successors:
    SU(3): Data Latency=1 Reg=%232
  Single Issue       : false;
SU(3):   %233:gpr32common = LDRWui %232:gpr64common, 1, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%232
  Successors:
    SU(4): Data Latency=4 Reg=%233
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %234:gpr32common = SUBWri %233:gpr32common, 2, 0, debug-location !1534; cg.c:731:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%233
  Successors:
    SU(5): Data Latency=1 Reg=%234
  Single Issue       : false;
SU(5):   STRWui %234:gpr32common, %stack.21.kk, 0, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%234
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWui %234:gpr32common, %stack.21.kk, 0, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33
  Ready @0c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %234:gpr32common = SUBWri %233:gpr32common, 2, 0, debug-location !1534; cg.c:731:49
  Ready @1c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %233:gpr32common = LDRWui %232:gpr64common, 1, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %232:gpr64common = ADDXrs %230:gpr64, %231:gpr64, 2, debug-location !1529; cg.c:731:35
  Ready @6c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %231:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  Ready @10c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %230:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   %230:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
SU(1):   %231:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
SU(2):   %232:gpr64common = ADDXrs %230:gpr64, %231:gpr64, 2, debug-location !1529; cg.c:731:35
SU(3):   %233:gpr32common = LDRWui %232:gpr64common, 1, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
SU(4):   %234:gpr32common = SUBWri %233:gpr32common, 2, 0, debug-location !1534; cg.c:731:49
SU(5):   STRWui %234:gpr32common, %stack.21.kk, 0, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33

********** MI Scheduling **********
sparse:%bb.33 for.cond132
  From: %235:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
    To: Bcc 11, %bb.37, implicit killed $nzcv, debug-location !1541; cg.c:731:25
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %235:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%235
  Single Issue       : false;
SU(1):   %236:gpr32 = LDRWui %stack.20.k, 0, debug-location !1539 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%236
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %235:gpr32, %236:gpr32, implicit-def $nzcv, debug-location !1541; cg.c:731:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%236
    SU(0): Data Latency=4 Reg=%235
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.37, implicit killed $nzcv, debug-location !1541; cg.c:731:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %235:gpr32, %236:gpr32, implicit-def $nzcv, debug-location !1541; cg.c:731:25
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %236:gpr32 = LDRWui %stack.20.k, 0, debug-location !1539 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %235:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.33 ***
SU(0):   %235:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
SU(1):   %236:gpr32 = LDRWui %stack.20.k, 0, debug-location !1539 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
SU(2):   dead $wzr = SUBSWrr %235:gpr32, %236:gpr32, implicit-def $nzcv, debug-location !1541; cg.c:731:25

********** MI Scheduling **********
sparse:%bb.34 for.body135
  From: %257:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
    To: TBNZW %259:gpr32, 31, %bb.36, debug-location !1547; cg.c:732:33
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %257:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%257
  Single Issue       : false;
SU(1):   %258:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=%258
  Single Issue       : false;
SU(2):   %259:gpr32 = LDRWroX %257:gpr64common, %258:gpr64, 0, 1, debug-location !1542 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=%258
    SU(0): Data Latency=4 Reg=%257
  Successors:
    ExitSU: Data Latency=4 Reg=%259
  Single Issue       : false;
ExitSU:   TBNZW %259:gpr32, 31, %bb.36, debug-location !1547; cg.c:732:33
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%259
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %259:gpr32 = LDRWroX %257:gpr64common, %258:gpr64, 0, 1, debug-location !1542 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  Ready @4c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 1
  Executed: 5c
  Critical: 1c, 1 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 8 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %258:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  Ready @8c
  BotQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 2
  Executed: 9c
  Critical: 2c, 2 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %257:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  Ready @9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 3
  Executed: 10c
  Critical: 3c, 3 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   %257:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
SU(1):   %258:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
SU(2):   %259:gpr32 = LDRWroX %257:gpr64common, %258:gpr64, 0, 1, debug-location !1542 :: (load 4 from %ir.arrayidx137); cg.c:732:33

********** MI Scheduling **********
sparse:%bb.35 if.then140
  From: %260:gpr64 = LDRXui %stack.0.a.addr, 0, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
    To: End RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %260:gpr64 = LDRXui %stack.0.a.addr, 0, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(2): Data Latency=4 Reg=%260
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(2): Data Latency=4 Reg=%261
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %262:gpr64common = ADDXrs %260:gpr64, %261:gpr64, 3, debug-location !1548; cg.c:733:45
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(1): Data Latency=4 Reg=%261
    SU(0): Data Latency=4 Reg=%260
  Successors:
    SU(4): Data Latency=1 Reg=%262
    SU(3): Data Latency=1 Reg=%262
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %263:fpr64 = LDRDui %262:gpr64common, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(2): Data Latency=1 Reg=%262
  Successors:
    SU(4): Data Latency=4 Reg=%263
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   STRDui %263:fpr64, %262:gpr64common, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 10
  Predecessors:
    SU(3): Data Latency=4 Reg=%263
    SU(2): Data Latency=1 Reg=%262
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   %264:gpr64 = LDRXui %stack.1.colidx.addr, 0, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%264
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %265:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%265
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %266:gpr64common = ADDXrs %264:gpr64, %265:gpr64, 2, debug-location !1555; cg.c:734:50
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(6): Data Latency=4 Reg=%265
    SU(5): Data Latency=4 Reg=%264
  Successors:
    SU(9): Data Latency=1 Reg=%266
    SU(8): Data Latency=1 Reg=%266
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %267:gpr32 = LDRWui %266:gpr64common, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=%266
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%267
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   STRWui %267:gpr32, %266:gpr64common, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=%267
    SU(7): Data Latency=1 Reg=%266
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
Critical Path(GS-RR ): 19
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWui %267:gpr32, %266:gpr64common, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
Bottom Pressure:
GPR32=2
  LiveReg: %267
  UpdateRegP: SU(9) STRWui %267:gpr32, %266:gpr64common, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
              to GPR32 1
  LiveReg: %266
  UpdateRegP: SU(8) %267:gpr32 = LDRWui %266:gpr64common, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
              to GPR32 -1
  UpdateRegP: SU(9) STRWui %267:gpr32, %266:gpr64common, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %267:gpr32 = LDRWui %266:gpr64common, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
Bottom Pressure:
GPR32=1
  Ready @4c
  BotQ.A BotLatency SU(8) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %266:gpr64common = ADDXrs %264:gpr64, %265:gpr64, 2, debug-location !1555; cg.c:734:50
Bottom Pressure:
GPR32=2
  LiveReg: %264
  UpdateRegP: SU(7) %266:gpr64common = ADDXrs %264:gpr64, %265:gpr64, 2, debug-location !1555; cg.c:734:50
              to 
  LiveReg: %265
  UpdateRegP: SU(7) %266:gpr64common = ADDXrs %264:gpr64, %265:gpr64, 2, debug-location !1555; cg.c:734:50
              to GPR32 -1
  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(6) 10c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %265:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
Bottom Pressure:
GPR32=1
  Ready @9c
  BotQ.A BotLatency SU(6) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %264:gpr64 = LDRXui %stack.1.colidx.addr, 0, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
Bottom Pressure:

  Ready @10c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDui %263:fpr64, %262:gpr64common, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %263
  UpdateRegP: SU(4) STRDui %263:fpr64, %262:gpr64common, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
              to GPR32 1
  LiveReg: %262
  UpdateRegP: SU(3) %263:fpr64 = LDRDui %262:gpr64common, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(4) STRDui %263:fpr64, %262:gpr64common, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
              to 
  Ready @11c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 15 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %263:fpr64 = LDRDui %262:gpr64common, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
Bottom Pressure:
GPR32=1
  Ready @15c
  BotQ.A BotLatency SU(3) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 BotQ.A
BotQ.A @16c
  Retired: 7
  Executed: 16c
  Critical: 7c, 7 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %262:gpr64common = ADDXrs %260:gpr64, %261:gpr64, 3, debug-location !1548; cg.c:733:45
Bottom Pressure:
GPR32=2
  LiveReg: %260
  UpdateRegP: SU(2) %262:gpr64common = ADDXrs %260:gpr64, %261:gpr64, 3, debug-location !1548; cg.c:733:45
              to 
  LiveReg: %261
  UpdateRegP: SU(2) %262:gpr64common = ADDXrs %260:gpr64, %261:gpr64, 3, debug-location !1548; cg.c:733:45
              to GPR32 -1
  Ready @16c
  BotQ.A BotLatency SU(2) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 20 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 20c > CritPath 19
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
Bottom Pressure:
GPR32=1
  Ready @20c
  BotQ.A BotLatency SU(1) 19c
  *** Max MOps 1 at cycle 20
Cycle: 21 BotQ.A
BotQ.A @21c
  Retired: 9
  Executed: 21c
  Critical: 9c, 9 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %260:gpr64 = LDRXui %stack.0.a.addr, 0, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
Bottom Pressure:

  Ready @21c
  *** Max MOps 1 at cycle 21
Cycle: 22 BotQ.A
BotQ.A @22c
  Retired: 10
  Executed: 22c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   %260:gpr64 = LDRXui %stack.0.a.addr, 0, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
SU(1):   %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
SU(2):   %262:gpr64common = ADDXrs %260:gpr64, %261:gpr64, 3, debug-location !1548; cg.c:733:45
SU(3):   %263:fpr64 = LDRDui %262:gpr64common, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
SU(4):   STRDui %263:fpr64, %262:gpr64common, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
SU(5):   %264:gpr64 = LDRXui %stack.1.colidx.addr, 0, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
SU(6):   %265:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
SU(7):   %266:gpr64common = ADDXrs %264:gpr64, %265:gpr64, 2, debug-location !1555; cg.c:734:50
SU(8):   %267:gpr32 = LDRWui %266:gpr64common, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
SU(9):   STRWui %267:gpr32, %266:gpr64common, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48

********** MI Scheduling **********
sparse:%bb.36 for.inc152
  From: %268:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
    To: B %bb.33, debug-location !1563; cg.c:731:25
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %268:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%268
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %269:gpr32common = nsw SUBWri %268:gpr32common, 1, 0, debug-location !1562; cg.c:731:65
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%268
  Successors:
    SU(2): Data Latency=1 Reg=%269
  Single Issue       : false;
SU(2):   STRWui %269:gpr32common, %stack.21.kk, 0, debug-location !1562 :: (store 4 into %ir.kk); cg.c:731:65
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%269
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.33, debug-location !1563; cg.c:731:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %269:gpr32common, %stack.21.kk, 0, debug-location !1562 :: (store 4 into %ir.kk); cg.c:731:65
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %269:gpr32common = nsw SUBWri %268:gpr32common, 1, 0, debug-location !1562; cg.c:731:65
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %268:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   %268:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
SU(1):   %269:gpr32common = nsw SUBWri %268:gpr32common, 1, 0, debug-location !1562; cg.c:731:65
SU(2):   STRWui %269:gpr32common, %stack.21.kk, 0, debug-location !1562 :: (store 4 into %ir.kk); cg.c:731:65

********** MI Scheduling **********
sparse:%bb.37 for.end153
  From: %238:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
    To: B %bb.43, debug-location !1574; cg.c:740:25
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=4
Live In: %244 
Live Out: %244 
Live Thru: GPR32=1
  LiveReg: %244
  UpdateRegP: SU(7) STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
              to 
Top Pressure:
GPR32=1
Bottom Pressure:
GPR32=1
Excess PSets: 
SU(0):   %238:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%238
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %239:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%239
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %240:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%240
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(3):   STRWroX %238:gpr32, %239:gpr64common, %240:gpr64, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  # preds left       : 6
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=%240
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%239
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%238
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(4):   %241:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=%241
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %242:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=%242
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   STRXroX $xzr, %241:gpr64common, %242:gpr64, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  # preds left       : 8
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=%242
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=%241
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(7):   STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
ExitSU:   B %bb.43, debug-location !1574; cg.c:740:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
Bottom Pressure:
GPR32=1
  Ready @0c
  BotQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRXroX $xzr, %241:gpr64common, %242:gpr64, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
Bottom Pressure:
GPR32=3
  LiveReg: %241
  UpdateRegP: SU(6) STRXroX $xzr, %241:gpr64common, %242:gpr64, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
              to GPR32 1
  LiveReg: %242
  UpdateRegP: SU(6) STRXroX $xzr, %241:gpr64common, %242:gpr64, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
              to 
  Ready @1c
  BotQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
BotQ.A RemLatency SU(5) 5c
  BotQ.A RemainingLatency 5 + 5c > CritPath 9
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %242:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
Bottom Pressure:
GPR32=2
  Ready @5c
  BotQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %241:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
Bottom Pressure:
GPR32=1
  Ready @6c
  BotQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWroX %238:gpr32, %239:gpr64common, %240:gpr64, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
Bottom Pressure:
GPR32=4
  LiveReg: %238
  UpdateRegP: SU(3) STRWroX %238:gpr32, %239:gpr64common, %240:gpr64, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
              to GPR32 2
  LiveReg: %239
  UpdateRegP: SU(3) STRWroX %238:gpr32, %239:gpr64common, %240:gpr64, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
              to GPR32 1
  LiveReg: %240
  UpdateRegP: SU(3) STRWroX %238:gpr32, %239:gpr64common, %240:gpr64, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
              to 
  Ready @7c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 11c > CritPath 9
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(2) %240:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
Bottom Pressure:
GPR32=3
  Ready @11c
  BotQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 12c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %239:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
Bottom Pressure:
GPR32=2
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %238:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
Bottom Pressure:
GPR32=1
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   %238:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
SU(1):   %239:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
SU(2):   %240:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
SU(3):   STRWroX %238:gpr32, %239:gpr64common, %240:gpr64, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
SU(4):   %241:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
SU(5):   %242:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
SU(6):   STRXroX $xzr, %241:gpr64common, %242:gpr64, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
SU(7):   STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32

********** MI Scheduling **********
sparse:%bb.38 if.else
  From: %209:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
    To: Bcc 1, %bb.40, implicit killed $nzcv, debug-location !1579; cg.c:742:30
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %209:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%209
  Single Issue       : false;
SU(1):   %210:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%210
  Single Issue       : false;
SU(2):   %211:gpr32common = LDRWroX %209:gpr64common, %210:gpr64, 0, 1, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%210
    SU(0): Data Latency=4 Reg=%209
  Successors:
    SU(3): Data Latency=4 Reg=%211
  Single Issue       : false;
SU(3):   dead $wzr = ADDSWri %211:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1579; cg.c:742:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%211
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.40, implicit killed $nzcv, debug-location !1579; cg.c:742:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = ADDSWri %211:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1579; cg.c:742:30
  Ready @1c
  BotQ.A TopLatency SU(3) 8c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %211:gpr32common = LDRWroX %209:gpr64common, %210:gpr64, 0, 1, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %210:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 3
  Executed: 10c
  Critical: 3c, 3 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %209:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   %209:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
SU(1):   %210:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
SU(2):   %211:gpr32common = LDRWroX %209:gpr64common, %210:gpr64, 0, 1, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:30
SU(3):   dead $wzr = ADDSWri %211:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1579; cg.c:742:30

********** MI Scheduling **********
sparse:%bb.39 if.then162
  From: %226:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
    To: B %bb.43, debug-location !1586; cg.c:745:25
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %226:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%226
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %227:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%227
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %228:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=%228
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   STRWroX %226:gpr32, %227:gpr64common, %228:gpr64, 0, 1, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=%228
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=%227
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%226
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.43, debug-location !1586; cg.c:745:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32
  Ready @0c
  BotQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWroX %226:gpr32, %227:gpr64common, %228:gpr64, 0, 1, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  Ready @1c
  BotQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  BotQ.A RemainingLatency 0 + 5c > CritPath 4
Picking from Bot:
  Cand SU(2) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %228:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  Ready @5c
  BotQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 6c > CritPath 4
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %227:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %226:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   %226:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
SU(1):   %227:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
SU(2):   %228:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
SU(3):   STRWroX %226:gpr32, %227:gpr64common, %228:gpr64, 0, 1, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
SU(4):   STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32

********** MI Scheduling **********
sparse:%bb.40 if.else165
  From: %213:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
    To: Bcc 1, %bb.42, implicit killed $nzcv, debug-location !1592; cg.c:747:30
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %213:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%213
  Single Issue       : false;
SU(1):   %214:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%214
  Single Issue       : false;
SU(2):   %215:gpr32 = LDRWroX %213:gpr64common, %214:gpr64, 0, 1, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%214
    SU(0): Data Latency=4 Reg=%213
  Successors:
    SU(4): Data Latency=4 Reg=%215
  Single Issue       : false;
SU(3):   %216:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1590 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%216
  Single Issue       : false;
SU(4):   dead $wzr = SUBSWrr %215:gpr32, %216:gpr32, implicit-def $nzcv, debug-location !1592; cg.c:747:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%215
    SU(3): Data Latency=4 Reg=%216
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 1, %bb.42, implicit killed $nzcv, debug-location !1592; cg.c:747:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) dead $wzr = SUBSWrr %215:gpr32, %216:gpr32, implicit-def $nzcv, debug-location !1592; cg.c:747:30
  Ready @1c
  BotQ.A TopLatency SU(4) 8c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
Picking from Bot:
  Cand SU(2) ORDER                              
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %216:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1590 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  Ready @5c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %215:gpr32 = LDRWroX %213:gpr64common, %214:gpr64, 0, 1, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  Ready @6c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 10c > CritPath 9
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %214:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  Ready @10c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 4
  Executed: 11c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %213:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 5
  Executed: 12c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   %213:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
SU(1):   %214:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
SU(2):   %215:gpr32 = LDRWroX %213:gpr64common, %214:gpr64, 0, 1, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
SU(3):   %216:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1590 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
SU(4):   dead $wzr = SUBSWrr %215:gpr32, %216:gpr32, implicit-def $nzcv, debug-location !1592; cg.c:747:30

********** MI Scheduling **********
sparse:%bb.41 if.then170
  From: %220:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
    To: B %bb.43, debug-location !1601; cg.c:753:25
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %220:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=%220
    SU(3): Data Latency=4 Reg=%220
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %221:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=%221
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(2):   %222:gpr64 = UBFMXri %221:gpr64, 62, 61, debug-location !1593; cg.c:751:36
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=%221
  Successors:
    SU(5): Data Latency=1 Reg=%222
    SU(3): Data Latency=1 Reg=%222
  Single Issue       : false;
SU(3):   %223:gpr32common = LDRWroX %220:gpr64common, %222:gpr64, 0, 0, debug-location !1593 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%222
    SU(0): Data Latency=4 Reg=%220
  Successors:
    SU(4): Data Latency=4 Reg=%223
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %224:gpr32common = nsw ADDWri %223:gpr32common, 1, 0, debug-location !1596; cg.c:751:45
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%223
  Successors:
    SU(5): Data Latency=1 Reg=%224
  Single Issue       : false;
SU(5):   STRWroX %224:gpr32common, %220:gpr64common, %222:gpr64, 0, 0, debug-location !1599 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  # preds left       : 6
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%224
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%222
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%220
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(6):   STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.43, debug-location !1601; cg.c:753:25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 10
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32
  Ready @0c
  BotQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) STRWroX %224:gpr32common, %220:gpr64common, %222:gpr64, 0, 0, debug-location !1599 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  Ready @1c
  BotQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %224:gpr32common = nsw ADDWri %223:gpr32common, 1, 0, debug-location !1596; cg.c:751:45
  Ready @2c
  BotQ.A BotLatency SU(4) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %223:gpr32common = LDRWroX %220:gpr64common, %222:gpr64, 0, 0, debug-location !1593 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  Ready @6c
  BotQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %222:gpr64 = UBFMXri %221:gpr64, 62, 61, debug-location !1593; cg.c:751:36
  Ready @7c
  BotQ.A BotLatency SU(2) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %220:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  Ready @10c
  BotQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %221:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  Ready @11c
  BotQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.41 ***
SU(1):   %221:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
SU(0):   %220:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
SU(2):   %222:gpr64 = UBFMXri %221:gpr64, 62, 61, debug-location !1593; cg.c:751:36
SU(3):   %223:gpr32common = LDRWroX %220:gpr64common, %222:gpr64, 0, 0, debug-location !1593 :: (load 4 from %ir.arrayidx172); cg.c:751:36
SU(4):   %224:gpr32common = nsw ADDWri %223:gpr32common, 1, 0, debug-location !1596; cg.c:751:45
SU(5):   STRWroX %224:gpr32common, %220:gpr64common, %222:gpr64, 0, 0, debug-location !1599 :: (store 4 into %ir.arrayidx175); cg.c:751:34
SU(6):   STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32

********** MI Scheduling **********
sparse:%bb.42 for.inc179
  From: %218:gpr32common = LDRWui %stack.20.k, 0, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
    To: B %bb.30, debug-location !1603; cg.c:726:17
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %218:gpr32common = LDRWui %stack.20.k, 0, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%218
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0, debug-location !1602; cg.c:726:57
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%218
  Successors:
    SU(2): Data Latency=1 Reg=%219
  Single Issue       : false;
SU(2):   STRWui %219:gpr32common, %stack.20.k, 0, debug-location !1602 :: (store 4 into %ir.k); cg.c:726:57
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%219
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.30, debug-location !1603; cg.c:726:17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %219:gpr32common, %stack.20.k, 0, debug-location !1602 :: (store 4 into %ir.k); cg.c:726:57
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0, debug-location !1602; cg.c:726:57
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %218:gpr32common = LDRWui %stack.20.k, 0, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   %218:gpr32common = LDRWui %stack.20.k, 0, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
SU(1):   %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0, debug-location !1602; cg.c:726:57
SU(2):   STRWui %219:gpr32common, %stack.20.k, 0, debug-location !1602 :: (store 4 into %ir.k); cg.c:726:57

********** MI Scheduling **********
sparse:%bb.44 if.then184
  From: $x0 = MOVaddr target-flags(aarch64-page) @cg__str_39_internal_e, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !1612; cg.c:757:21
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_39_internal_e, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $w1 = COPY %246:gpr32, debug-location !1612; cg.c:757:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !1612; cg.c:757:21
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) $w1 = COPY %246:gpr32, debug-location !1612; cg.c:757:21
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) $x0 = MOVaddr target-flags(aarch64-page) @cg__str_39_internal_e, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   $x0 = MOVaddr target-flags(aarch64-page) @cg__str_39_internal_e, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
SU(1):   $w1 = COPY %246:gpr32, debug-location !1612; cg.c:757:21

********** MI Scheduling **********
sparse:%bb.45 if.end186
  From: %249:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
    To: B %bb.25, debug-location !1622; cg.c:713:13
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %249:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=%249
    SU(3): Data Latency=4 Reg=%249
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %250:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%250
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %251:gpr64 = UBFMXri %250:gpr64, 61, 60, debug-location !1614; cg.c:761:24
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%250
  Successors:
    SU(6): Data Latency=1 Reg=%251
    SU(3): Data Latency=1 Reg=%251
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %252:fpr64 = LDRDroX %249:gpr64common, %251:gpr64, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%251
    SU(0): Data Latency=4 Reg=%249
  Successors:
    SU(5): Data Latency=4 Reg=%252
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(4):   %253:fpr64 = LDRDui %stack.27.va, 0, debug-location !1616 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Data Latency=4 Reg=%253
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %254:fpr64 = FADDDrr %252:fpr64, %253:fpr64, debug-location !1617; cg.c:761:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=%252
    SU(4): Data Latency=4 Reg=%253
  Successors:
    SU(6): Data Latency=1 Reg=%254
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   STRDroX %254:fpr64, %249:gpr64common, %251:gpr64, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%254
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%251
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%249
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   %255:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1621 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%255
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0, debug-location !1621; cg.c:713:51
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%255
  Successors:
    SU(9): Data Latency=1 Reg=%256
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   STRWui %256:gpr32common, %stack.22.nzrow, 0, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%256
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.25, debug-location !1622; cg.c:713:13
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWui %256:gpr32common, %stack.22.nzrow, 0, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51
Bottom Pressure:
GPR32=1
  LiveReg: %256
  UpdateRegP: SU(9) STRWui %256:gpr32common, %stack.22.nzrow, 0, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0, debug-location !1621; cg.c:713:51
Bottom Pressure:
GPR32=1
  LiveReg: %255
  UpdateRegP: SU(8) %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0, debug-location !1621; cg.c:713:51
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %255:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1621 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRDroX %254:fpr64, %249:gpr64common, %251:gpr64, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %254
  UpdateRegP: SU(6) STRDroX %254:fpr64, %249:gpr64common, %251:gpr64, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
              to GPR32 2
  LiveReg: %249
  UpdateRegP: SU(3) %252:fpr64 = LDRDroX %249:gpr64common, %251:gpr64, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(6) STRDroX %254:fpr64, %249:gpr64common, %251:gpr64, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
              to GPR32 1
  LiveReg: %251
  UpdateRegP: SU(3) %252:fpr64 = LDRDroX %249:gpr64common, %251:gpr64, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(6) STRDroX %254:fpr64, %249:gpr64common, %251:gpr64, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
              to 
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %254:fpr64 = FADDDrr %252:fpr64, %253:fpr64, debug-location !1617; cg.c:761:29
Bottom Pressure:
FPR8=2
GPR32=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %252
  UpdateRegP: SU(5) %254:fpr64 = FADDDrr %252:fpr64, %253:fpr64, debug-location !1617; cg.c:761:29
              to 
  LiveReg: %253
  UpdateRegP: SU(5) %254:fpr64 = FADDDrr %252:fpr64, %253:fpr64, debug-location !1617; cg.c:761:29
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %253:fpr64 = LDRDui %stack.27.va, 0, debug-location !1616 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %252:fpr64 = LDRDroX %249:gpr64common, %251:gpr64, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
Bottom Pressure:
GPR32=2
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %251:gpr64 = UBFMXri %250:gpr64, 61, 60, debug-location !1614; cg.c:761:24
Bottom Pressure:
GPR32=2
  LiveReg: %250
  UpdateRegP: SU(2) %251:gpr64 = UBFMXri %250:gpr64, 61, 60, debug-location !1614; cg.c:761:24
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %249:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
Bottom Pressure:
GPR32=1
  Ready @16c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 9
  Executed: 17c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %250:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
Bottom Pressure:

  Ready @17c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 10
  Executed: 18c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.45 ***
SU(1):   %250:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
SU(0):   %249:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
SU(2):   %251:gpr64 = UBFMXri %250:gpr64, 61, 60, debug-location !1614; cg.c:761:24
SU(3):   %252:fpr64 = LDRDroX %249:gpr64common, %251:gpr64, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
SU(4):   %253:fpr64 = LDRDui %stack.27.va, 0, debug-location !1616 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
SU(5):   %254:fpr64 = FADDDrr %252:fpr64, %253:fpr64, debug-location !1617; cg.c:761:29
SU(6):   STRDroX %254:fpr64, %249:gpr64common, %251:gpr64, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
SU(7):   %255:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1621 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
SU(8):   %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0, debug-location !1621; cg.c:713:51
SU(9):   STRWui %256:gpr32common, %stack.22.nzrow, 0, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51

********** MI Scheduling **********
sparse:%bb.46 for.inc195
  From: %166:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
    To: B %bb.23, debug-location !1626; cg.c:709:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %166:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%166
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %167:gpr32common = nsw ADDWri %166:gpr32common, 1, 0, debug-location !1625; cg.c:709:41
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%166
  Successors:
    SU(2): Data Latency=1 Reg=%167
  Single Issue       : false;
SU(2):   STRWui %167:gpr32common, %stack.19.nza, 0, debug-location !1625 :: (store 4 into %ir.nza); cg.c:709:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%167
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.23, debug-location !1626; cg.c:709:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %167:gpr32common, %stack.19.nza, 0, debug-location !1625 :: (store 4 into %ir.nza); cg.c:709:41
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %167:gpr32common = nsw ADDWri %166:gpr32common, 1, 0, debug-location !1625; cg.c:709:41
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %166:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   %166:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
SU(1):   %167:gpr32common = nsw ADDWri %166:gpr32common, 1, 0, debug-location !1625; cg.c:709:41
SU(2):   STRWui %167:gpr32common, %stack.19.nza, 0, debug-location !1625 :: (store 4 into %ir.nza); cg.c:709:41

********** MI Scheduling **********
sparse:%bb.47 for.end197
  From: %139:fpr64 = LDRDui %stack.24.size, 0, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
    To: B %bb.21, debug-location !1634; cg.c:708:5
 RegionInstrs: 7
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %139:fpr64 = LDRDui %stack.24.size, 0, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%139
    SU(3): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %140:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1630 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%140
  Single Issue       : false;
SU(2):   %141:fpr64 = FMULDrr %139:fpr64, %140:fpr64, debug-location !1631; cg.c:764:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%140
    SU(0): Data Latency=4 Reg=%139
  Successors:
    SU(3): Data Latency=1 Reg=%141
  Single Issue       : false;
SU(3):   STRDui %141:fpr64, %stack.24.size, 0, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%141
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
SU(4):   %142:gpr32common = LDRWui %stack.15.i, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=%142
    SU(6): Ord  Latency=0 Memory
  Single Issue       : false;
SU(5):   %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0, debug-location !1633; cg.c:708:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(4): Data Latency=4 Reg=%142
  Successors:
    SU(6): Data Latency=1 Reg=%143
  Single Issue       : false;
SU(6):   STRWui %143:gpr32common, %stack.15.i, 0, debug-location !1633 :: (store 4 into %ir.i); cg.c:708:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%143
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.21, debug-location !1634; cg.c:708:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) STRWui %143:gpr32common, %stack.15.i, 0, debug-location !1633 :: (store 4 into %ir.i); cg.c:708:25
  Ready @0c
  BotQ.A TopLatency SU(6) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
  BotQ.A RemainingLatency 5 + 1c > CritPath 5
Picking from Bot:
  Cand SU(3) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(3) STRDui %141:fpr64, %stack.24.size, 0, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(5) 4c
  BotQ.A RemainingLatency 4 + 2c > CritPath 5
Picking from Bot:
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0, debug-location !1633; cg.c:708:25
  Ready @2c
  BotQ.A BotLatency SU(5) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %141:fpr64 = FMULDrr %139:fpr64, %140:fpr64, debug-location !1631; cg.c:764:21
  Ready @3c
  BotQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 0 1 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %142:gpr32common = LDRWui %stack.15.i, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  Ready @6c
  BotQ.A BotLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 7c > CritPath 5
Picking from Bot:
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %140:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1630 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %139:fpr64 = LDRDui %stack.24.size, 0, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   %139:fpr64 = LDRDui %stack.24.size, 0, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
SU(1):   %140:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1630 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
SU(4):   %142:gpr32common = LDRWui %stack.15.i, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
SU(2):   %141:fpr64 = FMULDrr %139:fpr64, %140:fpr64, debug-location !1631; cg.c:764:21
SU(5):   %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0, debug-location !1633; cg.c:708:25
SU(3):   STRDui %141:fpr64, %stack.24.size, 0, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
SU(6):   STRWui %143:gpr32common, %stack.15.i, 0, debug-location !1633 :: (store 4 into %ir.i); cg.c:708:25

********** MI Scheduling **********
sparse:%bb.48 for.end201
  From: %60:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %60:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%60
  Single Issue       : false;
SU(1):   STRWui %60:gpr32, %stack.16.j, 0, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%60
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %60:gpr32, %stack.16.j, 0, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %60:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   %60:gpr32 = MOVi32imm 1
SU(1):   STRWui %60:gpr32, %stack.16.j, 0, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12

********** MI Scheduling **********
sparse:%bb.49 for.cond202
  From: %61:gpr32 = LDRWui %stack.16.j, 0, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
    To: Bcc 10, %bb.51, implicit killed $nzcv, debug-location !1644; cg.c:770:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %61:gpr32 = LDRWui %stack.16.j, 0, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%61
  Single Issue       : false;
SU(1):   %62:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1642 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%62
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %61:gpr32, %62:gpr32, implicit-def $nzcv, debug-location !1644; cg.c:770:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%62
    SU(0): Data Latency=4 Reg=%61
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.51, implicit killed $nzcv, debug-location !1644; cg.c:770:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %61:gpr32, %62:gpr32, implicit-def $nzcv, debug-location !1644; cg.c:770:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %62:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1642 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %61:gpr32 = LDRWui %stack.16.j, 0, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.49 ***
SU(0):   %61:gpr32 = LDRWui %stack.16.j, 0, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
SU(1):   %62:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1642 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
SU(2):   dead $wzr = SUBSWrr %61:gpr32, %62:gpr32, implicit-def $nzcv, debug-location !1644; cg.c:770:5

********** MI Scheduling **********
sparse:%bb.50 for.body205
  From: %125:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
    To: B %bb.49, debug-location !1656; cg.c:770:5
 RegionInstrs: 10
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %125:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%125
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %126:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%126
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %127:gpr64common = ADDXrs %125:gpr64, %126:gpr64, 2, debug-location !1645; cg.c:771:20
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%126
    SU(0): Data Latency=4 Reg=%125
  Successors:
    SU(6): Data Latency=1 Reg=%127
    SU(4): Data Latency=1 Reg=%127
    SU(3): Data Latency=1 Reg=%127
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(3):   %128:gpr32 = LDRWui %127:gpr64common, 0, debug-location !1645 :: (load 4 from %ir.arrayidx207); cg.c:771:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%127
  Successors:
    SU(5): Data Latency=4 Reg=%128
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(4):   %129:gpr32 = LDURWi %127:gpr64common, -4, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%127
  Successors:
    SU(5): Data Latency=4 Reg=%129
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %130:gpr32 = nsw ADDWrr %128:gpr32, %129:gpr32, debug-location !1651; cg.c:771:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(4): Data Latency=4 Reg=%129
    SU(3): Data Latency=4 Reg=%128
  Successors:
    SU(6): Data Latency=1 Reg=%130
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   STRWui %130:gpr32, %127:gpr64common, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=%130
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%127
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 2
  Single Issue       : false;
SU(7):   %131:gpr32common = LDRWui %stack.16.j, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Ord  Latency=1 Memory
  Successors:
    SU(8): Data Latency=4 Reg=%131
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(8):   %132:gpr32common = nsw ADDWri %131:gpr32common, 1, 0, debug-location !1655; cg.c:770:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(7): Data Latency=4 Reg=%131
  Successors:
    SU(9): Data Latency=1 Reg=%132
  Pressure Diff      : 
  Single Issue       : false;
SU(9):   STRWui %132:gpr32common, %stack.16.j, 0, debug-location !1655 :: (store 4 into %ir.j); cg.c:770:29
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%132
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.49, debug-location !1656; cg.c:770:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWui %132:gpr32common, %stack.16.j, 0, debug-location !1655 :: (store 4 into %ir.j); cg.c:770:29
Bottom Pressure:
GPR32=1
  LiveReg: %132
  UpdateRegP: SU(9) STRWui %132:gpr32common, %stack.16.j, 0, debug-location !1655 :: (store 4 into %ir.j); cg.c:770:29
              to 
  Ready @0c
  BotQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %132:gpr32common = nsw ADDWri %131:gpr32common, 1, 0, debug-location !1655; cg.c:770:29
Bottom Pressure:
GPR32=1
  LiveReg: %131
  UpdateRegP: SU(8) %132:gpr32common = nsw ADDWri %131:gpr32common, 1, 0, debug-location !1655; cg.c:770:29
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(8) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %131:gpr32common = LDRWui %stack.16.j, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(7) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 
Pick Bot ONLY1     
Scheduling SU(6) STRWui %130:gpr32, %127:gpr64common, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
Bottom Pressure:
GPR32=2
  LiveReg: %130
  UpdateRegP: SU(6) STRWui %130:gpr32, %127:gpr64common, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
              to GPR32 1
  LiveReg: %127
  UpdateRegP: SU(3) %128:gpr32 = LDRWui %127:gpr64common, 0, debug-location !1645 :: (load 4 from %ir.arrayidx207); cg.c:771:20
              to GPR32 -1
  UpdateRegP: SU(4) %129:gpr32 = LDURWi %127:gpr64common, -4, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
              to GPR32 -1
  UpdateRegP: SU(6) STRWui %130:gpr32, %127:gpr64common, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
              to 
  Ready @6c
  BotQ.A BotLatency SU(6) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %130:gpr32 = nsw ADDWrr %128:gpr32, %129:gpr32, debug-location !1651; cg.c:771:29
Bottom Pressure:
GPR32=3
  LiveReg: %128
  UpdateRegP: SU(5) %130:gpr32 = nsw ADDWrr %128:gpr32, %129:gpr32, debug-location !1651; cg.c:771:29
              to 
  LiveReg: %129
  UpdateRegP: SU(5) %130:gpr32 = nsw ADDWrr %128:gpr32, %129:gpr32, debug-location !1651; cg.c:771:29
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(5) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
BotQ.A RemLatency SU(4) 5c
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %129:gpr32 = LDURWi %127:gpr64common, -4, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
Bottom Pressure:
GPR32=2
  Ready @11c
  BotQ.A BotLatency SU(4) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %128:gpr32 = LDRWui %127:gpr64common, 0, debug-location !1645 :: (load 4 from %ir.arrayidx207); cg.c:771:20
Bottom Pressure:
GPR32=1
  Ready @12c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %127:gpr64common = ADDXrs %125:gpr64, %126:gpr64, 2, debug-location !1645; cg.c:771:20
Bottom Pressure:
GPR32=2
  LiveReg: %125
  UpdateRegP: SU(2) %127:gpr64common = ADDXrs %125:gpr64, %126:gpr64, 2, debug-location !1645; cg.c:771:20
              to 
  LiveReg: %126
  UpdateRegP: SU(2) %127:gpr64common = ADDXrs %125:gpr64, %126:gpr64, 2, debug-location !1645; cg.c:771:20
              to GPR32 -1
  Ready @13c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 17 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 17c > CritPath 16
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %126:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
Bottom Pressure:
GPR32=1
  Ready @17c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %125:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
Bottom Pressure:

  Ready @18c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 10
  Executed: 19c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.50 ***
SU(0):   %125:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
SU(1):   %126:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
SU(2):   %127:gpr64common = ADDXrs %125:gpr64, %126:gpr64, 2, debug-location !1645; cg.c:771:20
SU(3):   %128:gpr32 = LDRWui %127:gpr64common, 0, debug-location !1645 :: (load 4 from %ir.arrayidx207); cg.c:771:20
SU(4):   %129:gpr32 = LDURWi %127:gpr64common, -4, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
SU(5):   %130:gpr32 = nsw ADDWrr %128:gpr32, %129:gpr32, debug-location !1651; cg.c:771:29
SU(6):   STRWui %130:gpr32, %127:gpr64common, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
SU(7):   %131:gpr32common = LDRWui %stack.16.j, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
SU(8):   %132:gpr32common = nsw ADDWri %131:gpr32common, 1, 0, debug-location !1655; cg.c:770:29
SU(9):   STRWui %132:gpr32common, %stack.16.j, 0, debug-location !1655 :: (store 4 into %ir.j); cg.c:770:29

********** MI Scheduling **********
sparse:%bb.52 for.cond217
  From: %65:gpr32 = LDRWui %stack.16.j, 0, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
    To: Bcc 10, %bb.60, implicit killed $nzcv, debug-location !1666; cg.c:774:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %65:gpr32 = LDRWui %stack.16.j, 0, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%65
  Single Issue       : false;
SU(1):   %66:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1664 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%66
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %65:gpr32, %66:gpr32, implicit-def $nzcv, debug-location !1666; cg.c:774:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%66
    SU(0): Data Latency=4 Reg=%65
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.60, implicit killed $nzcv, debug-location !1666; cg.c:774:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %65:gpr32, %66:gpr32, implicit-def $nzcv, debug-location !1666; cg.c:774:5
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %66:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1664 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %65:gpr32 = LDRWui %stack.16.j, 0, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.52 ***
SU(0):   %65:gpr32 = LDRWui %stack.16.j, 0, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
SU(1):   %66:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1664 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
SU(2):   dead $wzr = SUBSWrr %65:gpr32, %66:gpr32, implicit-def $nzcv, debug-location !1666; cg.c:774:5

********** MI Scheduling **********
sparse:%bb.53 for.body220
  From: %87:gpr32common = LDRWui %stack.16.j, 0, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
    To: Bcc 11, %bb.55, implicit killed $nzcv, debug-location !1671; cg.c:775:13
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %87:gpr32common = LDRWui %stack.16.j, 0, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%87
  Single Issue       : false;
SU(1):   dead $wzr = SUBSWri %87:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1671; cg.c:775:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%87
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 11, %bb.55, implicit killed $nzcv, debug-location !1671; cg.c:775:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri %87:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1671; cg.c:775:13
  Ready @1c
  BotQ.A TopLatency SU(1) 4c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %87:gpr32common = LDRWui %stack.16.j, 0, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   %87:gpr32common = LDRWui %stack.16.j, 0, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
SU(1):   dead $wzr = SUBSWri %87:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1671; cg.c:775:13

********** MI Scheduling **********
sparse:%bb.54 if.then223
  From: %90:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
    To: B %bb.56, debug-location !1680; cg.c:777:9
 RegionInstrs: 9
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=3
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %90:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=%90
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %91:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(2): Data Latency=4 Reg=%91
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %92:gpr64 = UBFMXri %91:gpr64, 62, 61, debug-location !1672; cg.c:776:18
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(1): Data Latency=4 Reg=%91
  Successors:
    SU(5): Data Latency=1 Reg=%92
    SU(3): Data Latency=1 Reg=%92
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %93:gpr32 = LDRWroX %90:gpr64common, %92:gpr64, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=%92
    SU(0): Data Latency=4 Reg=%90
  Successors:
    SU(7): Data Latency=4 Reg=%93
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %94:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=%94
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %95:gpr64common = ADDXrr %92:gpr64, %94:gpr64, debug-location !1675; cg.c:776:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(2): Data Latency=1 Reg=%92
    SU(4): Data Latency=4 Reg=%94
  Successors:
    SU(6): Data Latency=1 Reg=%95
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %96:gpr32 = LDURWi %95:gpr64common, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(5): Data Latency=1 Reg=%95
  Successors:
    SU(7): Data Latency=4 Reg=%96
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %97:gpr32 = nsw SUBWrr %93:gpr32, %96:gpr32, debug-location !1678; cg.c:776:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(6): Data Latency=4 Reg=%96
    SU(3): Data Latency=4 Reg=%93
  Successors:
    SU(8): Data Latency=1 Reg=%97
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   STRWui %97:gpr32, %stack.17.j1, 0, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%97
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.56, debug-location !1680; cg.c:777:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 11
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRWui %97:gpr32, %stack.17.j1, 0, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
Bottom Pressure:
GPR32=1
  LiveReg: %97
  UpdateRegP: SU(8) STRWui %97:gpr32, %stack.17.j1, 0, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
              to 
  Ready @0c
  BotQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %97:gpr32 = nsw SUBWrr %93:gpr32, %96:gpr32, debug-location !1678; cg.c:776:28
Bottom Pressure:
GPR32=2
  LiveReg: %93
  UpdateRegP: SU(7) %97:gpr32 = nsw SUBWrr %93:gpr32, %96:gpr32, debug-location !1678; cg.c:776:28
              to 
  LiveReg: %96
  UpdateRegP: SU(7) %97:gpr32 = nsw SUBWrr %93:gpr32, %96:gpr32, debug-location !1678; cg.c:776:28
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(7) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(6) 6c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %96:gpr32 = LDURWi %95:gpr64common, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
Bottom Pressure:
GPR32=2
  LiveReg: %95
  UpdateRegP: SU(6) %96:gpr32 = LDURWi %95:gpr64common, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
              to GPR32 -1
  Ready @5c
  BotQ.A BotLatency SU(6) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %95:gpr64common = ADDXrr %92:gpr64, %94:gpr64, debug-location !1675; cg.c:776:30
Bottom Pressure:
GPR32=3
  LiveReg: %92
  UpdateRegP: SU(3) %93:gpr32 = LDRWroX %90:gpr64common, %92:gpr64, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
              to 
  UpdateRegP: SU(5) %95:gpr64common = ADDXrr %92:gpr64, %94:gpr64, debug-location !1675; cg.c:776:30
              to 
  LiveReg: %94
  UpdateRegP: SU(5) %95:gpr64common = ADDXrr %92:gpr64, %94:gpr64, debug-location !1675; cg.c:776:30
              to GPR32 -1
  Ready @6c
  BotQ.A BotLatency SU(5) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %93:gpr32 = LDRWroX %90:gpr64common, %92:gpr64, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
Bottom Pressure:
GPR32=3
  LiveReg: %90
  UpdateRegP: SU(3) %93:gpr32 = LDRWroX %90:gpr64common, %92:gpr64, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
              to GPR32 -1
  Ready @7c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %92:gpr64 = UBFMXri %91:gpr64, 62, 61, debug-location !1672; cg.c:776:18
Bottom Pressure:
GPR32=3
  LiveReg: %91
  UpdateRegP: SU(2) %92:gpr64 = UBFMXri %91:gpr64, 62, 61, debug-location !1672; cg.c:776:18
              to GPR32 -1
  Ready @8c
  BotQ.A BotLatency SU(2) 7c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 10 BotQ.A
Queue BotQ.P: 1 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %94:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
Bottom Pressure:
GPR32=2
  Ready @10c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %90:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
Bottom Pressure:
GPR32=1
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %91:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
Bottom Pressure:

  Ready @12c
  BotQ.A BotLatency SU(1) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.54 ***
SU(1):   %91:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
SU(0):   %90:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
SU(4):   %94:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
SU(2):   %92:gpr64 = UBFMXri %91:gpr64, 62, 61, debug-location !1672; cg.c:776:18
SU(3):   %93:gpr32 = LDRWroX %90:gpr64common, %92:gpr64, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
SU(5):   %95:gpr64common = ADDXrr %92:gpr64, %94:gpr64, debug-location !1675; cg.c:776:30
SU(6):   %96:gpr32 = LDURWi %95:gpr64common, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
SU(7):   %97:gpr32 = nsw SUBWrr %93:gpr32, %96:gpr32, debug-location !1678; cg.c:776:28
SU(8):   STRWui %97:gpr32, %stack.17.j1, 0, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16

********** MI Scheduling **********
sparse:%bb.56 if.end231
  From: %98:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
    To: End RegionInstrs: 13
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %98:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Data Latency=4 Reg=%98
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %99:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Data Latency=4 Reg=%99
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %100:gpr64 = UBFMXri %99:gpr64, 62, 61, debug-location !1690; cg.c:782:15
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=%99
  Successors:
    SU(6): Data Latency=1 Reg=%100
    SU(3): Data Latency=1 Reg=%100
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %101:gpr64common = ADDXrr %100:gpr64, %98:gpr64, debug-location !1683; cg.c:781:14
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%100
    SU(0): Data Latency=4 Reg=%98
  Successors:
    SU(9): Data Latency=1 Reg=%101
    SU(4): Data Latency=1 Reg=%101
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %102:gpr32 = LDRWui %101:gpr64common, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  # preds left       : 1
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=%101
  Successors:
    SU(7): Data Latency=4 Reg=%102
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(5):   %103:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(6): Data Latency=4 Reg=%103
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %104:gpr32 = LDRWroX %103:gpr64common, %100:gpr64, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=%100
    SU(5): Data Latency=4 Reg=%103
  Successors:
    SU(7): Data Latency=4 Reg=%104
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(7):   %105:gpr32 = nsw SUBWrr %102:gpr32, %104:gpr32, debug-location !1688; cg.c:781:28
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=%102
    SU(6): Data Latency=4 Reg=%104
  Successors:
    SU(8): Data Latency=1 Reg=%105
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   STRWui %105:gpr32, %stack.18.j2, 0, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=%105
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(9): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(9):   %106:gpr32 = LDRWui %101:gpr64common, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(8): Ord  Latency=1 Memory
    SU(3): Data Latency=1 Reg=%101
  Successors:
    SU(10): Data Latency=4 Reg=%106
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(10):   STRWui %106:gpr32, %stack.19.nza, 0, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(9): Data Latency=4 Reg=%106
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(11):   %107:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(12): Data Latency=4 Reg=%107
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(12):   STRWui %107:gpr32, %stack.20.k, 0, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 0
  Predecessors:
    SU(11): Data Latency=4 Reg=%107
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
Critical Path(GS-RR ): 16
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 10 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 11 
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) STRWui %107:gpr32, %stack.20.k, 0, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16
Bottom Pressure:
GPR32=1
  LiveReg: %107
  UpdateRegP: SU(12) STRWui %107:gpr32, %stack.20.k, 0, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16
              to 
  Ready @0c
  BotQ.A TopLatency SU(12) 12c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 11 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) STRWui %106:gpr32, %stack.19.nza, 0, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
Bottom Pressure:
GPR32=2
  LiveReg: %106
  UpdateRegP: SU(10) STRWui %106:gpr32, %stack.19.nza, 0, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
              to 
  Ready @1c
  BotQ.A TopLatency SU(10) 16c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 4 BotQ.A
Queue BotQ.P: 9 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %107:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
Bottom Pressure:
GPR32=1
  Ready @4c
  BotQ.A BotLatency SU(11) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %106:gpr32 = LDRWui %101:gpr64common, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
Bottom Pressure:
GPR32=1
  LiveReg: %101
  UpdateRegP: SU(4) %102:gpr32 = LDRWui %101:gpr64common, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
              to GPR32 -1
  UpdateRegP: SU(9) %106:gpr32 = LDRWui %101:gpr64common, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
              to GPR32 -1
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRWui %105:gpr32, %stack.18.j2, 0, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
Bottom Pressure:
GPR32=2
  LiveReg: %105
  UpdateRegP: SU(8) STRWui %105:gpr32, %stack.18.j2, 0, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
              to 
  Ready @6c
  BotQ.A BotLatency SU(8) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %105:gpr32 = nsw SUBWrr %102:gpr32, %104:gpr32, debug-location !1688; cg.c:781:28
Bottom Pressure:
GPR32=3
  LiveReg: %102
  UpdateRegP: SU(7) %105:gpr32 = nsw SUBWrr %102:gpr32, %104:gpr32, debug-location !1688; cg.c:781:28
              to 
  LiveReg: %104
  UpdateRegP: SU(7) %105:gpr32 = nsw SUBWrr %102:gpr32, %104:gpr32, debug-location !1688; cg.c:781:28
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(7) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 4 6 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(4) 6c
  BotQ.A RemainingLatency 6 + 11c > CritPath 16
Picking from Bot:
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(4) %102:gpr32 = LDRWui %101:gpr64common, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
Bottom Pressure:
GPR32=2
  Ready @11c
  BotQ.A BotLatency SU(4) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
BotQ.A RemLatency SU(6) 5c
  BotQ.A RemainingLatency 5 + 12c > CritPath 16
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %104:gpr32 = LDRWroX %103:gpr64common, %100:gpr64, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
Bottom Pressure:
GPR32=3
  LiveReg: %103
  UpdateRegP: SU(6) %104:gpr32 = LDRWroX %103:gpr64common, %100:gpr64, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
              to 
  LiveReg: %100
  UpdateRegP: SU(3) %101:gpr64common = ADDXrr %100:gpr64, %98:gpr64, debug-location !1683; cg.c:781:14
              to 
  UpdateRegP: SU(6) %104:gpr32 = LDRWroX %103:gpr64common, %100:gpr64, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
              to GPR32 -1
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %101:gpr64common = ADDXrr %100:gpr64, %98:gpr64, debug-location !1683; cg.c:781:14
Bottom Pressure:
GPR32=3
  LiveReg: %98
  UpdateRegP: SU(3) %101:gpr64common = ADDXrr %100:gpr64, %98:gpr64, debug-location !1683; cg.c:781:14
              to GPR32 -1
  Ready @13c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 5 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %100:gpr64 = UBFMXri %99:gpr64, 62, 61, debug-location !1690; cg.c:782:15
Bottom Pressure:
GPR32=3
  LiveReg: %99
  UpdateRegP: SU(2) %100:gpr64 = UBFMXri %99:gpr64, 62, 61, debug-location !1690; cg.c:782:15
              to GPR32 -1
  Ready @14c
  BotQ.A BotLatency SU(2) 12c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 10
  Executed: 15c
  Critical: 10c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 1 0 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %103:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
Bottom Pressure:
GPR32=2
  Ready @16c
  BotQ.A BotLatency SU(5) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 11
  Executed: 17c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %98:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
Bottom Pressure:
GPR32=1
  Ready @17c
  BotQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 12
  Executed: 18c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %99:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
Bottom Pressure:

  Ready @18c
  BotQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 13
  Executed: 19c
  Critical: 13c, 13 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.56 ***
SU(1):   %99:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
SU(0):   %98:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
SU(5):   %103:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
SU(2):   %100:gpr64 = UBFMXri %99:gpr64, 62, 61, debug-location !1690; cg.c:782:15
SU(3):   %101:gpr64common = ADDXrr %100:gpr64, %98:gpr64, debug-location !1683; cg.c:781:14
SU(6):   %104:gpr32 = LDRWroX %103:gpr64common, %100:gpr64, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
SU(4):   %102:gpr32 = LDRWui %101:gpr64common, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
SU(7):   %105:gpr32 = nsw SUBWrr %102:gpr32, %104:gpr32, debug-location !1688; cg.c:781:28
SU(8):   STRWui %105:gpr32, %stack.18.j2, 0, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
SU(9):   %106:gpr32 = LDRWui %101:gpr64common, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
SU(11):   %107:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
SU(10):   STRWui %106:gpr32, %stack.19.nza, 0, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
SU(12):   STRWui %107:gpr32, %stack.20.k, 0, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16

********** MI Scheduling **********
sparse:%bb.57 for.cond240
  From: %108:gpr32 = LDRWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
    To: Bcc 10, %bb.59, implicit killed $nzcv, debug-location !1701; cg.c:783:9
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %108:gpr32 = LDRWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%108
  Single Issue       : false;
SU(1):   %109:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1699 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=%109
  Single Issue       : false;
SU(2):   dead $wzr = SUBSWrr %108:gpr32, %109:gpr32, implicit-def $nzcv, debug-location !1701; cg.c:783:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=%109
    SU(0): Data Latency=4 Reg=%108
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.59, implicit killed $nzcv, debug-location !1701; cg.c:783:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) dead $wzr = SUBSWrr %108:gpr32, %109:gpr32, implicit-def $nzcv, debug-location !1701; cg.c:783:9
  Ready @1c
  BotQ.A TopLatency SU(2) 4c
  BotQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %109:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1699 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  Ready @5c
  BotQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 2
  Executed: 6c
  Critical: 2c, 2 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %108:gpr32 = LDRWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 3
  Executed: 7c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   %108:gpr32 = LDRWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
SU(1):   %109:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1699 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
SU(2):   dead $wzr = SUBSWrr %108:gpr32, %109:gpr32, implicit-def $nzcv, debug-location !1701; cg.c:783:9

********** MI Scheduling **********
sparse:%bb.58 for.body243
  From: %113:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
    To: B %bb.57, debug-location !1717; cg.c:783:9
 RegionInstrs: 16
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: FPR8=1
GPR32=3
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %113:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(4): Data Latency=4 Reg=%113
    SU(2): Data Latency=4 Reg=%113
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %114:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 23
  Successors:
    SU(2): Data Latency=4 Reg=%114
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %115:fpr64 = LDRDroX %113:gpr64common, %114:gpr64, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 19
  Predecessors:
    SU(1): Data Latency=4 Reg=%114
    SU(0): Data Latency=4 Reg=%113
  Successors:
    SU(4): Data Latency=4 Reg=%115
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : FPR8 -1    GPR32 2    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(3):   %116:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(4): Data Latency=4 Reg=%116
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(4):   STRDroX %115:fpr64, %113:gpr64common, %116:gpr64, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  # preds left       : 7
  # succs left       : 9
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 15
  Predecessors:
    SU(2): Data Latency=4 Reg=%115
    SU(3): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=%116
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%113
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(13): Ord  Latency=1 Memory
    SU(8): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(7): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
  Pressure Diff      : FPR8 1    GPR32 2    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(5):   %117:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%117
    SU(7): Data Latency=4 Reg=%117
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(6):   %118:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 14
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(7): Data Latency=4 Reg=%118
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(7):   %119:gpr32 = LDRWroX %117:gpr64common, %118:gpr64, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 10
  Predecessors:
    SU(6): Data Latency=4 Reg=%118
    SU(5): Data Latency=4 Reg=%117
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%119
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   %120:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 10
  Predecessors:
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(9): Data Latency=4 Reg=%120
    SU(15): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(9):   STRWroX %119:gpr32, %117:gpr64common, %120:gpr64, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  # preds left       : 12
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 6
  Predecessors:
    SU(7): Data Latency=4 Reg=%119
    SU(8): Ord  Latency=0 Memory
    SU(8): Data Latency=4 Reg=%120
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=%117
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(13): Ord  Latency=1 Memory
    SU(10): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(10):   %121:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1713 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 5
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(11): Data Latency=4 Reg=%121
    SU(12): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(11):   %122:gpr32common = nsw ADDWri %121:gpr32common, 1, 0, debug-location !1714; cg.c:786:23
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 1
  Predecessors:
    SU(10): Data Latency=4 Reg=%121
  Successors:
    SU(12): Data Latency=1 Reg=%122
  Pressure Diff      : 
  Single Issue       : false;
SU(12):   STRWui %122:gpr32common, %stack.19.nza, 0, debug-location !1715 :: (store 4 into %ir.nza); cg.c:786:17
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 0
  Predecessors:
    SU(11): Data Latency=1 Reg=%122
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(13):   %123:gpr32common = LDRWui %stack.20.k, 0, debug-location !1716 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 5
  Predecessors:
    SU(9): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
  Successors:
    SU(14): Data Latency=4 Reg=%123
    SU(15): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(14):   %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !1716; cg.c:783:31
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 1
  Predecessors:
    SU(13): Data Latency=4 Reg=%123
  Successors:
    SU(15): Data Latency=1 Reg=%124
  Pressure Diff      : 
  Single Issue       : false;
SU(15):   STRWui %124:gpr32common, %stack.20.k, 0, debug-location !1716 :: (store 4 into %ir.k); cg.c:783:31
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 23
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=%124
    SU(13): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.57, debug-location !1717; cg.c:783:9
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 23
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 15 12 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
Picking from Bot:
  Cand SU(15) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(15) STRWui %124:gpr32common, %stack.20.k, 0, debug-location !1716 :: (store 4 into %ir.k); cg.c:783:31
Bottom Pressure:
GPR32=1
  LiveReg: %124
  UpdateRegP: SU(15) STRWui %124:gpr32common, %stack.20.k, 0, debug-location !1716 :: (store 4 into %ir.k); cg.c:783:31
              to 
  Ready @0c
  BotQ.A TopLatency SU(15) 23c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 12 14 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(12) 23c
  BotQ.A RemainingLatency 23 + 1c > CritPath 23
Picking from Bot:
  Cand SU(12) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(12) STRWui %122:gpr32common, %stack.19.nza, 0, debug-location !1715 :: (store 4 into %ir.nza); cg.c:786:17
Bottom Pressure:
GPR32=2
  LiveReg: %122
  UpdateRegP: SU(12) STRWui %122:gpr32common, %stack.19.nza, 0, debug-location !1715 :: (store 4 into %ir.nza); cg.c:786:17
              to 
  Ready @1c
  BotQ.A TopLatency SU(12) 23c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 14 11 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(14) 22c
  BotQ.A RemainingLatency 22 + 2c > CritPath 23
Picking from Bot:
  Cand SU(14) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(14) %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !1716; cg.c:783:31
Bottom Pressure:
GPR32=2
  LiveReg: %123
  UpdateRegP: SU(14) %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !1716; cg.c:783:31
              to GPR32 -1
  Ready @2c
  BotQ.A BotLatency SU(14) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 13 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) %122:gpr32common = nsw ADDWri %121:gpr32common, 1, 0, debug-location !1714; cg.c:786:23
Bottom Pressure:
GPR32=2
  LiveReg: %121
  UpdateRegP: SU(11) %122:gpr32common = nsw ADDWri %121:gpr32common, 1, 0, debug-location !1714; cg.c:786:23
              to GPR32 -1
  Ready @3c
  BotQ.A TopLatency SU(11) 22c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 6 BotQ.A
Queue BotQ.P: 10 
Queue BotQ.A: 13 
Pick Bot ONLY1     
Scheduling SU(13) %123:gpr32common = LDRWui %stack.20.k, 0, debug-location !1716 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
Bottom Pressure:
GPR32=1
  Ready @6c
  BotQ.A BotLatency SU(13) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %121:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1713 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
Bottom Pressure:

  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) STRWroX %119:gpr32, %117:gpr64common, %120:gpr64, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
Bottom Pressure:
GPR32=3
  LiveReg: %119
  UpdateRegP: SU(9) STRWroX %119:gpr32, %117:gpr64common, %120:gpr64, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to GPR32 2
  LiveReg: %117
  UpdateRegP: SU(7) %119:gpr32 = LDRWroX %117:gpr64common, %118:gpr64, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
              to 
  UpdateRegP: SU(9) STRWroX %119:gpr32, %117:gpr64common, %120:gpr64, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to GPR32 1
  LiveReg: %120
  UpdateRegP: SU(9) STRWroX %119:gpr32, %117:gpr64common, %120:gpr64, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
              to 
  Ready @8c
  BotQ.A BotLatency SU(9) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 BotQ.A
BotQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 12 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 8 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(7) 13c
  BotQ.A RemainingLatency 13 + 12c > CritPath 23
Picking from Bot:
  Cand SU(8) ORDER                              
  Cand SU(7) BOT-PATH                  13 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(7) %119:gpr32 = LDRWroX %117:gpr64common, %118:gpr64, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
Bottom Pressure:
GPR32=3
  LiveReg: %118
  UpdateRegP: SU(7) %119:gpr32 = LDRWroX %117:gpr64common, %118:gpr64, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(7) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 8
  Executed: 13c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 5 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) %120:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
Bottom Pressure:
GPR32=2
  Ready @13c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 9
  Executed: 14c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(6) 9c
  BotQ.A RemainingLatency 9 + 16c > CritPath 23
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(6) %118:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
Bottom Pressure:
GPR32=1
  Ready @16c
  BotQ.A BotLatency SU(6) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 5 
Pick Bot ONLY1     
Scheduling SU(5) %117:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
Bottom Pressure:

  Ready @17c
  BotQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 11
  Executed: 18c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRDroX %115:fpr64, %113:gpr64common, %116:gpr64, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
Bottom Pressure:
FPR8=1
GPR32=2
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %115
  UpdateRegP: SU(4) STRDroX %115:fpr64, %113:gpr64common, %116:gpr64, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to GPR32 2
  LiveReg: %113
  UpdateRegP: SU(2) %115:fpr64 = LDRDroX %113:gpr64common, %114:gpr64, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
              to FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  UpdateRegP: SU(4) STRDroX %115:fpr64, %113:gpr64common, %116:gpr64, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to GPR32 1
  LiveReg: %116
  UpdateRegP: SU(4) STRDroX %115:fpr64, %113:gpr64common, %116:gpr64, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
              to 
  Ready @18c
  BotQ.A BotLatency SU(4) 15c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 12
  Executed: 19c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 22 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
BotQ.A RemLatency SU(2) 4c
  BotQ.A RemainingLatency 4 + 22c > CritPath 23
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) BOT-PATH                  4 cycles 
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot BOT-PATH  
Scheduling SU(2) %115:fpr64 = LDRDroX %113:gpr64common, %114:gpr64, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
Bottom Pressure:
GPR32=3
  LiveReg: %114
  UpdateRegP: SU(2) %115:fpr64 = LDRDroX %113:gpr64common, %114:gpr64, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @22c
  BotQ.A BotLatency SU(2) 19c
  *** Max MOps 1 at cycle 22
Cycle: 23 BotQ.A
BotQ.A @23c
  Retired: 13
  Executed: 23c
  Critical: 13c, 13 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 0 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %116:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
Bottom Pressure:
GPR32=2
  Ready @23c
  *** Max MOps 1 at cycle 23
Cycle: 24 BotQ.A
BotQ.A @24c
  Retired: 14
  Executed: 24c
  Critical: 14c, 14 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 26 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  BotQ.A RemainingLatency 0 + 26c > CritPath 23
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(1) %114:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
Bottom Pressure:
GPR32=1
  Ready @26c
  BotQ.A BotLatency SU(1) 23c
  *** Max MOps 1 at cycle 26
Cycle: 27 BotQ.A
BotQ.A @27c
  Retired: 15
  Executed: 27c
  Critical: 15c, 15 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %113:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
Bottom Pressure:

  Ready @27c
  *** Max MOps 1 at cycle 27
Cycle: 28 BotQ.A
BotQ.A @28c
  Retired: 16
  Executed: 28c
  Critical: 16c, 16 MOps
  ExpectedLatency: 23c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   %113:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
SU(1):   %114:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
SU(3):   %116:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
SU(2):   %115:fpr64 = LDRDroX %113:gpr64common, %114:gpr64, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
SU(4):   STRDroX %115:fpr64, %113:gpr64common, %116:gpr64, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
SU(5):   %117:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
SU(6):   %118:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
SU(8):   %120:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
SU(7):   %119:gpr32 = LDRWroX %117:gpr64common, %118:gpr64, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
SU(9):   STRWroX %119:gpr32, %117:gpr64common, %120:gpr64, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
SU(10):   %121:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1713 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
SU(13):   %123:gpr32common = LDRWui %stack.20.k, 0, debug-location !1716 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
SU(11):   %122:gpr32common = nsw ADDWri %121:gpr32common, 1, 0, debug-location !1714; cg.c:786:23
SU(14):   %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !1716; cg.c:783:31
SU(12):   STRWui %122:gpr32common, %stack.19.nza, 0, debug-location !1715 :: (store 4 into %ir.nza); cg.c:786:17
SU(15):   STRWui %124:gpr32common, %stack.20.k, 0, debug-location !1716 :: (store 4 into %ir.k); cg.c:783:31

********** MI Scheduling **********
sparse:%bb.59 for.inc256
  From: %111:gpr32common = LDRWui %stack.16.j, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
    To: B %bb.52, debug-location !1721; cg.c:774:5
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %111:gpr32common = LDRWui %stack.16.j, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=%111
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
SU(1):   %112:gpr32common = nsw ADDWri %111:gpr32common, 1, 0, debug-location !1720; cg.c:774:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=%111
  Successors:
    SU(2): Data Latency=1 Reg=%112
  Single Issue       : false;
SU(2):   STRWui %112:gpr32common, %stack.16.j, 0, debug-location !1720 :: (store 4 into %ir.j); cg.c:774:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=%112
    SU(0): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   B %bb.52, debug-location !1721; cg.c:774:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 5
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) STRWui %112:gpr32common, %stack.16.j, 0, debug-location !1720 :: (store 4 into %ir.j); cg.c:774:29
  Ready @0c
  BotQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %112:gpr32common = nsw ADDWri %111:gpr32common, 1, 0, debug-location !1720; cg.c:774:29
  Ready @1c
  BotQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %111:gpr32common = LDRWui %stack.16.j, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   %111:gpr32common = LDRWui %stack.16.j, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
SU(1):   %112:gpr32common = nsw ADDWri %111:gpr32common, 1, 0, debug-location !1720; cg.c:774:29
SU(2):   STRWui %112:gpr32common, %stack.16.j, 0, debug-location !1720 :: (store 4 into %ir.j); cg.c:774:29

********** MI Scheduling **********
sparse:%bb.60 for.end258
  From: %68:gpr32 = MOVi32imm 1
    To: End RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %68:gpr32 = MOVi32imm 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%68
  Single Issue       : false;
SU(1):   STRWui %68:gpr32, %stack.16.j, 0, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%68
  Single Issue       : false;
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) STRWui %68:gpr32, %stack.16.j, 0, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12
  Ready @0c
  BotQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %68:gpr32 = MOVi32imm 1
  Ready @1c
  BotQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   %68:gpr32 = MOVi32imm 1
SU(1):   STRWui %68:gpr32, %stack.16.j, 0, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12

********** MI Scheduling **********
sparse:%bb.61 for.cond259
  From: %69:gpr32 = LDRWui %stack.16.j, 0, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
    To: Bcc 10, %bb.63, implicit killed $nzcv, debug-location !1732; cg.c:789:5
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %69:gpr32 = LDRWui %stack.16.j, 0, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=%69
  Single Issue       : false;
SU(1):   %70:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=4 Reg=%70
  Single Issue       : false;
SU(2):   %71:gpr32common = nsw ADDWri %70:gpr32common, 1, 0, debug-location !1730; cg.c:789:27
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=%70
  Successors:
    SU(3): Data Latency=1 Reg=%71
  Single Issue       : false;
SU(3):   dead $wzr = SUBSWrr %69:gpr32, %71:gpr32common, implicit-def $nzcv, debug-location !1732; cg.c:789:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%71
    SU(0): Data Latency=4 Reg=%69
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   Bcc 10, %bb.63, implicit killed $nzcv, debug-location !1732; cg.c:789:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 6
** ScheduleDAGMILive::schedule picking next node
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) dead $wzr = SUBSWrr %69:gpr32, %71:gpr32common, implicit-def $nzcv, debug-location !1732; cg.c:789:5
  Ready @1c
  BotQ.A TopLatency SU(3) 5c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 1
  Executed: 2c
  Critical: 1c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %71:gpr32common = nsw ADDWri %70:gpr32common, 1, 0, debug-location !1730; cg.c:789:27
  Ready @2c
  BotQ.A BotLatency SU(2) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 2
  Executed: 3c
  Critical: 2c, 2 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %69:gpr32 = LDRWui %stack.16.j, 0, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
  Ready @5c
  BotQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %70:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  Ready @6c
  BotQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.61 ***
SU(1):   %70:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
SU(0):   %69:gpr32 = LDRWui %stack.16.j, 0, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
SU(2):   %71:gpr32common = nsw ADDWri %70:gpr32common, 1, 0, debug-location !1730; cg.c:789:27
SU(3):   dead $wzr = SUBSWrr %69:gpr32, %71:gpr32common, implicit-def $nzcv, debug-location !1732; cg.c:789:5

********** MI Scheduling **********
sparse:%bb.62 for.body263
  From: %77:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
    To: B %bb.61, debug-location !1744; cg.c:789:5
 RegionInstrs: 12
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR32=4
Live In: 
Live Out: 
Live Thru: 
Top Pressure:

Bottom Pressure:

Excess PSets: 
SU(0):   %77:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(8): Data Latency=4 Reg=%77
    SU(3): Data Latency=4 Reg=%77
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(1):   %78:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 17
  Successors:
    SU(2): Data Latency=4 Reg=%78
    SU(11): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(2):   %79:gpr64 = UBFMXri %78:gpr64, 62, 61, debug-location !1733; cg.c:790:21
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 13
  Predecessors:
    SU(1): Data Latency=4 Reg=%78
  Successors:
    SU(8): Data Latency=1 Reg=%79
    SU(5): Data Latency=1 Reg=%79
    SU(3): Data Latency=1 Reg=%79
  Pressure Diff      : 
  Single Issue       : false;
SU(3):   %80:gpr32 = LDRWroX %77:gpr64common, %79:gpr64, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=%79
    SU(0): Data Latency=4 Reg=%77
  Successors:
    SU(7): Data Latency=4 Reg=%80
    SU(11): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %81:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(5): Data Latency=4 Reg=%81
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(5):   %82:gpr64common = ADDXrr %79:gpr64, %81:gpr64, debug-location !1736; cg.c:790:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 12
  Predecessors:
    SU(2): Data Latency=1 Reg=%79
    SU(4): Data Latency=4 Reg=%81
  Successors:
    SU(6): Data Latency=1 Reg=%82
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(6):   %83:gpr32 = LDURWi %82:gpr64common, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 11
  Predecessors:
    SU(5): Data Latency=1 Reg=%82
  Successors:
    SU(7): Data Latency=4 Reg=%83
    SU(11): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %84:gpr32 = nsw SUBWrr %80:gpr32, %83:gpr32, debug-location !1739; cg.c:790:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 7
  Predecessors:
    SU(6): Data Latency=4 Reg=%83
    SU(3): Data Latency=4 Reg=%80
  Successors:
    SU(8): Data Latency=1 Reg=%84
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(8):   STRWroX %84:gpr32, %77:gpr64common, %79:gpr64, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 6
  Predecessors:
    SU(7): Data Latency=1 Reg=%84
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%79
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=%77
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(11): Ord  Latency=0 Memory
    SU(9): Ord  Latency=1 Memory
  Pressure Diff      : GPR32 3
  Single Issue       : false;
SU(9):   %85:gpr32common = LDRWui %stack.16.j, 0, debug-location !1743 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 5
  Predecessors:
    SU(8): Ord  Latency=1 Memory
  Successors:
    SU(10): Data Latency=4 Reg=%85
    SU(11): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 -1
  Single Issue       : false;
SU(10):   %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !1743; cg.c:789:33
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=%85
  Successors:
    SU(11): Data Latency=1 Reg=%86
  Pressure Diff      : 
  Single Issue       : false;
SU(11):   STRWui %86:gpr32common, %stack.16.j, 0, debug-location !1743 :: (store 4 into %ir.j); cg.c:789:33
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=%86
    SU(9): Ord  Latency=0 Memory
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
  Pressure Diff      : GPR32 1
  Single Issue       : false;
ExitSU:   B %bb.61, debug-location !1744; cg.c:789:5
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 17
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 11 
Pick Bot ONLY1     
Scheduling SU(11) STRWui %86:gpr32common, %stack.16.j, 0, debug-location !1743 :: (store 4 into %ir.j); cg.c:789:33
Bottom Pressure:
GPR32=1
  LiveReg: %86
  UpdateRegP: SU(11) STRWui %86:gpr32common, %stack.16.j, 0, debug-location !1743 :: (store 4 into %ir.j); cg.c:789:33
              to 
  Ready @0c
  BotQ.A TopLatency SU(11) 17c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 10 
Pick Bot ONLY1     
Scheduling SU(10) %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !1743; cg.c:789:33
Bottom Pressure:
GPR32=1
  LiveReg: %85
  UpdateRegP: SU(10) %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !1743; cg.c:789:33
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(10) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 9 
Pick Bot ONLY1     
Scheduling SU(9) %85:gpr32common = LDRWui %stack.16.j, 0, debug-location !1743 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
Bottom Pressure:

  Ready @5c
  BotQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 8 
Pick Bot ONLY1     
Scheduling SU(8) STRWroX %84:gpr32, %77:gpr64common, %79:gpr64, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
Bottom Pressure:
GPR32=3
  LiveReg: %84
  UpdateRegP: SU(8) STRWroX %84:gpr32, %77:gpr64common, %79:gpr64, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
              to GPR32 2
  LiveReg: %77
  UpdateRegP: SU(3) %80:gpr32 = LDRWroX %77:gpr64common, %79:gpr64, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
              to 
  UpdateRegP: SU(8) STRWroX %84:gpr32, %77:gpr64common, %79:gpr64, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
              to GPR32 1
  LiveReg: %79
  UpdateRegP: SU(3) %80:gpr32 = LDRWroX %77:gpr64common, %79:gpr64, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
              to GPR32 -1
  UpdateRegP: SU(5) %82:gpr64common = ADDXrr %79:gpr64, %81:gpr64, debug-location !1736; cg.c:790:33
              to 
  UpdateRegP: SU(8) STRWroX %84:gpr32, %77:gpr64common, %79:gpr64, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
              to 
  Ready @6c
  BotQ.A BotLatency SU(8) 6c
  *** Max MOps 1 at cycle 6
Cycle: 7 BotQ.A
BotQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Pick Bot ONLY1     
Scheduling SU(7) %84:gpr32 = nsw SUBWrr %80:gpr32, %83:gpr32, debug-location !1739; cg.c:790:31
Bottom Pressure:
GPR32=4
  LiveReg: %80
  UpdateRegP: SU(7) %84:gpr32 = nsw SUBWrr %80:gpr32, %83:gpr32, debug-location !1739; cg.c:790:31
              to 
  LiveReg: %83
  UpdateRegP: SU(7) %84:gpr32 = nsw SUBWrr %80:gpr32, %83:gpr32, debug-location !1739; cg.c:790:31
              to GPR32 -1
  Ready @7c
  BotQ.A BotLatency SU(7) 7c
  *** Max MOps 1 at cycle 7
Cycle: 8 BotQ.A
BotQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 11 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 6 3 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(6) 6c
Picking from Bot:
  Cand SU(6) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %83:gpr32 = LDURWi %82:gpr64common, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
Bottom Pressure:
GPR32=4
  LiveReg: %82
  UpdateRegP: SU(6) %83:gpr32 = LDURWi %82:gpr64common, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
              to GPR32 -1
  Ready @11c
  BotQ.A BotLatency SU(6) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 BotQ.A
BotQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
BotQ.A RemLatency SU(3) 5c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(0) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %82:gpr64common = ADDXrr %79:gpr64, %81:gpr64, debug-location !1736; cg.c:790:33
Bottom Pressure:
GPR32=4
  LiveReg: %81
  UpdateRegP: SU(5) %82:gpr64common = ADDXrr %79:gpr64, %81:gpr64, debug-location !1736; cg.c:790:33
              to GPR32 -1
  Ready @12c
  BotQ.A BotLatency SU(5) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 BotQ.A
BotQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %80:gpr32 = LDRWroX %77:gpr64common, %79:gpr64, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
Bottom Pressure:
GPR32=3
  Ready @13c
  BotQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 13
Cycle: 14 BotQ.A
BotQ.A @14c
  Retired: 8
  Executed: 14c
  Critical: 8c, 8 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 4 0 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %79:gpr64 = UBFMXri %78:gpr64, 62, 61, debug-location !1733; cg.c:790:21
Bottom Pressure:
GPR32=3
  LiveReg: %78
  UpdateRegP: SU(2) %79:gpr64 = UBFMXri %78:gpr64, 62, 61, debug-location !1733; cg.c:790:21
              to GPR32 -1
  Ready @14c
  BotQ.A BotLatency SU(2) 13c
  *** Max MOps 1 at cycle 14
Cycle: 15 BotQ.A
BotQ.A @15c
  Retired: 9
  Executed: 15c
  Critical: 9c, 9 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 16 BotQ.A
Queue BotQ.P: 1 0 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) %81:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
Bottom Pressure:
GPR32=2
  Ready @16c
  BotQ.A BotLatency SU(4) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 BotQ.A
BotQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 1 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %77:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
Bottom Pressure:
GPR32=1
  Ready @17c
  *** Max MOps 1 at cycle 17
Cycle: 18 BotQ.A
BotQ.A @18c
  Retired: 11
  Executed: 18c
  Critical: 11c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Pick Bot ONLY1     
Scheduling SU(1) %78:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
Bottom Pressure:

  Ready @18c
  BotQ.A BotLatency SU(1) 17c
  *** Max MOps 1 at cycle 18
Cycle: 19 BotQ.A
BotQ.A @19c
  Retired: 12
  Executed: 19c
  Critical: 12c, 12 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.62 ***
SU(1):   %78:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
SU(0):   %77:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
SU(4):   %81:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
SU(2):   %79:gpr64 = UBFMXri %78:gpr64, 62, 61, debug-location !1733; cg.c:790:21
SU(3):   %80:gpr32 = LDRWroX %77:gpr64common, %79:gpr64, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
SU(5):   %82:gpr64common = ADDXrr %79:gpr64, %81:gpr64, debug-location !1736; cg.c:790:33
SU(6):   %83:gpr32 = LDURWi %82:gpr64common, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
SU(7):   %84:gpr32 = nsw SUBWrr %80:gpr32, %83:gpr32, debug-location !1739; cg.c:790:31
SU(8):   STRWroX %84:gpr32, %77:gpr64common, %79:gpr64, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
SU(9):   %85:gpr32common = LDRWui %stack.16.j, 0, debug-location !1743 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
SU(10):   %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !1743; cg.c:789:33
SU(11):   STRWui %86:gpr32common, %stack.16.j, 0, debug-location !1743 :: (store 4 into %ir.j); cg.c:789:33

********** MI Scheduling **********
sparse:%bb.63 for.end274
  From: %73:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
    To: RET_ReallyLR debug-location !1751; cg.c:793:1
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=0
SU(0):   %73:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%73
  Single Issue       : false;
SU(1):   %74:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=%74
  Single Issue       : false;
SU(2):   %75:gpr32common = LDRWroX %73:gpr64common, %74:gpr64, 0, 1, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=%74
    SU(0): Data Latency=4 Reg=%73
  Successors:
    SU(3): Data Latency=4 Reg=%75
    SU(4): Ord  Latency=0 Memory
  Single Issue       : false;
SU(3):   %76:gpr32common = SUBWri %75:gpr32common, 1, 0, debug-location !1749; cg.c:792:25
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=%75
  Successors:
    SU(4): Data Latency=1 Reg=%76
  Single Issue       : false;
SU(4):   STRWui %76:gpr32common, %stack.19.nza, 0, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%76
    SU(2): Ord  Latency=0 Memory
  Single Issue       : false;
ExitSU:   RET_ReallyLR debug-location !1751; cg.c:793:1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 9
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 
Pick Bot ONLY1     
Scheduling SU(4) STRWui %76:gpr32common, %stack.19.nza, 0, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
  Ready @0c
  BotQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) %76:gpr32common = SUBWri %75:gpr32common, 1, 0, debug-location !1749; cg.c:792:25
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 5 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 2 
Pick Bot ONLY1     
Scheduling SU(2) %75:gpr32common = LDRWroX %73:gpr64common, %74:gpr64, 0, 1, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  Ready @5c
  BotQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 BotQ.A
BotQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Cycle: 9 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 1 0 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(1) ORDER                              
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %74:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  Ready @9c
  BotQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 BotQ.A
BotQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Pick Bot ONLY1     
Scheduling SU(0) %73:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 BotQ.A
BotQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   %73:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
SU(1):   %74:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
SU(2):   %75:gpr32common = LDRWroX %73:gpr64common, %74:gpr64, 0, 1, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
SU(3):   %76:gpr32common = SUBWri %75:gpr32common, 1, 0, debug-location !1749; cg.c:792:25
SU(4):   STRWui %76:gpr32common, %stack.19.nza, 0, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9

********** INTERVALS **********
B0 [0B,32r:0)[3216r,3248r:2)[3248r,3328r:1)  0@0B-phi 1@3248r 2@3216r
B1 [0B,16r:0)[3232r,3248r:1)  0@0B-phi 1@3232r
W0 [0B,128r:0)[2000r,2016r:3)[2160r,2208r:2)[6448r,6480r:1)  0@0B-phi 1@6448r 2@2160r 3@2000r
W1 [0B,112r:0)[2176r,2208r:2)[6464r,6480r:1)  0@0B-phi 1@6464r 2@2176r
W2 [0B,96r:0)[2192r,2208r:1)  0@0B-phi 1@2192r
W3 [0B,80r:0)  0@0B-phi
W4 [0B,64r:0)  0@0B-phi
W5 [0B,48r:0)  0@0B-phi
%0 [128r,144r:0)  0@128r weight:0.000000e+00
%1 [112r,160r:0)  0@112r weight:0.000000e+00
%2 [96r,176r:0)  0@96r weight:0.000000e+00
%3 [80r,192r:0)  0@80r weight:0.000000e+00
%4 [64r,208r:0)  0@64r weight:0.000000e+00
%5 [48r,296r:0)  0@48r weight:0.000000e+00
%6 [32r,304r:0)  0@32r weight:0.000000e+00
%7 [16r,312r:0)  0@16r weight:0.000000e+00
%8 [272r,320r:0)  0@272r weight:0.000000e+00
%9 [288r,320r:0)  0@288r weight:0.000000e+00
%10 [320r,328r:0)  0@320r weight:0.000000e+00
%11 [328r,336r:0)  0@328r weight:0.000000e+00
%13 [424r,448r:0)  0@424r weight:0.000000e+00
%14 [416r,432r:0)  0@416r weight:0.000000e+00
%15 [432r,448r:0)  0@432r weight:0.000000e+00
%18 [736r,768r:0)  0@736r weight:0.000000e+00
%19 [752r,768r:0)  0@752r weight:0.000000e+00
%21 [1408r,1464r:0)  0@1408r weight:0.000000e+00
%23 [1456r,1472r:0)  0@1456r weight:0.000000e+00
%24 [1528r,1552r:0)  0@1528r weight:0.000000e+00
%25 [1520r,1536r:0)  0@1520r weight:0.000000e+00
%26 [1536r,1552r:0)  0@1536r weight:0.000000e+00
%28 [1808r,1840r:0)  0@1808r weight:0.000000e+00
%29 [1824r,1840r:0)  0@1824r weight:0.000000e+00
%30 [1840r,1896r:0)  0@1840r weight:0.000000e+00
%31 [1896r,1912r:0)  0@1896r weight:0.000000e+00
%32 [1888r,1904r:0)  0@1888r weight:0.000000e+00
%36 [2096r,2256r:0)  0@2096r weight:0.000000e+00
%37 [2112r,2256r:0)  0@2112r weight:0.000000e+00
%41 [2368r,2400r:0)  0@2368r weight:0.000000e+00
%42 [2384r,2400r:0)  0@2384r weight:0.000000e+00
%44 [3024r,3080r:0)  0@3024r weight:0.000000e+00
%45 [3176r,3296r:0)  0@3176r weight:0.000000e+00
%47 [3072r,3184r:0)  0@3072r weight:0.000000e+00
%49 [3184r,3192r:0)  0@3184r weight:0.000000e+00
%51 [3192r,3200r:0)  0@3192r weight:0.000000e+00
%52 [3152r,3168r:0)  0@3152r weight:0.000000e+00
%53 [3168r,3200r:0)  0@3168r weight:0.000000e+00
%54 [3200r,3296r:0)  0@3200r weight:0.000000e+00
%55 [3328r,3344r:0)  0@3328r weight:0.000000e+00
%57 [3504r,3536r:0)  0@3504r weight:0.000000e+00
%58 [3520r,3536r:0)  0@3520r weight:0.000000e+00
%60 [6992r,7008r:0)  0@6992r weight:0.000000e+00
%61 [7040r,7072r:0)  0@7040r weight:0.000000e+00
%62 [7056r,7072r:0)  0@7056r weight:0.000000e+00
%65 [7376r,7408r:0)  0@7376r weight:0.000000e+00
%66 [7392r,7408r:0)  0@7392r weight:0.000000e+00
%68 [8464r,8480r:0)  0@8464r weight:0.000000e+00
%69 [8536r,8560r:0)  0@8536r weight:0.000000e+00
%70 [8528r,8544r:0)  0@8528r weight:0.000000e+00
%71 [8544r,8560r:0)  0@8544r weight:0.000000e+00
%73 [8848r,8880r:0)  0@8848r weight:0.000000e+00
%74 [8864r,8880r:0)  0@8864r weight:0.000000e+00
%75 [8880r,8896r:0)  0@8880r weight:0.000000e+00
%76 [8896r,8912r:0)  0@8896r weight:0.000000e+00
%77 [8648r,8752r:0)  0@8648r weight:0.000000e+00
%78 [8640r,8692r:0)  0@8640r weight:0.000000e+00
%79 [8692r,8752r:0)  0@8692r weight:0.000000e+00
%80 [8696r,8736r:0)  0@8696r weight:0.000000e+00
%81 [8688r,8704r:0)  0@8688r weight:0.000000e+00
%82 [8704r,8720r:0)  0@8704r weight:0.000000e+00
%83 [8720r,8736r:0)  0@8720r weight:0.000000e+00
%84 [8736r,8752r:0)  0@8736r weight:0.000000e+00
%85 [8768r,8784r:0)  0@8768r weight:0.000000e+00
%86 [8784r,8800r:0)  0@8784r weight:0.000000e+00
%87 [7472r,7488r:0)  0@7472r weight:0.000000e+00
%90 [7576r,7624r:0)  0@7576r weight:0.000000e+00
%91 [7568r,7620r:0)  0@7568r weight:0.000000e+00
%92 [7620r,7632r:0)  0@7620r weight:0.000000e+00
%93 [7624r,7664r:0)  0@7624r weight:0.000000e+00
%94 [7616r,7632r:0)  0@7616r weight:0.000000e+00
%95 [7632r,7648r:0)  0@7632r weight:0.000000e+00
%96 [7648r,7664r:0)  0@7648r weight:0.000000e+00
%97 [7664r,7680r:0)  0@7664r weight:0.000000e+00
%98 [7800r,7864r:0)  0@7800r weight:0.000000e+00
%99 [7792r,7860r:0)  0@7792r weight:0.000000e+00
%100 [7860r,7872r:0)  0@7860r weight:0.000000e+00
%101 [7864r,7920r:0)  0@7864r weight:0.000000e+00
%102 [7880r,7888r:0)  0@7880r weight:0.000000e+00
%103 [7856r,7872r:0)  0@7856r weight:0.000000e+00
%104 [7872r,7888r:0)  0@7872r weight:0.000000e+00
%105 [7888r,7904r:0)  0@7888r weight:0.000000e+00
%106 [7920r,7960r:0)  0@7920r weight:0.000000e+00
%107 [7952r,7968r:0)  0@7952r weight:0.000000e+00
%108 [8000r,8032r:0)  0@8000r weight:0.000000e+00
%109 [8016r,8032r:0)  0@8016r weight:0.000000e+00
%111 [8384r,8400r:0)  0@8384r weight:0.000000e+00
%112 [8400r,8416r:0)  0@8400r weight:0.000000e+00
%113 [8096r,8160r:0)  0@8096r weight:0.000000e+00
%114 [8112r,8152r:0)  0@8112r weight:0.000000e+00
%115 [8152r,8160r:0)  0@8152r weight:0.000000e+00
%116 [8144r,8160r:0)  0@8144r weight:0.000000e+00
%117 [8176r,8240r:0)  0@8176r weight:0.000000e+00
%118 [8192r,8232r:0)  0@8192r weight:0.000000e+00
%119 [8232r,8240r:0)  0@8232r weight:0.000000e+00
%120 [8224r,8240r:0)  0@8224r weight:0.000000e+00
%121 [8256r,8312r:0)  0@8256r weight:0.000000e+00
%122 [8312r,8328r:0)  0@8312r weight:0.000000e+00
%123 [8304r,8320r:0)  0@8304r weight:0.000000e+00
%124 [8320r,8336r:0)  0@8320r weight:0.000000e+00
%125 [7136r,7168r:0)  0@7136r weight:0.000000e+00
%126 [7152r,7168r:0)  0@7152r weight:0.000000e+00
%127 [7168r,7232r:0)  0@7168r weight:0.000000e+00
%128 [7184r,7216r:0)  0@7184r weight:0.000000e+00
%129 [7200r,7216r:0)  0@7200r weight:0.000000e+00
%130 [7216r,7232r:0)  0@7216r weight:0.000000e+00
%131 [7248r,7264r:0)  0@7248r weight:0.000000e+00
%132 [7264r,7280r:0)  0@7264r weight:0.000000e+00
%134 [3688r,3712r:0)  0@3688r weight:0.000000e+00
%135 [3664r,3696r:0)  0@3664r weight:0.000000e+00
%136 [3680r,3696r:0)  0@3680r weight:0.000000e+00
%137 [3696r,3712r:0)  0@3696r weight:0.000000e+00
%139 [6848r,6920r:0)  0@6848r weight:0.000000e+00
%140 [6864r,6920r:0)  0@6864r weight:0.000000e+00
%141 [6920r,6936r:0)  0@6920r weight:0.000000e+00
%142 [6912r,6928r:0)  0@6912r weight:0.000000e+00
%143 [6928r,6944r:0)  0@6928r weight:0.000000e+00
%144 [3776r,3892r:0)  0@3776r weight:0.000000e+00
%145 [3792r,3904r:0)  0@3792r weight:0.000000e+00
%147 [3392r,6976B:0)  0@3392r weight:0.000000e+00
%149 [3892r,3896r:0)  0@3892r weight:0.000000e+00
%150 [3824r,3920r:0)  0@3824r weight:0.000000e+00
%151 [3896r,3912r:0)  0@3896r weight:0.000000e+00
%152 [3908r,3936r:0)  0@3908r weight:0.000000e+00
%153 [3888r,3904r:0)  0@3888r weight:0.000000e+00
%155 [3424r,6976B:0)  0@3424r weight:0.000000e+00
%157 [3904r,3920r:0)  0@3904r weight:0.000000e+00
%158 [3920r,3936r:0)  0@3920r weight:0.000000e+00
%159 [3936r,3952r:0)  0@3936r weight:0.000000e+00
%161 [4056r,4080r:0)  0@4056r weight:0.000000e+00
%162 [4032r,4064r:0)  0@4032r weight:0.000000e+00
%163 [4048r,4064r:0)  0@4048r weight:0.000000e+00
%164 [4064r,4080r:0)  0@4064r weight:0.000000e+00
%166 [6768r,6784r:0)  0@6768r weight:0.000000e+00
%167 [6784r,6800r:0)  0@6784r weight:0.000000e+00
%168 [4144r,4260r:0)  0@4144r weight:0.000000e+00
%169 [4160r,4328r:0)  0@4160r weight:0.000000e+00
%173 [4260r,4264r:0)  0@4260r weight:0.000000e+00
%174 [4208r,4344r:0)  0@4208r weight:0.000000e+00
%175 [4264r,4384r:0)  0@4264r weight:0.000000e+00
%176 [4256r,4328r:0)  0@4256r weight:0.000000e+00
%180 [4328r,4344r:0)  0@4328r weight:0.000000e+00
%181 [4344r,4376r:0)  0@4344r weight:0.000000e+00
%182 [4320r,4376r:0)  0@4320r weight:0.000000e+00
%183 [4376r,4392r:0)  0@4376r weight:0.000000e+00
%184 [4368r,4384r:0)  0@4368r weight:0.000000e+00
%186 [4448r,4480r:0)  0@4448r weight:0.000000e+00
%187 [4464r,4480r:0)  0@4464r weight:0.000000e+00
%189 [4544r,4600r:0)  0@4544r weight:0.000000e+00
%190 [4560r,4600r:0)  0@4560r weight:0.000000e+00
%191 [4600r,4608r:0)  0@4600r weight:0.000000e+00
%192 [4592r,4608r:0)  0@4592r weight:0.000000e+00
%193 [4608r,4624r:0)  0@4608r weight:0.000000e+00
%195 [4688r,4720r:0)  0@4688r weight:0.000000e+00
%196 [4704r,4720r:0)  0@4704r weight:0.000000e+00
%197 [4720r,4736r:0)  0@4720r weight:0.000000e+00
%198 [4808r,4848r:0)  0@4808r weight:0.000000e+00
%199 [4784r,4816r:0)  0@4784r weight:0.000000e+00
%200 [4800r,4816r:0)  0@4800r weight:0.000000e+00
%201 [4816r,4832r:0)  0@4816r weight:0.000000e+00
%202 [4832r,4848r:0)  0@4832r weight:0.000000e+00
%204 [4912r,4944r:0)  0@4912r weight:0.000000e+00
%205 [4928r,4944r:0)  0@4928r weight:0.000000e+00
%206 [4944r,4976r:0)  0@4944r weight:0.000000e+00
%207 [4960r,4976r:0)  0@4960r weight:0.000000e+00
%209 [5776r,5808r:0)  0@5776r weight:0.000000e+00
%210 [5792r,5808r:0)  0@5792r weight:0.000000e+00
%211 [5808r,5824r:0)  0@5808r weight:0.000000e+00
%213 [6000r,6032r:0)  0@6000r weight:0.000000e+00
%214 [6016r,6032r:0)  0@6016r weight:0.000000e+00
%215 [6032r,6064r:0)  0@6032r weight:0.000000e+00
%216 [6048r,6064r:0)  0@6048r weight:0.000000e+00
%218 [6272r,6288r:0)  0@6272r weight:0.000000e+00
%219 [6288r,6304r:0)  0@6288r weight:0.000000e+00
%220 [6152r,6208r:0)  0@6152r weight:0.000000e+00
%221 [6144r,6160r:0)  0@6144r weight:0.000000e+00
%222 [6160r,6208r:0)  0@6160r weight:0.000000e+00
%223 [6176r,6192r:0)  0@6176r weight:0.000000e+00
%224 [6192r,6208r:0)  0@6192r weight:0.000000e+00
%226 [5888r,5936r:0)  0@5888r weight:0.000000e+00
%227 [5904r,5936r:0)  0@5904r weight:0.000000e+00
%228 [5920r,5936r:0)  0@5920r weight:0.000000e+00
%230 [5040r,5072r:0)  0@5040r weight:0.000000e+00
%231 [5056r,5072r:0)  0@5056r weight:0.000000e+00
%232 [5072r,5088r:0)  0@5072r weight:0.000000e+00
%233 [5088r,5104r:0)  0@5088r weight:0.000000e+00
%234 [5104r,5120r:0)  0@5104r weight:0.000000e+00
%235 [5152r,5184r:0)  0@5152r weight:0.000000e+00
%236 [5168r,5184r:0)  0@5168r weight:0.000000e+00
%238 [5600r,5648r:0)  0@5600r weight:0.000000e+00
%239 [5616r,5648r:0)  0@5616r weight:0.000000e+00
%240 [5632r,5648r:0)  0@5632r weight:0.000000e+00
%241 [5664r,5712r:0)  0@5664r weight:0.000000e+00
%242 [5680r,5712r:0)  0@5680r weight:0.000000e+00
%244 [3456r,6976B:0)  0@3456r weight:0.000000e+00
%245 [6352r,6368r:0)  0@6352r weight:0.000000e+00
%246 [6416r,6528r:0)  0@6416r weight:0.000000e+00
%249 [6600r,6672r:0)  0@6600r weight:0.000000e+00
%250 [6592r,6608r:0)  0@6592r weight:0.000000e+00
%251 [6608r,6672r:0)  0@6608r weight:0.000000e+00
%252 [6624r,6656r:0)  0@6624r weight:0.000000e+00
%253 [6640r,6656r:0)  0@6640r weight:0.000000e+00
%254 [6656r,6672r:0)  0@6656r weight:0.000000e+00
%255 [6688r,6704r:0)  0@6688r weight:0.000000e+00
%256 [6704r,6720r:0)  0@6704r weight:0.000000e+00
%257 [5248r,5280r:0)  0@5248r weight:0.000000e+00
%258 [5264r,5280r:0)  0@5264r weight:0.000000e+00
%259 [5280r,5296r:0)  0@5280r weight:0.000000e+00
%260 [5344r,5376r:0)  0@5344r weight:0.000000e+00
%261 [5360r,5376r:0)  0@5360r weight:0.000000e+00
%262 [5376r,5408r:0)  0@5376r weight:0.000000e+00
%263 [5392r,5408r:0)  0@5392r weight:0.000000e+00
%264 [5424r,5456r:0)  0@5424r weight:0.000000e+00
%265 [5440r,5456r:0)  0@5440r weight:0.000000e+00
%266 [5456r,5488r:0)  0@5456r weight:0.000000e+00
%267 [5472r,5488r:0)  0@5472r weight:0.000000e+00
%268 [5520r,5536r:0)  0@5520r weight:0.000000e+00
%269 [5536r,5552r:0)  0@5536r weight:0.000000e+00
%270 [2464r,2496r:0)  0@2464r weight:0.000000e+00
%271 [2480r,2496r:0)  0@2480r weight:0.000000e+00
%272 [2496r,2512r:0)  0@2496r weight:0.000000e+00
%273 [2584r,2624r:0)  0@2584r weight:0.000000e+00
%274 [2560r,2592r:0)  0@2560r weight:0.000000e+00
%275 [2576r,2592r:0)  0@2576r weight:0.000000e+00
%276 [2592r,2608r:0)  0@2592r weight:0.000000e+00
%277 [2608r,2624r:0)  0@2608r weight:0.000000e+00
%279 [2880r,2928r:0)  0@2880r weight:0.000000e+00
%280 [2896r,2928r:0)  0@2896r weight:0.000000e+00
%282 [2944r,2960r:0)  0@2944r weight:0.000000e+00
%283 [2960r,2976r:0)  0@2960r weight:0.000000e+00
%284 [2688r,2736r:0)  0@2688r weight:0.000000e+00
%285 [2704r,2736r:0)  0@2704r weight:0.000000e+00
%287 [2752r,2784r:0)  0@2752r weight:0.000000e+00
%288 [2768r,2784r:0)  0@2768r weight:0.000000e+00
%289 [2336r,3008B:0)  0@2336r weight:0.000000e+00
%290 [2800r,2816r:0)  0@2800r weight:0.000000e+00
%291 [2816r,2832r:0)  0@2816r weight:0.000000e+00
%292 [1616r,1648r:0)  0@1616r weight:0.000000e+00
%293 [1632r,1648r:0)  0@1632r weight:0.000000e+00
%294 [1648r,1712r:0)  0@1648r weight:0.000000e+00
%295 [1664r,1696r:0)  0@1664r weight:0.000000e+00
%296 [1680r,1696r:0)  0@1680r weight:0.000000e+00
%297 [1696r,1712r:0)  0@1696r weight:0.000000e+00
%298 [1728r,1744r:0)  0@1728r weight:0.000000e+00
%299 [1744r,1760r:0)  0@1744r weight:0.000000e+00
%301 [920r,944r:0)  0@920r weight:0.000000e+00
%302 [896r,928r:0)  0@896r weight:0.000000e+00
%303 [912r,928r:0)  0@912r weight:0.000000e+00
%304 [928r,944r:0)  0@928r weight:0.000000e+00
%306 [1328r,1344r:0)  0@1328r weight:0.000000e+00
%307 [1344r,1360r:0)  0@1344r weight:0.000000e+00
%308 [1008r,1064r:0)  0@1008r weight:0.000000e+00
%309 [1024r,1216r:0)  0@1024r weight:0.000000e+00
%311 [688r,1392B:0)  0@688r weight:0.000000e+00
%313 [1064r,1072r:0)  0@1064r weight:0.000000e+00
%314 [1056r,1072r:0)  0@1056r weight:0.000000e+00
%315 [1072r,1188r:0)  0@1072r weight:0.000000e+00
%317 [1120r,1232r:0)  0@1120r weight:0.000000e+00
%318 [1188r,1200r:0)  0@1188r weight:0.000000e+00
%320 [1200r,1232r:0)  0@1200r weight:0.000000e+00
%321 [1208r,1224r:0)  0@1208r weight:0.000000e+00
%322 [1184r,1216r:0)  0@1184r weight:0.000000e+00
%323 [1216r,1224r:0)  0@1216r weight:0.000000e+00
%324 [1224r,1232r:0)  0@1224r weight:0.000000e+00
%325 [1248r,1264r:0)  0@1248r weight:0.000000e+00
%326 [1264r,1280r:0)  0@1264r weight:0.000000e+00
%327 [512r,560r:0)  0@512r weight:0.000000e+00
%328 [528r,560r:0)  0@528r weight:0.000000e+00
%330 [576r,592r:0)  0@576r weight:0.000000e+00
%331 [592r,608r:0)  0@592r weight:0.000000e+00
RegMasks: 2016r 2208r 3248r 6480r
********** MACHINEINSTRS **********
# Machine code for function sparse: NoPHIs, TracksLiveness
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP+40]
  fi#-5: size=4, align=16, fixed, at location [SP+32]
  fi#-4: size=4, align=8, fixed, at location [SP+24]
  fi#-3: size=8, align=16, fixed, at location [SP+16]
  fi#-2: size=8, align=8, fixed, at location [SP+8]
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=8, align=8, at location [SP]
  fi#2: size=8, align=8, at location [SP]
  fi#3: size=4, align=4, at location [SP]
  fi#4: size=4, align=4, at location [SP]
  fi#5: size=4, align=4, at location [SP]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP]
  fi#13: size=8, align=8, at location [SP]
  fi#14: size=4, align=4, at location [SP]
  fi#15: size=4, align=4, at location [SP]
  fi#16: size=4, align=4, at location [SP]
  fi#17: size=4, align=4, at location [SP]
  fi#18: size=4, align=4, at location [SP]
  fi#19: size=4, align=4, at location [SP]
  fi#20: size=4, align=4, at location [SP]
  fi#21: size=4, align=4, at location [SP]
  fi#22: size=4, align=4, at location [SP]
  fi#23: size=4, align=4, at location [SP]
  fi#24: size=8, align=8, at location [SP]
  fi#25: size=8, align=8, at location [SP]
  fi#26: size=8, align=8, at location [SP]
  fi#27: size=8, align=8, at location [SP]
  fi#28: size=4, align=4, at location [SP]
Constant Pool:
  cp#0: 1.000000e+00, align=8
Function Live Ins: $x0 in %0, $x1 in %1, $x2 in %2, $w3 in %3, $w4 in %4, $w5 in %5, $d0 in %6, $d1 in %7

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)
	  liveins: $x0, $x1, $x2, $w3, $w4, $w5, $d0, $d1
16B	  %7:fpr64 = COPY $d1
32B	  %6:fpr64 = COPY $d0
48B	  %5:gpr32 = COPY $w5
64B	  %4:gpr32 = COPY $w4
80B	  %3:gpr32 = COPY $w3
96B	  %2:gpr64 = COPY $x2
112B	  %1:gpr64 = COPY $x1
128B	  %0:gpr64 = COPY $x0
144B	  STRXui %0:gpr64, %stack.0.a.addr, 0 :: (store 8 into %ir.a.addr)
160B	  STRXui %1:gpr64, %stack.1.colidx.addr, 0 :: (store 8 into %ir.colidx.addr)
176B	  STRXui %2:gpr64, %stack.2.rowstr.addr, 0 :: (store 8 into %ir.rowstr.addr)
192B	  STRWui %3:gpr32, %stack.3.n.addr, 0 :: (store 4 into %ir.n.addr)
208B	  STRWui %4:gpr32, %stack.4.nz.addr, 0 :: (store 4 into %ir.nz.addr)
272B	  %8:gpr32 = LDRWui %fixed-stack.1, 0, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
288B	  %9:gpr32 = LDRWui %fixed-stack.2, 0, debug-location !1296 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
296B	  STRWui %5:gpr32, %stack.5.nozer.addr, 0 :: (store 4 into %ir.nozer.addr)
304B	  STRDui %6:fpr64, %stack.12.rcond.addr, 0 :: (store 8 into %ir.rcond.addr)
312B	  STRDui %7:fpr64, %stack.13.shift.addr, 0 :: (store 8 into %ir.shift.addr)
320B	  %10:gpr32common = nsw SUBWrr %8:gpr32, %9:gpr32, debug-location !1297; cg.c:659:21
328B	  %11:gpr32common = nsw ADDWri %10:gpr32common, 1, 0, debug-location !1298; cg.c:659:32
336B	  STRWui %11:gpr32common, %stack.14.nrows, 0, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
368B	  STRWui $wzr, %stack.16.j, 0, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12

384B	bb.1.for.cond:
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

416B	  %14:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
424B	  %13:gpr32 = LDRWui %stack.16.j, 0, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
432B	  %15:gpr32common = nsw ADDWri %14:gpr32common, 1, 0, debug-location !1306; cg.c:664:27
448B	  dead $wzr = SUBSWrr %13:gpr32, %15:gpr32common, implicit-def $nzcv, debug-location !1308; cg.c:664:5
464B	  Bcc 10, %bb.3, implicit killed $nzcv, debug-location !1308; cg.c:664:5
480B	  B %bb.2, debug-location !1308; cg.c:664:5

496B	bb.2.for.body:
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

512B	  %327:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
528B	  %328:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
560B	  STRWroX $wzr, %327:gpr64common, %328:gpr64, 0, 1, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
576B	  %330:gpr32common = LDRWui %stack.16.j, 0, debug-location !1313 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
592B	  %331:gpr32common = nsw ADDWri %330:gpr32common, 1, 0, debug-location !1313; cg.c:664:33
608B	  STRWui %331:gpr32common, %stack.16.j, 0, debug-location !1313 :: (store 4 into %ir.j); cg.c:664:33
624B	  B %bb.1, debug-location !1314; cg.c:664:5

640B	bb.3.for.end:
	; predecessors: %bb.1
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

672B	  STRWui $wzr, %stack.15.i, 0, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
688B	  undef %311.sub_32:gpr64 = MOVi32imm 56

720B	bb.4.for.cond2:
	; predecessors: %bb.3, %bb.8
	  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)

736B	  %18:gpr32 = LDRWui %stack.15.i, 0, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
752B	  %19:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1322 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
768B	  dead $wzr = SUBSWrr %18:gpr32, %19:gpr32, implicit-def $nzcv, debug-location !1324; cg.c:668:5
784B	  Bcc 10, %bb.9, implicit killed $nzcv, debug-location !1324; cg.c:668:5
800B	  B %bb.5, debug-location !1324; cg.c:668:5

816B	bb.5.for.body4:
	; predecessors: %bb.4
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

848B	  STRWui $wzr, %stack.19.nza, 0, debug-location !1325 :: (store 4 into %ir.nza); cg.c:669:18

864B	bb.6.for.cond5:
	; predecessors: %bb.5, %bb.7
	  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)

896B	  %302:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
912B	  %303:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
920B	  %301:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
928B	  %304:gpr32 = LDRWroX %302:gpr64common, %303:gpr64, 0, 1, debug-location !1331 :: (load 4 from %ir.arrayidx7); cg.c:669:29
944B	  dead $wzr = SUBSWrr %301:gpr32, %304:gpr32, implicit-def $nzcv, debug-location !1334; cg.c:669:9
960B	  Bcc 10, %bb.8, implicit killed $nzcv, debug-location !1334; cg.c:669:9
976B	  B %bb.7, debug-location !1334; cg.c:669:9

992B	bb.7.for.body9:
	; predecessors: %bb.6
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

1008B	  %308:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:670:17
1024B	  %309:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
1056B	  %314:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
1064B	  %313:gpr64common = MADDXrrr %309:gpr64, %311:gpr64, %308:gpr64, debug-location !1335; cg.c:670:17
1072B	  %315:gpr32common = LDRWroX %313:gpr64common, %314:gpr64, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
1120B	  %317:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
1184B	  %322:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1343 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:671:37
1188B	  undef %318.sub_32:gpr64common = nsw ADDWri %315:gpr32common, 1, 0, debug-location !1339; cg.c:670:30
1192B	  STRWui %318.sub_32:gpr64common, %stack.16.j, 0, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
1200B	  %320:gpr64 = SBFMXri %318:gpr64common, 62, 31, debug-location !1341; cg.c:671:25
1208B	  %321:gpr32 = LDRWroX %317:gpr64common, %320:gpr64, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
1216B	  %323:gpr32 = LDRWroX %322:gpr64common, %309:gpr64, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
1224B	  %324:gpr32 = nsw ADDWrr %321:gpr32, %323:gpr32, debug-location !1345; cg.c:671:35
1232B	  STRWroX %324:gpr32, %317:gpr64common, %320:gpr64, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
1248B	  %325:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1349 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
1264B	  %326:gpr32common = nsw ADDWri %325:gpr32common, 1, 0, debug-location !1349; cg.c:669:41
1280B	  STRWui %326:gpr32common, %stack.19.nza, 0, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41
1296B	  B %bb.6, debug-location !1350; cg.c:669:9

1312B	bb.8.for.inc25:
	; predecessors: %bb.6
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

1328B	  %306:gpr32common = LDRWui %stack.15.i, 0, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
1344B	  %307:gpr32common = nsw ADDWri %306:gpr32common, 1, 0, debug-location !1353; cg.c:668:25
1360B	  STRWui %307:gpr32common, %stack.15.i, 0, debug-location !1353 :: (store 4 into %ir.i); cg.c:668:25
1376B	  B %bb.4, debug-location !1354; cg.c:668:5

1392B	bb.9.for.end27:
	; predecessors: %bb.4
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1408B	  %21:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
1456B	  %23:gpr32 = MOVi32imm 1
1464B	  STRWui $wzr, %21:gpr64common, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
1472B	  STRWui %23:gpr32, %stack.16.j, 0, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12

1488B	bb.10.for.cond29:
	; predecessors: %bb.9, %bb.11
	  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

1520B	  %25:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
1528B	  %24:gpr32 = LDRWui %stack.16.j, 0, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
1536B	  %26:gpr32common = nsw ADDWri %25:gpr32common, 1, 0, debug-location !1365; cg.c:676:27
1552B	  dead $wzr = SUBSWrr %24:gpr32, %26:gpr32common, implicit-def $nzcv, debug-location !1367; cg.c:676:5
1568B	  Bcc 10, %bb.12, implicit killed $nzcv, debug-location !1367; cg.c:676:5
1584B	  B %bb.11, debug-location !1367; cg.c:676:5

1600B	bb.11.for.body32:
	; predecessors: %bb.10
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

1616B	  %292:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
1632B	  %293:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
1648B	  %294:gpr64common = ADDXrs %292:gpr64, %293:gpr64, 2, debug-location !1368; cg.c:677:21
1664B	  %295:gpr32 = LDRWui %294:gpr64common, 0, debug-location !1368 :: (load 4 from %ir.arrayidx34); cg.c:677:21
1680B	  %296:gpr32 = LDURWi %294:gpr64common, -4, debug-location !1371 :: (load 4 from %ir.arrayidx37); cg.c:677:33
1696B	  %297:gpr32 = nsw ADDWrr %295:gpr32, %296:gpr32, debug-location !1374; cg.c:677:31
1712B	  STRWui %297:gpr32, %294:gpr64common, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
1728B	  %298:gpr32common = LDRWui %stack.16.j, 0, debug-location !1378 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
1744B	  %299:gpr32common = nsw ADDWri %298:gpr32common, 1, 0, debug-location !1378; cg.c:676:33
1760B	  STRWui %299:gpr32common, %stack.16.j, 0, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33
1776B	  B %bb.10, debug-location !1379; cg.c:676:5

1792B	bb.12.for.end43:
	; predecessors: %bb.10
	  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

1808B	  %28:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
1824B	  %29:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
1840B	  %30:gpr32common = LDRWroX %28:gpr64common, %29:gpr64, 0, 1, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
1888B	  %32:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1388 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
1896B	  %31:gpr32common = SUBWri %30:gpr32common, 1, 0, debug-location !1384; cg.c:679:25
1904B	  dead $wzr = SUBSWrr %31:gpr32common, %32:gpr32, implicit-def $nzcv, debug-location !1390; cg.c:685:9
1912B	  STRWui %31:gpr32common, %stack.19.nza, 0, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
1920B	  Bcc 13, %bb.14, implicit killed $nzcv, debug-location !1390; cg.c:685:9
1936B	  B %bb.13, debug-location !1390; cg.c:685:9

1952B	bb.13.if.then:
	; predecessors: %bb.12
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

1968B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1391; cg.c:686:9
2000B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_37_Space_for_, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_37_Space_for_, debug-location !1391; cg.c:686:9
2016B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !1391; cg.c:686:9
2032B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1391; cg.c:686:9
2048B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1393; cg.c:687:41
2064B	  PCN_STACKMAP 0, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.4.nz.addr, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1393 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.4.nz.addr, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:687:41
2080B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1393; cg.c:687:41
2096B	  %36:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
2112B	  %37:gpr32 = LDRWui %stack.4.nz.addr, 0, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
2128B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1395; cg.c:687:9
2160B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_38_nza__nzmax, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
2176B	  $w1 = COPY %36:gpr32, debug-location !1395; cg.c:687:9
2192B	  $w2 = COPY %37:gpr32, debug-location !1395; cg.c:687:9
2208B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !1395; cg.c:687:9
2224B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1395; cg.c:687:9
2240B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1396; cg.c:689:5
2256B	  PCN_STACKMAP 1, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %36:gpr32, %37:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1396 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:689:5
2272B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1396; cg.c:689:5

2288B	bb.14.if.end:
	; predecessors: %bb.12, %bb.13
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2320B	  STRWui $wzr, %stack.16.j, 0, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
2336B	  %289:gpr32 = MOVi32imm -1

2352B	bb.15.for.cond49:
	; predecessors: %bb.14, %bb.19
	  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)

2368B	  %41:gpr32 = LDRWui %stack.16.j, 0, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
2384B	  %42:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1402 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
2400B	  dead $wzr = SUBSWrr %41:gpr32, %42:gpr32, implicit-def $nzcv, debug-location !1404; cg.c:694:5
2416B	  Bcc 10, %bb.20, implicit killed $nzcv, debug-location !1404; cg.c:694:5
2432B	  B %bb.16, debug-location !1404; cg.c:694:5

2448B	bb.16.for.body51:
	; predecessors: %bb.15
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2464B	  %270:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
2480B	  %271:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
2496B	  %272:gpr32 = LDRWroX %270:gpr64common, %271:gpr64, 0, 1, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
2512B	  STRWui %272:gpr32, %stack.20.k, 0, debug-location !1409 :: (store 4 into %ir.k); cg.c:695:16

2528B	bb.17.for.cond54:
	; predecessors: %bb.16, %bb.18
	  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)

2560B	  %274:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
2576B	  %275:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
2584B	  %273:gpr32 = LDRWui %stack.20.k, 0, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
2592B	  %276:gpr64common = ADDXrs %274:gpr64, %275:gpr64, 2, debug-location !1413; cg.c:695:33
2608B	  %277:gpr32 = LDRWui %276:gpr64common, 1, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:33
2624B	  dead $wzr = SUBSWrr %273:gpr32, %277:gpr32, implicit-def $nzcv, debug-location !1417; cg.c:695:9
2640B	  Bcc 10, %bb.19, implicit killed $nzcv, debug-location !1417; cg.c:695:9
2656B	  B %bb.18, debug-location !1417; cg.c:695:9

2672B	bb.18.for.body59:
	; predecessors: %bb.17
	  successors: %bb.17(0x80000000); %bb.17(100.00%)

2688B	  %284:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
2704B	  %285:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
2736B	  STRXroX $xzr, %284:gpr64common, %285:gpr64, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
2752B	  %287:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
2768B	  %288:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
2784B	  STRWroX %289:gpr32, %287:gpr64common, %288:gpr64, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
2800B	  %290:gpr32common = LDRWui %stack.20.k, 0, debug-location !1425 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
2816B	  %291:gpr32common = nsw ADDWri %290:gpr32common, 1, 0, debug-location !1425; cg.c:695:49
2832B	  STRWui %291:gpr32common, %stack.20.k, 0, debug-location !1425 :: (store 4 into %ir.k); cg.c:695:49
2848B	  B %bb.17, debug-location !1426; cg.c:695:9

2864B	bb.19.for.end66:
	; predecessors: %bb.17
	  successors: %bb.15(0x80000000); %bb.15(100.00%)

2880B	  %279:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
2896B	  %280:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
2928B	  STRWroX $wzr, %279:gpr64common, %280:gpr64, 0, 1, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
2944B	  %282:gpr32common = LDRWui %stack.16.j, 0, debug-location !1432 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
2960B	  %283:gpr32common = nsw ADDWri %282:gpr32common, 1, 0, debug-location !1432; cg.c:694:29
2976B	  STRWui %283:gpr32common, %stack.16.j, 0, debug-location !1432 :: (store 4 into %ir.j); cg.c:694:29
2992B	  B %bb.15, debug-location !1433; cg.c:694:5

3008B	bb.20.for.end71:
	; predecessors: %bb.15
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

3024B	  %44:gpr64 = MOVi64imm 4607182418800017408
3072B	  undef %47.ssub:fpr64 = LDRSui %stack.3.n.addr, 0, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
3080B	  STRXui %44:gpr64, %stack.24.size, 0, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
3152B	  %52:gpr64temp = ADRP target-flags(aarch64-page) %const.0
3168B	  %53:fpr64 = LDRDui %52:gpr64temp, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
3176B	  %45:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
3184B	  %49:fpr128 = SSHLLv2i32_shift %47:fpr64, 0, debug-location !1439; cg.c:706:31
3192B	  %51:fpr64 = SCVTFv1i64 %49.dsub:fpr128, debug-location !1439; cg.c:706:31
3200B	  %54:fpr64 = FDIVDrr %53:fpr64, %51:fpr64, debug-location !1440; cg.c:706:29
3208B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1441; cg.c:706:13
3216B	  $d0 = COPY %45:fpr64, debug-location !1441; cg.c:706:13
3232B	  $d1 = COPY %54:fpr64, debug-location !1441; cg.c:706:13
3248B	  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1441; cg.c:706:13
3264B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1441; cg.c:706:13
3280B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1442; cg.c:706:11
3296B	  PCN_STACKMAP 2, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, %54:fpr64, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %45:fpr64, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1442 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:706:11
3312B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1442; cg.c:706:11
3328B	  %55:fpr64 = COPY $d0, debug-location !1441; cg.c:706:13
3344B	  STRDui %55:fpr64, %stack.26.ratio, 0, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
3376B	  STRWui $wzr, %stack.15.i, 0, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
3392B	  undef %147.sub_32:gpr64 = MOVi32imm 56
3424B	  undef %155.sub_32:gpr64 = MOVi32imm 112
3456B	  %244:gpr32 = MOVi32imm 1

3488B	bb.21.for.cond73:
	; predecessors: %bb.20, %bb.47
	  successors: %bb.22(0x7c000000), %bb.48(0x04000000); %bb.22(96.88%), %bb.48(3.12%)

3504B	  %57:gpr32 = LDRWui %stack.15.i, 0, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
3520B	  %58:gpr32 = LDRWui %stack.3.n.addr, 0, debug-location !1448 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
3536B	  dead $wzr = SUBSWrr %57:gpr32, %58:gpr32, implicit-def $nzcv, debug-location !1450; cg.c:708:5
3552B	  Bcc 10, %bb.48, implicit killed $nzcv, debug-location !1450; cg.c:708:5
3568B	  B %bb.22, debug-location !1450; cg.c:708:5

3584B	bb.22.for.body76:
	; predecessors: %bb.21
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

3616B	  STRWui $wzr, %stack.19.nza, 0, debug-location !1451 :: (store 4 into %ir.nza); cg.c:709:18

3632B	bb.23.for.cond77:
	; predecessors: %bb.22, %bb.46
	  successors: %bb.24(0x7c000000), %bb.47(0x04000000); %bb.24(96.88%), %bb.47(3.12%)

3664B	  %135:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
3680B	  %136:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
3688B	  %134:gpr32 = LDRWui %stack.19.nza, 0, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
3696B	  %137:gpr32 = LDRWroX %135:gpr64common, %136:gpr64, 0, 1, debug-location !1457 :: (load 4 from %ir.arrayidx79); cg.c:709:29
3712B	  dead $wzr = SUBSWrr %134:gpr32, %137:gpr32, implicit-def $nzcv, debug-location !1460; cg.c:709:9
3728B	  Bcc 10, %bb.47, implicit killed $nzcv, debug-location !1460; cg.c:709:9
3744B	  B %bb.24, debug-location !1460; cg.c:709:9

3760B	bb.24.for.body82:
	; predecessors: %bb.23
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

3776B	  %144:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:710:17
3792B	  %145:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
3824B	  %150:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
3888B	  %153:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1467 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:712:28
3892B	  %149:gpr64common = MADDXrrr %145:gpr64, %147:gpr64, %144:gpr64, debug-location !1461; cg.c:710:17
3896B	  %151:gpr32 = LDRWroX %149:gpr64common, %150:gpr64, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
3904B	  %157:gpr64common = MADDXrrr %145:gpr64, %155:gpr64, %153:gpr64, debug-location !1467; cg.c:712:28
3908B	  %152:fpr64 = LDRDui %stack.24.size, 0, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
3912B	  STRWui %151:gpr32, %stack.16.j, 0, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
3920B	  %158:fpr64 = LDRDroX %157:gpr64common, %150:gpr64, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
3936B	  %159:fpr64 = FMULDrr %152:fpr64, %158:fpr64, debug-location !1470; cg.c:712:26
3952B	  STRDui %159:fpr64, %stack.25.scale, 0, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
3984B	  STRWui $wzr, %stack.22.nzrow, 0, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24

4000B	bb.25.for.cond91:
	; predecessors: %bb.24, %bb.45
	  successors: %bb.26(0x7c000000), %bb.46(0x04000000); %bb.26(96.88%), %bb.46(3.12%)

4032B	  %162:gpr64common = LDRXui %fixed-stack.5, 0, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
4048B	  %163:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
4056B	  %161:gpr32 = LDRWui %stack.22.nzrow, 0, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
4064B	  %164:gpr32 = LDRWroX %162:gpr64common, %163:gpr64, 0, 1, debug-location !1477 :: (load 4 from %ir.arrayidx93); cg.c:713:37
4080B	  dead $wzr = SUBSWrr %161:gpr32, %164:gpr32, implicit-def $nzcv, debug-location !1480; cg.c:713:13
4096B	  Bcc 10, %bb.46, implicit killed $nzcv, debug-location !1480; cg.c:713:13
4112B	  B %bb.26, debug-location !1480; cg.c:713:13

4128B	bb.26.for.body96:
	; predecessors: %bb.25
	  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)

4144B	  %168:gpr64 = LDRXui %fixed-stack.4, 0, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr); cg.c:714:24
4160B	  %169:gpr64 = LDRSWui %stack.15.i, 0, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
4208B	  %174:gpr64 = LDRSWui %stack.22.nzrow, 0, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
4256B	  %176:gpr64 = LDRXui %fixed-stack.3, 0, debug-location !1486 :: (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:715:22
4260B	  %173:gpr64common = MADDXrrr %169:gpr64, %147:gpr64, %168:gpr64, debug-location !1481; cg.c:714:24
4264B	  %175:gpr32 = LDRWroX %173:gpr64common, %174:gpr64, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
4320B	  %182:fpr64 = LDRDui %stack.25.scale, 0, debug-location !1489 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
4328B	  %180:gpr64common = MADDXrrr %169:gpr64, %155:gpr64, %176:gpr64, debug-location !1486; cg.c:715:22
4336B	  STRWui %175:gpr32, %stack.23.jcol, 0, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
4344B	  %181:fpr64 = LDRDroX %180:gpr64common, %174:gpr64, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
4368B	  %184:gpr32 = LDRWui %stack.16.j, 0, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
4376B	  %183:fpr64 = FMULDrr %181:fpr64, %182:fpr64, debug-location !1490; cg.c:715:37
4384B	  dead $wzr = SUBSWrr %175:gpr32, %184:gpr32, implicit-def $nzcv, debug-location !1496; cg.c:721:31
4392B	  STRDui %183:fpr64, %stack.27.va, 0, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
4400B	  Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1496; cg.c:721:31
4416B	  B %bb.27, debug-location !1496; cg.c:721:31

4432B	bb.27.land.lhs.true:
	; predecessors: %bb.26
	  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)

4448B	  %186:gpr32 = LDRWui %stack.16.j, 0, debug-location !1497 :: (dereferenceable load 4 from %ir.j); cg.c:721:34
4464B	  %187:gpr32 = LDRWui %stack.15.i, 0, debug-location !1498 :: (dereferenceable load 4 from %ir.i); cg.c:721:39
4480B	  dead $wzr = SUBSWrr %186:gpr32, %187:gpr32, implicit-def $nzcv, debug-location !1500; cg.c:721:21
4496B	  Bcc 1, %bb.29, implicit killed $nzcv, debug-location !1500; cg.c:721:21
4512B	  B %bb.28, debug-location !1500; cg.c:721:21

4528B	bb.28.if.then110:
	; predecessors: %bb.27
	  successors: %bb.29(0x80000000); %bb.29(100.00%)

4544B	  %189:fpr64 = LDRDui %stack.27.va, 0, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
4560B	  %190:fpr64 = LDRDui %stack.12.rcond.addr, 0, debug-location !1503 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:722:31
4592B	  %192:fpr64 = LDRDui %stack.13.shift.addr, 0, debug-location !1505 :: (dereferenceable load 8 from %ir.shift.addr); cg.c:722:39
4600B	  %191:fpr64 = FADDDrr %189:fpr64, %190:fpr64, debug-location !1504; cg.c:722:29
4608B	  %193:fpr64 = FSUBDrr %191:fpr64, %192:fpr64, debug-location !1506; cg.c:722:37
4624B	  STRDui %193:fpr64, %stack.27.va, 0, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24

4640B	bb.29.if.end113:
	; predecessors: %bb.26, %bb.27, %bb.28
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

4688B	  %195:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
4704B	  %196:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
4712B	  STRWui $wzr, %stack.28.cont40, 0, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
4720B	  %197:gpr32 = LDRWroX %195:gpr64common, %196:gpr64, 0, 1, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
4736B	  STRWui %197:gpr32, %stack.20.k, 0, debug-location !1513 :: (store 4 into %ir.k); cg.c:726:24

4752B	bb.30.for.cond116:
	; predecessors: %bb.29, %bb.42
	  successors: %bb.31(0x7c000000), %bb.43(0x04000000); %bb.31(96.88%), %bb.43(3.12%)

4784B	  %199:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
4800B	  %200:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
4808B	  %198:gpr32 = LDRWui %stack.20.k, 0, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
4816B	  %201:gpr64common = ADDXrs %199:gpr64, %200:gpr64, 2, debug-location !1517; cg.c:726:41
4832B	  %202:gpr32 = LDRWui %201:gpr64common, 1, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:41
4848B	  dead $wzr = SUBSWrr %198:gpr32, %202:gpr32, implicit-def $nzcv, debug-location !1521; cg.c:726:17
4864B	  Bcc 10, %bb.43, implicit killed $nzcv, debug-location !1521; cg.c:726:17
4880B	  B %bb.31, debug-location !1521; cg.c:726:17

4896B	bb.31.for.body122:
	; predecessors: %bb.30
	  successors: %bb.32(0x04000000), %bb.38(0x7c000000); %bb.32(3.12%), %bb.38(96.88%)

4912B	  %204:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
4928B	  %205:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
4944B	  %206:gpr32 = LDRWroX %204:gpr64common, %205:gpr64, 0, 1, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
4960B	  %207:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1526 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
4976B	  dead $wzr = SUBSWrr %206:gpr32, %207:gpr32, implicit-def $nzcv, debug-location !1528; cg.c:727:25
4992B	  Bcc 13, %bb.38, implicit killed $nzcv, debug-location !1528; cg.c:727:25
5008B	  B %bb.32, debug-location !1528; cg.c:727:25

5024B	bb.32.if.then127:
	; predecessors: %bb.31
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

5040B	  %230:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
5056B	  %231:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
5072B	  %232:gpr64common = ADDXrs %230:gpr64, %231:gpr64, 2, debug-location !1529; cg.c:731:35
5088B	  %233:gpr32common = LDRWui %232:gpr64common, 1, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
5104B	  %234:gpr32common = SUBWri %233:gpr32common, 2, 0, debug-location !1534; cg.c:731:49
5120B	  STRWui %234:gpr32common, %stack.21.kk, 0, debug-location !1535 :: (store 4 into %ir.kk); cg.c:731:33

5136B	bb.33.for.cond132:
	; predecessors: %bb.32, %bb.36
	  successors: %bb.34(0x7c000000), %bb.37(0x04000000); %bb.34(96.88%), %bb.37(3.12%)

5152B	  %235:gpr32 = LDRWui %stack.21.kk, 0, debug-location !1537 :: (dereferenceable load 4 from %ir.kk); cg.c:731:54
5168B	  %236:gpr32 = LDRWui %stack.20.k, 0, debug-location !1539 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
5184B	  dead $wzr = SUBSWrr %235:gpr32, %236:gpr32, implicit-def $nzcv, debug-location !1541; cg.c:731:25
5200B	  Bcc 11, %bb.37, implicit killed $nzcv, debug-location !1541; cg.c:731:25
5216B	  B %bb.34, debug-location !1541; cg.c:731:25

5232B	bb.34.for.body135:
	; predecessors: %bb.33
	  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)

5248B	  %257:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
5264B	  %258:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
5280B	  %259:gpr32 = LDRWroX %257:gpr64common, %258:gpr64, 0, 1, debug-location !1542 :: (load 4 from %ir.arrayidx137); cg.c:732:33
5296B	  TBNZW %259:gpr32, 31, %bb.36, debug-location !1547; cg.c:732:33
5312B	  B %bb.35, debug-location !1547; cg.c:732:33

5328B	bb.35.if.then140:
	; predecessors: %bb.34
	  successors: %bb.36(0x80000000); %bb.36(100.00%)

5344B	  %260:gpr64 = LDRXui %stack.0.a.addr, 0, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
5360B	  %261:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
5376B	  %262:gpr64common = ADDXrs %260:gpr64, %261:gpr64, 3, debug-location !1548; cg.c:733:45
5392B	  %263:fpr64 = LDRDui %262:gpr64common, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
5408B	  STRDui %263:fpr64, %262:gpr64common, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
5424B	  %264:gpr64 = LDRXui %stack.1.colidx.addr, 0, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
5440B	  %265:gpr64 = LDRSWui %stack.21.kk, 0, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
5456B	  %266:gpr64common = ADDXrs %264:gpr64, %265:gpr64, 2, debug-location !1555; cg.c:734:50
5472B	  %267:gpr32 = LDRWui %266:gpr64common, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
5488B	  STRWui %267:gpr32, %266:gpr64common, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48

5504B	bb.36.for.inc152:
	; predecessors: %bb.34, %bb.35
	  successors: %bb.33(0x80000000); %bb.33(100.00%)

5520B	  %268:gpr32common = LDRWui %stack.21.kk, 0, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
5536B	  %269:gpr32common = nsw SUBWri %268:gpr32common, 1, 0, debug-location !1562; cg.c:731:65
5552B	  STRWui %269:gpr32common, %stack.21.kk, 0, debug-location !1562 :: (store 4 into %ir.kk); cg.c:731:65
5568B	  B %bb.33, debug-location !1563; cg.c:731:25

5584B	bb.37.for.end153:
	; predecessors: %bb.33
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

5600B	  %238:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
5616B	  %239:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
5632B	  %240:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
5648B	  STRWroX %238:gpr32, %239:gpr64common, %240:gpr64, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
5664B	  %241:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
5680B	  %242:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
5712B	  STRXroX $xzr, %241:gpr64common, %242:gpr64, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
5728B	  STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1573 :: (store 4 into %ir.cont40); cg.c:739:32
5744B	  B %bb.43, debug-location !1574; cg.c:740:25

5760B	bb.38.if.else:
	; predecessors: %bb.31
	  successors: %bb.39(0x04000000), %bb.40(0x7c000000); %bb.39(3.12%), %bb.40(96.88%)

5776B	  %209:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
5792B	  %210:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
5808B	  %211:gpr32common = LDRWroX %209:gpr64common, %210:gpr64, 0, 1, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:30
5824B	  dead $wzr = ADDSWri %211:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1579; cg.c:742:30
5840B	  Bcc 1, %bb.40, implicit killed $nzcv, debug-location !1579; cg.c:742:30
5856B	  B %bb.39, debug-location !1579; cg.c:742:30

5872B	bb.39.if.then162:
	; predecessors: %bb.38
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

5888B	  %226:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
5904B	  %227:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
5920B	  %228:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
5936B	  STRWroX %226:gpr32, %227:gpr64common, %228:gpr64, 0, 1, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
5952B	  STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1585 :: (store 4 into %ir.cont40); cg.c:744:32
5968B	  B %bb.43, debug-location !1586; cg.c:745:25

5984B	bb.40.if.else165:
	; predecessors: %bb.38
	  successors: %bb.41(0x04000000), %bb.42(0x7c000000); %bb.41(3.12%), %bb.42(96.88%)

6000B	  %213:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
6016B	  %214:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
6032B	  %215:gpr32 = LDRWroX %213:gpr64common, %214:gpr64, 0, 1, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
6048B	  %216:gpr32 = LDRWui %stack.23.jcol, 0, debug-location !1590 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
6064B	  dead $wzr = SUBSWrr %215:gpr32, %216:gpr32, implicit-def $nzcv, debug-location !1592; cg.c:747:30
6080B	  Bcc 1, %bb.42, implicit killed $nzcv, debug-location !1592; cg.c:747:30
6096B	  B %bb.41, debug-location !1592; cg.c:747:30

6112B	bb.41.if.then170:
	; predecessors: %bb.40
	  successors: %bb.43(0x80000000); %bb.43(100.00%)

6144B	  %221:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
6152B	  %220:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
6160B	  %222:gpr64 = UBFMXri %221:gpr64, 62, 61, debug-location !1593; cg.c:751:36
6176B	  %223:gpr32common = LDRWroX %220:gpr64common, %222:gpr64, 0, 0, debug-location !1593 :: (load 4 from %ir.arrayidx172); cg.c:751:36
6192B	  %224:gpr32common = nsw ADDWri %223:gpr32common, 1, 0, debug-location !1596; cg.c:751:45
6208B	  STRWroX %224:gpr32common, %220:gpr64common, %222:gpr64, 0, 0, debug-location !1599 :: (store 4 into %ir.arrayidx175); cg.c:751:34
6224B	  STRWui %244:gpr32, %stack.28.cont40, 0, debug-location !1600 :: (store 4 into %ir.cont40); cg.c:752:32
6240B	  B %bb.43, debug-location !1601; cg.c:753:25

6256B	bb.42.for.inc179:
	; predecessors: %bb.40
	  successors: %bb.30(0x80000000); %bb.30(100.00%)

6272B	  %218:gpr32common = LDRWui %stack.20.k, 0, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
6288B	  %219:gpr32common = nsw ADDWri %218:gpr32common, 1, 0, debug-location !1602; cg.c:726:57
6304B	  STRWui %219:gpr32common, %stack.20.k, 0, debug-location !1602 :: (store 4 into %ir.k); cg.c:726:57
6320B	  B %bb.30, debug-location !1603; cg.c:726:17

6336B	bb.43.for.end181:
	; predecessors: %bb.30, %bb.41, %bb.39, %bb.37
	  successors: %bb.44(0x30000000), %bb.45(0x50000000); %bb.44(37.50%), %bb.45(62.50%)

6352B	  %245:gpr32 = LDRWui %stack.28.cont40, 0, debug-location !1606 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:21
6368B	  CBNZW %245:gpr32, %bb.45, debug-location !1609; cg.c:756:21
6384B	  B %bb.44, debug-location !1609; cg.c:756:21

6400B	bb.44.if.then184:
	; predecessors: %bb.43
	  successors: %bb.45(0x80000000); %bb.45(100.00%)

6416B	  %246:gpr32 = LDRWui %stack.15.i, 0, debug-location !1610 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
6432B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1612; cg.c:757:21
6448B	  $x0 = MOVaddr target-flags(aarch64-page) @cg__str_39_internal_e, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
6464B	  $w1 = COPY %246:gpr32, debug-location !1612; cg.c:757:21
6480B	  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !1612; cg.c:757:21
6496B	  ADJCALLSTACKUP 0, 0, implicit-def $sp, implicit $sp, debug-location !1612; cg.c:757:21
6512B	  ADJCALLSTACKDOWN 0, 0, implicit-def $sp, implicit $sp, debug-location !1613; cg.c:760:17
6528B	  PCN_STACKMAP 3, 0, 0, %stack.0.a.addr, 0, 0, %fixed-stack.4, 0, 0, %fixed-stack.3, 0, 0, %fixed-stack.5, 0, 0, %stack.1.colidx.addr, 0, 0, %stack.28.cont40, 0, 0, %stack.15.i, 0, 0, %stack.16.j, 0, 0, %stack.17.j1, 0, 0, %stack.18.j2, 0, 0, %stack.23.jcol, 0, 0, %stack.20.k, 0, 0, %stack.21.kk, 0, 0, %stack.3.n.addr, 0, 0, %stack.14.nrows, 0, 0, %stack.19.nza, 0, 0, %fixed-stack.0, 0, 0, %stack.22.nzrow, 0, 0, %stack.26.ratio, 0, 0, %stack.12.rcond.addr, 0, 0, %stack.2.rowstr.addr, 0, 0, %stack.25.scale, 0, 0, %stack.13.shift.addr, 0, 0, %stack.24.size, 0, 0, %stack.27.va, 0, %246:gpr32, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1613 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:760:17
6544B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !1613; cg.c:760:17

6560B	bb.45.if.end186:
	; predecessors: %bb.43, %bb.44
	  successors: %bb.25(0x80000000); %bb.25(100.00%)

6592B	  %250:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
6600B	  %249:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
6608B	  %251:gpr64 = UBFMXri %250:gpr64, 61, 60, debug-location !1614; cg.c:761:24
6624B	  %252:fpr64 = LDRDroX %249:gpr64common, %251:gpr64, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
6640B	  %253:fpr64 = LDRDui %stack.27.va, 0, debug-location !1616 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
6656B	  %254:fpr64 = FADDDrr %252:fpr64, %253:fpr64, debug-location !1617; cg.c:761:29
6672B	  STRDroX %254:fpr64, %249:gpr64common, %251:gpr64, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
6688B	  %255:gpr32common = LDRWui %stack.22.nzrow, 0, debug-location !1621 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
6704B	  %256:gpr32common = nsw ADDWri %255:gpr32common, 1, 0, debug-location !1621; cg.c:713:51
6720B	  STRWui %256:gpr32common, %stack.22.nzrow, 0, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51
6736B	  B %bb.25, debug-location !1622; cg.c:713:13

6752B	bb.46.for.inc195:
	; predecessors: %bb.25
	  successors: %bb.23(0x80000000); %bb.23(100.00%)

6768B	  %166:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
6784B	  %167:gpr32common = nsw ADDWri %166:gpr32common, 1, 0, debug-location !1625; cg.c:709:41
6800B	  STRWui %167:gpr32common, %stack.19.nza, 0, debug-location !1625 :: (store 4 into %ir.nza); cg.c:709:41
6816B	  B %bb.23, debug-location !1626; cg.c:709:9

6832B	bb.47.for.end197:
	; predecessors: %bb.23
	  successors: %bb.21(0x80000000); %bb.21(100.00%)

6848B	  %139:fpr64 = LDRDui %stack.24.size, 0, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
6864B	  %140:fpr64 = LDRDui %stack.26.ratio, 0, debug-location !1630 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
6912B	  %142:gpr32common = LDRWui %stack.15.i, 0, debug-location !1633 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
6920B	  %141:fpr64 = FMULDrr %139:fpr64, %140:fpr64, debug-location !1631; cg.c:764:21
6928B	  %143:gpr32common = nsw ADDWri %142:gpr32common, 1, 0, debug-location !1633; cg.c:708:25
6936B	  STRDui %141:fpr64, %stack.24.size, 0, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
6944B	  STRWui %143:gpr32common, %stack.15.i, 0, debug-location !1633 :: (store 4 into %ir.i); cg.c:708:25
6960B	  B %bb.21, debug-location !1634; cg.c:708:5

6976B	bb.48.for.end201:
	; predecessors: %bb.21
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

6992B	  %60:gpr32 = MOVi32imm 1
7008B	  STRWui %60:gpr32, %stack.16.j, 0, debug-location !1637 :: (store 4 into %ir.j); cg.c:770:12

7024B	bb.49.for.cond202:
	; predecessors: %bb.48, %bb.50
	  successors: %bb.50(0x7c000000), %bb.51(0x04000000); %bb.50(96.88%), %bb.51(3.12%)

7040B	  %61:gpr32 = LDRWui %stack.16.j, 0, debug-location !1640 :: (dereferenceable load 4 from %ir.j); cg.c:770:17
7056B	  %62:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1642 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
7072B	  dead $wzr = SUBSWrr %61:gpr32, %62:gpr32, implicit-def $nzcv, debug-location !1644; cg.c:770:5
7088B	  Bcc 10, %bb.51, implicit killed $nzcv, debug-location !1644; cg.c:770:5
7104B	  B %bb.50, debug-location !1644; cg.c:770:5

7120B	bb.50.for.body205:
	; predecessors: %bb.49
	  successors: %bb.49(0x80000000); %bb.49(100.00%)

7136B	  %125:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
7152B	  %126:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
7168B	  %127:gpr64common = ADDXrs %125:gpr64, %126:gpr64, 2, debug-location !1645; cg.c:771:20
7184B	  %128:gpr32 = LDRWui %127:gpr64common, 0, debug-location !1645 :: (load 4 from %ir.arrayidx207); cg.c:771:20
7200B	  %129:gpr32 = LDURWi %127:gpr64common, -4, debug-location !1648 :: (load 4 from %ir.arrayidx210); cg.c:771:31
7216B	  %130:gpr32 = nsw ADDWrr %128:gpr32, %129:gpr32, debug-location !1651; cg.c:771:29
7232B	  STRWui %130:gpr32, %127:gpr64common, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
7248B	  %131:gpr32common = LDRWui %stack.16.j, 0, debug-location !1655 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
7264B	  %132:gpr32common = nsw ADDWri %131:gpr32common, 1, 0, debug-location !1655; cg.c:770:29
7280B	  STRWui %132:gpr32common, %stack.16.j, 0, debug-location !1655 :: (store 4 into %ir.j); cg.c:770:29
7296B	  B %bb.49, debug-location !1656; cg.c:770:5

7312B	bb.51.for.end216:
	; predecessors: %bb.49
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

7344B	  STRWui $wzr, %stack.16.j, 0, debug-location !1659 :: (store 4 into %ir.j); cg.c:774:12

7360B	bb.52.for.cond217:
	; predecessors: %bb.51, %bb.59
	  successors: %bb.53(0x7c000000), %bb.60(0x04000000); %bb.53(96.88%), %bb.60(3.12%)

7376B	  %65:gpr32 = LDRWui %stack.16.j, 0, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
7392B	  %66:gpr32 = LDRWui %stack.14.nrows, 0, debug-location !1664 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
7408B	  dead $wzr = SUBSWrr %65:gpr32, %66:gpr32, implicit-def $nzcv, debug-location !1666; cg.c:774:5
7424B	  Bcc 10, %bb.60, implicit killed $nzcv, debug-location !1666; cg.c:774:5
7440B	  B %bb.53, debug-location !1666; cg.c:774:5

7456B	bb.53.for.body220:
	; predecessors: %bb.52
	  successors: %bb.54(0x50000000), %bb.55(0x30000000); %bb.54(62.50%), %bb.55(37.50%)

7472B	  %87:gpr32common = LDRWui %stack.16.j, 0, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
7488B	  dead $wzr = SUBSWri %87:gpr32common, 1, 0, implicit-def $nzcv, debug-location !1671; cg.c:775:13
7504B	  Bcc 11, %bb.55, implicit killed $nzcv, debug-location !1671; cg.c:775:13
7520B	  B %bb.54, debug-location !1671; cg.c:775:13

7536B	bb.54.if.then223:
	; predecessors: %bb.53
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

7568B	  %91:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
7576B	  %90:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
7616B	  %94:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
7620B	  %92:gpr64 = UBFMXri %91:gpr64, 62, 61, debug-location !1672; cg.c:776:18
7624B	  %93:gpr32 = LDRWroX %90:gpr64common, %92:gpr64, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
7632B	  %95:gpr64common = ADDXrr %92:gpr64, %94:gpr64, debug-location !1675; cg.c:776:30
7648B	  %96:gpr32 = LDURWi %95:gpr64common, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
7664B	  %97:gpr32 = nsw SUBWrr %93:gpr32, %96:gpr32, debug-location !1678; cg.c:776:28
7680B	  STRWui %97:gpr32, %stack.17.j1, 0, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
7696B	  B %bb.56, debug-location !1680; cg.c:777:9

7712B	bb.55.if.else230:
	; predecessors: %bb.53
	  successors: %bb.56(0x80000000); %bb.56(100.00%)

7744B	  STRWui $wzr, %stack.17.j1, 0, debug-location !1681 :: (store 4 into %ir.j1); cg.c:779:16

7760B	bb.56.if.end231:
	; predecessors: %bb.55, %bb.54
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

7792B	  %99:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
7800B	  %98:gpr64 = LDRXui %stack.2.rowstr.addr, 0, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
7856B	  %103:gpr64common = LDRXui %fixed-stack.0, 0, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
7860B	  %100:gpr64 = UBFMXri %99:gpr64, 62, 61, debug-location !1690; cg.c:782:15
7864B	  %101:gpr64common = ADDXrr %100:gpr64, %98:gpr64, debug-location !1683; cg.c:781:14
7872B	  %104:gpr32 = LDRWroX %103:gpr64common, %100:gpr64, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
7880B	  %102:gpr32 = LDRWui %101:gpr64common, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
7888B	  %105:gpr32 = nsw SUBWrr %102:gpr32, %104:gpr32, debug-location !1688; cg.c:781:28
7904B	  STRWui %105:gpr32, %stack.18.j2, 0, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
7920B	  %106:gpr32 = LDRWui %101:gpr64common, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
7952B	  %107:gpr32 = LDRWui %stack.17.j1, 0, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
7960B	  STRWui %106:gpr32, %stack.19.nza, 0, debug-location !1692 :: (store 4 into %ir.nza); cg.c:782:13
7968B	  STRWui %107:gpr32, %stack.20.k, 0, debug-location !1695 :: (store 4 into %ir.k); cg.c:783:16

7984B	bb.57.for.cond240:
	; predecessors: %bb.56, %bb.58
	  successors: %bb.58(0x7c000000), %bb.59(0x04000000); %bb.58(96.88%), %bb.59(3.12%)

8000B	  %108:gpr32 = LDRWui %stack.20.k, 0, debug-location !1697 :: (dereferenceable load 4 from %ir.k); cg.c:783:22
8016B	  %109:gpr32 = LDRWui %stack.18.j2, 0, debug-location !1699 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
8032B	  dead $wzr = SUBSWrr %108:gpr32, %109:gpr32, implicit-def $nzcv, debug-location !1701; cg.c:783:9
8048B	  Bcc 10, %bb.59, implicit killed $nzcv, debug-location !1701; cg.c:783:9
8064B	  B %bb.58, debug-location !1701; cg.c:783:9

8080B	bb.58.for.body243:
	; predecessors: %bb.57
	  successors: %bb.57(0x80000000); %bb.57(100.00%)

8096B	  %113:gpr64common = LDRXui %stack.0.a.addr, 0, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
8112B	  %114:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1704 :: (dereferenceable load 4 from %ir.nza); cg.c:784:22
8144B	  %116:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1706 :: (dereferenceable load 4 from %ir.k); cg.c:784:15
8152B	  %115:fpr64 = LDRDroX %113:gpr64common, %114:gpr64, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
8160B	  STRDroX %115:fpr64, %113:gpr64common, %116:gpr64, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
8176B	  %117:gpr64common = LDRXui %stack.1.colidx.addr, 0, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
8192B	  %118:gpr64 = LDRSWui %stack.19.nza, 0, debug-location !1709 :: (dereferenceable load 4 from %ir.nza); cg.c:785:32
8224B	  %120:gpr64 = LDRSWui %stack.20.k, 0, debug-location !1711 :: (dereferenceable load 4 from %ir.k); cg.c:785:20
8232B	  %119:gpr32 = LDRWroX %117:gpr64common, %118:gpr64, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
8240B	  STRWroX %119:gpr32, %117:gpr64common, %120:gpr64, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
8256B	  %121:gpr32common = LDRWui %stack.19.nza, 0, debug-location !1713 :: (dereferenceable load 4 from %ir.nza); cg.c:786:19
8304B	  %123:gpr32common = LDRWui %stack.20.k, 0, debug-location !1716 :: (dereferenceable load 4 from %ir.k); cg.c:783:31
8312B	  %122:gpr32common = nsw ADDWri %121:gpr32common, 1, 0, debug-location !1714; cg.c:786:23
8320B	  %124:gpr32common = nsw ADDWri %123:gpr32common, 1, 0, debug-location !1716; cg.c:783:31
8328B	  STRWui %122:gpr32common, %stack.19.nza, 0, debug-location !1715 :: (store 4 into %ir.nza); cg.c:786:17
8336B	  STRWui %124:gpr32common, %stack.20.k, 0, debug-location !1716 :: (store 4 into %ir.k); cg.c:783:31
8352B	  B %bb.57, debug-location !1717; cg.c:783:9

8368B	bb.59.for.inc256:
	; predecessors: %bb.57
	  successors: %bb.52(0x80000000); %bb.52(100.00%)

8384B	  %111:gpr32common = LDRWui %stack.16.j, 0, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
8400B	  %112:gpr32common = nsw ADDWri %111:gpr32common, 1, 0, debug-location !1720; cg.c:774:29
8416B	  STRWui %112:gpr32common, %stack.16.j, 0, debug-location !1720 :: (store 4 into %ir.j); cg.c:774:29
8432B	  B %bb.52, debug-location !1721; cg.c:774:5

8448B	bb.60.for.end258:
	; predecessors: %bb.52
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

8464B	  %68:gpr32 = MOVi32imm 1
8480B	  STRWui %68:gpr32, %stack.16.j, 0, debug-location !1724 :: (store 4 into %ir.j); cg.c:789:12

8496B	bb.61.for.cond259:
	; predecessors: %bb.60, %bb.62
	  successors: %bb.62(0x7c000000), %bb.63(0x04000000); %bb.62(96.88%), %bb.63(3.12%)

8528B	  %70:gpr32common = LDRWui %stack.14.nrows, 0, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
8536B	  %69:gpr32 = LDRWui %stack.16.j, 0, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
8544B	  %71:gpr32common = nsw ADDWri %70:gpr32common, 1, 0, debug-location !1730; cg.c:789:27
8560B	  dead $wzr = SUBSWrr %69:gpr32, %71:gpr32common, implicit-def $nzcv, debug-location !1732; cg.c:789:5
8576B	  Bcc 10, %bb.63, implicit killed $nzcv, debug-location !1732; cg.c:789:5
8592B	  B %bb.62, debug-location !1732; cg.c:789:5

8608B	bb.62.for.body263:
	; predecessors: %bb.61
	  successors: %bb.61(0x80000000); %bb.61(100.00%)

8640B	  %78:gpr64 = LDRSWui %stack.16.j, 0, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
8648B	  %77:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
8688B	  %81:gpr64 = LDRXui %fixed-stack.0, 0, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
8692B	  %79:gpr64 = UBFMXri %78:gpr64, 62, 61, debug-location !1733; cg.c:790:21
8696B	  %80:gpr32 = LDRWroX %77:gpr64common, %79:gpr64, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
8704B	  %82:gpr64common = ADDXrr %79:gpr64, %81:gpr64, debug-location !1736; cg.c:790:33
8720B	  %83:gpr32 = LDURWi %82:gpr64common, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
8736B	  %84:gpr32 = nsw SUBWrr %80:gpr32, %83:gpr32, debug-location !1739; cg.c:790:31
8752B	  STRWroX %84:gpr32, %77:gpr64common, %79:gpr64, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
8768B	  %85:gpr32common = LDRWui %stack.16.j, 0, debug-location !1743 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
8784B	  %86:gpr32common = nsw ADDWri %85:gpr32common, 1, 0, debug-location !1743; cg.c:789:33
8800B	  STRWui %86:gpr32common, %stack.16.j, 0, debug-location !1743 :: (store 4 into %ir.j); cg.c:789:33
8816B	  B %bb.61, debug-location !1744; cg.c:789:5

8832B	bb.63.for.end274:
	; predecessors: %bb.61

8848B	  %73:gpr64common = LDRXui %stack.2.rowstr.addr, 0, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
8864B	  %74:gpr64 = LDRSWui %stack.14.nrows, 0, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
8880B	  %75:gpr32common = LDRWroX %73:gpr64common, %74:gpr64, 0, 1, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
8896B	  %76:gpr32common = SUBWri %75:gpr32common, 1, 0, debug-location !1749; cg.c:792:25
8912B	  STRWui %76:gpr32common, %stack.19.nza, 0, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
8928B	  RET_ReallyLR debug-location !1751; cg.c:793:1

# End machine code for function sparse.

Before post-MI-sched:
# Machine code for function sparse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-6: size=8, align=8, fixed, at location [SP+40]
  fi#-5: size=4, align=16, fixed, at location [SP+32]
  fi#-4: size=4, align=8, fixed, at location [SP+24]
  fi#-3: size=8, align=16, fixed, at location [SP+16]
  fi#-2: size=8, align=8, fixed, at location [SP+8]
  fi#-1: size=8, align=16, fixed, at location [SP]
  fi#0: size=8, align=8, at location [SP-48]
  fi#1: size=8, align=8, at location [SP-56]
  fi#2: size=8, align=8, at location [SP-64]
  fi#3: size=4, align=4, at location [SP-68]
  fi#4: size=4, align=4, at location [SP-72]
  fi#5: size=4, align=4, at location [SP-76]
  fi#6: dead
  fi#7: dead
  fi#8: dead
  fi#9: dead
  fi#10: dead
  fi#11: dead
  fi#12: size=8, align=8, at location [SP-88]
  fi#13: size=8, align=8, at location [SP-96]
  fi#14: size=4, align=4, at location [SP-100]
  fi#15: size=4, align=4, at location [SP-104]
  fi#16: size=4, align=4, at location [SP-108]
  fi#17: size=4, align=4, at location [SP-112]
  fi#18: size=4, align=4, at location [SP-116]
  fi#19: size=4, align=4, at location [SP-120]
  fi#20: size=4, align=4, at location [SP-124]
  fi#21: size=4, align=4, at location [SP-128]
  fi#22: size=4, align=4, at location [SP-132]
  fi#23: size=4, align=4, at location [SP-136]
  fi#24: size=8, align=8, at location [SP-144]
  fi#25: size=8, align=8, at location [SP-152]
  fi#26: size=8, align=8, at location [SP-160]
  fi#27: size=8, align=8, at location [SP-168]
  fi#28: size=4, align=4, at location [SP-172]
  fi#29: size=8, align=8, at location [SP-184]
  fi#30: size=8, align=8, at location [SP-192]
  fi#31: size=8, align=8, at location [SP-40]
  fi#32: size=8, align=8, at location [SP-8]
  fi#33: size=8, align=8, at location [SP-16]
  fi#34: size=8, align=8, at location [SP-24]
  fi#35: size=8, align=8, at location [SP-32]
Constant Pool:
  cp#0: 1.000000e+00, align=8
Function Live Ins: $x0, $x1, $x2, $w3, $w4, $w5, $d0, $d1

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $d0, $d1, $w3, $w4, $w5, $x0, $x1, $x2, $x19, $x20, $lr
  $sp = frame-setup SUBXri $sp, 192, 0
  frame-setup STPXi killed $x20, killed $x19, $sp, 20 :: (store 8 into %stack.35), (store 8 into %stack.34)
  frame-setup STPXi killed $fp, killed $lr, $sp, 22 :: (store 8 into %stack.33), (store 8 into %stack.32)
  $fp = frame-setup ADDXri $sp, 176, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  frame-setup CFI_INSTRUCTION offset $w19, -24
  frame-setup CFI_INSTRUCTION offset $w20, -32
  STPXi renamable $x1, renamable $x0, $fp, -5 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
  STURXi killed renamable $x2, $fp, -48 :: (store 8 into %ir.rowstr.addr)
  STPWi renamable $w4, renamable $w3, $fp, -14 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  renamable $w8 = LDRWui $fp, 12, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  renamable $w16 = LDRWui $fp, 10, debug-location !1296 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  STURWi killed renamable $w5, $fp, -60 :: (store 4 into %ir.nozer.addr)
  STPDi renamable $d1, renamable $d0, $fp, -10 :: (store 8 into %ir.rcond.addr), (store 8 into %ir.shift.addr)
  $w8 = SUBWrs killed renamable $w8, killed renamable $w16, 0, debug-location !1297; cg.c:659:21
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1298; cg.c:659:32
  STURWi killed renamable $w8, $fp, -84, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
  STRWui $wzr, $sp, 21, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12

bb.1.for.cond:
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $w8 = LDURWi $fp, -84, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  renamable $w16 = LDRWui $sp, 21, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1306; cg.c:664:27
  $wzr = SUBSWrs killed renamable $w16, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1308; cg.c:664:5
  Bcc 10, %bb.3, implicit $nzcv, debug-location !1308; cg.c:664:5

bb.2.for.body:
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $x8 = LDURXi $fp, -48, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  renamable $x16 = LDRSWui $sp, 21, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  STRWroX $wzr, killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
  renamable $w8 = LDRWui $sp, 21, debug-location !1313 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1313; cg.c:664:33
  STRWui killed renamable $w8, $sp, 21, debug-location !1313 :: (store 4 into %ir.j); cg.c:664:33
  B %bb.1

bb.3.for.end:
; predecessors: %bb.1
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  STRWui $wzr, $sp, 22, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
  $w8 = MOVZWi 56, 0, implicit-def $x8

bb.4.for.cond2:
; predecessors: %bb.3, %bb.8
  successors: %bb.5(0x7c000000), %bb.9(0x04000000); %bb.5(96.88%), %bb.9(3.12%)
  liveins: $x8
  renamable $w16 = LDRWui $sp, 22, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  renamable $w17 = LDURWi $fp, -52, debug-location !1322 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  $wzr = SUBSWrs killed renamable $w16, killed renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1324; cg.c:668:5
  Bcc 10, %bb.9, implicit $nzcv, debug-location !1324; cg.c:668:5

bb.5.for.body4:
; predecessors: %bb.4
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $x8
  STRWui $wzr, $sp, 18, debug-location !1325 :: (store 4 into %ir.nza); cg.c:669:18

bb.6.for.cond5:
; predecessors: %bb.5, %bb.7
  successors: %bb.7(0x7c000000), %bb.8(0x04000000); %bb.7(96.88%), %bb.8(3.12%)
  liveins: $x8
  renamable $x16 = LDRXui $fp, 2, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  renamable $x17 = LDRSWui $sp, 22, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  renamable $w18 = LDRWui $sp, 18, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  renamable $w16 = LDRWroX killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1331 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  $wzr = SUBSWrs killed renamable $w18, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1334; cg.c:669:9
  Bcc 10, %bb.8, implicit $nzcv, debug-location !1334; cg.c:669:9

bb.7.for.body9:
; predecessors: %bb.6
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $x8
  renamable $x0, renamable $x16 = LDPXi $fp, 2, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:670:17
  renamable $x17 = LDRSWui $sp, 22, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  renamable $x18 = LDRSWui $sp, 18, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  renamable $x16 = MADDXrrr renamable $x17, renamable $x8, killed renamable $x16, debug-location !1335; cg.c:670:17
  renamable $w16 = LDRWroX killed renamable $x16, killed renamable $x18, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  renamable $x18 = LDURXi $fp, -48, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, implicit-def $x16, debug-location !1339; cg.c:670:30
  STRWui renamable $w16, $sp, 21, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
  renamable $x16 = SBFMXri killed renamable $x16, 62, 31, debug-location !1341; cg.c:671:25
  renamable $w1 = LDRWroX renamable $x18, renamable $x16, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  renamable $w17 = LDRWroX killed renamable $x0, killed renamable $x17, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  $w17 = ADDWrs killed renamable $w1, killed renamable $w17, 0, debug-location !1345; cg.c:671:35
  STRWroX killed renamable $w17, killed renamable $x18, killed renamable $x16, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  renamable $w16 = LDRWui $sp, 18, debug-location !1349 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !1349; cg.c:669:41
  STRWui killed renamable $w16, $sp, 18, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41
  B %bb.6

bb.8.for.inc25:
; predecessors: %bb.6
  successors: %bb.4(0x80000000); %bb.4(100.00%)
  liveins: $x8
  renamable $w16 = LDRWui $sp, 22, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !1353; cg.c:668:25
  STRWui killed renamable $w16, $sp, 22, debug-location !1353 :: (store 4 into %ir.i); cg.c:668:25
  B %bb.4

bb.9.for.end27:
; predecessors: %bb.4
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  renamable $x8 = LDURXi $fp, -48, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  $w16 = MOVZWi 1, 0
  STRWui $wzr, killed renamable $x8, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  STRWui killed renamable $w16, $sp, 21, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12

bb.10.for.cond29:
; predecessors: %bb.9, %bb.11
  successors: %bb.11(0x7c000000), %bb.12(0x04000000); %bb.11(96.88%), %bb.12(3.12%)

  renamable $w8 = LDURWi $fp, -84, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  renamable $w16 = LDRWui $sp, 21, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1365; cg.c:676:27
  $wzr = SUBSWrs killed renamable $w16, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1367; cg.c:676:5
  Bcc 10, %bb.12, implicit $nzcv, debug-location !1367; cg.c:676:5

bb.11.for.body32:
; predecessors: %bb.10
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  renamable $x8 = LDURXi $fp, -48, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  renamable $x16 = LDRSWui $sp, 21, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x16, 2, debug-location !1368; cg.c:677:21
  renamable $w17, renamable $w16 = LDPWi renamable $x8, -1, debug-location !1368 :: (load 4 from %ir.arrayidx34), (load 4 from %ir.arrayidx37); cg.c:677:21
  $w16 = ADDWrs killed renamable $w16, killed renamable $w17, 0, debug-location !1374; cg.c:677:31
  STRWui killed renamable $w16, killed renamable $x8, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  renamable $w8 = LDRWui $sp, 21, debug-location !1378 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1378; cg.c:676:33
  STRWui killed renamable $w8, $sp, 21, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33
  B %bb.10

bb.12.for.end43:
; predecessors: %bb.10
  successors: %bb.13(0x40000000), %bb.14(0x40000000); %bb.13(50.00%), %bb.14(50.00%)

  renamable $x8 = LDURXi $fp, -48, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  renamable $x16 = LDURSWi $fp, -84, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  renamable $w16 = LDURWi $fp, -56, debug-location !1388 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  renamable $w8 = SUBWri killed renamable $w8, 1, 0, debug-location !1384; cg.c:679:25
  $wzr = SUBSWrs renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1390; cg.c:685:9
  STRWui killed renamable $w8, $sp, 18, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
  Bcc 13, %bb.14, implicit $nzcv, debug-location !1390; cg.c:685:9

bb.13.if.then:
; predecessors: %bb.12
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  $x0 = ADRP target-flags(aarch64-page) @cg__str_37_Space_for_, debug-location !1391; cg.c:686:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_37_Space_for_, 0, debug-location !1391; cg.c:686:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !1391; cg.c:686:9
  PCN_STACKMAP 0, 0, 0, $fp, -32, 0, $fp, 24, 0, $fp, 32, 0, $fp, 16, 0, $fp, -40, 0, $fp, -156, 0, $fp, -88, 0, $fp, -92, 0, $fp, -96, 0, $fp, -100, 0, $fp, -120, 0, $fp, -108, 0, $fp, -112, 0, $fp, -52, 0, $fp, -84, 0, $fp, -56, 0, $fp, -104, 0, $fp, 56, 0, $fp, -116, 0, $fp, -144, 0, $fp, -72, 0, $fp, -48, 0, $fp, -136, 0, $fp, -80, 0, $fp, -128, 0, $fp, -152, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1393 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.4.nz.addr, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:687:41
  renamable $w19 = LDRWui $sp, 18, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  renamable $w20 = LDURWi $fp, -56, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  $x0 = ADRP target-flags(aarch64-page) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, 0, debug-location !1395; cg.c:687:9
  $w1 = ORRWrs $wzr, $w19, 0, debug-location !1395; cg.c:687:9
  $w2 = ORRWrs $wzr, $w20, 0, debug-location !1395; cg.c:687:9
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !1395; cg.c:687:9
  PCN_STACKMAP 1, 0, 0, $fp, -32, 0, $fp, 24, 0, $fp, 32, 0, $fp, 16, 0, $fp, -40, 0, $fp, -156, 0, $fp, -88, 0, $fp, -92, 0, $fp, -96, 0, $fp, -100, 0, $fp, -120, 0, $fp, -108, 0, $fp, -112, 0, $fp, -52, 0, $fp, -84, 0, $fp, -104, 0, $fp, 56, 0, $fp, -116, 0, $fp, -144, 0, $fp, -72, 0, $fp, -48, 0, $fp, -136, 0, $fp, -80, 0, $fp, -128, 0, $fp, -152, killed renamable $w19, killed renamable $w20, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1396 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:689:5

bb.14.if.end:
; predecessors: %bb.12, %bb.13
  successors: %bb.15(0x80000000); %bb.15(100.00%)

  STRWui $wzr, $sp, 21, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
  $w8 = MOVNWi 0, 0

bb.15.for.cond49:
; predecessors: %bb.14, %bb.19
  successors: %bb.16(0x7c000000), %bb.20(0x04000000); %bb.16(96.88%), %bb.20(3.12%)
  liveins: $w8
  renamable $w16 = LDRWui $sp, 21, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  renamable $w17 = LDURWi $fp, -84, debug-location !1402 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  $wzr = SUBSWrs killed renamable $w16, killed renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1404; cg.c:694:5
  Bcc 10, %bb.20, implicit $nzcv, debug-location !1404; cg.c:694:5

bb.16.for.body51:
; predecessors: %bb.15
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $w8
  renamable $x16 = LDURXi $fp, -48, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  renamable $x17 = LDRSWui $sp, 21, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  renamable $w16 = LDRWroX killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18

bb.17.for.cond54:
; predecessors: %bb.16, %bb.18
  successors: %bb.18(0x7c000000), %bb.19(0x04000000); %bb.18(96.88%), %bb.19(3.12%)
  liveins: $w8, $w16
  STRWui killed renamable $w16, $sp, 17, debug-location !DILocation(line: 0, scope: !1406) :: (store 4 into %ir.k); cg.c:0
  renamable $x16 = LDURXi $fp, -48, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  renamable $x17 = LDRSWui $sp, 21, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  renamable $w18 = LDRWui $sp, 17, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  renamable $x16 = ADDXrs killed renamable $x16, killed renamable $x17, 2, debug-location !1413; cg.c:695:33
  renamable $w16 = LDRWui killed renamable $x16, 1, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  $wzr = SUBSWrs killed renamable $w18, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1417; cg.c:695:9
  Bcc 10, %bb.19, implicit $nzcv, debug-location !1417; cg.c:695:9

bb.18.for.body59:
; predecessors: %bb.17
  successors: %bb.17(0x80000000); %bb.17(100.00%)
  liveins: $w8
  renamable $x16 = LDURXi $fp, -32, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  renamable $x17 = LDRSWui $sp, 17, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  STRXroX $xzr, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  renamable $x16 = LDURXi $fp, -40, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  renamable $x17 = LDRSWui $sp, 17, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  STRWroX renamable $w8, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  renamable $w16 = LDRWui $sp, 17, debug-location !1425 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !1425; cg.c:695:49
  B %bb.17

bb.19.for.end66:
; predecessors: %bb.17
  successors: %bb.15(0x80000000); %bb.15(100.00%)
  liveins: $w8
  renamable $x16 = LDRXui $fp, 7, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  renamable $x17 = LDRSWui $sp, 21, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  STRWroX $wzr, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  renamable $w16 = LDRWui $sp, 21, debug-location !1432 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !1432; cg.c:694:29
  STRWui killed renamable $w16, $sp, 21, debug-location !1432 :: (store 4 into %ir.j); cg.c:694:29
  B %bb.15

bb.20.for.end71:
; predecessors: %bb.15
  successors: %bb.21(0x80000000); %bb.21(100.00%)

  $x8 = MOVZXi 16368, 48
  renamable $s2 = LDURSi $fp, -52, implicit-def $d2, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  STRXui killed renamable $x8, $sp, 6, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
  renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  renamable $d1 = LDRDui killed renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  renamable $d0 = LDURDi $fp, -72, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  renamable $q2 = SSHLLv2i32_shift killed renamable $d2, 0, debug-location !1439; cg.c:706:31
  renamable $d2 = SCVTFv1i64 renamable $d2, implicit killed $q2, debug-location !1439; cg.c:706:31
  renamable $d1 = FDIVDrr killed renamable $d1, killed renamable $d2, debug-location !1440; cg.c:706:29
  STPDi renamable $d1, renamable $d0, $sp, 0 :: (store 8 into %stack.29), (store 8 into %stack.30)
  BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1441; cg.c:706:13
  PCN_STACKMAP 2, 0, 0, $fp, -32, 0, $fp, 24, 0, $fp, 32, 0, $fp, 16, 0, $fp, -40, 0, $fp, -156, 1, 8, $fp, -176, 0, $fp, -88, 0, $fp, -92, 0, $fp, -96, 0, $fp, -100, 0, $fp, -120, 0, $fp, -108, 0, $fp, -112, 0, $fp, -52, 0, $fp, -84, 0, $fp, -104, 0, $fp, 56, 0, $fp, -116, 0, $fp, -144, 0, $fp, -72, 0, $fp, -48, 0, $fp, -136, 0, $fp, -80, 0, $fp, -128, 0, $fp, -152, 1, 8, $fp, -168, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1442 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va), (load 8 from %stack.29), (load 8 from %stack.30); cg.c:706:11
  STRDui killed renamable $d0, $sp, 4, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
  STRWui $wzr, $sp, 22, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
  $w0 = MOVZWi 56, 0, implicit-def $x0
  $w20 = MOVZWi 112, 0, implicit-def $x20

bb.21.for.cond73:
; predecessors: %bb.20, %bb.48
  successors: %bb.22(0x7c000000), %bb.49(0x04000000); %bb.22(96.88%), %bb.49(3.12%)
  liveins: $x0, $x20
  renamable $w8 = LDRWui $sp, 22, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  renamable $w16 = LDURWi $fp, -52, debug-location !1448 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1450; cg.c:708:5
  Bcc 10, %bb.49, implicit $nzcv, debug-location !1450; cg.c:708:5

bb.22.for.body76:
; predecessors: %bb.21
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x0, $x20
  STRWui $wzr, $sp, 18, debug-location !1451 :: (store 4 into %ir.nza); cg.c:709:18

bb.23.for.cond77:
; predecessors: %bb.22, %bb.47
  successors: %bb.24(0x7c000000), %bb.48(0x04000000); %bb.24(96.88%), %bb.48(3.12%)
  liveins: $x0, $x20
  renamable $x8 = LDRXui $fp, 2, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  renamable $x16 = LDRSWui $sp, 22, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  renamable $w17 = LDRWui $sp, 18, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1457 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1460; cg.c:709:9
  Bcc 10, %bb.48, implicit $nzcv, debug-location !1460; cg.c:709:9

bb.24.for.body82:
; predecessors: %bb.23
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x0, $x20
  renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:710:17
  renamable $x16 = LDRSWui $sp, 22, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  renamable $x17 = LDRSWui $sp, 18, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  renamable $x8 = MADDXrrr renamable $x16, renamable $x0, killed renamable $x8, debug-location !1461; cg.c:710:17
  renamable $w8 = LDRWroX killed renamable $x8, renamable $x17, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  renamable $x16 = MADDXrrr killed renamable $x16, renamable $x20, killed renamable $x18, debug-location !1467; cg.c:712:28
  renamable $d0 = LDRDui $sp, 6, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  STRWui killed renamable $w8, $sp, 21, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
  renamable $d1 = LDRDroX killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !1470; cg.c:712:26
  STRDui killed renamable $d0, $sp, 5, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
  STRWui $wzr, $sp, 15, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24

bb.25.for.cond91:
; predecessors: %bb.24, %bb.43
  successors: %bb.26(0x7c000000), %bb.47(0x04000000); %bb.26(96.88%), %bb.47(3.12%)
  liveins: $x0, $x20
  renamable $x8 = LDRXui $fp, 2, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  renamable $x16 = LDRSWui $sp, 22, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  renamable $w17 = LDRWui $sp, 15, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1477 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1480; cg.c:713:13
  Bcc 10, %bb.47, implicit $nzcv, debug-location !1480; cg.c:713:13

bb.26.for.body96:
; predecessors: %bb.25
  successors: %bb.27(0x40000000), %bb.29(0x40000000); %bb.27(50.00%), %bb.29(50.00%)
  liveins: $x0, $x20
  renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:714:24
  renamable $x16 = LDRSWui $sp, 22, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  renamable $x17 = LDRSWui $sp, 15, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  renamable $x8 = MADDXrrr renamable $x16, renamable $x0, killed renamable $x8, debug-location !1481; cg.c:714:24
  renamable $w8 = LDRWroX killed renamable $x8, renamable $x17, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  renamable $d0 = LDRDui $sp, 5, debug-location !1489 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  renamable $x16 = MADDXrrr killed renamable $x16, renamable $x20, killed renamable $x18, debug-location !1486; cg.c:715:22
  STRWui renamable $w8, $sp, 14, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
  renamable $d1 = LDRDroX killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  renamable $w16 = LDRWui $sp, 21, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  renamable $d0 = FMULDrr killed renamable $d1, killed renamable $d0, debug-location !1490; cg.c:715:37
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1496; cg.c:721:31
  STRDui killed renamable $d0, $sp, 3, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
  Bcc 1, %bb.29, implicit $nzcv, debug-location !1496; cg.c:721:31

bb.27.land.lhs.true:
; predecessors: %bb.26
  successors: %bb.28(0x40000000), %bb.29(0x40000000); %bb.28(50.00%), %bb.29(50.00%)
  liveins: $x0, $x20
  renamable $w8, renamable $w16 = LDPWi $sp, 21, debug-location !1497 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1500; cg.c:721:21
  Bcc 1, %bb.29, implicit $nzcv, debug-location !1500; cg.c:721:21

bb.28.if.then110:
; predecessors: %bb.27
  successors: %bb.29(0x80000000); %bb.29(100.00%)
  liveins: $x0, $x20
  renamable $d0 = LDRDui $sp, 3, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  renamable $d2, renamable $d1 = LDPDi $fp, -10, debug-location !1503 :: (dereferenceable load 8 from %ir.rcond.addr), (dereferenceable load 8 from %ir.shift.addr); cg.c:722:31
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !1504; cg.c:722:29
  renamable $d0 = FSUBDrr killed renamable $d0, killed renamable $d2, debug-location !1506; cg.c:722:37
  STRDui killed renamable $d0, $sp, 3, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24

bb.29.if.end113:
; predecessors: %bb.26, %bb.27, %bb.28
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x0, $x20
  renamable $x8 = LDURXi $fp, -48, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  renamable $x16 = LDRSWui $sp, 21, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  STRWui $wzr, $sp, 5, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26

bb.30.for.cond116:
; predecessors: %bb.29, %bb.46
  successors: %bb.31(0x7c000000), %bb.41(0x04000000); %bb.31(96.88%), %bb.41(3.12%)
  liveins: $x0, $x20, $w8
  STRWui killed renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1511) :: (store 4 into %ir.k); cg.c:0
  renamable $x8 = LDURXi $fp, -48, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  renamable $x16 = LDRSWui $sp, 21, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  renamable $w17 = LDRWui $sp, 17, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x16, 2, debug-location !1517; cg.c:726:41
  renamable $w8 = LDRWui killed renamable $x8, 1, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  $wzr = SUBSWrs killed renamable $w17, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1521; cg.c:726:17
  Bcc 10, %bb.41, implicit $nzcv, debug-location !1521; cg.c:726:17

bb.31.for.body122:
; predecessors: %bb.30
  successors: %bb.32(0x04000000), %bb.38(0x7c000000); %bb.32(3.12%), %bb.38(96.88%)
  liveins: $x0, $x20
  renamable $x8 = LDURXi $fp, -40, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  renamable $x16 = LDRSWui $sp, 17, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  renamable $w16 = LDRWui $sp, 14, debug-location !1526 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1528; cg.c:727:25
  Bcc 13, %bb.38, implicit $nzcv, debug-location !1528; cg.c:727:25

bb.32.if.then127:
; predecessors: %bb.31
  successors: %bb.33(0x80000000); %bb.33(100.00%)
  liveins: $x0, $x20
  renamable $x8 = LDURXi $fp, -48, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  renamable $x16 = LDRSWui $sp, 21, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x16, 2, debug-location !1529; cg.c:731:35
  renamable $w8 = LDRWui killed renamable $x8, 1, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  renamable $w8 = SUBWri killed renamable $w8, 2, 0, debug-location !1534; cg.c:731:49

bb.33.for.cond132:
; predecessors: %bb.32, %bb.36
  successors: %bb.34(0x7c000000), %bb.37(0x04000000); %bb.34(96.88%), %bb.37(3.12%)
  liveins: $x0, $x20, $w8
  STRWui renamable $w8, $sp, 16, debug-location !DILocation(line: 0, scope: !1530) :: (store 4 into %ir.kk); cg.c:0
  $w8 = ORRWrs $wzr, killed renamable $w8, 0, debug-location !1537; cg.c:731:54
  renamable $w16 = LDRWui $sp, 17, debug-location !1539 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1541; cg.c:731:25
  Bcc 11, %bb.37, implicit $nzcv, debug-location !1541; cg.c:731:25

bb.34.for.body135:
; predecessors: %bb.33
  successors: %bb.35(0x50000000), %bb.36(0x30000000); %bb.35(62.50%), %bb.36(37.50%)
  liveins: $x0, $x20
  renamable $x8 = LDURXi $fp, -40, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  renamable $x16 = LDRSWui $sp, 16, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1542 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  TBNZW killed renamable $w8, 31, %bb.36, debug-location !1547; cg.c:732:33

bb.35.if.then140:
; predecessors: %bb.34
  successors: %bb.36(0x80000000); %bb.36(100.00%)
  liveins: $x0, $x20
  renamable $x8 = LDURXi $fp, -32, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  renamable $x16 = LDRSWui $sp, 16, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x16, 3, debug-location !1548; cg.c:733:45
  renamable $d0 = LDRDui renamable $x8, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  STRDui killed renamable $d0, killed renamable $x8, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  renamable $x8 = LDURXi $fp, -40, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  renamable $x16 = LDRSWui $sp, 16, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x16, 2, debug-location !1555; cg.c:734:50
  renamable $w16 = LDRWui renamable $x8, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  STRWui killed renamable $w16, killed renamable $x8, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48

bb.36.for.inc152:
; predecessors: %bb.34, %bb.35
  successors: %bb.33(0x80000000); %bb.33(100.00%)
  liveins: $x0, $x20
  renamable $w8 = LDRWui $sp, 16, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  renamable $w8 = nsw SUBWri killed renamable $w8, 1, 0, debug-location !1562; cg.c:731:65
  B %bb.33

bb.37.for.end153:
; predecessors: %bb.33
  successors: %bb.40(0x80000000); %bb.40(100.00%)
  liveins: $x0, $x20
  renamable $w8 = LDRWui $sp, 14, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  renamable $x16 = LDURXi $fp, -40, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  renamable $x17 = LDRSWui $sp, 17, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  STRWroX killed renamable $w8, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  renamable $x8 = LDURXi $fp, -32, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  renamable $x16 = LDRSWui $sp, 17, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  STRXroX $xzr, killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  B %bb.40

bb.38.if.else:
; predecessors: %bb.31
  successors: %bb.39(0x04000000), %bb.44(0x7c000000); %bb.39(3.12%), %bb.44(96.88%)
  liveins: $x0, $x20
  renamable $x8 = LDURXi $fp, -40, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  renamable $x16 = LDRSWui $sp, 17, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  dead $wzr = ADDSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1579; cg.c:742:30
  Bcc 1, %bb.44, implicit $nzcv, debug-location !1579; cg.c:742:30

bb.39.if.then162:
; predecessors: %bb.38
  successors: %bb.40(0x80000000); %bb.40(100.00%)
  liveins: $x0, $x20
  renamable $w8 = LDRWui $sp, 14, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  renamable $x16 = LDURXi $fp, -40, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  renamable $x17 = LDRSWui $sp, 17, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  STRWroX killed renamable $w8, killed renamable $x16, killed renamable $x17, 0, 1, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35

bb.40.for.end181:
; predecessors: %bb.39, %bb.45, %bb.37
  successors: %bb.41(0x80000000); %bb.41(100.00%)
  liveins: $x0, $x20
  $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !1523); cg.c:0
  STRWui killed renamable $w8, $sp, 5, debug-location !DILocation(line: 0, scope: !1523) :: (store 4 into %ir.cont40); cg.c:0

bb.41.for.end181:
; predecessors: %bb.40, %bb.30
  successors: %bb.42(0x30000000), %bb.43(0x50000000); %bb.42(37.50%), %bb.43(62.50%)
  liveins: $x0, $x20
  renamable $w8 = LDRWui $sp, 5, debug-location !1606 :: (dereferenceable load 4 from %ir.cont40); cg.c:756:21
  CBNZW killed renamable $w8, %bb.43

bb.42.if.then184:
; predecessors: %bb.41
  successors: %bb.43(0x80000000); %bb.43(100.00%)
  liveins: $x20
  renamable $w19 = LDRWui $sp, 22, debug-location !1610 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  $x0 = ADRP target-flags(aarch64-page) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
  $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, 0, debug-location !1612; cg.c:757:21
  $w1 = ORRWrs $wzr, $w19, 0, debug-location !1612; cg.c:757:21
  BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !1612; cg.c:757:21
  $w0 = MOVZWi 56, 0, implicit-def $x0
  PCN_STACKMAP 3, 0, 0, $fp, -32, 0, $fp, 24, 0, $fp, 32, 0, $fp, 16, 0, $fp, -40, 0, $fp, -156, 0, $fp, -88, 0, $fp, -92, 0, $fp, -96, 0, $fp, -100, 0, $fp, -120, 0, $fp, -108, 0, $fp, -112, 0, $fp, -52, 0, $fp, -84, 0, $fp, -104, 0, $fp, 56, 0, $fp, -116, 0, $fp, -144, 0, $fp, -72, 0, $fp, -48, 0, $fp, -136, 0, $fp, -80, 0, $fp, -128, 0, $fp, -152, killed renamable $w19, implicit-def dead early-clobber $x16, implicit-def dead early-clobber $x17, implicit-def dead early-clobber $lr, debug-location !1613 :: (load 8 from %stack.0.a.addr), (load 8 from %fixed-stack.4), (load 8 from %fixed-stack.3, align 16), (load 8 from %fixed-stack.5, align 16), (load 8 from %stack.1.colidx.addr), (load 8 from %stack.28.cont40, align 4), (load 8 from %stack.15.i, align 4), (load 8 from %stack.16.j, align 4), (load 8 from %stack.17.j1, align 4), (load 8 from %stack.18.j2, align 4), (load 8 from %stack.23.jcol, align 4), (load 8 from %stack.20.k, align 4), (load 8 from %stack.21.kk, align 4), (load 8 from %stack.3.n.addr, align 4), (load 8 from %stack.14.nrows, align 4), (load 8 from %stack.19.nza, align 4), (load 8 from %fixed-stack.0), (load 8 from %stack.22.nzrow, align 4), (load 8 from %stack.26.ratio), (load 8 from %stack.12.rcond.addr), (load 8 from %stack.2.rowstr.addr), (load 8 from %stack.25.scale), (load 8 from %stack.13.shift.addr), (load 8 from %stack.24.size), (load 8 from %stack.27.va); cg.c:760:17

bb.43.if.end186:
; predecessors: %bb.41, %bb.42
  successors: %bb.25(0x80000000); %bb.25(100.00%)
  liveins: $x0, $x20
  renamable $x8 = LDRSWui $sp, 17, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  renamable $x16 = LDURXi $fp, -32, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  renamable $x8 = UBFMXri killed renamable $x8, 61, 60, debug-location !1614; cg.c:761:24
  renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  renamable $d1 = LDRDui $sp, 3, debug-location !1616 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  renamable $d0 = FADDDrr killed renamable $d0, killed renamable $d1, debug-location !1617; cg.c:761:29
  STRDroX killed renamable $d0, killed renamable $x16, killed renamable $x8, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  renamable $w8 = LDRWui $sp, 15, debug-location !1621 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1621; cg.c:713:51
  STRWui killed renamable $w8, $sp, 15, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51
  B %bb.25

bb.44.if.else165:
; predecessors: %bb.38
  successors: %bb.45(0x04000000), %bb.46(0x7c000000); %bb.45(3.12%), %bb.46(96.88%)
  liveins: $x0, $x20
  renamable $x8 = LDURXi $fp, -40, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  renamable $x16 = LDRSWui $sp, 17, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  renamable $w16 = LDRWui $sp, 14, debug-location !1590 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1592; cg.c:747:30
  Bcc 1, %bb.46, implicit $nzcv, debug-location !1592; cg.c:747:30

bb.45.if.then170:
; predecessors: %bb.44
  successors: %bb.40(0x80000000); %bb.40(100.00%)
  liveins: $x0, $x20
  renamable $x8 = LDRSWui $sp, 21, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  renamable $x16 = LDRXui $fp, 7, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  renamable $x8 = UBFMXri killed renamable $x8, 62, 61, debug-location !1593; cg.c:751:36
  renamable $w17 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1593 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  renamable $w17 = nsw ADDWri killed renamable $w17, 1, 0, debug-location !1596; cg.c:751:45
  STRWroX killed renamable $w17, killed renamable $x16, killed renamable $x8, 0, 0, debug-location !1599 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  B %bb.40

bb.46.for.inc179:
; predecessors: %bb.44
  successors: %bb.30(0x80000000); %bb.30(100.00%)
  liveins: $x0, $x20
  renamable $w8 = LDRWui $sp, 17, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1602; cg.c:726:57
  B %bb.30

bb.47.for.inc195:
; predecessors: %bb.25
  successors: %bb.23(0x80000000); %bb.23(100.00%)
  liveins: $x0, $x20
  renamable $w8 = LDRWui $sp, 18, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1625; cg.c:709:41
  STRWui killed renamable $w8, $sp, 18, debug-location !1625 :: (store 4 into %ir.nza); cg.c:709:41
  B %bb.23

bb.48.for.end197:
; predecessors: %bb.23
  successors: %bb.21(0x80000000); %bb.21(100.00%)
  liveins: $x0, $x20
  renamable $d0 = LDRDui $sp, 6, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  renamable $d1 = LDRDui $sp, 4, debug-location !1630 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  renamable $w8 = LDRWui $sp, 22, debug-location !1633 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  renamable $d0 = FMULDrr killed renamable $d0, killed renamable $d1, debug-location !1631; cg.c:764:21
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1633; cg.c:708:25
  STRDui killed renamable $d0, $sp, 6, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
  STRWui killed renamable $w8, $sp, 22, debug-location !1633 :: (store 4 into %ir.i); cg.c:708:25
  B %bb.21

bb.49.for.end201:
; predecessors: %bb.21
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  $w8 = MOVZWi 1, 0

bb.50.for.cond202:
; predecessors: %bb.49, %bb.51
  successors: %bb.51(0x7c000000), %bb.52(0x04000000); %bb.51(96.88%), %bb.52(3.12%)
  liveins: $w8
  STRWui renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1638) :: (store 4 into %ir.j); cg.c:0
  $w8 = ORRWrs $wzr, killed renamable $w8, 0, debug-location !1640; cg.c:770:17
  renamable $w16 = LDURWi $fp, -84, debug-location !1642 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1644; cg.c:770:5
  Bcc 10, %bb.52, implicit $nzcv, debug-location !1644; cg.c:770:5

bb.51.for.body205:
; predecessors: %bb.50
  successors: %bb.50(0x80000000); %bb.50(100.00%)

  renamable $x8 = LDRXui $fp, 7, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  renamable $x16 = LDRSWui $sp, 21, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  renamable $x8 = ADDXrs killed renamable $x8, killed renamable $x16, 2, debug-location !1645; cg.c:771:20
  renamable $w17, renamable $w16 = LDPWi renamable $x8, -1, debug-location !1645 :: (load 4 from %ir.arrayidx207), (load 4 from %ir.arrayidx210); cg.c:771:20
  $w16 = ADDWrs killed renamable $w16, killed renamable $w17, 0, debug-location !1651; cg.c:771:29
  STRWui killed renamable $w16, killed renamable $x8, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  renamable $w8 = LDRWui $sp, 21, debug-location !1655 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1655; cg.c:770:29
  B %bb.50

bb.52.for.end216:
; predecessors: %bb.50
  successors: %bb.53(0x80000000); %bb.53(100.00%)

  STRWui $wzr, $sp, 21, debug-location !1659 :: (store 4 into %ir.j); cg.c:774:12

bb.53.for.cond217:
; predecessors: %bb.52, %bb.60
  successors: %bb.54(0x7c000000), %bb.61(0x04000000); %bb.54(96.88%), %bb.61(3.12%)

  renamable $w8 = LDRWui $sp, 21, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  renamable $w16 = LDURWi $fp, -84, debug-location !1664 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1666; cg.c:774:5
  Bcc 10, %bb.61, implicit $nzcv, debug-location !1666; cg.c:774:5

bb.54.for.body220:
; predecessors: %bb.53
  successors: %bb.55(0x50000000), %bb.56(0x30000000); %bb.55(62.50%), %bb.56(37.50%)

  renamable $w8 = LDRWui $sp, 21, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  dead $wzr = SUBSWri killed renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1671; cg.c:775:13
  Bcc 11, %bb.56, implicit $nzcv, debug-location !1671; cg.c:775:13

bb.55.if.then223:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  renamable $x8 = LDRSWui $sp, 21, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  renamable $x16 = LDURXi $fp, -48, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  renamable $x17 = LDRXui $fp, 7, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  renamable $x8 = UBFMXri killed renamable $x8, 62, 61, debug-location !1672; cg.c:776:18
  renamable $w16 = LDRWroX killed renamable $x16, renamable $x8, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  $x8 = ADDXrs killed renamable $x8, killed renamable $x17, 0, debug-location !1675; cg.c:776:30
  renamable $w8 = LDURWi killed renamable $x8, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  $w8 = SUBWrs killed renamable $w16, killed renamable $w8, 0, debug-location !1678; cg.c:776:28
  STRWui killed renamable $w8, $sp, 20, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
  B %bb.57

bb.56.if.else230:
; predecessors: %bb.54
  successors: %bb.57(0x80000000); %bb.57(100.00%)

  STRWui $wzr, $sp, 20, debug-location !1681 :: (store 4 into %ir.j1); cg.c:779:16

bb.57.if.end231:
; predecessors: %bb.56, %bb.55
  successors: %bb.58(0x80000000); %bb.58(100.00%)

  renamable $x8 = LDRSWui $sp, 21, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  renamable $x16 = LDURXi $fp, -48, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  renamable $x17 = LDRXui $fp, 7, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  renamable $x8 = UBFMXri killed renamable $x8, 62, 61, debug-location !1690; cg.c:782:15
  $x16 = ADDXrs renamable $x8, killed renamable $x16, 0, debug-location !1683; cg.c:781:14
  renamable $w8 = LDRWroX killed renamable $x17, killed renamable $x8, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  renamable $w17 = LDRWui renamable $x16, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  $w8 = SUBWrs killed renamable $w17, killed renamable $w8, 0, debug-location !1688; cg.c:781:28
  STRWui killed renamable $w8, $sp, 19, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
  renamable $w8 = LDRWui killed renamable $x16, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  renamable $w16 = LDRWui $sp, 20, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18

bb.58.for.cond240:
; predecessors: %bb.57, %bb.59
  successors: %bb.59(0x7c000000), %bb.60(0x04000000); %bb.59(96.88%), %bb.60(3.12%)
  liveins: $w16, $w8
  STPWi renamable $w16, renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1669) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
  $w8 = ORRWrs $wzr, killed renamable $w16, 0, debug-location !1697; cg.c:783:22
  renamable $w16 = LDRWui $sp, 19, debug-location !1699 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  $wzr = SUBSWrs killed renamable $w8, killed renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1701; cg.c:783:9
  Bcc 10, %bb.60, implicit $nzcv, debug-location !1701; cg.c:783:9

bb.59.for.body243:
; predecessors: %bb.58
  successors: %bb.58(0x80000000); %bb.58(100.00%)

  renamable $x8 = LDURXi $fp, -32, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  renamable $x17, renamable $x16 = LDPSWi $sp, 17, debug-location !1704 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:784:22
  renamable $d0 = LDRDroX renamable $x8, killed renamable $x16, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  STRDroX killed renamable $d0, killed renamable $x8, killed renamable $x17, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  renamable $x8 = LDURXi $fp, -40, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  renamable $x17, renamable $x16 = LDPSWi $sp, 17, debug-location !1709 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:785:32
  renamable $w16 = LDRWroX renamable $x8, killed renamable $x16, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  STRWroX killed renamable $w16, killed renamable $x8, killed renamable $x17, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  renamable $w16, renamable $w8 = LDPWi $sp, 17, debug-location !1713 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:786:19
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1714; cg.c:786:23
  renamable $w16 = nsw ADDWri killed renamable $w16, 1, 0, debug-location !1716; cg.c:783:31
  B %bb.58

bb.60.for.inc256:
; predecessors: %bb.58
  successors: %bb.53(0x80000000); %bb.53(100.00%)

  renamable $w8 = LDRWui $sp, 21, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1720; cg.c:774:29
  STRWui killed renamable $w8, $sp, 21, debug-location !1720 :: (store 4 into %ir.j); cg.c:774:29
  B %bb.53

bb.61.for.end258:
; predecessors: %bb.53
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  $w8 = MOVZWi 1, 0

bb.62.for.cond259:
; predecessors: %bb.61, %bb.63
  successors: %bb.63(0x7c000000), %bb.64(0x04000000); %bb.63(96.88%), %bb.64(3.12%)
  liveins: $w8
  STRWui killed renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1725) :: (store 4 into %ir.j); cg.c:0
  renamable $w8 = LDURWi $fp, -84, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  renamable $w16 = LDRWui $sp, 21, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1730; cg.c:789:27
  $wzr = SUBSWrs killed renamable $w16, killed renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1732; cg.c:789:5
  Bcc 10, %bb.64, implicit $nzcv, debug-location !1732; cg.c:789:5

bb.63.for.body263:
; predecessors: %bb.62
  successors: %bb.62(0x80000000); %bb.62(100.00%)

  renamable $x8 = LDRSWui $sp, 21, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  renamable $x16 = LDURXi $fp, -48, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  renamable $x17 = LDRXui $fp, 7, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  renamable $x8 = UBFMXri killed renamable $x8, 62, 61, debug-location !1733; cg.c:790:21
  renamable $w18 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  $x17 = ADDXrs renamable $x8, killed renamable $x17, 0, debug-location !1736; cg.c:790:33
  renamable $w17 = LDURWi killed renamable $x17, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  $w17 = SUBWrs killed renamable $w18, killed renamable $w17, 0, debug-location !1739; cg.c:790:31
  STRWroX killed renamable $w17, killed renamable $x16, killed renamable $x8, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  renamable $w8 = LDRWui $sp, 21, debug-location !1743 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  renamable $w8 = nsw ADDWri killed renamable $w8, 1, 0, debug-location !1743; cg.c:789:33
  B %bb.62

bb.64.for.end274:
; predecessors: %bb.62

  renamable $x8 = LDURXi $fp, -48, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  renamable $x16 = LDURSWi $fp, -84, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  renamable $w8 = LDRWroX killed renamable $x8, killed renamable $x16, 0, 1, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  renamable $w8 = SUBWri killed renamable $w8, 1, 0, debug-location !1749; cg.c:792:25
  STRWui killed renamable $w8, $sp, 18, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
  $fp, $lr = frame-destroy LDPXi $sp, 22, debug-location !1751 :: (load 8 from %stack.33), (load 8 from %stack.32); cg.c:793:1
  $x20, $x19 = frame-destroy LDPXi $sp, 20, debug-location !1751 :: (load 8 from %stack.35), (load 8 from %stack.34); cg.c:793:1
  $sp = frame-destroy ADDXri $sp, 192, 0, debug-location !1751; cg.c:793:1
  RET undef $lr, debug-location !1751; cg.c:793:1

# End machine code for function sparse.

********** MI Scheduling **********
sparse:%bb.0 entry
  From: STPXi renamable $x1, renamable $x0, $fp, -5 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
    To: End RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   STPXi renamable $x1, renamable $x0, $fp, -5 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STURXi renamable $x2, $fp, -48 :: (store 8 into %ir.rowstr.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   STPWi renamable $w4, renamable $w3, $fp, -14 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(3):   renamable $w8 = LDRWui $fp, 12, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
SU(4):   renamable $w16 = LDRWui $fp, 10, debug-location !1296 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(7): Data Latency=4 Reg=$w16
SU(5):   STURWi renamable $w5, $fp, -60 :: (store 4 into %ir.nozer.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(6):   STPDi renamable $d1, renamable $d0, $fp, -10 :: (store 8 into %ir.rcond.addr), (store 8 into %ir.shift.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(7):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !1297; cg.c:659:21
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(4): Data Latency=4 Reg=$w16
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w8
SU(8):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1298; cg.c:659:32
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$w8
  Successors:
    SU(9): Data Latency=1 Reg=$w8
SU(9):   STURWi renamable $w8, $fp, -84, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$w8
SU(10):   STRWui $wzr, $sp, 21, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 4 5 6 10 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $w8 = LDRWui $fp, 12, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
  Ready @0c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 10 4 5 6 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(0) ORDER                              
  Cand SU(4) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w16 = LDRWui $fp, 10, debug-location !1296 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
  Ready @1c
  TopQ.A BotLatency SU(4) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 0 1 2 10 6 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STPXi renamable $x1, renamable $x0, $fp, -5 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 1 2 10 6 
  TopQ.A RemainingLatency 0 + 3c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) STURXi renamable $x2, $fp, -48 :: (store 8 into %ir.rowstr.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 6 2 10 
  TopQ.A RemainingLatency 0 + 4c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(2) ORDER                              
Pick Top ORDER     
Scheduling SU(2) STPWi renamable $w4, renamable $w3, $fp, -14 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 10 7 
  TopQ.A RemainingLatency 0 + 5c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(7) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(7) $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !1297; cg.c:659:21
  Ready @5c
  TopQ.A TopLatency SU(7) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 10 8 
  TopQ.A RemainingLatency 0 + 6c > CritPath 6
  Cand SU(5) ORDER                              
  Cand SU(8) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(8) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1298; cg.c:659:32
  Ready @6c
  TopQ.A TopLatency SU(8) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 10 9 
  TopQ.A RemainingLatency 0 + 7c > CritPath 6
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STURWi renamable $w5, $fp, -60 :: (store 4 into %ir.nozer.addr)
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 6 10 
  TopQ.A RemainingLatency 0 + 8c > CritPath 6
  Cand SU(9) ORDER                              
  Cand SU(6) ORDER                              
Pick Top ORDER     
Scheduling SU(6) STPDi renamable $d1, renamable $d0, $fp, -10 :: (store 8 into %ir.rcond.addr), (store 8 into %ir.shift.addr)
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 10 
  TopQ.A RemainingLatency 0 + 9c > CritPath 6
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) STURWi renamable $w8, $fp, -84, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
  Ready @9c
  TopQ.A TopLatency SU(9) 6c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRWui $wzr, $sp, 21, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12
  Ready @10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 11
  Executed: 11c
  Critical: 11c, 11 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(3):   renamable $w8 = LDRWui $fp, 12, debug-location !1295 :: (dereferenceable load 4 from %ir.lastrow.addr, align 16); cg.c:659:13
SU(4):   renamable $w16 = LDRWui $fp, 10, debug-location !1296 :: (dereferenceable load 4 from %ir.firstrow.addr, align 8); cg.c:659:23
SU(0):   STPXi renamable $x1, renamable $x0, $fp, -5 :: (store 8 into %ir.a.addr), (store 8 into %ir.colidx.addr)
SU(1):   STURXi renamable $x2, $fp, -48 :: (store 8 into %ir.rowstr.addr)
SU(2):   STPWi renamable $w4, renamable $w3, $fp, -14 :: (store 4 into %ir.n.addr), (store 4 into %ir.nz.addr)
SU(7):   $w8 = SUBWrs renamable $w8, renamable $w16, 0, debug-location !1297; cg.c:659:21
SU(8):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1298; cg.c:659:32
SU(5):   STURWi renamable $w5, $fp, -60 :: (store 4 into %ir.nozer.addr)
SU(6):   STPDi renamable $d1, renamable $d0, $fp, -10 :: (store 8 into %ir.rcond.addr), (store 8 into %ir.shift.addr)
SU(9):   STURWi renamable $w8, $fp, -84, debug-location !1299 :: (store 4 into %ir.nrows); cg.c:659:11
SU(10):   STRWui $wzr, $sp, 21, debug-location !1300 :: (store 4 into %ir.j); cg.c:664:12

********** MI Scheduling **********
sparse:%bb.0 entry
  From: frame-setup STPXi killed $x20, killed $x19, $sp, 20 :: (store 8 into %stack.35), (store 8 into %stack.34)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $x20, $x19, $sp, 20 :: (store 8 into %stack.35), (store 8 into %stack.34)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   frame-setup STPXi $fp, $lr, $sp, 22 :: (store 8 into %stack.33), (store 8 into %stack.32)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Anti Latency=0
SU(2):   $fp = frame-setup ADDXri $sp, 176, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 0
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) frame-setup STPXi $x20, $x19, $sp, 20 :: (store 8 into %stack.35), (store 8 into %stack.34)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) frame-setup STPXi $fp, $lr, $sp, 22 :: (store 8 into %stack.33), (store 8 into %stack.32)
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $fp = frame-setup ADDXri $sp, 176, 0
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $x20, $x19, $sp, 20 :: (store 8 into %stack.35), (store 8 into %stack.34)
SU(1):   frame-setup STPXi $fp, $lr, $sp, 22 :: (store 8 into %stack.33), (store 8 into %stack.32)
SU(2):   $fp = frame-setup ADDXri $sp, 176, 0

Fixup kills for %bb.0
********** MI Scheduling **********
sparse:%bb.1 for.cond
  From: renamable $w8 = LDURWi $fp, -84, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
    To: Bcc 10, %bb.3, implicit $nzcv, debug-location !1308; cg.c:664:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -84, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDRWui $sp, 21, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1306; cg.c:664:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1308; cg.c:664:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(1): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.3, implicit $nzcv, debug-location !1308; cg.c:664:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -84, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDRWui $sp, 21, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1306; cg.c:664:27
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1308; cg.c:664:5
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   renamable $w8 = LDURWi $fp, -84, debug-location !1305 :: (dereferenceable load 4 from %ir.nrows); cg.c:664:21
SU(1):   renamable $w16 = LDRWui $sp, 21, debug-location !1303 :: (dereferenceable load 4 from %ir.j); cg.c:664:17
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1306; cg.c:664:27
SU(3):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1308; cg.c:664:5

Fixup kills for %bb.1
********** MI Scheduling **********
sparse:%bb.2 for.body
  From: renamable $x8 = LDURXi $fp, -48, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
    To: B %bb.1
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=$x16
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w8 = LDRWui $sp, 21, debug-location !1313 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1313; cg.c:664:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    SU(5): Data Latency=1 Reg=$w8
SU(5):   STRWui renamable $w8, $sp, 21, debug-location !1313 :: (store 4 into %ir.j); cg.c:664:33
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.1
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -48, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 21, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWui $sp, 21, debug-location !1313 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1313; cg.c:664:33
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w8, $sp, 21, debug-location !1313 :: (store 4 into %ir.j); cg.c:664:33
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1309 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:665:9
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1311 :: (dereferenceable load 4 from %ir.j); cg.c:665:16
SU(2):   STRWroX $wzr, renamable $x8, renamable $x16, 0, 1, debug-location !1312 :: (store 4 into %ir.arrayidx); cg.c:665:19
SU(3):   renamable $w8 = LDRWui $sp, 21, debug-location !1313 :: (dereferenceable load 4 from %ir.j); cg.c:664:33
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1313; cg.c:664:33
SU(5):   STRWui renamable $w8, $sp, 21, debug-location !1313 :: (store 4 into %ir.j); cg.c:664:33

Fixup kills for %bb.2
********** MI Scheduling **********
sparse:%bb.3 for.end
  From: STRWui $wzr, $sp, 22, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 22, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVZWi 56, 0, implicit-def $x8
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVZWi 56, 0, implicit-def $x8
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 22, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.3 ***
SU(1):   $w8 = MOVZWi 56, 0, implicit-def $x8
SU(0):   STRWui $wzr, $sp, 22, debug-location !1317 :: (store 4 into %ir.i); cg.c:668:12

Fixup kills for %bb.3
********** MI Scheduling **********
sparse:%bb.4 for.cond2
  From: renamable $w16 = LDRWui $sp, 22, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
    To: Bcc 10, %bb.9, implicit $nzcv, debug-location !1324; cg.c:668:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDRWui $sp, 22, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w16
SU(1):   renamable $w17 = LDURWi $fp, -52, debug-location !1322 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w17
SU(2):   $wzr = SUBSWrs renamable $w16, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1324; cg.c:668:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w17
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.9, implicit $nzcv, debug-location !1324; cg.c:668:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w16 = LDRWui $sp, 22, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w17 = LDURWi $fp, -52, debug-location !1322 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w16, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1324; cg.c:668:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   renamable $w16 = LDRWui $sp, 22, debug-location !1320 :: (dereferenceable load 4 from %ir.i); cg.c:668:17
SU(1):   renamable $w17 = LDURWi $fp, -52, debug-location !1322 :: (dereferenceable load 4 from %ir.n.addr); cg.c:668:21
SU(2):   $wzr = SUBSWrs renamable $w16, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1324; cg.c:668:5

Fixup kills for %bb.4
Fixup kills for %bb.5
********** MI Scheduling **********
sparse:%bb.6 for.cond5
  From: renamable $x16 = LDRXui $fp, 2, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
    To: Bcc 10, %bb.8, implicit $nzcv, debug-location !1334; cg.c:669:9
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDRXui $fp, 2, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x16
SU(1):   renamable $x17 = LDRSWui $sp, 22, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=$x17
SU(2):   renamable $w18 = LDRWui $sp, 18, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w18
SU(3):   renamable $w16 = LDRWroX renamable $x16, renamable $x17, 0, 1, debug-location !1331 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x17
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(4): Data Latency=4 Reg=$w16
SU(4):   $wzr = SUBSWrs renamable $w18, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1334; cg.c:669:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w16
    SU(2): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.8, implicit $nzcv, debug-location !1334; cg.c:669:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x16 = LDRXui $fp, 2, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x17 = LDRSWui $sp, 22, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w18 = LDRWui $sp, 18, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w16 = LDRWroX renamable $x16, renamable $x17, 0, 1, debug-location !1331 :: (load 4 from %ir.arrayidx7); cg.c:669:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w18, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1334; cg.c:669:9
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   renamable $x16 = LDRXui $fp, 2, debug-location !1331 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:669:29
SU(1):   renamable $x17 = LDRSWui $sp, 22, debug-location !1332 :: (dereferenceable load 4 from %ir.i); cg.c:669:34
SU(2):   renamable $w18 = LDRWui $sp, 18, debug-location !1329 :: (dereferenceable load 4 from %ir.nza); cg.c:669:23
SU(3):   renamable $w16 = LDRWroX renamable $x16, renamable $x17, 0, 1, debug-location !1331 :: (load 4 from %ir.arrayidx7); cg.c:669:29
SU(4):   $wzr = SUBSWrs renamable $w18, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1334; cg.c:669:9

Fixup kills for %bb.6
********** MI Scheduling **********
sparse:%bb.7 for.body9
  From: renamable $x0, renamable $x16 = LDPXi $fp, 2, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:670:17
    To: B %bb.6
 RegionInstrs: 16
ScheduleDAGMI::schedule starting
SU(0):   renamable $x0, renamable $x16 = LDPXi $fp, 2, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:670:17
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(10): Data Latency=4 Reg=$x0
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x16
    SU(12): Ord  Latency=0 Memory
SU(1):   renamable $x17 = LDRSWui $sp, 22, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$x17
    SU(3): Data Latency=4 Reg=$x17
    SU(12): Ord  Latency=0 Memory
SU(2):   renamable $x18 = LDRSWui $sp, 18, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 21
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x18
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
SU(3):   renamable $x16 = MADDXrrr renamable $x17, renamable $x8, renamable $x16, debug-location !1335; cg.c:670:17
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(1): Data Latency=4 Reg=$x17
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    SU(4): Out  Latency=1
    SU(6): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
    SU(10): Anti Latency=0
SU(4):   renamable $w16 = LDRWroX renamable $x16, renamable $x18, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  # preds left       : 3
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 17
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x16
    SU(2): Data Latency=4 Reg=$x18
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w16
    SU(6): Anti Latency=0
    SU(5): Anti Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(5):   renamable $x18 = LDURXi $fp, -48, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 15
  Predecessors:
    SU(4): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(12): Data Latency=4 Reg=$x18
    SU(9): Data Latency=4 Reg=$x18
    SU(12): Ord  Latency=0 Memory
SU(6):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit-def $x16, debug-location !1339; cg.c:670:30
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w16
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=1 Reg=$w16
    SU(8): Data Latency=1 Reg=$x16
SU(7):   STRWui renamable $w16, $sp, 21, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(6): Data Latency=1 Reg=$w16
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(8): Anti Latency=0
    SU(10): Ord  Latency=1 Memory
    SU(9): Ord  Latency=1 Memory
    SU(12): Ord  Latency=0 Memory
SU(8):   renamable $x16 = SBFMXri renamable $x16, 62, 31, debug-location !1341; cg.c:671:25
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 12
  Predecessors:
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x16
  Successors:
    SU(13): Out  Latency=1
    SU(12): Data Latency=1 Reg=$x16
    SU(9): Data Latency=1 Reg=$x16
SU(9):   renamable $w1 = LDRWroX renamable $x18, renamable $x16, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(8): Data Latency=1 Reg=$x16
    SU(7): Ord  Latency=1 Memory
    SU(5): Data Latency=4 Reg=$x18
  Successors:
    SU(11): Data Latency=4 Reg=$w1
    SU(13): Anti Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
SU(10):   renamable $w17 = LDRWroX renamable $x0, renamable $x17, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 11
  Predecessors:
    SU(7): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x17
    SU(0): Data Latency=4 Reg=$x0
  Successors:
    SU(11): Out  Latency=1
    SU(11): Data Latency=4 Reg=$w17
    SU(15): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
SU(11):   $w17 = ADDWrs renamable $w1, renamable $w17, 0, debug-location !1345; cg.c:671:35
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 7
  Predecessors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w17
    SU(9): Data Latency=4 Reg=$w1
  Successors:
    SU(12): Data Latency=1 Reg=$w17
SU(12):   STRWroX renamable $w17, renamable $x18, renamable $x16, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  # preds left       : 11
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 6
  Predecessors:
    SU(11): Data Latency=1 Reg=$w17
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(8): Data Latency=1 Reg=$x16
    SU(7): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=$x18
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(13): Anti Latency=0
    SU(15): Ord  Latency=0 Memory
    SU(13): Ord  Latency=1 Memory
SU(13):   renamable $w16 = LDRWui $sp, 18, debug-location !1349 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 17
  Height             : 5
  Predecessors:
    SU(12): Anti Latency=0
    SU(12): Ord  Latency=1 Memory
    SU(9): Anti Latency=0
    SU(8): Out  Latency=1
  Successors:
    SU(14): Out  Latency=1
    SU(14): Data Latency=4 Reg=$w16
    SU(15): Ord  Latency=0 Memory
SU(14):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1349; cg.c:669:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 21
  Height             : 1
  Predecessors:
    SU(13): Out  Latency=1
    SU(13): Data Latency=4 Reg=$w16
  Successors:
    SU(15): Data Latency=1 Reg=$w16
SU(15):   STRWui renamable $w16, $sp, 18, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(14): Data Latency=1 Reg=$w16
    SU(13): Ord  Latency=0 Memory
    SU(12): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.6
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 22
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 22
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x0, renamable $x16 = LDPXi $fp, 2, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:670:17
  Ready @0c
  TopQ.A BotLatency SU(0) 22c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 22
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  22 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x17 = LDRSWui $sp, 22, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
  Ready @1c
  TopQ.A BotLatency SU(1) 22c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x18 = LDRSWui $sp, 18, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x16 = MADDXrrr renamable $x17, renamable $x8, renamable $x16, debug-location !1335; cg.c:670:17
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w16 = LDRWroX renamable $x16, renamable $x18, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x18 = LDURXi $fp, -48, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit-def $x16, debug-location !1339; cg.c:670:30
  Ready @10c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui renamable $w16, $sp, 21, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 10 
  TopQ.A RemainingLatency 0 + 12c > CritPath 22
  Cand SU(8) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(8) renamable $x16 = SBFMXri renamable $x16, 62, 31, debug-location !1341; cg.c:671:25
  Ready @12c
  TopQ.A BotLatency SU(8) 12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 13c > CritPath 22
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $w1 = LDRWroX renamable $x18, renamable $x16, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
  Ready @13c
  TopQ.A TopLatency SU(9) 11c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w17 = LDRWroX renamable $x0, renamable $x17, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
  Ready @14c
  TopQ.A BotLatency SU(10) 11c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 11
  Executed: 15c
  Critical: 11c, 11 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 18 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) $w17 = ADDWrs renamable $w1, renamable $w17, 0, debug-location !1345; cg.c:671:35
  Ready @18c
  TopQ.A TopLatency SU(11) 15c
  *** Max MOps 1 at cycle 18
Cycle: 19 TopQ.A
TopQ.A @19c
  Retired: 12
  Executed: 19c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRWroX renamable $w17, renamable $x18, renamable $x16, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
  Ready @19c
  TopQ.A TopLatency SU(12) 16c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 13
  Executed: 20c
  Critical: 13c, 13 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 13 
Pick Top ONLY1     
Scheduling SU(13) renamable $w16 = LDRWui $sp, 18, debug-location !1349 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
  Ready @20c
  TopQ.A TopLatency SU(13) 17c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 14
  Executed: 21c
  Critical: 14c, 14 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 24 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 14 
Pick Top ONLY1     
Scheduling SU(14) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1349; cg.c:669:41
  Ready @24c
  TopQ.A TopLatency SU(14) 21c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 15
  Executed: 25c
  Critical: 15c, 15 MOps
  ExpectedLatency: 21c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 15 
Pick Top ONLY1     
Scheduling SU(15) STRWui renamable $w16, $sp, 18, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41
  Ready @25c
  TopQ.A TopLatency SU(15) 22c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 16
  Executed: 26c
  Critical: 16c, 16 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   renamable $x0, renamable $x16 = LDPXi $fp, 2, debug-location !1335 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:670:17
SU(1):   renamable $x17 = LDRSWui $sp, 22, debug-location !1337 :: (dereferenceable load 4 from %ir.i); cg.c:670:22
SU(2):   renamable $x18 = LDRSWui $sp, 18, debug-location !1338 :: (dereferenceable load 4 from %ir.nza); cg.c:670:25
SU(3):   renamable $x16 = MADDXrrr renamable $x17, renamable $x8, renamable $x16, debug-location !1335; cg.c:670:17
SU(4):   renamable $w16 = LDRWroX renamable $x16, renamable $x18, 0, 1, debug-location !1335 :: (load 4 from %ir.arrayidx13); cg.c:670:17
SU(5):   renamable $x18 = LDURXi $fp, -48, debug-location !1341 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:671:25
SU(6):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, implicit-def $x16, debug-location !1339; cg.c:670:30
SU(7):   STRWui renamable $w16, $sp, 21, debug-location !1340 :: (store 4 into %ir.j); cg.c:670:15
SU(8):   renamable $x16 = SBFMXri renamable $x16, 62, 31, debug-location !1341; cg.c:671:25
SU(9):   renamable $w1 = LDRWroX renamable $x18, renamable $x16, 0, 0, debug-location !1341 :: (load 4 from %ir.arrayidx16); cg.c:671:25
SU(10):   renamable $w17 = LDRWroX renamable $x0, renamable $x17, 0, 1, debug-location !1343 :: (load 4 from %ir.arrayidx18); cg.c:671:37
SU(11):   $w17 = ADDWrs renamable $w1, renamable $w17, 0, debug-location !1345; cg.c:671:35
SU(12):   STRWroX renamable $w17, renamable $x18, renamable $x16, 0, 0, debug-location !1348 :: (store 4 into %ir.arrayidx21); cg.c:671:23
SU(13):   renamable $w16 = LDRWui $sp, 18, debug-location !1349 :: (dereferenceable load 4 from %ir.nza); cg.c:669:41
SU(14):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1349; cg.c:669:41
SU(15):   STRWui renamable $w16, $sp, 18, debug-location !1349 :: (store 4 into %ir.nza); cg.c:669:41

Fixup kills for %bb.7
********** MI Scheduling **********
sparse:%bb.8 for.inc25
  From: renamable $w16 = LDRWui $sp, 22, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
    To: B %bb.4
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDRWui $sp, 22, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w16
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1353; cg.c:668:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    SU(2): Data Latency=1 Reg=$w16
SU(2):   STRWui renamable $w16, $sp, 22, debug-location !1353 :: (store 4 into %ir.i); cg.c:668:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w16
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.4
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w16 = LDRWui $sp, 22, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1353; cg.c:668:25
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w16, $sp, 22, debug-location !1353 :: (store 4 into %ir.i); cg.c:668:25
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   renamable $w16 = LDRWui $sp, 22, debug-location !1353 :: (dereferenceable load 4 from %ir.i); cg.c:668:25
SU(1):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1353; cg.c:668:25
SU(2):   STRWui renamable $w16, $sp, 22, debug-location !1353 :: (store 4 into %ir.i); cg.c:668:25

Fixup kills for %bb.8
********** MI Scheduling **********
sparse:%bb.9 for.end27
  From: renamable $x8 = LDURXi $fp, -48, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=4 Reg=$x8
    SU(2): Ord  Latency=0 Memory
SU(1):   $w16 = MOVZWi 1, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=1 Reg=$w16
SU(2):   STRWui $wzr, renamable $x8, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Data Latency=4 Reg=$x8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Ord  Latency=0 Memory
SU(3):   STRWui renamable $w16, $sp, 21, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=1 Reg=$w16
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURXi $fp, -48, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w16 = MOVZWi 1, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui $wzr, renamable $x8, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWui renamable $w16, $sp, 21, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.9 ***
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1357 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:675:5
SU(1):   $w16 = MOVZWi 1, 0
SU(2):   STRWui $wzr, renamable $x8, 0, debug-location !1358 :: (store 4 into %ir.arrayidx281); cg.c:675:15
SU(3):   STRWui renamable $w16, $sp, 21, debug-location !1359 :: (store 4 into %ir.j); cg.c:676:12

Fixup kills for %bb.9
********** MI Scheduling **********
sparse:%bb.10 for.cond29
  From: renamable $w8 = LDURWi $fp, -84, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
    To: Bcc 10, %bb.12, implicit $nzcv, debug-location !1367; cg.c:676:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDURWi $fp, -84, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDRWui $sp, 21, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1365; cg.c:676:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(3):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1367; cg.c:676:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=$w8
    SU(1): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.12, implicit $nzcv, debug-location !1367; cg.c:676:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w8 = LDURWi $fp, -84, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDRWui $sp, 21, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1365; cg.c:676:27
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1367; cg.c:676:5
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   renamable $w8 = LDURWi $fp, -84, debug-location !1364 :: (dereferenceable load 4 from %ir.nrows); cg.c:676:21
SU(1):   renamable $w16 = LDRWui $sp, 21, debug-location !1362 :: (dereferenceable load 4 from %ir.j); cg.c:676:17
SU(2):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1365; cg.c:676:27
SU(3):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1367; cg.c:676:5

Fixup kills for %bb.10
********** MI Scheduling **********
sparse:%bb.11 for.body32
  From: renamable $x8 = LDURXi $fp, -48, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
    To: B %bb.10
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(5): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1368; cg.c:677:21
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
    SU(3): Anti Latency=0
SU(3):   renamable $w17, renamable $w16 = LDPWi renamable $x8, -1, debug-location !1368 :: (load 4 from %ir.arrayidx34), (load 4 from %ir.arrayidx37); cg.c:677:21
  # preds left       : 3
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w17
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w16
    SU(6): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
SU(4):   $w16 = ADDWrs renamable $w16, renamable $w17, 0, debug-location !1374; cg.c:677:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=$w17
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w16
  Successors:
    SU(5): Data Latency=1 Reg=$w16
SU(5):   STRWui renamable $w16, renamable $x8, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  # preds left       : 5
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(4): Data Latency=1 Reg=$w16
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
SU(6):   renamable $w8 = LDRWui $sp, 21, debug-location !1378 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(8): Ord  Latency=0 Memory
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1378; cg.c:676:33
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
  Successors:
    SU(8): Data Latency=1 Reg=$w8
SU(8):   STRWui renamable $w8, $sp, 21, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.10
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -48, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 21, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
  Ready @1c
  TopQ.A BotLatency SU(1) 16c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1368; cg.c:677:21
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w17, renamable $w16 = LDPWi renamable $x8, -1, debug-location !1368 :: (load 4 from %ir.arrayidx34), (load 4 from %ir.arrayidx37); cg.c:677:21
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w16 = ADDWrs renamable $w16, renamable $w17, 0, debug-location !1374; cg.c:677:31
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w16, renamable $x8, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = LDRWui $sp, 21, debug-location !1378 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
  Ready @12c
  TopQ.A TopLatency SU(6) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1378; cg.c:676:33
  Ready @16c
  TopQ.A TopLatency SU(7) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w8, $sp, 21, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33
  Ready @17c
  TopQ.A TopLatency SU(8) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.11 ***
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1368 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:677:21
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1370 :: (dereferenceable load 4 from %ir.j); cg.c:677:28
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1368; cg.c:677:21
SU(3):   renamable $w17, renamable $w16 = LDPWi renamable $x8, -1, debug-location !1368 :: (load 4 from %ir.arrayidx34), (load 4 from %ir.arrayidx37); cg.c:677:21
SU(4):   $w16 = ADDWrs renamable $w16, renamable $w17, 0, debug-location !1374; cg.c:677:31
SU(5):   STRWui renamable $w16, renamable $x8, 0, debug-location !1377 :: (store 4 into %ir.arrayidx40); cg.c:677:19
SU(6):   renamable $w8 = LDRWui $sp, 21, debug-location !1378 :: (dereferenceable load 4 from %ir.j); cg.c:676:33
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1378; cg.c:676:33
SU(8):   STRWui renamable $w8, $sp, 21, debug-location !1378 :: (store 4 into %ir.j); cg.c:676:33

Fixup kills for %bb.11
********** MI Scheduling **********
sparse:%bb.12 for.end43
  From: renamable $x8 = LDURXi $fp, -48, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
    To: Bcc 13, %bb.14, implicit $nzcv, debug-location !1390; cg.c:685:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDURSWi $fp, -84, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(3): Anti Latency=0
    SU(6): Ord  Latency=0 Memory
SU(3):   renamable $w16 = LDURWi $fp, -56, debug-location !1388 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(5): Data Latency=4 Reg=$w16
SU(4):   renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1384; cg.c:679:25
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 2
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    SU(6): Data Latency=1 Reg=$w8
    SU(5): Data Latency=1 Reg=$w8
SU(5):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1390; cg.c:685:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(3): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(6):   STRWui renamable $w8, $sp, 18, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Ord  Latency=0 Memory
ExitSU:   Bcc 13, %bb.14, implicit $nzcv, debug-location !1390; cg.c:685:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -48, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDURSWi $fp, -84, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w16 = LDURWi $fp, -56, debug-location !1388 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1384; cg.c:679:25
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 10c > CritPath 10
  Cand SU(6) ORDER                              
  Cand SU(5) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1390; cg.c:685:9
  Ready @10c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w8, $sp, 18, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9
  Ready @11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1382 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:679:11
SU(1):   renamable $x16 = LDURSWi $fp, -84, debug-location !1383 :: (dereferenceable load 4 from %ir.nrows); cg.c:679:18
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1382 :: (load 4 from %ir.arrayidx45); cg.c:679:11
SU(3):   renamable $w16 = LDURWi $fp, -56, debug-location !1388 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:685:15
SU(4):   renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1384; cg.c:679:25
SU(5):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1390; cg.c:685:9
SU(6):   STRWui renamable $w8, $sp, 18, debug-location !1385 :: (store 4 into %ir.nza); cg.c:679:9

Fixup kills for %bb.12
********** MI Scheduling **********
sparse:%bb.13 if.then
  From: renamable $w19 = LDRWui $sp, 18, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !1395; cg.c:687:9
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDRWui $sp, 18, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w19
SU(1):   renamable $w20 = LDURWi $fp, -56, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(5): Data Latency=4 Reg=$w20
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x0
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, 0, debug-location !1395; cg.c:687:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(4):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !1395; cg.c:687:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(5):   $w2 = ORRWrs $wzr, $w20, 0, debug-location !1395; cg.c:687:9
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w20
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit $w2, implicit-def $sp, implicit-def dead $w8, debug-location !1395; cg.c:687:9
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=1 Artificial
    SU(4): Ord  Latency=1 Artificial
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDRWui $sp, 18, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w20 = LDURWi $fp, -56, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADRP target-flags(aarch64-page) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 5 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, 0, debug-location !1395; cg.c:687:9
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 5 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w1 = ORRWrs $wzr, $w19, 0, debug-location !1395; cg.c:687:9
  Ready @4c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $w2 = ORRWrs $wzr, $w20, 0, debug-location !1395; cg.c:687:9
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   renamable $w19 = LDRWui $sp, 18, debug-location !1393 :: (dereferenceable load 4 from %ir.nza); cg.c:687:41
SU(1):   renamable $w20 = LDURWi $fp, -56, debug-location !1394 :: (dereferenceable load 4 from %ir.nz.addr); cg.c:687:46
SU(2):   $x0 = ADRP target-flags(aarch64-page) @cg__str_38_nza__nzmax, debug-location !1395; cg.c:687:9
SU(3):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_38_nza__nzmax, 0, debug-location !1395; cg.c:687:9
SU(4):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !1395; cg.c:687:9
SU(5):   $w2 = ORRWrs $wzr, $w20, 0, debug-location !1395; cg.c:687:9

********** MI Scheduling **********
sparse:%bb.13 if.then
  From: $x0 = ADRP target-flags(aarch64-page) @cg__str_37_Space_for_, debug-location !1391; cg.c:686:9
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !1391; cg.c:686:9
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_37_Space_for_, debug-location !1391; cg.c:686:9
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_37_Space_for_, 0, debug-location !1391; cg.c:686:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def dead $w8, debug-location !1391; cg.c:686:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 2
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $x0 = ADRP target-flags(aarch64-page) @cg__str_37_Space_for_, debug-location !1391; cg.c:686:9
  Ready @0c
  TopQ.A BotLatency SU(0) 2c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_37_Space_for_, 0, debug-location !1391; cg.c:686:9
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.13 ***
SU(0):   $x0 = ADRP target-flags(aarch64-page) @cg__str_37_Space_for_, debug-location !1391; cg.c:686:9
SU(1):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_37_Space_for_, 0, debug-location !1391; cg.c:686:9

Fixup kills for %bb.13
********** MI Scheduling **********
sparse:%bb.14 if.end
  From: STRWui $wzr, $sp, 21, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   STRWui $wzr, $sp, 21, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   $w8 = MOVNWi 0, 0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) $w8 = MOVNWi 0, 0
  Ready @0c
  TopQ.A BotLatency SU(1) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui $wzr, $sp, 21, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.14 ***
SU(1):   $w8 = MOVNWi 0, 0
SU(0):   STRWui $wzr, $sp, 21, debug-location !1397 :: (store 4 into %ir.j); cg.c:694:12

Fixup kills for %bb.14
********** MI Scheduling **********
sparse:%bb.15 for.cond49
  From: renamable $w16 = LDRWui $sp, 21, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
    To: Bcc 10, %bb.20, implicit $nzcv, debug-location !1404; cg.c:694:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w16 = LDRWui $sp, 21, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w16
SU(1):   renamable $w17 = LDURWi $fp, -84, debug-location !1402 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w17
SU(2):   $wzr = SUBSWrs renamable $w16, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1404; cg.c:694:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w17
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.20, implicit $nzcv, debug-location !1404; cg.c:694:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w16 = LDRWui $sp, 21, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w17 = LDURWi $fp, -84, debug-location !1402 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w16, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1404; cg.c:694:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.15 ***
SU(0):   renamable $w16 = LDRWui $sp, 21, debug-location !1400 :: (dereferenceable load 4 from %ir.j); cg.c:694:17
SU(1):   renamable $w17 = LDURWi $fp, -84, debug-location !1402 :: (dereferenceable load 4 from %ir.nrows); cg.c:694:21
SU(2):   $wzr = SUBSWrs renamable $w16, renamable $w17, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1404; cg.c:694:5

Fixup kills for %bb.15
********** MI Scheduling **********
sparse:%bb.16 for.body51
  From: renamable $x16 = LDURXi $fp, -48, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
    To: End RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDURXi $fp, -48, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
SU(1):   renamable $x17 = LDRSWui $sp, 21, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=$x17
SU(2):   renamable $w16 = LDRWroX renamable $x16, renamable $x17, 0, 1, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=$x17
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x16 = LDURXi $fp, -48, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x17 = LDRSWui $sp, 21, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWroX renamable $x16, renamable $x17, 0, 1, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.16 ***
SU(0):   renamable $x16 = LDURXi $fp, -48, debug-location !1405 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:18
SU(1):   renamable $x17 = LDRSWui $sp, 21, debug-location !1408 :: (dereferenceable load 4 from %ir.j); cg.c:695:25
SU(2):   renamable $w16 = LDRWroX renamable $x16, renamable $x17, 0, 1, debug-location !1405 :: (load 4 from %ir.arrayidx53); cg.c:695:18

Fixup kills for %bb.16
********** MI Scheduling **********
sparse:%bb.17 for.cond54
  From: STRWui killed renamable $w16, $sp, 17, debug-location !DILocation(line: 0, scope: !1406) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.19, implicit $nzcv, debug-location !1417; cg.c:695:9
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w16, $sp, 17, debug-location !DILocation(line: 0, scope: !1406) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
SU(1):   renamable $x16 = LDURXi $fp, -48, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x16
SU(2):   renamable $x17 = LDRSWui $sp, 21, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x17
SU(3):   renamable $w18 = LDRWui $sp, 17, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w18
SU(4):   renamable $x16 = ADDXrs renamable $x16, renamable $x17, 2, debug-location !1413; cg.c:695:33
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x17
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x16
SU(5):   renamable $w16 = LDRWui renamable $x16, 1, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w16
SU(6):   $wzr = SUBSWrs renamable $w18, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1417; cg.c:695:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w16
    SU(3): Data Latency=4 Reg=$w18
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.19, implicit $nzcv, debug-location !1417; cg.c:695:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui renamable $w16, $sp, 17, debug-location !DILocation(line: 0, scope: !1406) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDURXi $fp, -48, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x17 = LDRSWui $sp, 21, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w18 = LDRWui $sp, 17, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x16 = ADDXrs renamable $x16, renamable $x17, 2, debug-location !1413; cg.c:695:33
  Ready @6c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w16 = LDRWui renamable $x16, 1, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:33
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $wzr = SUBSWrs renamable $w18, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1417; cg.c:695:9
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.17 ***
SU(0):   STRWui renamable $w16, $sp, 17, debug-location !DILocation(line: 0, scope: !1406) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $x16 = LDURXi $fp, -48, debug-location !1413 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:695:33
SU(2):   renamable $x17 = LDRSWui $sp, 21, debug-location !1414 :: (dereferenceable load 4 from %ir.j); cg.c:695:40
SU(3):   renamable $w18 = LDRWui $sp, 17, debug-location !1411 :: (dereferenceable load 4 from %ir.k); cg.c:695:29
SU(4):   renamable $x16 = ADDXrs renamable $x16, renamable $x17, 2, debug-location !1413; cg.c:695:33
SU(5):   renamable $w16 = LDRWui renamable $x16, 1, debug-location !1413 :: (load 4 from %ir.arrayidx57); cg.c:695:33
SU(6):   $wzr = SUBSWrs renamable $w18, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1417; cg.c:695:9

Fixup kills for %bb.17
********** MI Scheduling **********
sparse:%bb.18 for.body59
  From: renamable $x16 = LDURXi $fp, -32, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
    To: B %bb.17
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDURXi $fp, -32, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x17 = LDRSWui $sp, 17, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(4): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x17
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRXroX $xzr, renamable $x16, renamable $x17, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  # preds left       : 4
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 10
  Predecessors:
    SU(1): Data Latency=4 Reg=$x17
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x16
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(4): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $x16 = LDURXi $fp, -40, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x16
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $x17 = LDRSWui $sp, 17, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 9
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(5): Data Latency=4 Reg=$x17
    SU(5): Ord  Latency=0 Memory
SU(5):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  # preds left       : 7
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 5
  Predecessors:
    SU(4): Data Latency=4 Reg=$x17
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=4 Reg=$x16
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
SU(6):   renamable $w16 = LDRWui $sp, 17, debug-location !1425 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 4
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Out  Latency=1
    SU(2): Ord  Latency=1 Memory
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w16
SU(7):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1425; cg.c:695:49
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 0
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w16
ExitSU:   B %bb.17
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 14
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 14
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x16 = LDURXi $fp, -32, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
  Ready @0c
  TopQ.A BotLatency SU(0) 14c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x17 = LDRSWui $sp, 17, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
  Ready @1c
  TopQ.A BotLatency SU(1) 14c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRXroX $xzr, renamable $x16, renamable $x17, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 3 
  TopQ.A RemainingLatency 0 + 6c > CritPath 14
  Cand SU(4) ORDER                              
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $x16 = LDURXi $fp, -40, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x17 = LDRSWui $sp, 17, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
  Ready @7c
  TopQ.A BotLatency SU(4) 9c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
  Ready @11c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w16 = LDRWui $sp, 17, debug-location !1425 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
  Ready @12c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1425; cg.c:695:49
  Ready @16c
  TopQ.A TopLatency SU(7) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.18 ***
SU(0):   renamable $x16 = LDURXi $fp, -32, debug-location !1418 :: (dereferenceable load 8 from %ir.a.addr); cg.c:696:13
SU(1):   renamable $x17 = LDRSWui $sp, 17, debug-location !1420 :: (dereferenceable load 4 from %ir.k); cg.c:696:15
SU(2):   STRXroX $xzr, renamable $x16, renamable $x17, 0, 1, debug-location !1421 :: (store 8 into %ir.arrayidx61); cg.c:696:18
SU(3):   renamable $x16 = LDURXi $fp, -40, debug-location !1422 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:697:13
SU(4):   renamable $x17 = LDRSWui $sp, 17, debug-location !1423 :: (dereferenceable load 4 from %ir.k); cg.c:697:20
SU(5):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1424 :: (store 4 into %ir.arrayidx63); cg.c:697:23
SU(6):   renamable $w16 = LDRWui $sp, 17, debug-location !1425 :: (dereferenceable load 4 from %ir.k); cg.c:695:49
SU(7):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1425; cg.c:695:49

Fixup kills for %bb.18
********** MI Scheduling **********
sparse:%bb.19 for.end66
  From: renamable $x16 = LDRXui $fp, 7, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
    To: B %bb.15
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x16 = LDRXui $fp, 7, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $x17 = LDRSWui $sp, 21, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=$x17
    SU(5): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(2):   STRWroX $wzr, renamable $x16, renamable $x17, 0, 1, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x17
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x16
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(3): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w16 = LDRWui $sp, 21, debug-location !1432 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w16
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1432; cg.c:694:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w16
  Successors:
    SU(5): Data Latency=1 Reg=$w16
SU(5):   STRWui renamable $w16, $sp, 21, debug-location !1432 :: (store 4 into %ir.j); cg.c:694:29
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w16
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
ExitSU:   B %bb.15
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x16 = LDRXui $fp, 7, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x17 = LDRSWui $sp, 21, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWroX $wzr, renamable $x16, renamable $x17, 0, 1, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w16 = LDRWui $sp, 21, debug-location !1432 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1432; cg.c:694:29
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w16, $sp, 21, debug-location !1432 :: (store 4 into %ir.j); cg.c:694:29
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.19 ***
SU(0):   renamable $x16 = LDRXui $fp, 7, debug-location !1429 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:699:9
SU(1):   renamable $x17 = LDRSWui $sp, 21, debug-location !1430 :: (dereferenceable load 4 from %ir.j); cg.c:699:15
SU(2):   STRWroX $wzr, renamable $x16, renamable $x17, 0, 1, debug-location !1431 :: (store 4 into %ir.arrayidx68); cg.c:699:18
SU(3):   renamable $w16 = LDRWui $sp, 21, debug-location !1432 :: (dereferenceable load 4 from %ir.j); cg.c:694:29
SU(4):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1432; cg.c:694:29
SU(5):   STRWui renamable $w16, $sp, 21, debug-location !1432 :: (store 4 into %ir.j); cg.c:694:29

Fixup kills for %bb.19
********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: STRDui killed renamable $d0, $sp, 4, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRDui renamable $d0, $sp, 4, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   STRWui $wzr, $sp, 22, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(2):   $w0 = MOVZWi 56, 0, implicit-def $x0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w20 = MOVZWi 112, 0, implicit-def $x20
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 3 
  TopQ.A RemainingLatency 0 + 0c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) $w0 = MOVZWi 56, 0, implicit-def $x0
  Ready @0c
  TopQ.A BotLatency SU(2) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 1
  Cand SU(0) ORDER                              
  Cand SU(3) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) $w20 = MOVZWi 112, 0, implicit-def $x20
  Ready @1c
  TopQ.A BotLatency SU(3) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 2c > CritPath 1
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRDui renamable $d0, $sp, 4, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui $wzr, $sp, 22, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(2):   $w0 = MOVZWi 56, 0, implicit-def $x0
SU(3):   $w20 = MOVZWi 112, 0, implicit-def $x20
SU(0):   STRDui renamable $d0, $sp, 4, debug-location !1442 :: (store 8 into %ir.ratio); cg.c:706:11
SU(1):   STRWui $wzr, $sp, 22, debug-location !1443 :: (store 4 into %ir.i); cg.c:708:12

********** MI Scheduling **********
sparse:%bb.20 for.end71
  From: $x8 = MOVZXi 16368, 48
    To: BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1441; cg.c:706:13
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   $x8 = MOVZXi 16368, 48
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 7
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
SU(1):   renamable $s2 = LDURSi $fp, -52, implicit-def $d2, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 7
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d2
SU(2):   STRXui renamable $x8, $sp, 6, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(0): Data Latency=1 Reg=$x8
  Successors:
    SU(3): Anti Latency=0
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 6
  Predecessors:
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 2
  Height             : 5
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$d1
SU(5):   renamable $d0 = LDURDi $fp, -72, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(9): Data Latency=4 Reg=$d0
SU(6):   renamable $q2 = SSHLLv2i32_shift renamable $d2, 0, debug-location !1439; cg.c:706:31
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 3
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=1 Reg=$d2
    SU(7): Data Latency=0 Reg=$q2
SU(7):   renamable $d2 = SCVTFv1i64 renamable $d2, implicit $q2, debug-location !1439; cg.c:706:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 2
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$d2
    SU(6): Data Latency=0 Reg=$q2
  Successors:
    SU(8): Data Latency=1 Reg=$d2
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !1440; cg.c:706:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=$d2
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
    SU(9): Data Latency=1 Reg=$d1
SU(9):   STPDi renamable $d1, renamable $d0, $sp, 0 :: (store 8 into %stack.29), (store 8 into %stack.30)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$d1
    SU(5): Data Latency=4 Reg=$d0
ExitSU:   BL @pow, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $d0, implicit $d1, implicit-def $sp, implicit-def $d0, debug-location !1441; cg.c:706:13
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 7
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=1 Artificial
    SU(5): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 7
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 7
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) $x8 = MOVZXi 16368, 48
  Ready @0c
  TopQ.A BotLatency SU(0) 7c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  7 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $s2 = LDURSi $fp, -52, implicit-def $d2, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
  Ready @1c
  TopQ.A BotLatency SU(1) 7c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(2) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) STRXui renamable $x8, $sp, 6, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(3) TOP-PATH                  6 cycles 
Pick Top TOP-PATH  
Scheduling SU(3) renamable $x8 = ADRP target-flags(aarch64-page) %const.0
  Ready @3c
  TopQ.A BotLatency SU(3) 6c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 6 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 7
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
  Ready @4c
  TopQ.A TopLatency SU(4) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 5c > CritPath 7
  Cand SU(5) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(5) renamable $d0 = LDURDi $fp, -72, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $q2 = SSHLLv2i32_shift renamable $d2, 0, debug-location !1439; cg.c:706:31
  Ready @6c
  TopQ.A TopLatency SU(6) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 7
  Executed: 7c
  Critical: 7c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $d2 = SCVTFv1i64 renamable $d2, implicit $q2, debug-location !1439; cg.c:706:31
  Ready @7c
  TopQ.A TopLatency SU(7) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 8
  Executed: 8c
  Critical: 8c, 8 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !1440; cg.c:706:29
  Ready @8c
  TopQ.A TopLatency SU(8) 6c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 9
  Executed: 9c
  Critical: 9c, 9 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STPDi renamable $d1, renamable $d0, $sp, 0 :: (store 8 into %stack.29), (store 8 into %stack.30)
  Ready @9c
  TopQ.A TopLatency SU(9) 7c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 10
  Executed: 10c
  Critical: 10c, 10 MOps
  ExpectedLatency: 7c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.20 ***
SU(0):   $x8 = MOVZXi 16368, 48
SU(1):   renamable $s2 = LDURSi $fp, -52, implicit-def $d2, debug-location !1439 :: (dereferenceable load 4 from %ir.n.addr); cg.c:706:31
SU(2):   STRXui renamable $x8, $sp, 6, debug-location !1436 :: (store 8 into %ir.size); cg.c:705:10
SU(3):   renamable $x8 = ADRP target-flags(aarch64-page) %const.0
SU(4):   renamable $d1 = LDRDui renamable $x8, target-flags(aarch64-pageoff, aarch64-nc) %const.0 :: (load 8 from constant-pool)
SU(5):   renamable $d0 = LDURDi $fp, -72, debug-location !1437 :: (dereferenceable load 8 from %ir.rcond.addr); cg.c:706:17
SU(6):   renamable $q2 = SSHLLv2i32_shift renamable $d2, 0, debug-location !1439; cg.c:706:31
SU(7):   renamable $d2 = SCVTFv1i64 renamable $d2, implicit $q2, debug-location !1439; cg.c:706:31
SU(8):   renamable $d1 = FDIVDrr renamable $d1, renamable $d2, debug-location !1440; cg.c:706:29
SU(9):   STPDi renamable $d1, renamable $d0, $sp, 0 :: (store 8 into %stack.29), (store 8 into %stack.30)

Fixup kills for %bb.20
********** MI Scheduling **********
sparse:%bb.21 for.cond73
  From: renamable $w8 = LDRWui $sp, 22, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
    To: Bcc 10, %bb.49, implicit $nzcv, debug-location !1450; cg.c:708:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 22, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDURWi $fp, -52, debug-location !1448 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w16
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1450; cg.c:708:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.49, implicit $nzcv, debug-location !1450; cg.c:708:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 22, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -52, debug-location !1448 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1450; cg.c:708:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.21 ***
SU(0):   renamable $w8 = LDRWui $sp, 22, debug-location !1446 :: (dereferenceable load 4 from %ir.i); cg.c:708:17
SU(1):   renamable $w16 = LDURWi $fp, -52, debug-location !1448 :: (dereferenceable load 4 from %ir.n.addr); cg.c:708:21
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1450; cg.c:708:5

Fixup kills for %bb.21
Fixup kills for %bb.22
********** MI Scheduling **********
sparse:%bb.23 for.cond77
  From: renamable $x8 = LDRXui $fp, 2, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
    To: Bcc 10, %bb.48, implicit $nzcv, debug-location !1460; cg.c:709:9
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $fp, 2, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 22, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=$x16
SU(2):   renamable $w17 = LDRWui $sp, 18, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w17
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1457 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
SU(4):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1460; cg.c:709:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.48, implicit $nzcv, debug-location !1460; cg.c:709:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRXui $fp, 2, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 22, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = LDRWui $sp, 18, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1457 :: (load 4 from %ir.arrayidx79); cg.c:709:29
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1460; cg.c:709:9
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.23 ***
SU(0):   renamable $x8 = LDRXui $fp, 2, debug-location !1457 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:709:29
SU(1):   renamable $x16 = LDRSWui $sp, 22, debug-location !1458 :: (dereferenceable load 4 from %ir.i); cg.c:709:34
SU(2):   renamable $w17 = LDRWui $sp, 18, debug-location !1455 :: (dereferenceable load 4 from %ir.nza); cg.c:709:23
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1457 :: (load 4 from %ir.arrayidx79); cg.c:709:29
SU(4):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1460; cg.c:709:9

Fixup kills for %bb.23
********** MI Scheduling **********
sparse:%bb.24 for.body82
  From: renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:710:17
    To: End RegionInstrs: 12
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:710:17
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
    SU(5): Data Latency=4 Reg=$x18
SU(1):   renamable $x16 = LDRSWui $sp, 22, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x16
    SU(3): Data Latency=4 Reg=$x16
SU(2):   renamable $x17 = LDRSWui $sp, 18, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Data Latency=4 Reg=$x17
    SU(4): Data Latency=4 Reg=$x17
SU(3):   renamable $x8 = MADDXrrr renamable $x16, renamable $x0, renamable $x8, debug-location !1461; cg.c:710:17
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
    SU(5): Anti Latency=0
SU(4):   renamable $w8 = LDRWroX renamable $x8, renamable $x17, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=4 Reg=$x17
  Successors:
    SU(7): Data Latency=4 Reg=$w8
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(5):   renamable $x16 = MADDXrrr renamable $x16, renamable $x20, renamable $x18, debug-location !1467; cg.c:712:28
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Data Latency=4 Reg=$x18
  Successors:
    SU(8): Data Latency=1 Reg=$x16
SU(6):   renamable $d0 = LDRDui $sp, 6, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$d0
SU(7):   STRWui renamable $w8, $sp, 21, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=$w8
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=1 Memory
SU(8):   renamable $d1 = LDRDroX renamable $x16, renamable $x17, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Ord  Latency=1 Memory
    SU(5): Data Latency=1 Reg=$x16
    SU(2): Data Latency=4 Reg=$x17
  Successors:
    SU(9): Data Latency=4 Reg=$d1
    SU(11): Ord  Latency=0 Memory
    SU(10): Ord  Latency=0 Memory
SU(9):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1470; cg.c:712:26
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=$d1
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$d0
  Successors:
    SU(10): Data Latency=1 Reg=$d0
SU(10):   STRDui renamable $d0, $sp, 5, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=$d0
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(11):   STRWui $wzr, $sp, 15, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:710:17
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 22, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
  Ready @1c
  TopQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 15
  Cand SU(6) ORDER                              
  Cand SU(2) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x17 = LDRSWui $sp, 18, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $d0 = LDRDui $sp, 6, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = MADDXrrr renamable $x16, renamable $x0, renamable $x8, debug-location !1461; cg.c:710:17
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 5 
  TopQ.A RemainingLatency 0 + 6c > CritPath 15
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w8 = LDRWroX renamable $x8, renamable $x17, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x16 = MADDXrrr renamable $x16, renamable $x20, renamable $x18, debug-location !1467; cg.c:712:28
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui renamable $w8, $sp, 21, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d1 = LDRDroX renamable $x16, renamable $x17, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 9 
Queue TopQ.A: 11 
Pick Top ONLY1     
Scheduling SU(11) STRWui $wzr, $sp, 15, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24
  Ready @12c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1470; cg.c:712:26
  Ready @15c
  TopQ.A TopLatency SU(9) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) STRDui renamable $d0, $sp, 5, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19
  Ready @16c
  TopQ.A TopLatency SU(10) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.24 ***
SU(0):   renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1461 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:710:17
SU(1):   renamable $x16 = LDRSWui $sp, 22, debug-location !1463 :: (dereferenceable load 4 from %ir.i); cg.c:710:22
SU(2):   renamable $x17 = LDRSWui $sp, 18, debug-location !1464 :: (dereferenceable load 4 from %ir.nza); cg.c:710:25
SU(6):   renamable $d0 = LDRDui $sp, 6, debug-location !1466 :: (dereferenceable load 8 from %ir.size); cg.c:712:21
SU(3):   renamable $x8 = MADDXrrr renamable $x16, renamable $x0, renamable $x8, debug-location !1461; cg.c:710:17
SU(4):   renamable $w8 = LDRWroX renamable $x8, renamable $x17, 0, 1, debug-location !1461 :: (load 4 from %ir.arrayidx86); cg.c:710:17
SU(5):   renamable $x16 = MADDXrrr renamable $x16, renamable $x20, renamable $x18, debug-location !1467; cg.c:712:28
SU(7):   STRWui renamable $w8, $sp, 21, debug-location !1465 :: (store 4 into %ir.j); cg.c:710:15
SU(8):   renamable $d1 = LDRDroX renamable $x16, renamable $x17, 0, 1, debug-location !1467 :: (load 8 from %ir.arrayidx90); cg.c:712:28
SU(11):   STRWui $wzr, $sp, 15, debug-location !1472 :: (store 4 into %ir.nzrow); cg.c:713:24
SU(9):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1470; cg.c:712:26
SU(10):   STRDui renamable $d0, $sp, 5, debug-location !1471 :: (store 8 into %ir.scale); cg.c:712:19

Fixup kills for %bb.24
********** MI Scheduling **********
sparse:%bb.25 for.cond91
  From: renamable $x8 = LDRXui $fp, 2, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
    To: Bcc 10, %bb.47, implicit $nzcv, debug-location !1480; cg.c:713:13
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $fp, 2, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 22, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=$x16
SU(2):   renamable $w17 = LDRWui $sp, 15, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=$w17
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1477 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
SU(4):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1480; cg.c:713:13
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w8
    SU(2): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.47, implicit $nzcv, debug-location !1480; cg.c:713:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRXui $fp, 2, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 22, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w17 = LDRWui $sp, 15, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1477 :: (load 4 from %ir.arrayidx93); cg.c:713:37
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1480; cg.c:713:13
  Ready @9c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.25 ***
SU(0):   renamable $x8 = LDRXui $fp, 2, debug-location !1477 :: (dereferenceable load 8 from %ir.arow.addr, align 16); cg.c:713:37
SU(1):   renamable $x16 = LDRSWui $sp, 22, debug-location !1478 :: (dereferenceable load 4 from %ir.i); cg.c:713:42
SU(2):   renamable $w17 = LDRWui $sp, 15, debug-location !1475 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:29
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1477 :: (load 4 from %ir.arrayidx93); cg.c:713:37
SU(4):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1480; cg.c:713:13

Fixup kills for %bb.25
********** MI Scheduling **********
sparse:%bb.26 for.body96
  From: renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:714:24
    To: Bcc 1, %bb.29, implicit $nzcv, debug-location !1496; cg.c:721:31
 RegionInstrs: 13
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:714:24
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
    SU(6): Data Latency=4 Reg=$x18
SU(1):   renamable $x16 = LDRSWui $sp, 22, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x16
    SU(3): Data Latency=4 Reg=$x16
SU(2):   renamable $x17 = LDRSWui $sp, 15, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Data Latency=4 Reg=$x17
    SU(4): Data Latency=4 Reg=$x17
SU(3):   renamable $x8 = MADDXrrr renamable $x16, renamable $x0, renamable $x8, debug-location !1481; cg.c:714:24
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
    SU(6): Anti Latency=0
SU(4):   renamable $w8 = LDRWroX renamable $x8, renamable $x17, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=4 Reg=$x17
  Successors:
    SU(11): Data Latency=4 Reg=$w8
    SU(7): Data Latency=4 Reg=$w8
    SU(12): Ord  Latency=0 Memory
    SU(7): Ord  Latency=0 Memory
SU(5):   renamable $d0 = LDRDui $sp, 5, debug-location !1489 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$d0
SU(6):   renamable $x16 = MADDXrrr renamable $x16, renamable $x20, renamable $x18, debug-location !1486; cg.c:715:22
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(3): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Data Latency=4 Reg=$x18
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x16
SU(7):   STRWui renamable $w8, $sp, 14, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(4): Data Latency=4 Reg=$w8
    SU(4): Ord  Latency=0 Memory
  Successors:
    SU(8): Ord  Latency=1 Memory
SU(8):   renamable $d1 = LDRDroX renamable $x16, renamable $x17, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(7): Ord  Latency=1 Memory
    SU(6): Data Latency=1 Reg=$x16
    SU(2): Data Latency=4 Reg=$x17
  Successors:
    SU(10): Data Latency=4 Reg=$d1
    SU(9): Anti Latency=0
    SU(12): Ord  Latency=0 Memory
SU(9):   renamable $w16 = LDRWui $sp, 21, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(8): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(11): Data Latency=4 Reg=$w16
SU(10):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !1490; cg.c:715:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(8): Data Latency=4 Reg=$d1
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
  Successors:
    SU(12): Data Latency=1 Reg=$d0
SU(11):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1496; cg.c:721:31
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 1
  Predecessors:
    SU(9): Data Latency=4 Reg=$w16
    SU(4): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(12):   STRDui renamable $d0, $sp, 3, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(10): Data Latency=1 Reg=$d0
    SU(8): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
ExitSU:   Bcc 1, %bb.29, implicit $nzcv, debug-location !1496; cg.c:721:31
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(11): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:714:24
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 15
  Cand SU(5) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 22, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
  Ready @1c
  TopQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 15
  Cand SU(5) ORDER                              
  Cand SU(2) TOP-PATH                  14 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x17 = LDRSWui $sp, 15, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = LDRDui $sp, 5, debug-location !1489 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = MADDXrrr renamable $x16, renamable $x0, renamable $x8, debug-location !1481; cg.c:714:24
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 6 
  TopQ.A RemainingLatency 0 + 6c > CritPath 15
  Cand SU(4) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w8 = LDRWroX renamable $x8, renamable $x17, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 7 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x16 = MADDXrrr renamable $x16, renamable $x20, renamable $x18, debug-location !1486; cg.c:715:22
  Ready @7c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWui renamable $w8, $sp, 14, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
  Ready @10c
  TopQ.A TopLatency SU(7) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 8
  Executed: 11c
  Critical: 8c, 8 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $d1 = LDRDroX renamable $x16, renamable $x17, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
  Ready @11c
  TopQ.A TopLatency SU(8) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 9
  Executed: 12c
  Critical: 9c, 9 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 10 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w16 = LDRWui $sp, 21, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
  Ready @12c
  TopQ.A BotLatency SU(9) 5c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 10
  Executed: 13c
  Critical: 10c, 10 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 11 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !1490; cg.c:715:37
  Ready @15c
  TopQ.A TopLatency SU(10) 14c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 11
  Executed: 16c
  Critical: 11c, 11 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 11 
  TopQ.A RemainingLatency 0 + 16c > CritPath 15
  Cand SU(12) ORDER                              
  Cand SU(11) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(11) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1496; cg.c:721:31
  Ready @16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 12
  Executed: 17c
  Critical: 12c, 12 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 12 
Pick Top ONLY1     
Scheduling SU(12) STRDui renamable $d0, $sp, 3, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20
  Ready @17c
  TopQ.A TopLatency SU(12) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 13
  Executed: 18c
  Critical: 13c, 13 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.26 ***
SU(0):   renamable $x8, renamable $x18 = LDPXi $fp, 3, debug-location !1481 :: (dereferenceable load 8 from %ir.acol.addr), (dereferenceable load 8 from %ir.aelt.addr, align 16); cg.c:714:24
SU(1):   renamable $x16 = LDRSWui $sp, 22, debug-location !1483 :: (dereferenceable load 4 from %ir.i); cg.c:714:29
SU(2):   renamable $x17 = LDRSWui $sp, 15, debug-location !1484 :: (dereferenceable load 4 from %ir.nzrow); cg.c:714:32
SU(5):   renamable $d0 = LDRDui $sp, 5, debug-location !1489 :: (dereferenceable load 8 from %ir.scale); cg.c:715:39
SU(3):   renamable $x8 = MADDXrrr renamable $x16, renamable $x0, renamable $x8, debug-location !1481; cg.c:714:24
SU(4):   renamable $w8 = LDRWroX renamable $x8, renamable $x17, 0, 1, debug-location !1481 :: (load 4 from %ir.arrayidx100); cg.c:714:24
SU(6):   renamable $x16 = MADDXrrr renamable $x16, renamable $x20, renamable $x18, debug-location !1486; cg.c:715:22
SU(7):   STRWui renamable $w8, $sp, 14, debug-location !1485 :: (store 4 into %ir.jcol); cg.c:714:22
SU(8):   renamable $d1 = LDRDroX renamable $x16, renamable $x17, 0, 1, debug-location !1486 :: (load 8 from %ir.arrayidx104); cg.c:715:22
SU(9):   renamable $w16 = LDRWui $sp, 21, debug-location !1494 :: (dereferenceable load 4 from %ir.j); cg.c:721:29
SU(10):   renamable $d0 = FMULDrr renamable $d1, renamable $d0, debug-location !1490; cg.c:715:37
SU(11):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1496; cg.c:721:31
SU(12):   STRDui renamable $d0, $sp, 3, debug-location !1491 :: (store 8 into %ir.va); cg.c:715:20

Fixup kills for %bb.26
********** MI Scheduling **********
sparse:%bb.27 land.lhs.true
  From: renamable $w8, renamable $w16 = LDPWi $sp, 21, debug-location !1497 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
    To: Bcc 1, %bb.29, implicit $nzcv, debug-location !1500; cg.c:721:21
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8, renamable $w16 = LDPWi $sp, 21, debug-location !1497 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
    SU(1): Data Latency=4 Reg=$w16
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1500; cg.c:721:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.29, implicit $nzcv, debug-location !1500; cg.c:721:21
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8, renamable $w16 = LDPWi $sp, 21, debug-location !1497 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1500; cg.c:721:21
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.27 ***
SU(0):   renamable $w8, renamable $w16 = LDPWi $sp, 21, debug-location !1497 :: (dereferenceable load 4 from %ir.j), (dereferenceable load 4 from %ir.i); cg.c:721:34
SU(1):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1500; cg.c:721:21

Fixup kills for %bb.27
********** MI Scheduling **********
sparse:%bb.28 if.then110
  From: renamable $d0 = LDRDui $sp, 3, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 3, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$d0
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $d2, renamable $d1 = LDPDi $fp, -10, debug-location !1503 :: (dereferenceable load 8 from %ir.rcond.addr), (dereferenceable load 8 from %ir.shift.addr); cg.c:722:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Successors:
    SU(3): Data Latency=4 Reg=$d2
    SU(2): Data Latency=4 Reg=$d1
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1504; cg.c:722:29
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$d0
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !1506; cg.c:722:37
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d0
    SU(1): Data Latency=4 Reg=$d2
  Successors:
    SU(4): Data Latency=1 Reg=$d0
SU(4):   STRDui renamable $d0, $sp, 3, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 6
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 3, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $d2, renamable $d1 = LDPDi $fp, -10, debug-location !1503 :: (dereferenceable load 8 from %ir.rcond.addr), (dereferenceable load 8 from %ir.shift.addr); cg.c:722:31
  Ready @1c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1504; cg.c:722:29
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !1506; cg.c:722:37
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d0, $sp, 3, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24
  Ready @7c
  TopQ.A TopLatency SU(4) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.28 ***
SU(0):   renamable $d0 = LDRDui $sp, 3, debug-location !1501 :: (dereferenceable load 8 from %ir.va); cg.c:722:26
SU(1):   renamable $d2, renamable $d1 = LDPDi $fp, -10, debug-location !1503 :: (dereferenceable load 8 from %ir.rcond.addr), (dereferenceable load 8 from %ir.shift.addr); cg.c:722:31
SU(2):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1504; cg.c:722:29
SU(3):   renamable $d0 = FSUBDrr renamable $d0, renamable $d2, debug-location !1506; cg.c:722:37
SU(4):   STRDui renamable $d0, $sp, 3, debug-location !1507 :: (store 8 into %ir.va); cg.c:722:24

Fixup kills for %bb.28
********** MI Scheduling **********
sparse:%bb.29 if.end113
  From: renamable $x8 = LDURXi $fp, -48, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=4 Reg=$x16
SU(2):   STRWui $wzr, $sp, 5, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Ord  Latency=1 Memory
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(2): Ord  Latency=1 Memory
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURXi $fp, -48, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 8
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  8 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 21, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui $wzr, $sp, 5, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.29 ***
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1510 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:26
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1512 :: (dereferenceable load 4 from %ir.j); cg.c:726:33
SU(2):   STRWui $wzr, $sp, 5, debug-location !1509 :: (store 4 into %ir.cont40); cg.c:725:24
SU(3):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1510 :: (load 4 from %ir.arrayidx115); cg.c:726:26

Fixup kills for %bb.29
********** MI Scheduling **********
sparse:%bb.30 for.cond116
  From: STRWui killed renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1511) :: (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.41, implicit $nzcv, debug-location !1521; cg.c:726:17
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1511) :: (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(1): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
SU(1):   renamable $x8 = LDURXi $fp, -48, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x8
SU(2):   renamable $x16 = LDRSWui $sp, 21, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Data Latency=4 Reg=$x16
SU(3):   renamable $w17 = LDRWui $sp, 17, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w17
SU(4):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1517; cg.c:726:41
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(2): Data Latency=4 Reg=$x16
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
SU(5):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(6): Data Latency=4 Reg=$w8
SU(6):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1521; cg.c:726:17
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(5): Data Latency=4 Reg=$w8
    SU(3): Data Latency=4 Reg=$w17
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.41, implicit $nzcv, debug-location !1521; cg.c:726:17
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1511) :: (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 3 
  TopQ.A RemainingLatency 0 + 1c > CritPath 10
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x8 = LDURXi $fp, -48, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 3 
  TopQ.A RemainingLatency 0 + 2c > CritPath 10
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x16 = LDRSWui $sp, 21, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w17 = LDRWui $sp, 17, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
  Ready @3c
  TopQ.A TopLatency SU(3) 1c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1517; cg.c:726:41
  Ready @6c
  TopQ.A TopLatency SU(4) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = LDRWui renamable $x8, 1, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:41
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1521; cg.c:726:17
  Ready @11c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 7
  Executed: 12c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.30 ***
SU(0):   STRWui renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1511) :: (store 4 into %ir.k); cg.c:0
SU(1):   renamable $x8 = LDURXi $fp, -48, debug-location !1517 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:726:41
SU(2):   renamable $x16 = LDRSWui $sp, 21, debug-location !1518 :: (dereferenceable load 4 from %ir.j); cg.c:726:48
SU(3):   renamable $w17 = LDRWui $sp, 17, debug-location !1515 :: (dereferenceable load 4 from %ir.k); cg.c:726:37
SU(4):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1517; cg.c:726:41
SU(5):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !1517 :: (load 4 from %ir.arrayidx119); cg.c:726:41
SU(6):   $wzr = SUBSWrs renamable $w17, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1521; cg.c:726:17

Fixup kills for %bb.30
********** MI Scheduling **********
sparse:%bb.31 for.body122
  From: renamable $x8 = LDURXi $fp, -40, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
    To: Bcc 13, %bb.38, implicit $nzcv, debug-location !1528; cg.c:727:25
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -40, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 17, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
    SU(3): Anti Latency=0
SU(3):   renamable $w16 = LDRWui $sp, 14, debug-location !1526 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w16
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1528; cg.c:727:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w16
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 13, %bb.38, implicit $nzcv, debug-location !1528; cg.c:727:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -40, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 17, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w16 = LDRWui $sp, 14, debug-location !1526 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
  Ready @6c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1528; cg.c:727:25
  Ready @10c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.31 ***
SU(0):   renamable $x8 = LDURXi $fp, -40, debug-location !1522 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:727:25
SU(1):   renamable $x16 = LDRSWui $sp, 17, debug-location !1525 :: (dereferenceable load 4 from %ir.k); cg.c:727:32
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1522 :: (load 4 from %ir.arrayidx124); cg.c:727:25
SU(3):   renamable $w16 = LDRWui $sp, 14, debug-location !1526 :: (dereferenceable load 4 from %ir.jcol); cg.c:727:37
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1528; cg.c:727:25

Fixup kills for %bb.31
********** MI Scheduling **********
sparse:%bb.32 if.then127
  From: renamable $x8 = LDURXi $fp, -48, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
    To: End RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Data Latency=4 Reg=$x16
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1529; cg.c:731:35
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
SU(4):   renamable $w8 = SUBWri renamable $w8, 2, 0, debug-location !1534; cg.c:731:49
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -48, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 21, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
  Ready @1c
  TopQ.A BotLatency SU(1) 10c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1529; cg.c:731:35
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = LDRWui renamable $x8, 1, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w8 = SUBWri renamable $w8, 2, 0, debug-location !1534; cg.c:731:49
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.32 ***
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1529 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:731:35
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1532 :: (dereferenceable load 4 from %ir.j); cg.c:731:42
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1529; cg.c:731:35
SU(3):   renamable $w8 = LDRWui renamable $x8, 1, debug-location !1529 :: (load 4 from %ir.arrayidx130); cg.c:731:35
SU(4):   renamable $w8 = SUBWri renamable $w8, 2, 0, debug-location !1534; cg.c:731:49

Fixup kills for %bb.32
********** MI Scheduling **********
sparse:%bb.33 for.cond132
  From: STRWui renamable $w8, $sp, 16, debug-location !DILocation(line: 0, scope: !1530) :: (store 4 into %ir.kk); cg.c:0
    To: Bcc 11, %bb.37, implicit $nzcv, debug-location !1541; cg.c:731:25
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 16, debug-location !DILocation(line: 0, scope: !1530) :: (store 4 into %ir.kk); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1537; cg.c:731:54
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(2):   renamable $w16 = LDRWui $sp, 17, debug-location !1539 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1541; cg.c:731:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 11, %bb.37, implicit $nzcv, debug-location !1541; cg.c:731:25
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w16 = LDRWui $sp, 17, debug-location !1539 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
  Ready @0c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w8, $sp, 16, debug-location !DILocation(line: 0, scope: !1530) :: (store 4 into %ir.kk); cg.c:0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1537; cg.c:731:54
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1541; cg.c:731:25
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.33 ***
SU(2):   renamable $w16 = LDRWui $sp, 17, debug-location !1539 :: (dereferenceable load 4 from %ir.k); cg.c:731:60
SU(0):   STRWui renamable $w8, $sp, 16, debug-location !DILocation(line: 0, scope: !1530) :: (store 4 into %ir.kk); cg.c:0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1537; cg.c:731:54
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1541; cg.c:731:25

Fixup kills for %bb.33
********** MI Scheduling **********
sparse:%bb.34 for.body135
  From: renamable $x8 = LDURXi $fp, -40, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
    To: TBNZW killed renamable $w8, 31, %bb.36, debug-location !1547; cg.c:732:33
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -40, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 16, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 8
  Successors:
    SU(2): Data Latency=4 Reg=$x16
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1542 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 4
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    ExitSU: Ord  Latency=4 Artificial
ExitSU:   TBNZW killed renamable $w8, 31, %bb.36, debug-location !1547; cg.c:732:33
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 8
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 8
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -40, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
  Ready @0c
  TopQ.A BotLatency SU(0) 8c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 16, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
  Ready @1c
  TopQ.A BotLatency SU(1) 8c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1542 :: (load 4 from %ir.arrayidx137); cg.c:732:33
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.34 ***
SU(0):   renamable $x8 = LDURXi $fp, -40, debug-location !1542 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:732:33
SU(1):   renamable $x16 = LDRSWui $sp, 16, debug-location !1545 :: (dereferenceable load 4 from %ir.kk); cg.c:732:40
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1542 :: (load 4 from %ir.arrayidx137); cg.c:732:33

Fixup kills for %bb.34
********** MI Scheduling **********
sparse:%bb.35 if.then140
  From: renamable $x8 = LDURXi $fp, -32, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
    To: End RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -32, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDRSWui $sp, 16, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 19
  Successors:
    SU(6): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
    SU(9): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 3, debug-location !1548; cg.c:733:45
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 15
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
    SU(6): Anti Latency=0
SU(3):   renamable $d0 = LDRDui renamable $x8, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  # preds left       : 1
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$d0
    SU(5): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
SU(4):   STRDui renamable $d0, renamable $x8, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 10
  Predecessors:
    SU(3): Data Latency=4 Reg=$d0
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(5): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
SU(5):   renamable $x8 = LDURXi $fp, -40, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(4): Anti Latency=0
    SU(4): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x8
    SU(9): Ord  Latency=0 Memory
SU(6):   renamable $x16 = LDRSWui $sp, 16, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 10
  Height             : 9
  Predecessors:
    SU(4): Ord  Latency=1 Memory
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x16
    SU(9): Ord  Latency=0 Memory
SU(7):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1555; cg.c:734:50
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 5
  Predecessors:
    SU(6): Data Latency=4 Reg=$x16
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x8
  Successors:
    SU(9): Data Latency=1 Reg=$x8
    SU(8): Data Latency=1 Reg=$x8
    SU(8): Anti Latency=0
SU(8):   renamable $w16 = LDRWui renamable $x8, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 15
  Height             : 4
  Predecessors:
    SU(7): Data Latency=1 Reg=$x8
    SU(7): Anti Latency=0
    SU(6): Out  Latency=1
  Successors:
    SU(9): Data Latency=4 Reg=$w16
SU(9):   STRWui renamable $w16, renamable $x8, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
  # preds left       : 7
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(8): Data Latency=4 Reg=$w16
    SU(7): Data Latency=1 Reg=$x8
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 19
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 19
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -32, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
  Ready @0c
  TopQ.A BotLatency SU(0) 19c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 16, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
  Ready @1c
  TopQ.A BotLatency SU(1) 19c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = ADDXrs renamable $x8, renamable $x16, 3, debug-location !1548; cg.c:733:45
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = LDRDui renamable $x8, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d0, renamable $x8, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 11c > CritPath 19
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) renamable $x8 = LDURXi $fp, -40, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $x16 = LDRSWui $sp, 16, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
  Ready @12c
  TopQ.A BotLatency SU(6) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1555; cg.c:734:50
  Ready @16c
  TopQ.A TopLatency SU(7) 14c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w16 = LDRWui renamable $x8, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
  Ready @17c
  TopQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 9
  Executed: 18c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 21 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRWui renamable $w16, renamable $x8, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48
  Ready @21c
  TopQ.A TopLatency SU(9) 19c
  *** Max MOps 1 at cycle 21
Cycle: 22 TopQ.A
TopQ.A @22c
  Retired: 10
  Executed: 22c
  Critical: 10c, 10 MOps
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.35 ***
SU(0):   renamable $x8 = LDURXi $fp, -32, debug-location !1548 :: (dereferenceable load 8 from %ir.a.addr); cg.c:733:45
SU(1):   renamable $x16 = LDRSWui $sp, 16, debug-location !1550 :: (dereferenceable load 4 from %ir.kk); cg.c:733:47
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 3, debug-location !1548; cg.c:733:45
SU(3):   renamable $d0 = LDRDui renamable $x8, 0, debug-location !1548 :: (load 8 from %ir.arrayidx142); cg.c:733:45
SU(4):   STRDui renamable $d0, renamable $x8, 1, debug-location !1554 :: (store 8 into %ir.arrayidx145); cg.c:733:43
SU(5):   renamable $x8 = LDURXi $fp, -40, debug-location !1555 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:734:50
SU(6):   renamable $x16 = LDRSWui $sp, 16, debug-location !1556 :: (dereferenceable load 4 from %ir.kk); cg.c:734:57
SU(7):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1555; cg.c:734:50
SU(8):   renamable $w16 = LDRWui renamable $x8, 0, debug-location !1555 :: (load 4 from %ir.arrayidx147); cg.c:734:50
SU(9):   STRWui renamable $w16, renamable $x8, 1, debug-location !1560 :: (store 4 into %ir.arrayidx150); cg.c:734:48

Fixup kills for %bb.35
********** MI Scheduling **********
sparse:%bb.36 for.inc152
  From: renamable $w8 = LDRWui $sp, 16, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
    To: B %bb.33
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 16, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !1562; cg.c:731:65
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.33
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 16, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !1562; cg.c:731:65
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.36 ***
SU(0):   renamable $w8 = LDRWui $sp, 16, debug-location !1562 :: (dereferenceable load 4 from %ir.kk); cg.c:731:65
SU(1):   renamable $w8 = nsw SUBWri renamable $w8, 1, 0, debug-location !1562; cg.c:731:65

Fixup kills for %bb.36
********** MI Scheduling **********
sparse:%bb.37 for.end153
  From: renamable $w8 = LDRWui $sp, 14, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
    To: B %bb.40
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 14, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDURXi $fp, -40, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x16
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x17 = LDRSWui $sp, 17, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Data Latency=4 Reg=$x17
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(3):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  # preds left       : 6
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Data Latency=4 Reg=$x17
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x16
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Anti Latency=0
    SU(5): Anti Latency=0
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
SU(4):   renamable $x8 = LDURXi $fp, -32, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(0): Out  Latency=1
  Successors:
    SU(6): Data Latency=4 Reg=$x8
    SU(6): Ord  Latency=0 Memory
SU(5):   renamable $x16 = LDRSWui $sp, 17, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(1): Out  Latency=1
  Successors:
    SU(6): Data Latency=4 Reg=$x16
    SU(6): Ord  Latency=0 Memory
SU(6):   STRXroX $xzr, renamable $x8, renamable $x16, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  # preds left       : 8
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(5): Data Latency=4 Reg=$x16
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 14, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x16 = LDURXi $fp, -40, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x17 = LDRSWui $sp, 17, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
  Ready @2c
  TopQ.A BotLatency SU(2) 9c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 7c > CritPath 9
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x8 = LDURXi $fp, -32, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
  Ready @7c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 5
  Executed: 8c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x16 = LDRSWui $sp, 17, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
  Ready @8c
  TopQ.A BotLatency SU(5) 4c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 6
  Executed: 9c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 12 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRXroX $xzr, renamable $x8, renamable $x16, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30
  Ready @12c
  TopQ.A TopLatency SU(6) 9c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.37 ***
SU(0):   renamable $w8 = LDRWui $sp, 14, debug-location !1566 :: (dereferenceable load 4 from %ir.jcol); cg.c:737:37
SU(1):   renamable $x16 = LDURXi $fp, -40, debug-location !1567 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:737:25
SU(2):   renamable $x17 = LDRSWui $sp, 17, debug-location !1568 :: (dereferenceable load 4 from %ir.k); cg.c:737:32
SU(3):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1569 :: (store 4 into %ir.arrayidx155); cg.c:737:35
SU(4):   renamable $x8 = LDURXi $fp, -32, debug-location !1570 :: (dereferenceable load 8 from %ir.a.addr); cg.c:738:25
SU(5):   renamable $x16 = LDRSWui $sp, 17, debug-location !1571 :: (dereferenceable load 4 from %ir.k); cg.c:738:27
SU(6):   STRXroX $xzr, renamable $x8, renamable $x16, 0, 1, debug-location !1572 :: (store 8 into %ir.arrayidx157); cg.c:738:30

Fixup kills for %bb.37
********** MI Scheduling **********
sparse:%bb.38 if.else
  From: renamable $x8 = LDURXi $fp, -40, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
    To: Bcc 1, %bb.44, implicit $nzcv, debug-location !1579; cg.c:742:30
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -40, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 17, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=$x16
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Data Latency=4 Reg=$w8
SU(3):   dead $wzr = ADDSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1579; cg.c:742:30
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.44, implicit $nzcv, debug-location !1579; cg.c:742:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -40, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 17, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:30
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) dead $wzr = ADDSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1579; cg.c:742:30
  Ready @9c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.38 ***
SU(0):   renamable $x8 = LDURXi $fp, -40, debug-location !1575 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:742:30
SU(1):   renamable $x16 = LDRSWui $sp, 17, debug-location !1577 :: (dereferenceable load 4 from %ir.k); cg.c:742:37
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1575 :: (load 4 from %ir.arrayidx159); cg.c:742:30
SU(3):   dead $wzr = ADDSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1579; cg.c:742:30

Fixup kills for %bb.38
********** MI Scheduling **********
sparse:%bb.39 if.then162
  From: renamable $w8 = LDRWui $sp, 14, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
    To: End RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 14, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$w8
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDURXi $fp, -40, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x16
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $x17 = LDRSWui $sp, 17, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=4 Reg=$x17
    SU(3): Ord  Latency=0 Memory
SU(3):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(2): Data Latency=4 Reg=$x17
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x16
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$w8
    SU(0): Ord  Latency=0 Memory
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 4
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 14, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 4
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x16 = LDURXi $fp, -40, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
  Ready @1c
  TopQ.A BotLatency SU(1) 4c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x17 = LDRSWui $sp, 17, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
  Ready @2c
  TopQ.A BotLatency SU(2) 4c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.39 ***
SU(0):   renamable $w8 = LDRWui $sp, 14, debug-location !1580 :: (dereferenceable load 4 from %ir.jcol); cg.c:743:37
SU(1):   renamable $x16 = LDURXi $fp, -40, debug-location !1582 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:743:25
SU(2):   renamable $x17 = LDRSWui $sp, 17, debug-location !1583 :: (dereferenceable load 4 from %ir.k); cg.c:743:32
SU(3):   STRWroX renamable $w8, renamable $x16, renamable $x17, 0, 1, debug-location !1584 :: (store 4 into %ir.arrayidx164); cg.c:743:35

Fixup kills for %bb.39
********** MI Scheduling **********
sparse:%bb.40 for.end181
  From: $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !1523); cg.c:0
    To: End RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !1523); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=$w8
SU(1):   STRWui renamable $w8, $sp, 5, debug-location !DILocation(line: 0, scope: !1523) :: (store 4 into %ir.cont40); cg.c:0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=$w8
Critical Path: (PGS-RR) 1
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !1523); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 1c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) STRWui renamable $w8, $sp, 5, debug-location !DILocation(line: 0, scope: !1523) :: (store 4 into %ir.cont40); cg.c:0
  Ready @1c
  TopQ.A TopLatency SU(1) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.40 ***
SU(0):   $w8 = MOVZWi 1, 0, debug-location !DILocation(line: 0, scope: !1523); cg.c:0
SU(1):   STRWui renamable $w8, $sp, 5, debug-location !DILocation(line: 0, scope: !1523) :: (store 4 into %ir.cont40); cg.c:0

Fixup kills for %bb.40
Fixup kills for %bb.41
********** MI Scheduling **********
sparse:%bb.42 if.then184
  From: renamable $w19 = LDRWui $sp, 22, debug-location !1610 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
    To: BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !1612; cg.c:757:21
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   renamable $w19 = LDRWui $sp, 22, debug-location !1610 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w19
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$x0
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, 0, debug-location !1612; cg.c:757:21
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$x0
  Successors:
    ExitSU: Ord  Latency=1 Artificial
SU(3):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !1612; cg.c:757:21
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w19
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   BL @printf, <regmask $fp $lr $w19 $w20 $w29 $w30 $x19 $x20 $w19_w20 $w29_w30 $fp_lr $x19_x20>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def dead $w8, debug-location !1612; cg.c:757:21
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $w19 = LDRWui $sp, 22, debug-location !1610 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $x0 = ADRP target-flags(aarch64-page) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, 0, debug-location !1612; cg.c:757:21
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $w1 = ORRWrs $wzr, $w19, 0, debug-location !1612; cg.c:757:21
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.42 ***
SU(0):   renamable $w19 = LDRWui $sp, 22, debug-location !1610 :: (dereferenceable load 4 from %ir.i); cg.c:757:64
SU(1):   $x0 = ADRP target-flags(aarch64-page) @cg__str_39_internal_e, debug-location !1612; cg.c:757:21
SU(2):   $x0 = ADDXri $x0, target-flags(aarch64-pageoff, aarch64-nc) @cg__str_39_internal_e, 0, debug-location !1612; cg.c:757:21
SU(3):   $w1 = ORRWrs $wzr, $w19, 0, debug-location !1612; cg.c:757:21

Fixup kills for %bb.42
********** MI Scheduling **********
sparse:%bb.43 if.end186
  From: renamable $x8 = LDRSWui $sp, 17, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
    To: B %bb.25
 RegionInstrs: 10
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 17, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(6): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDURXi $fp, -32, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(6): Data Latency=4 Reg=$x16
    SU(3): Data Latency=4 Reg=$x16
    SU(6): Ord  Latency=0 Memory
SU(2):   renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !1614; cg.c:761:24
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$d0
    SU(7): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
SU(4):   renamable $d1 = LDRDui $sp, 3, debug-location !1616 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(5): Data Latency=4 Reg=$d1
    SU(6): Ord  Latency=0 Memory
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1617; cg.c:761:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(3): Data Latency=4 Reg=$d0
    SU(3): Out  Latency=1
    SU(4): Data Latency=4 Reg=$d1
  Successors:
    SU(6): Data Latency=1 Reg=$d0
SU(6):   STRDroX renamable $d0, renamable $x16, renamable $x8, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  # preds left       : 7
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(5): Data Latency=1 Reg=$d0
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x16
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(7): Anti Latency=0
    SU(9): Ord  Latency=0 Memory
    SU(7): Ord  Latency=1 Memory
SU(7):   renamable $w8 = LDRWui $sp, 15, debug-location !1621 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  # preds left       : 4
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w8
    SU(9): Ord  Latency=0 Memory
SU(8):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1621; cg.c:713:51
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
  Successors:
    SU(9): Data Latency=1 Reg=$w8
SU(9):   STRWui renamable $w8, $sp, 15, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=$w8
    SU(7): Ord  Latency=0 Memory
    SU(6): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
ExitSU:   B %bb.25
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 17, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 16
  Cand SU(4) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDURXi $fp, -32, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $d1 = LDRDui $sp, 3, debug-location !1616 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !1614; cg.c:761:24
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1617; cg.c:761:29
  Ready @9c
  TopQ.A TopLatency SU(5) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRDroX renamable $d0, renamable $x16, renamable $x8, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
  Ready @10c
  TopQ.A TopLatency SU(6) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w8 = LDRWui $sp, 15, debug-location !1621 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
  Ready @11c
  TopQ.A TopLatency SU(7) 11c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1621; cg.c:713:51
  Ready @15c
  TopQ.A TopLatency SU(8) 15c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 9
  Executed: 16c
  Critical: 9c, 9 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) STRWui renamable $w8, $sp, 15, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51
  Ready @16c
  TopQ.A TopLatency SU(9) 16c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 10
  Executed: 17c
  Critical: 10c, 10 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.43 ***
SU(0):   renamable $x8 = LDRSWui $sp, 17, debug-location !1615 :: (dereferenceable load 4 from %ir.k); cg.c:761:26
SU(1):   renamable $x16 = LDURXi $fp, -32, debug-location !1614 :: (dereferenceable load 8 from %ir.a.addr); cg.c:761:24
SU(4):   renamable $d1 = LDRDui $sp, 3, debug-location !1616 :: (dereferenceable load 8 from %ir.va); cg.c:761:31
SU(2):   renamable $x8 = UBFMXri renamable $x8, 61, 60, debug-location !1614; cg.c:761:24
SU(3):   renamable $d0 = LDRDroX renamable $x16, renamable $x8, 0, 0, debug-location !1614 :: (load 8 from %ir.arrayidx188); cg.c:761:24
SU(5):   renamable $d0 = FADDDrr renamable $d0, renamable $d1, debug-location !1617; cg.c:761:29
SU(6):   STRDroX renamable $d0, renamable $x16, renamable $x8, 0, 0, debug-location !1620 :: (store 8 into %ir.arrayidx191); cg.c:761:22
SU(7):   renamable $w8 = LDRWui $sp, 15, debug-location !1621 :: (dereferenceable load 4 from %ir.nzrow); cg.c:713:51
SU(8):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1621; cg.c:713:51
SU(9):   STRWui renamable $w8, $sp, 15, debug-location !1621 :: (store 4 into %ir.nzrow); cg.c:713:51

Fixup kills for %bb.43
********** MI Scheduling **********
sparse:%bb.44 if.else165
  From: renamable $x8 = LDURXi $fp, -40, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
    To: Bcc 1, %bb.46, implicit $nzcv, debug-location !1592; cg.c:747:30
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -40, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDRSWui $sp, 17, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(4): Data Latency=4 Reg=$w8
    SU(3): Anti Latency=0
SU(3):   renamable $w16 = LDRWui $sp, 14, debug-location !1590 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w16
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1592; cg.c:747:30
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=$w16
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 1, %bb.46, implicit $nzcv, debug-location !1592; cg.c:747:30
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -40, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 17, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w16 = LDRWui $sp, 14, debug-location !1590 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
  Ready @6c
  TopQ.A BotLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1592; cg.c:747:30
  Ready @10c
  TopQ.A TopLatency SU(4) 8c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.44 ***
SU(0):   renamable $x8 = LDURXi $fp, -40, debug-location !1587 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:747:30
SU(1):   renamable $x16 = LDRSWui $sp, 17, debug-location !1589 :: (dereferenceable load 4 from %ir.k); cg.c:747:37
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1587 :: (load 4 from %ir.arrayidx167); cg.c:747:30
SU(3):   renamable $w16 = LDRWui $sp, 14, debug-location !1590 :: (dereferenceable load 4 from %ir.jcol); cg.c:747:43
SU(4):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1592; cg.c:747:30

Fixup kills for %bb.44
********** MI Scheduling **********
sparse:%bb.45 if.then170
  From: renamable $x8 = LDRSWui $sp, 21, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
    To: B %bb.40
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 21, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(5): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDRXui $fp, 7, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(5): Data Latency=4 Reg=$x16
    SU(3): Data Latency=4 Reg=$x16
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1593; cg.c:751:36
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 6
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
SU(3):   renamable $w17 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1593 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 5
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w17
    SU(5): Ord  Latency=0 Memory
SU(4):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1596; cg.c:751:45
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 1
  Predecessors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w17
  Successors:
    SU(5): Data Latency=1 Reg=$w17
SU(5):   STRWroX renamable $w17, renamable $x16, renamable $x8, 0, 0, debug-location !1599 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w17
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x16
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.40
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 10
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 10
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 21, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
  Ready @0c
  TopQ.A BotLatency SU(0) 10c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRXui $fp, 7, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1593; cg.c:751:36
  Ready @4c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 3
  Executed: 5c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w17 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1593 :: (load 4 from %ir.arrayidx172); cg.c:751:36
  Ready @5c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1596; cg.c:751:45
  Ready @9c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 5
  Executed: 10c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWroX renamable $w17, renamable $x16, renamable $x8, 0, 0, debug-location !1599 :: (store 4 into %ir.arrayidx175); cg.c:751:34
  Ready @10c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 6
  Executed: 11c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.45 ***
SU(0):   renamable $x8 = LDRSWui $sp, 21, debug-location !1595 :: (dereferenceable load 4 from %ir.j); cg.c:751:42
SU(1):   renamable $x16 = LDRXui $fp, 7, debug-location !1593 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:751:36
SU(2):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1593; cg.c:751:36
SU(3):   renamable $w17 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1593 :: (load 4 from %ir.arrayidx172); cg.c:751:36
SU(4):   renamable $w17 = nsw ADDWri renamable $w17, 1, 0, debug-location !1596; cg.c:751:45
SU(5):   STRWroX renamable $w17, renamable $x16, renamable $x8, 0, 0, debug-location !1599 :: (store 4 into %ir.arrayidx175); cg.c:751:34

Fixup kills for %bb.45
********** MI Scheduling **********
sparse:%bb.46 for.inc179
  From: renamable $w8 = LDRWui $sp, 17, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
    To: B %bb.30
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 17, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 4
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1602; cg.c:726:57
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
ExitSU:   B %bb.30
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 4
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 17, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
  Ready @0c
  TopQ.A BotLatency SU(0) 4c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1602; cg.c:726:57
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.46 ***
SU(0):   renamable $w8 = LDRWui $sp, 17, debug-location !1602 :: (dereferenceable load 4 from %ir.k); cg.c:726:57
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1602; cg.c:726:57

Fixup kills for %bb.46
********** MI Scheduling **********
sparse:%bb.47 for.inc195
  From: renamable $w8 = LDRWui $sp, 18, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
    To: B %bb.23
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 18, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1625; cg.c:709:41
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 18, debug-location !1625 :: (store 4 into %ir.nza); cg.c:709:41
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.23
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 18, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1625; cg.c:709:41
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 18, debug-location !1625 :: (store 4 into %ir.nza); cg.c:709:41
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.47 ***
SU(0):   renamable $w8 = LDRWui $sp, 18, debug-location !1625 :: (dereferenceable load 4 from %ir.nza); cg.c:709:41
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1625; cg.c:709:41
SU(2):   STRWui renamable $w8, $sp, 18, debug-location !1625 :: (store 4 into %ir.nza); cg.c:709:41

Fixup kills for %bb.47
********** MI Scheduling **********
sparse:%bb.48 for.end197
  From: renamable $d0 = LDRDui $sp, 6, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
    To: B %bb.21
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $d0 = LDRDui $sp, 6, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$d0
    SU(5): Ord  Latency=0 Memory
SU(1):   renamable $d1 = LDRDui $sp, 4, debug-location !1630 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$d1
SU(2):   renamable $w8 = LDRWui $sp, 22, debug-location !1633 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w8
    SU(6): Ord  Latency=0 Memory
SU(3):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1631; cg.c:764:21
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$d1
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$d0
  Successors:
    SU(5): Data Latency=1 Reg=$d0
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1633; cg.c:708:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    SU(6): Data Latency=1 Reg=$w8
SU(5):   STRDui renamable $d0, $sp, 6, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$d0
    SU(0): Ord  Latency=0 Memory
SU(6):   STRWui renamable $w8, $sp, 22, debug-location !1633 :: (store 4 into %ir.i); cg.c:708:25
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=$w8
    SU(2): Ord  Latency=0 Memory
ExitSU:   B %bb.21
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $d0 = LDRDui $sp, 6, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 5
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $d1 = LDRDui $sp, 4, debug-location !1630 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWui $sp, 22, debug-location !1633 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 4 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1631; cg.c:764:21
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 5
  Cand SU(5) ORDER                              
  Cand SU(4) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(4) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1633; cg.c:708:25
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 6 
  TopQ.A RemainingLatency 0 + 7c > CritPath 5
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) STRDui renamable $d0, $sp, 6, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
  Ready @7c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 6
  Executed: 8c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) STRWui renamable $w8, $sp, 22, debug-location !1633 :: (store 4 into %ir.i); cg.c:708:25
  Ready @8c
  *** Max MOps 1 at cycle 8
Cycle: 9 TopQ.A
TopQ.A @9c
  Retired: 7
  Executed: 9c
  Critical: 7c, 7 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.48 ***
SU(0):   renamable $d0 = LDRDui $sp, 6, debug-location !1629 :: (dereferenceable load 8 from %ir.size); cg.c:764:16
SU(1):   renamable $d1 = LDRDui $sp, 4, debug-location !1630 :: (dereferenceable load 8 from %ir.ratio); cg.c:764:23
SU(2):   renamable $w8 = LDRWui $sp, 22, debug-location !1633 :: (dereferenceable load 4 from %ir.i); cg.c:708:25
SU(3):   renamable $d0 = FMULDrr renamable $d0, renamable $d1, debug-location !1631; cg.c:764:21
SU(4):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1633; cg.c:708:25
SU(5):   STRDui renamable $d0, $sp, 6, debug-location !1632 :: (store 8 into %ir.size); cg.c:764:14
SU(6):   STRWui renamable $w8, $sp, 22, debug-location !1633 :: (store 4 into %ir.i); cg.c:708:25

Fixup kills for %bb.48
Fixup kills for %bb.49
********** MI Scheduling **********
sparse:%bb.50 for.cond202
  From: STRWui renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1638) :: (store 4 into %ir.j); cg.c:0
    To: Bcc 10, %bb.52, implicit $nzcv, debug-location !1644; cg.c:770:5
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1638) :: (store 4 into %ir.j); cg.c:0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1640; cg.c:770:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=$w8
SU(2):   renamable $w16 = LDURWi $fp, -84, debug-location !1642 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1644; cg.c:770:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.52, implicit $nzcv, debug-location !1644; cg.c:770:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  5 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $w16 = LDURWi $fp, -84, debug-location !1642 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
  Ready @0c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1638) :: (store 4 into %ir.j); cg.c:0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1640; cg.c:770:17
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1644; cg.c:770:5
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.50 ***
SU(2):   renamable $w16 = LDURWi $fp, -84, debug-location !1642 :: (dereferenceable load 4 from %ir.nrows); cg.c:770:21
SU(0):   STRWui renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1638) :: (store 4 into %ir.j); cg.c:0
SU(1):   $w8 = ORRWrs $wzr, renamable $w8, 0, debug-location !1640; cg.c:770:17
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1644; cg.c:770:5

Fixup kills for %bb.50
********** MI Scheduling **********
sparse:%bb.51 for.body205
  From: renamable $x8 = LDRXui $fp, 7, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
    To: B %bb.50
 RegionInstrs: 8
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRXui $fp, 7, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(5): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(3): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
    SU(5): Ord  Latency=0 Memory
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1645; cg.c:771:20
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 11
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(3): Data Latency=1 Reg=$x8
    SU(3): Anti Latency=0
SU(3):   renamable $w17, renamable $w16 = LDPWi renamable $x8, -1, debug-location !1645 :: (load 4 from %ir.arrayidx207), (load 4 from %ir.arrayidx210); cg.c:771:20
  # preds left       : 3
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(2): Data Latency=1 Reg=$x8
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=$w17
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$w16
    SU(6): Anti Latency=0
    SU(5): Ord  Latency=0 Memory
SU(4):   $w16 = ADDWrs renamable $w16, renamable $w17, 0, debug-location !1651; cg.c:771:29
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 6
  Predecessors:
    SU(3): Data Latency=4 Reg=$w17
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w16
  Successors:
    SU(5): Data Latency=1 Reg=$w16
SU(5):   STRWui renamable $w16, renamable $x8, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 5
  Predecessors:
    SU(4): Data Latency=1 Reg=$w16
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=$x8
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(6): Anti Latency=0
    SU(6): Ord  Latency=1 Memory
SU(6):   renamable $w8 = LDRWui $sp, 21, debug-location !1655 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 11
  Height             : 4
  Predecessors:
    SU(5): Anti Latency=0
    SU(5): Ord  Latency=1 Memory
    SU(3): Anti Latency=0
    SU(2): Out  Latency=1
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1655; cg.c:770:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 0
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
ExitSU:   B %bb.50
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 15
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 15
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDRXui $fp, 7, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
  Ready @0c
  TopQ.A BotLatency SU(0) 15c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDRSWui $sp, 21, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
  Ready @1c
  TopQ.A BotLatency SU(1) 15c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1645; cg.c:771:20
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w17, renamable $w16 = LDPWi renamable $x8, -1, debug-location !1645 :: (load 4 from %ir.arrayidx207), (load 4 from %ir.arrayidx210); cg.c:771:20
  Ready @6c
  TopQ.A TopLatency SU(3) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 10 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $w16 = ADDWrs renamable $w16, renamable $w17, 0, debug-location !1651; cg.c:771:29
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) STRWui renamable $w16, renamable $x8, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
  Ready @11c
  TopQ.A TopLatency SU(5) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = LDRWui $sp, 21, debug-location !1655 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
  Ready @12c
  TopQ.A TopLatency SU(6) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 7
  Executed: 13c
  Critical: 7c, 7 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 16 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1655; cg.c:770:29
  Ready @16c
  TopQ.A TopLatency SU(7) 15c
  *** Max MOps 1 at cycle 16
Cycle: 17 TopQ.A
TopQ.A @17c
  Retired: 8
  Executed: 17c
  Critical: 8c, 8 MOps
  ExpectedLatency: 15c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.51 ***
SU(0):   renamable $x8 = LDRXui $fp, 7, debug-location !1645 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:771:20
SU(1):   renamable $x16 = LDRSWui $sp, 21, debug-location !1647 :: (dereferenceable load 4 from %ir.j); cg.c:771:26
SU(2):   renamable $x8 = ADDXrs renamable $x8, renamable $x16, 2, debug-location !1645; cg.c:771:20
SU(3):   renamable $w17, renamable $w16 = LDPWi renamable $x8, -1, debug-location !1645 :: (load 4 from %ir.arrayidx207), (load 4 from %ir.arrayidx210); cg.c:771:20
SU(4):   $w16 = ADDWrs renamable $w16, renamable $w17, 0, debug-location !1651; cg.c:771:29
SU(5):   STRWui renamable $w16, renamable $x8, 0, debug-location !1654 :: (store 4 into %ir.arrayidx213); cg.c:771:18
SU(6):   renamable $w8 = LDRWui $sp, 21, debug-location !1655 :: (dereferenceable load 4 from %ir.j); cg.c:770:29
SU(7):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1655; cg.c:770:29

Fixup kills for %bb.51
Fixup kills for %bb.52
********** MI Scheduling **********
sparse:%bb.53 for.cond217
  From: renamable $w8 = LDRWui $sp, 21, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
    To: Bcc 10, %bb.61, implicit $nzcv, debug-location !1666; cg.c:774:5
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 21, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w8
SU(1):   renamable $w16 = LDURWi $fp, -84, debug-location !1664 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=4 Reg=$w16
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1666; cg.c:774:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(1): Data Latency=4 Reg=$w16
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.61, implicit $nzcv, debug-location !1666; cg.c:774:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 5
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 21, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w16 = LDURWi $fp, -84, debug-location !1664 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1666; cg.c:774:5
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.53 ***
SU(0):   renamable $w8 = LDRWui $sp, 21, debug-location !1662 :: (dereferenceable load 4 from %ir.j); cg.c:774:17
SU(1):   renamable $w16 = LDURWi $fp, -84, debug-location !1664 :: (dereferenceable load 4 from %ir.nrows); cg.c:774:21
SU(2):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1666; cg.c:774:5

Fixup kills for %bb.53
********** MI Scheduling **********
sparse:%bb.54 for.body220
  From: renamable $w8 = LDRWui $sp, 21, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
    To: Bcc 11, %bb.56, implicit $nzcv, debug-location !1671; cg.c:775:13
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 21, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Data Latency=4 Reg=$w8
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1671; cg.c:775:13
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 11, %bb.56, implicit $nzcv, debug-location !1671; cg.c:775:13
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 21, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1671; cg.c:775:13
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.54 ***
SU(0):   renamable $w8 = LDRWui $sp, 21, debug-location !1667 :: (dereferenceable load 4 from %ir.j); cg.c:775:13
SU(1):   dead $wzr = SUBSWri renamable $w8, 1, 0, implicit-def $nzcv, debug-location !1671; cg.c:775:13

Fixup kills for %bb.54
********** MI Scheduling **********
sparse:%bb.55 if.then223
  From: renamable $x8 = LDRSWui $sp, 21, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
    To: B %bb.57
 RegionInstrs: 9
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 21, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 11
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDURXi $fp, -48, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x16
SU(2):   renamable $x17 = LDRXui $fp, 7, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 10
  Successors:
    SU(5): Data Latency=4 Reg=$x17
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1672; cg.c:776:18
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 7
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $w16 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    SU(7): Data Latency=4 Reg=$w16
    SU(5): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
SU(5):   $x8 = ADDXrs renamable $x8, renamable $x17, 0, debug-location !1675; cg.c:776:30
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 6
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=4 Reg=$x17
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x8
SU(6):   renamable $w8 = LDURWi renamable $x8, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 5
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(8): Ord  Latency=0 Memory
SU(7):   $w8 = SUBWrs renamable $w16, renamable $w8, 0, debug-location !1678; cg.c:776:28
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 1
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w8
    SU(4): Data Latency=4 Reg=$w16
  Successors:
    SU(8): Data Latency=1 Reg=$w8
SU(8):   STRWui renamable $w8, $sp, 20, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
ExitSU:   B %bb.57
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 11
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 11
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 21, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
  Ready @0c
  TopQ.A BotLatency SU(0) 11c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 11
  Cand SU(2) ORDER                              
  Cand SU(1) ORDER                              
Pick Top ORDER     
Scheduling SU(1) renamable $x16 = LDURXi $fp, -48, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x17 = LDRXui $fp, 7, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
  Ready @2c
  TopQ.A BotLatency SU(2) 10c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1672; cg.c:776:18
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) renamable $w16 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x8 = ADDXrs renamable $x8, renamable $x17, 0, debug-location !1675; cg.c:776:30
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w8 = LDURWi renamable $x8, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
  Ready @7c
  TopQ.A TopLatency SU(6) 6c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w8 = SUBWrs renamable $w16, renamable $w8, 0, debug-location !1678; cg.c:776:28
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w8, $sp, 20, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16
  Ready @12c
  TopQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.55 ***
SU(0):   renamable $x8 = LDRSWui $sp, 21, debug-location !1674 :: (dereferenceable load 4 from %ir.j); cg.c:776:25
SU(1):   renamable $x16 = LDURXi $fp, -48, debug-location !1672 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:776:18
SU(2):   renamable $x17 = LDRXui $fp, 7, debug-location !1675 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:776:30
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1672; cg.c:776:18
SU(4):   renamable $w16 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1672 :: (load 4 from %ir.arrayidx225); cg.c:776:18
SU(5):   $x8 = ADDXrs renamable $x8, renamable $x17, 0, debug-location !1675; cg.c:776:30
SU(6):   renamable $w8 = LDURWi renamable $x8, -4, debug-location !1675 :: (load 4 from %ir.arrayidx228); cg.c:776:30
SU(7):   $w8 = SUBWrs renamable $w16, renamable $w8, 0, debug-location !1678; cg.c:776:28
SU(8):   STRWui renamable $w8, $sp, 20, debug-location !1679 :: (store 4 into %ir.j1); cg.c:776:16

Fixup kills for %bb.55
Fixup kills for %bb.56
********** MI Scheduling **********
sparse:%bb.57 if.end231
  From: renamable $x8 = LDRSWui $sp, 21, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
    To: End RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 21, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
SU(1):   renamable $x16 = LDURXi $fp, -48, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(4): Out  Latency=1
    SU(4): Data Latency=4 Reg=$x16
SU(2):   renamable $x17 = LDRXui $fp, 7, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(6): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x17
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1690; cg.c:782:15
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
SU(4):   $x16 = ADDXrs renamable $x8, renamable $x16, 0, debug-location !1683; cg.c:781:14
  # preds left       : 3
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    SU(10): Out  Latency=1
    SU(9): Data Latency=1 Reg=$x16
    SU(6): Data Latency=1 Reg=$x16
    SU(5): Anti Latency=0
SU(5):   renamable $w8 = LDRWroX renamable $x17, renamable $x8, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Data Latency=4 Reg=$x17
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w8
    SU(6): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
SU(6):   renamable $w17 = LDRWui renamable $x16, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(5): Anti Latency=0
    SU(4): Data Latency=1 Reg=$x16
    SU(2): Out  Latency=1
  Successors:
    SU(7): Data Latency=4 Reg=$w17
    SU(10): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
SU(7):   $w8 = SUBWrs renamable $w17, renamable $w8, 0, debug-location !1688; cg.c:781:28
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(6): Data Latency=4 Reg=$w17
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$w8
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$w8
SU(8):   STRWui renamable $w8, $sp, 19, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=$w8
    SU(6): Ord  Latency=0 Memory
    SU(5): Ord  Latency=0 Memory
  Successors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
SU(9):   renamable $w8 = LDRWui renamable $x16, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
    SU(7): Out  Latency=1
    SU(4): Data Latency=1 Reg=$x16
  Successors:
    ExitSU: Ord  Latency=4 Artificial
    SU(10): Anti Latency=0
SU(10):   renamable $w16 = LDRWui $sp, 20, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(9): Anti Latency=0
    SU(6): Anti Latency=0
    SU(4): Out  Latency=1
  Successors:
    ExitSU: Ord  Latency=4 Artificial
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 21, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 16
  Cand SU(2) ORDER                              
  Cand SU(1) TOP-PATH                  15 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDURXi $fp, -48, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $x17 = LDRXui $fp, 7, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1690; cg.c:782:15
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $x16 = ADDXrs renamable $x8, renamable $x16, 0, debug-location !1683; cg.c:781:14
  Ready @5c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $w8 = LDRWroX renamable $x17, renamable $x8, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w17 = LDRWui renamable $x16, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
  Ready @7c
  TopQ.A TopLatency SU(6) 6c
  TopQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w8 = SUBWrs renamable $w17, renamable $w8, 0, debug-location !1688; cg.c:781:28
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWui renamable $w8, $sp, 19, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
  Ready @12c
  TopQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w8 = LDRWui renamable $x16, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
  Ready @13c
  TopQ.A TopLatency SU(9) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w16 = LDRWui $sp, 20, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18
  Ready @14c
  TopQ.A BotLatency SU(10) 4c
  *** Max MOps 1 at cycle 14
Cycle: 15 TopQ.A
TopQ.A @15c
  Retired: 11
  Executed: 15c
  Critical: 11c, 11 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.57 ***
SU(0):   renamable $x8 = LDRSWui $sp, 21, debug-location !1684 :: (dereferenceable load 4 from %ir.j); cg.c:781:21
SU(1):   renamable $x16 = LDURXi $fp, -48, debug-location !1683 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:781:14
SU(2):   renamable $x17 = LDRXui $fp, 7, debug-location !1686 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:781:30
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1690; cg.c:782:15
SU(4):   $x16 = ADDXrs renamable $x8, renamable $x16, 0, debug-location !1683; cg.c:781:14
SU(5):   renamable $w8 = LDRWroX renamable $x17, renamable $x8, 0, 0, debug-location !1686 :: (load 4 from %ir.arrayidx236); cg.c:781:30
SU(6):   renamable $w17 = LDRWui renamable $x16, 1, debug-location !1683 :: (load 4 from %ir.arrayidx234); cg.c:781:14
SU(7):   $w8 = SUBWrs renamable $w17, renamable $w8, 0, debug-location !1688; cg.c:781:28
SU(8):   STRWui renamable $w8, $sp, 19, debug-location !1689 :: (store 4 into %ir.j2); cg.c:781:12
SU(9):   renamable $w8 = LDRWui renamable $x16, 0, debug-location !1690 :: (load 4 from %ir.arrayidx239); cg.c:782:15
SU(10):   renamable $w16 = LDRWui $sp, 20, debug-location !1693 :: (dereferenceable load 4 from %ir.j1); cg.c:783:18

Fixup kills for %bb.57
********** MI Scheduling **********
sparse:%bb.58 for.cond240
  From: STPWi renamable $w16, renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1669) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
    To: Bcc 10, %bb.60, implicit $nzcv, debug-location !1701; cg.c:783:9
 RegionInstrs: 4
ScheduleDAGMI::schedule starting
SU(0):   STPWi renamable $w16, renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1669) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Anti Latency=0
    SU(1): Anti Latency=0
SU(1):   $w8 = ORRWrs $wzr, renamable $w16, 0, debug-location !1697; cg.c:783:22
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(3): Data Latency=1 Reg=$w8
    SU(2): Anti Latency=0
SU(2):   renamable $w16 = LDRWui $sp, 19, debug-location !1699 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Anti Latency=0
  Successors:
    SU(3): Data Latency=4 Reg=$w16
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1701; cg.c:783:9
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(2): Data Latency=4 Reg=$w16
    SU(1): Data Latency=1 Reg=$w8
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.60, implicit $nzcv, debug-location !1701; cg.c:783:9
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STPWi renamable $w16, renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1669) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $w8 = ORRWrs $wzr, renamable $w16, 0, debug-location !1697; cg.c:783:22
  Ready @1c
  TopQ.A BotLatency SU(1) 5c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui $sp, 19, debug-location !1699 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
  Ready @2c
  TopQ.A BotLatency SU(2) 5c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 6 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1701; cg.c:783:9
  Ready @6c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 4
  Executed: 7c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.58 ***
SU(0):   STPWi renamable $w16, renamable $w8, $sp, 17, debug-location !DILocation(line: 0, scope: !1669) :: (store 4 into %ir.nza), (store 4 into %ir.k); cg.c:0
SU(1):   $w8 = ORRWrs $wzr, renamable $w16, 0, debug-location !1697; cg.c:783:22
SU(2):   renamable $w16 = LDRWui $sp, 19, debug-location !1699 :: (dereferenceable load 4 from %ir.j2); cg.c:783:26
SU(3):   $wzr = SUBSWrs renamable $w8, renamable $w16, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1701; cg.c:783:9

Fixup kills for %bb.58
********** MI Scheduling **********
sparse:%bb.59 for.body243
  From: renamable $x8 = LDURXi $fp, -32, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
    To: B %bb.58
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -32, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(4): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
    SU(2): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(1):   renamable $x17, renamable $x16 = LDPSWi $sp, 17, debug-location !1704 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:784:22
  # preds left       : 0
  # succs left       : 6
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 22
  Successors:
    SU(5): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x17
    SU(5): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x16
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(2):   renamable $d0 = LDRDroX renamable $x8, renamable $x16, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  # preds left       : 2
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 18
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Data Latency=4 Reg=$d0
    SU(4): Anti Latency=0
    SU(5): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
SU(3):   STRDroX renamable $d0, renamable $x8, renamable $x17, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  # preds left       : 6
  # succs left       : 7
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 14
  Predecessors:
    SU(2): Data Latency=4 Reg=$d0
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x17
    SU(1): Ord  Latency=0 Memory
    SU(0): Data Latency=4 Reg=$x8
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(4): Anti Latency=0
    SU(5): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
    SU(8): Ord  Latency=1 Memory
    SU(5): Ord  Latency=1 Memory
    SU(6): Ord  Latency=1 Memory
    SU(4): Ord  Latency=1 Memory
SU(4):   renamable $x8 = LDURXi $fp, -40, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(2): Anti Latency=0
    SU(0): Out  Latency=1
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$x8
    SU(6): Data Latency=4 Reg=$x8
    SU(7): Ord  Latency=0 Memory
SU(5):   renamable $x17, renamable $x16 = LDPSWi $sp, 17, debug-location !1709 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:785:32
  # preds left       : 5
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 13
  Predecessors:
    SU(3): Anti Latency=0
    SU(3): Ord  Latency=1 Memory
    SU(2): Anti Latency=0
    SU(1): Out  Latency=1
    SU(1): Out  Latency=1
  Successors:
    SU(7): Data Latency=4 Reg=$x17
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$x16
    SU(7): Ord  Latency=0 Memory
SU(6):   renamable $w16 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  # preds left       : 4
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 13
  Height             : 9
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x16
    SU(4): Data Latency=4 Reg=$x8
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(8): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w16
    SU(8): Anti Latency=0
    SU(7): Ord  Latency=0 Memory
SU(7):   STRWroX renamable $w16, renamable $x8, renamable $x17, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  # preds left       : 10
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 17
  Height             : 5
  Predecessors:
    SU(6): Data Latency=4 Reg=$w16
    SU(6): Ord  Latency=0 Memory
    SU(5): Data Latency=4 Reg=$x17
    SU(5): Ord  Latency=0 Memory
    SU(4): Data Latency=4 Reg=$x8
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(8): Anti Latency=0
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
SU(8):   renamable $w16, renamable $w8 = LDPWi $sp, 17, debug-location !1713 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:786:19
  # preds left       : 7
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 4
  Depth              : 18
  Height             : 4
  Predecessors:
    SU(7): Anti Latency=0
    SU(7): Anti Latency=0
    SU(7): Ord  Latency=1 Memory
    SU(6): Out  Latency=1
    SU(6): Anti Latency=0
    SU(4): Out  Latency=1
    SU(3): Ord  Latency=1 Memory
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w16
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w8
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1714; cg.c:786:23
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w8
SU(10):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1716; cg.c:783:31
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 22
  Height             : 0
  Predecessors:
    SU(8): Out  Latency=1
    SU(8): Data Latency=4 Reg=$w16
ExitSU:   B %bb.58
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 22
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 
  TopQ.A RemainingLatency 0 + 0c > CritPath 22
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) renamable $x8 = LDURXi $fp, -32, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
  Ready @0c
  TopQ.A BotLatency SU(0) 22c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x17, renamable $x16 = LDPSWi $sp, 17, debug-location !1704 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:784:22
  Ready @1c
  TopQ.A BotLatency SU(1) 22c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $d0 = LDRDroX renamable $x8, renamable $x16, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) STRDroX renamable $d0, renamable $x8, renamable $x17, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
  Ready @9c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 4
  Executed: 10c
  Critical: 4c, 4 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 4 
  TopQ.A RemainingLatency 0 + 10c > CritPath 22
  Cand SU(5) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $x8 = LDURXi $fp, -40, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 5
  Executed: 11c
  Critical: 5c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) renamable $x17, renamable $x16 = LDPSWi $sp, 17, debug-location !1709 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:785:32
  Ready @11c
  TopQ.A BotLatency SU(5) 13c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 6
  Executed: 12c
  Critical: 6c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 15 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w16 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
  Ready @15c
  TopQ.A TopLatency SU(6) 13c
  *** Max MOps 1 at cycle 15
Cycle: 16 TopQ.A
TopQ.A @16c
  Retired: 7
  Executed: 16c
  Critical: 7c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 19 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) STRWroX renamable $w16, renamable $x8, renamable $x17, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
  Ready @19c
  TopQ.A TopLatency SU(7) 17c
  *** Max MOps 1 at cycle 19
Cycle: 20 TopQ.A
TopQ.A @20c
  Retired: 8
  Executed: 20c
  Critical: 8c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) renamable $w16, renamable $w8 = LDPWi $sp, 17, debug-location !1713 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:786:19
  Ready @20c
  TopQ.A TopLatency SU(8) 18c
  *** Max MOps 1 at cycle 20
Cycle: 21 TopQ.A
TopQ.A @21c
  Retired: 9
  Executed: 21c
  Critical: 9c, 9 MOps
  ExpectedLatency: 18c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 24 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 10 9 
  TopQ.A RemainingLatency 0 + 24c > CritPath 22
  Cand SU(10) ORDER                              
  Cand SU(9) ORDER                              
Pick Top ORDER     
Scheduling SU(9) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1714; cg.c:786:23
  Ready @24c
  TopQ.A TopLatency SU(9) 22c
  *** Max MOps 1 at cycle 24
Cycle: 25 TopQ.A
TopQ.A @25c
  Retired: 10
  Executed: 25c
  Critical: 10c, 10 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1716; cg.c:783:31
  Ready @25c
  *** Max MOps 1 at cycle 25
Cycle: 26 TopQ.A
TopQ.A @26c
  Retired: 11
  Executed: 26c
  Critical: 11c, 11 MOps
  ExpectedLatency: 22c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.59 ***
SU(0):   renamable $x8 = LDURXi $fp, -32, debug-location !1702 :: (dereferenceable load 8 from %ir.a.addr); cg.c:784:20
SU(1):   renamable $x17, renamable $x16 = LDPSWi $sp, 17, debug-location !1704 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:784:22
SU(2):   renamable $d0 = LDRDroX renamable $x8, renamable $x16, 0, 1, debug-location !1702 :: (load 8 from %ir.arrayidx245); cg.c:784:20
SU(3):   STRDroX renamable $d0, renamable $x8, renamable $x17, 0, 1, debug-location !1707 :: (store 8 into %ir.arrayidx247); cg.c:784:18
SU(4):   renamable $x8 = LDURXi $fp, -40, debug-location !1708 :: (dereferenceable load 8 from %ir.colidx.addr); cg.c:785:25
SU(5):   renamable $x17, renamable $x16 = LDPSWi $sp, 17, debug-location !1709 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:785:32
SU(6):   renamable $w16 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1708 :: (load 4 from %ir.arrayidx249); cg.c:785:25
SU(7):   STRWroX renamable $w16, renamable $x8, renamable $x17, 0, 1, debug-location !1712 :: (store 4 into %ir.arrayidx251); cg.c:785:23
SU(8):   renamable $w16, renamable $w8 = LDPWi $sp, 17, debug-location !1713 :: (dereferenceable load 4 from %ir.nza), (dereferenceable load 4 from %ir.k); cg.c:786:19
SU(9):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1714; cg.c:786:23
SU(10):   renamable $w16 = nsw ADDWri renamable $w16, 1, 0, debug-location !1716; cg.c:783:31

Fixup kills for %bb.59
********** MI Scheduling **********
sparse:%bb.60 for.inc256
  From: renamable $w8 = LDRWui $sp, 21, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
    To: B %bb.53
 RegionInstrs: 3
ScheduleDAGMI::schedule starting
SU(0):   renamable $w8 = LDRWui $sp, 21, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 5
  Successors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1720; cg.c:774:29
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$w8
  Successors:
    SU(2): Data Latency=1 Reg=$w8
SU(2):   STRWui renamable $w8, $sp, 21, debug-location !1720 :: (store 4 into %ir.j); cg.c:774:29
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1 Reg=$w8
    SU(0): Ord  Latency=0 Memory
ExitSU:   B %bb.53
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 5
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) renamable $w8 = LDRWui $sp, 21, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
  Ready @0c
  TopQ.A BotLatency SU(0) 5c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1720; cg.c:774:29
  Ready @4c
  TopQ.A TopLatency SU(1) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 2
  Executed: 5c
  Critical: 2c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) STRWui renamable $w8, $sp, 21, debug-location !1720 :: (store 4 into %ir.j); cg.c:774:29
  Ready @5c
  TopQ.A TopLatency SU(2) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 3
  Executed: 6c
  Critical: 3c, 3 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.60 ***
SU(0):   renamable $w8 = LDRWui $sp, 21, debug-location !1720 :: (dereferenceable load 4 from %ir.j); cg.c:774:29
SU(1):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1720; cg.c:774:29
SU(2):   STRWui renamable $w8, $sp, 21, debug-location !1720 :: (store 4 into %ir.j); cg.c:774:29

Fixup kills for %bb.60
Fixup kills for %bb.61
********** MI Scheduling **********
sparse:%bb.62 for.cond259
  From: STRWui killed renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1725) :: (store 4 into %ir.j); cg.c:0
    To: Bcc 10, %bb.64, implicit $nzcv, debug-location !1732; cg.c:789:5
 RegionInstrs: 5
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1725) :: (store 4 into %ir.j); cg.c:0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(1): Anti Latency=0
    SU(2): Ord  Latency=1 Memory
SU(1):   renamable $w8 = LDURWi $fp, -84, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 6
  Predecessors:
    SU(0): Anti Latency=0
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
SU(2):   renamable $w16 = LDRWui $sp, 21, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Ord  Latency=1 Memory
  Successors:
    SU(4): Data Latency=4 Reg=$w16
SU(3):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1730; cg.c:789:27
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1732; cg.c:789:5
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(2): Data Latency=4 Reg=$w16
  Successors:
    ExitSU: Ord  Latency=1 Artificial
ExitSU:   Bcc 10, %bb.64, implicit $nzcv, debug-location !1732; cg.c:789:5
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=1 Artificial
Critical Path: (PGS-RR) 6
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) STRWui renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1725) :: (store 4 into %ir.j); cg.c:0
  Ready @0c
  TopQ.A BotLatency SU(0) 6c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 2 
  TopQ.A RemainingLatency 0 + 1c > CritPath 6
  Cand SU(1) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(1) renamable $w8 = LDURWi $fp, -84, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
  Ready @1c
  TopQ.A BotLatency SU(1) 6c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w16 = LDRWui $sp, 21, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1730; cg.c:789:27
  Ready @5c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 4
  Executed: 6c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1732; cg.c:789:5
  Ready @6c
  TopQ.A TopLatency SU(4) 5c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 5
  Executed: 7c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.62 ***
SU(0):   STRWui renamable $w8, $sp, 21, debug-location !DILocation(line: 0, scope: !1725) :: (store 4 into %ir.j); cg.c:0
SU(1):   renamable $w8 = LDURWi $fp, -84, debug-location !1729 :: (dereferenceable load 4 from %ir.nrows); cg.c:789:21
SU(2):   renamable $w16 = LDRWui $sp, 21, debug-location !1727 :: (dereferenceable load 4 from %ir.j); cg.c:789:17
SU(3):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1730; cg.c:789:27
SU(4):   $wzr = SUBSWrs renamable $w16, renamable $w8, 0, implicit-def $nzcv, implicit-def $nzcv, debug-location !1732; cg.c:789:5

Fixup kills for %bb.62
********** MI Scheduling **********
sparse:%bb.63 for.body263
  From: renamable $x8 = LDRSWui $sp, 21, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
    To: B %bb.62
 RegionInstrs: 11
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDRSWui $sp, 21, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 16
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$x8
    SU(8): Ord  Latency=0 Memory
SU(1):   renamable $x16 = LDURXi $fp, -48, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Data Latency=4 Reg=$x16
    SU(4): Data Latency=4 Reg=$x16
    SU(8): Ord  Latency=0 Memory
SU(2):   renamable $x17 = LDRXui $fp, 7, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 15
  Successors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=4 Reg=$x17
    SU(8): Ord  Latency=0 Memory
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1733; cg.c:790:21
  # preds left       : 2
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(9): Out  Latency=1
    SU(8): Data Latency=1 Reg=$x8
    SU(5): Data Latency=1 Reg=$x8
    SU(4): Data Latency=1 Reg=$x8
SU(4):   renamable $w18 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 10
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
    SU(1): Data Latency=4 Reg=$x16
  Successors:
    SU(7): Data Latency=4 Reg=$w18
    SU(9): Anti Latency=0
    SU(8): Ord  Latency=0 Memory
SU(5):   $x17 = ADDXrs renamable $x8, renamable $x17, 0, debug-location !1736; cg.c:790:33
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x17
  Successors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=1 Reg=$x17
    SU(9): Anti Latency=0
SU(6):   renamable $w17 = LDURWi renamable $x17, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(5): Out  Latency=1
    SU(5): Data Latency=1 Reg=$x17
  Successors:
    SU(7): Out  Latency=1
    SU(7): Data Latency=4 Reg=$w17
    SU(8): Ord  Latency=0 Memory
SU(7):   $w17 = SUBWrs renamable $w18, renamable $w17, 0, debug-location !1739; cg.c:790:31
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(6): Out  Latency=1
    SU(6): Data Latency=4 Reg=$w17
    SU(4): Data Latency=4 Reg=$w18
  Successors:
    SU(8): Data Latency=1 Reg=$w17
SU(8):   STRWroX renamable $w17, renamable $x16, renamable $x8, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  # preds left       : 8
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(7): Data Latency=1 Reg=$w17
    SU(6): Ord  Latency=0 Memory
    SU(4): Ord  Latency=0 Memory
    SU(3): Data Latency=1 Reg=$x8
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=4 Reg=$x16
    SU(1): Ord  Latency=0 Memory
    SU(0): Ord  Latency=0 Memory
  Successors:
    SU(9): Anti Latency=0
    SU(9): Ord  Latency=1 Memory
SU(9):   renamable $w8 = LDRWui $sp, 21, debug-location !1743 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  # preds left       : 5
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(8): Anti Latency=0
    SU(8): Ord  Latency=1 Memory
    SU(5): Anti Latency=0
    SU(4): Anti Latency=0
    SU(3): Out  Latency=1
  Successors:
    SU(10): Out  Latency=1
    SU(10): Data Latency=4 Reg=$w8
SU(10):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1743; cg.c:789:33
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(9): Out  Latency=1
    SU(9): Data Latency=4 Reg=$w8
ExitSU:   B %bb.62
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 16
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 2 
  TopQ.A RemainingLatency 0 + 0c > CritPath 16
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDRSWui $sp, 21, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
  Ready @0c
  TopQ.A BotLatency SU(0) 16c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 2 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 16
  Cand SU(2) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(2) renamable $x17 = LDRXui $fp, 7, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 3 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) renamable $x16 = LDURXi $fp, -48, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 4 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1733; cg.c:790:21
  Ready @4c
  TopQ.A TopLatency SU(3) 4c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 4
  Executed: 5c
  Critical: 4c, 4 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 4 
Queue TopQ.A: 5 
Pick Top ONLY1     
Scheduling SU(5) $x17 = ADDXrs renamable $x8, renamable $x17, 0, debug-location !1736; cg.c:790:33
  Ready @5c
  TopQ.A TopLatency SU(5) 5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 4 
  TopQ.A RemainingLatency 0 + 6c > CritPath 16
  Cand SU(6) ORDER                              
  Cand SU(4) ORDER                              
Pick Top ORDER     
Scheduling SU(4) renamable $w18 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
  Ready @6c
  *** Max MOps 1 at cycle 6
Cycle: 7 TopQ.A
TopQ.A @7c
  Retired: 6
  Executed: 7c
  Critical: 6c, 6 MOps
  ExpectedLatency: 5c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) renamable $w17 = LDURWi renamable $x17, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
  Ready @7c
  TopQ.A TopLatency SU(6) 6c
  TopQ.A BotLatency SU(6) 10c
  *** Max MOps 1 at cycle 7
Cycle: 8 TopQ.A
TopQ.A @8c
  Retired: 7
  Executed: 8c
  Critical: 7c, 7 MOps
  ExpectedLatency: 6c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 11 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 7 
Pick Top ONLY1     
Scheduling SU(7) $w17 = SUBWrs renamable $w18, renamable $w17, 0, debug-location !1739; cg.c:790:31
  Ready @11c
  TopQ.A TopLatency SU(7) 10c
  *** Max MOps 1 at cycle 11
Cycle: 12 TopQ.A
TopQ.A @12c
  Retired: 8
  Executed: 12c
  Critical: 8c, 8 MOps
  ExpectedLatency: 10c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 8 
Pick Top ONLY1     
Scheduling SU(8) STRWroX renamable $w17, renamable $x16, renamable $x8, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
  Ready @12c
  TopQ.A TopLatency SU(8) 11c
  *** Max MOps 1 at cycle 12
Cycle: 13 TopQ.A
TopQ.A @13c
  Retired: 9
  Executed: 13c
  Critical: 9c, 9 MOps
  ExpectedLatency: 11c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 9 
Pick Top ONLY1     
Scheduling SU(9) renamable $w8 = LDRWui $sp, 21, debug-location !1743 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
  Ready @13c
  TopQ.A TopLatency SU(9) 12c
  *** Max MOps 1 at cycle 13
Cycle: 14 TopQ.A
TopQ.A @14c
  Retired: 10
  Executed: 14c
  Critical: 10c, 10 MOps
  ExpectedLatency: 12c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 17 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 10 
Pick Top ONLY1     
Scheduling SU(10) renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1743; cg.c:789:33
  Ready @17c
  TopQ.A TopLatency SU(10) 16c
  *** Max MOps 1 at cycle 17
Cycle: 18 TopQ.A
TopQ.A @18c
  Retired: 11
  Executed: 18c
  Critical: 11c, 11 MOps
  ExpectedLatency: 16c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.63 ***
SU(0):   renamable $x8 = LDRSWui $sp, 21, debug-location !1735 :: (dereferenceable load 4 from %ir.j); cg.c:790:28
SU(2):   renamable $x17 = LDRXui $fp, 7, debug-location !1736 :: (dereferenceable load 8 from %ir.nzloc.addr); cg.c:790:33
SU(1):   renamable $x16 = LDURXi $fp, -48, debug-location !1733 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:790:21
SU(3):   renamable $x8 = UBFMXri renamable $x8, 62, 61, debug-location !1733; cg.c:790:21
SU(5):   $x17 = ADDXrs renamable $x8, renamable $x17, 0, debug-location !1736; cg.c:790:33
SU(4):   renamable $w18 = LDRWroX renamable $x16, renamable $x8, 0, 0, debug-location !1733 :: (load 4 from %ir.arrayidx265); cg.c:790:21
SU(6):   renamable $w17 = LDURWi renamable $x17, -4, debug-location !1736 :: (load 4 from %ir.arrayidx268); cg.c:790:33
SU(7):   $w17 = SUBWrs renamable $w18, renamable $w17, 0, debug-location !1739; cg.c:790:31
SU(8):   STRWroX renamable $w17, renamable $x16, renamable $x8, 0, 0, debug-location !1742 :: (store 4 into %ir.arrayidx271); cg.c:790:19
SU(9):   renamable $w8 = LDRWui $sp, 21, debug-location !1743 :: (dereferenceable load 4 from %ir.j); cg.c:789:33
SU(10):   renamable $w8 = nsw ADDWri renamable $w8, 1, 0, debug-location !1743; cg.c:789:33

Fixup kills for %bb.63
********** MI Scheduling **********
sparse:%bb.64 for.end274
  From: renamable $x8 = LDURXi $fp, -48, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
    To: $sp = frame-destroy ADDXri $sp, 192, 0, debug-location !1751; cg.c:793:1
 RegionInstrs: 7
ScheduleDAGMI::schedule starting
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$x8
    SU(5): Anti Latency=0
SU(1):   renamable $x16 = LDURSWi $fp, -84, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 9
  Successors:
    SU(2): Data Latency=4 Reg=$x16
    SU(5): Anti Latency=0
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 4
  Height             : 5
  Predecessors:
    SU(1): Data Latency=4 Reg=$x16
    SU(0): Out  Latency=1
    SU(0): Data Latency=4 Reg=$x8
  Successors:
    SU(3): Out  Latency=1
    SU(3): Data Latency=4 Reg=$w8
    SU(4): Ord  Latency=0 Memory
SU(3):   renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1749; cg.c:792:25
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 1
  Predecessors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=4 Reg=$w8
  Successors:
    SU(4): Data Latency=1 Reg=$w8
SU(4):   STRWui renamable $w8, $sp, 18, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=$w8
    SU(2): Ord  Latency=0 Memory
SU(5):   $fp, $lr = frame-destroy LDPXi $sp, 22, debug-location !1751 :: (load 8 from %stack.33), (load 8 from %stack.32); cg.c:793:1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Anti Latency=0
    SU(0): Anti Latency=0
  Successors:
    ExitSU: Ord  Latency=3 Artificial
SU(6):   $x20, $x19 = frame-destroy LDPXi $sp, 20, debug-location !1751 :: (load 8 from %stack.35), (load 8 from %stack.34); cg.c:793:1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 192, 0, debug-location !1751; cg.c:793:1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Ord  Latency=3 Artificial
    SU(5): Ord  Latency=3 Artificial
Critical Path: (PGS-RR) 9
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 6 
  TopQ.A RemainingLatency 0 + 0c > CritPath 9
  Cand SU(0) ORDER                              
Pick Top TOP-PATH  
Scheduling SU(0) renamable $x8 = LDURXi $fp, -48, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
  Ready @0c
  TopQ.A BotLatency SU(0) 9c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 6 1 
  TopQ.A RemainingLatency 0 + 1c > CritPath 9
  Cand SU(6) ORDER                              
  Cand SU(1) TOP-PATH                  9 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $x16 = LDURSWi $fp, -84, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
  Ready @1c
  TopQ.A BotLatency SU(1) 9c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 5 
  TopQ.A RemainingLatency 0 + 2c > CritPath 9
  Cand SU(6) ORDER                              
  Cand SU(5) ORDER                              
Pick Top ORDER     
Scheduling SU(5) $fp, $lr = frame-destroy LDPXi $sp, 22, debug-location !1751 :: (load 8 from %stack.33), (load 8 from %stack.32); cg.c:793:1
  Ready @2c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 2 
Queue TopQ.A: 6 
Pick Top ONLY1     
Scheduling SU(6) $x20, $x19 = frame-destroy LDPXi $sp, 20, debug-location !1751 :: (load 8 from %stack.35), (load 8 from %stack.34); cg.c:793:1
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 5 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 2 
Pick Top ONLY1     
Scheduling SU(2) renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
  Ready @5c
  TopQ.A TopLatency SU(2) 4c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 5
  Executed: 6c
  Critical: 5c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Cycle: 9 TopQ.A
Queue TopQ.P: 
Queue TopQ.A: 3 
Pick Top ONLY1     
Scheduling SU(3) renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1749; cg.c:792:25
  Ready @9c
  TopQ.A TopLatency SU(3) 8c
  *** Max MOps 1 at cycle 9
Cycle: 10 TopQ.A
TopQ.A @10c
  Retired: 6
  Executed: 10c
  Critical: 6c, 6 MOps
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRWui renamable $w8, $sp, 18, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9
  Ready @10c
  TopQ.A TopLatency SU(4) 9c
  *** Max MOps 1 at cycle 10
Cycle: 11 TopQ.A
TopQ.A @11c
  Retired: 7
  Executed: 11c
  Critical: 7c, 7 MOps
  ExpectedLatency: 9c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.64 ***
SU(0):   renamable $x8 = LDURXi $fp, -48, debug-location !1747 :: (dereferenceable load 8 from %ir.rowstr.addr); cg.c:792:11
SU(1):   renamable $x16 = LDURSWi $fp, -84, debug-location !1748 :: (dereferenceable load 4 from %ir.nrows); cg.c:792:18
SU(5):   $fp, $lr = frame-destroy LDPXi $sp, 22, debug-location !1751 :: (load 8 from %stack.33), (load 8 from %stack.32); cg.c:793:1
SU(6):   $x20, $x19 = frame-destroy LDPXi $sp, 20, debug-location !1751 :: (load 8 from %stack.35), (load 8 from %stack.34); cg.c:793:1
SU(2):   renamable $w8 = LDRWroX renamable $x8, renamable $x16, 0, 1, debug-location !1747 :: (load 4 from %ir.arrayidx276); cg.c:792:11
SU(3):   renamable $w8 = SUBWri renamable $w8, 1, 0, debug-location !1749; cg.c:792:25
SU(4):   STRWui renamable $w8, $sp, 18, debug-location !1750 :: (store 4 into %ir.nza); cg.c:792:9

Fixup kills for %bb.64
Before MISched:
# Machine code for function icnvrt: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: $d0 in %0, $w0 in %1

bb.0.entry:
  liveins: $d0, $w0
  %1:gpr32 = COPY $w0
  %0:fpr64 = COPY $d0
  STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
  STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
  %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1759; cg.c:843:55
  %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1761; cg.c:843:61
  %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1762; cg.c:843:49
  $w8 = COPY %4:gpr32, debug-location !1763; cg.c:843:42
  RET_ReallyLR implicit killed $w8, debug-location !1763; cg.c:843:42

# End machine code for function icnvrt.

********** MI Scheduling **********
icnvrt:%bb.0 entry
  From: %1:gpr32 = COPY $w0
    To: RET_ReallyLR implicit killed $w8, debug-location !1763; cg.c:843:42
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=0
Max Pressure: GPR64temp=1
FPR8=2
GPR32=1
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
Live In: B0 W0 
Live Out: 
Live Thru: 
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
Bottom Pressure:
GPR64temp=1
GPR32=1
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %1:gpr32 = COPY $w0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(4): Data Latency=0 Reg=%1
    SU(3): Data Latency=0 Reg=%1
  Pressure Diff      : 
  Single Issue       : false;
SU(1):   %0:fpr64 = COPY $d0
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=0 Reg=%0
    SU(2): Data Latency=0 Reg=%0
  Pressure Diff      : ZPR_3b 1
  Single Issue       : false;
SU(2):   STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%0
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(3):   STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Pressure Diff      : GPR32 1
  Single Issue       : false;
SU(4):   %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1759; cg.c:843:55
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    SU(5): Data Latency=1 Reg=%2
  Pressure Diff      : FPR8 -1    GPR32 1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Single Issue       : false;
SU(5):   %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1761; cg.c:843:61
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%2
    SU(1): Data Latency=0 Reg=%0
  Successors:
    SU(6): Data Latency=1 Reg=%3
  Pressure Diff      : FPR8 1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(6):   %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1762; cg.c:843:49
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%3
  Successors:
    SU(7): Data Latency=1 Reg=%4
  Pressure Diff      : FPR8 1    GPR32 -1    FPR8+ZPR_3b 1    FPR8+ZPR4_with_zsub1_in_ZPR_3b 1    FPR8+ZPR4_with_zsub2_in_ZPR_3b 1    FPR8+ZPR4_with_zsub3_in_ZPR_3b 1    ZPR_4b 1    ZPR 1
  Single Issue       : false;
SU(7):   $w8 = COPY %4:gpr32, debug-location !1763; cg.c:843:42
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%4
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Pressure Diff      : GPR64temp -1
  Single Issue       : false;
ExitSU:   RET_ReallyLR implicit killed $w8, debug-location !1763; cg.c:843:42
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 3
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 7 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) REG-MAX                            
  Cand SU(7) PHYS-REG                           
Picking from Top:
  Cand SU(0) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(7) $w8 = COPY %4:gpr32, debug-location !1763; cg.c:843:42
Bottom Pressure:
GPR32=1
  LiveReg: %4
  UpdateRegP: SU(7) $w8 = COPY %4:gpr32, debug-location !1763; cg.c:843:42
              to GPR64temp -1    GPR32 -1
  Ready @0c
  BotQ.A TopLatency SU(7) 3c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 0 1 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(0) NOCAND                             
  Cand SU(0) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(0) %1:gpr32 = COPY $w0
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
  TopQ.A BotLatency SU(0) 3c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 1 4 3 
Picking from Bot:
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(1) ORDER                              
  Cand SU(1) PHYS-REG                           
Pick Top PHYS-REG  
Scheduling SU(1) %0:fpr64 = COPY $d0
Top Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @0c
TopQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 6 
Queue BotQ.A: 3 2 
Queue TopQ.P: 
Queue TopQ.A: 3 4 2 
Picking from Bot:
  Cand SU(2) REG-MAX                            
Picking from Top:
  Cand SU(3) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(2) STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %0
  UpdateRegP: SU(2) STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
              to 
  UpdateRegP: SU(5) %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1761; cg.c:843:61
              to 
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 6 
Queue TopQ.P: 
Queue TopQ.A: 3 4 
BotQ.A RemLatency SU(6) 2c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(6) REG-MAX                            
Picking from Top:
  Cand SU(3) ORDER                              
Pick Bot REG-MAX   
Scheduling SU(6) %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1762; cg.c:843:49
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %3
  UpdateRegP: SU(6) %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1762; cg.c:843:49
              to GPR32 -1
  Ready @1c
  BotQ.A BotLatency SU(6) 1c
  *** Max MOps 1 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 5 
Queue TopQ.P: 
Queue TopQ.A: 3 4 
BotQ.A RemLatency SU(5) 1c
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(5) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(5) %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1761; cg.c:843:61
Bottom Pressure:
FPR8=2
FPR8+ZPR_3b=2
FPR8+ZPR4_with_zsub1_in_ZPR_3b=2
FPR8+ZPR4_with_zsub2_in_ZPR_3b=2
FPR8+ZPR4_with_zsub3_in_ZPR_3b=2
ZPR_4b=2
ZPR=2
  LiveReg: %2
  UpdateRegP: SU(5) %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1761; cg.c:843:61
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @2c
  BotQ.A BotLatency SU(5) 2c
  *** Max MOps 1 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 4 
Queue TopQ.P: 
Queue TopQ.A: 3 4 
Picking from Bot:
  Cand SU(3) ORDER                              
  Cand SU(4) ORDER                              
Picking from Top:
  Cand SU(3) NOCAND                             
Pick Bot ORDER     
Scheduling SU(4) %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1759; cg.c:843:55
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  LiveReg: %1
  UpdateRegP: SU(3) STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
              to 
  UpdateRegP: SU(4) %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1759; cg.c:843:55
              to FPR8 -1    FPR8+ZPR_3b -1    FPR8+ZPR4_with_zsub1_in_ZPR_3b -1    FPR8+ZPR4_with_zsub2_in_ZPR_3b -1    FPR8+ZPR4_with_zsub3_in_ZPR_3b -1    ZPR_4b -1    ZPR -1
  Ready @3c
  BotQ.A BotLatency SU(4) 3c
  *** Max MOps 1 at cycle 3
Cycle: 4 BotQ.A
BotQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 
Pick Bot ONLY1     
Scheduling SU(3) STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
Bottom Pressure:
FPR8=1
GPR32=1
FPR8+ZPR_3b=1
FPR8+ZPR4_with_zsub1_in_ZPR_3b=1
FPR8+ZPR4_with_zsub2_in_ZPR_3b=1
FPR8+ZPR4_with_zsub3_in_ZPR_3b=1
ZPR_4b=1
ZPR=1
  Ready @4c
  *** Max MOps 1 at cycle 4
Cycle: 5 BotQ.A
BotQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %1:gpr32 = COPY $w0
SU(1):   %0:fpr64 = COPY $d0
SU(3):   STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
SU(4):   %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1759; cg.c:843:55
SU(5):   %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1761; cg.c:843:61
SU(6):   %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1762; cg.c:843:49
SU(2):   STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
SU(7):   $w8 = COPY %4:gpr32, debug-location !1763; cg.c:843:42

********** INTERVALS **********
B0 [0B,32r:0)  0@0B-phi
W0 [0B,16r:0)  0@0B-phi
%0 [32r,120r:0)  0@32r weight:0.000000e+00
%1 [16r,80r:0)  0@16r weight:0.000000e+00
%2 [80r,96r:0)  0@80r weight:0.000000e+00
%3 [96r,112r:0)  0@96r weight:0.000000e+00
%4 [112r,128r:0)  0@112r weight:0.000000e+00
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function icnvrt: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP]
  fi#1: size=4, align=4, at location [SP]
Function Live Ins: $d0 in %0, $w0 in %1

0B	bb.0.entry:
	  liveins: $d0, $w0
16B	  %1:gpr32 = COPY $w0
32B	  %0:fpr64 = COPY $d0
64B	  STRWui %1:gpr32, %stack.1.ipwr2.addr, 0 :: (store 4 into %ir.ipwr2.addr)
80B	  %2:fpr64 = SCVTFUWDri %1:gpr32, debug-location !1759; cg.c:843:55
96B	  %3:fpr64 = FMULDrr %2:fpr64, %0:fpr64, debug-location !1761; cg.c:843:61
112B	  %4:gpr32 = FCVTZSUWDr %3:fpr64, debug-location !1762; cg.c:843:49
120B	  STRDui %0:fpr64, %stack.0.x.addr, 0 :: (store 8 into %ir.x.addr)
128B	  $w8 = COPY %4:gpr32, debug-location !1763; cg.c:843:42
144B	  RET_ReallyLR implicit killed $w8, debug-location !1763; cg.c:843:42

# End machine code for function icnvrt.

Before post-MI-sched:
# Machine code for function icnvrt: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=8, align=8, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-36]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-8]
  fi#4: size=8, align=8, at location [SP-16]
Function Live Ins: $d0, $w0

bb.0.entry:
  liveins: $d0, $w0, $lr
  $sp = frame-setup SUBXri $sp, 48, 0
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store 8 into %stack.4), (store 8 into %stack.3)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  frame-setup CFI_INSTRUCTION offset $w30, -8
  frame-setup CFI_INSTRUCTION offset $w29, -16
  STRWui renamable $w0, $sp, 3 :: (store 4 into %ir.ipwr2.addr)
  renamable $d1 = SCVTFUWDri killed renamable $w0, debug-location !1759; cg.c:843:55
  renamable $d1 = FMULDrr killed renamable $d1, renamable $d0, debug-location !1761; cg.c:843:61
  renamable $w8 = FCVTZSUWDr killed renamable $d1, debug-location !1762; cg.c:843:49
  STRDui killed renamable $d0, $sp, 2 :: (store 8 into %ir.x.addr)
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !1763 :: (load 8 from %stack.4), (load 8 from %stack.3); cg.c:843:42
  $sp = frame-destroy ADDXri $sp, 48, 0, debug-location !1763; cg.c:843:42
  RET undef $lr, implicit $w8, debug-location !1763; cg.c:843:42

# End machine code for function icnvrt.

********** MI Scheduling **********
icnvrt:%bb.0 entry
  From: STRWui renamable $w0, $sp, 3 :: (store 4 into %ir.ipwr2.addr)
    To: $sp = frame-destroy ADDXri $sp, 48, 0, debug-location !1763; cg.c:843:42
 RegionInstrs: 6
ScheduleDAGMI::schedule starting
SU(0):   STRWui renamable $w0, $sp, 3 :: (store 4 into %ir.ipwr2.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(1):   renamable $d1 = SCVTFUWDri renamable $w0, debug-location !1759; cg.c:843:55
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Out  Latency=1
    SU(2): Data Latency=1 Reg=$d1
SU(2):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !1761; cg.c:843:61
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Out  Latency=1
    SU(1): Data Latency=1 Reg=$d1
  Successors:
    SU(3): Data Latency=1 Reg=$d1
SU(3):   renamable $w8 = FCVTZSUWDr renamable $d1, debug-location !1762; cg.c:843:49
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=$d1
SU(4):   STRDui renamable $d0, $sp, 2 :: (store 8 into %ir.x.addr)
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
SU(5):   $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !1763 :: (load 8 from %stack.4), (load 8 from %stack.3); cg.c:843:42
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 0
  Height             : 3
  Successors:
    ExitSU: Ord  Latency=3 Artificial
ExitSU:   $sp = frame-destroy ADDXri $sp, 48, 0, debug-location !1763; cg.c:843:42
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Ord  Latency=3 Artificial
Disabled scoreboard hazard recognizer
Critical Path: (PGS-RR) 3
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 5 
  TopQ.A RemainingLatency 0 + 0c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
  Cand SU(5) TOP-PATH                  3 cycles 
Pick Top TOP-PATH  
Scheduling SU(5) $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !1763 :: (load 8 from %stack.4), (load 8 from %stack.3); cg.c:843:42
  Ready @0c
  TopQ.A BotLatency SU(5) 3c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 1 4 
  TopQ.A RemainingLatency 0 + 1c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(1) TOP-PATH                  2 cycles 
Pick Top TOP-PATH  
Scheduling SU(1) renamable $d1 = SCVTFUWDri renamable $w0, debug-location !1759; cg.c:843:55
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 2 
  TopQ.A RemainingLatency 0 + 2c > CritPath 3
  Cand SU(0) ORDER                              
  Cand SU(2) TOP-PATH                  1 cycles 
Pick Top TOP-PATH  
Scheduling SU(2) renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !1761; cg.c:843:61
  Ready @2c
  TopQ.A TopLatency SU(2) 1c
  *** Max MOps 1 at cycle 2
Cycle: 3 TopQ.A
TopQ.A @3c
  Retired: 3
  Executed: 3c
  Critical: 3c, 3 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 4 3 
  TopQ.A RemainingLatency 0 + 3c > CritPath 3
  Cand SU(0) ORDER                              
Pick Top ORDER     
Scheduling SU(0) STRWui renamable $w0, $sp, 3 :: (store 4 into %ir.ipwr2.addr)
  Ready @3c
  *** Max MOps 1 at cycle 3
Cycle: 4 TopQ.A
TopQ.A @4c
  Retired: 4
  Executed: 4c
  Critical: 4c, 4 MOps
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 3 4 
  TopQ.A RemainingLatency 0 + 4c > CritPath 3
  Cand SU(3) ORDER                              
Pick Top ORDER     
Scheduling SU(3) renamable $w8 = FCVTZSUWDr renamable $d1, debug-location !1762; cg.c:843:49
  Ready @4c
  TopQ.A TopLatency SU(3) 2c
  *** Max MOps 1 at cycle 4
Cycle: 5 TopQ.A
TopQ.A @5c
  Retired: 5
  Executed: 5c
  Critical: 5c, 5 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 4 
Pick Top ONLY1     
Scheduling SU(4) STRDui renamable $d0, $sp, 2 :: (store 8 into %ir.x.addr)
  Ready @5c
  *** Max MOps 1 at cycle 5
Cycle: 6 TopQ.A
TopQ.A @6c
  Retired: 6
  Executed: 6c
  Critical: 6c, 6 MOps
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(5):   $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !1763 :: (load 8 from %stack.4), (load 8 from %stack.3); cg.c:843:42
SU(1):   renamable $d1 = SCVTFUWDri renamable $w0, debug-location !1759; cg.c:843:55
SU(2):   renamable $d1 = FMULDrr renamable $d1, renamable $d0, debug-location !1761; cg.c:843:61
SU(0):   STRWui renamable $w0, $sp, 3 :: (store 4 into %ir.ipwr2.addr)
SU(3):   renamable $w8 = FCVTZSUWDr renamable $d1, debug-location !1762; cg.c:843:49
SU(4):   STRDui renamable $d0, $sp, 2 :: (store 8 into %ir.x.addr)

********** MI Scheduling **********
icnvrt:%bb.0 entry
  From: frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store 8 into %stack.4), (store 8 into %stack.3)
    To: frame-setup CFI_INSTRUCTION def_cfa $w29, 16
 RegionInstrs: 2
ScheduleDAGMI::schedule starting
SU(0):   frame-setup STPXi $fp, $lr, $sp, 4 :: (store 8 into %stack.4), (store 8 into %stack.3)
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Anti Latency=0
SU(1):   $fp = frame-setup ADDXri $sp, 32, 0
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Anti Latency=0
ExitSU:   frame-setup CFI_INSTRUCTION def_cfa $w29, 16
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path: (PGS-RR) 0
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 0 
Pick Top ONLY1     
Scheduling SU(0) frame-setup STPXi $fp, $lr, $sp, 4 :: (store 8 into %stack.4), (store 8 into %stack.3)
  Ready @0c
  *** Max MOps 1 at cycle 0
Cycle: 1 TopQ.A
TopQ.A @1c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
Queue TopQ.P: 
Queue TopQ.A: 1 
Pick Top ONLY1     
Scheduling SU(1) $fp = frame-setup ADDXri $sp, 32, 0
  Ready @1c
  *** Max MOps 1 at cycle 1
Cycle: 2 TopQ.A
TopQ.A @2c
  Retired: 2
  Executed: 2c
  Critical: 2c, 2 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMI::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   frame-setup STPXi $fp, $lr, $sp, 4 :: (store 8 into %stack.4), (store 8 into %stack.3)
SU(1):   $fp = frame-setup ADDXri $sp, 32, 0

Fixup kills for %bb.0
